*  AUTHOR: Owen Holman
*    DATE: April 03, 2002 - Allow user to Delete TS Bills
*  REVISIONS:
* Instructions to create file
*  Get an Excel file save as U:\-USER-\00000-DELETE.txt
*    where 00000 is the client number
*    '-DELETE' is a literal
*    and .txt is the Formatted Text TAB Delmited option
*    Keywords to search on: DELETE TS; DELETE TRAFFIC SURVEY BILLS
********************************************************************
*
$INCLUDE PROG.ADMIN INC_OPTIONS
* INITIALIZE VARIABLES
*
      SEQ=0
      PROMPT''
      CALL GET.USER(USER)
*
********************************************************************
*
*  TABLE TO CHANGE FIELD NUMBERS (VALUES) OF DATA
*
********************************************************************
*
* ASK FOR CLIENT
*
      TESTING=0
      PROG.NAME='FB.CHANGE.DIVS'
      PROG.DESC="Change Client Division from Spreadsheet"
      PACK.NAME="Freight Billing"

       UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.CHANGE.DIVS' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
       CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/23/2010
      CALL AFS.SCR.HEAD(CO.ID, FILE.ID, '', PROG.NAME, PROG.DESC, PACK.NAME, CO.NAME, TIME.DATE, 1)
      BEGIN CASE ; * JMK01
*
* Authorized Users ; * JMK01
*
         CASE USER = 'DAVID'
         CASE USER = 'OWEN'
         CASE USER = 'MKERBOW'
*
* Restrict the other MoFo's
*
         CASE 1
            SUBJ='-s"Division Changing Violation"'
            TEXT=USER:' ':DATE()'D2/':' ':OCONV(TIME(),'MTHS')
            TEXT<-1>='User: ':USER:' tried to access Division Maintenance'
            TEXT<-1>="(This user's name was not included in the program to allow access)"
            EXECUTE 'mail ':SUBJ:' owen',//IN. < TEXT

            CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
            CALL FB.PRINT.CENT(1,80,14,'Access Denied! See OWEN for Access')
            CALL ELINE('')
            RETURN
      END CASE
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN '','VOC' TO F.VOC ELSE
         CALL OPEN.ABORT("VOC",PROG.NAME)
      END


100:  HELP='Enter the Client Number or [EX]it'
      CRT @(0,03):@(-3):
      CRT @(0,05):'Instructions for use BEFORE Continuing:'
      CRT @(0,06):'Step  1 Open Excel THEN Open the Spreadsheet with the new AND old division codes'
      CRT @(0,07):'Step  2 Highlight the column with the old division codes'
      CRT @(0,08):'Step  3 Copy and Insert that column before column "A"'
      CRT @(0,09):'Step  4 Highlight the column with the new division codes'
      CRT @(0,10):'Step  5 Copy and Insert that column before column "B"'
      CRT @(0,11):'Step  6 Note the starting row to process'
      CRT @(0,12):"Step  7 CLICK File, CLICK Save As, 'Change directory' to: (U:\":USER:"\) Drive"
      CRT @(0,13):"Step  8 'Change Save as type:' to: Text (Tab Delimited)(.txt)"
      CRT @(0,14):'Step  9 Name the file CLIENT#-div-chg.txt (Example: 99999-div-chg.txt)'
      CRT @(0,15):"        Ignore the 'Not Compatible' messages you receive and click OK, then YES"

      CALL GEN.IN(0,3,'Enter Client Number  #####','',Q,0,21,'','',1,-5,3,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' ! QI='EX' ! QI='X'
            GOTO EXIT.PROGRAM
         CASE NOT(NUM(QI))
            CALL ELINE('CLIENT MUST BE NUMERIC')
            GOTO 100
      END CASE
      CLIENT=Q'R%5'
      READV CLIENT.NAME FROM F.CLIENTS,CLIENT,2 ELSE
         CALL ELINE('Client#: ':CLIENT:' is not on file!')
         GO 100
      END
      CRT @(26,3):"- ":CLIENT.NAME:@(-4):
      OPEN '','FB.BILLS.HIST,':CLIENT TO F.HIST ELSE
         CALL OPEN.ABORT("FB.BILLS.HIST,":CLIENT,PROG.NAME)
         GO 100
      END
      OPEN '','FB.BILLS,':CLIENT TO F.BILLS ELSE
         CALL OPEN.ABORT("FB.BILLS,":CLIENT,PROG.NAME)
         GO 100
      END
      OPEN '','DIVISION.CODES,':CLIENT TO F.DIV ELSE
         CALL OPEN.ABORT("DIVISION.CODES,":CLIENT,PROG.NAME)
         GO 100
      END
*
* OPEN FILE
*
      READ BILLDATA.REC FROM F.VOC,"BILLDATA" ELSE
         GOSUB CALL.NET.ADMIN
         CALL ELINE('UNABLE TO OPEN "VOC BILLDATA"')
         STOP
      END

      BILLDATA.REC<2>:='\':USER
      WRITE BILLDATA.REC ON F.VOC,"BILLDATA.":USER ELSE
         CALL ELINE('UNABLE TO WRITE VOC "BILLDATA.":USER')
         GOSUB CALL.NET.ADMIN
         STOP
      END
      OPEN '','BILLDATA.':USER TO F.BILLDATA ELSE
         CALL ELINE(USER:" is not a folder in U:\Billdata. Add the folder and try again")
         GOSUB CALL.NET.ADMIN
         STOP
      END
      OPEN '','FB.OPEN.BILLS' TO F.OPEN.BILLS ELSE
         CALL OPEN.ABORT("FB.OPEN.BILLS",PROG.NAME)
         GO 100
      END
      OPEN '','FB.PAY' TO F.PAY ELSE
         CALL OPEN.ABORT("FB.PAY",PROG.NAME)
         GO 100
      END
      OPEN '','FB.BILLS.CRX' TO F.BILLS.CRX ELSE
         CALL OPEN.ABORT("FB.BILLS.CRX",PROG.NAME)
         GO 100
      END

*
* READ RAW.DATA
*
      RAW.ID=CLIENT:"-div-chg.txt"
      READ RAW.DATA FROM F.BILLDATA,RAW.ID ELSE
         CALL ELINE('U:\':USER:'\':RAW.ID:' is not on file.  Must be present to delete bills')
         GOTO 100
      END
      RAW.DATA=CHANGE(RAW.DATA,CHAR(9),@VM)        ; * Replace Tabs with Values
      OLD.COL="A"
      NEW.COL="B"
      COL1=1
      COL2=2
*
* GET INFO AND WRITE TO FILE
*
      NUM.LINES=DCOUNT(RAW.DATA,@AM)

*
* Get starting row of new division codes
*
200:  HELP='Enter the starting row number of the spreadsheet or [EX]it'

      CALL GEN.IN(0,16,'Enter starting row  #####','',Q,0,21,'','',1,-5,16,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'
            GOTO EXIT.PROGRAM
         CASE QI='' ! QI='X'
            GOTO 100
         CASE NOT(NUM(QI))
            CALL ELINE('ROW MUST BE NUMERIC')
            GOTO 200
      END CASE
      START.ROW=QI
*
* Verify selection criteria is correct.
*
VERIFY.SELECTION:***
      CRT @(0,18):"By typing [I-UNDERSTAND] I agree to PERMANENTLY changing divisions from "
      CRT @(0,19):'spreadsheet "':RAW.ID:'" column "':OLD.COL:'" to column "':NEW.COL:'" starting in row "':START.ROW:'"'
      CRT @(0,20):"in Freight Bills and Div Codes for the account ":CLIENT:"-":CLIENT.NAME
      HELP="X=Change. EX=Exit. [I-UNDERSTAND]=Continue."
      CALL GEN.IN(0,22,'Enter selection please. ------------','',Q,0,12,'','',0,-12,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='X'
            CRT @(0,19):@(-3):
            GOTO 100
         CASE QI='EX'
            STOP
         CASE QI='I-UNDERSTAND'
            NULL
         CASE 1
            CALL ELINE('Invalid entry. Must be [X], [EX], or [I-UNDERSTAND].')
            GOTO VERIFY.SELECTION
      END CASE
      CRT @(0,22)

*
* Build working array
*
      DIV.ARRAY=''
      FOR X = 1 TO NUM.LINES
         IF X < START.ROW THEN GO SKIP.LINE
         LINE=RAW.DATA<X>
         IF TRIM(LINE)='' THEN GO SKIP.LINE
         OLD.DIV=LINE<1,COL1>'R%5'
         NEW.DIV=LINE<1,COL2>'R%5'
         IF OLD.DIV=NEW.DIV THEN GO SKIP.LINE
         LOCATE(OLD.DIV,DIV.ARRAY,1;ODPOS;'AR') THEN
            LOCATE(NEW.DIV,DIV.ARRAY,2,ODPOS;NDPOS;'AR') ELSE
               DIV.ARRAY=INSERT(DIV.ARRAY,2,ODPOS,NDPOS;NEW.DIV)
            END
         END ELSE
            DIV.ARRAY=INSERT(DIV.ARRAY,1,ODPOS;OLD.DIV)
            DIV.ARRAY=INSERT(DIV.ARRAY,2,ODPOS;NEW.DIV)
         END
         LOCATE(NEW.DIV,DIV.ARRAY,3;NDPOS;'AR') THEN
            LOCATE(OLD.DIV,DIV.ARRAY,4,NDPOS;ODPOS;'AR') ELSE
               DIV.ARRAY=INSERT(DIV.ARRAY,4,NDPOS,ODPOS;OLD.DIV)
            END
         END ELSE
            DIV.ARRAY=INSERT(DIV.ARRAY,3,NDPOS;NEW.DIV)
            DIV.ARRAY=INSERT(DIV.ARRAY,4,NDPOS;OLD.DIV)
         END
SKIP.LINE:*
      NEXT X
      IF TESTING THEN
         PRINTER ON
         NVAL=DCOUNT(DIV.ARRAY<1>,@VM)
         FOR VAL=1 TO NVAL
            OLD.DIV=DIV.ARRAY<1,VAL>
            NEW.DIV=DIV.ARRAY<2,VAL>
            NEW.DIV=CHANGE(NEW.DIV,@VM,';')
            PRINT 'Old division ':OLD.DIV:' will be changed to new division ':NEW.DIV
         NEXT VAL
         PRINTER OFF
         PRINTER CLOSE
      END
*
* Scan for any Errors
*
      ERRORS=''
      EXC.DIV=''
*
* Scan for multiple new divisions
*
      NVAL=DCOUNT(DIV.ARRAY<1>,@VM)
      FOR VAL=1 TO NVAL
         OLD.DIV=DIV.ARRAY<1,VAL>
         NEW.DIV=DIV.ARRAY<2,VAL>
         NSVAL=DCOUNT(NEW.DIV,@SVM)
         IF NSVAL > 1 THEN
            LOCATE(OLD.DIV,EXC.DIV,1;DPOS;'AR') ELSE
               EXC.DIV=INSERT(EXC.DIV,1,DPOS;OLD.DIV)
            END
            FOR SVAL=1 TO NSVAL
               LOCATE(NEW.DIV<1,1,SVAL>,EXC.DIV,1;DPOS;'AR') ELSE
                  EXC.DIV=INSERT(EXC.DIV,1,DPOS;NEW.DIV<1,1,SVAL>)
               END
            NEXT SVAL
            NEW.DIV=CHANGE(NEW.DIV,@SVM,',')
            ERRORS<-1>='Old Division ':OLD.DIV:' has multiple new divisions; ':NEW.DIV
         END
*
* Check for possible division overlays
*
         NXT.DIV=NEW.DIV
         EOS=0
         LOOP
            LOCATE(NXT.DIV,DIV.ARRAY,1;NXTPOS) THEN
               NXT.DIV=DIV.ARRAY<2,NXTPOS>
            END ELSE
               EOS=1
            END
         UNTIL EOS DO
         REPEAT
         READ TEST FROM F.DIV,NXT.DIV THEN
            ERRORS<-1>='Division ':NXT.DIV:' is already on file and not setup for change.'
         END
      NEXT VAL
*
* Scan for multiple old divisions
*
      NVAL=DCOUNT(DIV.ARRAY<3>,@VM)
      FOR VAL=1 TO NVAL
         NEW.DIV=DIV.ARRAY<3,VAL>
         OLD.DIV=DIV.ARRAY<4,VAL>
         NSVAL=DCOUNT(OLD.DIV,@SVM)
         IF NSVAL > 1 THEN
            LOCATE(NEW.DIV,EXC.DIV,1;DPOS;'AR') ELSE
               EXC.DIV=INSERT(EXC.DIV,1,DPOS;NEW.DIV)
            END
            FOR SVAL=1 TO NSVAL
               LOCATE(OLD.DIV<1,1,SVAL>,EXC.DIV,1;DPOS;'AR') ELSE
                  EXC.DIV=INSERT(EXC.DIV,1,DPOS;OLD.DIV<1,1,SVAL>)
               END
            NEXT SVAL
            OLD.DIV=CHANGE(OLD.DIV,@SVM,',')
            ERRORS<-1>='New Division ':NEW.DIV:' has multiple old divisions; ':OLD.DIV
         END
      NEXT VAL
      IF TESTING THEN
         CALL ELINE('Division Array and Exclusion Array completed.')
      END
*
* Report any errors
*
      IF ERRORS#'' THEN
         NATT=DCOUNT(ERRORS,@AM)
         FOR ATT=1 TO NATT
            CRT ERRORS<ATT>
         NEXT ATT
         CALL ELINE('Please review and correct to continue.')
         IF NOT(TESTING) THEN
            GO EXIT.PROGRAM
         END
      END
*
* Start the changing process
*
      NVAL=DCOUNT(DIV.ARRAY<3>,@VM)
      FOR VAL=NVAL TO 1 STEP -1
         NEW.DIV=DIV.ARRAY<3,VAL>
         OLD.DIV=DIV.ARRAY<4,VAL>
         LOCATE(OLD.DIV,EXC.DIV,1;DPOS) THEN GO SKIP.DIV
         LOCATE(NEW.DIV,EXC.DIV,1;DPOS) THEN GO SKIP.DIV
         CRT 'Changing ':OLD.DIV:' to ':NEW.DIV
*
* Update Division File
*
         READU OLD.DIV.REC FROM F.DIV,OLD.DIV THEN
            DELETE F.DIV,OLD.DIV
            RELEASE F.DIV,OLD.DIV
            NEW.DIV.REC=OLD.DIV.REC
            WRITE NEW.DIV.REC ON F.DIV,NEW.DIV
         END
*
         CRT 'Changed ':OLD.DIV:' to ':NEW.DIV
SKIP.DIV:*
      NEXT VAL
*
* Get FB.BILLS.HIST file
*
      STMT='SELECT FB.BILLS.HIST,':CLIENT
      IF TESTING THEN
         CALL ELINE(STMT)
      END
      EXECUTE STMT PASSLIST CAPTURING RESULT
      NUM.ITMS=@SELECTED
      IF NUM.ITMS THEN
         EOF=0
         LOOP
            READNEXT FB.ID ELSE EOF=1
         UNTIL EOF DO
            FBC.ID=CLIENT:'*':FB.ID
*
* Get FB.BILLS.HIST record
*            
            READU FBH.REC FROM F.HIST,FB.ID THEN
               OLD.DIV=FBH.REC<9>
               LOCATE(OLD.DIV,DIV.ARRAY,1;DPOS) THEN
                  NEW.DIV=DIV.ARRAY<2,DPOS>
                  FBH.REC<9>=NEW.DIV
                  WRITE FBH.REC ON F.HIST,FB.ID
*
* Get FB.BILLS record
*            
                  READU FB.REC FROM F.BILLS,FB.ID THEN
                     FB.REC<9>=NEW.DIV
                     WRITE FB.REC ON F.BILLS,FB.ID
                  END
                  RELEASE F.BILLS,FB.ID
*
* Get FB.OPEN.BILLS record
*            
                  READU FBO.REC FROM F.OPEN.BILLS,FBC.ID THEN
                     FBO.REC<9>=NEW.DIV
                     WRITE FBO.REC ON F.OPEN.BILLS,FBC.ID
                  END
                  RELEASE F.OPEN.BILLS,FBC.ID
*
* Get FB.PAY record
*            
                  READU FBP.REC FROM F.PAY,FBC.ID THEN
                     FBP.REC<9>=NEW.DIV
                     WRITE FBP.REC ON F.PAY,FBC.ID
                  END
                  RELEASE F.PAY,FBC.ID
               END
            END
            RELEASE F.HIST,FB.ID
         REPEAT
      END
*
      CRT 'All freight bill divisions have been changed.'
      CRT
      CRT 'Press [ENTER] to Continue':
      INPUT NUL
      GO EXIT.PROGRAM
CALL.NET.ADMIN:***
      CALL ELINE("CALL NETWORK ADMINISTRATOR!")
      CALL ELINE("CALL NETWORK ADMINISTRATOR!!!!!")
      RETURN
*
EXIT.PROGRAM:*
*
      STOP
