***********************************************************************
* Program name : CHECK.OCR
* Author       : Greg Bino
* Date written : 06-28-2019
* Library      : FBBP
* COPYRIGHT (C) 2019 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* CHECK OCR IMAGE PRO TO FB.BILLS PRO ON FILE
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 06:50:29 on 02/16/2021.
*
* Start modification history
* Mod 00 01-10-19, grb,   New program
* 02/15/21 : NKH01 : ACCU-1133 Added server checking for dev
* End modification history
*
************************************************************************
*
* Initialize variables
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE UDO.H
      DIM BILLS(300)
      MAT BILLS = ""
      PROMPT ''
      TIMEOUT = 30000
      TODAY = OCONV(DATE(),"D4-")
      TODAY = TODAY[7,4]:"-":TODAY[1,2]:"-":TODAY[4,2]
      PROG.NAME='CHECK.OCR'
      FROM.DATE = '2019-01-01'
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * NKH01
      SERVER.NAME=SVR.VOUT<1>                      ; * NKH01            

      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'CHECK.OCR' ; UPL.VOUT = ''
      ***    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
      OPEN 'CONTROL' TO FILE.CNTL ELSE
         CALL ELINE('UNABLE TO OPEN CONTROL FILE')
         RETURN
      END
      OPEN 'OCR.LOG' TO F.OCR ELSE
         CALL ELINE('UNABLE TO OPEN OCR.LOG FILE')
         RETURN
      END
      OPEN 'OCR.TRACE' TO F.TRACE ELSE
         CALL ELINE('UNABLE TO OPEN OCR.TRACE FILE')
         RETURN
      END

      READ XMLPARAMS FROM FILE.CNTL,"CLIENT.OCR" THEN
         URL = XMLPARAMS<1>
         SERVER = XMLPARAMS<2>
         LOGGING = XMLPARAMS<4>          ; * Y/N
         LOGFILE = XMLPARAMS<5>
         EMAIL.RECIP = XMLPARAMS<6>
         TEST.FLG = XMLPARAMS<7>
      END ELSE
         ****      URL = 'https://imagingws.afs.net/images/list?clientFolder=':CLIENT.ID:'&imageKey=':IMAGE.NO
         LOGFILE="SEND.CLIENT.LOG"
         LOGGING = "N"
*          EMAIL.RECIP = 'gbino@afs.net'
         TEST.FLG = @FALSE
      END

      IF LOGGING = "Y" OR LOGGING = 1 THEN
         LOGGING = @TRUE
      END ELSE
         LOGGING = @FALSE
      END
      IF LOGGING THEN
         STAT = PROTOCOLLOGGING(LOGFILE, "ON", 10)
      END
      EMAIL.OUT=''
      EMAIL.OUT<1,-1>='HelpDesk@afs.net'
      EMAIL.OUT<2,-1>= EMAIL.RECIP
      EMAIL.OUT<4>='FBBP_CHECK.OCR@afs.net'
      EMAIL.OUT<5>='Error while trying to access CHECK.OCR Web-Service .'
      EOJ=0
      LOOP
      UNTIL EOJ DO
         PRINT CHAR(27):"`:"             ; * 80 CHARACTER SCREEN
         CRT @(-1)
         CRT @(5,2):"OCR Client Image Pro Number Check"
         CRT @(10,10):"Enter Client ": ; INPUT CLIENT
         CLIENT = OCONV(CLIENT,"MCU")
         IF CLIENT[1,1] = "E" THEN
            EOJ=1
            CONTINUE
         END
         CLIENT.ID = CLIENT"R%5"
         CALL OCR.FIND.IMAGE(CLIENT.ID)
         OPEN 'FB.BILLS,':CLIENT.ID TO FILE.BILLS ELSE
            CALL ELINE('UNABLE TO OPEN FB.BILLS,':CLIENT.ID)
            RETURN
         END
         STATUS = 0
         RESP.CNT=1
         RESP = ''
         VOUT=''
         GOSUB LIST.DATA
         CRT@(0,23):"RETURN TO CONTINUE ": ; INPUT RESPONSE
      REPEAT
9999:* THE END
      IF LOGGING THEN
         LOG.RET = PROTOCOLLOGGING(LOGFILE,"OFF",10)
      END
      STOP
**********************************************
LIST.DATA:
**********************************************
      PRINT CHAR(27):"`;"                ; * 132 character screen
       CRT "FB Bills Pro":SPACE(3):"Mismatch":SPACE(7):"Image Pro":SPACE(6):"Image No":SPACE(4):"Port":SPACE(2):"Keyed Date":SPACE(1):"Keyed Time":SPACE(3):"Keyer":SPACE(5):"Img Updt":SPACE(3):"Fail Verify"
      FILE = "FB.BILLS,":CLIENT.ID
      CMD = 'SSELECT ' : FILE : ' BY 284 BY 285  WITH 280'
      EXECUTE CMD CAPTURING OUTPUT RETURNING JUNK
      EOJ1 = 0
      LOOP
         READNEXT ID ELSE EOJ1 = 1
      UNTIL EOJ1 DO
         MATREAD BILLS FROM FILE.BILLS,ID THEN
            IMAGE.NO = BILLS(280)
            IF SERVER.NAME = 'AFS' THEN   ; * NKH01                     
               URL = 'http://imagingws.afs.net/images/list?clientFolder=':CLIENT.ID:'&imageKey=':IMAGE.NO
            END ELSE                      ; * NKH01
               URL = 'http://imagingws.qa.afs.net/images/list?clientFolder=':CLIENT.ID:'&imageKey=':IMAGE.NO   ; * NKH01
            END                           ; * NKH01                           
            
            IF IMAGE.NO = "35458423" THEN DEBUG
            GOSUB SEND.REST.REQUEST
            GOSUB PARSE.RESULTS
            PRO.NO = FIELD(ID,"*",2)
            PRO.NO.D = FIELD(ID,"*",2,2)
            FLAG=''
            VCNT = DCOUNT(BILLS(85),@VM)
            IF PRO.NO # PRONUM THEN
               FLAG = "***"
               READV COR.IMAGE FROM F.TRACE,PRONUM,1 ELSE COR.IMAGE = "NOF"
            END ELSE
               COR.IMAGE = ""
            END
            CRT PRO.NO.D"L#12":"   ":FLAG"L#3":COR.IMAGE"L#9":SPACE(3):PRONUM"L#12":SPACE(3):BILLS(280)"L#9":SPACE(3):BILLS(282)"L#6":OCONV(BILLS(284),'D2-')"L#8":SPACE(3):OCONV(BILLS(285),"MTHS")"L#10":SPACE(3):BILLS(53)"L#7":SPACE(3):OCONV(UPDT.DT,"D2-")"L#8":SPACE(3):FAIL.VERIFY
         END
      REPEAT

      RETURN
***********************************************************************
SEND.REST.REQUEST:
***********************************************************************
      METHOD="GET"
      STAT = SETHTTPDEFAULT("VERSION", "1.1")
   **   STAT = CREATESECURITYCONTEXT(CTX, "TLSv1.2")
   **   STAT = CREATESECUREREQUEST(URL, METHOD, RESTGET,CTX)
       STAT = CREATEREQUEST(URL, METHOD, RESTGET)
      STAT = SETREQUESTHEADER(RESTGET, "Content-Type", "application/json;charset=utf-8")
      STAT = SUBMITREQUEST(RESTGET, 30000, "", HEADER, RESTDATA, HTTPSTATUS)
      RETURN
************************************************************************
PARSE.RESULTS:
************************************************************************

      UDOHANDLE = ""
      RESP = ''
      RESP.CNT = 1
      STATUS =UDORead(RESTDATA, UDOFORMAT_JSON, UDOHANDLE )
      ST = UDOArrayGetSize(UDOHANDLE, ITEM_SIZE) ; IF ST NE UDO_SUCCESS THEN
         ITEM_SIZE = 0
      END
      FOR I = 1 TO ITEM_SIZE
         TEMP.ARRAY = ''
         ST = UDOArrayGetItem(UDOHANDLE, I, result_udo, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
        
         ST = UDOGetProperty(result_udo, "imageKey", IMAGE.NO, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN IMAGE.NO = ""
        
         ST = UDOGetProperty(result_udo, "imagePath", IMAGE.PATH, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         BATCH.NO = FIELD(IMAGE.PATH,"\",9)        ; * GRB02
         BATCH.NO = FIELD(BATCH.NO,"_",1)          ; * GRB02
         IF UDOTYPE = UDO_NULL THEN IMAGE.PATH = ""
        
         ST = UDOGetProperty(result_udo, "clientKey", CLIENTKEY, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CLIENTKEY = ""
       
         ST = UDOGetProperty(result_udo, "scac", SCAC, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN SCAC = ""
        
         ST = UDOGetProperty(result_udo, "field1", FIELD1, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN FIELD1 = ""
       
         ST = UDOGetProperty(result_udo, "field2", PRONUM, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN PRONUM = ""
        
         ST = UDOGetProperty(result_udo, "field3",FIELD3, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN FIELD3 = ""
        
         ST = UDOGetProperty(result_udo, "carrierName",CARRIERNAME, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CARRIERNAME = ""
       
         ST = UDOGetProperty(result_udo, "importedIntoPick", UPDT.DT, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
**IF UDOTYPE=UDO_NULL THEN DEBUG
         IF UDOTYPE = UDO_NULL THEN UPDT.DT = ""
         UPDT.DT = UPDT.DT[6,2]:"-":UPDT.DT[9,2]:"-":UPDT.DT[1,4]
****UPDT.DT = ICONV(UPDT.DT,"D")
         IF TRIM(UPDT.DT) # "" THEN
            UPDT.DT = ICONV(UPDT.DT,'D')
         END ELSE
         END
        
         ST = UDOGetProperty(result_udo, "clientFolder", CLIENTFOLDER, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CLIENTFOLDER = ""

         ST = UDOGetProperty(result_udo,"reviewId", REVIEWID, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN REVIEWID = ""

         ST = UDOGetProperty(result_udo,"needsReview", NEEDSREVIEW, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN NEEDSREVIEW = "0"
         IF UDOTYPE = UDO_FALSE THEN NEEDSREVIEW = "0"
         IF UDOTYPE = UDO_TRUE THEN NEEDSREVIEW = "1"

         ST = UDOGetProperty(result_udo, "failedVerification", FAIL.VERIFY, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN FAIL.VERIFY = ""
         IF UDOTYPE = UDO_FALSE THEN FAIL.VERIFY = ""
         IF UDOTYPE = UDO_TRUE THEN FAIL.VERIFY = "Y"

      NEXT I

      IF RESP # "" THEN
         VOUT = RESP
      END
      RETURN
****************************************************
ERR.HANDLER:
*****************************************************

      ERRCODE = "" ; ERRMSG = ""
      S = UDOGetLastError(ERRCODE, ERRMSG)
      ERROR = "UDO ERROR: (":ERRCODE:") ":ERRMSG
      VOUT<1> =ERROR

      RETURN

************************************************************************
REPORT.INTERNAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()

      EMAIL.OUT<6, -1> = 'URL = ':URL
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'CLIENT = ':CLIENT.ID
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'ERROR = ':ERROR
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '

      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
****      VOUT<1> = "ERROR"
      VOUT<1> = 0
      RETURN
************************************************************************
REPORT.FATAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()
      EMAIL.OUT<1>=EMAIL.RECIP
*       EMAIL.OUT<1,-1> = 'gbino@afs.net'
      EMAIL.OUT<1,-1> = 'dfriend@afs.net'
      EMAIL.OUT<1,-1> = 'nmeddaugh@afs.net'
      FATAL.ERROR.SUBJ = 'CHECK OCR REQUEST ERROR'
      EMAIL.OUT<5>=FATAL.ERROR.SUBJ
      EMAIL.OUT<6,-1> = 'URL = ':URL
      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
      IDATE=DATE()
      ITIME=TIME()
      TIME.BLOCK=INT(ITIME/600)
      *  VOUT<1> = "ERROR"
      RETURN
   END
