      SUBROUTINE BUILD.DF.REVIEW.SUB(F.CLIENTS,F.CARRIERS,F.TRANSPORT,F.TABLES,F.FILE,VIN,VOUT)
********************************************************************************
* PROGRAM: BUILD.DF.REVIEW.SUB
* SUBROUTINE TO BUILD A DELIMITED FILE. When written, this program was designed
*    exclusively for Wabtec (Client 01977)
********************************************************************************
* THIS PROGRAM IS A PROPRIETARY PRODUCT OF AUTOMATED FREIGHT SYSTEMS.
*
* FREIGHT BILLING/EDI PACKAGE
*
* AUTHOR       : Steve Barbee
* DATE CREATED : 03/09/15
* DESCRIPTION  : This program builds a delimited file for Wabtec bills. It is
*                based on BUILD.DF.SUB and it's purpose is to provide 2 reports
*                for Wabtec U.S. (01977) to help them figure out why some bills
*                take so long to get approved on the web.
*
*                This report is for one client at a time. 'All' clients
*                WILL NOT WORK
********************************************************************************
* MODIFIED     :
* 01/04/16  SWB01 SysAid# 17383

****************************************************************************************************************
* VIN<1>=CLIENT               CLIENT NUMBER
*                             CAN BE CLIENT NUMBER OR 'ALL'
*
* VIN<2>=LOG.ONLY             CHOICE FOR LOGISTICS CLIENTS ONLY
*                             VALID SELECTIONS (Y/N)
*
* VIN<3>=CARRIER              CARRIER NUMBER
*                             CAN BE CARRIER NUMBER OR 'ALL'
*
* VIN<4>=MODE                 TRANSPORTATION MODE
*                             THIS IS ONLY ASKED FOR IF CARRIER IS EQUAL TO 'ALL'
*                             IF YOU SPECIFY CARRIER - LEAVE THIS NULL!!!
*
* VIN<5>=FILE.SEL             FILE SELECTION
*                             VALID SELECTIONS ARE 1 - TEMP
*                                                  2 - HISTORY
*                                                  3 - LAST PROCESSED
*                             THIS IS ONLY NEEDED IF CLIENT IS EQUAL TO 'ALL'
*
* VIN<6>=BEG.DATE             BEGINNING DATE - IF CLIENT IS SPECIFIED
*                             AND YOU HAVE SELECTED 3 FOR FILE.SEL (LAST PROCESSED)
*                             THEN BEG.DATE AND END.DATE=NULL
*
* VIN<7>=END.DATE             ENDING DATE - IF CLIENT IS SPECIFIED
*                             AND YOU HAVE SELECTED 3 FOR FILE.SEL (LAST PROCESSED)
*                             THEN BEG.DATE AND END.DATE NEED TO BE NULL
*
* VIN<8>=CUT.BACK.CODE        CUT BACK CODE - LEAVE NULL FOR ALL (NO PREFERENCE)
*
* VIN<9>=MISROUTE.INFO        MISROUTE INFO - VALID SELECTIONS ARE...
*                                 'I' - INCLUDE MISROUTE ONLY
*                                 'E' - EXCLUDE MISROUTE ONLY
*                                 'N' - NO PREFERENCE
*
* VIN<10>=OVERCHARGE.INFO     OVERCHARGE INFO - VALID SELECTIONS ARE...
*                                 'I' - INCLUDE OVERCHARGE ONLY
*                                 'E' - EXCLUDE OVERCHARGE ONLY
*                                 'N' - NO PREFERENCE
*
* VIN<11>=LOGISTICS.INFO      LOGISTICS INFO - VALID SELECTIONS ARE...
*                                 'I' - INCLUDE LOGISTICS ONLY
*                                 'E' - EXCLUDE LOGISTICS ONLY
*                                 'N' - NO PREFERENCE
*
* VIN<12>=DISCOUNT.INFO       DISCOUNT INFO - VALID SELECTIONS ARE...
*                                 'I' - INCLUDE DISCOUNTS ONLY
*                                 'E' - EXCLUDE DISCOUNTS ONLY
*                                 'N' - NO PREFERENCE
*
* VIN<13>=VERSION             VERSION NUMBER - IF CLIENT[1,2]='99'
*                             THEN VERSION NUMBER WILL BE SET TO 8
*
* VIN<14>=TYPE.OF.REPORT       VALID SELECTIONS ARE...
*                              STANDARD (STD) => AUTO.EMAIL = 0
*                              REGULAR EMAIL (EMAIL) => AUTO.EMAIL = 1
*                              DIVISIONAL EMAIL (EMAIL-DIV) => AUTO.EMAIL = 1
*
* VIN<15>=SEPARATE.DIVISIONS   SEPARATE REPORT FOR DIVISION
*
* VIN<16>=DIVISIONAL.ID        DIVISION ID TO USE
*
* VIN<17>=SORT                 SORT OPTION
*
* VIN<18>=MANUAL.EMAIL         MANUAL EMAIL
*
* VIN<19>=NEW.EMAIL.ADDR       ADDRESS TO BE EMAILED TO
*
* VIN<20>=DIV.EMAIL.ADDR       ADDRESS FOR DIVISION TO BE EMAILED TO
*
* VIN<21>=USER                 USER ID
*
* VIN<22>=CH.NUM               CHANNEL NUMBER
*
* VIN<23>=AUTO                 LAST PROCESSING DATES
*
* VIN<24>=CUT.DESC             CUT BACK DESCRIPTION
*
* VIN<25>=FROM.FB.3.1.NEW      THIS IS SET TO THE LITERAL 'FROM FB.3.1.NEW' IF
*                              THE CALLING PROGRAM IS FB.3.1.NEW OR 'FROM FB.2.3.NW'
*                              IF THE CALLING PROGRAM IS FB.2.3.NW.
* VIN<26>=USING.NEW.MACRO      SWITCH SET IN FB.3.1.NEW
*                              INSERTS A "?" BEFORE CERTAIN FIELDS FOR MACRO TO WORK
* VIN<27>=DUP.ONLY             SWITCH SET IN BUILD.DF.NW.
*                              1 MEANS USE ONLY DUPLICATES
*                              0 MEANS USE ONLY NON-DUPLICATES
* VIN<28>=INC.BD               SWITCH SET IN BUILD.DF.NW.
*                              1 MEANS INCLUDE BALANCE DUE AMOUNTS WITH OVERCHARGES
*                              0 MEANS DO NOT INCLUDE BALANCE DUE AMOUNTS WITH OVERCHARGES
* VIN<29>=LCC.INFO             LCC INFO - VALID SELECTIONS ARE...
*                                 'I' - INCLUDE LCC ONLY
*                                 'E' - EXCLUDE LCC ONLY
*                                 'N' - NO PREFERENCE
*
* VIN<30>=FBLIST              FREIGHT BILL LIST FROM MISROUTE EMAIL
*
* VIN<31>=CLIENT.ACCESS       SS CLIENT ACCESS FILTERS
*
* VIN<32>=CARRIER.ACCESS      SS CARRIER ACCESS FILTER
*
* VIN<33>=SALES.ACCESS        SS SALES ACCESS FILTER
*
* VIN<34>=COMM.ACCESS         SS COMMISSION ACCESS FILTER
*
* VIN<35>=TL.INFO             TL PARAMETERS FOR FB FILTER
*
* VIN<36>=EBILL.INFO          EBILL PARAMETERS FOR FB FILTER
*
* VIN<37>=SAMPLE.ONE          PROCESS ONE FB AND MOVE ON
*
* VIN<38>=INCLUDE.IOT         INCLUDE OR EXCLUDE IOT INFO - VALID SELECTIONS ARE...
*                                 'I' - INCLUDE ONLY
*                                 'E' - EXCLUDE ONLY
*                                 'N' - NO PREFERENCE
*
* VIN<39>=IOT.INFO            VALID SELECTIONS ARE...
*                                 'I' - INBOUND
*                                 'O' - OUTBOUND
*                                 'T' - THIRD PARTY
*
* VIN<40>=REJ.INFO            REJ INFO - VALID SELECTIONS ARE...
*                                'I' - INCLUDE REJ ONLY
*                                'E' - EXCLUDE REJ ONLY
*                                'N' - NO PREFERENCE
*
* VIN<41>=ROW.LIMIT           ROW.LIMIT - VALID SELECTIONS ARE...
*                                'O' - OLD LIMIT OF 65000
*                                'N' - NEW LIMIT OF 1040000
*
* VIN<42>=ST.FILTER           LIST OF STATE CODES TO FILTER FB
*
* VIN<43>=STACK.FILTER        Stack Number 1 2 3 4 or nothing  ; * NPR02
*
* VIN<44>=REPORT.STYLE        'T' OR '' EQUALS TEXT ; DEFAULT
*                             'H' EQUALS HTML
*
* VIN<45>=ONCE                OPTION FOR TROUBLESHOOTING EMAIL BYPASS
* VIN<46>=ACCESS.ONLY         Accessorials Only - type 'M' on FB.TABLES 'LI.CODES' item   ; * NPR07
*                                'I' - INCLUDE Accessorials ONLY                          ; * NPR07
*                                'E' - EXCLUDE Accessorials ONLY                          ; * NPR07
*                                'N' - NO PREFERENCE                                      ; * NPR07
*
* VIN<47>=BD.ONLY             VALID SELECTIONS ARE...
*                                 'I' - INCLUDE ONLY
*                                 'E' - EXCLUDE ONLY
*                                 'N' - NO PREFERENCE
*
* VIN<48>=HDG.ONLY            VALID SELECTIONS ARE...
*                                 'I' - INCLUDE (DEFAULT)
*                                 'E' - EXCLUDE
*
**********************************************************************************************************

$INCLUDE PROG.ADMIN INC_OPTIONS

*
* Assign parameters
*
      PROG.NAME='BUILD.DF.REVIEW.SUB'
      INT.TODAY = DATE()                 ; * SWB01
      CLIENT=VIN<1>
      CL.LST=''
      IF CLIENT[1,1]='(' THEN
         CL.LST=CLIENT[2,9999]
         CLIENT='ALL'
      END
      LOG.ONLY=VIN<2>
      CARRIER=VIN<3>
      MODE=VIN<4>
      FILE.SEL=VIN<5>
      BEG.DATE=VIN<6>
      END.DATE=VIN<7>
      CUT.BACK.CODE=VIN<8>
      MISROUTE.INFO=VIN<9>
      OVERCHARGE.INFO=VIN<10>
      LOGISTICS.INFO=VIN<11>
      DISCOUNT.INFO=VIN<12>
      VERSION=VIN<13>
*      IF VERSION # '61' THEN   ; * SWB01
*         RETURN   ; * SWB01
*      END   ; * SWB01
      IF VERSION # '64' THEN             ; * SWB01
         RETURN
      END
      IF VERSION='' THEN VERSION=1
      SLC.FRT=0
      IF VERSION='752' THEN SLC.FRT=1
      SLC.ADJ=0
      IF VERSION='753' THEN SLC.ADJ=1
      VERSION.DESC = ""
      TYPE.OF.REPORT=VIN<14>
      SEPARATE.DIVISIONS=VIN<15>
      DIVISIONAL.ID=VIN<16>
      DIVISIONAL.ID.CNT=DCOUNT(VIN<16>,@VM)
      SORT=VIN<17>
      IF SORT='' THEN SORT=1
      MANUAL.EMAIL=VIN<18>
      NEW.EMAIL.ADDR=VIN<19>
      DIV.EMAIL.ADDR=VIN<20>
      USER=VIN<21>
      CH.NUM=VIN<22>
      AUTO=VIN<23>
      CUT.DESC=VIN<24>
      WHERE.FROM=VIN<25>
      IF WHERE.FROM = 'FROM FB.3.1.NEW' AND VERSION = '61' THEN
*For this report, we want to select bills from the previous processing day to the current processing
*day, inclusive
         BEG.DATE = BEG.DATE - 1
      END
      USING.NEW.MACRO=VIN<26>
      DUP.ONLY=VIN<27>
      INC.BD=VIN<28>
      LCC.INFO=VIN<29>
      FBLIST=VIN<30>
      CLIENT.ACCESS=VIN<31>
      IF CLIENT.ACCESS='' THEN CLIENT.ACCESS='ALL'
      CARRIER.ACCESS=VIN<32>
      IF CARRIER.ACCESS='' THEN CARRIER.ACCESS='ALL'
      SALES.ACCESS=VIN<33>
      IF SALES.ACCESS='' THEN SALES.ACCESS='ALL'
      COMM.ACCESS=VIN<34>
      IF COMM.ACCESS='' THEN COMM.ACCESS='Y'
      TL.INFO=VIN<35>
      EBILL.INFO=VIN<36>
      SAMPLE.ONE=VIN<37>
      INCLUDE.IOT=VIN<38>
      IOT.INFO=VIN<39>
      REJ.INFO=VIN<40>
      ROW.LIMIT=VIN<41>
      ROW.MAX=65000
      IF ROW.LIMIT='N' THEN
         ROW.MAX=1040000
      END
      ST.FILTER=VIN<42>
      ST.LIST=''
      IF ST.FILTER#'' THEN
         ST.LIST=CHANGE(ST.FILTER,' ',@VM)
      END

      STACK.FILTER=VIN<43>
      STACK.LIST=''
      IF STACK.FILTER#'' THEN
         STACK.LIST=CHANGE(STACK.FILTER,' ',@VM)
      END
      RPT.STYLE=VIN<44>
      ONCE=VIN<45>+0
      ACCESS.ONLY = VIN<46>
      BD.ONLY=VIN<47>
      HDG.ONLY=VIN<48>
      CLEANUP=VIN<49>                    ; * SWB01

      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'BUILD.DF.REVIEW.SUB' ; UPL.VOUT = ''
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
      PRFX='FMT'
      JMK.MESSAGE=''
      NATT=DCOUNT(VIN,@AM)
      FOR X=1 TO NATT
         JMK.MESSAGE<1,X>=VIN<X>
      NEXT X
      CLIENT.REC=''
      DTL.CAPTURE=0
      DTL.ARRAY=''
      ALL.RPT=0
      IF TYPE.OF.REPORT='EMAIL' OR TYPE.OF.REPORT='EMAIL-DIV' THEN
         AUTO.EMAIL=1
      END ELSE
         AUTO.EMAIL=0
      END

*      IF FILE.SEL=1 OR FILE.SEL=4 OR FILE.SEL=5 THEN   ; * SWB01
*         FILE='FB.BILLS,':CLIENT   ; * SWB01
*      END ELSE   ; * SWB01
      FILE='FB.BILLS.HIST,':CLIENT
*      END   ; * SWB01

*
* Initialize variables
*
      TAB=CHAR(9)
      DIVS=''
      VOUT=''
      LINE.COUNT = 3
      NAME.EXT = ''
*
* Open general files
*
      OPEN '','FB.BUILD.SPEC' TO F.BUILD.SPEC ELSE
         CALL OPEN.ABORT("FB.BUILD.SPEC",PROG.NAME)
      END
      OPEN '','FB.CUT.BACKS' TO F.CUT.BACKS ELSE
         CALL OPEN.ABORT("FB.CUT.BACKS",PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS ELSE
         CALL OPEN.ABORT("ZIPS",PROG.NAME)
      END
      OPEN '','CAN.ZIP.CODES' TO F.CAN.ZIPS ELSE
         CALL OPEN.ABORT("CAN.ZIP.CODES",PROG.NAME)
      END
      OPEN '','CLIENT.SCAC' TO F.CSCAC ELSE
         CALL OPEN.ABORT("CLIENT.SCAC",PROG.NAME)
      END
      OPEN '','AR.SLSMAN.1000.1' TO F.SLSMAN ELSE
         CALL OPEN.ABORT("AR.SLSMAN.1000.1",PROG.NAME)
      END
      OPEN '','UPSDATA' TO F.UPSDATA ELSE
         CALL OPEN.ABORT('F.UPSDATA',PROG.NAME)
      END
      READ LI.CODES FROM F.TABLES,'LI.CODES' ELSE
         CALL ELINE('Cannot read LI.CODES from FB.TABLES')
         GOTO EXIT.PROGRAM
      END
      READ AIR.CODES FROM F.TABLES,'AIR.CODES' ELSE
         CALL ELINE('Cannot read AIR.CODES from FB.TABLES')
         GOTO EXIT.PROGRAM
      END
      READ INTL.CODES FROM F.TABLES,'INTL.CODES' ELSE
         CALL ELINE('Cannot read INTL.CODES from FB.TABLES')
         GOTO EXIT.PROGRAM
      END
      READ OVR.CODES FROM F.TABLES,'OVRCHG.CODES' ELSE
         CALL ELINE('Cannot read OVRCHG.CODES from FB.TABLES')
         GOTO EXIT.PROGRAM
      END
      READ REJ.CODES FROM F.TABLES,'REJECT.CODES' ELSE
         CALL ELINE('Cannot read REJECT.CODES from FB.TABLES')
         GOTO EXIT.PROGRAM
      END
      READ AFS.SERV.LEV FROM F.TABLES,'AIR.SERVLEV*BASE' ELSE
         CALL ELINE('Cannot read AIR.SERVLEV*BASE from FB.TABLES')
         GOTO EXIT.PROGRAM
      END

      OPEN '','FB.TL.FSC' TO F.TL.FSC ELSE
         CALL OPEN.ABORT("FB.TL.FSC",PROG.NAME)
      END
      OPEN '','PCIN' TO F.PCIN ELSE
         CALL OPEN.ABORT("PCIN",PROG.NAME)
      END
      OPEN '','PCOUT' TO F.PCOUT ELSE
         CALL OPEN.ABORT("PCOUT",PROG.NAME)
      END
      OPEN '','FB.MILEAGE' TO F.MILEAGE ELSE
         CALL OPEN.ABORT("FB.MILEAGE",PROG.NAME)
      END
      OPEN '','FB.BC.FSC' TO F.NFSC ELSE
         CALL OPEN.ABORT("FB.BC.FSC",PROG.NAME)
      END
      OPEN '','&SAVEDLISTS&' TO F.SL ELSE
         CALL OPEN.ABORT("&SAVEDLISTS&",PROG.NAME)
      END
      OPEN '','EDI.CAR.ACNT.XREF' TO F.ECAX ELSE
         CALL OPEN.ABORT("EDI.CAR.ACNT.XREF",PROG.NAME)
      END
      OPEN '','FB.CARRIER.PAYEE' TO F.CARRIER.PAYEE ELSE
         CALL OPEN.ABORT("FB.CARRIER.PAYEE",PROG.NAME)
      END
      IF SLC.FRT THEN
         OPEN '','SHV.FRT.DATA' TO F.SHV.FRT.DATA ELSE
            CALL OPEN.ABORT("SHV.FRT.DATA",PROG.NAME)
         END
         OPEN '','SHV.FRT.DATA.HIST' TO F.SHV.FRT.DATA.HIST ELSE
            CALL OPEN.ABORT("SHV.FRT.DATA.HIST",PROG.NAME)
         END
      END
      IF SLC.ADJ THEN
         OPEN '','SHV.ADJ.DATA' TO F.SHV.FRT.DATA ELSE
            CALL OPEN.ABORT("SHV.ADJ.DATA",PROG.NAME)
         END
         OPEN '','SHV.ADJ.DATA.HIST' TO F.SHV.FRT.DATA.HIST ELSE
            CALL OPEN.ABORT("SHV.ADJ.DATA.HIST",PROG.NAME)
         END
      END
      OPEN '','&SAVEDLISTS&' TO F.SAVEDLISTS ELSE  ; * SWB01
         CALL OPEN.ABORT("SAVEDLISTS",PROG.NAME)   ; * SWB01
      END                                ; * SWB01

*
* Set the build version and pull the necessary information
*
      ID=PRFX:'*':CLIENT:'*':VERSION

      READ DSPECS FROM F.BUILD.SPEC,ID ELSE
         ID=PRFX:'**':VERSION
         READ DSPECS FROM F.BUILD.SPEC,ID ELSE
            CALL ELINE('An ERROR occurred in BUILD.DF.SUB. Failed on DSPEC read. ID=':ID)
            GOTO EXIT.PROGRAM
         END
      END
      VERSION.DESC = DSPECS<1>
      ID='DF.SORT*':SORT
      READ D.SORT FROM F.TABLES,ID ELSE
         CALL ELINE('Sort Version ':SORT:' has not been setup.')
         GOTO EXIT.PROGRAM
      END
      ITEM.COUNT=DCOUNT(DSPECS<2>,@VM)
      DARRAY=''
      DARRAY.HTML=''

      IF (CLIENT#'ALL' AND CLIENT#'AFS' AND CLIENT#'SCT' AND CLIENT#'UNI' AND CLIENT#'UFM' AND CLIENT#'LGI') THEN
         CLIENT.ID=CLIENT
         READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
            CALL ELINE('ERROR - BUILD.DF did not complete CLIENT.REC read.')
            GOTO EXIT.PROGRAM
         END
         CLIENT.NAME=CLIENT.REC<2>

         OPEN '','EDI.BILLS.HIST,':CLIENT.ID TO EDI.BILLS.HIST THEN
            NO.EDI.FILE=0
         END ELSE
            NO.EDI.FILE=1
         END

         OPEN '','FB.BOL.CRX,':CLIENT.ID TO F.BOL.CRX THEN
            BOL.CRX.OPENED = 1
         END ELSE
            BOL.CRX.OPENED = 0
         END
         OPEN '','FB.BOL.REFNO.XREF,':CLIENT.ID TO F.BOL.REFNO.XREF THEN
            BOL.CRX.REFNO.OPENED = 1
         END ELSE
            BOL.CRX.REFNO.OPENED = 0
         END

         IF ALL.RPT=1 THEN
            OPEN '','UPSDTL,':CLIENT.ID TO F.UPSDATA ELSE
               CALL OPEN.ABORT('F.UPSDTL,':CLIENT.ID,PROG.NAME)
            END
         END
         OPEN '',FILE TO FB.BILLS ELSE
            CALL OPEN.ABORT(FILE:CLIENT.ID,PROG.NAME)
         END
         OPEN '','FB.BILLS.ACCESS,':CLIENT.ID TO F.ACCESS ELSE         ; * SWB01
            CALL OPEN.ABORT('FB.BILLS.ACCESS,':CLIENT.ID,PROG.NAME)    ; * SWB01
         END                             ; * SWB01
         OPEN '','FB.WEB.REVIEW,':CLIENT.ID TO F.REVIEW ELSE
            CALL OPEN.ABORT('FB.WEB.REVIEW,':CLIENT.ID,PROG.NAME)
         END
         VEND=CLIENT.REC<20>
         CUST=CLIENT.REC<21>
         ISLS=CLIENT.REC<114>
         READ ISLS.REC FROM F.SLSMAN,ISLS ELSE ISLS.REC=''
         ISLS.NAME=ISLS.REC<1>
         SSLS=CLIENT.REC<115>
         READ SSLS.REC FROM F.SLSMAN,SSLS ELSE SSLS.REC=''
         SSLS.NAME=SSLS.REC<1>

         IF VEND='Y' OR CUST='Y' THEN
            OPEN '','VEND.CUST,':CLIENT.ID TO F.VC ELSE
               F.VC=''
            END
         END ELSE
            F.VC = ''
         END
         DIVISION=CLIENT.REC<12>
         IF DIVISION='Y' THEN
            OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIVISION ELSE
               CALL OPEN.ABORT("DIVISION.CODES,":CLIENT.ID,PROG.NAME)
            END
            DIV.STMT='SSELECT DIVISION.CODES,':CLIENT.ID
            IF AUTO.EMAIL THEN DIV.STMT=DIV.STMT:' WITH 9'
            EXECUTE DIV.STMT PASSLIST CAPTURING OUTPUT
            DONE=0
            CNTR=0
            LOOP
               READNEXT DIV.ID ELSE DONE=1
            UNTIL DONE DO
               READ DIV.REC FROM F.DIVISION,DIV.ID THEN
                  CNTR+=1
                  DIVS<1,CNTR>=DIV.ID'R%5'
                  DIVS<9,CNTR>=DIV.REC<9>
                  DIVS<11,CNTR>=DIV.REC<11>        ; * Division description
               END
            REPEAT
         END
         IF DIVISIONAL.ID#'ALL' AND DIVISION='Y' THEN
            READ DDIV FROM F.DIVISION,DIVISIONAL.ID THEN
               ZIP.VAR=DDIV<1>
               CALL FB.READ.ZIP(ZIP.VAR,CITY,STATE)
               CITY.STATE=CITY:', ':STATE
               DIV.DESC=DDIV<11>
            END ELSE                     ; * DRF03
               DIV.DESC='Unknown Division'         ; * DRF03
               CITY.STATE='Unknown City and State'           ; * DRF03
            END                          ; * DRF03
         END
      END


START.BUILD:***

*
* Select data for current client
*
*************************************************************************
*
* SELECT CLIENT FILE
*
      IF AUTO.EMAIL THEN
         IF TYPE.OF.REPORT='EMAIL' THEN
            IF HDG.ONLY#'E' THEN
               GOSUB DO.HEADINGS
            END
            GOSUB SELECT.BILLS
            GOSUB CONTINUE.BUILD
         END ELSE
            IF TYPE.OF.REPORT='EMAIL-DIV' AND DIVISION THEN
               SEPARATE.DIVISIONS=1
               DIVISIONAL.ID='ALL'
               DIV.COUNT=0
               ZIP.VAR=''
               NUM.DIVS=DCOUNT(DIVS<1>,@VM)
               COUNTER.1=0
               CITY.STATE=''
               DIV.EMAIL.ADDR=''
               GOTO 800
            END
         END
         GOTO EXIT.PROGRAM
      END

      TEXT='Selecting Clients.'
      CALL CENTER(TEXT,80)
      CRT @(0,18):TEXT:@(-3):
*
      IF CL.LST='' THEN
         EXECUTE "SELECT VOC 'FB.BILLS.HIST' *A7" RTNLIST CLIENT.LIST CAPTURING OUTPUT
      END ELSE
         EXECUTE "GET-LIST ":CL.LST RTNLIST CLIENT.LIST CAPTURING OUTPUT
      END
*
      ITEMS=@SELECTED
      IF @SELECTED < 1 THEN
         CALL ELINE('ERROR - No clients on file.')
         GOTO EXIT.PROGRAM
      END
      COUNTER.1=0
      PER.1=0

* This used to be the end else for 'All' Client #'s
800:  IF SEPARATE.DIVISIONS AND DIVISIONAL.ID='ALL' THEN
         DIV.COUNT=0
         ZIP.VAR=''
         NUM.DIVS=DCOUNT(DIVS<1>,@VM)
         ITEMS=NUM.DIVS
         LOOP
            DIV.COUNT +=1
            COUNTER.1 +=1
         UNTIL DIV.COUNT > NUM.DIVS
            DIV.ID = DIVS<1,DIV.COUNT>
            READ DDIV FROM F.DIVISION, DIV.ID THEN
               ZIP.VAR = DDIV<1>
               CALL FB.READ.ZIP(ZIP.VAR,CITY,STATE)
            END ELSE
               CITY='' ; STATE=''
            END
            IF CITY='' OR STATE='' THEN
               CITY.STATE=''
            END ELSE
               CITY.STATE=CITY:', ': STATE
            END
            IF HDG.ONLY#'E' THEN
               GOSUB DO.HEADINGS
            END

            IF AUTO.EMAIL ELSE
               CRT @(0,17):CLIENT.ID:" ":CLIENT.NAME:" ":"Division: ":DIV.ID:"- Now selecting freight bills":@(-4):
               CALL PROG.BAR(20,COUNTER.1,ITEMS,PER.1)
            END
            IF DIV.EMAIL.ADDR = '' THEN NEW.EMAIL.ADDR = DDIV<9>
            GOSUB SELECT.BILLS
            IF VERSION='115' AND DTL.CAPTURE THEN
               DTL.CAPTURE=0
               GO START.BUILD
            END
            GOSUB CONTINUE.BUILD
SKIP.DIVISION:***
         REPEAT
      END ELSE
         IF HDG.ONLY#'E' THEN
            GOSUB DO.HEADINGS
         END
         GOSUB SELECT.BILLS
         GOSUB CONTINUE.BUILD
      END

EXIT.PROGRAM:*** End
      RETURN


*
* Do headings
*
DO.HEADINGS:***
      DATA.SUBSET=(CARRIER#'ALL') OR (MODE#'ALL') OR (CUT.BACK.CODE#'') OR (MISROUTE.INFO#'N') OR (OVERCHARGE.INFO#'N') OR (LOGISTICS.INFO#'N') OR (DISCOUNT.INFO#'N') OR DUP.ONLY OR (CARRIER='ALL' AND MODE#'ALL') OR (LCC.INFO#'N')
      COL.COUNT=DCOUNT(DSPECS<2>,@VM)
      DARRAY=''

      DARRAY<1>='File for Client ':CLIENT:' ':CLIENT.NAME:' '
      IF SEPARATE.DIVISIONS THEN
         IF DIVISIONAL.ID = 'ALL' THEN
            DARRAY<1> :='for division ':DIVS<1,DIV.COUNT>:' ':DIVS<11,DIV.COUNT>:' ':CITY.STATE:' '
         END ELSE
            DARRAY<1> :='for division ':DIVISIONAL.ID:' ':DIV.DESC:' ':CITY.STATE:' '
         END
      END ELSE                           ; * DS001
         IF DIVISIONAL.ID # 'ALL' THEN   ; * DS001
            DARRAY<1> :='for divisions ':VIN<55>:' '
         END
      END                                ; * DS001

      IF CARRIER='ALL' THEN
         DARRAY<1>=DARRAY<1>:'For ALL Carriers '
         IF MODE='ALL' THEN
            DARRAY<1>=DARRAY<1>:'For ALL Modes '
         END ELSE
            READV MODE.DESC FROM F.TRANSPORT,MODE,1 ELSE MODE.DESC='Unknown Mode'
            DARRAY<1>=DARRAY<1>:'For Mode ':MODE:' ':MODE.DESC:' '
         END
      END ELSE
         IF CARRIER = 'FEDEX' THEN
            DARRAY<1>=DARRAY<1>:'For FedEx Air (00015) and FedEx Ground (01075) '
         END ELSE
            IF CARRIER = 'UPSDTL' THEN
               DARRAY<1>=DARRAY<1>:'For ALL Carriers '
            END ELSE
               READV CARRIER.NAME FROM F.CARRIERS,CARRIER,1 ELSE CARRIER.NAME='Unknown Carrier'
               DARRAY<1>=DARRAY<1>:'For Carrier ':CARRIER:' ':CARRIER.NAME:' '
               IF RPT.STYLE='H' THEN
                  DARRAY.HTML:=\For Carrier \:CARRIER:\ \:CHANGE(CARRIER.NAME,'&','&amp;'):\ \
               END
            END
         END
      END
      DARRAY<1>=DARRAY<1>:'Between ':BEG.DATE'D2/':' and ':END.DATE'D2/':' '

      IF INCLUDE.IOT # 'N' THEN
         IF INCLUDE.IOT = 'I' THEN
            DARRAY<1>=DARRAY<1>:'Including only '
         END ELSE
            DARRAY<1>=DARRAY<1>:'Excluding '
         END
         BEGIN CASE
            CASE IOT.INFO = 'I'
               DARRAY<1>=DARRAY<1>:'Inbound '
            CASE IOT.INFO = 'O'
               DARRAY<1>=DARRAY<1>:'Outbound '
            CASE IOT.INFO = 'T'
               DARRAY<1>=DARRAY<1>:'Third Party '
         END CASE
      END
      DARRAY<1>=DARRAY<1>:'Using Version ': VERSION : ' - ':VERSION.DESC : ' '
      IF D.SORT<1>#'' THEN
         IF NUM(D.SORT<1>) THEN
            DARRAY<1>=DARRAY<1>:D.SORT<2>
         END
      END
      DARRAY<1>=DARRAY<1>:' on ':DATE()'D2/'
      IF DATA.SUBSET THEN
         DARRAY<1>=DARRAY<1>:'   This report may represent a subset of all data and SHOULD NOT be used for account balancing.'
      END
      IF SLC.FRT OR SLC.ADJ THEN
         DARRAY<3,-1>='Client #'
      END

      USRFLD=''
      ITEM.COUNT=DCOUNT(DSPECS<2>,@VM)
      FOR I = 1 TO ITEM.COUNT
         NEW.HEAD=0
         IF DSPECS<4,I>=7 AND DSPECS<3,I>='FB' THEN
            IF CLIENT.REC<93>='Y' THEN NEW.HEAD=1  ; * Logistics Client
         END
         IF NEW.HEAD THEN
            DARRAY<3,-1>='Gross Charge'
         END ELSE
            IF CLIENT.REC<191>#'' THEN
               BEGIN CASE
                  CASE CLIENT.REC<191,1>#'' AND DSPECS<2,I>='USER FIELD 1 (UF1)'
                     DARRAY<3,-1>=CLIENT.REC<191,1>:' (UF1)'
                     USRFLD<1>=I
                  CASE CLIENT.REC<191,2>#'' AND DSPECS<2,I>='USER FIELD 2 (UF2)'
                     DARRAY<3,-1>=CLIENT.REC<191,2>:' (UF2)'
                     USRFLD<2>=I
                  CASE CLIENT.REC<191,3>#'' AND DSPECS<2,I>='USER FIELD 3 (UF3)'
                     DARRAY<3,-1>=CLIENT.REC<191,3>:' (UF3)'
                     USRFLD<3>=I
                  CASE CLIENT.REC<191,4>#'' AND DSPECS<2,I>='USER FIELD 4 (UF4)'
                     DARRAY<3,-1>=CLIENT.REC<191,4>:' (UF4)'
                     USRFLD<4>=I
                  CASE CLIENT.REC<191,5>#'' AND DSPECS<2,I>='USER FIELD 5 (UF5)'
                     DARRAY<3,-1>=CLIENT.REC<191,5>:' (UF5)'
                     USRFLD<5>=I
                  CASE CLIENT.REC<191,6>#'' AND DSPECS<2,I>='USER FIELD 6 (UF6)'
                     DARRAY<3,-1>=CLIENT.REC<191,6>:' (UF6)'
                     USRFLD<6>=I
                  CASE 1
                     DARRAY<3,-1>=DSPECS<2,I>
               END CASE
            END ELSE
               DARRAY<3,-1>=DSPECS<2,I>
            END
         END
      NEXT I
*
* Remove heading from this table from Alcon
*
      IF SLC.FRT OR SLC.ADJ THEN
         OBEG.DATE=BEG.DATE'D4/'
         OEND.DATE=END.DATE'D4/'
         OTIME=CHANGE(OCONV(TIME(),'MTS'),':','')
         IF SLC.FRT THEN
            RECORD.NAME='SHV-':OBEG.DATE[7,4]:OBEG.DATE[1,2]:OBEG.DATE[4,2]:'-':OEND.DATE[7,4]:OEND.DATE[1,2]:OEND.DATE[4,2]:'-':OTIME:'-FRT.XLS'
         END
         IF SLC.ADJ THEN
            RECORD.NAME='SHV-':OBEG.DATE[7,4]:OBEG.DATE[1,2]:OBEG.DATE[4,2]:'-':OEND.DATE[7,4]:OEND.DATE[1,2]:OEND.DATE[4,2]:'-':OTIME:'-ADJ.XLS'
         END
         READ DARRAY FROM F.SHV.FRT.DATA,RECORD.NAME ELSE
            DARRAY=DARRAY<3>
         END
      END
      RETURN

*
* Select bills for the clients
*
SELECT.BILLS:***
*      STMT='SSELECT FB.WEB.REVIEW,':CLIENT.ID   ; * SWB01
*      STMT := ' WITH ACTIVITY.DATE >= "':OCONV(BEG.DATE,'D2/'):'" '   ; * SWB01
*      STMT := ' AND WITH ACTIVITY.DATE <= "':OCONV(END.DATE,'D2/'):'" '   ; * SWB01
**Only version 61 is allowed for this report so no need to check for other version #'s   ; * SWB01
*      IF VERSION='61' THEN   ; * SWB01
*         STMT := ' AND WITH STATUS.CODE = "970" "972" "973" "974" '   ; * SWB01
*      END   ; * SWB01

*      IF OCONV(USER,'MCU')='DAVID' THEN
*         CRT @(0,23)
*         CRT @(0,23):STMT
*         CRT
*      END

*      STMT=STMT:' BY BILL.DATE BY PRO# BY SEQ.NO'   ; * SWB01
      IF CLEANUP THEN                    ; * SWB01
         STMT='SSELECT FB.BILLS,':CLIENT.ID:' BY CARRIER BY CARRIER#'  ; * SWB01
      END ELSE                           ; * SWB01
         EXECUTE 'CLEARSELECT'           ; * SWB01
         EXECUTE 'SELECT FB.BILLS,':CLIENT.ID:' WITH CARRIER# # "00015" AND WITH CARRIER# # "01075" AND WITH CARRIER# # "00041" '  ; * SWB01
         EXECUTE 'SAVE-LIST REVIEW.SUB.FB.BILLS.01977' PASSLIST        ; * SWB01
         EXECUTE 'SELECT FB.BILLS.HIST,':CLIENT.ID:' WITH 37 GE "':OCONV(BEG.DATE,'D2/'):'" AND WITH 37 LE "':OCONV(END.DATE,'D2/'):'" AND WITH CARRIER# # "00015" AND WITH CARRIER# # "01075" AND WITH CARRIER# # "00041" '           ; * SWB01
         EXECUTE 'SAVE-LIST REVIEW.SUB.FB.BILLS.HIST.01977' PASSLIST   ; * SWB01

         READ FBH.LIST FROM F.SAVEDLISTS,'REVIEW.SUB.FB.BILLS.HIST.01977' THEN   ; * SWB01
            READ FB.LIST FROM F.SAVEDLISTS,'REVIEW.SUB.FB.BILLS.01977' THEN      ; * SWB01
               CURRENT.BILLS.CNT = DCOUNT(FB.LIST, @FM)      ; * SWB01
               FBH.LIST = FB.LIST:@FM:FBH.LIST     ; * SWB01

               WRITE FBH.LIST ON F.SAVEDLISTS,'REVIEW.SUB.COMBINED.LIST.01977'   ; * SWB01
            END                          ; * SWB01
         END                             ; * SWB01

         EXECUTE 'GET.LIST REVIEW.SUB.COMBINED.LIST.01977'   ; * SWB01
         STMT='SSELECT FB.BILLS.HIST,':CLIENT.ID:' BY CARRIER BY CARRIER# SELECT.ONLY'     ; * SWB01
      END                                ; * SWB01
      IF SAMPLE.ONE='Y' THEN
         STMT:=' SAMPLE 1'
      END
      IF USER = 'OWEN--' OR USER='MKERBOW--' THEN
         CRT @(0,23)
         CRT STMT
         INPUT NUL
      END

      EXECUTE STMT PASSLIST RTNLIST BILLS.LIST CAPTURING OUTPUT
      IF CLEANUP THEN
         CURRENT.BILLS.CNT = @SELECTED
      END
      JMK.MESSAGE<1,-1>=OUTPUT
      JMK.MESSAGE<1,-1>=@SELECTED
      IF USER='JMKERBOW' AND SAMPLE.ONE='Y' THEN
         EMAIL.OUT=''
         EMAIL.OUT<1>='mkerbow@afs.net'
         EMAIL.OUT<4>='BUILD.DF.SUB@afs.net'
         EMAIL.OUT<5>='Sample One - FB Select Statement and Results for Client ':CLIENT.ID
         EMAIL.OUT<6>='Input parameters:'
         FOR X=1 TO 40
            EMAIL.OUT<6,-1>=X:'=':VIN<X>
         NEXT X
         EMAIL.OUT<6,-1>='Executed statment : ':STMT
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>='Captured output   : ':OUTPUT
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>='Number of items   : ':@SELECTED
         EMAIL.OUT<7>=1
         CALL SENDMAIL(EMAIL.OUT,RESULT)
      END
      IF @SELECTED > 0 ELSE
         IF ALL.RPT=1 AND CARRIER='UPSDTL' THEN
            GOTO CONTINUE.UPS.BUILD
         END
         IF (CLIENT#'ALL' AND CLIENT#'AFS' AND CLIENT#'SCT' AND CLIENT#'UNI' AND CLIENT#'UFM' AND CLIENT#'LGI') THEN
            IF SEPARATE.DIVISIONS AND DIVISIONAL.ID = 'ALL' THEN GOTO SKIP.DIVISION
            GOTO EXIT.PROGRAM
         END
      END
      NUM.BILLS = @SELECTED

      SHOULD.SUBTOTAL = D.SORT<4>
      OLD.SUBDATA = 'FIRST-ONE'
      SUBDATA = ''
      SUBTOTAL = ''
      TOTAL = ''
      SUB.ATTR = D.SORT<1>
      COUNTER.2=0
      PER.2 = 0
      DONE=0
      TEMP.ID=''
      TEMP.REC=''

*
* Get next item to process
*
*      LOOP ; * SWB01
*         READNEXT FWR.ID FROM BILLS.LIST ELSE DONE = 1 ; * SWB01
*      UNTIL DONE DO ; * SWB01
*         COUNTER.2=COUNTER.2+1 ; * SWB01
*         IF SAMPLE.ONE='Y' AND COUNTER.2>1 THEN ; * SWB01
*            CLEARSELECT BILLS.LIST ; * SWB01
*            RETURN ; * SWB01
*         END ; * SWB01
*         LINE='' ; * SWB01
*         NO.EDI=0 ; * SWB01
*         READ FWR.REC FROM F.REVIEW,FWR.ID THEN ; * SWB01
*            ACTIVITY.DATE = FWR.REC<1> ; * SWB01
*            ACTIVITY.DOW = OCONV(ACTIVITY.DATE, 'DW') ; * SWB01
*            STATUS.CODE = FWR.REC<2> ; * SWB01
*            ACTIVITY.CODE = FWR.REC<10> ; * SWB01
*            BEGIN CASE ; * SWB01
*               CASE STATUS.CODE = '970' AND ACTIVITY.DATE > BEG.DATE ; * SWB01
**For this report, we are typically selecting 8 days worth of bills. The account is normally processed ; * SWB01
**on Tuesdays so the normal select is starting the previous Tuesday thru the current day, ; * SWB01
**normally a Tuesday, inclusive. 970 indicates bills that were sent to the web for approval. ; * SWB01
*
**For this report, we want to include bills that were sent for approval ; * SWB01
**AFTER the last processing (i.e. last Tuesday) up to the current date. ; * SWB01
*
*               CASE STATUS.CODE = '972' ; * SWB01
*
*               CASE STATUS.CODE = '973' ; * SWB01
*
*               CASE STATUS.CODE = '970' AND ACTIVITY.DATE = BEG.DATE AND ACTIVITY.CODE = 'FBTWAP' ; * SWB01
**This condition was put next to last because it is happens rarely. This is to catch bills that ; * SWB01
**entered or changed on the day of Processing but AFTER Processing took place. ; * SWB01
*               CASE 1 ; * SWB01
*                  GOTO OWEN.REPEAT ; * SWB01
*
*            END CASE ; * SWB01
*            PRO.ID = FIELD(FWR.ID, '_', 1) ; * SWB01
      BILL.CNT = 0
      LOOP                               ; * SWB01
         READNEXT PRO.ID FROM BILLS.LIST ELSE DONE = 1       ; * SWB01
      UNTIL DONE DO                      ; * SWB01

         BILL.CNT += 1                   ; * SWB01
         COUNTER.2=COUNTER.2+1           ; * SWB01
         LINE=''                         ; * SWB01
         ITEM=''                         ; * SWB01
         READ PRO.REC FROM FB.BILLS,PRO.ID THEN
GET.BILL:*
            IF AUTO.EMAIL=0 THEN CALL PROG.BAR(22,COUNTER.2,NUM.BILLS,PER.2)
            ST.VALID=0
            IF ST.LIST#'' THEN
               PRO.ORIG.ST = PRO.REC<25>
               LOCATE PRO.ORIG.ST IN ST.LIST<1> SETTING OSTPOS THEN ST.VALID=1
               PRO.DEST.ST = PRO.REC<26>
               LOCATE PRO.DEST.ST IN ST.LIST<1> SETTING DSTPOS THEN ST.VALID=1
               IF ST.VALID=0 THEN GO OWEN.REPEAT
            END
            PRV.PRO.REC=''
            CARRIER.NO=FIELD(PRO.ID,'*',1)
            IF SLC.FRT OR SLC.ADJ THEN
               IF CARRIER.NO='00015' THEN GO OWEN.REPEAT
               IF CARRIER.NO='00041' THEN GO OWEN.REPEAT
               IF CARRIER.NO='00365' THEN GO OWEN.REPEAT
               IF CARRIER.NO='01075' THEN GO OWEN.REPEAT
               IF CARRIER.NO='01312' THEN GO OWEN.REPEAT
               IF INDEX(PRO.REC<53>,'LOGICA',1) THEN GO OWEN.REPEAT
            END
            PRO.NO=FIELD(PRO.ID,'*',2)
            SEQ.NO=FIELD(PRO.ID,'*',3)
            PRV.PRO.ID=CARRIER.NO:'*':PRO.NO[1,LEN(PRO.NO)-2]:'*':SEQ.NO
            READ PRV.PRO.REC FROM FB.BILLS,PRV.PRO.ID ELSE PRV.PRO.REC=''

            FROM.STACK = '' ; TO.STACK = ''        ; * Only for client 01334 Hussey for now   ; * NPR02
            IF STACK.LIST#'' THEN        ; * NPR02
               STACK.VALID=0
               FROM.STACK = PRO.REC<68>  ; * NPR02
               LOCATE FROM.STACK IN STACK.LIST<1> SETTING OSTPOS THEN STACK.VALID=1        ; * NPR02
               TO.STACK = PRO.REC<96>    ; * NPR02
               LOCATE TO.STACK IN STACK.LIST<1> SETTING DSTPOS THEN STACK.VALID=1          ; * NPR02
               IF STACK.VALID=0 THEN GO OWEN.REPEAT          ; * NPR02
            END                          ; * NPR02

            INCLUDE.BILL = 1             ; * SWB01
            IF BILL.CNT <= CURRENT.BILLS.CNT THEN  ; * SWB01
               BEGIN CASE                ; * SWB01
                  CASE PRO.REC<1> >= BEG.DATE AND PRO.REC<1> <= END.DATE         ; * Bill Date   ; * SWB01

                  CASE PRO.REC<185> >= BEG.DATE AND PRO.REC<185> <= END.DATE     ; * Date bill received in Mail Room aka 'Received Date'   ; * SWB01

                  CASE PRO.REC<247> >= BEG.DATE AND PRO.REC<247> <= END.DATE     ; * Keyed Date   ; * SWB01

                  CASE PRO.REC<30> >= BEG.DATE AND PRO.REC<30> <= END.DATE       ; * Entry Date   ; * SWB01

                  CASE PRO.REC<241> >= BEG.DATE AND PRO.REC<241> <= END.DATE     ; * Approved Date   ; * SWB01

                  CASE PRO.REC<37> >= BEG.DATE AND PRO.REC<37> <= END.DATE       ; * Process Date   ; * SWB01

                  CASE PRO.REC<133> >= BEG.DATE AND PRO.REC<133> <= END.DATE     ; * Funded Date   ; * SWB01

                  CASE 1                 ; * SWB01
                     INCLUDE.BILL = 0    ; * SWB01
               END CASE                  ; * SWB01

            END                          ; * SWB01

            ORIG.EDI.ID = PRO.REC<88>
            IF ORIG.EDI.ID # '' AND NO.EDI.FILE=0 THEN
               CALL PARSE.EDI.ID(ORIG.EDI.ID, CLIENT.ID, EDI.HIST.ID)
               READ EDI.REC FROM EDI.BILLS.HIST, EDI.HIST.ID ELSE NO.EDI = 1
            END ELSE
               NO.EDI=1
            END
            FB.DIV.ID=''
            FB.DIV.REC=''
            IF DIVISION='Y' THEN
               FB.DIV.ID=PRO.REC<9>
               READ FB.DIV.REC FROM F.DIVISION,FB.DIV.ID ELSE FB.DIV.REC=''
            END
            CARRIER.ID=OCONV(PRO.ID,'G0*1')
            PRO.NUM=OCONV(PRO.ID,'G1*1')

            IF TEMP.REC#'' THEN
               TEMP.ID=PRO.ID
               PRO.REC=TEMP.REC
               TEMP.REC=''
               IF PRO.REC<10>+0#0 THEN
                  PRO.REC<29>='D'
                  PRO.REC<41,1>='Service Failures'
               END
               IF PRO.REC<11>+0#0 THEN
                  PRO.REC<29>=PRO.REC<29>:'O'
                  PRO.REC<41,2>='Service Failures'
               END
               IF PRO.REC<12>+0#0 THEN
                  PRO.REC<29>=PRO.REC<29>:'C'
               END
               PRO.ID='01075*':PRO.REC<94>:'*0'
               NO.EDI=1
            END
            MSR.COST=PRO.REC<8>+PRO.REC<44>
            IF PRO.REC<63> GT MSR.COST AND CLIENT.ID # '00891' AND MISROUTE.INFO#'-' AND MISROUTE.INFO#'B' THEN
               PRO.REC<63> = 0
               PRO.REC<69> = ''
               PRO.REC<22> = ''
               PRO.REC<23> = ''
            END
            IF SUB.ATTR#'' THEN
               BEGIN CASE
                  CASE SUB.ATTR='CARRIER.NAME'
                     READV CARRIER.NAME FROM F.CARRIERS,OCONV(PRO.ID,'G0*1'),1 ELSE CARRIER.NAME='Unknown'
                     SUBDATA = CARRIER.NAME
                  CASE SUB.ATTR='CARRIER.ID'
                     SUBDATA = OCONV(PRO.ID,'G0*1')
                  CASE NUM(SUB.ATTR)
                     SUBDATA = PRO.REC<SUB.ATTR>
                  CASE 1
                     SUBDATA = ""
               END CASE
               IF SUBDATA#OLD.SUBDATA THEN
                  IF SHOULD.SUBTOTAL AND OLD.SUBDATA#'FIRST-ONE' THEN
                     DARRAY<-1> = SUBTOTAL
                     IF RPT.STYLE='H' THEN
                        LNCOLOR=LNCOLOR=0
                        FOR CCNT=1 TO COL.COUNT
                           BEGIN CASE
                              CASE SUB.ATTR='CARRIER.NAME'
                                 IF SUBTOTAL<1,CCNT>#'' THEN
                                    CONVERSION=DSPECS<6,CCNT>

                                 END
                              CASE SUB.ATTR='CARRIER.ID'

                                 CONVERSION=DSPECS<6,CCNT>

                              CASE 1
                                 IF ATTR = SUB.ATTR THEN
                                    IF SUBTOTAL<1,CCNT>#'' THEN
                                       CONVERSION=DSPECS<6,CCNT>

                                    END
                                 END
                           END CASE
                        NEXT CCNT
                     END
                  END
                  OLD.SUBDATA = SUBDATA
                  SUBTOTAL = ''
               END
            END

            CARRIER.ID=OCONV(PRO.ID,'G0*1')
            READV CARRIER.MODE FROM F.CARRIERS,CARRIER.ID,44 THEN
               IF PRO.REC<21>#'' THEN CARRIER.MODE=PRO.REC<21>
               READ TR.REC FROM F.TRANSPORT,CARRIER.MODE ELSE
                  TR.REC=''
               END
            END ELSE
               TR.REC=''
            END
            SERV.LEV = ''
            SERV.LEV.ID = "AIR.SERVLEV*":CARRIER.ID
            READ SERV.LEV FROM F.TABLES,SERV.LEV.ID ELSE SERV.LEV = ''

            IF VEND='Y' OR CUST='Y' THEN
               IF PRO.REC<17> MATCHES "5N" AND PRO.REC<17> # '' AND CLIENT[1,2]#'99' THEN
                  VC.ID = PRO.REC<17>'R%5'
                  READ VC.REC FROM F.VC,VC.ID ELSE
                     VC.REC = PRO.REC<17>
                  END
               END ELSE
                  VC.REC = PRO.REC<17>
               END
            END ELSE
               VC.REC = PRO.REC<17>
            END

            IF SLC.FRT OR SLC.ADJ THEN
               LINE<1>=CLIENT.ID:@VM
            END

            IF SUM(PRO.REC<152>)#PRO.REC<8>+0 THEN
               PRO.REC<151>=''
               PRO.REC<152>=''
            END
            IF PRO.REC<21>=6 AND INDEX(PRO.REC<151>,'FSC',1)=0 AND INDEX(PRO.REC<151>,'FUEL',1)=0 AND PRO.REC<8>+0#0 AND VERSION#'11' THEN
*               TL.VIN=''   ; * SWB01
*               TL.VIN<1>=PRO.REC<1>   ; * SWB01
*               TL.VIN<2>=PRO.REC<6>   ; * SWB01
*               TL.VIN<5>=0   ; * SWB01
*               TL.VIN<6>=PRO.REC<8>   ; * SWB01
*               TL.VIN<7>=PRO.REC<3>   ; * SWB01
*               TL.VIN<8>=PRO.REC<4>   ; * SWB01
*               TL.VIN<9>=CLIENT.ID   ; * SWB01
*               TL.VIN<10>=CARRIER.ID   ; * SWB01
*               TL.VOUT=''   ; * SWB01
*               CALL CALC.TL.FSC(TL.VIN,TL.VOUT,F.NFSC,F.TABLES,F.TL.FSC,F.PCIN,F.PCOUT,F.MILEAGE,F.ZIPS,F.CAN.ZIPS)   ; * SWB01
*               EST.FSC.PERC=TL.VOUT<1>+0   ; * SWB01
*               EST.FSC.AMT=TL.VOUT<2>+0   ; * SWB01
*               EST.FRT.AMT=TL.VOUT<3>+0   ; * SWB01
*               IF PRO.REC<151>='' THEN   ; * SWB01
*                  PRO.REC<151,1>='FRT'   ; * SWB01
*                  PRO.REC<152,1>=EST.FRT.AMT   ; * SWB01
*                  PRO.REC<151,2>='EFS'   ; * SWB01
*                  PRO.REC<152,2>=EST.FSC.AMT   ; * SWB01
*               END ELSE   ; * SWB01
*                  LOCATE 'FRT' IN PRO.REC<151> SETTING FRTPOS THEN   ; * SWB01
*                     PRO.REC<152,FRTPOS>=EST.FRT.AMT   ; * SWB01
*                  END ELSE   ; * SWB01
*                     LOCATE 'BASE' IN PRO.REC<151> SETTING FRTPOS THEN   ; * SWB01
*                        PRO.REC<152,FRTPOS>=EST.FRT.AMT   ; * SWB01
*                     END ELSE   ; * SWB01
*                        INS 'FRT' BEFORE PRO.REC<151,FRTPOS>   ; * SWB01
*                        INS EST.FRT.AMT BEFORE PRO.REC<152,FRTPOS>   ; * SWB01
*                     END   ; * SWB01
*                  END   ; * SWB01
*                  LOCATE 'FSC' IN PRO.REC<151> SETTING FSCPOS THEN   ; * SWB01
*                     PRO.REC<152,FSCPOS>=EST.FSC.AMT   ; * SWB01
*                  END ELSE   ; * SWB01
*                     LOCATE 'FUEL' IN PRO.REC<151> SETTING FSCPOS THEN   ; * SWB01
*                        PRO.REC<152,FSCPOS>=EST.FSC.AMT   ; * SWB01
*                     END ELSE   ; * SWB01
*                        INS 'EFS' BEFORE PRO.REC<151,FSCPOS>   ; * SWB01
*                        INS EST.FSC.AMT BEFORE PRO.REC<152,FSCPOS>   ; * SWB01
*                     END   ; * SWB01
*                  END   ; * SWB01
*               END   ; * SWB01
*               FRT.ARRAY=''   ; * SWB01
*               MIS.ARRAY=''   ; * SWB01
*               NVAL=DCOUNT(PRO.REC<151>,@VM)   ; * SWB01
*               FOR VAL=1 TO NVAL   ; * SWB01
*                  TRAN.TYPE=PRO.REC<151,VAL>   ; * SWB01
*                  BEGIN CASE   ; * SWB01
*                     CASE TRAN.TYPE='FRT' OR TRAN.TYPE='MIN' OR TRAN.TYPE='DEF' OR TRAN.TYPE='BASE'   ; * SWB01
*                        NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1   ; * SWB01
*                        FOR ATT=1 TO 2   ; * SWB01
*                           FRT.ARRAY<ATT,NXT.VAL>=PRO.REC<150+ATT,VAL>   ; * SWB01
*                        NEXT ATT   ; * SWB01
*                     CASE 1   ; * SWB01
*                        LOCATE(TRAN.TYPE,MIS.ARRAY,1;MPOS) THEN   ; * SWB01
*                           MIS.ARRAY<2,MPOS>+=PRO.REC<152,VAL>+0   ; * SWB01
*                        END ELSE   ; * SWB01
*                           NXT.VAL=DCOUNT(MIS.ARRAY<1>,@VM)+1   ; * SWB01
*                           FOR ATT=1 TO 2   ; * SWB01
*                              MIS.ARRAY<ATT,NXT.VAL>=PRO.REC<150+ATT,VAL>   ; * SWB01
*                           NEXT ATT   ; * SWB01
*                        END   ; * SWB01
*                  END CASE   ; * SWB01
*               NEXT VAL   ; * SWB01
*               PRO.REC<153>=FRT.ARRAY<1>   ; * SWB01
*               PRO.REC<157>=FRT.ARRAY<2>   ; * SWB01
*               PRO.REC<159>=MIS.ARRAY<1>   ; * SWB01
*               PRO.REC<163>=MIS.ARRAY<2>   ; * SWB01
            END

            IF SLC.ADJ THEN
               IF PRO.REC<7>='1' AND PRO.REC<8>='0' AND PRO.REC<11>='-1' THEN
                  PRO.REC<7>='0'
                  PRO.REC<11>='0'
               END
            END
            FOR I = 1 TO ITEM.COUNT
               IF DSPECS<12,I>#'' THEN
                  FORMULA=DSPECS<12,I>
                  FORMULA.LEN=LEN(FORMULA)
                  COL=''
                  OPR=''
                  OPR.TOT=0
                  CHR.POS=0
                  LOOP
                     CHR.POS+=1
                     CHR=FORMULA[CHR.POS,1]
                  UNTIL CHR.POS > FORMULA.LEN DO
                     BEGIN CASE
                        CASE CHR='+'
                           LOCATE COL IN DSPECS<11> SETTING OPRVAL THEN
                              OPR.AMT=LINE<1,OPRVAL>
                              IF OPR#'' THEN
                                 BEGIN CASE
                                    CASE OPR='+' ; OPR.TOT=OPR.TOT+OPR.AMT
                                    CASE OPR='-' ; OPR.TOT=OPR.TOT-OPR.AMT
                                    CASE OPR='*' ; OPR.TOT=OPR.TOT*OPR.AMT
                                    CASE OPR='/' ; OPR.TOT=OPR.TOT/OPR.AMT
                                 END CASE
                                 COL=''
                              END ELSE
                                 OPR.TOT=OPR.AMT
                              END
                           END
                           OPR='+'
                        CASE CHR='-'
                           LOCATE COL IN DSPECS<11> SETTING OPRVAL THEN
                              OPR.AMT=LINE<1,OPRVAL>
                              IF OPR#'' THEN
                                 BEGIN CASE
                                    CASE OPR='+' ; OPR.TOT=OPR.TOT+OPR.AMT
                                    CASE OPR='-' ; OPR.TOT=OPR.TOT-OPR.AMT
                                    CASE OPR='*' ; OPR.TOT=OPR.TOT*OPR.AMT
                                    CASE OPR='/' ; OPR.TOT=OPR.TOT/OPR.AMT
                                 END CASE
                              END ELSE
                                 OPR.TOT=OPR.AMT
                                 COL=''
                              END
                           END
                           OPR='-'
                        CASE CHR='*'
                           LOCATE COL IN DSPECS<11> SETTING OPRVAL THEN
                              OPR.AMT=LINE<1,OPRVAL>
                              IF OPR#'' THEN
                                 BEGIN CASE
                                    CASE OPR='+' ; OPR.TOT=OPR.TOT+OPR.AMT
                                    CASE OPR='-' ; OPR.TOT=OPR.TOT-OPR.AMT
                                    CASE OPR='*' ; OPR.TOT=OPR.TOT*OPR.AMT
                                    CASE OPR='/' ; OPR.TOT=OPR.TOT/OPR.AMT
                                 END CASE
                                 COL=''
                              END ELSE
                                 OPR.TOT=OPR.AMT
                              END
                           END
                           OPR='*'
                        CASE CHR='/'
                           LOCATE COL IN DSPECS<11> SETTING OPRVAL THEN
                              OPR.AMT=LINE<1,OPRVAL>
                              IF OPR#'' THEN
                                 BEGIN CASE
                                    CASE OPR='+' ; OPR.TOT=OPR.TOT+OPR.AMT
                                    CASE OPR='-' ; OPR.TOT=OPR.TOT-OPR.AMT
                                    CASE OPR='*' ; OPR.TOT=OPR.TOT*OPR.AMT
                                    CASE OPR='/' ; OPR.TOT=OPR.TOT/OPR.AMT
                                 END CASE
                                 COL=''
                              END ELSE
                                 OPR.TOT=OPR.AMT
                              END
                           END
                           OPR='/'
                        CASE CHR=''
                        CASE 1
                           COL:=CHR
                     END CASE
                  REPEAT
                  LOCATE COL IN DSPECS<11> SETTING OPRVAL THEN
                     OPR.AMT=LINE<1,OPRVAL>
                     IF OPR#'' THEN
                        BEGIN CASE
                           CASE OPR='+' ; OPR.TOT=OPR.TOT+OPR.AMT
                           CASE OPR='-' ; OPR.TOT=OPR.TOT-OPR.AMT
                           CASE OPR='*' ; OPR.TOT=OPR.TOT*OPR.AMT
                           CASE OPR='/' ; OPR.TOT=OPR.TOT/OPR.AMT
                        END CASE
                        COL=''
                     END ELSE
                        OPR.TOT=OPR.AMT
                     END
                  END
                  ITEM=OPR.TOT
               END ELSE
                  VAL=DSPECS<5,I>
                  ATTR=DSPECS<4,I>
                  IF ATTR#0 THEN
                     PRO.FLG=0
                     BEGIN CASE
                        CASE DSPECS<3,I>='FB'
                           IF VAL='' THEN
                              ITEM=PRO.REC<ATTR>
                           END ELSE
                              BEGIN CASE
                                 CASE VAL='L'
                                    R.ATTR=DSPECS<13,I>
                                    R.LST=TRIM(DSPECS<14,I>)
                                    ITEM=''
                                    NITMS=DCOUNT(R.LST,' ')
                                    NDCNT=DCOUNT(PRO.REC<R.ATTR>,@VM)
                                    FOR ITM=1 TO NITMS
                                       R.VAL=FIELD(R.LST,' ',ITM)
                                       LOCATE(R.VAL,PRO.REC,R.ATTR;RPOS) THEN
                                          FOR DCNT=1 TO NDCNT
                                             IF PRO.REC<R.ATTR,DCNT>=R.VAL THEN
                                                ITEM+=PRO.REC<ATTR,DCNT>
                                             END
                                          NEXT DCNT
                                       END
                                    NEXT ITM
                                 CASE VAL='S'
                                    ITEM=SUM(PRO.REC<ATTR>)
                                 CASE VAL='E'
                                    ITEM=SUM(PRO.REC<ATTR>)
                                    R.ATTR=DSPECS<13,I>
                                    R.LST=TRIM(DSPECS<14,I>)
                                    NITMS=DCOUNT(R.LST,' ')
                                    NDCNT=DCOUNT(PRO.REC<R.ATTR>,@VM)
                                    FOR ITM=1 TO NITMS
                                       R.VAL=FIELD(R.LST,' ',ITM)
                                       FOR DCNT=1 TO NDCNT
                                          IF PRO.REC<R.ATTR,DCNT>=R.VAL THEN
                                             ITEM-=PRO.REC<ATTR,DCNT>
                                          END
                                       NEXT DCNT
                                    NEXT ITM
                                 CASE 1
                                    ITEM=PRO.REC<ATTR,VAL>
                                    IF ATTR='8' AND VAL='63' THEN
                                       IF PRO.REC<63>+0#0 THEN
                                          ITEM=(PRO.REC<8>+PRO.REC<44>)-PRO.REC<63>
                                       END ELSE
                                          ITEM=0
                                       END
                                    END
                                    IF SLC.FRT OR SLC.ADJ THEN
                                       IF ATTR='74' AND PRO.REC<151,VAL>#'FRT' THEN ITEM=''
                                       IF ATTR='75' AND PRO.REC<151,VAL>#'FRT' THEN ITEM=''
                                    END
                              END CASE
                           END
                           IF CLIENT.REC<13>#'Y' THEN
                              IF ATTR='5' OR ATTR='31' OR ATTR='32' OR ATTR='33' THEN
                                 ITEM=''
                              END
                           END
                           IF USER='PMARQUARDT' OR USER='ATENORIO' OR USER='TPNIAK' OR USER='GNEARGARTH' THEN
                              BEGIN CASE
                                 CASE PRO.REC<21>='6'
                                    COMM.ACCESS='Y'
                                 CASE PRO.REC<21>='11'
                                    COMM.ACCESS='Y'
                                 CASE 1
                                    COMM.ACCESS='N'
                              END CASE
                           END
                           IF COMM.ACCESS='N' THEN
                              BEGIN CASE
                                 CASE ATTR >= 42 AND ATTR <= 44
                                    ITEM = 'NA'
                                 CASE ATTR >= 10 AND ATTR <= 12
                                    ITEM = 'NA'
                                 CASE ATTR >= 34 AND ATTR <= 36
                                    ITEM = 'NA'
                              END CASE
                           END

                        CASE DSPECS<3,I>='TR'      ; * SWB01
                           IF VAL='' THEN          ; * SWB01
                              ITEM=TR.REC<ATTR>    ; * SWB01
                           END ELSE      ; * SWB01
                              BEGIN CASE              ; * SWB01
                                 CASE VAL='L'         ; * SWB01
                                    R.ATTR=DSPECS<13,I>         ; * SWB01
                                    R.LST=TRIM(DSPECS<14,I>)              ; * SWB01
                                    ITEM=''        ; * JMK07   ; * SWB01
                                    NITMS=DCOUNT(R.LST,' ')  ; * JMK08   ; * SWB01
                                    NDCNT=DCOUNT(TR.REC<R.ATTR>,@VM)      ; * SWB01
                                    FOR ITM=1 TO NITMS       ; * JMK08   ; * SWB01
                                       R.VAL=FIELD(R.LST,' ',ITM)      ; * JMK08   ; * SWB01
                                       LOCATE(R.VAL,TR.REC,R.ATTR;RPOS) THEN        ; * SWB01
                                          FOR DCNT=1 TO NDCNT             ; * SWB01
                                             IF TR.REC<R.ATTR,DCNT>=R.VAL THEN      ; * SWB01
                                                ITEM+=TR.REC<ATTR,DCNT>             ; * SWB01
                                             END      ; * SWB01
                                          NEXT DCNT             ; * SWB01
                                       END            ; * SWB01
                                    NEXT ITM       ; * JMK08   ; * SWB01
                                 CASE VAL='S'      ; * JMK06   ; * SWB01
                                    ITEM=SUM(TR.REC<ATTR>)   ; * JMK06   ; * SWB01
                                 CASE VAL='E'      ; * JMK08   ; * SWB01
                                    SUM.CHG=SUM(TR.REC<ATTR>)          ; * JMK08   ; * SWB01
                                    R.ATTR=DSPECS<13,I>      ; * JMK08   ; * SWB01
                                    R.LST=TRIM(DSPECS<14,I>)           ; * JMK08   ; * SWB01
                                    ITEM=''        ; * JMK07   ; * SWB01
                                    NITMS=DCOUNT(R.LST,' ')  ; * JMK08   ; * SWB01
                                    NDCNT=DCOUNT(TR.REC<R.ATTR>,@VM)      ; * SWB01
                                    FOR ITM=1 TO NITMS       ; * JMK08   ; * SWB01
                                       R.VAL=FIELD(R.LST,' ',ITM)      ; * JMK08   ; * SWB01
*                                      LOCATE(R.VAL,TR.REC,R.ATTR;RPOS) THEN     ; * SWB01
*                                         ITEM=ITEM-TR.REC<ATTR,RPOS>            ; * SWB01
*                                      END          ; * SWB01
                                       FOR DCNT=1 TO NDCNT      ; * SWB01
                                          IF TR.REC<R.ATTR,DCNT>=R.VAL THEN         ; * SWB01
                                             ITEM-=TR.REC<ATTR,DCNT>      ; * SWB01
                                          END         ; * SWB01
                                       NEXT DCNT      ; * SWB01
                                    NEXT ITM       ; * JMK08   ; * SWB01
                                    ITEM=SUM.CHG-ITEM        ; * SWB01
                                 CASE 1     ; * SWB01
                                    ITEM=TR.REC<ATTR,VAL>    ; * SWB01
                              END CASE      ; * SWB01
                           END           ; * SWB01
                        CASE DSPECS<3,I>='VC'      ; * SWB01
                           IF VAL='' THEN          ; * SWB01
                              ITEM=VC.REC<ATTR>    ; * SWB01
                              IF USER = 'OWEN---' THEN       ; * SWB01
                                 IF INDEX(OCONV(VC.REC<1>,'MCU'),'CARDINAL',1) ELSE GO OWEN.REPEAT   ; * SWB01
                              END        ; * SWB01
                           END ELSE      ; * SWB01
                              BEGIN CASE              ; * SWB01
                                 CASE VAL='L'         ; * SWB01
                                    R.ATTR=DSPECS<13,I>         ; * SWB01
                                    R.LST=TRIM(DSPECS<14,I>)              ; * SWB01
                                    ITEM=''        ; * JMK07   ; * SWB01
                                    NITMS=DCOUNT(R.LST,' ')  ; * JMK08   ; * SWB01
                                    NDCNT=DCOUNT(VC.REC<R.ATTR>,@VM)      ; * SWB01
                                    FOR ITM=1 TO NITMS       ; * JMK08   ; * SWB01
                                       R.VAL=FIELD(R.LST,' ',ITM)      ; * JMK08   ; * SWB01
                                       LOCATE(R.VAL,VC.REC,R.ATTR;RPOS) THEN        ; * SWB01
                                          FOR DCNT=1 TO NDCNT             ; * SWB01
                                             IF VC.REC<R.ATTR,DCNT>=R.VAL THEN      ; * SWB01
                                                ITEM+=VC.REC<ATTR,DCNT>             ; * SWB01
                                             END      ; * SWB01
                                          NEXT DCNT             ; * SWB01
                                       END            ; * SWB01
                                    NEXT ITM       ; * JMK08   ; * SWB01
                                 CASE VAL='S'      ; * JMK06   ; * SWB01
                                    ITEM=SUM(VC.REC<ATTR>)   ; * JMK06   ; * SWB01
                                 CASE VAL='E'      ; * JMK08   ; * SWB01
                                    SUM.CHG=SUM(VC.REC<ATTR>)          ; * JMK08   ; * SWB01
                                    R.ATTR=DSPECS<13,I>      ; * JMK08   ; * SWB01
                                    R.LST=TRIM(DSPECS<14,I>)           ; * JMK08   ; * SWB01
                                    ITEM=''        ; * JMK07   ; * SWB01
                                    NITMS=DCOUNT(R.LST,' ')  ; * JMK08   ; * SWB01
                                    NDCNT=DCOUNT(VC.REC<R.ATTR>,@VM)      ; * SWB01
                                    FOR ITM=1 TO NITMS       ; * JMK08   ; * SWB01
                                       R.VAL=FIELD(R.LST,' ',ITM)      ; * JMK08   ; * SWB01
                                       FOR DCNT=1 TO NDCNT      ; * SWB01
                                          IF VC.REC<R.ATTR,DCNT>=R.VAL THEN         ; * SWB01
                                             ITEM-=VC.REC<ATTR,DCNT>      ; * SWB01
                                          END         ; * SWB01
                                       NEXT DCNT      ; * SWB01
                                    NEXT ITM       ; * JMK08   ; * SWB01
                                    ITEM=SUM.CHG-ITEM        ; * SWB01
                                 CASE 1     ; * SWB01
                                    ITEM=VC.REC<ATTR,VAL>    ; * SWB01
                              END CASE      ; * SWB01
                           END           ; * SWB01
                     END CASE
                  END ELSE
                     ITEM=PRO.ID
                     PRO.FLG=1
                  END
                  AUDIT.TIME = ""
                  AUDIT.DATE = ""
                  AUDITED.BY = PRO.REC<89>
                  CONVERSION=DSPECS<6,I>
                  IF CLIENT.REC<191>#'' THEN
                     IF USRFLD<1>=I THEN
                        IF CLIENT.REC<193,1>='D' THEN CONVERSION='D2/'
                        IF CLIENT.REC<193,1>='C' THEN CONVERSION='MD2'
                     END
                     IF USRFLD<2>=I THEN
                        IF CLIENT.REC<193,2>='D' THEN CONVERSION='D2/'
                        IF CLIENT.REC<193,2>='C' THEN CONVERSION='MD2'
                     END
                     IF USRFLD<3>=I THEN
                        IF CLIENT.REC<193,3>='D' THEN CONVERSION='D2/'
                        IF CLIENT.REC<193,3>='C' THEN CONVERSION='MD2'
                     END
                     IF USRFLD<4>=I THEN
                        IF CLIENT.REC<193,4>='D' THEN CONVERSION='D2/'
                        IF CLIENT.REC<193,4>='C' THEN CONVERSION='MD2'
                     END
                     IF USRFLD<5>=I THEN
                        IF CLIENT.REC<193,5>='D' THEN CONVERSION='D2/'
                        IF CLIENT.REC<193,5>='C' THEN CONVERSION='MD2'
                     END
                     IF USRFLD<6>=I THEN
                        IF CLIENT.REC<193,6>='D' THEN CONVERSION='D2/'
                        IF CLIENT.REC<193,6>='C' THEN CONVERSION='MD2'
                     END
                  END
                  IF CONVERSION#'' THEN
                     BEGIN CASE
                        CASE CONVERSION='MC/N' AND ATTR='60' AND REJ.INFO='I'
                           ITEM=OCONV(ITEM<1,1,1>,CONVERSION)
                        CASE CONVERSION='D2/' AND ATTR='60' AND REJ.INFO='I'
                           ITEM=OCONV(ITEM<1,1,2>,CONVERSION)
                        CASE CONVERSION='MC/N' AND ATTR='62' AND REJ.INFO='I'
                           ITEM=OCONV(ITEM<1,1,1>,CONVERSION)
                        CASE CONVERSION='D2/' AND ATTR='62' AND REJ.INFO='I'
                           ITEM=OCONV(ITEM<1,1,2>,CONVERSION)
                        CASE CONVERSION[1,2]='FC'
                           IF CONVERSION[3,1]='+' OR CONVERSION[3,1]='-' THEN
                              IF CONVERSION[3,1]='-' THEN
                                 FACTOR=1.00-TRIM(CONVERSION[4,999]'R26')
                              END ELSE
                                 FACTOR=1.00+TRIM(CONVERSION[4,999]'R26')
                              END
                              ITEM=OCONV((PRO.REC<8>+PRO.REC<44>+PRO.REC<165>)*FACTOR,'MD2Z')
                           END ELSE
                              ITEM=OCONV(PRO.REC<8>+PRO.REC<44>+PRO.REC<165>,'MD2Z')
                           END
*                           CASE CONVERSION='FBWR'  ; * SWB01
*                              COL.NAME=DSPECS<2,I>  ; * SWB01
*                              BEGIN CASE  ; * SWB01
*                                 CASE COL.NAME = 'Division Number'  ; * SWB01
*                                    ITEM=FWR.REC<3>  ; * SWB01
*                                 CASE COL.NAME = 'Division Name'  ; * SWB01
*                                    FWR.DIV.NUM=FWR.REC<3>  ; * SWB01
*                                    READV ITEM FROM F.DIVISION, FWR.DIV.NUM, 11 ELSE ITEM = ''  ; * SWB01
*                                 CASE COL.NAME = 'Carrier #'  ; * SWB01
*                                    ITEM=FIELD(FWR.ID, '*', 1)  ; * SWB01
*                                 CASE COL.NAME = 'Carrier Name'  ; * SWB01
*                                    FWR.CARRIER.NUM=FIELD(FWR.ID, '*', 1)  ; * SWB01
*                                    READV ITEM FROM F.CARRIERS, FWR.CARRIER.NUM, 1 ELSE ITEM = ''  ; * SWB01
*                                 CASE COL.NAME = 'Bill Date'  ; * SWB01
*                                    ITEM=OCONV(FWR.REC<8>,'D2/')  ; * SWB01
*                                 CASE COL.NAME = 'Entry Date'  ; * SWB01
*                                    ITEM=OCONV(FWR.REC<4>,'D2/')  ; * SWB01
*                                 CASE COL.NAME = 'Keyed Date'  ; * SWB01
*                                    ITEM=OCONV(FWR.REC<9>, 'D2/')  ; * SWB01
*                                 CASE COL.NAME = 'Activity'  ; * SWB01
*                                    REVIEW.STATUS = FWR.REC<2>  ; * SWB01
*                                    BEGIN CASE  ; * SWB01
*                                       CASE REVIEW.STATUS = '970'  ; * SWB01
*                                          ITEM = 'Available for Review'  ; * SWB01
*                                       CASE REVIEW.STATUS = '971'  ; * SWB01
*                                          ITEM = 'Approved'  ; * SWB01
*                                       CASE REVIEW.STATUS = '972'  ; * SWB01
*                                          ITEM = 'Never Pay'  ; * SWB01
*                                       CASE REVIEW.STATUS = '973'  ; * SWB01
*                                          ITEM = 'Eventually Pay'  ; * SWB01
*                                       CASE 1  ; * SWB01
*                                          ITEM = ''  ; * SWB01
*                                    END CASE  ; * SWB01
*                                 CASE COL.NAME = 'Activity Date'  ; * SWB01
*                                    ITEM=OCONV(FWR.REC<1>, 'D2/')  ; * SWB01
*                                 CASE COL.NAME = 'First Review Date'  ; * SWB01
*                                    READV FIRST.REVIEW.DATE FROM F.REVIEW, PRO.ID:'_1', 1 ELSE FIRST.REVIEW.DATE = ''  ; * SWB01
*                                    ITEM = OCONV(FIRST.REVIEW.DATE, 'D2/')  ; * SWB01
*                                 CASE COL.NAME = 'Rejected Date'  ; * SWB01
*                                    ITEM=OCONV(FWR.REC<5>,'D2/')  ; * SWB01
*                                 CASE COL.NAME = 'Authorized Person'  ; * SWB01
*                                    ITEM=FWR.REC<6>  ; * SWB01
*                                 CASE COL.NAME = 'Rejected Reason'  ; * SWB01
*                                    ITEM=FWR.REC<7>  ; * SWB01
*                                 CASE 1  ; * SWB01
*
*                              END CASE  ; * SWB01
                        CASE CONVERSION = 'RNPD'   ; * Rejected, Never Pay Date

*This is the first of 7 special columns in version 64. To be a little more efficient, the FB.BILLS.ACCESS record is read here,
*and the 6 variables used for the 6 columns of PD, LAT, TRNP, TREP and TSFA are determined here and used when the CONVERSION = those values.
*If this is a parcel bill, it isn't sent for Approval.

                           ITEM = 0      ; * Days Waiting for Approval   ; * SWB01
                           LAST.REJECTED.EVENTUAL.DATE = ''  ; * SWB01
                           LAST.REJECTED.NEVER.PAY.DATE = ''           ; * SWB01
                           FIRST.PTW.DATE = ''     ; * SWB01
                           LAST.PTW.DATE = ''      ; * SWB01
                           DAYS.WAITING.FOR.APPROVAL = ''    ; * For when CONVERSION = 'RNPD'   ; * SWB01
                           REJ.EVENTUALLY.PAY.CNT = 0        ; * For when CONVERSION = 'TREP'   ; * SWB01
                           TIMES.SENT.FOR.APPR.CNT = 0       ; * For when CONVERSION = 'TSFA'   ; * SWB01
                           APPROVAL.CNT = 0        ; * SWB01
                           REJ.NEVER.PAY.CNT = 0   ; * For when CONVERSION = 'TRNP'   ; * SWB01
                           REJ.CODE.CNT = 0        ; * SWB01
                           REJ.N.CODE.CNT = 0      ; * SWB01
                           REJ.E.CODE.CNT = 0      ; * SWB01
                           PROCESS.CNT = 0         ; * SWB01


                           LAST.ACTIVITY.TYPE = ''           ; * For when CONVERSION = 'LAT'   ; * SWB01
                           FIRST.REVIEW.DATE = ''  ; * SWB01
                           ACTIVITY.DATE.CNT = 0   ; * SWB01
                           APPROVAL.DATE = ''      ; * SWB01
                           PROCESS.DATE = ''       ; * SWB01
                           REJECTED.NEVER.PAY.DATE = ''      ; * SWB01
                           WAITING.FOR.APPROVAL.DATE = ''    ; * SWB01

                           KEYED.DATE = PRO.REC<247>         ; * SWB01
                           ENTERED.DATE = PRO.REC<30>        ; * SWB01

                           READ ACCESS.REC FROM F.ACCESS,PRO.ID THEN   ; * SWB01
                              ACTIVITY.DATES = ACCESS.REC<1>           ; * SWB01
                              ACCESS.REC.4 = ACCESS.REC<4>   ; * SWB01

                              READV FIRST.REVIEW.DATE FROM F.REVIEW, PRO.ID:'_1', 1 ELSE FIRST.REVIEW.DATE = 'NOF'       ; * SWB01

*The next 3 variables are initialized here for efficiency reasons. They are primarily for the next 3 columns as described above   ; * SWB01
*but can also be used in this CASE statement.
                              REJ.NEVER.PAY.CNT = COUNT(ACCESS.REC.4, '972')     ; * SWB01
                              REJ.EVENTUALLY.PAY.CNT = COUNT(ACCESS.REC.4, '973')          ; * SWB01
                              TIMES.SENT.FOR.APPR.CNT = COUNT(ACCESS.REC.4, 'PTW')         ; * SWB01
                              APPROVAL.CNT = COUNT(ACCESS.REC.4, '971')          ; * SWB01
                              REJ.CODE.CNT = COUNT(ACCESS.REC.4, 'REJ')          ; * SWB01
                              REJ.E.CODE.CNT = COUNT(ACCESS.REC.4, 'REJ.E')      ; * SWB01
                              REJ.N.CODE.CNT = COUNT(ACCESS.REC.4, 'REJ.N')      ; * SWB01
                              PROCESS.CNT = COUNT(ACCESS.REC.4, 'PROCESS')       ; * SWB01
*Since we counted anything with 'REJ' in REJ.CODE.CNT, we need to subrtacT REJ.E.CODE.CNT and REJ.N.CODE.CNT to keep from   ; * SWB01
*counting just 'REJ' twice.
                              REJ.CODE.CNT = REJ.CODE.CNT - REJ.E.CODE.CNT - REJ.N.CODE.CNT          ; * SWB01
                              APPROVAL.DATE = ''   ; * SWB01
                              PROCESS.DATE = ''    ; * SWB01
                              REJECTED.NEVER.PAY.DATE = ''   ; * SWB01

                              ACTIVITY.DATE.CNT = DCOUNT(ACTIVITY.DATES, @VM)    ; * SWB01

                              ADC = ACTIVITY.DATE.CNT + 1    ; * SWB01
                              LOOP       ; * SWB01
                                 ADC -= 1          ; * SWB01
                              UNTIL ADC = 0        ; * SWB01
*Loop all the way thru the Activities from end to start to get the first Push to Web date.
*The coding is done in such a way that once a variable is set, it isn't reset EXCEPT for FIRST.PTW.DATE
                                 ACTIVITY.CNT = DCOUNT(ACCESS.REC.4<1, ADC>, @SVM)         ; * SWB01
                                 FOR ASVC = ACTIVITY.CNT TO 1 STEP - 1           ; * SWB01

                                    BEGIN CASE     ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = '972'   ; * Rejected Never Pay on web   ; * SWB01
                                          IF REJECTED.NEVER.PAY.DATE = '' THEN REJECTED.NEVER.PAY.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)         ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Aprvd on Web'  ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'REJ.N'           ; * Rejected Never Pay, not sent to web   ; * SWB01
                                          IF REJECTED.NEVER.PAY.DATE = '' THEN REJECTED.NEVER.PAY.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)         ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Never Pay, internal'        ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'REJ'   ; * Rejected Never Pay, not sent to web   ; * SWB01
                                          IF REJECTED.NEVER.PAY.DATE = '' THEN REJECTED.NEVER.PAY.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)         ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Never Pay, internal'        ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'REJ.N_A'         ; * Rejected Never Pay, not sent to web   ; * SWB01
                                          IF REJECTED.NEVER.PAY.DATE = '' THEN REJECTED.NEVER.PAY.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)         ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Never Pay, internal'        ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'REJ_A'           ; * Rejected Never Pay, not sent to web   ; * SWB01
                                          IF REJECTED.NEVER.PAY.DATE = '' THEN REJECTED.NEVER.PAY.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)         ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Never Pay, internal'        ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'PROCESS'         ; * Processed   ; * SWB01
                                          IF PROCESS.DATE = '' THEN PROCESS.DATE = PRO.REC<37>       ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Processed'     ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = '971'   ; * Approved on web   ; * SWB01
                                          IF APPROVAL.DATE = '' THEN APPROVAL.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)         ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Approved on web'         ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = '973'   ; * Rejected Eventually pay on web   ; * SWB01
                                          IF LAST.REJECTED.EVENTUAL.DATE = '' THEN LAST.REJECTED.EVENTUAL.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)           ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Eventual Pay on web'        ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'REJ.E'           ; * Rejected Eventuall pay, not sent to web   ; * SWB01
                                          IF LAST.REJECTED.EVENTUAL.DATE = '' THEN LAST.REJECTED.EVENTUAL.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)           ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Eventual Pay, internal'     ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'REJ.E_A'         ; * Rejected Eventuall pay, not sent to web   ; * SWB01
                                          IF LAST.REJECTED.EVENTUAL.DATE = '' THEN LAST.REJECTED.EVENTUAL.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)           ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Eventual Pay, internal'     ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'PTW'   ; * Sent to Web for review   ; * SWB01
                                          IF FIRST.PTW.DATE = '' OR FIRST.PTW.DATE > FIELD(ACTIVITY.DATES<1, ADC>, '*', 1) THEN    ; * SWB01
*For FIRST.PTW.DATE, since we are going from latest to earliest, if the Date for the PTW being examined is EARLIER   ; * SWB01
*than the previous PTW, reset the FIRST.PTW.DATE to the earlier date.   ; * SWB01
                                             FIRST.PTW.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)  ; * SWB01
                                          END      ; * SWB01
                                          IF LAST.PTW.DATE = '' THEN LAST.PTW.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)         ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Sent to web for review'  ; * SWB01
                                       CASE ACCESS.REC.4<1, ADC, ASVC> = '974'   ; * Not reviewed   ; * SWB01
                                          IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Not Reviewed'  ; * SWB01

                                       CASE ACCESS.REC.4<1, ADC, ASVC> = 'KEY'   ; * Keyed   ; * SWB01
                                          IF KEYED.DATE = "" THEN KEYED.DATE = FIELD(ACTIVITY.DATES<1, ADC>, '*', 1)     ; * SWB01
                                       CASE 1      ; * SWB01

                                    END CASE       ; * SWB01
                                 NEXT ASVC         ; * SWB01

                              REPEAT     ; * SWB01

                              BEGIN CASE           ; * SWB01
                                 CASE PRO.REC<39> = 'R' AND PRO.REC<66> = 'N'    ; * SWB01
                                    IF LAST.REJECTED.NEVER.PAY.DATE = '' THEN LAST.REJECTED.NEVER.PAY.DATE = PRO.REC<30>           ; * SWB01
                                    IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Never Pay, internal FB'           ; * SWB01
                                 CASE PRO.REC<39> = 'R' AND PRO.REC<66> = 'E'    ; * SWB01
                                    IF LAST.REJECTED.EVENTUAL.DATE = '' THEN LAST.REJECTED.EVENTUAL.DATE = PRO.REC<30>   ; * SWB01
                                    IF LAST.ACTIVITY.TYPE = '' THEN LAST.ACTIVITY.TYPE = 'Reject Eventual Pay, internal FB'        ; * SWB01
                                 CASE 1  ; * SWB01

                              END CASE   ; * SWB01
                           END           ; * SWB01

                           IF NOT(INCLUDE.BILL) AND REJECTED.NEVER.PAY.DATE <= BEG.DATE AND REJECTED.NEVER.PAY.DATE >= END.DATE THEN         ; * SWB01
                              GO OWEN.REPEAT       ; * SWB01
                           END           ; * SWB01
*Now determine which date to use as the beginning of time to determine how long it takes to approve

                           BEGIN CASE    ; * SWB01
                              CASE FIRST.REVIEW.DATE # '' AND NUM(FIRST.REVIEW.DATE)       ; * SWB01
                                 WAITING.FOR.APPROVAL.DATE = FIRST.REVIEW.DATE   ; * SWB01
                              CASE FIRST.PTW.DATE # ''       ; * SWB01
                                 WAITING.FOR.APPROVAL.DATE = FIRST.PTW.DATE      ; * SWB01
                              CASE KEYED.DATE # ''           ; * SWB01
                                 WAITING.FOR.APPROVAL.DATE = KEYED.DATE          ; * SWB01
                              CASE ENTERED.DATE # '' AND ENTERED.DATE < FIRST.REVIEW.DATE AND ENTERED.DATE < FIRST.PTW.DATE        ; * SWB01
                                 WAITING.FOR.APPROVAL.DATE = ENTERED.DATE        ; * SWB01
                              CASE ENTERED.DATE # ''         ; * SWB01
                                 BEGIN CASE
                                    CASE ENTERED.DATE < FIRST.REVIEW.DATE AND NUM(FIRST.REVIEW.DATE)           ; * SWB01
                                       WAITING.FOR.APPROVAL.DATE = FIRST.REVIEW.DATE       ; * SWB01
                                    CASE ENTERED.DATE = FIRST.REVIEW.DATE AND NUM(FIRST.REVIEW.DATE)           ; * SWB01
                                       WAITING.FOR.APPROVAL.DATE = FIRST.REVIEW.DATE       ; * SWB01
                                    CASE ENTERED.DATE < FIRST.PTW.DATE           ; * SWB01
                                       WAITING.FOR.APPROVAL.DATE = FIRST.PTW.DATE          ; * SWB01
                                    CASE ENTERED.DATE = FIRST.PTW.DATE AND FIRST.PTW.DATE # ""       ; * SWB01
                                       WAITING.FOR.APPROVAL.DATE = FIRST.PTW.DATE          ; * SWB01
                                    CASE FIRST.REVIEW.DATE = 'NOF'     ; * SWB01
                                       BEGIN CASE
                                          CASE FIRST.PTW.DATE # '' AND FIRST.PTW.DATE <= ENTERED.DATE          ; * SWB01
*This is a little weird. Because ENTERED.DATE can, and sometimes does, change, if the First Push to Web Date
*is less than the Entered Date, we will use the FIRST.PTW.DATE.
                                             WAITING.FOR.APPROVAL.DATE = FIRST.PTW.DATE    ; * SWB01
                                          CASE ENTERED.DATE # ''       ; * SWB01
                                             WAITING.FOR.APPROVAL.DATE = ENTERED.DATE      ; * SWB01
                                          CASE 1   ; * SWB01

                                       END CASE    ; * SWB01
                                    CASE 1
                                       WAITING.FOR.APPROVAL.DATE = FIRST.REVIEW.DATE       ; * SWB01
                                       IF WAITING.FOR.APPROVAL.DATE = '' OR (WAITING.FOR.APPROVAL.DATE > FIRST.PTW.DATE AND FIRST.PTW.DATE + 0 > 0) THEN         ; * SWB01
                                          WAITING.FOR.APPROVAL.DATE = FIRST.PTW.DATE       ; * SWB01
                                       END         ; * SWB01
                                 END CASE          ; * SWB01

                              CASE 1     ; * SWB01
                                 WAITING.FOR.APPROVAL.DATE = FIRST.REVIEW.DATE   ; * SWB01
                                 IF WAITING.FOR.APPROVAL.DATE = '' OR (WAITING.FOR.APPROVAL.DATE > FIRST.PTW.DATE AND FIRST.PTW.DATE + 0 > 0) THEN     ; * SWB01
                                    WAITING.FOR.APPROVAL.DATE = FIRST.PTW.DATE   ; * SWB01
                                 END     ; * SWB01
                           END CASE      ; * SWB01

*We have (hopefully) determined the starting date to use for determining how many days it takes to approve.
*Now we are going to try to determine what the Ending date is for the calculation, and make the calculation.
                           ITEM = ''
                           IF REJECTED.NEVER.PAY.DATE # '' THEN        ; * SWB01
                              ITEM = OCONV(REJECTED.NEVER.PAY.DATE, 'D2/')       ; * SWB01
                           END           ; * SWB01

                           BEGIN CASE    ; * SWB01
                              CASE WAITING.FOR.APPROVAL.DATE # '' AND WAITING.FOR.APPROVAL.DATE # 'NOF'        ; * SWB01
                                 BEGIN CASE        ; * SWB01
                                    CASE APPROVAL.DATE # ''  ; * SWB01
                                       BEGIN CASE  ; * SWB01
                                          CASE APPROVAL.DATE >= REJECTED.NEVER.PAY.DATE    ; * SWB01
                                             DAYS.WAITING.FOR.APPROVAL = APPROVAL.DATE - WAITING.FOR.APPROVAL.DATE       ; * SWB01
                                          CASE REJECTED.NEVER.PAY.DATE > APPROVAL.DATE     ; * SWB01
                                             DAYS.WAITING.FOR.APPROVAL = REJECTED.NEVER.PAY.DATE - WAITING.FOR.APPROVAL.DATE       ; * SWB01
                                          CASE 1   ; * SWB01
                                             DAYS.WAITING.FOR.APPROVAL = END.DATE - WAITING.FOR.APPROVAL.DATE  ; * SWB01
                                       END CASE    ; * SWB01
                                    CASE LAST.ACTIVITY.TYPE = 'Sent to web for review'     ; * SWB01
                                       DAYS.WAITING.FOR.APPROVAL = END.DATE - WAITING.FOR.APPROVAL.DATE        ; * SWB01
                                    CASE LAST.ACTIVITY.TYPE[1, 19] = 'Reject Eventual Pay'           ; * SWB01
                                       DAYS.WAITING.FOR.APPROVAL = END.DATE - WAITING.FOR.APPROVAL.DATE        ; * SWB01
                                    CASE LAST.ACTIVITY.TYPE = 'Processed'        ; * SWB01
                                       DAYS.WAITING.FOR.APPROVAL = PROCESS.DATE - WAITING.FOR.APPROVAL.DATE    ; * SWB01
                                    CASE 1         ; * SWB01
                                       DAYS.WAITING.FOR.APPROVAL = END.DATE - WAITING.FOR.APPROVAL.DATE        ; * SWB01
                                 END CASE
                              CASE 1     ; * SWB01
                                 DAYS.WAITING.FOR.APPROVAL = ''        ; * SWB01
                           END CASE
                           IF DAYS.WAITING.FOR.APPROVAL < 0 THEN       ; * SWB01
                              DAYS.WAITING.FOR.APPROVAL = ''           ; * SWB01
                           END           ; * SWB01
*This is the backstop logic
                           IF DAYS.WAITING.FOR.APPROVAL = '' THEN      ; * SWB01
                              BEGIN CASE           ; * SWB01
                                 CASE PROCESS.DATE # '' AND ENTERED.DATE # '' AND PROCESS.DATE > ENTERED.DATE  ; * SWB01
                                    DAYS.WAITING.FOR.APPROVAL = PROCESS.DATE - ENTERED.DATE          ; * SWB01
                                 CASE PROCESS.DATE = '' AND REJECTED.NEVER.PAY.DATE = '' AND APPROVAL.DATE = '' AND KEYED.DATE # ''          ; * SWB01
                                    DAYS.WAITING.FOR.APPROVAL = INT.TODAY - KEYED.DATE     ; * SWB01
                                 CASE PROCESS.DATE = '' AND REJECTED.NEVER.PAY.DATE = '' AND APPROVAL.DATE = '' AND ENTERED.DATE # ''        ; * SWB01
                                    DAYS.WAITING.FOR.APPROVAL = END.DATE - ENTERED.DATE    ; * SWB01

                                 CASE 1

                              END CASE
                           END           ; * SWB01
                           IF DAYS.WAITING.FOR.APPROVAL < 0 THEN       ; * SWB01
                              DAYS.WAITING.FOR.APPROVAL = ''           ; * SWB01
                           END           ; * SWB01
                           IF CLEANUP THEN         ; * SWB01
                              IF DAYS.WAITING.FOR.APPROVAL # '' AND ABS(DAYS.WAITING.FOR.APPROVAL) < 30 THEN   ; * SWB01
                                 GOTO OWEN.REPEAT  ; * SWB01
                              END        ; * SWB01
                           END           ; * SWB01

                        CASE CONVERSION = 'LREPD'  ; * SWB01
                           ITEM = OCONV(LAST.REJECTED.EVENTUAL.DATE, 'D2/')      ; * SWB01
                        CASE CONVERSION = 'LSTWD'  ; * SWB01
                           ITEM = OCONV(LAST.PTW.DATE, 'D2/')          ; * SWB01
                        CASE CONVERSION = 'PD'     ; * Process Date   ; * SWB01
*This is conditionally shown. If there is a Rejected Never Pay later than a Process Date, or if there is no Process Date, the
* Rejected Never Pay date will be shown and the Process Date will not be shown. If there is no Rejected Never Pay or if the latest Processing Date
* is later than the latest Rejected Never Pay Date, then the Process Date will be shown.
                           ITEM = OCONV(PROCESS.DATE, 'D2/')           ; * SWB01

                        CASE CONVERSION = 'LAT'    ; * Last Activity Type   ; * SWB01
                           ITEM = LAST.ACTIVITY.TYPE         ; * SWB01
                        CASE CONVERSION = 'DWFA'   ; * Days Waiting for Approval for Wabtec version 64   ; * SWB01
                           ITEM = DAYS.WAITING.FOR.APPROVAL  ; * SWB01

                        CASE CONVERSION = 'TRNP'   ; * Times the bill was Rejected as Never Pay for Wabtec version 64   ; * SWB01
                           ITEM = REJ.NEVER.PAY.CNT + REJ.CODE.CNT + REJ.N.CODE.CNT        ; * SWB01
                        CASE CONVERSION = 'TREP'   ; * Times the bill was Rejected as Eventually Pay for Wabtec version 64   ; * SWB01
                           ITEM = REJ.EVENTUALLY.PAY.CNT + REJ.E.CODE.CNT        ; * SWB01

                        CASE CONVERSION = 'TSFA'   ; * Times the bill was sent to the Web for approval for Wabtec version 64   ; * SWB01
                           ITEM = TIMES.SENT.FOR.APPR.CNT    ; * SWB01

                        CASE 1
                           ITEM=OCONV(ITEM,CONVERSION)
                     END CASE
                  END

                  IF DSPECS<7,I>#'' THEN           ; * SWB01
                     T.FILE=DSPECS<7,I>  ; * SWB01
                     T.FILE.ITEM=''      ; * SWB01
                     BEGIN CASE          ; * SWB01
                        CASE T.FILE='CS'           ; * SWB01
                           ZIP.VAR=ITEM  ; * SWB01
                           BEGIN CASE    ; * SWB01
                              CASE ZIP.VAR MATCHES '5N'      ; * SWB01
                              CASE ZIP.VAR MATCHES '1A1N1A1N1A1N'      ; * SWB01
                              CASE ZIP.VAR MATCHES '1N1A1N1A1N1A'      ; * SWB01
                              CASE 1 ; ZIP.VAR=''  ; * SWB01
                           END CASE      ; * SWB01
                           IF ZIP.VAR='' THEN      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END ELSE      ; * SWB01
                              CALL FB.READ.ZIP(ZIP.VAR,CITY,STATE)     ; * SWB01
                              T.FILE.ITEM=CITY:", ":STATE    ; * SWB01
                           END           ; * SWB01
* NPR04 Start changes
                        CASE T.FILE='CSZ'          ; * SWB01
                           ZIP.VAR=ITEM  ; * SWB01
                           BEGIN CASE    ; * SWB01
                              CASE ZIP.VAR MATCHES '5N'      ; * SWB01
                              CASE ZIP.VAR MATCHES '1A1N1A1N1A1N'      ; * SWB01
                              CASE ZIP.VAR MATCHES '1N1A1N1A1N1A'      ; * SWB01
                              CASE 1 ; ZIP.VAR=''  ; * SWB01
                           END CASE      ; * SWB01
                           IF ZIP.VAR='' THEN      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END ELSE      ; * SWB01
                              CALL FB.READ.ZIP(ZIP.VAR,CITY,STATE)     ; * SWB01
                              CS.ATTR=DSPECS<8,I>  ; * SWB01
                              CS.VAL=DSPECS<9,I>   ; * SWB01
                              IF CS.ATTR = 1 OR CS.ATTR = 2 THEN T.FILE.ITEM = CITY : @AM : STATE    ; * SWB01
                           END           ; * SWB01
* NPR04 End changes
                        CASE T.FILE='CA'           ; * SWB01
                           READ T.FILE.ITEM FROM F.CARRIERS,ITEM ELSE T.FILE.ITEM=''       ; * SWB01
                        CASE T.FILE='CL'           ; * SWB01
*                          READ T.FILE.ITEM FROM F.CLIENTS,ITEM ELSE T.FILE.ITEM=''           ; * SWB01
                           READ T.FILE.ITEM FROM F.CLIENTS,CLIENT.ID ELSE T.FILE.ITEM=''      ; * SWB01
                        CASE T.FILE='DV'           ; * SWB01
                           IF DIVISION='Y' THEN    ; * SWB01
                              READ T.FILE.ITEM FROM F.DIVISION,ITEM ELSE T.FILE.ITEM=''    ; * SWB01
                           END ELSE      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END           ; * SWB01
                        CASE T.FILE='DVZ'          ; * SWB01
                           IF DIVISION='Y' THEN    ; * SWB01
                              READ T.FILE.ITEM FROM F.DIVISION,ITEM ELSE T.FILE.ITEM=''    ; * SWB01
                              ITEM=T.FILE.ITEM<1>  ; * SWB01
*                             READ T.FILE.ITEM FROM F.ZIPS, ITEM ELSE T.FILE.ITEM=''          ; * SWB01
                              READ T.FILE.ITEM FROM F.ZIPS, ITEM ELSE     ; * SWB01
                                 READ T.FILE.ITEM FROM F.CAN.ZIPS, ITEM ELSE T.FILE.ITEM=''             ; * SWB01
                              END           ; * SWB01
                           END ELSE      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END           ; * SWB01
                        CASE T.FILE='FB.TRANSPORT'           ; * SWB01
                           READ T.FILE.ITEM FROM F.TRANSPORT,ITEM ELSE T.FILE.ITEM=''      ; * SWB01
                        CASE T.FILE='LI.CODES'     ; * SWB01
                           GOSUB HANDLE.LI.CODES      ; * SWB01
*                          IF ITEM#'' THEN            ; * SWB01
*                             LOCATE ITEM IN LI.CODES<1> SETTING POS THEN           ; * SWB01
*                                T.FILE.ITEM=LI.CODES<2,POS>    ; * SWB01
*                             END ELSE      ; * SWB01
*                                T.FILE.ITEM='---Unknown---'    ; * SWB01
*                             END           ; * SWB01
*                             T.FILE.ITEM='---Unknown---'           ; * SWB01
*                             BEGIN CASE                            ; * SWB01
*                                CASE PRO.REC<21>='12'              ; * SWB01
*                                   LOCATE ITEM IN AIR.CODES<1> SETTING POS THEN                  ; * SWB01
*                                      T.FILE.ITEM=AIR.CODES<2,POS>           ; * SWB01
*                                   END                             ; * SWB01
*                                CASE PRO.REC<21>='8' OR PRO.REC<3>='99999' OR PRO.REC<4>='99999'           ; * SWB01
*                                   LOCATE ITEM IN INTL.CODES<1> SETTING POS THEN                 ; * SWB01
*                                      T.FILE.ITEM=INTL.CODES<2,POS>          ; * SWB01
*                                   END                             ; * SWB01
*                                CASE 1                                      ; * SWB01
*                                   LOCATE ITEM IN LI.CODES<1> SETTING POS THEN         ; * SWB01
*                                      T.FILE.ITEM=LI.CODES<2,POS>            ; * SWB01
*                                   END      ; * SWB01
*                             END CASE          ; * SWB01
*                          END ELSE                      ; * SWB01
*                             T.FILE.ITEM=''             ; * SWB01
*                          END                           ; * SWB01
                        CASE T.FILE='CHG.CODES'       ; * SWB01
                           T.FILE.ITEM=''             ; * SWB01
                           IF ITEM#'' THEN            ; * SWB01
                              T.FILE.ITEM='OTH'       ; * SWB01
                              BEGIN CASE              ; * SWB01
                                 CASE PRO.REC<21>='12'          ; * SWB01
                                    LOCATE ITEM IN AIR.CODES<1> SETTING POS THEN              ; * SWB01
                                       T.FILE.ITEM=AIR.CODES<5,POS>       ; * SWB01
                                    END     ; * SWB01
                                 CASE PRO.REC<21>='8'           ; * SWB01
                                    LOCATE ITEM IN INTL.CODES<1> SETTING POS THEN             ; * SWB01
                                       T.FILE.ITEM=INTL.CODES<5,POS>      ; * SWB01
                                    END     ; * SWB01
                                 CASE 1  ; * SWB01
                                    LOCATE ITEM IN LI.CODES<1> SETTING POS THEN     ; * SWB01
                                       T.FILE.ITEM=LI.CODES<5,POS>        ; * SWB01
                                    END     ; * SWB01
                              END CASE      ; * SWB01
                           END              ; * SWB01
                        CASE T.FILE='CHG.DESC'        ; * SWB01
                           T.FILE.ITEM=''             ; * SWB01
                           IF ITEM#'' THEN            ; * SWB01
                              T.FILE.ITEM='OTH'       ; * SWB01
                              BEGIN CASE              ; * SWB01
                                 CASE PRO.REC<21>='12'          ; * SWB01
                                    LOCATE ITEM IN AIR.CODES<1> SETTING POS THEN              ; * SWB01
                                       T.FILE.ITEM=AIR.CODES<2,POS>       ; * SWB01
                                    END     ; * SWB01
                                 CASE PRO.REC<21>='8'           ; * SWB01
                                    LOCATE ITEM IN INTL.CODES<1> SETTING POS THEN             ; * SWB01
                                       T.FILE.ITEM=INTL.CODES<2,POS>      ; * SWB01
                                    END     ; * SWB01
                                 CASE 1  ; * SWB01
                                    LOCATE ITEM IN LI.CODES<1> SETTING POS THEN     ; * SWB01
                                       T.FILE.ITEM=LI.CODES<2,POS>        ; * SWB01
                                    END     ; * SWB01
                              END CASE      ; * SWB01
                           END              ; * SWB01
                        CASE T.FILE='OVRCHG.CODES'           ; * SWB01
                           IF ITEM#'' THEN         ; * SWB01
                              LOCATE ITEM IN OVR.CODES<1> SETTING POS THEN       ; * SWB01
                                 T.FILE.ITEM=OVR.CODES<2,POS>          ; * SWB01
                              END ELSE   ; * SWB01
                                 T.FILE.ITEM='---Unknown---'           ; * SWB01
                              END        ; * SWB01
                           END ELSE      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END           ; * SWB01
                        CASE T.FILE='REJ.CODES'       ; * SWB01
                           IF ITEM#'' THEN            ; * SWB01
                              LOCATE ITEM IN REJ.CODES<1> SETTING POS THEN          ; * SWB01
                                 T.FILE.ITEM=REJ.CODES<2,POS>             ; * SWB01
                              END ELSE      ; * SWB01
                                 T.FILE.ITEM='---Unknown---'              ; * SWB01
                              END           ; * SWB01
                           END ELSE         ; * SWB01
                              T.FILE.ITEM=''          ; * SWB01
                           END              ; * SWB01
                        CASE T.FILE='SERV.LEV'     ; * SWB01
                           IF ITEM#'' THEN         ; * SWB01
                              LOCATE ITEM IN SERV.LEV<1> SETTING POS THEN        ; * SWB01
                                 T.FILE.ITEM=SERV.LEV<2,POS>           ; * SWB01
                              END ELSE   ; * SWB01
                                 T.FILE.ITEM='---Unknown---'           ; * SWB01
                              END        ; * SWB01
                           END ELSE      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END           ; * SWB01
                        CASE T.FILE='AFS.SERV.LEV'           ; * SWB01
                           IF ITEM#'' THEN         ; * SWB01
                              LOCATE ITEM IN SERV.LEV<1> SETTING POS THEN        ; * SWB01
                                 T.ITEM=SERV.LEV<3,POS>      ; * SWB01
                                 LOCATE T.ITEM IN AFS.SERV.LEV<1> SETTING POS THEN         ; * SWB01
                                    T.FILE.ITEM=AFS.SERV.LEV<2,POS>    ; * SWB01
                                 END ELSE          ; * SWB01
                                    T.FILE.ITEM=T.ITEM:' is not in BASE'         ; * SWB01
                                 END     ; * SWB01
                              END ELSE   ; * SWB01
                                 T.FILE.ITEM='---Unknown---'           ; * SWB01
                              END        ; * SWB01
                           END ELSE      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END           ; * SWB01
                        CASE T.FILE='VC'              ; * SWB01
                           IF VEND='Y' OR CUST='Y' THEN         ; * SWB01
                              READ T.FILE.ITEM FROM F.VC,ITEM ELSE T.FILE.ITEM=''             ; * SWB01
                           END ELSE         ; * SWB01
                              T.FILE.ITEM=''          ; * SWB01
                           END              ; * SWB01
                        CASE T.FILE='FB.COUNTRIES'              ; * SWB01
                           OPEN '',T.FILE TO FILE.NAME THEN  ; * SWB01
                              READ T.FILE.ITEM FROM FILE.NAME,ITEM ELSE T.FILE.ITEM=''     ; * SWB01
                           END ELSE      ; * SWB01
                              T.FILE.ITEM=''       ; * SWB01
                           END           ; * SWB01
                        CASE T.FILE='SHIPPER'         ; * SWB01
*                          IF USER='MKERBOW' THEN CALL ELINE('AT SHIPPER TRANS')   ; * SWB01
                           T.FILE.ITEM=''             ; * SWB01
                           IOT=PRO.REC<2>             ; * SWB01
                           EDI=0            ; * SWB01
                           IF PRO.REC<88>#'' OR PRO.REC<53>[1,12]='EBILL.IMPORT' THEN         ; * SWB01
                              EDI=1         ; * SWB01
                           END              ; * SWB01
                           BEGIN CASE       ; * SWB01
                              CASE EDI      ; * SWB01
                                 T.FILE.ITEM<1>=EDI.REC<19>     ; * SWB01
                                 T.FILE.ITEM<2>=EDI.REC<21>     ; * SWB01
                              CASE IOT='I'            ; * SWB01
                                 T.FILE.ITEM<1>=VC.REC<1>       ; * SWB01
                                 T.FILE.ITEM<2>=VC.REC<3,1>     ; * SWB01
                              CASE IOT='O'            ; * SWB01
                                 IF TRIM(FB.DIV.REC<11>)='' THEN          ; * SWB01
                                    T.FILE.ITEM<1>=CLIENT.NAME            ; * SWB01
                                 END ELSE             ; * SWB01
                                    T.FILE.ITEM<1>=FB.DIV.REC<11>         ; * SWB01
                                    IF NUM(T.FILE.ITEM<1>) THEN           ; * SWB01
                                       T.FILE.ITEM<1>=CLIENT.NAME:' ':FB.DIV.REC<11>          ; * SWB01
                                    END     ; * SWB01
                                 END        ; * SWB01
                                 IF TRIM(FB.DIV.REC<14>)='' THEN          ; * SWB01
                                    T.FILE.ITEM<2>=CLIENT.REC<3>          ; * SWB01
                                 END ELSE             ; * SWB01
                                    T.FILE.ITEM<2>=FB.DIV.REC<14>         ; * SWB01
                                 END        ; * SWB01
                              CASE 1        ; * SWB01
                                 T.FILE.ITEM<1>=CLIENT.NAME     ; * SWB01
                                 T.FILE.ITEM<2>=CLIENT.REC<3,1>           ; * SWB01
                           END CASE         ; * SWB01
                        CASE T.FILE='CONSIGNEE'       ; * SWB01
*                          IF USER='MKERBOW' THEN CALL ELINE('AT CONSIGNEE TRANS')   ; * SWB01
                           T.FILE.ITEM=''             ; * SWB01
                           IOT=PRO.REC<2>             ; * SWB01
                           EDI=0            ; * SWB01
                           IF PRO.REC<88>#'' OR PRO.REC<53>[1,12]='EBILL.IMPORT' THEN         ; * SWB01
                              EDI=1         ; * SWB01
                           END              ; * SWB01
                           BEGIN CASE       ; * SWB01
                              CASE EDI      ; * SWB01
                                 T.FILE.ITEM<1>=EDI.REC<28>     ; * SWB01
                                 T.FILE.ITEM<2>=EDI.REC<30>     ; * SWB01
                              CASE IOT='I'            ; * SWB01
                                 IF TRIM(FB.DIV.REC<11>)='' THEN          ; * SWB01
                                    T.FILE.ITEM<1>=CLIENT.NAME            ; * SWB01
                                 END ELSE             ; * SWB01
                                    T.FILE.ITEM<1>=FB.DIV.REC<11>         ; * SWB01
                                    IF NUM(T.FILE.ITEM<1>) THEN           ; * SWB01
                                       T.FILE.ITEM<1>=CLIENT.NAME:' ':FB.DIV.REC<11>          ; * SWB01
                                    END     ; * SWB01
                                 END        ; * SWB01
                                 IF TRIM(FB.DIV.REC<14>)='' THEN          ; * SWB01
                                    T.FILE.ITEM<2>=CLIENT.REC<3>          ; * SWB01
                                 END ELSE             ; * SWB01
                                    T.FILE.ITEM<2>=FB.DIV.REC<14>         ; * SWB01
                                 END        ; * SWB01
                              CASE IOT='O'            ; * SWB01
                                 T.FILE.ITEM<1>=VC.REC<1>       ; * SWB01
                                 T.FILE.ITEM<2>=VC.REC<3,1>     ; * SWB01
                              CASE 1        ; * SWB01
                                 T.FILE.ITEM<1>=CLIENT.NAME     ; * SWB01
                                 T.FILE.ITEM<2>=CLIENT.REC<3>             ; * SWB01
                           END CASE         ; * SWB01

*                     CASE 1   ; * SWB01
*                        OPEN '',T.FILE TO FILE.NAME THEN   ; * SWB01
*                           READ T.FILE.ITEM FROM FILE.NAME,ITEM ELSE T.FILE.ITEM=''   ; * SWB01
*                        END ELSE   ; * SWB01
*                           T.FILE.ITEM=''   ; * SWB01
*                        END   ; * SWB01
                     END CASE            ; * SWB01
                     T.VAL=DSPECS<9,I>   ; * SWB01
                     T.ATTR=DSPECS<8,I>  ; * SWB01
                     IF T.ATTR#0 THEN    ; * SWB01
                        IF T.VAL#'' THEN           ; * SWB01
                           ITEM=T.FILE.ITEM<T.ATTR,T.VAL>    ; * SWB01
                        END ELSE         ; * SWB01
                           ITEM=T.FILE.ITEM<T.ATTR>          ; * SWB01
*                       IF USER='owen' THEN CALL ELINE('Owen its at the CA thing')   ; * SWB01
                           IF ITEM='' AND T.ATTR = 12 AND T.FILE='CA' THEN       ; * Don't Allow Blank SCAC   ; * SWB01
                              ITEM=T.FILE.ITEM<1>[1,5]       ; * SWB01
                           END           ; * SWB01
                        END              ; * SWB01
                     END                 ; * SWB01
                  END                    ; * SWB01

                  IF DSPECS<10,I> THEN
                     BEGIN CASE
                        CASE NOT(NUM(ITEM))
                        CASE 1
                           SUBTOTAL<1,I> += ITEM
                           TOTAL<1,I> += ITEM
                     END CASE
                  END
                  BEGIN CASE
                     CASE SUB.ATTR='CARRIER.NAME'
                        IF OCONV(DSPECS<2,I>,'MCU')='CARRIER NAME' THEN
                           SUBTOTAL<1,I> = OLD.SUBDATA:' Total'
                           TOTAL<1,I> = 'Grand Total '
                        END
                     CASE SUB.ATTR='CARRIER.ID'
                        IF OCONV(DSPECS<2,I>,'MCU')='CARRIER#' THEN
                           SUBTOTAL<1,I> = OLD.SUBDATA:' Total'
                           TOTAL<1,I> = 'Grand Total '
                        END
                     CASE 1
                        IF ATTR = SUB.ATTR THEN
                           SUBTOTAL<1,I> = OLD.SUBDATA:' Total'
                           TOTAL<1,I> = 'Grand Total '
                        END
                  END CASE

                  ITEM=CHANGE(ITEM,@VM,' ')
                  ITEM=TRIM(ITEM)
                  IF CONVERSION#'QUOTE' THEN
                     ITEM=CHANGE(ITEM,'"','')
                  END
                  CHECK.CHAR=0
                  IF WHERE.FROM='FROM FB.3.1.NEW' AND USING.NEW.MACRO THEN CHECK.CHAR=1
                  IF WHERE.FROM='FROM FB.2.3.NW' AND USING.NEW.MACRO THEN CHECK.CHAR=1
                  IF CHECK.CHAR AND RPT.STYLE#'H' THEN
                     ADD.CHAR=0
                     IF ADD.CHAR AND RPT.STYLE#'H' THEN
                        BEGIN CASE
                           CASE CLIENT.REC<239>='?'
                              IF ITEM#'' THEN
                                 ITEM='?':ITEM
                              END
                           CASE CLIENT.REC<239>='!'
                              IF ITEM#'' THEN
                                 ITEM='!':ITEM
                              END
                           CASE CLIENT.REC<239>='#'
                              IF ITEM#'' THEN
                                 ITEM='#':ITEM
                              END
                           CASE CLIENT.REC<239>='~'
                              IF ITEM#'' THEN
                                 ITEM='~':ITEM
                              END
                           CASE CLIENT.REC<239>="'"
                              IF ITEM#'' THEN
                                 ITEM="'":ITEM
                              END
                           CASE 1
                              IF ITEM#'' THEN
                                 ITEM='=':QUOTE(ITEM)
                              END
                        END CASE
                     END
                  END
               END
               IF I < ITEM.COUNT THEN
                  LINE<1>:=ITEM:@VM
               END ELSE
                  LINE<1>:=ITEM
               END
               IF CARRIER.ID='01075' AND I=207 AND ITEM='PPR' AND LINE<1,49> = '' THEN LINE<1,49> = LINE<1,5>
            NEXT I

            DARRAY<-1>=LINE

            LINE.COUNT = LINE.COUNT +1
            IF USER='KMESSENGER' THEN
               CRT@(0,10):'LINES SELECTED :':LINE.COUNT
               CRT@(0,11):'FILE VERSION   :':NAME.EXT
            END
            IF LINE.COUNT >= ROW.MAX THEN
               IF NAME.EXT = '' THEN
                  NAME.EXT = 0
               END
               IF USER='KMESSENGER' OR USER='NO-MKERBOW' THEN
                  CALL ELINE('Kevin-About to write file version:':NAME.EXT)
                  CRT@(0,10):'LINES SELECTED :':LINE.COUNT
                  CRT@(0,11):'FILE VERSION   :':NAME.EXT
               END
               DARRAY.HOLD = DARRAY<1>
               DARRAY.HOLD<-1> = @VM
               DARRAY.HOLD<-1> = DARRAY<3>
               GOSUB CONTINUE.BUILD
               DARRAY = DARRAY.HOLD
               LINE.COUNT = 3
               NAME.EXT = NAME.EXT+1
            END
*-------------------------------------------
            IF INC.BD THEN
               PRO.ID=FIELD(PRO.ID,'*',1):'*':FIELD(PRO.ID,'*',2):'BD*':FIELD(PRO.ID,'*',3)
               READ PRO.REC FROM FB.BILLS,PRO.ID THEN GOTO GET.BILL
            END
            IF TEMP.ID[1,11] MATCHES "1N'-'3N'-'5N" ELSE
               PRO.ID=TEMP.ID
               TEMP.ID=''
               LINE=''
               READ PRO.REC FROM FB.BILLS,PRO.ID THEN GOTO GET.BILL
            END
         END
OWEN.REPEAT:***
      REPEAT
      IF SHOULD.SUBTOTAL THEN
         DARRAY<-1> = SUBTOTAL<1>
         DARRAY<-1> = ''
      END
      IF SHOULD.SUBTOTAL THEN
         DARRAY<-1> = TOTAL
      END
CONTINUE.UPS.BUILD:*
      RETURN

*
* Continue to build and save file
*
CONTINUE.BUILD:***
      DARRAY.VM=DARRAY
      DARRAY=CHANGE(DARRAY,@VM,TAB)

      SUMMARY.REC.NAME = 'SUMMARY_OF_CHARGES.'
      EXPENSE.REC.NAME = 'SUMMARY_OF_EXPENSES.'
      DIVISION.REC.NAME = 'SUMMARY_OF_DIVISIONS.'

      IF (CLIENT='ALL' OR CLIENT='AFS' OR CLIENT='SCT' OR CLIENT='UNI' OR CLIENT='UFM' OR CLIENT='LGI') THEN      
         RECORD.NAME=CLIENT
         SUMMARY.REC.NAME := CLIENT:'.'
         EXPENSE.REC.NAME := CLIENT:'.'
         DIVISION.REC.NAME := CLIENT:'.'
      END ELSE
         IF SEPARATE.DIVISIONS THEN
            IF DIVISIONAL.ID='ALL' THEN
               RECORD.NAME=CLIENT'R%5'
               RECORD.NAME:='-':DIVS<1,DIV.COUNT>
            END ELSE
               RECORD.NAME=CLIENT'R%5'
               RECORD.NAME:='-':DIVISIONAL.ID
            END
         END ELSE
            RECORD.NAME=CLIENT'R%5'
            SUMMARY.REC.NAME:=CLIENT:'.'
            EXPENSE.REC.NAME:=CLIENT:'.'
            DIVISION.REC.NAME:=CLIENT:'.'
         END
      END

      RECORD.NAME=CLIENT'R%5'
      IF NOT(CLEANUP) THEN               ; * SWB01
         RECORD.NAME:='-'
         D=BEG.DATE'D2/'
         RECORD.NAME:=D[7,2]:D[1,2]:D[4,2]
         RECORD.NAME:='-'
         D=END.DATE'D2/'
         RECORD.NAME:=D[7,2]:D[1,2]:D[4,2]
         RECORD.NAME:='-'
      END ELSE                           ; * SWB01
*Cleanup mode
         RECORD.NAME := '-Cleanup'       ; * SWB01
         RECORD.NAME := '-':OCONV(DATE(), 'D2-')   ; * SWB01
      END                                ; * SWB01

      RECORD.XLS=RECORD.NAME
      SUMMARY.REC.NAME := CH.NUM
      EXPENSE.REC.NAME := CH.NUM
      DIVISION.REC.NAME := CH.NUM

      SUMMARY.REC.NAME := '.TXT'
      EXPENSE.REC.NAME := '.TXT'
      DIVISION.REC.NAME := '.TXT'

      BEGIN CASE
         CASE VERSION='61'
            RECORD.NAME:='MBP.XLS'
         CASE VERSION='64'               ; * SWB01
            RECORD.NAME:='UNFUNDED.XLS'  ; * SWB01
         CASE 1
            RECORD.NAME:='ERR.XLS'
      END CASE

      IF USER='DAVID' THEN CALL ELINE('David... going to write')
      IF SLC.FRT OR SLC.ADJ THEN
         OBEG.DATE=BEG.DATE'D4/'
         OEND.DATE=END.DATE'D4/'
         IF SLC.FRT THEN
            RECORD.NAME='SHV-':OBEG.DATE[7,4]:OBEG.DATE[1,2]:OBEG.DATE[4,2]:'-':OEND.DATE[7,4]:OEND.DATE[1,2]:OEND.DATE[4,2]:'-':OTIME:'-FRT.XLS'
         END
         IF SLC.ADJ THEN
            RECORD.NAME='SHV-':OBEG.DATE[7,4]:OBEG.DATE[1,2]:OBEG.DATE[4,2]:'-':OEND.DATE[7,4]:OEND.DATE[1,2]:OEND.DATE[4,2]:'-':OTIME:'-ADJ.XLS'
         END
         DARRAY.DCNT=DCOUNT(DARRAY,@AM)
         IF DARRAY.DCNT>1 THEN
            WRITE DARRAY ON F.SHV.FRT.DATA,RECORD.NAME
            WRITE DARRAY ON F.SHV.FRT.DATA.HIST,RECORD.NAME
            EMAIL.OUT=''
            EMAIL.OUT<1,-1>='AMoulding@afs.net'
            EMAIL.OUT<1,-1>='RJaganathan@afs.net'
            EMAIL.OUT<1,-1>='AElggren@afs.net'
            EMAIL.OUT<3,-1>='MKerbow@afs.net'
            EMAIL.OUT<4>='Reports@afs.net'
            IF SLC.FRT THEN
               EMAIL.OUT<5>='Freight Data transfer file ':RECORD.NAME:' is ready for import.'
            END
            IF SLC.ADJ THEN
               EMAIL.OUT<5>='Freight Data Adjustment transfer file ':RECORD.NAME:' is ready for import.'
            END
            EMAIL.OUT<6>=' '
            EMAIL.OUT<7>=1
            CALL SENDMAIL(EMAIL.OUT,RESULT)
         END
      END

      WRITE DARRAY ON F.FILE,RECORD.NAME ELSE
         CALL ELINE('Unable to write. Close Excel ':RECORD.NAME:'. Then press enter to write')
         WRITE DARRAY ON F.FILE,RECORD.NAME ELSE
            CALL ELINE('Unable to write. Aborting')
            STOP
         END
      END
      VOUT<1>=RECORD.NAME
      IF AUTO.EMAIL OR MANUAL.EMAIL THEN
         EMAIL.OUT=''
         IF MANUAL.EMAIL OR (AUTO.EMAIL AND SEPARATE.DIVISIONS) THEN
            EMAIL.OUT<1>=NEW.EMAIL.ADDR
         END ELSE
            EMAIL.OUT<1>=TRIM(CLIENT.REC<125>)     ; * To Address
         END
         IF AUTO.EMAIL THEN
            EMAIL.OUT<2>=TRIM(CLIENT.REC<126>)
            EMAIL.OUT<3>=TRIM(CLIENT.REC<127>)
         END
         IF CLIENT.REC<179>#'' AND ONCE=0 THEN
            EMAIL.OUT<1>=CLIENT.REC<179>
            EMAIL.OUT<2>=''
            EMAIL.OUT<3>=''
         END
         EMAIL.OUT<4>='Reports@afs.net'
         EMAIL.OUT<5,1>=DARRAY<1>
         EMAIL.OUT<6>=DARRAY<1>
         EMAIL.OUT<6,2>=' The attached files are a listing of Unapproved and Rejected Bills and'
         EMAIL.OUT<6,3>='a Summary of all bills that were Invoiced during the date range. If you have any questions,'
         EMAIL.OUT<6,4>=' please feel free to call Myra at 318-798-2111 x1232.'
         EMAIL.OUT<6,6>=' Thank you for your business.'
         EMAIL.OUT<11> = 'E:\ARDENT\PUBLIC\EMAILDATA\'
         EMAIL.OUT<11>:=RECORD.NAME
         IF AUTO.EMAIL THEN
            EMAIL.OUT<11,2> = 'E:\ARDENT\PUBLIC\EMAILDATA\'
            EMAIL.OUT<11,2> := SUMMARY.REC.NAME
            READ EXIST.TEST FROM F.FILE,EXPENSE.REC.NAME THEN
               EMAIL.OUT<11,3> = 'E:\ARDENT\PUBLIC\EMAILDATA\'
               EMAIL.OUT<11,3> := EXPENSE.REC.NAME
            END
            READ EXIST.TEST FROM F.FILE,DIVISION.REC.NAME THEN
               EMAIL.OUT<11,4> = 'E:\ARDENT\PUBLIC\EMAILDATA\'
               EMAIL.OUT<11,4> := DIVISION.REC.NAME
            END
         END
         EVIN = EMAIL.OUT
         IF EMAIL.OUT<1>#'' THEN CALL SENDMAIL(EVIN,EVOUT)
      END
      RETURN

ASSIGN.TEMP.REC:***
      TEMP.ID=PRO.REC<94>
      TEMP.REC=PRO.REC
      TEMP.REC<88>=''
      TEMP.REC<2>='O'
      TEMP.REC<3>='99999'
      TEMP.REC<4>='99999'
      TEMP.REC<6>=0
      TEMP.REC<17>='01897'
      TEMP.REC<25>='ZZ'
      TEMP.REC<26>='ZZ'
      TEMP.REC<27>='FedEx Ground'
      TEMP.REC<28>='FedEx Ground'
      TEMP.REC<16>=EDI.REC<18>[1,4]:'-':EDI.REC<18>[5,4]:'-':EDI.REC<18>[9,999]
      TEMP.REC<100>='01897'
      TEMP.REC<7>=0
      TEMP.REC<8>=0
      TEMP.REC<10>=0
      TEMP.REC<11>=0
      TEMP.REC<12>=0
      TEMP.REC<13>=0
      TEMP.REC<42>=0
      TEMP.REC<43>=0
      TEMP.REC<44>=0
      TEMP.REC<32>=0
      TEMP.REC<33>=0
      TEMP.REC<151>='FSC'
      TEMP.REC<152>=0
      RETURN

BUILD.UPS.INFO:***

      EXECUTE STMT CAPTURING OUTPUT
      NUM.EBILL=@SELECTED
      CARRIER.ID="00041"
      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID THEN
         CARRIER.NAME=CARRIER.REC<1>
         CARRIER.MODE=CARRIER.REC<44>
         READ TR.REC FROM F.TRANSPORT,CARRIER.MODE THEN
            TR.MODE=TR.REC<1>
         END ELSE
            TR.MODE=''
         END
      END ELSE
         CARRIER.NAME=''
         CARRIER.MODE=''
         TR.MODE=''
      END

      IF NUM.EBILL > 0 THEN
         DONE=0
         EBILL.CNT=0
         EBILL.PER=''
         LOOP
            READNEXT EBILL.ID ELSE DONE=1
         UNTIL DONE=1
            EBILL.DATE=FIELD(EBILL.ID,'*',2)
            EBILL.CNT+=1
            CALL PROG.BAR(22,EBILL.CNT,NUM.EBILL,EBILL.PER)
            READ EBILL.REC FROM F.UPSDATA,EBILL.ID THEN
               PRV.SHIPPER=''
               NUM.OF.REC=DCOUNT(EBILL.REC,@AM)
               FOR I = 2 TO NUM.OF.REC

                  BEGIN CASE
                     CASE I <= 2
                        PRV.UPS.SHIPPER=''
                     CASE EBILL.REC<I-1,3>[1,1]=\'\
                        PRV.UPS.SHIPPER=EBILL.REC<I-1,3>[2,6]
                     CASE LEN(EBILL.REC<I-1,3>)=6
                        PRV.UPS.SHIPPER=EBILL.REC<I-1,3>
                     CASE 1
                        PRV.UPS.SHIPPER=EBILL.REC<I-1,3>[5,6]
                  END CASE
                  BEGIN CASE
                     CASE EBILL.REC<I,3>[1,1]=\'\
                        UPS.SHIPPER=EBILL.REC<I,3>[2,6]
                     CASE LEN(EBILL.REC<I,3>)=6
                        UPS.SHIPPER=EBILL.REC<I,3>
                     CASE 1
                        UPS.SHIPPER=EBILL.REC<I,3>[5,6]
                  END CASE
                  BEGIN CASE
                     CASE I+1 > NUM.OF.REC
                        NXT.UPS.SHIPPER=''
                        NXT.SVC.DESC=''
                     CASE EBILL.REC<I+1,3>[1,1]=\'\
                        NXT.UPS.SHIPPER=EBILL.REC<I+1,3>[2,6]
                        NXT.SVC.DESC=TRIM(EBILL.REC<I+1,21>)
                     CASE LEN(EBILL.REC<I+1,3>)=6
                        NXT.UPS.SHIPPER=EBILL.REC<I+1,3>
                        NXT.SVC.DESC=TRIM(EBILL.REC<I+1,21>)
                     CASE 1
                        NXT.UPS.SHIPPER=EBILL.REC<I+1,3>[5,6]
                        NXT.SVC.DESC=TRIM(EBILL.REC<I+1,21>)
                  END CASE
                  ECAX.ID='00041*':UPS.SHIPPER
                  IF UPS.SHIPPER='500426' THEN
                     ECAX.ID='12810*':UPS.SHIPPER
                  END
                  READ ECAX.REC FROM F.ECAX,ECAX.ID ELSE ECAX.REC=''
                  DIV.ID=ECAX.REC<2>
                  REG.ID=''
                  DIV.REC=''
                  IF DIVISION THEN
                     READ DIV.REC FROM F.DIVISION,DIV.ID ELSE DIV.REC=''
                     REG.ID=DIV.REC<45>
                  END
                  FILE.DATE=EBILL.REC<I,5>
                  PRO.NUMBER=UPS.SHIPPER[1,3]:'-':UPS.SHIPPER[4,3]
                  PRO.NUMBER:=FILE.DATE[1,2]:FILE.DATE[3,2]:FILE.DATE[7,2]
                  READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE CARRIER.REC=''
                  IF UPS.SHIPPER#PRV.UPS.SHIPPER THEN
                     COMM.ARRAY=''
                     TEST.ID=CARRIER.ID:'*':PRO.NUMBER:'-O*0'          ; * Same ID used for Bills, Bills Hist, and CRX
                     READ TEST.REC FROM FB.BILLS,TEST.ID THEN
                        LOCATE TEST.ID IN COMM.ARRAY<1> SETTING BPOS ELSE
                           COMM.ARRAY<1,-1>=TEST.ID
                           COMM.ARRAY<2>+=TEST.REC<10>
                           COMM.ARRAY<3>+=TEST.REC<11>
                           COMM.ARRAY<4>+=TEST.REC<12>
                           COMM.ARRAY<5>+=TEST.REC<42>
                           COMM.ARRAY<6>+=TEST.REC<43>
                           COMM.ARRAY<7>+=TEST.REC<44>
                        END
                     END
                     TEST.ID=CARRIER.ID:'*':PRO.NUMBER:'-I*0'          ; * Same ID used for Bills, Bills Hist, and CRX
                     READ TEST.REC FROM FB.BILLS,TEST.ID THEN
                        LOCATE TEST.ID IN COMM.ARRAY<1> SETTING BPOS ELSE
                           COMM.ARRAY<1,-1>=TEST.ID
                           COMM.ARRAY<2>+=TEST.REC<10>
                           COMM.ARRAY<3>+=TEST.REC<11>
                           COMM.ARRAY<4>+=TEST.REC<12>
                           COMM.ARRAY<5>+=TEST.REC<42>
                           COMM.ARRAY<6>+=TEST.REC<43>
                           COMM.ARRAY<7>+=TEST.REC<44>
                        END
                     END
                     TEST.ID=CARRIER.ID:'*':PRO.NUMBER:'-T*0'          ; * Same ID used for Bills, Bills Hist, and CRX
                     READ TEST.REC FROM FB.BILLS,TEST.ID THEN
                        LOCATE TEST.ID IN COMM.ARRAY<1> SETTING BPOS ELSE
                           COMM.ARRAY<1,-1>=TEST.ID
                           COMM.ARRAY<2>+=TEST.REC<10>
                           COMM.ARRAY<3>+=TEST.REC<11>
                           COMM.ARRAY<4>+=TEST.REC<12>
                           COMM.ARRAY<5>+=TEST.REC<42>
                           COMM.ARRAY<6>+=TEST.REC<43>
                           COMM.ARRAY<7>+=TEST.REC<44>
                        END
                     END
                  END
                  IF COMM.ARRAY<5>+0=0 THEN
                     EBILL.REC<I,92>=0
                  END
                  IF COMM.ARRAY<6>+0=0 THEN
                     EBILL.REC<I,93>=0
                  END
                  IF COMM.ARRAY<7>+0=0 THEN
                     EBILL.REC<I,94>=0
                  END

                  LINE=''
                  LINE<1,1>=CARRIER.ID
                  LINE<1,2>=CARRIER.NAME
                  LINE<1,3>=CARRIER.MODE
                  LINE<1,4>=TR.MODE
                  LINE<1,5>=EBILL.REC<I,7>
                  TEMP=EBILL.REC<I,5>
                  TEMP=TEMP[1,2]:"/":TEMP[3,2]:"/":TEMP[5,4]
                  LINE<1,6>=TEMP
                  BEGIN CASE
                     CASE CLIENT.ID='01322' AND PRO.NUMBER='X76-0F0113013'
                        IOT='T'
                     CASE EBILL.REC<I,22>='1' OR EBILL.REC<I,22>='4'
                        IOT='O'
                     CASE EBILL.REC<I,22>='2'
                        IOT='I'
                     CASE EBILL.REC<I,22>='3'
                        IOT='T'
                     CASE EBILL.REC<I,22>=''
                        IOT='O'
                  END CASE
                  LINE<1,7>=IOT
                  IF IOT='O' THEN
                     IF EBILL.REC<I,29>='' AND EBILL.REC<I,27>='' AND EBILL.REC<I,28>='' THEN
                        EBILL.REC<I,27>=DIV.REC<16>
                        EBILL.REC<I,28>=DIV.REC<17>
                        EBILL.REC<I,29>=DIV.REC<1>
                     END
                  END
                  BILLS.ID=CARRIER.ID:'*':PRO.NUMBER:'-':IOT:'*0'      ; * Same ID used for Bills, Bills Hist, and CRX
                  READ BILLS.REC FROM FB.BILLS,BILLS.ID ELSE BILLS.REC=''
                  LINE<1,8>=EBILL.REC<I,29>
                  LINE<1,9>=EBILL.REC<I,27>
                  LINE<1,10>=EBILL.REC<I,28>
                  LINE<1,11>=EBILL.REC<I,35>
                  LINE<1,12>=EBILL.REC<I,33>
                  LINE<1,13>=EBILL.REC<I,34>
                  LINE<1,14>=EBILL.REC<I,89>
                  LINE<1,15>=EBILL.REC<I,14>
                  CARRIER.CHG=EBILL.REC<I,37>-EBILL.REC<I,92>-EBILL.REC<I,93>-EBILL.REC<I,94>
                  LINE<1,16>=CARRIER.CHG
                  ACTUAL.CHG=EBILL.REC<I,37>
                  LINE<1,17>=ACTUAL.CHG
                  IF BILLS.REC<8>+0=0 AND EBILL.REC<I,6> < 0 THEN
                     IF CARRIER.CHG<=0 THEN
                        LINE<1,16>=0
                     END
                     IF ACTUAL.CHG<=0 THEN
                        LINE<1,17>=0
                     END
                  END
                  UPS.BILL.REC=BILLS.REC
                  CVIN=BILLS.ID
                  CVIN<2>=CLIENT.REC<84>
                  CVIN<3>=CLIENT.REC<34>
                  CVIN<4>=CLIENT.REC<33>
                  CVIN<5>=CLIENT.REC<85>
                  CVIN<6>=CLIENT.REC<88>
                  CVIN<7>=CARRIER.ID
                  CVIN<8>=CLIENT
                  CVIN<9>=USER
                  CVIN<10>=CLIENT.REC<131>
                  CVIN<11>=CLIENT.REC<177>
                  CVIN<12>=CLIENT.REC<178>
                  CVIN<13>=CLIENT.REC<187>
                  CVIN<14>=CLIENT.REC<200>
                  CVIN<15>=CLIENT.REC<208>
                  CVIN<16>=CLIENT.REC<209>
                  CVIN<17>=CLIENT.REC<210>
                  CVIN<18>=CLIENT.REC<211>
                  CVIN<19>=CLIENT.REC<212>
                  CVIN<20>=CLIENT.REC<213>
                  CVIN<21>=CLIENT.REC<214>
                  CVIN<22>=CLIENT.REC<215>
                  CVIN<23>=CLIENT.REC<216>
                  CVIN<24>=CLIENT.REC<217>
                  CVIN<25>=CLIENT.REC<218>
                  CVIN<26>=CLIENT.REC<219>
                  CVIN<28>=CLIENT.REC<268>
                  UPS.BILL.REC<7>=ICONV(EBILL.REC<I,37>-EBILL.REC<I,92>-EBILL.REC<I,93>-EBILL.REC<I,94>,'MR2')
                  UPS.BILL.REC<8>=ICONV(EBILL.REC<I,37>,'MR2')
                  UPS.BILL.REC<10>=ICONV(EBILL.REC<I,92>,'MR2')
                  UPS.BILL.REC<11>=ICONV(EBILL.REC<I,93>,'MR2')
                  UPS.BILL.REC<12>=ICONV(EBILL.REC<I,94>,'MR2')
                  IF BILLS.REC<8>+0=0 AND EBILL.REC<I,6> < 0 THEN
                     IF CARRIER.CHG<=0 THEN
                        UPS.BILL.REC<7>=0
                     END
                     IF ACTUAL.CHG<=0 THEN
                        UPS.BILL.REC<8>=0
                     END
                     UPS.BILL.REC<12>=UPS.BILL.REC<8>-UPS.BILL.REC<7>
                  END
                  CVOUT=''
                  DISCOUNT.COMM=0
                  OVERCHG.COMM=0
                  CONSULTING.COMM=0
                  EXPENSE.DIST.COMM=0
                  MGMT.SVC.COMM=0
                  MISR.CONS.COMM=0
                  OVERCHG.PERC=0
                  LOG.COMM.PERC=0
                  CALL CALC.COMMISSION(UPS.BILL.REC,CVIN,CVOUT)
                  DISCOUNT.COMM=CVOUT<1>
                  OVERCHG.COMM=CVOUT<2>
                  CONSULTING.COMM=CVOUT<3>
                  EXPENSE.DIST.COMM=CVOUT<4>
                  MGMT.SVC.COMM=CVOUT<5>
                  MISR.CONS.COMM=CVOUT<6>
                  OVERCHG.PERC=CVOUT<7>
                  LOG.COMM.PERC = CVOUT<8>
                  IF COMM.ARRAY<5>+0#0 THEN
                     COMM.ARRAY<5>-=DISCOUNT.COMM
                  END
                  IF COMM.ARRAY<6>+0#0 THEN
                     COMM.ARRAY<6>-=OVERCHG.COMM
                  END
                  IF COMM.ARRAY<7>+0#0 THEN
                     COMM.ARRAY<7>-=CONSULTING.COMM
                  END
                  IF UPS.SHIPPER#NXT.UPS.SHIPPER OR (CLIENT='01825' AND NXT.SVC.DESC='SERVICE CHARGE') THEN
                     IF COMM.ARRAY<5>+0#0 THEN
                        DISCOUNT.COMM+=COMM.ARRAY<5>
                        COMM.ARRAY<5>=0
                     END
                     IF COMM.ARRAY<6>+0#0 THEN
                        OVERCHG.COMM+=COMM.ARRAY<6>
                        COMM.ARRAY<6>=0
                     END
                     IF COMM.ARRAY<7>+0#0 THEN
                        CONSULTING.COMM+=COMM.ARRAY<7>
                        COMM.ARRAY<7>=0
                     END
                  END
                  LINE<1,18>=DISCOUNT.COMM'R26'
                  LINE<1,19>=OVERCHG.COMM'R26'
                  LINE<1,20>=CONSULTING.COMM'R26'
                  LINE<1,21>=DIV.ID
                  LINE<1,22>=EBILL.REC<I,92>
                  LINE<1,23>=EBILL.REC<I,93>
                  LINE<1,24>=EBILL.REC<I,94>
                  LINE<1,28>=EBILL.REC<I,9>
                  LINE<1,29>=EBILL.REC<I,31>
                  LINE<1,34>=BILLS.REC<37>'D2/'
                  LINE<1,49>=EBILL.REC<I,4>[2,9999]
                  LINE<1,59>=UPS.SHIPPER
                  LINE<1,60>=OCONV(EBILL.REC<I,24>,'MCT')
                  LINE<1,61>=OCONV(EBILL.REC<I,25>,'MCT')
                  LINE<1,62>=OCONV(EBILL.REC<I,26>,'MCT')
                  LINE<1,64>=OCONV(EBILL.REC<I,27>,'MCT')
                  LINE<1,65>=EBILL.REC<I,28>
                  LINE<1,66>=EBILL.REC<I,29>
                  LINE<1,69>=OCONV(EBILL.REC<I,30>,'MCT')
                  LINE<1,70>=OCONV(EBILL.REC<I,31>,'MCT')
                  LINE<1,71>=OCONV(EBILL.REC<I,32>,'MCT')
                  LINE<1,73>=OCONV(EBILL.REC<I,33>,'MCT')
                  LINE<1,74>=EBILL.REC<I,34>
                  LINE<1,75>=EBILL.REC<I,35>
                  LINE<1,76>=EBILL.REC<I,36>
                  TEMP=EBILL.REC<I,23>
                  TEMP=TEMP[1,2]:"/":TEMP[3,2]:"/":TEMP[5,4]
                  LINE<1,78>=TEMP
                  LINE<1,84>=EBILL.REC<I,21>
                  LINE<1,156>=EBILL.REC<I,89>
                  LINE<1,157>=EBILL.REC<I,37>
                  LINE<1,188>=CARRIER.REC<12>
                  LINE<1,194>=EBILL.REC<I,86>
                  CSCAC.ID=CLIENT.ID:'*':CARRIER.ID
                  READ CSCAC.REC FROM F.CSCAC,CSCAC.ID ELSE CSCAC.REC=''
                  ITEM=CSCAC.REC<1>
                  IF ITEM='' THEN
                     READ CARR.REC FROM F.CARRIERS,CARRIER.ID ELSE CARR.REC=''
                     ITEM=CARR.REC<12>
                     IF ITEM='' THEN
                        ITEM=CARR.REC<1>[1,5]
                     END
                  END
                  LINE<1,201>=ITEM
                  LINE<1,202>=CARRIER.REC<2,1>
                  LINE<1,203>=CARRIER.REC<2,2>
                  LINE<1,204>=CARRIER.REC<3>
                  LINE<1,205>=CARRIER.REC<4>
                  LINE<1,206>=CARRIER.REC<5>
                  LINE<1,207>='EDI'
                  LINE<1,220>=EBILL.REC<I,12>
                  LINE<1,224>=REG.ID
                  LINE<1,225>=BILLS.REC<68>
                  LINE<1,226>=BILLS.REC<96>
                  LINE<1,230>=EBILL.REC<I,19>
                  OZIP=EBILL.REC<I,29>[1,5]'R%5'
                  DZIP=EBILL.REC<I,35>[1,5]'R%5'
                  READ OZIP.REC FROM F.ZIPS,OZIP ELSE OZIP.REC=''
                  READ DZIP.REC FROM F.ZIPS,DZIP ELSE DZIP.REC=''
                  LINE<1,232>=OZIP.REC<3>
                  LINE<1,233>=DZIP.REC<3>
                  LINE<1,234>=EBILL.REC<I,12>
                  LINE<1,235>=EBILL.REC<I,90>      ; * COST CENTER
                  LINE<1,236>=EBILL.REC<I,91>      ; * PROJECT NUMBER
                  DARRAY<-1>=LINE
               NEXT I
            END
         REPEAT
      END
      RETURN

HANDLE.LI.CODES:                            ; * SWB01

      IF ITEM # '' THEN                     ; * SWB01
         T.FILE.ITEM='---Unknown---'            ; * SWB01
         BEGIN CASE                             ; * SWB01
            CASE PRO.REC<21>='12'               ; * SWB01
               LOCATE ITEM IN AIR.CODES<1> SETTING POS THEN         ; * SWB01
                  T.FILE.ITEM=AIR.CODES<2,POS>                      ; * SWB01
               END                                                  ; * SWB01
            CASE PRO.REC<21>='8' OR PRO.REC<3>='99999' OR PRO.REC<4>='99999'            ; * SWB01
               LOCATE ITEM IN INTL.CODES<1> SETTING POS THEN                            ; * SWB01
                  T.FILE.ITEM=INTL.CODES<2,POS>                                         ; * SWB01
               END                                                                      ; * SWB01
            CASE 1                          ; * SWB01
               LOCATE ITEM IN LI.CODES<1> SETTING POS THEN          ; * SWB01
                  T.FILE.ITEM=LI.CODES<2,POS>                       ; * SWB01
               END                                                  ; * SWB01
         END CASE                                                   ; * SWB01
      END ELSE                              ; * SWB01
         T.FILE.ITEM=''                     ; * SWB01
      END                                   ; * SWB01

      RETURN                                ; * SWB01

   END
