***********************************************************************
* Analyze bills acted upon by auditors
* Copyright (c) AFS Logistics, LLC., 2002
*
* AUTHOR : Owen Holman
* Date   : January 2002
***********************************************************************
* 061912 - JMK01 - Choose development SQL server if not production server AFS
*************************************************************************
!
* Include the ODBC definitions
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01

      form = "T##########"
      dash = "----------"
      Expect = ""
      NULL=""
      TOT.NUM.BILLS=0

      CALL GET.USER(USER)
* Begin GRB01
      VIN1=""
      VIN1<1> = "UPD.SQL.FBPROC.PX"
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "S"
      CALL PROGTRACK(VIN1,VOUT1)
* End GRB01
*     IF USER#'MKERBOW' THEN STOP
      GET (ARG.,1) OBEG.DATE THEN
         BEG.DATE=ICONV(OBEG.DATE,'D')
      END ELSE
         BEG.DATE=DATE()
      END
      GET (ARG.,2) OEND.DATE THEN
         END.DATE=ICONV(OEND.DATE,'D')
      END ELSE
         END.DATE=DATE()
      END
      GET (ARG.,3) CLIENT.DATE.LIST.NAME ELSE CLIENT.DATE.LIST.NAME=''

      OPEN '','AR.CUST.1000.1' TO F.CUST ELSE ABORT 201,'AR.CUST.1000.1'
      OPEN '','AR.TRANS.1000.1' TO F.TRANS ELSE ABORT 201,'AR.TRANS.1000.1'
      OPEN '','AR.BRIDGE.LAST' TO F.BRIDGE.LAST ELSE ABORT 201,'AR.BRIDGE.LAST'

      GOSUB SETUP.SQL

      IF CLIENT.DATE.LIST.NAME#'' THEN
         STMT='GET-LIST ':CLIENT.DATE.LIST.NAME
      END ELSE
         STMT='SSELECT AR.BRIDGE.LAST WITH @ID # "9]"'
         IF BEG.DATE # "" AND END.DATE # "" THEN
            STMT := ' AND WITH PROC.DATE >= "':OBEG.DATE:'" AND WITH PROC.DATE <= "':OEND.DATE:'" BY PROC.DATE '
         END
      END
      
      EXECUTE STMT RTNLIST AR.BRIDGE.LIST CAPTURING RESULTS
      NUM.CLIENTS=@SELECTED

      OPEN '','CLIENTS' TO F.CLIENT ELSE ABORT 201,'CLIENTS'
      CRT @(0,0):@(-1):@(0,3):'UPD.SQL.FBPROC.PX - Processing Clients from ':BEG.DATE'D2/':' to ':END.DATE'D2/':'...'

      CLIENT.EOF=0
      CLIENT.CNT=0
      CLIENT.PER=0
      LOOP
         READNEXT AR.BRIDGE.ID FROM AR.BRIDGE.LIST ELSE CLIENT.EOF=1
      UNTIL CLIENT.EOF DO
         CLIENT.ID = FIELD(AR.BRIDGE.ID, '*', 1)
         CLIENT.CNT+=1
         CLIENT.PCT=ICONV(CLIENT.CNT/NUM.CLIENTS*100,'MR2')
         CLIENT.INV=0
         CALL PROG.BAR(8,CLIENT.CNT,NUM.CLIENTS,CLIENT.PER)
         INV.PER=0
         READ CLIENT.REC FROM F.CLIENT,CLIENT.ID THEN
            VAL = 1
            CRT @(0,5):@(-4):CLIENT.CNT'R#4':' - ':CLIENT.PCT'R26#6':'% ':CLIENT.ID:' - ':CLIENT.REC<2>
            READ AR.BRIDGE.REC FROM F.BRIDGE.LAST, AR.BRIDGE.ID THEN
               NVAL = DCOUNT(AR.BRIDGE.REC<1>, @VM)
               CALL PROG.BAR(13,VAL,NVAL,INV.PER)

               TR.DATE=FIELD(AR.BRIDGE.ID, '*', 2)
               CLIENT.INV+=1
               SQL.ClientNumber=CLIENT.ID
               SQL.ProcessDate=TR.DATE'D4/'
               SQL.ProcessingFee=0
               SQL.Postage=0
               SQL.LogisticsDebitMemo=0
               SQL.ServiceFee=0
               SQL.LogisticsFee=0
               SQL.WeeklyPostageFee=0
               SQL.UPSFee=0
               SQL.DiscountCommission=0
               SQL.ClaimsFee=0
               SQL.ProgramFee=0

               NVAL1=DCOUNT(AR.BRIDGE.REC<1>,@VM)
               FOR VAL1 = 1 TO NVAL1
                  SLS.CODE=AR.BRIDGE.REC<1,VAL1>
                  SLS.AMT=AR.BRIDGE.REC<3,VAL1>
                  BEGIN CASE
                     CASE SLS.CODE=2 OR SLS.CODE=1002 OR SLS.CODE=3002 OR SLS.CODE=6002
                        SQL.ProcessingFee+=SLS.AMT
                     CASE SLS.CODE=3 OR SLS.CODE=1003 OR SLS.CODE=3003 OR SLS.CODE=6003
                        SQL.ServiceFee+=SLS.AMT
                     CASE SLS.CODE=7 OR SLS.CODE=1007 OR SLS.CODE=3007 OR SLS.CODE=6007
                        SQL.Postage+=SLS.AMT
                     CASE SLS.CODE=12 OR SLS.CODE=1012 OR SLS.CODE=3012 OR SLS.CODE=6012
                        SQL.LogisticsDebitMemo+=SLS.AMT
                     CASE SLS.CODE=13 OR SLS.CODE=1013 OR SLS.CODE=3013 OR SLS.CODE=6013
                        SQL.LogisticsFee+=SLS.AMT
                     CASE SLS.CODE=102 OR SLS.CODE=1102 OR SLS.CODE=3102 OR SLS.CODE=6102
                        SQL.WeeklyPostageFee+=SLS.AMT
                     CASE SLS.CODE=103 OR SLS.CODE=1103 OR SLS.CODE=3103 OR SLS.CODE=6103
                        SQL.UPSFee+=SLS.AMT
                     CASE SLS.CODE=105 OR SLS.CODE=1105 OR SLS.CODE=3105 OR SLS.CODE=6105
                        SQL.WeeklyPostageFee+=SLS.AMT
                     CASE SLS.CODE=121 OR SLS.CODE=1121 OR SLS.CODE=3121 OR SLS.CODE=6121
                        SQL.WeeklyPostageFee+=SLS.AMT
                     CASE SLS.CODE=131 OR SLS.CODE=1131 OR SLS.CODE=3131 OR SLS.CODE=6131
                        SQL.ClaimsFee+=SLS.AMT
                     CASE SLS.CODE=135 OR SLS.CODE=1135 OR SLS.CODE=3135 OR SLS.CODE=6135
                        SQL.ProgramFee+=SLS.AMT
                     CASE SLS.CODE=151 OR SLS.CODE=1151 OR SLS.CODE=3151 OR SLS.CODE=6151
                        SQL.LogisticsFee+=SLS.AMT
                  END CASE
               NEXT VAL1

               SQL.ProcessingFee=SQL.ProcessingFee'R26'
               SQL.Postage=SQL.Postage'R26'
               SQL.LogisticsDebitMemo=SQL.LogisticsDebitMemo'R26'
               SQL.ServiceFee=SQL.ServiceFee'R26'
               SQL.LogisticsFee=SQL.LogisticsFee'R26'
               SQL.WeeklyPostageFee=SQL.WeeklyPostageFee'R26'
               SQL.UPSFee=SQL.UPSFee'R26'
               SQL.DiscountCommission=SQL.DiscountCommission'R26'
               SQL.ClaimsFee=SQL.ClaimsFee'R26'
               SQL.ProgramFee=SQL.ProgramFee'R26'

               Fn = "SQLExecute"
               STATUS = SQLExecute(STMTENV)
               GOSUB CKSTMTENV


               IF CLIENT.INV THEN
                  MVIN=''
                  MVIN<1,-1>='nmeddaugh@afs.net'
                  MVIN<1,-1>='DFriend@afs.net'
                  MVIN<4>='AFS_UPD.SQL.FBPROC.SUB'
                  MVIN<5>='SQL Non-Shipment Fee Update by Client'
                  TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
                  TEXT<1,-1>='Client ':CLIENT.ID:' ':CLIENT.REC<2>:' completed the SQL update with ':CLIENT.INV:' fees loaded.'
                  TEXT<1,-1>=' '
                  MVIN<6>=TEXT
                  MVIN<7>=1
*              CALL SENDMAIL(MVIN,MVOUT)
               END
            END
         END
SKIP.CLIENT:*
      REPEAT

THE.END:***
*     End of program
*
* Now just clean up the environment and leave
*
      Fn = "SQLFreeStmt"
      STATUS = SQLFreeStmt(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      Fn = "SQLDisconnect"
      STATUS = SQLDisconnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeConnect"
      STATUS = SQLFreeConnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeEnv"
      STATUS = SQLFreeEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN STOPM "Failed to release ODBC environment"

* Begin GRB01
      VIN1=''
      VIN1<1> = "UPD.SQL.FBPROC.PX"
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "E"
      CALL PROGTRACK(VIN1,VOUT1)
* End GRB01
      STOP
*************************************************************************
SETUP.SQL:*
*************************************************************************
* Create an ODBC environment & a connection environment. Use the
* SSQLSetConnectOption to specify the Operating system user ID and
* password.

      STATUS = SQLAllocEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN STOP "Failed to allocate an ODBC environment"

      STATUS = SQLAllocConnect(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN STOP "Failed to allocate a CONNECT environment"

*
* Gather the data source name, userid and password for the server O/S and
* information for the DBMS at the server. The DBMS info is often also
* a user name and password, but not in all cases.
*
*     SQLSVR.INFO=OCONV('SQLSVR','TFB.TABLES;X;;1')          ; * JMK01
*     SOURCE=FIELD(SQLSVR.INFO<1>,' ',1)           ; * JMK01
*     UID=FIELD(SQLSVR.INFO<1>,' ',2)    ; * JMK01
*     PWD=FIELD(SQLSVR.INFO<1>,' ',3)    ; * JMK01
      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='PRODODS'             ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVODS'              ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* Establish a session to the specified data source
*
      Fn = "SQLConnect"
      STATUS = SQLConnect(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV
*
* Now allocate an SQL statement environment
* to be used for executing SQL statements
*
      Fn = "SQLAllocStmt"
      STATUS = SQLAllocStmt(CONENV,STMTENV)
      GOSUB CKCONENV

*
* Note that we are using parameter markers in the SQL statement to facilitate
* loading multiple rows of data efficiently
*
      OPT.STR = STR(' ?,',11)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdNonShipmentFee (":OPT.STR:")}"
      CRT @(0,0):@(-1):

      ROWNUM = 0
      Fn = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(STMTENV, 1, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.ClientNumber) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.ProcessDate) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 3, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ProcessingFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 4, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.Postage) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 5, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.LogisticsDebitMemo) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 6, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ServiceFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 7, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.LogisticsFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 8, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.WeeklyPostageFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 9, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.UPSFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 10, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ClaimsFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 11, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ProgramFee) ; GOSUB CKSTMTENV

      Fn = "SQLPrepare"
      STATUS = SQLPrepare(STMTENV, INST1)
      GOSUB CKSTMTENV

      RETURN
*************************************************************************
CKCONENV:
*************************************************************************

      COUNT = -1
      IF STATUS EQ -2 THEN STOPM "INVALID CONNECTION HANDLE"
      IF STATUS NE 0
      THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND
            THEN
               CRT "Allowed error of ":STATE:" returned for func ":Fn
               GOTO 299
            END
            ELSE
               CRT "Status for ":Fn:" call is: ":STATUS
               CRT "SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               CRT "Error text is"
               CRT "    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN STOPM "EXITING CKCONENV"
      END
299:  *
      RETURN
*************************************************************************
CKSTMTENV:
*************************************************************************
      IF STATUS EQ -2 THEN STOPM "INVALID STATEMENT HANDLE"

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0
      THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND
            THEN
               CRT "Allowed error of ":STATE:" returned for func ":Fn
               GOTO 399
            END
            ELSE
               CRT "Status for ":Fn:" call is: ":STATUS
               CRT "SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               CRT "Error text is "
               CRT "    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN STOPM "EXITING CKSTMTENV"
      END
399:  *
      RETURN
