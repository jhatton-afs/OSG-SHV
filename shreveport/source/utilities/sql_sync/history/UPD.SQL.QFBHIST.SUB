      SUBROUTINE UPD.SQL.QFBHIST.SUB(VIN,VOUT,CLIENT.REC,DIV.REC,VC.REC,BILL.REC,EDI.REC)
****************************************
* Program name : UPD.SQL.QFBHIST.SUB
* Author       : Owen Holman
* Date written : January 2002
* Library      : FBBP
* COPYRIGHT (c) : AFS, LLC 2016, All Rights Reserved.
*
*  sql push
* Last updated by afs (gbino) at 08:48:26 on 01/30/2018.
*
* Start modification history
* Mod nn  mm/dd/yy, init, req #, description
* 061912 - JMK01 - Choose development SQL server if not production server AFS
* End modification history
*
*******************************************

    
* INCLUDE THE ODBC DEFINITIONS
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01

      USER=VIN<1>
       UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.QFBHIST.SUB' ; UPL.VOUT = ''      ; * NPR_UPL 04/23/2010
       CALL GET.USER.NEW(USER,CH.NUM)
       UPL.VIN<3> = USER
      UPL.VIN<4> = CH.NUM
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
      
      CLIENT.ID=VIN<2>
      BILL.ID=VIN<3>
      SEQ=FIELD(BILL.ID,'*',3)
*     IF SEQ#0 THEN RETURN
      LI.CODES=''
      LI.CODES<1>=VIN<4>
      LI.CODES<2>=VIN<5>

      FORM = "T##########"
      DASH = "----------"
      EXPECT = ""
      NULL=""
      TOT.NUM.BILLS=0

      OPEN '','FB.TL.FSC' TO F.TL.FSC ELSE         ; * JMK01
         CALL OPEN.ABORT("FB.TL.FSC",PROG.NAME)    ; * JMK01
      END                                ; * JMK01
      OPEN '','PCIN' TO F.PCIN ELSE      ; * JMK01
         CALL OPEN.ABORT("PCIN",PROG.NAME)         ; * JMK01
      END                                ; * JMK01
      OPEN '','PCOUT' TO F.PCOUT ELSE    ; * JMK01
         CALL OPEN.ABORT("PCOUT",PROG.NAME)        ; * JMK01
      END                                ; * JMK01
      OPEN '','FB.MILEAGE' TO F.MILEAGE ELSE       ; * JMK01
         CALL OPEN.ABORT("FB.MILEAGE",PROG.NAME)   ; * JMK01
      END                                ; * JMK01
      OPEN '','FB.BC.FSC' TO F.NFSC ELSE           ; * JMK01
         CALL OPEN.ABORT("FB.BC.FSC",PROG.NAME)    ; * JMK01
      END                                ; * JMK01
      OPEN '','FB.TABLES' TO F.TABLES ELSE         ; * JMK01
         CALL OPEN.ABORT("FB.TABLES",PROG.NAME)    ; * JMK01
      END                                ; * JMK01
      OPEN '','FB.CHECKS.HDR' TO F.CK.HDR ELSE
         CALL OPEN.ABORT("FB.CHECKS.HDR",PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS ELSE          ; * JMK01
         CALL OPEN.ABORT("ZIPS.CODES",PROG.NAME)   ; *JMK01
      END                                ; * JMK01
      OPEN '','CAN.ZIP.CODES' TO F.CAN.ZIPS ELSE   ; * JMK01
         CALL OPEN.ABORT("CAN.ZIP.CODES",PROG.NAME)          ; *JMK01
      END                                ; * JMK01

      SQL.DESC.REC=''
      SQL.DESC.REC< 1>='p_UniqueKey (50)'
      SQL.DESC.REC< 2>='p_ActTrans (10)'
      SQL.DESC.REC< 3>='p_ActualCharge (10)'
      SQL.DESC.REC< 4>='p_FinalStack (10)'
      SQL.DESC.REC< 5>='p_HandlingUnits (10)'
      SQL.DESC.REC< 6>='p_LastAuditDate (10)'
      SQL.DESC.REC< 7>='p_LCC (10)'
      SQL.DESC.REC< 8>='p_LCCMisrouteTrans (10)'
      SQL.DESC.REC< 9>='p_OriginalStack (10)'
      SQL.DESC.REC<10>='p_WI (10)'
      SQL.DESC.REC<11>='p_BalanceDueNote (200)'
      SQL.DESC.REC<12>='p_BillToAccount (10)'
      SQL.DESC.REC<13>='p_BOLSource (10)'
      SQL.DESC.REC<14>='p_EstTrans (10)'
      SQL.DESC.REC<15>='p_UPSAddrCorrCharge (10)'
      SQL.DESC.REC<16>='p_UPSLatePayment (10)'
      SQL.DESC.REC<17>='p_Zone (10)'
      SQL.DESC.REC<18>='p_DueType (10)'
      SQL.DESC.REC<19>='p_OLAAmount (10)'
      SQL.DESC.REC<20>='p_Duplicate (10)'

      ERROR.CNT=0
10:   ERRORS=''
      GOSUB SETUP.SQL

* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE
      UPS.EBILL=0
      PRO=FIELD(BILL.ID,'*',2)
      UPS.FDATE=ICONV(PRO[8,2]:'/':PRO[10,2]:'/':PRO[12,2],'D')
      BEGIN CASE
         CASE CLIENT.ID='00244' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00841' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00857' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00962' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01292' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='01310' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01352' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01393' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='01640' AND UPS.FDATE < ICONV('03/24/08','D')
         CASE 1
            UPS.EBILL=(BILL.REC<53>="EBILL.IMPORT.NEW")
      END CASE

      IF UPS.EBILL THEN
         UPD.SHIP=0
         UPD.CINV=0
         UPD.CIDTL=0
         UPD.EXP=1
         UPD.STOP=0
         UPD.PYMT=0
      END
      CARRIER.ID=FIELD(BILL.ID,'*',1)
      PRO=FIELD(BILL.ID,'*',2)
      DUPLICATE=FIELD(BILL.ID,'*',3)
      LPRO=LEN(PRO)
      BD=0
      AD=0
      IF PRO[LPRO-1,2]='BD' THEN BD=1
      IF PRO[LPRO-1,2]='AD' THEN AD=1
      IF BILL.REC<37>='' THEN
         ERRORS<-1>='Missing Process Date for ':BILL.ID
         RETURN TO THE.END
      END

      PROC.DT=BILL.REC<37>'D4/'
      SQL.UNIQUEKEY=CLIENT.ID:CARRIER.ID:PRO:PROC.DT[7,4]:PROC.DT[1,2]:PROC.DT[4,2]
      SQL.FB.ACT.SVC=TRIM(BILL.REC<219,1>)
      SQL.FB.FINAL.STACK=TRIM(BILL.REC<68>)
      SQL.FB.HAND.UNIT=TRIM(BILL.REC<235>)
      AUDITED.BY = BILL.REC<89>
      SQL.FB.LAST.AUDIT.DT = ""
      AUDIT.DATE=''
      NVAL = DCOUNT(BILL.REC<84>,@VM)
      FOR VAL = NVAL TO 1 STEP -1
         W.USER = BILL.REC<84,VAL>
         IF W.USER = AUDITED.BY THEN
            AUDIT.TIME = BILL.REC<85,VAL>
            AUDIT.DATE = BILL.REC<86,VAL>
            EXIT
         END
      NEXT VAL
      IF AUDIT.DATE NE "" THEN SQL.FB.LAST.AUDIT.DT = OCONV(AUDIT.DATE,"D2/")
      SQL.FB.LCC=BILL.REC<143>'R26'
      SQL.FB.LCC.SVC=TRIM(BILL.REC<221,1>)
      SQL.FB.ORIG.STACK=TRIM(BILL.REC<96>)
      SQL.FB.WI=''
      LOCATE 'WI' IN BILL.REC<151> SETTING WPOS THEN
         SQL.FB.WI='Y'
      END
      SQL.FB.BD.NOTE=TRIM(BILL.REC<213>)[1,200]
      SQL.EDI.BT.ACCOUNT=TRIM(EDI.REC<18>)
      BOL.SRC.TEST=BILL.REC<244,1>
      IF BOL.SRC.TEST='' THEN            ; * SWB01
         BOL.SRC.DESC='UNKNOWN'          ; * SWB01
      END ELSE                           ; * SWB01
         BOL.SRC.ID='BOL.SRC*':BOL.SRC.TEST        ; * SWB01
         READV BOL.SRC.DESC FROM F.TABLES, BOL.SRC.ID,1 ELSE BOL.SRC.DESC='UNKNOWN'        ; * SWB01
      END                                ; * SWB01
      SQL.FB.BOL.SRC=BOL.SRC.DESC
      SQL.FB.EST.SVC=TRIM(BILL.REC<220,1>)
      SQL.FB.UPS.ADD.CORR=TRIM(BILL.REC<123>)'R26'
      SQL.FB.UPS.LATE.PYMT=TRIM(BILL.REC<148>)'R26'
      SQL.EDI.ZONE=TRIM(EDI.REC<93>)
      SQL.FB.ACTUAL.CHG=0
      SQL.FB.ADBD=""
      IF AD OR BD THEN
         SQL.FB.ACTUAL.CHG=BILL.REC<8>'R26'
         IF AD THEN SQL.FB.ADBD:='AD'
         IF BD THEN SQL.FB.ADBD:='BD'
      END
      SQL.FB.OLA.AMT=BILL.REC<99>'R26'
      SQL.FB.DUP=DUPLICATE

      SQL.TRANS.REC=''
      SQL.TRANS.REC< 1>=SQL.UNIQUEKEY
      SQL.TRANS.REC< 2>=SQL.FB.ACT.SVC
      SQL.TRANS.REC< 3>=SQL.FB.ACTUAL.CHG
      SQL.TRANS.REC< 4>=SQL.FB.FINAL.STACK
      SQL.TRANS.REC< 5>=SQL.FB.HAND.UNIT
      SQL.TRANS.REC< 6>=SQL.FB.LAST.AUDIT.DT
      SQL.TRANS.REC< 7>=SQL.FB.LCC
      SQL.TRANS.REC< 8>=SQL.FB.LCC.SVC
      SQL.TRANS.REC< 9>=SQL.FB.ORIG.STACK
      SQL.TRANS.REC<10>=SQL.FB.WI
      SQL.TRANS.REC<11>=SQL.FB.BD.NOTE
      SQL.TRANS.REC<12>=SQL.EDI.BT.ACCOUNT
      SQL.TRANS.REC<13>=SQL.FB.BOL.SRC
      SQL.TRANS.REC<14>=SQL.FB.EST.SVC
      SQL.TRANS.REC<15>=SQL.FB.UPS.ADD.CORR
      SQL.TRANS.REC<16>=SQL.FB.UPS.LATE.PYMT
      SQL.TRANS.REC<17>=SQL.EDI.ZONE
      SQL.TRANS.REC<18>=SQL.FB.ADBD
      SQL.TRANS.REC<19>=SQL.FB.OLA.AMT
      SQL.TRANS.REC<20>=SQL.FB.DUP

      FN = "SQLExecute"
      STATUS = SQLEXECUTE(UPDSHIPENV)
      STMTENV=UPDSHIPENV
      GOSUB CKSTMTENV

*     IF UPS.EBILL THEN GOTO THE.END     ; * JMK02

*******************************************
THE.END:***
*******************************************

* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1> = 'nmeddaugh@afs.net'
            MVIN<4>='AFS_UPD.SQL.QFBHIST.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            TEXT<1,-1>=' '
            NATT=DCOUNT(SQL.TRANS.REC,@AM)
            FOR ATT=1 TO NATT
               TEXT<1,-1>=ATT'R#3) ':QUOTE(SQL.DESC.REC<ATT>):' = ':QUOTE(SQL.TRANS.REC<ATT>):', ':QUOTE(LEN(SQL.TRANS.REC<ATT>))
            NEXT ATT
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP
*******************************************
SETUP.SQL:*
*******************************************

* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLALLOCENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLALLOCCONNECT(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*

      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='PRODQV'              ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVDW'               ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLCONNECT(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV
*******************************************
UPDATE.SQL.SHIPMENT:*
*******************************************
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
      FN = "SQLAllocStmt"
      STATUS = SQLALLOCSTMT(CONENV,UPDSHIPENV)
      GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
      OPT.STR = STR(' ?,',20)            ; * JMK03 ; * JMK04 ; * JMK06 ;  JMK07
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdShipmentXref (":OPT.STR:")}"      ; * 17 PLACEHOLDERS

      ROWNUM = 0
      FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*
      STATUS = SQLSETPARAM(UPDSHIPENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.ACT.SVC) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 3, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.ACTUAL.CHG) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 4, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.FINAL.STACK) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 5, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.HAND.UNIT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 6, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.LAST.AUDIT.DT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 7, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.LCC) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 8, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.LCC.SVC) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 9, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.ORIG.STACK) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 10, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.WI) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 11, SQL.B.BASIC, SQL.VARCHAR, 200, 0, SQL.FB.BD.NOTE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 12, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.EDI.BT.ACCOUNT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 13, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.BOL.SRC) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 14, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.EST.SVC) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 15, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.UPS.ADD.CORR) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 16, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.UPS.LATE.PYMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 17, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.EDI.ZONE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 18, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.ADBD) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 19, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.OLA.AMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 20, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FB.DUP) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV

      FN = "SQLPrepare"
      STATUS = SQLPREPARE(UPDSHIPENV, INST1)
      STMTENV=UPDSHIPENV
      ENVSRC='UPDSHIP'
      GOSUB CKSTMTENV
      RETURN
*******************************************
CKCONENV:
*******************************************
      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.QFBHIST.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN
*******************************************
CKSTMTENV:
*******************************************
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.QFBHIST.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
*******************************************
CHECK.SQL.WEIGHT:*
*******************************************
      LI.CODE.TYPE=''
      IF SQL.RATINGCODE='' THEN SQL.RATINGCODE='FRT'
      IF LI.CODES<1>#'' THEN
         LOCATE SQL.RATINGCODE IN LI.CODES<1> SETTING RPOS THEN
            LI.CODE.TYPE=LI.CODES<2,RPOS>
            IF LI.CODE.TYPE#'F' THEN
               SQL.WEIGHT=0
            END
         END
      END
      RETURN
