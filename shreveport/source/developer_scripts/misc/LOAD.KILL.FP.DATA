*****************************************************************************
* Program name : LOAD.KILL.CLIFF.FP.DATA
* Author       : Greg Bino
* Date written : 12-04-2018
* Library      : FBBP
* COPYRIGHT (C) 1998 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* LOAD KILL CLIFF BILL HISTORY
*
* Last updated by afs (AFSLOGISTICS\gbino) at 09:33:59 on 12/04/2018.
*
* Start modification history
* Mod 00 12-04-18, grb, ACCU-109  New program
* End modification history
*
******************************************************************************
INITIALIZE.VARIABLES:*
      OTODAY=OCONV(DATE(),'D4/')
      OBDAY=OCONV(DATE()-6,'D4/')
      PROG.NAME='LOAD.LEAN.FP.DATA'
      CEOL=@(-4)
      CALL GET.USER.NEW(USER,CH.NUM)

      TB=CHAR(9)
      GOSUB OPEN.FILES
      READV OP.FLG FROM F.OP,USER,38 ELSE
         OP.FLG = "N"
      END
      IF OP.FLG # "Y" THEN
         CALL ELINE('UNAUTHORIZED ACCESS')
         STOP
      END
      RPT.SVC.PREFIX=CHAR(239):CHAR(187):CHAR(191)
      BAD.CARRIER.HDR='CARRIER#''L#10 ':'NAME''L#35 ':'STATUS''L#6'

      PREV.TEST=''
START.PREPROCESS.LOOP:*
      FP.ID = 'KILL.CLIFF.DATA.txt'
      READ TEST FROM F.FP,FP.ID THEN
         TEST.NVAL=DCOUNT(TEST,@AM)
         IF TEST.NVAL<5 THEN
            MVIN=''
            SUBJ='LEAN HEAVY FREIGHT DATA FILE CORRUPT'
            TEXT=USER:' ATTEMPTED TO IMPORT THE LEAN HEAVY FREIGHT DATA FILE '
            TEXT<1,-1>='WHICH APPEARS TO BE CORRUPT '
            TEXT<1,-1>='ON ':DATE()'D2/':' ':OCONV(TIME(),'MTHS')
            TEXT<1,-1>=' '
            TEXT<1,-1>='PLEASE REVIEW AND ADVISE WHEN TO CONTINUE.'
            TEXT<1,-1>=' '
            MVIN=''
            MVIN<2,-1>='DFRIEND@AFS.NET'
            MVIN<4>='AFS'
            MVIN<5>=SUBJ
            MVIN<6>=TEXT
            CALL SENDMAIL(MVIN,MVOUT)
            CALL ELINE('HEAVY FREIGHT PAYMENT DATA FILE IS NOT AVAILABLE TO IMPORT!')
            ABORT
         END
         IF TEST#PREV.TEST THEN
            CRT @(0,22):FP.ID:' FILE IS BEING RECEIVED...PLEASE WAIT...':CEOL:
            PREV.TEST=TEST
            CRT @(0,22):CEOL:
            GO START.PREPROCESS.LOOP
         END
      END
      BAD.CARRIER.LIST=''
READ.PREPROCESS.RECORD:*
      READ FP.REC FROM F.FP,FP.ID THEN
         FP.ORG=FP.REC
         FP.REC=CHANGE(FP.REC,CHAR(9),@VM)
         IF FP.REC[1,3]=RPT.SVC.PREFIX THEN
            LREC=LEN(FP.REC)
            FP.REC=FP.REC[4,LREC]
         END
         IMP.NATT=DCOUNT(FP.REC,@AM)
         IMP.PER=''
         FOR IMP.ATT=1 TO IMP.NATT
            ****            CALL PROG.BAR(22,IMP.ATT,IMP.NATT,IMP.PER)
            IF IMP.ATT=1 THEN GO NEXT.PRE.ATT
            FP.LINE=TRIM(FP.REC<IMP.ATT>)
            IF FP.LINE='' THEN GO NEXT.PRE.ATT
            IF FP.LINE=' ' THEN GO NEXT.PRE.ATT
            IMP.REC=FP.LINE
            GOSUB DEFINE.IMPORT.FIELDS
            GOSUB READ.CLIENT.RECORD
            GOSUB READ.CARRIER.RECORD
            IF CARRIER.REC<89>#'A' THEN
               IF BAD.CARRIER.LIST='' THEN
                  BAD.CARRIER.LIST=BAD.CARRIER.HDR
               END
               BAD.CARRIER.HDR='CARRIER#''L#10 ':'NAME''L#35 ':'STATUS''L#6'
               BAD.CARRIER.DTL=CARRIER.ID'L#10 ':CARRIER.REC<1>'L#35 ':CARRIER.REC<89>'L#6'
               BAD.CARRIER.LIST<-1>=BAD.CARRIER.DTL
            END
NEXT.PRE.ATT:*
         NEXT IMP.ATT
      END
NEXT.PREPROCESS:*

      IF BAD.CARRIER.LIST#'' THEN
         MVIN=''
         SUBJ='INACTIVE CARRIER(S) FOR LEAN HEAVY FREIGHT PAYMENT IMPORT FILE'
         TEXT=USER:' ATTEMPTED TO IMPORT THE LEAN HEAVY FREIGHT PAYMENT FILE '
         TEXT<1,-1>='THAT CONTAIN CARRIER(S) WITH AN INACTIVE STATUS '
         TEXT<1,-1>='ON ':DATE()'D2/':' ':OCONV(TIME(),'MTHS')
         TEXT<1,-1>=' '
         TEXT<1,-1>='PLEASE REVIEW AND ADVISE THE MAPPED CARRIER NUMBER TO USE IN ORDER TO CORRECT.'
         TEXT<1,-1>=' '
         TEXT<1,-1>=CHANGE(BAD.CARRIER.LIST,@AM,@VM)
         MVIN=''
         MVIN<1,-1>='DFRIEND@AFS.NET'
         MVIN<4>='AFS'
         MVIN<5>=SUBJ
         MVIN<6>=TEXT
         CALL SENDMAIL(MVIN,MVOUT)
         ABORT
      END
START.PROCESSING.LOOP:*
READ.IMPORT.RECORD:*
      READ FP.REC FROM F.FP,FP.ID THEN
         FILE.DATE=FIELD(FP.ID,'-',1)
         PROC.DATE=ICONV(FILE.DATE[5,2]:'-':FILE.DATE[7,2]:'-':FILE.DATE[1,4],'D')
         FP.ORG=FP.REC
         FP.REC=CHANGE(FP.REC,CHAR(9),@VM)
         IF FP.REC[1,3]=RPT.SVC.PREFIX THEN
            LREC=LEN(FP.REC)
            FP.REC=FP.REC[4,LREC]
         END
         IMP.NATT=DCOUNT(FP.REC,@AM)
         FP.REC<1,74>='AFSPROID'
         IMP.PER=''
         FOR IMP.ATT=1 TO IMP.NATT
            ****           CALL PROG.BAR(22,IMP.ATT,IMP.NATT,IMP.PER)
            IF IMP.ATT=1 THEN GO NEXT.IMP.ATT

            FP.LINE=TRIM(FP.REC<IMP.ATT>)
            IF FP.LINE='' THEN GO NEXT.IMP.ATT
            IF FP.LINE=' ' THEN GO NEXT.IMP.ATT
            IMP.REC=FP.LINE
            GOSUB DEFINE.IMPORT.FIELDS
            GOSUB READ.CLIENT.RECORD
            HIST.CLIENT=0
            FP.CLIENT=1
            GOSUB READ.CARRIER.RECORD
            GOSUB CREATE.ADDITIONAL.FIELDS
            GOSUB WRITE.FB.REC
NEXT.IMP.ATT:*
         NEXT IMP.ATT
         WRITE FP.ORG ON F.FP,'RAN_':FP.ID
         FP.REC=CHANGE(FP.REC,@VM,CHAR(9))
****         DELETE F.FP,FP.ID
      END
NEXT.IMPORT:*

      STOP
*************************************************************
OPEN.FILES:*
*************************************************************
      OPEN '','GRB' TO F.FP ELSE
         CALL OPEN.ABORT('BILLDATA',PROG.NAME)
      END
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','FB.BILLS.CRX' TO F.CRX ELSE
         CALL OPEN.ABORT('FB.BILLS.CRX',PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS ELSE
         CALL OPEN.ABORT('ZIPS.CODES',PROG.NAME)
      END
      OPEN '','FED.INV.XREF' TO F.INV.XREF ELSE
         CALL OPEN.ABORT("FED.INV.XREF",PROG.NAME)
      END
      OPEN '','EDI.CAR.ACNT.XREF' TO F.ECAX ELSE
         CALL OPEN.ABORT("EDI.CAR.ACNT.XREF",PROG.NAME)
      END
      OPEN '','SCAC.XREF' TO F.SCAC ELSE
         CALL OPEN.ABORT("SCAC.XREF",PROG.NAME)
      END
      OPEN '','OPERATOR' TO F.OP ELSE CALL OPEN.ABORT("OPERATOR",PROG.NAME)      ; * GRB01
      RETURN
*************************************************************
DEFINE.IMPORT.FIELDS:*
*************************************************************

      IMPCARRIERNAME=IMP.REC<1,7>        ; * GOOD
      IMPMODE=IMP.REC<1,53>              ; * GOOD
      IMPINVOICE_PRONO=IMP.REC<1,8>
      IF IMPINVOICE_PRONO = "94503-1" THEN DEBUG
      IMPDIRECTION=IMP.REC<1,2>          ; * GOOD
      IF IMPDIRECTION = "Outbound" THEN DIRECTION = "O"      ; * GOOD
      DIVISION=IMP.REC<1,9>              ; * GOOD
      BEGIN CASE
      	CASE DIVISION =  'Retail'
      	DIVISION = "00001"
      	CASE DIVISION =  'E-Comm'
      	DIVISION = "00002"
      	CASE DIVISION =  'Military'
      	DIVISION = "00003"
      	CASE DIVISION =  'Fitness-National'
      	DIVISION = "00004"
      	CASE DIVISION =  'Fitness-Direct'
      	DIVISION = "00005"
      	CASE DIVISION =  'Navy Seal Foundation'
      	DIVISION = "00006"
      	CASE DIVISION =  'DS Service (DSS)'
      	DIVISION = "00007"
      	CASE DIVISION =  'In-House'
      	DIVISION = "00008"
      	CASE DIVISION =  'Returns'
      	DIVISION = "00009"
      	CASE DIVISION =  'Events/Samples'
      	DIVISION = "00010"
      	CASE DIVISION =  'MISC'
      	DIVISION = "00011"
      	CASE 1
      	DIVISION = '00011'
 END CASE

      IMPSENDERNAME=IMP.REC<1,3>         ; * GOOD
      IMPSENDERZIP=IMP.REC<1,6>[1,5]     ; * GOOD
      IMPSENDERCITY=IMP.REC<1,4>         ; * GOOD
      IMPSENDERSTATE=IMP.REC<1,5>        ; * GOOD
      IMPRECEIVERCITY=IMP.REC<1,11>      ; * GOOD
      IMPRECEIVERZIP=IMP.REC<1,13>[1,5]  ; * GOOD
      IMPRECEIVERSTATE=IMP.REC<1,12>     ; * GOOD
      TEMP.NUM = IMP.REC<1,17>           ; * GOOD
      TEMP.NUM = CHANGE(TEMP.NUM,',','')
      TEMP.NUM = CHANGE(TEMP.NUM,'"','')
      TEMP.NUM=TRIM(TEMP.NUM)
      IMPBILLEDWEIGHT=ICONV(TEMP.NUM,'MR0')

      IMPRECEIVERNAME=IMP.REC<1,10>      ; * GOOD

      IMPSHIPDATE=ICONV(IMP.REC<1,1>[1,10],'D')    ; * GOOD
      IMPDELIVERYDATE=ICONV(IMP.REC<1,14>,'D')     ; * GOOD

*****      IMPCLASS=IMP.REC<1,20>
      IMPCLASS = ''
*****      IMPREFERENCE=IMP.REC<1,21>
 TEST.NUM=IMP.REC<1,18>             ; * GOOD
      GOSUB CONVERT.NUMBER
      IMPFREIGHT=ICONV(TEST.NUM,'MR2,')

      TEST.NUM=IMP.REC<1,20>             ; * GOOD
      GOSUB CONVERT.NUMBER
      IMPGROSSCHARGE=ICONV(TEST.NUM,'MR2,')
IF IMPGROSSCHARGE + 0 = 0 THEN
	IMPGROSSCHARGE = IMPFREIGHT
END
     
      TEST.NUM=IMP.REC<1,15>             ; * GOOD
      GOSUB CONVERT.NUMBER
      PIECES=ICONV(TEST.NUM,'MR2,')

      IF TRIM(IMP.REC<1,19>) = '' THEN IMP.REC<1,19> = 0
      IF TRIM(IMP.REC<1,21>) = '' THEN IMP.REC<1,21> = 0
      IF IMP.REC<1,19> GT 0 AND IMP.REC<1,21> GT 0 THEN
         TEST.NUM=IMP.REC<1,19> -IMP.REC<1,21>     ; * MISC CHARGES = ACTUAL MINUS FUEL
         GOSUB CONVERT.NUMBER
         IMPCALCOM=ICONV(TEST.NUM,'MR2,')
      END ELSE
      	
         IMPCALCOM = 0
      END


      TEST.NUM=IMP.REC<1,21>             ; * GOOD
      GOSUB CONVERT.NUMBER
      IMPFUEL=ICONV(TEST.NUM,'MR2,')

      RETURN
*************************************************************
READ.CLIENT.RECORD:*
*************************************************************
      CLIENT.ID='05924'
      READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE CLIENT.REC=''

OPEN.CLIENT.FILES:*
      OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
         CALL OPEN.ABORT('FB.BILLS,':CLIENT.ID,PROG.NAME)
      END
      OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.HIST ELSE
         CALL OPEN.ABORT('FB.BILLS.HIST,':CLIENT.ID,PROG.NAME)
      END

      OPEN '','ZIP.DIV.XREF,':CLIENT.ID TO F.ZDX ELSE
         CALL OPEN.ABORT('ZIP.DIV.XREF,':CLIENT.ID,PROG.NAME)
      END
      RETURN
*************************************************************
READ.CARRIER.RECORD:*
*************************************************************
      IF IMPCARRIERNAME = 'CH Robinson' THEN CARRIER.ID = '10313'
      IF IMPCARRIERNAME = 'CNT Logistics' THEN CARRIER.ID = '33541'
      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE CARRIER.REC=''
      RETURN
*************************************************************
CREATE.ADDITIONAL.FIELDS:*
*************************************************************
      LCC.ARRAY=''
      BILL.DATE=IMPSHIPDATE
      IN.OUT=IMPDIRECTION[1,1]
      ORIG.ZIP=IMPSENDERZIP
      IF NUM(ORIG.ZIP) AND LEN(ORIG.ZIP)>5 THEN
         ORIG.ZIP=ORIG.ZIP[1,5]
      END
      READV ORIG.COUNTRY.CD FROM F.ZIPS,ORIG.ZIP,3 ELSE ORIG.COUNTRY.CD=''
      DEST.ZIP=IMPRECEIVERZIP
      IF NUM(DEST.ZIP) AND LEN(DEST.ZIP)>5 THEN
         DEST.ZIP=DEST.ZIP[1,5]
      END
      READV DEST.COUNTRY.CD FROM F.ZIPS,DEST.ZIP,3 ELSE DEST.COUNTRY.CD=''


      WEIGHT=IMPBILLEDWEIGHT
      CARRIER.CHG=IMPGROSSCHARGE
      ACTUAL.CHG=IMPGROSSCHARGE
      VAR.ARR=''

      CHECK.AMT=ACTUAL.CHG
      CHECK.NUM='99999'
      CHECK.DATE=ICONV('12-01-18','D')
****      BOL=IMPBOL_PONO
      VC.ID=IMPRECEIVERNAME
      ZIP.ARR=''
      MILEAGE=0
****      MILEAGE=IMPMILEAGE
      BEGIN CASE
         CASE IMPMODE='LTL' ; T.MODE.BY.WGT=1
         CASE IMPMODE='RAIL' ; T.MODE.BY.WGT=2
         CASE IMPMODE='COURIER' ; T.MODE.BY.WGT=4
         CASE IMPMODE='Truck' ; T.MODE.BY.WGT=6
         CASE IMPMODE='OCEAN' ; T.MODE.BY.WGT=8
         CASE IMPMODE='MISC' ; T.MODE.BY.WGT=11
         CASE IMPMODE='REMAIL' ; T.MODE.BY.WGT=11
         CASE IMPMODE='AIR FREIGHT' ; T.MODE.BY.WGT=12
         CASE IMPMODE='FLEET' ; T.MODE.BY.WGT=15
         CASE IMPMODE='INTERMODAL' ; T.MODE.BY.WGT=18
         CASE 1 ; T.MODE.BY.WGT=CARRIER.REC<44>
      END CASE
      MISROUTE.ARRAY=''
      DISC.PERC=''
      ORIG.STATE=IMPSENDERSTATE
      DEST.STATE=IMPRECEIVERSTATE
      ORIG.CITY=IMPSENDERCITY
      DEST.CITY=IMPRECEIVERCITY
      ZIP.ARR<1,1>=ORIG.ZIP
      ZIP.ARR<2,1>=ORIG.CITY
      ZIP.ARR<3,1>=ORIG.STATE
      ZIP.ARR<1,2>=DEST.ZIP
      ZIP.ARR<2,2>=DEST.CITY
      ZIP.ARR<3,2>=DEST.STATE
      DUE.DATE=''
      E.DATE=IMPSHIPDATE
      DTAB=''
****      DTAB<1>=EXP.CODE
      DTAB<3>=ACTUAL.CHG
      BANK.ID=CLIENT.REC<81>
      VERIFIED=''
      BILL.STATUS='O'
      INV.NUM=''
      OVERRIDE.FIELD=''
      OVERRIDE.OPERATOR=''
      OVERRIDE.INFO=''
      OVERRIDE.STATUS=''
      FLAT.RATE=''
      MIN.CHG=''
      AIR.PIECES=''
      DTL.CHRG.CODES=''
      DTL.CHRG.AMTS=''
      IF IMPFREIGHT+0#0 THEN
         DTL.CHRG.CODES<1,-1>='FRT'
         DTL.CHRG.AMTS<1,-1>=IMPFREIGHT
      END
      IF IMPCALCOM+0#0 THEN
         DTL.CHRG.CODES<1,-1>='MISC'
         DTL.CHRG.AMTS<1,-1>=IMPCALCOM
      END

      IF IMPFUEL+0#0 THEN
         DTL.CHRG.CODES<1,-1>='FSC'
         DTL.CHRG.AMTS<1,-1>=IMPFUEL
      END


      VERSION='0'
      DUP.FLAG=0                         ; * JMK06
      BD.FLAG=0
      SLASH.FLAG=0                       ; * JMK06
      SLASH.CNT=0                        ; * JMK06
      REJECT.REASONS=''
      PRO=IMPINVOICE_PRONO
      PRO=TRIM(PRO)
      BEGIN CASE

         CASE CARRIER.ID='10313' AND LEN(PRO) < 7
            PRO=PRO'R%7'

         CASE CARRIER.ID='33541' AND LEN(PRO)<5
            PRO=PRO'R%5'
      END CASE
      SERVICE.LEVEL=''
      MISROUTE.AMOUNT=''
      MISROUTE.CARRIER=''
      CLASSES=''
      WEIGHTS=''
      IF IMPCLASS#'' THEN
         CLASSES=IMPCLASS
         WEIGHTS=IMPBILLEDWEIGHT
      END
      ADDRESS.CORRECTION.CHARGE=''

      HANDLING.UNITS=''
      FB.NOTE=''

      EDI.PPR=''
      RETURN
*************************************************************
WRITE.FB.REC:*
*************************************************************
      PRO.ID=CARRIER.ID:'*':PRO:'*':VERSION
      IF BD.FLAG THEN
         PRO.ID=CARRIER.ID:'*':PRO:'BD*':VERSION
      END
      IF SLASH.FLAG AND SLASH.CNT#"0" THEN         ; * JMK06
         PRO.ID=CARRIER.ID:'*':PRO:'/':SLASH.CNT:'*':VERSION           ; * JMK06
      END                                ; * JMK06
      READ TEST.REC FROM F.HIST,PRO.ID ELSE TEST.REC=''
      READ TEST.REC FROM F.CRX,PRO.ID ELSE TEST.REC=''
      IF TEST.REC#'' AND HIST.CLIENT=1 THEN RETURN
      IF TEST.REC#'' THEN                ; * JMK06

         SLASH.FLAG=1                    ; * JMK06
         SLASH.CNT+=1                    ; * JMK06

         GO WRITE.FB.REC                 ; * JMK06
      END                                ; * JMK06
      T.DATE=DATE()
      T.TIME=TIME()
      USER='CLIENT-IMPORT'
      PRO.REC = ''
      PRO.REC<1> = BILL.DATE
      PRO.REC<2> = IN.OUT

      PRO.REC<3>=ORIG.ZIP
      PRO.REC<4>=DEST.ZIP

****      PRO.REC<5> = EXP.CODE
      PRO.REC<6> = WEIGHT
      PRO.REC<7> = CARRIER.CHG
      PRO.REC<8> = ACTUAL.CHG
      PRO.REC<9> = DIVISION
      PRO.REC<10> = 0-VAR.ARR<1>
      PRO.REC<11> = 0-VAR.ARR<2>
      PRO.REC<12> = 0-VAR.ARR<3>
      PRO.REC<13> = CHECK.AMT
      PRO.REC<14> = CHECK.NUM
      PRO.REC<15> = CHECK.DATE
****      PRO.REC<16> = IMPREFERENCE
      PRO.REC<17> = VC.ID
      PRO.REC<18> = ZIP.ARR<1>
      NUM.ZIPS = DCOUNT(PRO.REC<18>, @VM)
      IF NUM.ZIPS > 1 THEN
         DEL PRO.REC<18,NUM.ZIPS>
         DEL PRO.REC<18,1>
      END
****      PRO.REC<19> = MILEAGE
      PRO.REC<20> = CARRIER.ID
      PRO.REC<21> = T.MODE.BY.WGT
      IF PRO.REC<21>#'1' AND PRO.REC<21>#'6' THEN PRO.REC<19>=''       ; * JMK162
      IF PRO[LEN(PRO)-1,2]='AD' THEN PRO.REC<19>=''          ; * JMK162
      IF PRO[LEN(PRO)-1,2]='BD' THEN PRO.REC<19>=''          ; * JMK162
      PRO.REC<22> = MISROUTE.ARRAY<1>
      PRO.REC<23> = MISROUTE.ARRAY<2>
      PRO.REC<24> = DISC.PERC

      PRO.REC<25>=ORIG.STATE
      PRO.REC<26>=DEST.STATE
      PRO.REC<27>=ORIG.CITY
      PRO.REC<28>=DEST.CITY


      VAR.CODE = ''

      IF VAR.ARR<1>'R0' # 0 ! VAR.ARR<4>'R0' NE 0 THEN
         VAR.CODE = VAR.CODE:'D'
      END
      IF VAR.ARR<2>'R0' # 0 ! VAR.ARR<5>'R0' NE 0 THEN
         VAR.CODE = VAR.CODE:'O'
      END
      IF VAR.ARR<3>'R0' # 0 ! VAR.ARR<6>'R0' NE 0 THEN
         VAR.CODE = VAR.CODE:'C'
      END
      PRO.REC<29> = VAR.CODE
      PRO.REC<30> = E.DATE
      PRO.REC<31> = DTAB<1>
      PRO.REC<33> = DTAB<3>
      PRO.REC<34> = 0-VAR.ARR<4>
      PRO.REC<35> = 0-VAR.ARR<5>
      PRO.REC<36> = 0-VAR.ARR<6>
      PRO.REC<37> = ICONV("12-01-18","D")
      PRO.REC<38> = DUE.DATE
      PRO.REC<39> = 'O'
      PRO.REC<40> = BANK.ID
      PRO.REC<45> = VERIFIED
      PRO.REC<53> = USER
      PRO.REC<54> = USER

      PRO.REC<68> = BILL.STATUS
      FRT.ARRAY=''                       ; * JMK14
      MIS.ARRAY=''                       ; * JMK14
      DTL.OUT=''                         ; * JMK17
      DTL.OUT<40>=DTL.CHRG.CODES         ; * JMK17
      DTL.OUT<44>=DTL.CHRG.AMTS          ; * JMK17
      GOSUB RECALC.FB.DETAILS            ; * JMK18
      PRO.REC<94>=OCONV(INV.NUM,'MCU')
      PRO.REC<96>=OVERRIDE.STATUS
      PRO.REC<116>=OVERRIDE.FIELD
      PRO.REC<117>=OVERRIDE.OPERATOR
      PRO.REC<118>=OVERRIDE.INFO
      PRO.REC<119>=FLAT.RATE
      IF VERSION > 0 THEN PRO.REC<37>=''
      PRO.REC<41,1> = VAR.ARR<7>
      PRO.REC<41,2> = VAR.ARR<8>
      PRO.REC<41,3> = VAR.ARR<9>
      PRO.REC<46> = MIN.CHG
      CALC = 0
      PRO.REC<84,-1>=USER                ; * UPDATE EACH TIME BILL IS FILED
      PRO.REC<85,-1>=T.TIME              ; * UPDATE EACH TIME BILL IS FILED   ;*NPR06
      PRO.REC<86,-1>=DATE()              ; * UPDATE EACH TIME BILL IS FILED
      IF PRO.REC<53> = '' THEN PRO.REC<53> = USER
      PRO.REC<55> = LEN(PRO.REC)-LEN(USER)
      PRO.REC<59> = REJECT.REASONS<1>
      PRO.REC<60> = REJECT.REASONS<2>
      PRO.REC<61> = REJECT.REASONS<3>
      PRO.REC<62> = REJECT.REASONS<4>
      PRO.REC<65> = SERVICE.LEVEL
      PRO.REC<63> = MISROUTE.AMOUNT
      PRO.REC<69> = MISROUTE.CARRIER
****      PRO.REC<183> = BOL
      PRO.REC<189>=MISROUTE.AMOUNT       ; * JMK126
      PRO.REC<190>=MISROUTE.CARRIER      ; * JMK126
      IF VERSION GT 0 THEN PRO.REC<39> = 'O'
      PRO.REC<100>= VC.ID                ; * ITEM ID FOR CUST.VEND
      PRO.REC<71> = PIECES
      PRO.REC<74> = CLASSES
      PRO.REC<75> = WEIGHTS
      MISC.CHG.POS=DCOUNT(CLASSES<1>,@VM)          ; * FIND OUT HOW MANY
      PRO.REC<120>=ZIP.ARR<1>            ; * MV ZIPS
      PRO.REC<121>=ZIP.ARR<2>            ; * MV CITIES
      PRO.REC<122>=ZIP.ARR<3>            ; * MV STATES
      PRO.REC<149>=ZIP.ARR<7>            ; * MV MILES JMK12
      PRO.REC<123>=ADDRESS.CORRECTION.CHARGE       ; * FOR UNITED PARCEL SERVICE

      PRO.REC<239,1>='0'                 ; * DRF04

      IF DTL.CHRG.CODES #'' THEN         ; * JMK81  ; * NPR031
         PRO.REC<151>=DTL.CHRG.CODES     ; * JMK12
         PRO.REC<152>=DTL.CHRG.AMTS      ; * JMK12
         FRT.ARRAY=''                    ; * JMK149
         MIS.ARRAY=''                    ; * JMK149
         GOSUB RECALC.FB.DETAILS         ; * JMK149
      END                                ; * JMK81
      IF FRT.ARRAY<1>='' THEN            ; * JMK81
         IF DTL.CHRG.CODES#'' THEN       ; * JMK81
            DTL.OUT<40>=DTL.CHRG.CODES   ; * JMK81
            DTL.OUT<44>=DTL.CHRG.AMTS    ; * JMK81
            GOSUB RECALC.FB.DETAILS      ; * JMK19
         END                             ; * JMK81
      END                                ; * JMK19
      FOR ATT=1 TO 6                     ; * JMK14
         PRO.REC<152+ATT>=FRT.ARRAY<ATT>           ; * JMK14
         PRO.REC<158+ATT>=MIS.ARRAY<ATT>           ; * JMK14
      NEXT ATT                           ; * JMK14
      PRO.REC<202>=MISROUTE.ARRAY<3>     ; * JMK62
      PRO.REC<213>=FB.NOTE               ; * JMK111
      PRO.REC<217>=VAR.ARR<10>           ; * JMK154 - DISCOUNT CLASS
      PRO.REC<217>=VAR.ARR<11>           ; * JMK154 - OVERCHARGE CLASS WILL REPLACE ANY DISCOUNT CLASS
      PRO.REC<221>=''                    ; * JMK227
      PRO.REC<224>=LCC.ARRAY<7>          ; * JMK159
      PRO.REC<222>=ORIG.COUNTRY.CD
      PRO.REC<223>=DEST.COUNTRY.CD
      PRO.REC<235>=HANDLING.UNITS        ; * NPR35
      WRITE PRO.REC ON F.HIST,PRO.ID
      IF FP.CLIENT THEN
*****         WRITE PRO.REC ON F.BILLS,PRO.ID
      END
      FP.REC<IMP.ATT,74>=PRO.ID
*
* UPDATE FEDEX INVOICE FILE
*
      IF VERSION=0 THEN
         IF PRO.REC<94>#'' THEN
            READ DINV.XREF FROM F.INV.XREF,PRO.REC<94> ELSE DINV.XREF=''
            LOCATE PRO.ID IN DINV.XREF BY 'AR' SETTING INV.POS ELSE
               INS PRO.ID BEFORE DINV.XREF<INV.POS>
*****               WRITE DINV.XREF ON F.INV.XREF,PRO.REC<94>
            END
         END
      END
*
* UPDATE FREIGHT BILL CROSS REFERENCE (SKELETAL) RECORD
*

      REC = ''
      REC<1> = CLIENT.ID
      REC<2> = BILL.DATE
      REC<7> = PRO.REC<7>
      REC<8> = PRO.REC<8>
      REC<10> = PRO.REC<10>
      REC<11> = PRO.REC<11>
      REC<12> = PRO.REC<12>
      REC<30> = PRO.REC<30>
      REC<37> = PRO.REC<37>
      REC<39> = PRO.REC<39>
      REC<41> = PRO.REC<41>
      REC<53> = PRO.REC<53>
      REC<54> = PRO.REC<54>
      REC<55> = PRO.REC<55>
      REC<63> = PRO.REC<63>

      WRITE REC ON F.CRX,PRO.ID

      RETURN
*************************************************************
RECALC.FB.DETAILS:*
*************************************************************
      NVAL=DCOUNT(DTL.OUT<40>,@VM)       ; * JMK14
      FOR VAL=1 TO NVAL                  ; * JMK14
         TRAN.TYPE=DTL.OUT<40,VAL>       ; * JMK14
         BEGIN CASE                      ; * JMK14
            CASE TRAN.TYPE='FRT' OR TRAN.TYPE = 1 OR TRAN.TYPE = 2     ; * JMK14  ;* NPR031
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK14
               FOR ATT=1 TO 6            ; * JMK14
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK14
               NEXT ATT                  ; * JMK14
            CASE TRAN.TYPE='MIN'         ; * JMK14
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK14
               FOR ATT=1 TO 6            ; * JMK14
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK14
               NEXT ATT                  ; * JMK14
            CASE TRAN.TYPE='DEF'         ; * JMK14
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK14
               FOR ATT=1 TO 6            ; * JMK14
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK14
               NEXT ATT                  ; * JMK14
            CASE TRAN.TYPE='BASE'        ; * JMK81
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK81
               FOR ATT=1 TO 6            ; * JMK81
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK81
               NEXT ATT                  ; * JMK81
            CASE 1                       ; * JMK14
               LOCATE(TRAN.TYPE,MIS.ARRAY,1;MPOS) THEN       ; * JMK14
                  FOR ATT=5 TO 6         ; * JMK14
                     IF NUM(DTL.OUT<39+ATT,VAL>) THEN        ; * JMK14
                        MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0     ; * JMK14
                     END                 ; * JMK14
                  NEXT ATT               ; * JMK14
               END ELSE                  ; * JMK14
                  NXT.VAL=DCOUNT(MIS.ARRAY<1>,@VM)+1         ; * JMK14
                  FOR ATT=1 TO 4         ; * JMK14
                     MIS.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>        ; * JMK14
                  NEXT ATT               ; * JMK14
                  FOR ATT=5 TO 6         ; * JMK14
                     IF NUM(DTL.OUT<39+ATT,VAL>) THEN        ; * JMK14
                        MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0     ; * JMK14
                     END                 ; * JMK14
                  NEXT ATT               ; * JMK14
               END                       ; * JMK14
         END CASE                        ; * JMK14
      NEXT VAL                           ; * JMK14
      RETURN
*************************************************************
CONVERT.NUMBER:*
*************************************************************
      TEST.NUM=CHANGE(TEST.NUM,'($','-')
      TEST.NUM=CHANGE(TEST.NUM,')','')
      TEST.NUM=CHANGE(TEST.NUM,'$','')
      TEST.NUM=CHANGE(TEST.NUM,'"','')
      TEST.NUM=CHANGE(TEST.NUM,',','')
      RETURN
   END
