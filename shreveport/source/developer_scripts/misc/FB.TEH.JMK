* PROGRAM TO PROCESS BILLS TO BE PAID AND UPDATE YTD FIGURES
*
* FREIGHT BILL PACKAGE
*
* AR-BRIDGE DOCUMENTATION
* (Items created to pass to VCI-AR package)
*  1 Amount of Freight Bills paid
*  2 Processing Fees
*  3 Service Fees
*  4 Gross Overcharges
*  5 Gross Logistics
*  6 Discount Commissions
*  7 Postage
*  8 Date
*  9 Number of Freight Bills processed
* 10 Cost of Overcharges
* 11 Cost of Logistics
* 12 Logistic Fees  (ORIGINALLY FROM CLIENT MAINT, BUT NEVER FINISHED)
* 13 Manual Logistic Fees  (CHANGED TO 12)
* 102 Weekly Processing & Handling Fee  (Use to be 107 Weekly Postage)
* 105 AFSi Fee
* 107 Weekly Postage
**********************************************************************
* 111711 - JMK118 - SysAid#349 - Consulting Commision cap
* 101211 - RLM001 - PROJECT 80 - Retrieve Account Manager ID from file CLIENTS instead of salesman file
* 100509 - JMK117 - C091185 - All Rexel Branches received LCC report for entire company
* 100509 - JMK116 - C091213 - Bell Micro processing adjustment
* 100209 - JMK115 - SETUP REGION MISROUTE PROCESSING FOR GREAT PLAINS 00866
* 091409 - NPR11  - Added FB.BILLS.YTD,HISTORY file for checking Commission Caps across years.
* 090809 - JMK114 - 01706 - SETUP MISROUTE FOR REGION LOCATIONS
* 083109 - JMK113 - 01773 - Airgas Safety-UPS Processing Issues
* 082509 - NPR10  - T090944 show for the past  few (8) weeks, the bill count, freight dollars, and average amount per bill. Notify of variances.
* 081409 - JMK112 - C091043 - Processing fees ; need to split up by division for #1763 Pipeline Seal
* 080509 - JMK111 - SETUP DIVISIONAL PROCESSING FOR REGAL PLASTICS 00666
* 060109 - NPR09  - Moved wrapping up of the FB.TABLES FP_PROCESS item to a subroutine
* 060109 - NPR08  - T090673 Check Preset 'Cap' aginst YTD values for a Sales Code - (Updates added to FB.BILLS.YTD per sales codes ).
* 060109 - NPR07  - blat was expecting an attachment that no longer gets sent (Douglas battery in particular - changes for others made previously)
* 053109 - NPR06  - Added Account Manager to recipients receiving weekly email containing reports
* 052909 - JMK110 - Correct Divisional Billing for Vermeer
* 051809 - JMK109 - CORRECT THE EXCEL MACRO NAME THAT IS USED FOR THE ACR REPORT
* 050709 - JMK108 - USE TRUE COST FOR OVERCHARGE CALCULATION INSTEAD OF ACTUAL FREIGHT
* 042309 - JMK107 - C090447 - Rexel Region Reporting Changes
* 032009 - JMK106 - C090371 - Need to add explanation note for accounts on troubleshoot mode
* 032009 - NPR05  - T090286 - Added provision for calculating Managed return Amounts
* 030409 - NPR04  - T090253 - Highlight Client name based on ranking
* 022709 - NPR03  - C090285 Initialize Benchmarking related variables which were not being set under some conditions
* 021009 - JMK105 - CLEANUP EMAIL.LOG FILE WHEN RETURNING FROM FB.3.1.NEW
* 020509 - JMK104 - COMBINE ALL COS TRANSACTIONS TO THEIR RESPECTIVE INCOME CODES
* 011309 - JMK103 - Perform EMAIL.LOG housekeeping to keep file at reasonable size.
* 111708 - NPR02  - Added FB.MISROUTES.HIST file updating - See FB.MISROUTE.EMAIL.HIST file
* 102208 - JMK102 - C082385 - Add uses to first time processing notification for new clients
* 101608 - JMK101 - C082280 - Least Cost Carriers Real Time ; Add ability to determine the least cost carrier at FB Entry
* 101608 - JMK100 - C082344 - Prevent running the AR Posting Process while FP Processing is active.
* 101508 - JMK99 - DO NOT PUT REJECT BILLS INTO THE FPX FILE
* 091108 - JMK98 - Turn on FB Details Capture Switch during FP Processing starting 9/15/08
* 090308 - JMK97 - C082057 - Add ability to take account off of troubelshoot temporarily for processing ; Post to AR program
* 082608 - JMK96 - T082019 - Freight Bills processed / unprocessed / reprocessed and still in AR twice
* 081408 - JMK95 - C081954 - Remove Rcason from Client processing emails
* 072808 - JMK94 - C081821 - Add what client was processed on notice: Potential AR Balancing and FP Processing Conflict!
* 072308 - JMK93 - FedEx per bill fee for 01148
* 071508 - JMK92 - FedEx per bill fee for 01478
* 071008 - JMK91 - FedEx per bill fee for 01539, 01148, 01371, 01398
* 060508 - JMK90 - C081315 - Mixing Voucher and Freight Payment in one account
* 051908 - JMK89 - T081351 - 01635 - Manar ; weekly fee not showing on report
* 040808 - JMK88 - T080964 - SOC for divisions of Southern Marketing Affiliates
* 040708 - JMK87 - C080879 - create a .csv file for client 01640 Elliott Electric
* 010908 - JMK86 - C080107 - Send an Alert if FP Processing happens on a non-business day
* 010908 - JMK85 - C080103 - Send Alert if FP Processing starts after 6:00 pm
* 121907 - JMK84 - C070443 - Create process to update SQL data tables from Universe
* 120307 - JMK83 - C071248 - Doskocil Bills need to be selected manually prior to check printing
* 101707 - JMK82 - CAPTURE BENCHMARK TIMING FOR EVALUATION PURPOSES
* 091207 - JMK81 - C070443 - Create process to update SQL data tables from Universe
* 091107 - JMK80 - T070127 - Need ProComm Alert For Unprocessed EDI Bills ADJUSTMENT
* 082307 - JMK79 - T070319 - integrate program into 'process notification'
* 082307 - JMK78 - T070127 - Need ProComm Alert For Unprocessed EDI Bills
* 061207 - JMK77 - C200706050004 / 6/11/07 / weekly fees split by division
* 051007 - JMK76 - C200705100012  / 5/10/07 /  move carriers from sales code 22 to 21
* 050907 - JMK75 - C200704250003  /   /  Leisure Arts Divisions - pass user to FB.PROCESS.CALC
* 040507 - JMK74 - ADD OVERRIDE TO REMOVE CLIENTS FROM EBILL CHECK
* 032807 - JMK73 - C200703260002 / ASAP /  Servicing Salesman & Manager Weekly Report Emails
* 022707 - DRF02 - REQUIRE VERIFICATION FOR INACTIVE CLIENTS
* 013007 - DRF01 - CHECK TO MAKE SURE EBILL HAS COME IN
* 013007 - JMK72 - ADD DARLING 00850,01433 TO BOL UPDATE PROCESS
* 101206 - JMK71 - ADD OPTION TO PRINT EDI LTL BILLS
* 100306 - JMK70 - ADD FB SUMMARY UPDATE INITIALLY FOR ALCON
* 092206 - JMK69 - FORCE AN ANSWER TO THE TROUBLESHOOTING NOTIFICATION
* 090806 - JMK68 - ADJUST THE BLANK EMAIL NOTIFICATIONS FROM JMK62
* 082806 - JMK67 - CORRECT THE ERROR OF STORING MISROUTE EMAIL ADDRESSES ON THE CLIENT RECORD
* 080806 - JMK66 - ADD DIVISIONAL PARAMETER PASSED TO FB.PROCESS.CALC FOR GARDNER GLASS (01003)
* 080806 - JMK65 - CHANGE HOW THE AR-BRIDGE RECORD IS HANDLED DURING TROUBLESHOOTING
* 080706 - JMK64 - MAKE SURE NO BLANK EMAIL ADDRESSES ARE USED IN MISROUTE EMAILS
* 080106 - JMK63 - CHANGE HOW SERVICING SALESMAN IS HANDLED FOR MISROUTE EMAILS
* 072706 - JMK62 - ALERT IF EMAILS FOR REPORTS DID NOT GO OUT
* 072506 - JMK61 - BREAK OUT MISROUTE EMAILS TO INDIVIDUAL EMAIL ADDRESSES
* 070506 - JMK60 - ADD COMMISSION ALLOWANCE FOR 0.01 AND -0.01 FOR UPS AND FEDEX
* 061306 - JMK59 - DO NOT UPDATE FB.OPEN.BILLS OF TROUBLESHOOTING IS ON
* 050106 - JMK58 - UPDATE DUE DATE PROCESSING VALIDATION
* 032306 - JMK57 - ADD LOGISTICS CALCULATION BY CARRIER
* 032306 - JMK56 - ALLOW GREAT PLAINS TO PROCESS WITHOUT UPS RATES
* 022806 - JMK55 - SETUP FEDEX GROUND OVERCHG NOTICE IF NO RATE IS SETUP
* 022106 - JMK54 - CHANGE BOL PROCESSING FOR 1344 TO INCLUDE INBOUND SHIPMENTS
* 010406 - JMK53 - DO NOT ADD REJECTS TO PROC.DATE.XREF INDEX FILE
* 122205 - JMK52 - CHANGE DIV BY ZERO ERROR CONDITION FOR PREV BILL COUNT
* 110705 - JMK51 - ADD FLAT FEE LOGISTICS ALLOCATION PROCESSING
* 110105 - JMK50 - CHANGE BRIAN MISROUTE EMAIL LIMIT TO $500.00
* 092105 - JMK49 - PROCESSING BILL VARIANCE ALERT
* 082405 - JMK48 - SETUP UPS OVERCHG NOTICE IF NO UPS RATE IS SETUP
* 072805 - JMK47 - ADD DIETRICH TO BOL PROCESSING
* 072805 - JMK46 - CHANGE MISROUTE EMAIL RECORD STRUCTURE AND ID
* 062405 - JMK45 - COUNT REJECT EDI BILLS AS PPR BILLS
* 051905 - JMK43 - MAKE FLAT FEE ADJUSTMENTS FOR 01148
* 042005 - JMK42 - ADJUST MISROUTE EMAIL ADDRESS PROCESSING
* 040705 - JMK41 - ADD SWITCH TO TRIGGER MACRO QUOTES FOR ACCRUAL REPORT
* 032205 - JMK40 - ENHANCE DUE DATE PROCESSING FOR CLIENT/CARRIERS
* 030305 - JMK39 - CAPTURE MISROUTE LOGISTICS AMOUNTS FOR REVIEW
* 020205 - JMK38 - ADJUST ACCRUAL REPORTS FOR STC CLIENTS
* 020205 - JMK37 - ADD SWEDISH MATCH TO BOL PROCESSING
* 020105 - JMK36 - CORRECT DIVISIONAL ISSUES WITH VESUVIUS
* 012705 - JMK35 - ADD STC LOGISTICS FEE SALES CODE
* 012605 - JMK34 - ADD FEDX AIR OVERCHARGE COMMISSION
* 012005 - JMK33 - TROUBLESHOOT OR TESTING ADJUSTMENTS
* 011805 - JMK32 - ADD DIVISIONAL INFORMATION FOR VESUVIUS MINIMUMS
* 011705 - JMK31 - ADD UPS TRACKING NUMBER CALCULATION FOR VESUVIUS
* 011405 - JMK30 - CHANGE PRO-RATED PROCESS CALCULATION FOR EXPENSE
* 011105 - JMK29 - SEPARATE PRO-RATED PROCESS FEES FOR AR POSTING
* 011105 - JMK28 - EXCLUDE EDI BILLS FROM STC POSTAGE CALC
* 010405 - JMK27 - PROCESS ONLY IF LIVE BILLS EXISTS
* 121504 - JMK26 - ADD ACCRUAL REPORT OPTION TO PRE-PROCESSING
* 121404 - JMK25 - EXPAND DUE DATE EVALUATION
* 120304 - JMK24 - ADD PR (/n) BILL CALCULATION
* 111504 - JMK23 - ADD WARNING WHEN TROUBLESHOOTING EMAILS ARE ACTIVE
* 111104 - JMK22 - ADD FEDEX GROUND OVERCHARGE COMMISSION
* 111004 - JMK21 - ADD DUE DATE FILTER TO BILL SELECTION
* 110904 - JMK20 - VERIFY FB DETAIL IS CORRECT PRIOR TO CONTINUE
* 110904 - JMK19 - BREAK OUT FEDEX GROUND CHARGES LIKE UPS
* 110204 - JMK18 - ADD SCOTT TRAFFIC SALES CODE PROCESSING
* 091704 - JMK17 - ADD ORIGIN AND DESTINATION TO MR EMAILS
* 052004 - JMK16 - ADJUST PREVIOUS BILL COUNT PROCESS
* 040604 - JMK15 - CHECK FOR BILL COUNT VARIANCE
* 022704 - DRF - Change 107 Weekly Postage to 102 Weekly Proc & Hndl
* 022404 - JMK14 - ADD YTD MISROUTE SAVINGS
* 012104 - JMK13 - SET MISSING MGMT CODE TO 149
* 011204 - JMK12 - ADD MGMT SVC FEE TO PROCESS
* 111003 - JMK11 - ADD BEGIN AND END DATES TO EMAIL ID
* 082603 - JMK10 - ADD DIVISION ID TO EMAIL ARRAY
* 080803 - JMK09 - ADD DIV TO EMAIL RECORD FOR REPORTING
* 060303 - JMK08 - FILTER DETAIL EMAILS FOR INBOUND SHIPMENTS ONLY
* 052903 - JMK07 - CAPTURE VENDOR/CUSTOMER NAME FOR SUMMARIES
* 052003 - JMK06 - CHANGE EMAIL RECORD ID TO SUMMARIZE FOR DIV AND CLIENT
* 050203 - JMK05 - CHANGE EMAIL.RECORD ID FOR CORRECT PROCESSING
* 040803 - JMK04 - CREATE AND UPDATE MISROUTE EMAIL FILE
* 112202 - JMK03 - PASS END DATE TO MISROUTE LETTERS FOR DM DELAY
* 112602 - JMK02 - DISREGARD THIRD PARTY BILLING FOR LCC
* 102502 - JMK01 - ADD FB.MISROUTE.CHECK FILE WRITE FOR LCC MISROUTE
*                  PROCESSING
* Last updated by Cody Henderson on October 24, 1996. Adding
*    unprocess files.
* Last updated by AFS (owen) at 13:10:00 on 01/05/1995.
* Disabled carry-through of posted date <37>. Use current date.
* Last updated by AFS (steve) at 14:44:11 on 09/26/94
*   Added to select of FB.BILLS to filter out bills with hold codes
* Last updated by AFS.SOURCE (valerie) at 10:51:51 on 07/13/1994.
*   DID AWAY WITH A LOGISTICS FEE COMING FROM THE CLIENT MAINTENANCE
*   RECORD IN FIELD 37.  CHANGED 13, WHICH COMES FROM THE LOGISTICS
*   MAINTENANCE TO 12 AND TRY TO GET FIGURES TO BE ACCURATE.
* Last updated by AFS.SOURCE (valerie) at 11:09:31 on 05/26/1994.
*   UPDATED FOR UNIVERSE, ADDED NEW INSERT FOR DIVISION CODES, AND
*   ADDED INTER/INTRA REGION CALCULATIONS.  IN ORDER TO DETERMINE IF
*   A SHIPMENT STAYED WITHIN THE REGION, CLIENT.REC<91> MUST BE SET
*   TO A 'Y' AND ZIP RANGES MUST BE SET UP IN THE DIVISION CODES FILE
*   FOR THAT CLIENT.  REGIONS MUST ALSO BE SET UP.  THE IN/OUT FLAG
*   WILL BE SET IN FB.BILLS.HIST<43>.
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE FILE.DEFS INC_DIVISION.CODES
$INCLUDE FILE.DEFS INC_REGIONS
$INCLUDE FILE.DEFS INC_REGION.CODES  ; * JMK107
*
* Initialize variables
*
      PROG.NAME='FB.TEH.JMK'
      PROG.DESC='PROCESS BILLS FOR PAYMENT - NEW WAY'
      PACK.NAME='FREIGHT BILLING'
*      USER=OCONV(SYSTEM(19),'MCU')
      CALL GET.USER(USER)
      CALL CHANNEL(CH.NUM)
      JIM = (USER='JIM')
      TESTING=0                          ; * JMK33
      ONCE=0                             ; * JMK97
*
      DIV=''                             ; * JMK09
      MAX.BILL.VAR.PCT=25                ; * JMK15
*NPR10      MAX.BILL.VAR.PCT=20                ; * JMK15  ;* NPR10   20 or 25 ??????????
      ACTUAL.CHG.TOTAL = 0               ; * NPR10
      FB.OZ=.6333                        ; * JMK18
      PROMPT''
      TODAY=DATE()
      CARRIERS=''
      DIV.CODE=''
      CARRIER.COUNT=0
      DIV.CODE.COUNT=0
      BILLS.COUNT=0
      PR.BILLS.COUNT=0                   ; * JMK24
      UPS.BILLS.COUNT=0                  ; * JMK31
      UPS.TRACK.COUNT=0                  ; * JMK31
      DISC.VAR=0
      OVRCHG.VAR=0
      CONSLT.VAR=0
      BD.DISC=0
      BD.OVRCHG=0
      BD.CONSLT=0
      INVOICE=''
      DIV.INVOICE=''                     ; * JMK32
      CLAIMS.FEES=''
      DIV.LIST=''                        ; * JMK32
      DIV.COUNTS=''                      ; * JMK32
      DARRAY=''
      DIV.DARRAY=''                      ; * JMK32
      ERRMSG=''
      CHG.WARN=''                        ; * JMK48
      MAT DIV.REC = ''
      MAT REG.CODE.REC = ''
      DIM SAVE.DIV.REC(DIV.REC.SIZE)
      MAT SAVE.DIV.REC = ''
*     FOR I=1 TO 10                      ; * JMK19
*     FOR I=1 TO 11                      ; * JMK19 ; * JMK34
      FOR I=1 TO 12                      ; * JMK19 ; * JMK34
         INVOICE<I>=0
      NEXT I

      BENCH.PGM = PROG.NAME              ; * NPR03
      BENCH.GRP = ''                     ; * NPR03
      BENCH.BDATE = ''                   ; * NPR03
      BENCH.BTIME = ''                   ; * NPR03
      BENCH.USER = ''                    ; * NPR03
      BENCH.ETIME = ''                   ; * NPR03
      BENCH.NUM.REC = ''                 ; * NPR03

*
* Open files
*
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END
      OPEN '','AR.SLSMAN.1000.1' TO F.AR.SLSMAN ELSE
         CALL OPEN.ABORT('AR.SLSMAN.1000.1',PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END
      OPEN '','EMP.PERF' TO F.EMP.PERF ELSE CALL OPEN.ABORT("EMP.PERF",PROG.NAME)
      OPEN '','CLIENT.SUM' TO F.CLIENT.SUM ELSE CALL OPEN.ABORT("CLIENT.SUM",PROG.NAME)
      OPEN '','FB.BILLS.CRX' TO F.CRX ELSE
         CALL OPEN.ABORT('FB.BILLS.CRX',PROG.NAME)
      END
*
*
      OPEN '','FB.OPEN.BILLS' TO F.OPEN ELSE
         CALL OPEN.ABORT('FB.OPEN.BILLS',PROG.NAME)
      END
*NPR01
      OPEN '','FB.PRE.OPEN.BILLS' TO F.PRE.OPEN ELSE
         CALL OPEN.ABORT('FB.PRE.OPEN.BILLS',PROG.NAME)
      END
      OPEN '','FB.PAY' TO F.PAY ELSE
         CALL OPEN.ABORT("FB.PAY",PROG.NAME)
      END
*NPR01
      OPEN '','FB.LOGISTICS' TO F.LOGS ELSE
         CALL OPEN.ABORT("FB.LOGISTICS",PROG.NAME)
      END
      OPEN '','FB.CLAIMS' TO F.CLAIMS ELSE
         CALL OPEN.ABORT("FB.CLAIMS",PROG.NAME)
      END
      OPEN '','FB.PROG.FEE' TO F.PROG.FEE ELSE
         CALL OPEN.ABORT("FB.PROG.FEE",PROG.NAME)
      END
      OPEN '','FB.MANG.RTRNS' TO F.MANG.RTRNS ELSE           ; *NPR05
         CALL OPEN.ABORT("FB.MANG.RTRNS",PROG.NAME)          ; *NPR05
      END                                ; *NPR05
      OPEN '','FB.ADJUSTS' TO F.ADJUSTS ELSE
         CALL OPEN.ABORT("FB.ADJUSTS",PROG.NAME)
      END
      OPEN '', 'REGIONS' TO REGIONS ELSE
         CALL OPEN.ABORT( 'REGIONS', PROG.NAME )
      END
      OPEN '','FBWORK':CH.NUM TO F.WORK ELSE
         EXECUTE 'CREATE-FILE FBWORK':CH.NUM:' 1 1001' PASSLIST CAPTURING OUTPUT
         OPEN '','FBWORK':CH.NUM TO F.WORK ELSE
            CALL OPEN.ABORT('FBWORK':CH.NUM,PROG.NAME)
         END
      END
      OPEN'','TEMP' TO F.TEMP ELSE
         CALL OPEN.ABORT('TEMP',PROG.NAME)
      END
      OPEN '','TL.HIST' TO F.TL.HIST ELSE
         CALL OPEN.ABORT('TL.HIST',PROG.NAME)
      END
      OPEN '','FB.TRANSPORT' TO F.TRANSPORT ELSE
         CALL OPEN.ABORT("FB.TRANSPORT",PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT("FB.TABLES",PROG.NAME)
      END
      OPEN '','EMAILDATA' TO F.EMAILDATA ELSE
         CALL OPEN.ABORT('EMAILDATA',PROG.NAME)
      END
      OPEN '','CLIENT.CARRIER.XREF' TO F.CLI.CAR.XREF ELSE
         CALL OPEN.ABORT('CLIENT.CARRIER.XREF',PROG.NAME)
      END
      OPEN '','FB.MISROUTE.CHECK' TO F.MIS.CHECK ELSE        ; * JMK01
         CALL OPEN.ABORT('FB.MISROUTE.CHECK',PROG.NAME)      ; * JMK01
      END                                ; * JMK01
      OPEN '','FB.TEH.EMAIL' TO F.MIS.EMAIL ELSE   ; * JMK04
         CALL OPEN.ABORT('FB.MISROUTE.EMAIL',PROG.NAME)      ; * JMK04
      END                                ; * JMK04
      OPEN '','FB.TEH.EMAIL.HIST' TO F.MIS.EMAIL.HIST ELSE   ; * JMK04
         CALL OPEN.ABORT('FB.MISROUTE.EMAIL.HIST',PROG.NAME)           ; * JMK04
      END                                ; * JMK04
      OPEN '','FB.MISROUTES.HIST' TO F.MISR.HIST ELSE        ; * NPR02
         CALL OPEN.ABORT('FB.MISROUTE.HIST',PROG.NAME)       ; * NPR02
      END                                ; * JMK04                     ; * NPR02
      OPEN '','UPSDATA' TO F.UPSDATA ELSE
         CALL OPEN.ABORT('UPSDATA',PROG.NAME)
      END
      OPEN '','EMAIL.LOG' TO F.EMAIL.LOG ELSE      ; * JMK62
         CALL OPEN.ABORT('EMAIL.LOG',PROG.NAME)    ; * JMK62
      END                                ; * JMK62
      OPEN '','UPS.BM' TO F.UPS.BM ELSE  ; * DRF01
         CALL OPEN.ABORT('UPS.BM',PROG.NAME)       ; * DRF01
      END                                ; * DRF01
      OPEN '','PROCESS.NOTIFY' TO F.PN ELSE        ; * JMK79
         CALL OPEN.ABORT('PROCESS.NOTIFY',PROG.NAME)         ; * JMK79
      END                                ; * JMK79
      OPEN '','PROCESS.NOTIFY.HIST' TO F.PN.HIST ELSE        ; * JMK79
         CALL OPEN.ABORT('PROCESS.NOTIFY.HIST',PROG.NAME)    ; * JMK79
      END                                ; * JMK79
      OPEN '','FB.BANK.CTRL' TO F.BANK.CTRL ELSE   ; * JMK90
         CALL OPEN.ABORT('FB.BANK.CTRL',PROG.NAME)           ; * JMK90
      END                                ; * JMK90
      OPEN '','FB.ADJUST.CLIENT' TO F.ADJUST.CLIENT ELSE     ; * JMK98
         CALL OPEN.ABORT("FB.ADJUST.CLIENT",PROG.NAME)       ; * JMK98
      END                                ; * JMK98
      BEGIN CASE
*
* Authorized Users
*
         CASE USER = 'MKERBOW'           ; * JMK01

*
* Restrict the other MoFo's
*
         CASE 1
            CALL FB.PRINT.CENT(1,80,10,USER:' DOES NOT HAVE ACCESS TO PROCESS!')
            CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
            CALL ELINE('Access Denied! - See Help Desk')
            STOP
      END CASE

      READ AR.POST.REC FROM F.TABLES,'AR_POSTING' THEN       ; * JMK100
         CALL ELINE('AR is currently being posted by ':AR.POST.REC<1>:'. Please try again later.')   ; * JMK100
         STOP                            ; * JMK100
      END                                ; * JMK100

*IF DATE() =12601 THEN
*** Need to Run FBBP CHANGE.POSTAGE
*  CALL ELINE("When Finished Check the Summary for the Postage Changes")
*END
      CLEARFILE F.WORK
      AR.BRIDGE.FLAG=0
      BRIDGE.ID=''
      CLIENT = ''                        ; * NPR09

*
* Select trans codes and build transportation array
*
      TRANS.ARRAY=""
      SELECT F.TRANSPORT
      LOOP
         READNEXT ID ELSE ID=""
      UNTIL ID="" DO
         READ TRANS.REC FROM F.TRANSPORT,ID ELSE TRANS.REC = ''
         IF TRANS.ARRAY="" THEN
            TRANS.ARRAY<1>=ID
            TRANS.ARRAY<2>=TRANS.REC<1>
            TRANS.ARRAY<3>=TRANS.REC<2>
            TRANS.ARRAY<4>=TRANS.REC<3>  ; * JMK12
            TRANS.ARRAY<5>=TRANS.REC<4>  ; * JMK12
         END ELSE
            LOCATE(ID,TRANS.ARRAY,1;POS;"AR") ELSE
               TRANS.ARRAY=INSERT(TRANS.ARRAY,1,POS,0,ID)
               TRANS.ARRAY=INSERT(TRANS.ARRAY,2,POS,0,TRANS.REC<1>)
               TRANS.ARRAY=INSERT(TRANS.ARRAY,3,POS,0,TRANS.REC<2>)
               TRANS.ARRAY=INSERT(TRANS.ARRAY,4,POS,0,TRANS.REC<3>)    ; * JMK12
               TRANS.ARRAY=INSERT(TRANS.ARRAY,5,POS,0,TRANS.REC<4>)    ; * JMK12
            END
         END
      REPEAT


*
* Display screen heading
*
10:   CALL AFS.SCR.HEAD('','','',PROG.NAME,PROG.DESC,PACK.NAME,"AFS Logistics, LLC",TIME.DATE,1)
      LOCK 1 ELSE
*        UNLOCK 1
         CALL ELINE('Process is locked by another terminal - Try Again in 15 minutes')
         STOP
      END
      UNLOCK 1
20:   HELP='Enter number of client to process.'
      IF AR.BRIDGE.FLAG THEN
         READ TBR.INFO FROM F.BDG,CLIENT THEN
            IF TBR.INFO=BRIDGE.INFO THEN
               DELETE F.BDG,CLIENT
               AR.BRIDGE.FLAG=0
            END
         END
      END
      CALL GEN.IN(0,3,'Enter Client Number     #####','',CLIENT,1,5,'R','0',1,-5,3,0,QI,HELP,0,23)
      IF QI='EX' OR QI='X' THEN GOTO 9999
*
      READ CLIENT.REC FROM F.CLIENTS,CLIENT ELSE
         CALL ELINE('Client ':CLIENT:' not on file!')
         GOTO 20
      END
      SCT.FLG=0                          ; * JMK18
      IF CLIENT.REC<92>='00002' THEN SCT.FLG=1     ; * JMK18
      DUE.DT.FLG=CLIENT.REC<186>         ; * JMK21
      IF DUE.DT.FLG='' THEN DUE.DT.FLG='N'
      TESTING=0                          ; * JMK33

      ACCT.MGR = ""                      ; * NPR06
      ACCT.MGR.EMAIL = ""                ; * NPR06

      SERV.SLSMAN=CLIENT.REC<115>
*     READV SERV.SLSMAN.NAME FROM F.AR.SLSMAN,SERV.SLSMAN,1 ELSE SER.SLSMAN.NAME = SERV.SLSMAN:" is not on file " ; * JMK61
      READ SERV.SLSMAN.REC FROM F.AR.SLSMAN,SERV.SLSMAN ELSE SERV.SLSMAN.REC = ""          ; * JMK61
      SERV.SLSMAN.NAME=SERV.SLSMAN.REC<1>          ; * JMK61
      SERV.SLSMAN.EMAIL=SERV.SLSMAN.REC<8>         ; * JMK61
      SERV.SLSMAN.MGR.EMAIL=SERV.SLSMAN.REC<9>     ; * JMK73
*     ACCT.MGR = SERV.SLSMAN.REC<11>     ; * NPR06  ; * RLM001
      IF SERV.SLSMAN.REC="" THEN         ; * JMK61
         SERV.SLSMAN.NAME = SERV.SLSMAN:" is not on file "   ; * JMK61
         SERV.SLSMAN.EMAIL = "NONE"      ; * JMK61
      END                                ; * JMK61

      ACCT.MGR = CLIENT.REC<264>         ; * RLM001
*NPR06
      IF ACCT.MGR # '' THEN
         READ ACCT.MGR.REC FROM F.AR.SLSMAN,ACCT.MGR THEN
            ACCT.MGR.EMAIL = ACCT.MGR.REC<8>
         END
      END ELSE
         ACCT.MGR.EMAIL = ""
      END
*NPR06

      IF CLIENT.REC<146>#'NW' THEN
         CALL ELINE('This client ':CLIENT:' is not a new way client')
         GOTO 20
      END
      READ NO.PROCESS FROM F.TABLES,'NO-PROCESS*':CLIENT THEN
         IF NO.PROCESS<2>='NEW' THEN
            IF USER='MYRA' OR USER='MARY' THEN
               DELETE F.TABLES,'NO-PROCESS*':CLIENT
               SUBJ='New Account Processed'
               TEXT=USER:' has processed a NEW account for the 1st time!'
               TEXT<1,-1>='Client: ':CLIENT:'-':CLIENT.REC<2>
               TEXT<1,-1>='Salesman - ':SERV.SLSMAN:'-':SERV.SLSMAN.NAME
               TEXT<1,-1>='Karen, Debbie, Scott, and Owen must See these reports'
               TEXT<1,-1>='Make SURE that the salesman goes over the reports with the client!'
            END ELSE
               SUBJ='New Account Process Attempt'
               TEXT=USER:' attempted to process the new account ':CLIENT:'-':CLIENT.REC<2>
               TEXT<1,-1>='Karen, Debbie, and Owen must See these reports'
            END
            MVIN=''
            MVIN<1,-1>='KGilbert@afs.net'
            MVIN<1,-1>='DCurtis@afs.net'
            MVIN<1,-1>='SMatthews@afs.net'
            MVIN<1,-1>='BJeppson@afs.net'
*           MVIN<1,-1>='RCason@afs.net'  ; * JMK95
            MVIN<2>='DFriend@afs.net'
            MVIN<2,-1>='DDupont@afs.net'
            MVIN<4>='AFS'
            MVIN<5>=SUBJ
            MVIN<6>=TEXT
            CALL SENDMAIL(MVIN,MVOUT)
            CALL ELINE(NO.PROCESS<1>)
         END ELSE
            CALL ELINE(NO.PROCESS<1>)
            GOSUB UPDATE.PROGRESS.REC    ; * NPR09
            GOTO 10
*DF            IF USER#'MYRA' AND USER#"MARY" THEN GOTO 10
         END
      END
      READ NO.PROCESS FROM F.TABLES,'NO-PROCESS*FEDEX.GROUND' THEN
         IF MOD(DATE(),7) >2 THEN
            IF CLIENT='00392' OR CLIENT='00614' OR CLIENT='00760' OR CLIENT='00761' OR CLIENT='00839' OR CLIENT='00850' OR CLIENT='00861' OR CLIENT='00883' OR CLIENT='00888' OR CLIENT='00889' OR CLIENT='00902' OR CLIENT='00913' OR CLIENT='00917' OR CLIENT='00918' OR CLIENT='00919' OR CLIENT='00928' OR CLIENT='00929' OR CLIENT='00933' OR CLIENT='00935' OR CLIENT='00938' OR CLIENT='00946' OR CLIENT='00978' OR CLIENT='00981' OR CLIENT='00982' OR CLIENT='01015' OR CLIENT='01020' OR CLIENT='01024' OR CLIENT='01026' OR CLIENT='01028' OR CLIENT='01029' OR CLIENT='01038' OR CLIENT='01043' OR CLIENT='01044' OR CLIENT='01045' OR CLIENT='01056' OR CLIENT='01063' OR CLIENT='01085' OR CLIENT='01087' OR CLIENT='01088' OR CLIENT='01095' OR CLIENT='01102' OR CLIENT='01114' OR CLIENT='01132' OR CLIENT='01148' OR CLIENT='01152' OR CLIENT='01161' OR CLIENT='01164' OR CLIENT='01166' OR CLIENT='01179' OR CLIENT='01190' OR CLIENT='01223' OR CLIENT='01241' OR CLIENT='01251' OR CLIENT='01255' OR CLIENT='01256' OR CLIENT='01258' OR CLIENT='01264' OR CLIENT='01270' OR CLIENT='01274' OR CLIENT='01283' OR CLIENT='01292' OR CLIENT='01309' OR CLIENT='01349' OR CLIENT='01351' OR CLIENT='01352' OR CLIENT='01357' OR CLIENT='01361' OR CLIENT='01371' OR CLIENT='01380' OR CLIENT='01381' OR CLIENT='01384' OR CLIENT='01385' OR CLIENT='01392' OR CLIENT='01396' OR CLIENT='01398' OR CLIENT='01401' OR CLIENT='01408' OR CLIENT='01433' OR CLIENT='01436' OR CLIENT='01441' OR CLIENT='01442' OR CLIENT='01443' OR CLIENT='01448' OR CLIENT='01456' OR CLIENT='01458' OR CLIENT='01472' OR CLIENT='01475' OR CLIENT='01478' OR CLIENT='01479' OR CLIENT='01480' OR CLIENT='01481' OR CLIENT='01485' OR CLIENT='01487' OR CLIENT='01491' OR CLIENT='01493' OR CLIENT='01505' OR CLIENT='01511' OR CLIENT='01515' OR CLIENT='01522' OR CLIENT='01525' OR CLIENT='01529' OR CLIENT='01533' OR CLIENT='01539' OR CLIENT='01545' OR CLIENT='01554' OR CLIENT='01567' OR CLIENT='01576' OR CLIENT='01577' OR CLIENT='01582' OR CLIENT='01600' OR CLIENT='01614' OR CLIENT='01627' OR CLIENT='01628' OR CLIENT='01638' OR CLIENT='01644' OR CLIENT='01651' OR CLIENT='01656' OR CLIENT='01661' OR CLIENT='01677' OR CLIENT='01697' OR CLIENT='01700' OR CLIENT='01704' OR CLIENT='01730' OR CLIENT='01733' OR CLIENT='01747' OR CLIENT='01753' OR CLIENT='01759' OR CLIENT='01777' OR CLIENT='10225' OR CLIENT='10272' OR CLIENT='10298' OR CLIENT='10356' THEN
               CALL ELINE(NO.PROCESS<1>)
               GOSUB UPDATE.PROGRESS.REC           ; * NPR09
               GOTO 10
            END
         END
      END
      IF CLIENT='10356' THEN             ; * JMK100
         CALL ELINE('Has Accounting posted AR yet?')         ; * JMK100
      END                                ; * JMK100
      ORIG.CLIENT.REC=CLIENT.REC

      HIN = CLIENT.REC<240> ; HOUT = ""  ; * NPR04  Highlight based on ranking
      CALL CLIENT.HL(HIN,HOUT) ; HLB = HOUT<1,1> ; HLA = HOUT<1,2>     ; * NPR04

      CRT @(30,3):HLB:CLIENT.REC<2>:HLA:@(-4):     ; * NPR04
      IF CLIENT.REC<82>=DATE() THEN
         CALL ELINE('This Client has already been processed for today.')
         GOSUB UPDATE.PROGRESS.REC       ; * NPR09
         GOTO 10
      END
*
* DRF02 The following 23 lines are for verification of inactive clients
* C20061207003 DRF 02/27/07
*
      IF CLIENT.REC<30>='I' OR CLIENT.REC<30>='O' THEN
*
* Verify selection criteria is correct.
*
VERIFY.CLIENT:***
         CRT @(0,20):"Client is not active. Type [I-UNDERSTAND] to process this inactive client"
         HELP="X=Change. EX=Exit. [I-UNDERSTAND]=Continue."
         CALL GEN.IN(0,22,'Enter selection please. ------------','',Q,0,12,'','',0,-12,22,1,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='X'
               CRT @(0,19):@(-3):
               GOSUB UPDATE.PROGRESS.REC           ; * NPR09
               GOTO 10
            CASE QI='EX'
               STOP
            CASE QI='I-UNDERSTAND'
               NULL
            CASE 1
               CALL ELINE('Invalid entry. Must be [X], [EX], or [I-UNDERSTAND].')
               GOTO VERIFY.CLIENT
         END CASE
         CRT @(0,22)
      END

      INV.LVL=''
      IF CLIENT.REC<231>='Y' THEN INV.LVL='D'      ; * JMK88

      DIVISION=CLIENT.REC<12>
      EXPENSE=CLIENT.REC<13>
      VARIANCE=CLIENT.REC<7>
      LOGISTICS = CLIENT.REC<93>
      CLIENT.BANK=CLIENT.REC<81>         ; * JMK90
      CLIENT.REC<37>=0
      VEND.FLAG = CLIENT.REC<20>
      CUST.FLAG = CLIENT.REC<21>
      MR.LTRS = CLIENT.REC<139>
      MR.EMAIL = CLIENT.REC<171>         ; * JMK04
      CL.PRE.DATE = CLIENT.REC<27>
      READ BANK.CTRL.REC FROM F.BANK.CTRL,CLIENT ELSE BANK.CTRL.REC=''           ; * JMK90
      IF CLIENT.REC<179>#'' THEN         ; * JMK23
TROUBLESHOOT.PROMPT:                     ; * JMK69
         HELP=CLIENT.REC<242>:" X=Back, EX=Stop [YES]=Continue."       ; * JMK69 ; * JMK106
         CALL GEN.IN(0,22,'Troubleshooting is currently active. Continue. ----','',Q,0,4,'','',0,-4,22,1,QI,HELP,0,23)   ; * JMK69 ; * JMK97 ; * JMK106
         QI=OCONV(QI,'MCU')              ; * JMK69
         BEGIN CASE                      ; * JMK69
            CASE QI='X' OR QI=''         ; * JMK69
               GOSUB UPDATE.PROGRESS.REC           ; * NPR09
               GOTO 10                   ; * JMK69
            CASE QI='EX'                 ; * JMK69
               STOP                      ; * JMK69
            CASE QI='YES'                ; * JMK69
               TESTING=1                 ; * JMK33
            CASE QI='ONCE' AND USER='MYRA'         ; * JMK97
               ONCE=1                    ; * JMK97
            CASE QI='ONCE' AND USER='MARY'         ; * JMK97
               ONCE=1                    ; * JMK97
            CASE 1                       ; * JMK69
               CALL ELINE('Invalid entry. Must be [X], [EX], or [YES].')         ; * JMK69
               GOTO TROUBLESHOOT.PROMPT  ; * JMK69
         END CASE                        ; * JMK69
      END                                ; * JMK23
      IF CLIENT.BANK='' THEN             ; * JMK90
         CALL ELINE("Cannot process, no bank code has been set.")
         GOTO 9999
      END
*
* Check the A/R Bridge - If exists, "poke the user in the eye" and
* request client again.
*
      OPEN '','AR-BRIDGE' TO F.BDG THEN  ; * JMK97
         BRIDGE.ID=CLIENT                ; * JMK97
         IF TESTING THEN BRIDGE.ID=CLIENT:'-TEST'  ; * JMK97
         READ DUMMY FROM F.BDG,BRIDGE.ID THEN      ; * JMK97
            IF FIELD(BRIDGE.ID,'-',2)='TEST' THEN  ; * JMK97
               CALL ELINE('Error! Must unprocess first while in testing or troubleshooting mode!')   ; * JMK97
            END ELSE                     ; * JMK97
               CALL ELINE('Error! Can not process until A/R from client ':CLIENT:' is posted!')      ; * JMK97
            END                          ; * JMK97
            GOSUB UPDATE.PROGRESS.REC    ; * NPR09
            GOTO 10                      ; * JMK97
         END ELSE                        ; * JMK97
            BRIDGE.INFO=''               ; * JMK97
            BRIDGE.INFO<15>=USER         ; * JMK97
            BRIDGE.INFO<16>=DATE()       ; * JMK97
            BRIDGE.INFO<17>=TIME()       ; * JMK97
*
* This information is be put after the question about the troubleshooting
* question so if they X or EX this record is not sit out there. DRF 12/12/06
*
            AR.BRIDGE.FLAG=1             ; * JMK97
         END                             ; * JMK97
      END                                ; * JMK97
      IF CLIENT[1,2] # '99' THEN
         WRITE BRIDGE.INFO ON F.BDG,BRIDGE.ID      ; * JMK65
      END
      EBILL.CLIENT=0                     ; * DRF01
      READ DUMMY FROM F.UPS.BM,CLIENT THEN         ; * DRF01
         EBILL.CLIENT=1                  ; * DRF01
      END                                ; * DRF01
      READ DUMMY FROM F.UPS.BM,CLIENT:'-I' THEN    ; * DRF01
         EBILL.CLIENT=1                  ; * DRF01
      END                                ; * DRF01
      READ DUMMY FROM F.UPS.BM,CLIENT:'-O' THEN    ; * DRF01
         EBILL.CLIENT=1                  ; * DRF01
      END                                ; * DRF01
      IF CLIENT=01071 THEN EBILL.CLIENT=0          ; * JMK74
      IF CLIENT=01448 THEN EBILL.CLIENT=0
      IF CLIENT=01653 THEN EBILL.CLIENT=0
      IF CLIENT=00972 THEN EBILL.CLIENT=0
      IF EBILL.CLIENT THEN               ; * DRF01
         EBILL.DATE=DATE()-(MOD(DATE(),7)+1)       ; * DRF01
         EBILL.DATE=OCONV(EBILL.DATE,'D2/')        ; * DRF01
         EBILL.DATE=EBILL.DATE[1,2]:EBILL.DATE[4,2]:EBILL.DATE[7,2]    ; * DRF01
         STMT = 'SSELECT FB.BILLS,':CLIENT:' BY 30'          ; * DRF01
         STMT:= ' WITH VERSION = "0" AND WITH 39 = "O"'      ; * DRF01
         STMT:=' AND WITH CARRIER# = "00041"'      ; * DRF01
         STMT:=' AND WITH @ID = "[':EBILL.DATE:'-]" '        ; * DRF01
         STMT:= ' SAMPLE 1'              ; * DRF01
         EXECUTE STMT CAPTURING OUTPUT   ; * DRF01
         IF @SELECTED < 1 THEN           ; * DRF01
            CALL ELINE('The Ebill Is Not On File For This Week')       ; * DRF01
            GOSUB UPDATE.PROGRESS.REC    ; * NPR09
            GOTO 10                      ; * DRF01
         END                             ; * DRF01
         LOOP                            ; * DRF01
            READNEXT ID ELSE ID=""       ; * DRF01
         UNTIL ID="" DO                  ; * DRF01
         REPEAT                          ; * DRF01
      END                                ; * DRF01
      IF CLIENT='00900' OR CLIENT='00801' OR CLIENT='00862' OR CLIENT='00892' OR CLIENT='00853' OR CLIENT='00961' OR CLIENT='00952' THEN
         VP.CLIENT='Y'
      END ELSE
         VP.CLIENT='N'
      END
*
* Open client files
*
      OPEN 'FB.BILLS.HIST,':CLIENT TO F.HIST ELSE
         CALL ELINE("Cannot open FB.BILLS.HIST,":CLIENT:" file!")
         GOTO 20
      END
      OPEN 'FB.BILLS,':CLIENT TO F.BILLS ELSE
         CALL ELINE("Cannot open FB.BILLS,":CLIENT:" file!")
         GOTO 20
      END
      IF CLIENT='10356' THEN             ; * JMK70
         OPEN 'FB.BILLS.SUMMARY,':CLIENT TO F.SUMM ELSE      ; * JMK70
            EXECUTE 'CREATE-FILE DATA FB.BILLS.SUMMARY,':CLIENT:' 1,1 11,1' CAPTURING OUTPUT         ; * JMK70
            OPEN '','FB.BILLS.SUMMARY,':CLIENT TO F.SUMM ELSE          ; * JMK70
               CALL ELINE("Cannot Create FB.BILLS.SUMMARY,":CLIENT)    ; * JMK70
               GOTO 20                   ; * JMK70
            END                          ; * JMK70
         END                             ; * JMK70
      END                                ; * JMK70
      OPEN '','FB.OPEN.DATE.XREF,':CLIENT TO F.OPEN.DATE.XREF ELSE
         EXECUTE 'CREATE-FILE DATA FB.OPEN.DATE.XREF,':CLIENT:' 3,1 503,1' CAPTURING OUTPUT
         OPEN '','FB.OPEN.DATE.XREF,':CLIENT TO F.OPEN.DATE.XREF ELSE
            CALL ELINE("Cannot Create FB.OPEN.DATE.XREF,":CLIENT)
            GOTO 10
         END
      END
      OPEN '','FB.PROC.DATE.XREF,':CLIENT TO F.PROC.DATE.XREF ELSE
         EXECUTE 'CREATE-FILE DATA FB.PROC.DATE.XREF,':CLIENT:' 3,1 503,1' CAPTURING OUTPUT
         OPEN '','FB.PROC.DATE.XREF,':CLIENT TO F.PROC.DATE.XREF ELSE
            CALL ELINE("Cannot Create FB.PROC.DATE.XREF,":CLIENT)
            GOTO 10
         END
      END
      IF CLIENT='00850' THEN             ; * Darling ; * JMK72
         OPEN '','FB.BOL.CRX,00850' TO F.BOL ELSE  ; * JMK72
            CALL OPEN.ABORT('FB.BOL.CRX,00850',PROG.NAME)    ; * JMK72
         END                             ; * JMK72
      END                                ; * JMK72
      IF CLIENT='01057' THEN             ; * H & K Dallas
         OPEN '','FB.BOL.CRX,01057' TO F.BOL ELSE
            CALL OPEN.ABORT('FB.BOL.CRX,01057',PROG.NAME)
         END
      END
      IF CLIENT='01344' THEN             ; * Swedish Match ; * JMK37
         OPEN '','FB.BOL.CRX,01344' TO F.BOL ELSE  ; * JMK37
            CALL OPEN.ABORT('FB.BOL.CRX,01344',PROG.NAME)    ; * JMK37
         END                             ; * JMK37
      END                                ; * JMK37
      IF CLIENT='01311' THEN             ; * Dietrich Industries ; * JMK47
         OPEN '','FB.BOL.CRX,01311' TO F.BOL ELSE  ; * JMK47
            CALL OPEN.ABORT('FB.BOL.CRX,01311',PROG.NAME)    ; * JMK47
         END                             ; * JMK47
      END                                ; * JMK47
      IF CLIENT='01433' THEN             ; * Darling ; * JMK72
         OPEN '','FB.BOL.CRX,01433' TO F.BOL ELSE  ; * JMK72
            CALL OPEN.ABORT('FB.BOL.CRX,01433',PROG.NAME)    ; * JMK72
         END                             ; * JMK72
      END                                ; * JMK72
      OPEN '','FB.BILLS.YTD' TO F.BILLS.YTD ELSE
         CALL ELINE("Cannot open FB.BILLS.YTD file!")
         GOTO 20
      END

      OPEN '','FB.BILLS.YTD,HISTORY' TO F.BILLS.YTD.HIST ELSE          ; * NPR11
         CALL ELINE("Cannot open FB.BILLS.YTD,HISTORY file!")          ; * NPR11
         GOTO 20                         ; * NPR11
      END                                ; * NPR11

      IF DIVISION='Y' THEN
         OPEN 'DIVISION.CODES,':CLIENT TO F.DIV ELSE
            CALL ELINE("Cannot open DIVISION.CODES,":CLIENT:" file!")
            GOTO 20
         END
*        IF CLIENT='01706' THEN          ; * JMK107 ; * JMK115
         IF CLIENT='01706' OR CLIENT='00866' THEN  ; * JMK107 ; * JMK115
            OPEN 'REGION.CODES,':CLIENT TO F.REG ELSE        ; * JMK107
               CALL ELINE("Cannot open REGION.CODES,":CLIENT:" file!")           ; * JMK107
               GOTO 20                   ; * JMK107
            END                          ; * JMK107
         END                             ; * JMK107
      END
      IF EXPENSE='Y' THEN
         OPEN '','EXPENSE.CODES,':CLIENT TO F.EXP ELSE
            CALL ELINE("Cannot open EXPENSE.CODES,":CLIENT:" file!")
            GOTO 20
         END
      END
      IF VARIANCE='Y' OR VARIANCE='A' THEN
         OPEN '','VARIANCE.CODES,':CLIENT TO F.VAR ELSE
            CALL ELINE("Cannot open VARIANCE.CODES,":CLIENT:" file!")
            GOTO 20
         END
      END
*     IF MR.LTRS='Y' THEN                ; * JMK04
      IF MR.LTRS='Y' OR MR.EMAIL='Y' THEN          ; * JMK04
         OPEN 'VEND.CUST,':CLIENT TO F.VC ELSE
            CALL ELINE("Cannot open VEND.CUST,":CLIENT:" file!")
            GOTO 20
         END
         OPEN 'FB.MISROUTES,':CLIENT TO F.MISROUTES ELSE
            EXECUTE 'CREATE-FILE DATA FB.MISROUTES,':CLIENT:' 1' CAPTURING OUTPUT
            OPEN 'FB.MISROUTES,':CLIENT TO F.MISROUTES ELSE
               CALL ELINE("Cannot open FB.MISROUTES,":CLIENT:" file!")
               GOTO 20
            END
         END
      END

*      OPEN 'FB.ORIGIN.YTD' TO F.YTD.ORIGIN ELSE
*        CALL ELINE('Cannot open FB.ORIGIN.YTD file!')
*        GOTO 20
*      END
*
      READ CLIENT.YTD FROM F.BILLS.YTD,CLIENT THEN
         ORIG.CLIENT.YTD=CLIENT.YTD
      END ELSE
         CLIENT.YTD=''
         ORIG.CLIENT.YTD='*NEW*'
      END
*
* Enter beginning date
*
30:   BEG.DATE=CLIENT.REC<82>+1
      IF BEG.DATE=1 THEN BEG.DATE=DATE()
      HELP='Enter beginning date of process period.'
      CALL GEN.IN(0,5,'Enter Beginning Date    ':BEG.DATE'D2/','DATE',Q,0,8,'','',1,-8,5,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='X' THEN
         CRT @(0,5):@(-4):
         GOTO 20
      END
      IF QI='EX' THEN GOTO 9999
      IF QI='' THEN Q=BEG.DATE
      BEG.DATE=Q
      CRT @(24,5):BEG.DATE'D2/'

*
* Enter ending date
*
40:   END.DATE=BEG.DATE+CLIENT.REC<38>-1
      IF END.DATE#DATE() THEN
         CALL ELINE("The calculated ending date and todays date don't match using todays date")
         END.DATE=DATE()
      END
      HELP='Enter ending date of process period.'
      CALL GEN.IN(0,7,'Enter Ending Date       ':END.DATE'D2/','DATE',Q,0,8,'','',0,-8,7,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='X' THEN
         CRT @(0,7):@(-4):
         GOTO 30
      END
      IF QI='EX' THEN GOTO 9999
      IF QI='' THEN Q=END.DATE
      END.DATE=Q
      CRT @(24,7):END.DATE'D2/'
      IF DATE() # ICONV('11/06/97','D') AND END.DATE > DATE() THEN
         CALL ELINE("Date cannot be greater than today's date.")
         GOTO 40
      END
      IF END.DATE-1 > DATE() THEN
         CALL ELINE("Date cannot be greater than tomorrow's date.")
         GOTO 40
      END

      DAYS=END.DATE-BEG.DATE+1
      IF DAYS LT 1 ! DAYS GT 366 THEN
         CALL ELINE('Invalid processing period!')
         GOTO 40
      END
*
* Verify input data is correct
*
50:   HELP='Enter N to reenter data. EX=Exit.'
      CALL GEN.IN(0,22,'Is the information correct? Y ','',ACK,0,2,'','',1,-2,22,0,QI,HELP,0,23)
      ACK=OCONV(ACK,'MCU')
*NPR09      IF ACK='N' THEN GOTO 10
      IF ACK='N' THEN                    ; * NPR09
         GOSUB UPDATE.PROGRESS.REC       ; * NPR09
         GOTO 10                         ; * NPR09
      END                                ; * NPR09
      IF ACK='EX' THEN GOTO 9999
      IF ACK='' ! ACK='Y' ELSE GOTO 50

*NPR010 Start Changes

      TIMEX = TIME()
**      CRT @(46,3): STR("*",7) :"> ": OCONV(TIMEX,"MTS") :" <": STR("*",7)
**      CRT @(46,4): "*" :" PERFORMING VALIDATIONS ": "*"
**      CRT @(46,5):STR("*",26)

*NPR010 End Changes
*
* Make sure there is data to be processed
*
      STMT = 'SSELECT FB.BILLS,':CLIENT:' BY 30'
      STMT:= ' WITH VERSION = "0" AND WITH 39 # "R"'
*     IF DUE.DT.FLG='Y' THEN             ; * JMK21 ; * JMK25
*     IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) THEN    ; * JMK21 ; * JMK25; * JMK40
      IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) OR DUE.DT.FLG='C' THEN      ; * JMK21 ; * JMK25; * JMK40
*        STMT:=' AND WITH 38 <= ':END.DATE         ; * JMK21 ; * JMK58
         STMT:=' AND WITH 38 <= "':OCONV(END.DATE,'D2/'):'"'           ; * JMK21 ; * JMK58
      END                                ; * JMK21
*
* Include Rejected bills that were not yet 'processed'
* BUT exclude the 'old' reject bills that do not have
* carrier charges or bill dates...
*
*     STMT:= ' OR WITH VERSION = "0" AND WITH 39 = "R" AND WITH 67 = ""'         ; * JMK27
*     STMT:= ' AND WITH 7 # "" AND WITH 1 # ""'    ; * JMK27
*     IF DUE.DT.FLG='Y' THEN             ; * JMK21 ; * JMK25
*     IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) THEN    ; * JMK21 ; * JMK25; * JMK27
*        STMT:=' AND WITH 38 <= ':END.DATE         ; * JMK21; * JMK27
*     END                                ; * JMK21; * JMK27
      STMT:= ' SAMPLE 1'
      EXECUTE STMT CAPTURING OUTPUT
      IF SYSTEM(11) ELSE
         CALL ELINE('There Are No Bills in the file to Process!')
         GOSUB UPDATE.PROGRESS.REC       ; * NPR09
         GOTO 10
      END
      IF CLIENT='01305' OR CLIENT='01309' OR CLIENT='01317' OR CLIENT='01328' OR CLIENT='01320' OR CLIENT='01321' OR CLIENT='01352' THEN
         SUBJ='Account Processed for Client ':CLIENT:'-':CLIENT.REC<2>
         TEXT=USER:' has processed account '
         TEXT=TEXT:'Client: ':CLIENT:'-':CLIENT.REC<2>
         MVIN=''
         MVIN<1>='DCurtis@afs.net'
         MVIN<1,-1>='SLong@afs.net'
*df         MVIN<2>='DFriend@afs.net'
         MVIN<4>='AFS'
         MVIN<5>=SUBJ
         MVIN<6>=TEXT
         CALL SENDMAIL(MVIN,MVOUT)
      END
*
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

*     READ DATES.REC FROM F.UP,'PROCESS.DATES' ELSE DATES.REC=''       ; * JMK15
      PRV.PROC.DT=CLIENT.REC<82>         ; * JMK49
      CUR.PROC.DT=END.DATE               ; * JMK49

      PRV.BILL.CNT = 0                   ; * NPR10
      PRV.BILL.TOT.AMT = ' '             ; * NPR10
      DPOS = ''
      LOCATE PRV.PROC.DT IN CLIENT.YTD<40> SETTING DPOS THEN           ; * NPR10
         PRV.BILL.CNT = CLIENT.YTD<82,DPOS>        ; * NPR10
         PRV.BILL.TOT.AMT = CLIENT.YTD<83,DPOS>    ; * NPR10
      END ELSE                           ; * NPR10
         PRV.STMT = 'SELECT FB.UNPROCESS,':CLIENT  ; * JMK15
         PRV.STMT:= ' WITH FILE.NAME = "FB.BILLS,':CLIENT:'"'          ; * JMK15
         EXECUTE PRV.STMT CAPTURING OUTPUT         ; * JMK15
         PRV.BILL.CNT=@SELECTED          ; * JMK15
      END                                ; * NPR10


*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

*     BDATEO=OCONV(DATES.REC<1>,'D2-')   ; * JMK15
*     EDATEO=OCONV(DATES.REC<2>,'D2-')   ; * JMK15
*     PRV.BDATE=BDATEO[7,2]:BDATEO[1,2]:BDATEO[4,2]          ; * JMK15
*     PRV.EDATE=EDATEO[7,2]:EDATEO[1,2]:EDATEO[4,2]          ; * JMK15
*     PRV.PROC.ID=CLIENT:'-':PRV.BDATE:'-':PRV.EDATE:'-SOC.TXT'        ; * JMK15
*     READ PRV.PROC.REC FROM F.EMAILDATA,PRV.PROC.ID ELSE PRV.PROC.REC=''        ; * JMK15
*     PRV.BILL.LINE=TRIM(PRV.PROC.REC<17>)         ; * JMK15
*     PRV.BILL.CNT=FIELD(PRV.BILL.LINE,' ',5)      ; * JMK15
*     PRV.BILL.CNT=CHANGE(PRV.BILL.CNT,',','')     ; * Remove commas from the number - DRF 5/18/04

      CUR.STMT = 'SELECT FB.BILLS,':CLIENT         ; * JMK15

*NPR10      CUR.STMT := ' WITH 39 = "O"'              ; * JMK15

      CUR.STMT.SELECT = ' WITH 39 = "O"'

      IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) OR DUE.DT.FLG='C' THEN      ; * JMK21 ; * JMK25; * JMK40
         CUR.STMT.SELECT :=' AND WITH 38 <= "':OCONV(END.DATE,'D2/'):'"'         ; * JMK21 ; * JMK58
      END                                ; * JMK21
      IF OCONV(END.DATE,'D2/') = '11/11/04' THEN
         CUR.STMT.SELECT :=' AND WITH 30 LE "':OCONV(END.DATE,'D2/'):'" '
      END
      CUR.STMT.SELECT := ' OR WITH 30 GE "':OCONV(BEG.DATE,'D2/'):'" AND WITH 30 LE "':OCONV(END.DATE,'D2/'):'"'         ; * JMK15
      CUR.STMT.SELECT := ' AND WITH 39 = "R" AND WITH 67 = ""'         ; * JMK15
      CUR.STMT.SELECT := ' AND WITH 7 # "" AND WITH 1 # ""'  ; * JMK15

      IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) OR DUE.DT.FLG='C' THEN      ; * JMK21 ; * JMK25; * JMK40
         CUR.STMT.SELECT :=' AND WITH 38 <= "':OCONV(END.DATE,'D2/'):'"'         ; * JMK21 ; * JMK58
      END                                ; * JMK21

      CUR.STMT = 'SELECT FB.BILLS,':CLIENT:' ':CUR.STMT.SELECT         ; * NPR10

      CUR.STMT.SUM = 'SUM FB.BILLS,':CLIENT:' ':CUR.STMT.SELECT        ; * NPR10  ** Determine total 'Actual Charge'
      CUR.STMT.SUM :=' BIG.8'            ; * NPR10

      EXECUTE CUR.STMT.SUM CAPTURING OUTPUT        ; * NPR10
      CUR.BILL.CNT=@SELECTED             ; * NPR10

*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*NPR10 Start Changes

      CUR.BILL.TOT.AMT = 0

      FOR II = 1 TO 10
         W.LINE = TRIM(OUTPUT<II>)
         IF INDEX(W.LINE,"TOTALS",1) THEN
            CUR.BILL.TOT.AMT = FIELD(W.LINE," ",2)
            CONVERT "," TO "" IN CUR.BILL.TOT.AMT
            CONVERT "." TO "" IN CUR.BILL.TOT.AMT
         END
      NEXT II

      EXECUTE CUR.STMT CAPTURING OUTPUT  ; * NPR10   ;*09/15/09 This may be redundant if the select is only to determine the number of records to be processed

*NPR10 End Changes
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

      BILL.VAR=ABS(PRV.BILL.CNT-CUR.BILL.CNT)      ; * JMK15
      IF PRV.BILL.CNT+0=0 THEN           ; * JMK52
         VAR.PCT=0                       ; * JMK52
      END ELSE                           ; * JMK52
         VAR.PCT=BILL.VAR/PRV.BILL.CNT*100         ; * JMK15
      END                                ; * JMK52

*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*NPR10 Start Changes

      VARIANCE.FLAG = 0
      PRV.BILL.CNT = 0
      PRV.BILL.TOT.AMT = 0
      CNT.VAR.PCT = 0
      BILL.TOT.AMT.VAR.PCT = 0
      CNT.VAR.PCT.AVE = 0
      BILL.TOT.AMT.VAR.PCT.AVE = 0

      IF ORIG.CLIENT.YTD NE '*NEW*' THEN
         VVIN = CLIENT.YTD<40>           ; * Multi value of prior Process dates for the year so far
         VVIN<2> = CLIENT.YTD<82>        ; * Multi value of bill count per Process date for the year so far
         VVIN<3> = CLIENT.YTD<83>        ; * Multi value of total bill charges per Process dates for the year so far

         VVIN<4> = CUR.BILL.CNT
         VVIN<5> = CUR.BILL.TOT.AMT

         VVIN<6> = CLIENT:" - ":CLIENT.REC<2>
         VVIN<7> = MAX.BILL.VAR.PCT

         VVOUT = ""

         CALL BILL.VARIANCE.NOTIFY(VVIN,VVOUT)
         VARIANCE.FLAG = VVOUT<1>

         PRV.BILL.CNT = VVOUT<2>
         PRV.BILL.TOT.AMT = VVOUT<3>
         CNT.VAR.PCT = VVOUT<4>
         BILL.TOT.AMT.VAR.PCT = VVOUT<5>
         CNT.VAR.PCT.AVE = VVOUT<6>
         BILL.TOT.AMT.VAR.PCT.AVE = VVOUT<7>
      END

      VAR.PCT= CNT.VAR.PCT

*NPR10 End Changes
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*** IF USER = "NPRATT" THEN DEBUG

      IF VAR.PCT > MAX.BILL.VAR.PCT THEN           ; * JMK15

* NPR10      IF VAR.PCT > MAX.BILL.VAR.PCT OR VARIANCE.FLAG THEN           ; * JMK15  ;* NPR10

VERIFY.SELECTION:***; * JMK15
         CRT @(0,21):"Bill count. Prev=":PRV.BILL.CNT:". Curr=":CUR.BILL.CNT:"."           ; * JMK15

* NPR10         CRT @(0,21):"Variances compared to prior processing weeks in excess of ":MAX.BILL.VAR.PCT:" % detected"
* NPR10         HELP="Are you sure? X=Change Client. EX=Exit. [YES]=Continue."          ; * JMK15
         HELP="Are you sure you wish to Continue? X=Change Client. EX=Exit. [YES]=Continue."         ; * NPR10
         CALL GEN.IN(0,22,'Possible missing bills. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)       ; * JMK15

         CRT @(0,15):@(-3)               ; * NPR10

         QI=OCONV(QI,'MCU')              ; * JMK15
         BEGIN CASE                      ; * JMK15
            CASE QI='X' OR QI=''         ; * JMK15
               CRT @(0,21):@(-3):        ; * JMK15
               IF AR.BRIDGE.FLAG THEN    ; * JMK15
                  READ TBR.INFO FROM F.BDG,BRIDGE.ID THEN    ; * JMK15
                     IF TBR.INFO=BRIDGE.INFO THEN  ; * JMK15
                        DELETE F.BDG,BRIDGE.ID     ; * JMK15
                        AR.BRIDGE.FLAG=0           ; * JMK15
                     END                 ; * JMK15
                  END                    ; * JMK15
               END                       ; * JMK15
               GOSUB UPDATE.PROGRESS.REC           ; * NPR09
               GOTO 10                   ; * JMK15
            CASE QI='EX'                 ; * JMK15
               IF AR.BRIDGE.FLAG THEN    ; * JMK15
                  READ TBR.INFO FROM F.BDG,BRIDGE.ID THEN    ; * JMK15
                     IF TBR.INFO=BRIDGE.INFO THEN  ; * JMK15
                        DELETE F.BDG,BRIDGE.ID     ; * JMK15
                        AR.BRIDGE.FLAG=0           ; * JMK15
                     END                 ; * JMK15
                  END                    ; * JMK15
               END                       ; * JMK15
* NPR09               STOP                      ; * JMK15
               GOTO 9999                 ; * NPR09
            CASE QI='YES'                ; * JMK15
               NULL                      ; * JMK15
               SUBJ='FB Period Processing Variance Alert'    ; * JMK49
               TEXT=USER:' ran the process program on ':DATE()'D2/':' at ':OCONV(TIME(),'MTHS'):' for client '
               TEXT:=CLIENT:' - ':CLIENT.REC<2>:', which contained a bill variance exceeding ':MAX.BILL.VAR.PCT:'%.'     ; * JMK49
               TEXT<1,-1>=' '            ; * JMK49
               TEXT<1,-1>='Process on ':PRV.PROC.DT'D2/':' ':PRV.BILL.CNT'R,#7':' Bills.'  ; * JMK49
               TEXT<1,-1>='Process on ':CUR.PROC.DT'D2/':' ':CUR.BILL.CNT'R,#7':' Bills.'  ; * JMK49
               TEXT<1,-1>=' '            ; * JMK49
               TEXT<1,-1>='Difference of        '  ; * JMK49
               IF CUR.BILL.CNT > PRV.BILL.CNT THEN           ; * JMK49
                  TEXT:='+':VAR.PCT'R24':'%'       ; * JMK49
               END ELSE                  ; * JMK49
                  TEXT:='-':VAR.PCT'R24':'%'       ; * JMK49
               END                       ; * JMK49
               MVIN=''                   ; * JMK49
               MVIN<1,-1>='MMcKay@afs.net'         ; * JMK49
*              MVIN<2,-1>='KGilbert@afs.net'        ; * JMK49
               MVIN<4>='AFS'             ; * JMK49
               MVIN<5>=SUBJ              ; * JMK49
               MVIN<6>=TEXT              ; * JMK49

               CALL SENDMAIL(MVIN,MVOUT)           ; * JMK49

            CASE 1                       ; * JMK15
               CALL ELINE('Invalid entry. Must be [X], [EX], or [YES].')         ; * JMK15
               GOTO VERIFY.SELECTION     ; * JMK15
         END CASE                        ; * JMK15
         CRT @(0,21):@(-3):              ; * JMK15
      END                                ; * JMK15

* Start EDI Count for process warning    ; * JMK78
*     EDI.STMT=''                        ; * JMK78 ; * JMK80
*     EDI.STMT<1>='QSELECT EDI.XREF "':CLIENT:'"'  ; * JMK78 ; * JMK80
*     EDI.STMT<2>='SELECT EDI.BILLS WITH CLIENT# = "':CLIENT:'" AND WITH ENTRY.DT < "':OCONV(BEG.DATE,'D'):'"' ; * JMK78 ; * JMK80
*     EXECUTE EDI.STMT RTNLIST EDI.LIST CAPTURING RESULTS    ; * JMK78 ; * JMK80
      EDI.STMT='QSELECT EDI.XREF "':CLIENT:'"'     ; * JMK78 ; * JMK80
      EXECUTE EDI.STMT RTNLIST EDI.NDX CAPTURING RESULTS     ; * JMK80
      EDI.NDX.CNT=@SELECTED              ; * JMK80
      IF EDI.NDX.CNT+0>0 THEN            ; * JMK80
         EDI.STMT='SELECT EDI.BILLS WITH CLIENT# = "':CLIENT:'" AND WITH ENTRY.DT < "':OCONV(BEG.DATE,'D'):'"'           ; * JMK78 ; * JMK80
         EXECUTE EDI.STMT PASSLIST EDI.NDX RTNLIST EDI.LIST CAPTURING RESULTS    ; * JMK78 ; * JMK80
         EDI.BILL.CNT=@SELECTED          ; * JMK78
         IF EDI.BILL.CNT+0>0 THEN        ; * JMK78
            CRT@(0,22):@(-4):            ; * JMK78
VERIFY.EDI.SELECTION:***; * JMK78
            HELP="Action? X=Change Client. EX=Exit. [YES]=Continue."   ; * JMK78
            CALL GEN.IN(0,22,EDI.BILL.CNT:' Pending EDI bills. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)     ; * JMK78
            QI=OCONV(QI,'MCU')           ; * JMK78
            BEGIN CASE                   ; * JMK78
               CASE QI='X' OR QI=''      ; * JMK78
                  IF AR.BRIDGE.FLAG THEN           ; * JMK78
                     READ TBR.INFO FROM F.BDG,BRIDGE.ID THEN           ; * JMK78
                        IF TBR.INFO=BRIDGE.INFO THEN         ; * JMK78
                           DELETE F.BDG,BRIDGE.ID  ; * JMK78
                           AR.BRIDGE.FLAG=0        ; * JMK78
                        END              ; * JMK78
                     END                 ; * JMK78
                  END                    ; * JMK78
                  GOSUB UPDATE.PROGRESS.REC        ; * NPR09
                  GOTO 10                ; * JMK78
               CASE QI='EX'              ; * JMK78
                  IF AR.BRIDGE.FLAG THEN           ; * JMK78
                     READ TBR.INFO FROM F.BDG,BRIDGE.ID THEN           ; * JMK78
                        IF TBR.INFO=BRIDGE.INFO THEN         ; * JMK78
                           DELETE F.BDG,BRIDGE.ID  ; * JMK78
                           AR.BRIDGE.FLAG=0        ; * JMK78
                        END              ; * JMK78
                     END                 ; * JMK78
                  END                    ; * JMK78
                  STOP                   ; * JMK78
               CASE QI='YES'             ; * JMK78
EDI.NOTIFICATION.EMAIL:*                 ; * JMK78
                  NULL                   ; * JMK78
                  SUBJ='FB Pending EDI Bills Alert'          ; * JMK78
                  TEXT=USER:' ran the process program on ':DATE()'D2/':' at ':OCONV(TIME(),'MTHS'):' for client '        ; * JMK78
                  TEXT:=CLIENT:' - ':CLIENT.REC<2>:', which contained a pending EDI bill count of ':EDI.BILL.CNT:'.'     ; * JMK78
                  TEXT<1,-1>=' '         ; * JMK78
                  TEXT<1,-1>='Program FB.TEH.JMK, Label EDI.NOTIFICATION.EMAIL'  ; * JMK78
                  TEXT<1,-1>=' '         ; * JMK78
                  MVIN=''                ; * JMK78
                  MVIN<1,-1>='MMcKay@afs.net'      ; * JMK78
                  MVIN<4>='AFS'          ; * JMK78
                  MVIN<5>=SUBJ           ; * JMK78
                  MVIN<6>=TEXT           ; * JMK78
                  CALL SENDMAIL(MVIN,MVOUT)        ; * JMK78
               CASE 1                    ; * JMK78
                  CALL ELINE('Invalid entry. Must be [X], [EX], or [YES].')      ; * JMK78
                  GOTO VERIFY.EDI.SELECTION        ; * JMK78
            END CASE                     ; * JMK78
         END                             ; * JMK78
      END                                ; * JMK80

* PROCESS NOTIFY SECTION                 ; * JMK79
      PN.VIN=''                          ; * JMK79
      PN.VIN<1>='FB.TEH.JMK'             ; * JMK79
      PN.VIN<2>=CLIENT                   ; * JMK79
      PN.VIN<3>=CLIENT.REC<2>            ; * JMK79
      PN.VIN<4>=END.DATE                 ; * JMK79
      PN.VIN<5>=USER                     ; * JMK79
      PN.VOUT=''                         ; * JMK79
      CALL FB.NOTIFY.SUB(PN.VIN,PN.VOUT,F.PN,F.PN.HIST)      ; * JMK79
      IF PN.VOUT<1>='X' THEN             ; * JMK79
         IF AR.BRIDGE.FLAG THEN          ; * JMK79
            READ TBR.INFO FROM F.BDG,BRIDGE.ID THEN          ; * JMK79
               IF TBR.INFO=BRIDGE.INFO THEN        ; * JMK79
                  DELETE F.BDG,BRIDGE.ID           ; * JMK79
                  AR.BRIDGE.FLAG=0       ; * JMK79
               END                       ; * JMK79
            END                          ; * JMK79
         END                             ; * JMK79
         GOSUB UPDATE.PROGRESS.REC       ; * NPR09
         GOTO 10                         ; * JMK79
      END                                ; * JMK79
      IF PN.VOUT<1>='EX' THEN            ; * JMK79
         IF AR.BRIDGE.FLAG THEN          ; * JMK79
            READ TBR.INFO FROM F.BDG,BRIDGE.ID THEN          ; * JMK79
               IF TBR.INFO=BRIDGE.INFO THEN        ; * JMK79
                  DELETE F.BDG,BRIDGE.ID           ; * JMK79
                  AR.BRIDGE.FLAG=0       ; * JMK79
               END                       ; * JMK79
            END                          ; * JMK79
         END                             ; * JMK79
         STOP                            ; * JMK79
      END                                ; * JMK79

      DONE=0
      LOOP UNTIL DONE=1 DO
         READNEXT ID ELSE DONE=1
      REPEAT


*
* Check for verification flags
*
      VERIFIED=0
      VERIFIED=1
*DF      FOR I=49 TO 63 UNTIL VERIFIED=1
*DF         IF CLIENT.REC<I>='Y' THEN VERIFIED=1
*DF      NEXT I

      IF VERIFIED THEN
100:     PREC='SSELECT FB.BILLS,':CLIENT:' BY PRO '
*DF        PREC=PREC:OCONV(BEG.DATE,'D2/'):'" AND WITH 30 LE "'
*DF        PREC=PREC:OCONV(END.DATE,'D2/'):'"'
*DF        PREC=PREC:' AND WITH 39 NE "V" AND WITH VERSION EQ "0"'
         PREC=PREC:' AND WITH 39 NE "O" AND WITH VERSION EQ "0"'
         PREC=PREC:' AND WITH 39 NE "R"'
         PREC=PREC:' AND WITH 39 NE "2" AND WITH 39 NE "3" AND WITH 39 NE "4" '
*        IF DUE.DT.FLG='Y' THEN             ; * JMK21 ; * JMK25
*        IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) THEN           ; * JMK21 ; * JMK25; * JMK40
         IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) OR DUE.DT.FLG='C' THEN   ; * JMK21 ; * JMK25; * JMK40
*           PREC:=' AND WITH 38 <= ':END.DATE         ; * JMK21 ; * JMK58
            PREC:=' AND WITH 38 <= "':OCONV(END.DATE,'D2/'):'"'        ; * JMK21 ; * JMK58
         END                             ; * JMK21
         EXECUTE PREC PASSLIST CAPTURING OUTPUT
         DISP.REC=''
         IF SYSTEM(11) THEN
            LOOP
               READNEXT ID ELSE ID=''
            UNTIL ID='' DO
               READ PRO FROM F.BILLS,ID THEN
                  DISP.REC<1,-1>=FIELD(ID,'*',1)
                  DISP.REC<2,-1>=FIELD(ID,'*',2)
                  DISP.REC<3,-1>=FIELD(ID,'*',3)
               END
            REPEAT
            BEG.LOC=1
            LOC=0
            MAX=DCOUNT(DISP.REC<1>,CHAR(253))
110:        TEXT="U N V E R I F I E D   P R O ' S"
            CALL CENTER(TEXT,80)
            CRT @(0,2):TEXT
            CRT @(0,3):' Line  Carrier  Pro Number           Version':@(-3)
            END.LOC=BEG.LOC+17
            LINE=3
            FOR LOC=BEG.LOC TO END.LOC UNTIL DISP.REC<1,LOC>=''
               LINE=LINE+1
               CRT @(0,LINE):LOC'R#5':' ':DISP.REC<1,LOC>'R#8':'  ':DISP.REC<2,LOC>'L#20':' ':DISP.REC<3,LOC>'R#7'
            NEXT LOC
            CALL ELINE('Press Return to Continue')
            GOTO 9999
            HELP="Enter line number of Pro to verify. ''=Next page. 'B'=Back. 'X'=Exit."
120:        CALL GEN.IN(0,22,"Enter line number of Pro ####",'',Q,0,4,'','',2,-4,22,1,QI,HELP,0,23)
            QI=OCONV(QI,'MCU')
            BEGIN CASE
               CASE QI=''
                  BEG.LOC=BEG.LOC+18
                  IF BEG.LOC GT MAX THEN BEG.LOC=1
                  GOTO 110
               CASE QI='X'
                  GOTO 9999
               CASE QI='B'
                  BEG.LOC=BEG.LOC-18
                  IF BEG.LOC LE 1 THEN BEG.LOC=1
                  GOTO 110
               CASE QI='T'
                  BEG.LOC=1
                  GOTO 110
               CASE Q GE BEG.LOC & Q LE END.LOC
                  SEL=Q
                  HELP="Enter V to verify or E to edit.'"
130:              CALL GEN.IN(0,22,"Enter verify or edit option. E",'',Q,0,1,'','',2,-1,22,1,QI,HELP,0,23)
                  QI=OCONV(QI,'MCU')
                  BEGIN CASE
                     CASE QI='V'
                        DATA CLIENT,DISP.REC<1,SEL>,DISP.REC<2,SEL>
                        EXECUTE 'FB.2.2'
                     CASE QI='E'
                        DATA CLIENT,DISP.REC<1,SEL>,DISP.REC<2,SEL>,'C'
                        EXECUTE 'FB.2.1.MR'
                     CASE 1
                        GOTO 130
                  END CASE
                  GOTO 100
            END CASE
            GOTO 120
            CALL AFS.SCR.HEAD('','','',PROG.NAME,PROG.DESC,PACK.NAME,"AFS Logistics, LLC",TIME.DATE,1)
         END
      END

*
* START CAPTURE OF TIMING INFORMATION ; * JMK82
*
      BENCH.PGM=PROG.NAME                ; * JMK82
      BENCH.GRP=CLIENT                   ; * JMK82
      BENCH.BDATE=DATE()                 ; * JMK82
      BENCH.BTIME=TIME()                 ; * JMK82
      BENCH.USER=USER                    ; * JMK82

      READU FP.PROC.REC FROM F.TABLES,'FP_PROCESS' ELSE FP.PROC.REC=''           ; * JMK100
      LOCATE CLIENT IN FP.PROC.REC<1> BY 'AR' SETTING FPPOS THEN       ; * JMK100
         CALL ELINE(CLIENT:' is being processed by ':FP.PROC.REC<4,FPPOS>:' as of ':OCONV(FP.PROC.REC<3,FPPOS>,'MTHS'):' on ':FP.PROC.REC<2,FPPOS>'D2/':'.')     ; * JMK100
         GO 9999                         ; * JMK100
      END ELSE                           ; * JMK100
         INS CLIENT BEFORE FP.PROC.REC<1,FPPOS>    ; * JMK100
         INS DATE() BEFORE FP.PROC.REC<2,FPPOS>    ; * JMK100
         INS TIME() BEFORE FP.PROC.REC<3,FPPOS>    ; * JMK100
         INS USER BEFORE FP.PROC.REC<4,FPPOS>      ; * JMK100
         WRITE FP.PROC.REC ON F.TABLES,'FP_PROCESS'          ; * JMK100
      END                                ; * JMK100
      RELEASE F.TABLES,'FP_PROCESS'      ; * JMK100
*
* START CLEANUP SECTION FOR EMAIL.LOG FILE
*
      ELOG.STMT='SELECT EMAIL.LOG WITH CLIENT# = "':CLIENT:'" AND WITH DATE < "':BEG.DATE'D2/':'"'   ; * JMK103
      EXECUTE ELOG.STMT RTNLIST ELOG.LIST CAPTURING ELOG.RESULTS       ; * JMK103
      ELOG.TCNT=@SELECTED                ; * JMK103
      IF ELOG.TCNT > 0 THEN              ; * JMK103
         ELOG.EOF=0                      ; * JMK103
         ELOG.CNT=0                      ; * JMK103
         LOOP                            ; * JMK103
            READNEXT ELOG.ID FROM ELOG.LIST ELSE ELOG.EOF=1  ; * JMK103
         UNTIL ELOG.EOF DO               ; * JMK103
            ELOG.CNT+=1                  ; * JMK103
            DELETE F.EMAIL.LOG,ELOG.ID   ; * JMK103
         REPEAT                          ; * JMK103
      END                                ; * JMK103


      IF TIME()>=64800 THEN              ; * JMK85
         MVIN=''                         ; * JMK85
         SUBJ='Potential AR Balancing and FP Processing Conflict!!!'   ; * JMK85
         TEXT=USER:' ran the process program at ':OCONV(TIME(),'MTHS'):' .  '    ; * JMK85
         TEXT<1,-1>='This may have been done after the AR Balancing Review for ':OCONV(DATE(),'D2/')           ; * JMK85
*        TEXT<1,-1>=' was completed and may need to be applied to the AR Balancing Review for ':OCONV(DATE(),'D2/')      ; * JMK85 ; * JMK94
         TEXT<1,-1>=' was completed and may need to be applied to the AR Balancing Review for ':OCONV(DATE(),'D2/'):'.  '          ; * JMK85 ; * JMK94
         TEXT<1,-1>='This was done for ':CLIENT:' - ':CLIENT.REC<2>:'.'          ; * JMK94
         MVIN=''                         ; * JMK85
         MVIN<1>='Accounting@afs.net'    ; * JMK85
         MVIN<2>='HelpDesk@afs.net'      ; * JMK85
         MVIN<4>='AFS_FB.TEH.JMK@afs.net'          ; * JMK85
         MVIN<5>=SUBJ                    ; * JMK85
         MVIN<6>=TEXT                    ; * JMK85
         MVIN<7>=1                       ; * JMK85
         CALL SENDMAIL(MVIN,MVOUT)       ; * JMK85
      END                                ; * JMK85

      DVIN=''                            ; * JMK86
      DVOUT=''                           ; * JMK86
      DVIN<1>=DATE()-1                   ; * JMK86
      TEST.BEG.DATE=''                   ; * JMK86
      CALL NEXT.BUSINESS.DAY(TEST.BEG.DATE,TEST.NEXT.BUS.DATE,DSTATUS,DVIN,DVOUT)          ; * JMK86
      IF DATE()#DVOUT<1> THEN            ; * JMK86
         MVIN=''                         ; * JMK85
         SUBJ='Potential AR Balancing and FP Processing Conflict!!!'   ; * JMK86
         TEXT=USER:' ran the process program on ':DATE()'D2/':' at ':OCONV(TIME(),'MTHS'):'.  '      ; * JMK86
         TEXT<1,-1>='This may have been done after the AR Balancing Review for the last business day'          ; * JMK86
*        TEXT<1,-1>=' was completed and may need to be applied to the last AR Balancing Review'      ; * JMK86 ; * JMK94
         TEXT<1,-1>=' was completed and may need to be applied to the last AR Balancing Review.  '   ; * JMK86 ; * JMK94
         TEXT<1,-1>='This was done for ':CLIENT:' - ':CLIENT.REC<2>:'.'          ; * JMK94
         MVIN=''                         ; * JMK86
         MVIN<1>='Accounting@afs.net'    ; * JMK86
         MVIN<2>='HelpDesk@afs.net'      ; * JMK86
         MVIN<4>='AFS_FB.TEH.JMK@afs.net'          ; * JMK86
         MVIN<5>=SUBJ                    ; * JMK86
         MVIN<6>=TEXT                    ; * JMK86
         MVIN<7>=1                       ; * JMK86
         CALL SENDMAIL(MVIN,MVOUT)       ; * JMK86
      END                                ; * JMK86

*
* Check for beginning of year and clear year to date totals
*
      IF CLIENT.REC<82>+1=1 THEN
         CLEAR.BEG.DATE=BEG.DATE
      END ELSE
         CLEAR.BEG.DATE=CLIENT.REC<82>+1
      END
*
* Calculate fiscal year beginning date
*
      BEG.MONTH=OCONV(CLEAR.BEG.DATE,'DM')
      BEG.DAY=OCONV(CLEAR.BEG.DATE,'DD')
      BEG.YEAR=OCONV(CLEAR.BEG.DATE,'DY')
      FISC.MONTH=FIELD(CLIENT.REC<29>,'.',1)
      FISC.DAY=FIELD(CLIENT.REC<29>,'.',2)
      IF FISC.MONTH < 1 OR FISC.MONTH > 12 OR FISC.DAY < 1 OR FISC.DAY > 31 THEN
         CALL ELINE('Invalid Fisc Date :':CLIENT.REC<29>:' - Please setup in client maintenance')
         STOP
      END
      IF BEG.MONTH:BEG.DAY > FISC.MONTH:FISC.DAY THEN
         FISC.YEAR=(BEG.YEAR+1)'R%2'
      END ELSE
         FISC.YEAR=BEG.YEAR
      END
*      FYR.DATE=CLIENT.REC<29>:'.':END.YEAR
      FYR.DATE=FISC.MONTH:'.':FISC.DAY:'.':FISC.YEAR
      FYR.DATE=ICONV(FYR.DATE,'D2.')

*DF      IF BEG.DATE LE FYR.DATE AND END.DATE GE FYR.DATE THEN
      IF CLEAR.BEG.DATE LE FYR.DATE AND END.DATE GE FYR.DATE THEN
         CALL FB.YTD.CLEAR(CLIENT,ERROR)
         CLIENT.YTD=''
*NPR09         IF ERROR THEN GOTO 10
         IF ERROR THEN                   ; * NPR09
            GOSUB UPDATE.PROGRESS.REC    ; * NPR09
            GOTO 10
         END                             ; * NPR09
      END
      CLIENT.REC<82>=END.DATE

*     Create an Accrual Spreadsheet for Douglas Battery 00574 of their bills before processing
*     and email it to them.
      IF CLIENT='00574' THEN             ; * Douglas Battery; * JMK26 ; * JMK38
*DF     IF CLIENT.REC<198>='Y' THEN        ; * JMK26 ; * JMK38
*
* Removed from here Scott Traffic get a different special accrual file
* later in the program. DRF 12/13/06.
*
         INFO='' ; 
         INFO<1>=CLIENT ; INFO<2>='N'
         INFO<3>='ALL' ; INFO<4>='ALL'
         INFO<5>='1' ; INFO<6>=BEG.DATE
         INFO<7>=END.DATE ; INFO<8>=''
         INFO<9>='N' ; INFO<10>='N'
         INFO<11>='N' ; INFO<12>='N'
         INFO<13>=CLIENT.REC<134> ; INFO<14>='EMAIL'
         INFO<15>=0 ; INFO<16>='ALL'
         INFO<17>=CLIENT.REC<135> ; INFO<18>=1
         INFO<19>=CLIENT.REC<125> ; INFO<20>=''
         INFO<21>=USER ; INFO<22>=CH.NUM
         INFO<23>=0 ; INFO<24>=''
         INFO<25>='FROM FB.TEH.JMK'
         INFO<26>=1                      ; * JMK41
         INFOOUT=''
         CALL BUILD.DF.SUB(F.CLIENTS,F.CARRIERS,F.TRANSPORT,F.TABLES,F.EMAILDATA,INFO,INFOOUT)
         THERE.ARE.ATTACHMENTS=(INFOOUT#'')
         IF THERE.ARE.ATTACHMENTS THEN
            EMAIL.OUT=''

            EMAIL.OUT<1>=TRIM(CLIENT.REC<125>)     ; * To: Email addresses
            EMAIL.OUT<2>=TRIM(CLIENT.REC<126>)     ; * CC: Email addresses
            EMAIL.OUT<3>=TRIM(CLIENT.REC<127>)     ; * BCC: Email addresses
*           IF CLIENT.REC<179>#'' THEN   ; * JMK32 ; * JMK97
            IF CLIENT.REC<179>#'' AND ONCE=0 THEN  ; * JMK32 ; * JMK97
               EMAIL.OUT<1>=TRIM(CLIENT.REC<179>)  ; * JMK32
               EMAIL.OUT<2>=''           ; * JMK32
               EMAIL.OUT<3>=''           ; * JMK32
            END                          ; * JMK32

            EMAIL.OUT<4>='Reports@afs.net'         ; * From Email address
            EMAIL.OUT<5,1>=CLIENT'R%5':' - ':CLIENT.REC<2>   ; * Subject of Email
            EMAIL.OUT<5,1>:=' Accrual Spreadsheet'
            EMAIL.OUT<5,1>:=' ':BEG.DATE'D2/':' - ':END.DATE'D2/'

* Email body
            EMAIL.OUT<6,-1>='AFS Logistics, LLC.                                        Phone: 318.798.2111'
            EMAIL.OUT<6,-1>='330 Marshall Street, Suite 400                               FAX: 318.797.3628'
            EMAIL.OUT<6,-1>='Shreveport, LA 71101                                      WWW.AFSLogistics.Com'
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>='------------------------------------------------------------------------------'
            EMAIL.PATH='E:\ARDENT\PUBLIC\EMAILDATA\'

* Bills to be processed (Weekly Report or Body) created in BUILD.DF.SUB (attachment 1)
            EMAIL.FILENAME=INFOOUT<1>
            EMAIL.OUT<6,-1>='   Accrual Spreadsheet - All new bills keyed':SPACE(30-LEN(EMAIL.FILENAME)):EMAIL.FILENAME
            EMAIL.OUT<11,-1>=EMAIL.PATH:EMAIL.FILENAME

* Excel Macro to format and print bills (Weekly Report) (attachment 2)
*           EMAIL.FILENAME='EXCEL-MACRO.XLS'       ; * JMK109
*NPR07            EMAIL.FILENAME='NEW-EXCEL-MACRO.XLS'   ; * JMK109
*NPR07            EMAIL.OUT<6,-1>=' '
*NPR07            EMAIL.OUT<6,-1>='   Format/Print Bills Spreadsheet:          ':SPACE(30-LEN(EMAIL.FILENAME)):EMAIL.FILENAME
*NPR07            EMAIL.OUT<11,-1>='E:\ARDENT\PUBLIC\BILLDATA\FORMS\':EMAIL.FILENAME
*NPR07
*NPR07            EMAIL.OUT<6,-1>='------------------------------------------------------------------------------'
*NPR07            EMAIL.OUT<6,-1>='EXCEL-MACRO.XLS is an Excel Macro that will format and print the Accrual'
*NPR07            EMAIL.OUT<6,-1>='Spreadsheet.  If you want to use this macro, double click on its icon first'
*NPR07            EMAIL.OUT<6,-1>=' and then double click on the Accrual Spreadsheet icon.'

            EMAIL.OUT<6,-1>=' '

            EMAIL.OUT<6,-1>='If you have any questions, please call Myra Butts at 318.798.2111, ext. 232.'
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>='                         Thank You For Your Business'
            EMAIL.OUT<7>=1               ; * Auto format (add carriage returns to end of text)

*           IF CLIENT.REC<179>='' THEN   ; * JMK32 ; * JMK97
            IF CLIENT.REC<179>='' OR ONCE=1 THEN   ; * JMK32 ; * JMK97
* Add our email addresses to the list of addresses for record keeping
*              EMAIL.OUT<2,-1>='J-ames@afs.net'         ; * CC: Email addresses
            END                          ; * JMK32

* For testing and debugging only: Replace all email addresses with our email addresses
            IF USER='J-AMES' THEN
*              EMAIL.OUT<1>='J-ames@afs.net'         ; * To: Email addresses
               EMAIL.OUT<2>=''           ; * CC: Email addresses
               EMAIL.OUT<3>=''           ; * BCC: Email addresses
            END
            VIN=EMAIL.OUT
            CALL SENDMAIL(VIN,VOUT)
            IF VOUT<1>='ERROR' THEN
               GOSUB EMAIL.SENDING.FAILURE
            END
         END                             ; * IF THERE.ARE.ATTACHMENTS
      END                                ; * IF CLIENT='00574'
*                                        ; * JMK32
* SETUP DIVISION LIST                    ; * JMK32
*                                        ; * JMK32
*     STMT='SSELECT DIVISION.CODES,':CLIENT        ; * JMK32 ; * JMK75
      STMT='SSELECT DIVISION.CODES,':CLIENT:' WITH 7 # "I"'  ; * JMK32 ; * JMK75
      EXECUTE STMT CAPTURING RESULT      ; * JMK32
      EOF=0                              ; * JMK32
      LOOP                               ; * JMK32
         READNEXT DIV.ID ELSE EOF=1      ; * JMK32
      UNTIL EOF DO                       ; * JMK32
         DIV.LIST<1,-1>=DIV.ID           ; * JMK32
      REPEAT                             ; * JMK32

*
* Select bills to pay
*
      OPEN '','FB.UNPROCESS,':CLIENT TO F.UP ELSE
         EXECUTE 'CREATE-FILE DATA FB.UNPROCESS,':CLIENT:' 101,1' CAPTURING OUTPUT
         OPEN '','FB.UNPROCESS,':CLIENT TO F.UP ELSE
            CALL OPEN.ABORT('FB.UNPROCESS,':CLIENT,PROG.NAME)
         END
      END
      DOPEN.LIST=''
      DPROC.LIST=''
      CLEARFILE F.UP
      UP.ARRAY=ORIG.CLIENT.REC
      UP.ID='CLIENTS*':CLIENT ; GOSUB UPDATE.UP.FILE
*
      UP.ARRAY=BEG.DATE:@AM:END.DATE
      UP.ID='PROCESS.DATES' ; GOSUB UPDATE.UP.FILE
*
      UP.ARRAY=ORIG.CLIENT.YTD
      UP.ID='FB.BILLS.YTD*':CLIENT ; GOSUB UPDATE.UP.FILE
*
      STMT='SELECT UPSDATA WITH CLI.NUM = "':CLIENT:'" '
      EXECUTE STMT CAPTURING OUTPUT
      NUM.EBILL=@SELECTED
      IF NUM.EBILL#0 THEN
         DONE=0
         LOOP
            READNEXT EBILL.ID ELSE DONE=1
         UNTIL DONE
            READ UP.ARRAY FROM F.UPSDATA,EBILL.ID THEN
               UP.ID='UPSDATA*':EBILL.ID ; GOSUB UPDATE.UP.FILE
            END
         REPEAT
      END
      CRT @(0,22):'Now selecting FB.BILLS file.':@(-4):
      OLD.CARRIER='*****'
      PREV.CARRIER='*****'
      PREC ='SSELECT FB.BILLS,':CLIENT
*
* Select payable bills
*
*DF      PREC:=' WITH 30 GE "':OCONV(BEG.DATE,'D2/'):'" AND WITH 30 LE "':OCONV(END.DATE,'D2/'):'"'
*DF      PREC:=' AND WITH 39 # "R"'
      PREC:=' WITH 39 = "O"'
*     IF DUE.DT.FLG='Y' THEN             ; * JMK21 ; * JMK25
*     IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) THEN    ; * JMK21 ; * JMK25; * JMK40
      IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) OR DUE.DT.FLG='C' THEN      ; * JMK21 ; * JMK25; * JMK40
*        PREC:=' AND WITH 38 <= ':END.DATE         ; * JMK21 ; * JMK58
         PREC:=' AND WITH 38 <= "':OCONV(END.DATE,'D2/'):'"'           ; * JMK21 ; * JMK58
      END                                ; * JMK21
      IF OCONV(END.DATE,'D2/') = '11/11/04' THEN
         PREC:=' AND WITH 30 LE "':OCONV(END.DATE,'D2/'):'" '
      END
      IF VP.CLIENT='Y' THEN
***********************************************************************
**                                                                   **
**  If day of week is Tuesday (2) or Wednesday (3) then only process  **
**  bills with a ship date greater than or equal to 12/29/00         **
**  If day of week is Thursday (4) then only process bills with a    **
**  ship date less than or equal to 12/28/00                         **
**  If day of week is not Tuesday (2), Wednesday (3) or Thursday (4)  **
**  then give an error and go back up to client                      **
**                                                                   **
***********************************************************************
***********************************************************************
**                                                                   **
**  The above has been changed yet again so that instead of Monday   **
**  and Wednesday it will now get processed on Tuesday (2) - DRF     **
**  09/18/01                                                         **
***********************************************************************
         DAY.OF.WEEK=MOD(TODAY,7)
         BEGIN CASE
*DF          CASE DAY.OF.WEEK=1 OR DAY.OF.WEEK=3
            CASE DAY.OF.WEEK=2 OR DAY.OF.WEEK=3
               PREC := ' AND WITH 1 GE "12/29/00" '
            CASE DAY.OF.WEEK=4
               PREC := ' AND WITH 1 LE "12/28/00" '
            CASE 1
*DF            CALL ELINE('Today is not a Monday , Wednesday or Thursday. Cannot process a VP Client')
               CALL ELINE('Today is not a Tuesday or Thursday. Cannot process a VP Client')
               GOTO 20
         END CASE
      END
**
**  Changed to process all bills the same day - 01/09/02 Per Myra - I
**  think Phil told her
**
*DF      IF CLIENT='00907' THEN
*DF***********************************************************************
*DF**                                                                   **
*DF**  If day of week is Monday (1) then process only (00050) AAA       **
*DF**  Cooper bills otherwise process everything but (00050) AAA Cooper **
*DF**  bills                                                            **
*DF**                                                                   **
*DF***********************************************************************
*DF        DAY.OF.WEEK=MOD(TODAY,7)
*DF        IF DAY.OF.WEEK=1 THEN
*DF          PREC := ' AND WITH CARRIER# = "00050" '
*DF        END ELSE
*DF          PREC := ' AND WITH CARRIER# # "00050" '
*DF        END
*DF      END
      IF CLIENT='00574' THEN
***********************************************************************
**                                                                   **
**  For Douglas Battery include only bills with ship date 25 days    **
**  back from the ending date.                                       **
**                                                                   **
***********************************************************************
***********************************************************************
**                                                                   **
** Douglas Battery changed from 25 to 18 days per email from Owen    **
** DRF 11/12/03                                                      **
**                                                                   **
***********************************************************************
***********************************************************************
**                                                                   **
** Douglas Battery changed from 18 to 15 days per email from Owen    **
** DRF 01/04/07                                                      **
**                                                                   **
***********************************************************************
*DF         PREC := ' AND WITH 1 LE "':OCONV((END.DATE-25),'D2/'):'" '
*DF         PREC := ' AND WITH 1 LE "':OCONV((END.DATE-18),'D2/'):'" '
         PREC := ' AND WITH 1 LE "':OCONV((END.DATE-15),'D2/'):'" '
      END
*DF      IF CLIENT='00980' THEN
***********************************************************************
**                                                                   **
**  If day of week is Wednesday (3) or Thursday (4)) then process    **
**  everything except (00015) FedEx and (00041) UPS. If day of week  **
**  is Friday (5) or Monday (1) then process only FedEx (00015) and  **
**  UPS (00041)                                                      **
**                                                                   **
***********************************************************************
*DF         DAY.OF.WEEK=MOD(TODAY,7)
*DF         BEGIN CASE
*DF            CASE DAY.OF.WEEK=3 OR DAY.OF.WEEK=4
*DF               PREC := ' AND WITH CARRIER# # "00015" AND WITH CARRIER# # "00041" '
*DF            CASE DAY.OF.WEEK=5 OR DAY.OF.WEEK=1
*DF               PREC := ' AND WITH CARRIER# = "00015" "00041" '
*DF            CASE 1
*DF               CALL ELINE('Today is not a Wednesday, Thursday, Friday, or Monday. Cannot process ')
*DF               GOTO 20
*DF         END CASE
*DF      END
***********************************************************************
***                                                                 ***
***  Changed pre Myra on 12/27/02 as we no longer process FedEx and ***
***  UPS so the above code was commented out. DRF 12/27/02.         ***
***                                                                 ***
***********************************************************************
*
* Include Rejected bills that were not yet processed
* BUT exclude the old bills that do not have DATEs or AMOUNTs
*
      PREC:=' OR WITH 30 GE "':OCONV(BEG.DATE,'D2/'):'" AND WITH 30 LE "':OCONV(END.DATE,'D2/'):'"'
      PREC:=' AND WITH 39 = "R" AND WITH 67 = ""'
*DF      PREC:=' OR WITH 39 = "R" AND WITH 67 = ""'
      PREC:=' AND WITH 7 # "" AND WITH 1 # ""'
*     IF DUE.DT.FLG='Y' THEN             ; * JMK21 ; * JMK25
*     IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) THEN    ; * JMK21 ; * JMK25; * JMK40
      IF DUE.DT.FLG='Y' OR NUM(DUE.DT.FLG) OR DUE.DT.FLG='C' THEN      ; * JMK21 ; * JMK25; * JMK40
*        PREC:=' AND WITH 38 <= ':END.DATE         ; * JMK21 ; * JMK58
         PREC:=' AND WITH 38 <= "':OCONV(END.DATE,'D2/'):'"'           ; * JMK21 ; * JMK58
      END                                ; * JMK21
      IF OCONV(END.DATE,'D2/') = '11/11/04' THEN
         PREC:=' AND WITH 30 LE "':OCONV(END.DATE,'D2/'):'" '
      END
*DF      PREC:=' AND WITH 66 = "N"'

      PREC:=' BY CARRIER#'
      EXECUTE PREC PASSLIST CAPTURING OUTPUT
      NUM.ITMS = @SELECTED
      BENCH.NUM.REC=NUM.ITMS             ; * JMK82
      IF SYSTEM(11) ELSE GOTO 9999
      IF USER#'DAVID' & USER#'OWEN' & USER#'JIM' THEN BREAK OFF        ; ** Disable Break Key; * JMK04
      IF USER#'DAVID' & USER#'OWEN' & USER#'JIM' & USER#'MKERBOW' THEN BREAK OFF           ; ** Disable Break Key

*
* Init CURRENT counters..
*
      COUNTER=0
      EDI.COUNT=''
      EDI.COUNT.ARRAY=''
      EDI.COUNT.PARCEL.NON.FEDEX.AIR=''
      EDI.MD.FEDEX.GROUND.COUNT=''
      MIS.EMAIL.ARRAY=''                 ; * JMK04
      DUP.COUNT=0
      NEVERPAY.COUNT=0                   ; * Number of bills that will never be paid.
      HOLD.COUNT=0                       ; * Number of bills with payment on-hold.
      RELEASED.COUNT=0                   ; * Number of bills that were rejected by later paid.
      ANY.VOUCHER=0

*
* Get next bill item
*
1000: READNEXT BILL.ID ELSE GOTO 2000
      COUNTER=COUNTER+1
      CALL PROG.BAR(22,COUNTER,NUM.ITMS,PER)
      READ BILL.REC FROM F.BILLS,BILL.ID ELSE GOTO 1000

      ORIG.BILL.REC=BILL.REC             ; * JMK20
      ACTUAL.CHG=BILL.REC<8>             ; * JMK20
      ACTUAL.CHG.TOTAL += ACTUAL.CHG     ; * NPR10
      TRUE.COST=BILL.REC<8>+BILL.REC<44>           ; * JMK108
      SUM.DTL.CHG=SUM(BILL.REC<152>)     ; * JMK20
      IF ACTUAL.CHG=SUM.DTL.CHG THEN     ; * JMK20
         DTL.OUT=''                      ; * JMK20
         FRT.ARRAY=''                    ; * JMK20
         MIS.ARRAY=''                    ; * JMK20
         DTL.OUT<40>=BILL.REC<151>       ; * JMK20
         DTL.OUT<41>=BILL.REC<74>        ; * JMK20
         DTL.OUT<42>=BILL.REC<75>        ; * JMK20
         DTL.OUT<43>=BILL.REC<76>        ; * JMK20
         DTL.OUT<44>=BILL.REC<152>       ; * JMK20
         DTL.OUT<45>=BILL.REC<83>        ; * JMK20
         NVAL=DCOUNT(DTL.OUT<40>,@VM)    ; * JMK20
         FOR VAL=1 TO NVAL               ; * JMK20
            TRAN.TYPE=DTL.OUT<40,VAL>    ; * JMK20
            BEGIN CASE                   ; * JMK20
               CASE TRAN.TYPE='FRT'      ; * JMK20
                  NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1         ; * JMK20
                  FOR ATT=1 TO 6         ; * JMK20
                     FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>        ; * JMK20
                  NEXT ATT               ; * JMK20
               CASE TRAN.TYPE='MIN'      ; * JMK20
                  NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1         ; * JMK20
                  FOR ATT=1 TO 6         ; * JMK20
                     FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>        ; * JMK20
                  NEXT ATT               ; * JMK20
               CASE TRAN.TYPE='DEF'      ; * JMK20
                  NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1         ; * JMK20
                  FOR ATT=1 TO 6         ; * JMK20
                     FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>        ; * JMK20
                  NEXT ATT               ; * JMK20
               CASE 1                    ; * JMK20
                  LOCATE(TRAN.TYPE,MIS.ARRAY,1;MPOS) THEN    ; * JMK20
                     FOR ATT=5 TO 6      ; * JMK20
                        IF NUM(DTL.OUT<39+ATT,VAL>) THEN     ; * JMK20
                           MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0  ; * JMK20
                        END              ; * JMK20
                     NEXT ATT            ; * JMK20
                  END ELSE               ; * JMK20
                     NXT.VAL=DCOUNT(MIS.ARRAY<1>,@VM)+1      ; * JMK20
                     FOR ATT=1 TO 4      ; * JMK20
                        MIS.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>     ; * JMK20
                     NEXT ATT            ; * JMK20
                     FOR ATT=5 TO 6      ; * JMK20
                        IF NUM(DTL.OUT<39+ATT,VAL>) THEN     ; * JMK20
                           MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0  ; * JMK20
                        END              ; * JMK20
                     NEXT ATT            ; * JMK20
                  END                    ; * JMK20
            END CASE                     ; * JMK20
         NEXT VAL                        ; * JMK20
         FOR ATT=1 TO 6                  ; * JMK20
            BILL.REC<152+ATT>=FRT.ARRAY<ATT>       ; * JMK20
            BILL.REC<158+ATT>=MIS.ARRAY<ATT>       ; * JMK20
         NEXT ATT                        ; * JMK20
         IF BILL.REC#ORIG.BILL.REC THEN  ; * JMK20
            WRITE BILL.REC ON F.BILLS,BILL.ID      ; * JMK20
            WRITE BILL.REC ON F.HIST,BILL.ID       ; * JMK20
         END                             ; * JMK20
      END                                ; * JMK20
      UP.ARRAY=''                        ; ** Just Store the Key (The record is not needed)
*OH   UP.ARRAY=BILL.REC
      UP.ID='FB.BILLS,':CLIENT:'*':BILL.ID ; GOSUB UPDATE.UP.FILE

      WRITE '' ON F.WORK,BILL.ID
      CARRIER=FIELD(BILL.ID,'*',1)
      READV CARRIER.NAME FROM F.CARRIERS,CARRIER,1 ELSE CARRIER.NAME='**Uknown**'          ; * JMK04
      BANK=CLIENT.BANK                   ; * JMK90
      LOCATE CARRIER IN BANK.CTRL.REC<1> SETTING CPOS THEN   ; * JMK90
         BANK=BANK.CTRL.REC<10,CPOS>     ; * JMK90
      END                                ; * JMK90
      IF BANK='V' THEN ANY.VOUCHER=1
      PRO.NO=FIELD(BILL.ID,'*',2)
      PRO.LENGTH=LEN(PRO.NO)
      DUP=FIELD(BILL.ID,'*',3)

      IF BILL.REC<39>='R' AND BILL.REC<66>='' THEN
         LINE.OUT=''
         LINE.OUT<1,10>=123
         MVIN=''
         SUBJ='Rejected bill did not have a pay status'
         TEXT=USER:' ran the process program which contained a bill with'
         TEXT<1,-1>='a pay code of ':BILL.REC<39>:' and a pay status code of ':BILL.REC<66>
         TEXT<1,-1>='for bill ':BILL.ID:' for client ':CLIENT:' ':CLIENT.REC<2>
         MVIN=''
         MVIN<2>='DFriend@afs.net'
         MVIN<4>='AFS'
         MVIN<5>=SUBJ
         MVIN<6>=TEXT
         CALL SENDMAIL(MVIN,MVOUT)
         BILL.REC<66>='E'
         WRITE BILL.REC ON F.BILLS,BILL.ID
      END
      NEVERPAY.FLAG = (BILL.REC<66>='N' AND BILL.REC<39>='R')
      HOLD.FLAG = (BILL.REC<66>#'N' AND BILL.REC<39>='R')
      RELEASED.FLAG = (BILL.REC<66>#'' AND BILL.REC<39>#'R' AND BILL.REC<39>#'')

      IF PRO.NO[PRO.LENGTH-1,2] = 'BD' THEN BAL.DUE = 1 ELSE BAL.DUE = 0
      IF PRO.NO[PRO.LENGTH-1,2] = 'AD' THEN ADD.DUE = 1 ELSE ADD.DUE = 0
      IF PRO.NO[PRO.LENGTH-1,2] = 'CM' THEN CR.MEMO = 1 ELSE CR.MEMO = 0

      IF NOT(HOLD.FLAG OR NEVERPAY.FLAG OR DUP) THEN
         IF CLIENT='00883' OR CLIENT='00731' OR CLIENT='00950' OR CLIENT='01003' OR CLIENT='00951' OR CLIENT='01019' OR CLIENT='10171' OR CLIENT='00379' OR CLIENT='00973' OR CLIENT='01156' OR CLIENT='01020' OR CLIENT='01067' OR CLIENT='01039' OR CLIENT='00761' THEN
            CHECK.ID=CARRIER:"*":BILL.REC<9>
         END ELSE
            CHECK.ID=CARRIER
         END
         LOCATE CHECK.ID IN CARRIERS BY "AR" SETTING X ELSE
            CARRIERS=INSERT(CARRIERS,X;CHECK.ID)
         END
*        IF CLIENT='01003' OR CLIENT='00869' OR CLIENT='01039' OR CLIENT='00379' OR CLIENT='00973' OR CLIENT='01156' OR CLIENT='01020' OR CLIENT='01067' OR CLIENT='01470' OR CLIENT='00761' THEN        ; * JMK89
*        IF CLIENT='01003' OR CLIENT='00869' OR CLIENT='01039' OR CLIENT='00379' OR CLIENT='00973' OR CLIENT='01156' OR CLIENT='01020' OR CLIENT='01067' OR CLIENT='01470' OR CLIENT='00761' OR CLIENT='01635' THEN          ; * JMK89
*        IF CLIENT='01003' OR CLIENT='00869' OR CLIENT='01039' OR CLIENT='00379' OR CLIENT='00973' OR CLIENT='01156' OR CLIENT='01020' OR CLIENT='01067' OR CLIENT='01470' OR CLIENT='00761' OR CLIENT='01635' OR CLIENT='01529' THEN  ; * JMK89 ; * JMK110
*        IF CLIENT='01003' OR CLIENT='00869' OR CLIENT='01039' OR CLIENT='00379' OR CLIENT='00973' OR CLIENT='01156' OR CLIENT='01020' OR CLIENT='01067' OR CLIENT='01470' OR CLIENT='00761' OR CLIENT='01635' OR CLIENT='01529' OR CLIENT='01592' THEN    ; * JMK89 ; * JMK110 ; JMK111
*        IF CLIENT='01003' OR CLIENT='00869' OR CLIENT='01039' OR CLIENT='00379' OR CLIENT='00973' OR CLIENT='01156' OR CLIENT='01020' OR CLIENT='01067' OR CLIENT='01470' OR CLIENT='00761' OR CLIENT='01635' OR CLIENT='01529' OR CLIENT='01592' OR CLIENT='00666' THEN      ; * JMK89 ; * JMK110 ; JMK111 ; * JMK112
         IF CLIENT='01003' OR CLIENT='00869' OR CLIENT='01039' OR CLIENT='00379' OR CLIENT='00973' OR CLIENT='01156' OR CLIENT='01020' OR CLIENT='01067' OR CLIENT='01470' OR CLIENT='00761' OR CLIENT='01635' OR CLIENT='01529' OR CLIENT='01592' OR CLIENT='00666' OR CLIENT='01763' THEN        ; * JMK89 ; * JMK110 ; JMK111 ; * JMK112
            DIV.CODE.CHECK=BILL.REC<9>:BILL.REC<37>
            LOCATE DIV.CODE.CHECK IN DIV.CODE BY "AR" SETTING Z ELSE
               DIV.CODE=INSERT(DIV.CODE,Z;DIV.CODE.CHECK)
            END
         END
      END
      IF OLD.CARRIER#CARRIER THEN
         READV TRANS.MODE FROM F.CARRIERS,CARRIER,44 ELSE TRANS.MODE = 'NULL'
         IF TRANS.MODE='' THEN TRANS.MODE='NULL'
         OLD.CARRIER=CARRIER
         READ DCLI.CAR.XREF FROM F.CLI.CAR.XREF,CLIENT THEN
            UP.ARRAY=DCLI.CAR.XREF
         END ELSE
            UP.ARRAY="*NEW*"
            DCLI.CAR.XREF=''
         END
         UP.ID='CLIENT.CARRIER.XREF*':CLIENT
         LOCATE CARRIER IN DCLI.CAR.XREF BY 'AR' SETTING POS ELSE
            INS CARRIER BEFORE DCLI.CAR.XREF<POS>
            WRITE DCLI.CAR.XREF ON F.CLI.CAR.XREF,CLIENT
            GOSUB UPDATE.UP.FILE         ; *  Only Need to Update UP if you Write
         END
      END

      BILL.DATE=BILL.REC<1>
      IOT=BILL.REC<2>
      ORIG.ZIP=BILL.REC<3>               ; * JMK17
      DEST.ZIP=BILL.REC<4>               ; * JMK17
      WEIGHT=BILL.REC<6>
      IF WEIGHT='LX' THEN WEIGHT = 1
      CARRIER.CHG=BILL.REC<7>
      ACTUAL.CHG=BILL.REC<8>
      TRUE.COST=BILL.REC<8>+BILL.REC<44>           ; * JMK108
      DIV=BILL.REC<9>
      IF DIV='' THEN                     ; * JMK32
         DIV.POS=1                       ; * JMK32
      END ELSE                           ; * JMK32
         LOCATE(DIV,DIV.LIST,1;DIV.POS;'AL') ELSE  ; * JMK32
            DIV.POS=1                    ; * JMK36
*           INS DIV BEFORE DIV.LIST<1,DIV.POS>     ; * JMK32 ; * JMK36
*           INS '' BEFORE DIV.LIST<2,DIV.POS>      ; * JMK32 ; * JMK36
*           FOR ATT=1 TO 16              ; * JMK32 ; * JMK36
*              INS '' BEFORE DIV.DARRAY<ATT,DIV.POS>         ; * JMK32 ; * JMK36
*           NEXT ATT                     ; * JMK32 ; * JMK36
*           FOR ATT=1 TO 20              ; * JMK32 ; * JMK36
*              INS 0 BEFORE DIV.COUNTS<ATT,DIV.POS>          ; * JMK32 ; * JMK36
*           NEXT ATT                     ; * JMK32 ; * JMK36
         END                             ; * JMK32
      END
      IF NOT(HOLD.FLAG OR NEVERPAY.FLAG OR DUP) THEN         ; * JMK32
         LOCATE(CARRIER,DIV.LIST,2,DIV.POS;CPOS) ELSE        ; * JMK32
            DIV.LIST<2,DIV.POS,-1>=CARRIER         ; * JMK32
         END                             ; * JMK32
      END                                ; * JMK32
      DISC.VAR=BILL.REC<10>
      OVRCHG.VAR=BILL.REC<11>
      CONSLT.VAR=BILL.REC<12>
      PO.BOL=BILL.REC<16>                ; * JMK04
      ORIG.ST=BILL.REC<25>               ; * JMK17
      DEST.ST=BILL.REC<26>               ; * JMK17
      ORIG.CITY=BILL.REC<27>             ; * JMK17
      DEST.CITY=BILL.REC<28>             ; * JMK17
      BD.DISC=BILL.REC<34>
      BD.OVRCHG=BILL.REC<35>
      BD.CONSLT=BILL.REC<36>
      MISROUTE.AMT = BILL.REC<63>
      APRV.CARRIER=BILL.REC<69>          ; * JMK04
      READV APRV.CARRIER.NAME FROM F.CARRIERS,APRV.CARRIER,1 ELSE APRV.CARRIER.NAME='**Unknown**'    ; * JMK04
      LCC.AMT = BILL.REC<143>            ; * JMK117
      LCC.CARRIER = BILL.REC<147>        ; * JMK117
      READV LCC.CARRIER.NAME FROM F.CARRIERS,LCC.CARRIER,1 ELSE LCC.CARRIER.NAME='**Unknown**'       ; * JMK117
      VC.ID = BILL.REC<17>
      IF BILL.REC<21> # '' THEN
         IF CARRIER#'00015' THEN TRANS.MODE = BILL.REC<21>
* 01-25-01 Per Brian Force FedEx to FedEx's default which is 2 Parcel Air
* to prevent Chad Hebert from being underpaid on Fedex
      END

*
* Update year to date items
*
      YTD.ID=CLIENT'R%5':'*':CARRIER'R%5'
      PROCESS.BILL = 1

*
* NEVER PAY BILLS
*
      IF NEVERPAY.FLAG THEN
         IF BILL.REC<67>='' THEN
            CLIENT.YTD<48>+=1            ; * Never Pay count
            CLIENT.YTD<49>+=CARRIER.CHG  ; * Amount Not Paid
            BILL.REC<67>=END.DATE        ; * Stamp bill as "rejected" processed
            NEVERPAY.COUNT+=1            ; * Inc Current NEVERPAY COUNT
            DIV.COUNTS<1,DIV.POS>+=1     ; * JMK32
         END
         PROCESS.BILL = 0
      END

*
* DUPLICATE BILLS
*
      IF DUP THEN
         CLIENT.YTD<13>+=1
         CLIENT.YTD<14>+=CARRIER.CHG
         DUP.COUNT=DUP.COUNT+1
         DIV.COUNTS<2,DIV.POS>+=1        ; * JMK32
         PROCESS.BILL = 0
      END

*
* RELEASED FOR PAYMENT BILLS
*
      IF RELEASED.FLAG THEN
         IF BILL.REC<67>='' THEN
*
* Do not include bills that were rejected then
* later approved but were never processed
* per owen request.
*
         END ELSE
*
* Bill was rejected and processed...
*
            RELEASED.COUNT+=1            ; * Current Released Count
            DIV.COUNTS<3,DIV.POS>+=1     ; * JMK32
         END
         BILL.REC<67>=END.DATE           ; * Stamp bill as 'reject' processed
      END

*
* HOLD FOR PAYMENT BILLS
*
      IF HOLD.FLAG THEN
         IF BILL.REC<67>='' THEN
            CLIENT.YTD<44>+=1            ; * Hold Bill Count
            CLIENT.YTD<45>+=CARRIER.CHG  ; * Amount Hold for Payment
            BILL.REC<67>=END.DATE        ; * Stamp bill as 'reject' processed
            HOLD.COUNT +=1               ; * Current Hold Count
            DIV.COUNTS<4,DIV.POS>+=1     ; * JMK32
         END
         PROCESS.BILL = 0
      END


*
* PROCESS BILL FOR PAYMENT
*
      IF PROCESS.BILL THEN
         IF CLIENT='00850' THEN          ; * Darling ; * JMK72
            BOL=BILL.REC<16,1>           ; * JMK72
            IF BOL#'' AND BILL.REC<2>='O' THEN     ; * JMK72
               READ BOL.DA FROM F.BOL,BOL ELSE BOL.DA=''     ; * JMK72

               UP.ID='FB.BOL.CRX,00850*':BOL       ; * JMK72
               IF BOL.DA='' THEN UP.ARRAY='*NEW*' ELSE UP.ARRAY=BOL.DA           ; * JMK72
               GOSUB UPDATE.UP.FILE      ; * JMK72

               TRUE.COST=BILL.REC<8>+BILL.REC<44>  ; * JMK72
               UPDATE.DATE=CLIENT.REC<82>+1        ; * Last processed + 1 day ; * JMK72
               IF UPDATE.DATE<DATE() THEN          ; * JMK72
                  UPDATE.DATE=DATE()     ; * JMK72
               END                       ; * JMK72
               BOL.DA<3>+=BILL.REC<8>    ; * flat total amount ; * JMK72
               BOL.DA<4>=UPDATE.DATE     ; * flat last date updated ; * JMK72
               BOL.DA<5,-1>=BILL.REC<8>  ; * mv amount by pro ; * JMK72
               BOL.DA<6,-1>=PRO.NO       ; * mv pro ; * JMK72
               BOL.DA<7,-1>=BILL.REC<1>  ; * mv date of pro ; * JMK72
               WRITE BOL.DA ON F.BOL,BOL           ; * JMK72
            END                          ; * JMK72
         END                             ; * JMK72
         IF CLIENT='01057' THEN          ; * H & K Dallas
            BOL=BILL.REC<16,1>
            IF BOL#'' AND BILL.REC<2>='O' THEN
               IF BOL[LEN(BOL)-2,1]#'-' THEN BOL:='-00'
               READ BOL.DA FROM F.BOL,BOL ELSE BOL.DA=''

               UP.ID='FB.BOL.CRX,01057*':BOL
               IF BOL.DA='' THEN UP.ARRAY='*NEW*' ELSE UP.ARRAY=BOL.DA
               GOSUB UPDATE.UP.FILE

               TRUE.COST=BILL.REC<8>+BILL.REC<44>
               UPDATE.DATE=CLIENT.REC<82>+1        ; * Last processed + 1 day
               IF UPDATE.DATE<DATE() THEN
                  UPDATE.DATE=DATE()
               END
               BOL.DA<3>+=TRUE.COST      ; * flat total amount
               BOL.DA<4>=UPDATE.DATE     ; * flat last date updated
               BOL.DA<5,-1>=TRUE.COST    ; * mv amount by pro
               BOL.DA<6,-1>=PRO.NO       ; * mv pro
               BOL.DA<7,-1>=BILL.REC<1>  ; * mv date of pro
               WRITE BOL.DA ON F.BOL,BOL
            END
         END
         IF CLIENT='01344' THEN          ; * Swedish Match ; * JMK37
            BOL=BILL.REC<16,1>           ; * JMK37
*           IF BOL#'' AND BILL.REC<2>='O' THEN     ; * JMK37 ; * JMK54
            IF BOL#'' THEN               ; * JMK37 ; * JMK54
               READ BOL.DA FROM F.BOL,BOL ELSE BOL.DA=''     ; * JMK37

               UP.ID='FB.BOL.CRX,01344*':BOL       ; * JMK37
               IF BOL.DA='' THEN UP.ARRAY='*NEW*' ELSE UP.ARRAY=BOL.DA           ; * JMK37
               GOSUB UPDATE.UP.FILE      ; * JMK37

               TRUE.COST=BILL.REC<8>+BILL.REC<44>  ; * JMK37
               UPDATE.DATE=CLIENT.REC<82>+1        ; * Last processed + 1 day ; * JMK37
               IF UPDATE.DATE<DATE() THEN          ; * JMK37
                  UPDATE.DATE=DATE()     ; * JMK37
               END                       ; * JMK37
               BOL.DA<3>+=TRUE.COST      ; * flat total amount ; * JMK37
               BOL.DA<4>=UPDATE.DATE     ; * flat last date updated ; * JMK37
               BOL.DA<5,-1>=TRUE.COST    ; * mv amount by pro ; * JMK37
               BOL.DA<6,-1>=PRO.NO       ; * mv pro ; * JMK37
               BOL.DA<7,-1>=BILL.REC<1>  ; * mv date of pro ; * JMK37
               WRITE BOL.DA ON F.BOL,BOL           ; * JMK37
            END                          ; * JMK37
         END                             ; * JMK37
         IF CLIENT='01311' THEN          ; * Dietrich Industries ; * JMK47
            BOL=BILL.REC<16,1>           ; * JMK47
            IF BOL#'' AND BILL.REC<2>='O' THEN     ; * JMK47
               READ BOL.DA FROM F.BOL,BOL ELSE BOL.DA=''     ; * JMK47

               UP.ID='FB.BOL.CRX,01311*':BOL       ; * JMK47
               IF BOL.DA='' THEN UP.ARRAY='*NEW*' ELSE UP.ARRAY=BOL.DA           ; * JMK47
               GOSUB UPDATE.UP.FILE      ; * JMK47

               TRUE.COST=BILL.REC<8>+BILL.REC<44>  ; * JMK47
               UPDATE.DATE=CLIENT.REC<82>+1        ; * Last processed + 1 day ; * JMK47
               IF UPDATE.DATE<DATE() THEN          ; * JMK47
                  UPDATE.DATE=DATE()     ; * JMK47
               END                       ; * JMK47
               BOL.DA<3>+=TRUE.COST      ; * flat total amount ; * JMK47
               BOL.DA<4>=UPDATE.DATE     ; * flat last date updated ; * JMK47
               BOL.DA<5,-1>=TRUE.COST    ; * mv amount by pro ; * JMK47
               BOL.DA<6,-1>=PRO.NO       ; * mv pro ; * JMK47
               BOL.DA<7,-1>=BILL.REC<1>  ; * mv date of pro ; * JMK47
               WRITE BOL.DA ON F.BOL,BOL           ; * JMK47
            END                          ; * JMK47
         END                             ; * JMK47
         IF CLIENT='01433' THEN          ; * Darling ; * JMK72
            BOL=BILL.REC<16,1>           ; * JMK72
            IF BOL#'' AND BILL.REC<2>='O' THEN     ; * JMK72
               READ BOL.DA FROM F.BOL,BOL ELSE BOL.DA=''     ; * JMK72

               UP.ID='FB.BOL.CRX,01433*':BOL       ; * JMK72
               IF BOL.DA='' THEN UP.ARRAY='*NEW*' ELSE UP.ARRAY=BOL.DA           ; * JMK72
               GOSUB UPDATE.UP.FILE      ; * JMK72

               TRUE.COST=BILL.REC<8>+BILL.REC<44>  ; * JMK72
               UPDATE.DATE=CLIENT.REC<82>+1        ; * Last processed + 1 day ; * JMK72
               IF UPDATE.DATE<DATE() THEN          ; * JMK72
                  UPDATE.DATE=DATE()     ; * JMK72
               END                       ; * JMK72
               BOL.DA<3>+=BILL.REC<8>    ; * flat total amount ; * JMK72
               BOL.DA<4>=UPDATE.DATE     ; * flat last date updated ; * JMK72
               BOL.DA<5,-1>=BILL.REC<8>  ; * mv amount by pro ; * JMK72
               BOL.DA<6,-1>=PRO.NO       ; * mv pro ; * JMK72
               BOL.DA<7,-1>=BILL.REC<1>  ; * mv date of pro ; * JMK72
               WRITE BOL.DA ON F.BOL,BOL           ; * JMK72
            END                          ; * JMK72
         END                             ; * JMK72
         VIN=BILL.ID
         VIN<2>=CLIENT.REC<84>
         VIN<3>=CLIENT.REC<34>
         VIN<4>=CLIENT.REC<33>
         VIN<5>=CLIENT.REC<85>
         VIN<6>=CLIENT.REC<88>
         VIN<7>=CARRIER
         VIN<8>=CLIENT
         VIN<9>=USER
         VIN<10>=CLIENT.REC<131>
         VIN<11>=CLIENT.REC<177>         ; * JMK12
         VIN<12>=CLIENT.REC<178>         ; * JMK12
         VIN<13>=CLIENT.REC<187>         ; * JMK22
         VIN<14>=CLIENT.REC<200>         ; * JMK34
         VIN<15>=CLIENT.REC<208>         ; * JMK51
         VIN<16>=CLIENT.REC<209>         ; * JMK51
         VIN<17>=CLIENT.REC<210>         ; * JMK51
         VIN<18>=CLIENT.REC<211>         ; * JMK51
         VIN<19>=CLIENT.REC<212>         ; * JMK51
         VIN<20>=CLIENT.REC<213>         ; * JMK51
         VIN<21>=CLIENT.REC<214>         ; * JMK57
         VIN<22>=CLIENT.REC<215>         ; * JMK57
         VIN<23>=CLIENT.REC<216>         ; * JMK57
         VIN<24>=CLIENT.REC<217>         ; * JMK57
         VIN<25>=CLIENT.REC<218>         ; * JMK57
         VIN<26>=CLIENT.REC<219>         ; * JMK57
         VIN<28>=CLIENT.REC<268>         ; * JMK118
         BILL.REC<37>=END.DATE           ; * To fool Date selection for Charges
         CALL CALC.COMMISSION(BILL.REC,VIN,VOUT)
         DISCOUNT.COMM=VOUT<1>
         OVERCHG.COMM=VOUT<2>
         CONSULTING.COMM=VOUT<3>
         EXPENSE.DIST.COMM=VOUT<4>
         MGMT.SVC.COMM=VOUT<5>           ; * JMK12
         MISR.CONS.COMM=VOUT<6>          ; * JMK39
         OVERCHG.PERC=VOUT<7>            ; * JMK113
         BILL.REC<32>=EXPENSE.DIST.COMM
         BILL.REC<42>=DISCOUNT.COMM
         BILL.REC<43>=OVERCHG.COMM
         BILL.REC<44>=CONSULTING.COMM
         BILL.REC<165>=MGMT.SVC.COMM     ; * JMK12
         BILL.REC<203>=MISR.CONS.COMM    ; * JMK39 - MISR COMM FOR MISR VARIANCES
         COMMISSION=DISCOUNT.COMM+OVERCHG.COMM+CONSULTING.COMM+MGMT.SVC.COMM
         TRUE.COST=BILL.REC<8>+BILL.REC<44>        ; * JMK108
*
* Update invoice transaction
*
         LOCATE TRANS.MODE IN DARRAY<1> BY 'AR' SETTING TRANS.POS ELSE
            INS TRANS.MODE BEFORE DARRAY<1,TRANS.POS>
            INS TRANS.MODE BEFORE DIV.DARRAY<1,DIV.POS,TRANS.POS>      ; * JMK32
*DF           FOR J = 2 TO 6
*           FOR J = 2 TO 9               ; * JMK12
*           FOR J = 2 TO 14              ; * JMK12 ; * JMK19
*           FOR J = 2 TO 16              ; * JMK12 ; * JMK19 ; * JMK34
*           FOR J = 2 TO 18              ; * JMK12 ; * JMK19 ; * JMK34 ; * JMK90
            FOR J = 2 TO 24              ; * JMK12 ; * JMK19 ; * JMK34 ; * JMK90
               INS 0 BEFORE DARRAY<J,TRANS.POS>
            NEXT J
*           FOR J = 2 TO 16              ; * JMK32 ; * JMK34
*           FOR J = 2 TO 18              ; * JMK32 ; * JMK34 ; * JMK90
            FOR J = 2 TO 24              ; * JMK32 ; * JMK34 ; * JMK90
               INS 0 BEFORE DIV.DARRAY<J,DIV.POS,TRANS.POS>  ; * JMK32
            NEXT J                       ; * JMK32
         END
         INVOICE<1>=INVOICE<1>+ACTUAL.CHG
         DIV.INVOICE<1,DIV.POS>+=ACTUAL.CHG        ; * JMK32
         EDI.PPR='PPR'                   ; * JMK45
         IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN  ; * JMK45
            EDI.PPR='EDI'                ; * JMK45
         END                             ; * JMK45
         FOR ATT=59 TO 62                ; * JMK45
            IF BILL.REC<ATT>#'' THEN     ; * JMK45
               EDI.PPR='PPR'             ; * JMK45
            END                          ; * JMK45
         NEXT ATT                        ; * JMK45
*        IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN ; * JMK45
         IF EDI.PPR='EDI' THEN           ; * JMK45
*           IF CLIENT='10356' THEN       ; * JMK91
            BEGIN CASE                   ; * JMK91
*              CASE CLIENT='01539'       ; * JMK91 ; * JMK92
               CASE CLIENT='01148' OR CLIENT='01371' OR CLIENT='01398' OR CLIENT='01478' OR CLIENT='01539'     ; * JMK91 ; * JMK92
                  IF CARRIER='00015' OR CARRIER='01075' THEN           ; * JMK91
                     DARRAY<12,TRANS.POS>=DARRAY<12,TRANS.POS>+ACTUAL.CHG        ; * JMK91
                     DIV.DARRAY<12,DIV.POS,TRANS.POS>+=ACTUAL.CHG      ; * JMK91
                     IF BANK#'F' THEN    ; * JMK91
                        DARRAY<23,TRANS.POS>+=1    ; * JMK91
                        DARRAY<24,TRANS.POS>+=ACTUAL.CHG     ; * JMK91
                        DIV.DARRAY<23,DIV.POS,TRANS.POS>+=1  ; * JMK91
                        DIV.DARRAY<24,DIV.POS,TRANS.POS>+=ACTUAL.CHG   ; * JMK91
                     END                 ; * JMK91
                  END ELSE               ; * JMK91
                     DARRAY<6,TRANS.POS>=DARRAY<6,TRANS.POS>+ACTUAL.CHG          ; * JMK91
                     DIV.DARRAY<6,DIV.POS,TRANS.POS>+=ACTUAL.CHG       ; * JMK91
                     IF BANK#'F' THEN    ; * JMK91
                        DARRAY<21,TRANS.POS>+=1    ; * JMK91
                        DARRAY<22,TRANS.POS>+=ACTUAL.CHG     ; * JMK91
                        DIV.DARRAY<21,DIV.POS,TRANS.POS>+=1  ; * JMK91
                        DIV.DARRAY<22,DIV.POS,TRANS.POS>+=ACTUAL.CHG   ; * JMK91
                     END                 ; * JMK91
                  END                    ; * JMK91
               CASE CLIENT='10356'       ; * JMK91
                  IF CARRIER='00015' OR CARRIER='00365' OR CARRIER='01075' OR CARRIER='00041' OR CARRIER='00143' OR CARRIER='00044' THEN     ; * JMK76
                     DARRAY<12,TRANS.POS>=DARRAY<12,TRANS.POS>+ACTUAL.CHG
                     DIV.DARRAY<12,DIV.POS,TRANS.POS>+=ACTUAL.CHG      ; * JMK32
                     IF BANK#'F' THEN    ; * JMK90
                        DARRAY<23,TRANS.POS>+=1    ; * JMK90
                        DARRAY<24,TRANS.POS>+=ACTUAL.CHG     ; * JMK90
                        DIV.DARRAY<23,DIV.POS,TRANS.POS>+=1  ; * JMK90
                        DIV.DARRAY<24,DIV.POS,TRANS.POS>+=ACTUAL.CHG   ; * JMK90
                     END                 ; * JMK90
                  END ELSE
                     DARRAY<6,TRANS.POS>=DARRAY<6,TRANS.POS>+ACTUAL.CHG
                     DIV.DARRAY<6,DIV.POS,TRANS.POS>+=ACTUAL.CHG       ; * JMK32
                     IF BANK#'F' THEN    ; * JMK90
                        DARRAY<21,TRANS.POS>+=1    ; * JMK90
                        DARRAY<22,TRANS.POS>+=ACTUAL.CHG     ; * JMK90
                        DIV.DARRAY<21,DIV.POS,TRANS.POS>+=1  ; * JMK90
                        DIV.DARRAY<22,DIV.POS,TRANS.POS>+=ACTUAL.CHG   ; * JMK90
                     END                 ; * JMK90
                  END
*           END ELSE                        ; * JMK91
               CASE 1                    ; * JMK91
                  IF CARRIER='01075' OR CARRIER='00041' THEN           ; * JMK76
                     DARRAY<12,TRANS.POS>=DARRAY<12,TRANS.POS>+ACTUAL.CHG
                     DIV.DARRAY<12,DIV.POS,TRANS.POS>+=ACTUAL.CHG      ; * JMK32
                     IF BANK#'F' THEN    ; * JMK90
                        DARRAY<23,TRANS.POS>+=1    ; * JMK90
                        DARRAY<24,TRANS.POS>+=ACTUAL.CHG     ; * JMK90
                        DIV.DARRAY<23,DIV.POS,TRANS.POS>+=1  ; * JMK90
                        DIV.DARRAY<224,DIV.POS,TRANS.POS>+=ACTUAL.CHG  ; * JMK90
                     END                 ; * JMK90
                  END ELSE
                     DARRAY<6,TRANS.POS>=DARRAY<6,TRANS.POS>+ACTUAL.CHG
                     DIV.DARRAY<6,DIV.POS,TRANS.POS>+=ACTUAL.CHG       ; * JMK32
                     IF BANK#'F' THEN    ; * JMK90
                        DARRAY<21,TRANS.POS>+=1    ; * JMK90
                        DARRAY<22,TRANS.POS>+=ACTUAL.CHG     ; * JMK90
                        DIV.DARRAY<21,DIV.POS,TRANS.POS>+=1  ; * JMK90
                        DIV.DARRAY<22,DIV.POS,TRANS.POS>+=ACTUAL.CHG   ; * JMK90
                     END                 ; * JMK90
                  END
*           END                          ; * JMK91
            END CASE                     ; * JMK91
         END ELSE
            DARRAY<2,TRANS.POS>=DARRAY<2,TRANS.POS>+ACTUAL.CHG
            DIV.DARRAY<2,DIV.POS,TRANS.POS>+=ACTUAL.CHG      ; * JMK32
            IF BANK#'F' THEN             ; * JMK90
               DARRAY<19,TRANS.POS>+=1   ; * JMK90
               DARRAY<20,TRANS.POS>+=ACTUAL.CHG    ; * JMK90
               DIV.DARRAY<19,DIV.POS,TRANS.POS>+=1           ; * JMK90
               DIV.DARRAY<20,DIV.POS,TRANS.POS>+=ACTUAL.CHG  ; * JMK90
            END                          ; * JMK90
         END
         BEGIN CASE                      ; * JMK19
            CASE CARRIER='00041'         ; * JMK19
*
* Seperate UPS from Regular Overcharges
*
               IF NOT(BAL.DUE) THEN
                  DARRAY<10,TRANS.POS>=DARRAY<10,TRANS.POS>+OVRCHG.VAR
                  DIV.DARRAY<10,DIV.POS,TRANS.POS>+=OVRCHG.VAR         ; * JMK32
               END ELSE
                  DARRAY<10,TRANS.POS>=DARRAY<10,TRANS.POS>+ACTUAL.CHG+OVRCHG.VAR
                  DIV.DARRAY<10,DIV.POS,TRANS.POS>+=OVRCHG.VAR         ; * JMK32
               END
               INVOICE<9>=INVOICE<9>+OVERCHG.COMM
               DIV.INVOICE<9,DIV.POS>+=OVERCHG.COMM          ; * JMK32
               DARRAY<11,TRANS.POS>=DARRAY<11,TRANS.POS>+OVERCHG.COMM
               DIV.DARRAY<11,DIV.POS,TRANS.POS>+=OVERCHG.COMM          ; * JMK32
*DF               IF OVRCHG.VAR+0#0 AND OVERCHG.COMM+0=0 THEN   ; * JMK48
*DF               IF OVRCHG.VAR+0#0 AND OVERCHG.COMM+0=0 AND CLIENT#'01352' THEN    ; * JMK48
*              IF ABS(OVRCHG.VAR+0)>1 AND OVERCHG.COMM+0=0 AND CLIENT#'01352' THEN         ; * JMK48 ; * JMK113
               IF ABS(OVRCHG.VAR+0)>1 AND OVERCHG.PERC+0=0 AND CLIENT#'01352' THEN         ; * JMK48 ; * JMK113
                  UPS.BLOCK=0            ; * JMK56
                  IF CLIENT#'00866' THEN UPS.BLOCK=1         ; * JMK56
                  IF USER#'MYRA' AND USER#'MARY' THEN UPS.BLOCK=1      ; * JMK56
*DF                  IF DATE()#'13983' THEN UPS.BLOCK=1         ; * JMK56
*DF                  IF DATE() > '14365' THEN UPS.BLOCK=1       ; * Install on 03/22/07 as Great Plains met their commission limit for the year. It starts over on 05/01/07 DRF
                  IF DATE() > '14732' THEN UPS.BLOCK=1       ; * Install on 02/21/08 as Great Plains met their commission limit for the year. It starts over on 05/01/08 DRF
                  IF UPS.BLOCK THEN      ; * JMK56
                     CALL ELINE('Client ':CLIENT:'-':CLIENT.REC<2>:' has UPS overcharge amount of ':OVRCHG.VAR'R26,$':' with UPS rate set to 0.00 for bill ':BILL.ID)      ; * JMK48
                     CALL ELINE('Unprocess this client and change charge page.')           ; * JMK48
                     STOP                ; * JMK48
                  END                    ; * JMK56
               END                       ; * JMK48
            CASE CARRIER='01075'         ; * JMK19
*
* Seperate FedEx Ground from Regular Overcharges
*
               IF NOT(BAL.DUE) THEN
                  DARRAY<15,TRANS.POS>=DARRAY<15,TRANS.POS>+OVRCHG.VAR
                  DIV.DARRAY<15,DIV.POS,TRANS.POS>+=OVRCHG.VAR         ; * JMK32
               END ELSE
                  DARRAY<15,TRANS.POS>=DARRAY<15,TRANS.POS>+ACTUAL.CHG+OVRCHG.VAR
                  DIV.DARRAY<15,DIV.POS,TRANS.POS>+=ACTUAL.CHG+OVRCHG.VAR        ; * JMK32
               END
               INVOICE<11>=INVOICE<11>+OVERCHG.COMM
               DIV.INVOICE<11,DIV.POS>+=OVERCHG.COMM         ; * JMK32
               DARRAY<16,TRANS.POS>=DARRAY<16,TRANS.POS>+OVERCHG.COMM
               DIV.DARRAY<16,DIV.POS,TRANS.POS>+=OVERCHG.COMM          ; * JMK32
*              IF OVRCHG.VAR+0#0 AND OVERCHG.COMM+0=0 AND CLIENT#'01352' THEN   ; * JMK55 ; * JMK60
*              IF ABS(OVRCHG.VAR+0)>1 AND OVERCHG.COMM+0=0 AND CLIENT#'01352' THEN         ; * JMK55 ; * JMK60 ; * JMK113
               IF ABS(OVRCHG.VAR+0)>1 AND OVERCHG.PERC+0=0 AND CLIENT#'01352' THEN         ; * JMK55 ; * JMK60 ; * JMK113
                  CALL ELINE('Client ':CLIENT:'-':CLIENT.REC<2>:' has FedEx Ground overcharge amount of ':OVRCHG.VAR'R26,$':' with Fedex Ground rate set to 0.00 for bill ':BILL.ID)           ; * JMK55
                  CALL ELINE('Unprocess this client and change charge page.')    ; * JMK55
                  STOP                   ; * JMK55
               END                       ; * JMK55
*
* Next block is for future separation    ; * JMK34
            CASE CARRIER='00015'         ; * JMK34
*
* Seperate FedEx Air from Regular Overcharges
*
               IF NOT(BAL.DUE) THEN      ; * JMK34
                  DARRAY<17,TRANS.POS>+=OVRCHG.VAR           ; * JMK34
                  DIV.DARRAY<17,DIV.POS,TRANS.POS>+=OVRCHG.VAR         ; * JMK34
               END ELSE                  ; * JMK34
                  DARRAY<17,TRANS.POS>+=ACTUAL.CHG+OVRCHG.VAR          ; * JMK34
                  DIV.DARRAY<17,DIV.POS,TRANS.POS>+=ACTUAL.CHG+OVRCHG.VAR        ; * JMK34
               END                       ; * JMK34
               INVOICE<12>+=OVERCHG.COMM           ; * JMK34
               DIV.INVOICE<12,DIV.POS>+=OVERCHG.COMM         ; * JMK34
               DARRAY<18,TRANS.POS>+=+OVERCHG.COMM           ; * JMK34
               DIV.DARRAY<18,DIV.POS,TRANS.POS>+=OVERCHG.COMM          ; * JMK34
* End of block for future separation     ; * JMK34
*
            CASE 1                       ; * JMK19
               IF NOT(BAL.DUE) THEN
                  DARRAY<3,TRANS.POS>=DARRAY<3,TRANS.POS>+OVRCHG.VAR
                  DIV.DARRAY<3,DIV.POS,TRANS.POS>+=OVRCHG.VAR          ; * JMK32
               END ELSE
                  DARRAY<3,TRANS.POS>=DARRAY<3,TRANS.POS>+ACTUAL.CHG+OVRCHG.VAR
                  DIV.DARRAY<3,DIV.POS,TRANS.POS>+=ACTUAL.CHG+OVRCHG.VAR         ; * JMK32
               END
               INVOICE<4>=INVOICE<4>+OVERCHG.COMM
               DIV.INVOICE<4,DIV.POS>+=OVERCHG.COMM          ; * JMK32
               DARRAY<7,TRANS.POS>=DARRAY<7,TRANS.POS>+OVERCHG.COMM
               DIV.DARRAY<7,DIV.POS,TRANS.POS>+=OVERCHG.COMM           ; * JMK32
         END CASE                        ; * JMK19
*        IF CARRIER # '00041' THEN ; * JMK19
*        END ELSE                  ; * JMK19
*        END                       ; * JMK19
         INVOICE<5>=INVOICE<5>+CONSULTING.COMM
         DARRAY<4,TRANS.POS>=DARRAY<4,TRANS.POS>+CONSLT.VAR+BD.CONSLT
         INVOICE<6>=INVOICE<6>+DISCOUNT.COMM
         DARRAY<5,TRANS.POS>=DARRAY<5,TRANS.POS>+DISC.VAR+BD.DISC
         DARRAY<8,TRANS.POS>=DARRAY<8,TRANS.POS>+CONSULTING.COMM
         DARRAY<9,TRANS.POS>=DARRAY<9,TRANS.POS>+DISCOUNT.COMM
         DARRAY<13,TRANS.POS>=DARRAY<13,TRANS.POS>+MGMT.SVC.COMM       ; * JMK12
         DARRAY<14,TRANS.POS>=DARRAY<14,TRANS.POS>+1
         DIV.INVOICE<5,DIV.POS>+=CONSULTING.COMM   ; * JMK32
         DIV.DARRAY<4,DIV.POS,TRANS.POS>+=CONSLT.VAR+BD.CONSLT         ; * JMK32
         DIV.INVOICE<6,DIV.POS>+=DISCOUNT.COMM     ; * JMK32
         DIV.DARRAY<5,DIV.POS,TRANS.POS>+=DISC.VAR+BD.DISC   ; * JMK32
         DIV.DARRAY<8,DIV.POS,TRANS.POS>+=CONSULTING.COMM    ; * JMK32
         DIV.DARRAY<9,DIV.POS,TRANS.POS>+=DISCOUNT.COMM      ; * JMK32
         DIV.DARRAY<13,DIV.POS,TRANS.POS>+=MGMT.SVC.COMM     ; * JMK32
         DIV.DARRAY<14,DIV.POS,TRANS.POS>+=1       ; * JMK32
*
* Update client YTD history
*
         CLIENT.YTD<6>=CLIENT.YTD<6>+WEIGHT
         CLIENT.YTD<7>=CLIENT.YTD<7>+CARRIER.CHG
         CLIENT.YTD<8>=CLIENT.YTD<8>+ACTUAL.CHG
         CLIENT.YTD<10>=CLIENT.YTD<10>+DISC.VAR
         IF CARRIER # '00041' THEN
            CLIENT.YTD<11>=CLIENT.YTD<11>+OVRCHG.VAR
         END ELSE
            CLIENT.YTD<51>=CLIENT.YTD<51>+OVRCHG.VAR
         END
         CLIENT.YTD<12>=CLIENT.YTD<12>+CONSLT.VAR
         CLIENT.YTD<34>=CLIENT.YTD<34>+BD.DISC
         IF CARRIER # '00041' THEN
            CLIENT.YTD<35>=CLIENT.YTD<35>+BD.OVRCHG
         END ELSE
            CLIENT.YTD<52>=CLIENT.YTD<52>+BD.OVRCHG
         END
         CLIENT.YTD<36>=CLIENT.YTD<36>+BD.CONSLT
         IF BAL.DUE THEN CLIENT.YTD<38>=CLIENT.YTD<38>+ACTUAL.CHG
         IF ADD.DUE THEN CLIENT.YTD<39>=CLIENT.YTD<39>+ACTUAL.CHG
*DF         OVER.CHG=MISROUTE.AMT-ACTUAL.CHG          ; * JMK14
         OVER.CHG=ACTUAL.CHG-MISROUTE.AMT          ; * JMK14
         IF OVER.CHG < 0 THEN OVER.CHG = 0         ; * JMK14
         IF MISROUTE.AMT+0 <= 0 THEN OVER.CHG = 0
         IF DUP#'0' THEN OVER.CHG=0      ; * JMK14
         BEGIN CASE                      ; * JMK14
            CASE IOT='O'                 ; * JMK14
               CLIENT.YTD<71>=CLIENT.YTD<71>+OVER.CHG        ; * JMK14
            CASE IOT='I'                 ; * JMK14
               CLIENT.YTD<72>=CLIENT.YTD<72>+OVER.CHG        ; * JMK14
            CASE IOT='T'                 ; * JMK14
               CLIENT.YTD<73>=CLIENT.YTD<73>+OVER.CHG        ; * JMK14
         END CASE                        ; * JMK14
*
         BILLS.COUNT=BILLS.COUNT+1
         DIV.COUNTS<5,DIV.POS>+=1        ; * JMK32
*        IF INDEX(PRO.NO,'/',1) THEN     ; * JMK24
*           PR.BILLS.COUNT+=1            ; * JMK24
*        END                             ; * JMK24
         NEXP=DCOUNT(BILL.REC<31>,@VM)-1           ; * JMK30
         IF NEXP<0 THEN NEXP=0           ; * JMK30
         PR.BILLS.COUNT+=NEXP            ; * JMK30
         DIV.COUNTS<6,DIV.POS>+=NEXP     ; * JMK32
         BEGIN CASE
            CASE IOT='O'
               CLIENT.YTD<68>+=COMMISSION          ; * outbound ytd commission
               EDI.PPR='PPR'             ; * JMK45
               IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN      ; * JMK45
                  EDI.PPR='EDI'          ; * JMK45
               END                       ; * JMK45
               FOR ATT=59 TO 62          ; * JMK45
                  IF BILL.REC<ATT>#'' THEN         ; * JMK45
                     EDI.PPR='PPR'       ; * JMK45
                  END                    ; * JMK45
               NEXT ATT                  ; * JMK45
*              IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN ; * JMK45
               IF EDI.PPR='EDI' THEN     ; * JMK45
                  CLIENT.YTD<42>=CLIENT.YTD<42>+1
*                 IF CLIENT='10356' THEN ; * JMK91
                  BEGIN CASE             ; * JMK91
                     CASE CLIENT='01148' AND END.DATE GT ICONV('07/10/08','D')   ; * JMK91 ; * JMK92 ; * JMK93
                        IF CARRIER='00015' OR CARRIER='01075' THEN     ; * JMK91
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1   ; * JMK91
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK91
                           IF CARRIER='00015' THEN           ; * JMK93
                              IF CLIENT='01148' THEN         ; * JMK93
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE  ; * JMK93
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>         ; * JMK93
                                 END     ; * JMK93
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK93
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK93
                                 END     ; * JMK93
                              END ELSE   ; * JMK93
                                 EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1     ; * JMK93
                                 DIV.COUNTS<13,DIV.POS>+=1   ; * JMK93
                              END        ; * JMK93
                           END ELSE      ; * JMK93
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK93
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK93
                           END           ; * JMK93
                        END ELSE         ; * JMK91
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1   ; * JMK91
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK91
                        END              ; * JMK91
*                    CASE CLIENT='01539'           ; * JMK91 ; * JMK92
*                    CASE CLIENT='01148' OR CLIENT='01371' OR CLIENT='01398' OR CLIENT='01478' OR CLIENT='01539'         ; * JMK91 ; * JMK92 ; * JMK93
                     CASE CLIENT='01478' OR CLIENT='01371' OR CLIENT='01398' OR CLIENT='01539'       ; * JMK91 ; * JMK92 ; * JMK93
                        IF CARRIER='00015' OR CARRIER='01075' THEN     ; * JMK91
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1   ; * JMK91
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK91
*                          IF CARRIER#'00015' THEN           ; * JMK91 ; * JMK93
*                             EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK91 ; * JMK93
*                             DIV.COUNTS<13,DIV.POS>+=1      ; * JMK91 ; * JMK93
*                          END           ; * JMK91 ; * JMK93
                           IF CARRIER='00015' THEN           ; * JMK93
                              IF CLIENT='01148' THEN         ; * JMK93
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE  ; * JMK93
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>         ; * JMK93
                                 END     ; * JMK93
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK93
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK93
                                 END     ; * JMK93
                              END ELSE   ; * JMK93
                                 EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1     ; * JMK93
                                 DIV.COUNTS<13,DIV.POS>+=1   ; * JMK93
                              END        ; * JMK93
                           END ELSE      ; * JMK93
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK93
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK93
                           END           ; * JMK93
                        END ELSE         ; * JMK91
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1   ; * JMK91
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK91
                        END              ; * JMK91
                     CASE CLIENT='10356'           ; * JMK91
                        IF CARRIER='00015' OR CARRIER='00365' OR CARRIER='01075' OR CARRIER='00041' OR CARRIER='00143' OR CARRIER='00044' THEN         ; * JMK76
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK32
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CARRIER='00015' THEN
                              IF CLIENT='10356' OR CLIENT='01078' OR CLIENT='01148' THEN
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>
                                 END
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK32
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK32
                                 END     ; * JMK32
                              END
                           END ELSE
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK32
                           END
                        END ELSE
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK32
                        END
*                 END ELSE ; * JMK91
                     CASE 1              ; * JMK91
                        IF CARRIER='01075' OR CARRIER='00041' THEN     ; * JMK76
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK32
                           IF CLIENT='01163' AND CARRIER='01075' THEN
                              EDI.MD.FEDEX.GROUND.COUNT=EDI.MD.FEDEX.GROUND.COUNT+1
                              DIV.COUNTS<12,DIV.POS>+=1      ; * JMK32
                           END
                           IF CLIENT='01292' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CLIENT='01747' AND CARRIER='00041' THEN  ; * JMK116
                              UPS.BILLS.COUNT+=1   ; * JMK116
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK116
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK116
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK116
                           END           ; * JMK116
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CARRIER='00015' THEN
                              IF CLIENT='10356' OR CLIENT='01078' OR CLIENT='01148' THEN
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>
                                 END
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK32
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK32
                                 END     ; * JMK32
                              END
                           END ELSE
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK32
                           END
                        END ELSE
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK32
                        END
*                 END ; * JMK91
                  END CASE               ; * JMK91
*DF               EDI.COUNT=EDI.COUNT+1
               END ELSE
                  IF NOT(CR.MEMO) THEN CLIENT.YTD<15>=CLIENT.YTD<15>+1
               END
               CLIENT.YTD<20>=CLIENT.YTD<20>+ACTUAL.CHG
            CASE IOT = 'I'
               CLIENT.YTD<67>+=COMMISSION          ; * inbound ytd commission
               EDI.PPR='PPR'             ; * JMK45
               IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN      ; * JMK45
                  EDI.PPR='EDI'          ; * JMK45
               END                       ; * JMK45
               FOR ATT=59 TO 62          ; * JMK45
                  IF BILL.REC<ATT>#'' THEN         ; * JMK45
                     EDI.PPR='PPR'       ; * JMK45
                  END                    ; * JMK45
               NEXT ATT                  ; * JMK45
*              IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN ; * JMK45
               IF EDI.PPR='EDI' THEN     ; * JMK45
                  CLIENT.YTD<43>=CLIENT.YTD<43>+1
*                 IF CLIENT='10356' THEN ; * JMK91
                  BEGIN CASE             ; * JMK91
                     CASE CLIENT='01148' AND END.DATE GT ICONV('07/10/08','D')   ; * JMK93
                        IF CARRIER='00015' OR CARRIER='01075' THEN     ; * JMK93
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1   ; * JMK93
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK93
                           IF CARRIER='00015' THEN           ; * JMK93
                              IF CLIENT='01148' THEN         ; * JMK93
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE  ; * JMK93
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>         ; * JMK93
                                 END     ; * JMK93
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK93
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK93
                                 END     ; * JMK93
                              END ELSE   ; * JMK93
                                 EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1     ; * JMK93
                                 DIV.COUNTS<13,DIV.POS>+=1   ; * JMK93
                              END        ; * JMK93
                           END ELSE      ; * JMK93
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK93
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK93
                           END           ; * JMK93
                        END ELSE         ; * JMK93
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1   ; * JMK91
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK91
                        END              ; * JMK93
*                    CASE CLIENT='01539'           ; * JMK91 ; * JMK92
*                    CASE CLIENT='01148' OR CLIENT='01371' OR CLIENT='01398' OR CLIENT='01478' OR CLIENT='01539'         ; * JMK91 ; * JMK92 ; * JMK93
                     CASE CLIENT='01478' OR CLIENT='01371' OR CLIENT='01398' OR CLIENT='01539'       ; * JMK91 ; * JMK92 ; * JMK93
                        IF CARRIER='00015' OR CARRIER='01075' THEN     ; * JMK91
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1   ; * JMK91
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK91
*                          IF CARRIER#'00015' THEN           ; * JMK91 ; * JMK93
*                             EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK91 ; * JMK93
*                             DIV.COUNTS<13,DIV.POS>+=1      ; * JMK91 ; * JMK93
*                          END           ; * JMK91 ; * JMK93
                           IF CARRIER='00015' THEN           ; * JMK93
                              IF CLIENT='01148' THEN         ; * JMK93
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE  ; * JMK93
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>         ; * JMK93
                                 END     ; * JMK93
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK93
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK93
                                 END     ; * JMK93
                              END ELSE   ; * JMK93
                                 EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1     ; * JMK93
                                 DIV.COUNTS<13,DIV.POS>+=1   ; * JMK93
                              END        ; * JMK93
                           END ELSE      ; * JMK93
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK93
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK93
                           END           ; * JMK93
                        END ELSE         ; * JMK91
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1   ; * JMK91
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK91
                        END              ; * JMK91
                     CASE CLIENT='10356'           ; * JMK91
                        IF CARRIER='00015' OR CARRIER='00365' OR CARRIER='01075' OR CARRIER='00041' OR CARRIER='00143' OR CARRIER='00044' THEN         ; * JMK76
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK32
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CARRIER='00015' THEN
                              IF CLIENT='10356' OR CLIENT='01078' OR CLIENT='01148' THEN
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>
                                 END
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK32
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK32
                                 END     ; * JMK32
                              END
                           END ELSE
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK32
                           END
                        END ELSE
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK32
                        END
*                 END ELSE ; * JMK91
                     CASE 1              ; * JMK91
                        IF CARRIER='01075' OR CARRIER='00041' THEN     ; * JMK76
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK32
                           IF CLIENT='01163' AND CARRIER='01075' THEN
                              EDI.MD.FEDEX.GROUND.COUNT=EDI.MD.FEDEX.GROUND.COUNT+1
                              DIV.COUNTS<12,DIV.POS>+=1      ; * JMK32
                           END
                           IF CLIENT='01292' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CLIENT='01747' AND CARRIER='00041' THEN  ; * JMK116
                              UPS.BILLS.COUNT+=1   ; * JMK116
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK116
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK116
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK116
                           END           ; * JMK116
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CARRIER='00015' THEN
                              IF CLIENT='10356' OR CLIENT='01078' OR CLIENT='01148' THEN
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>
                                 END
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK32
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK32
                                 END     ; * JMK32
                              END
                           END ELSE
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK32
                           END
                        END ELSE
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK32
                        END
*                 END ; * JMK91
                  END CASE               ; * JMK91
*DF               EDI.COUNT=EDI.COUNT+1
               END ELSE
                  IF NOT(CR.MEMO) THEN CLIENT.YTD<17>=CLIENT.YTD<17>+1
               END
               CLIENT.YTD<21>=CLIENT.YTD<21>+ACTUAL.CHG
            CASE 1
               CLIENT.YTD<69>+=COMMISSION          ; * third party ytd commision
               EDI.PPR='PPR'             ; * JMK45
               IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN      ; * JMK45
                  EDI.PPR='EDI'          ; * JMK45
               END                       ; * JMK45
               FOR ATT=59 TO 62          ; * JMK45
                  IF BILL.REC<ATT>#'' THEN         ; * JMK45
                     EDI.PPR='PPR'       ; * JMK45
                  END                    ; * JMK45
               NEXT ATT                  ; * JMK45
*              IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN ; * JMK45
               IF EDI.PPR='EDI' THEN     ; * JMK45
                  CLIENT.YTD<65>=CLIENT.YTD<65>+1
*                 IF CLIENT='10356' THEN ; * JMK91
                  BEGIN CASE             ; * JMK91
                     CASE CLIENT='01148' AND END.DATE GT ICONV('07/10/08','D')   ; * JMK91 ; * JMK92 ; * JMK93
                        IF CARRIER='00015' OR CARRIER='01075' THEN     ; * JMK91
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1   ; * JMK91
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK91
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK91
                              UPS.BILLS.COUNT+=1   ; * JMK91
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK91
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK91
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK91
                           END           ; * JMK91
                           IF CARRIER='00015' THEN           ; * JMK93
                              IF CLIENT='01148' THEN         ; * JMK93
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE  ; * JMK93
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>         ; * JMK93
                                 END     ; * JMK93
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK93
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK93
                                 END     ; * JMK93
                              END ELSE   ; * JMK93
                                 EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1     ; * JMK93
                                 DIV.COUNTS<13,DIV.POS>+=1   ; * JMK93
                              END        ; * JMK93
                           END ELSE      ; * JMK93
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK93
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK93
                           END           ; * JMK93
                        END ELSE         ; *JMK91
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1   ; * JMK91
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK91
                        END              ; * JMK91
*                    CASE CLIENT='01539'           ; * JMK91 ; * JMK92
*                    CASE CLIENT='01148' OR CLIENT='01371' OR CLIENT='01398' OR CLIENT='01478' OR CLIENT='01539'         ; * JMK91 ; * JMK92 ; * JMK93
                     CASE CLIENT='01478' OR CLIENT='01371' OR CLIENT='01398' OR CLIENT='01539'       ; * JMK91 ; * JMK92 ; * JMK93
                        IF CARRIER='00015' OR CARRIER='01075' THEN     ; * JMK91
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1   ; * JMK91
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK91
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK91
                              UPS.BILLS.COUNT+=1   ; * JMK91
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK91
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK91
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK91
                           END           ; * JMK91
*                          IF CARRIER#'00015' THEN           ; * JMK91 ; * JMK93
*                             EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK91 ; * JMK93
*                             DIV.COUNTS<13,DIV.POS>+=1      ; * JMK91 ; * JMK93
*                          END           ; * JMK91 ; * JMK93
                           IF CARRIER='00015' THEN           ; * JMK93
                              IF CLIENT='01148' THEN         ; * JMK93
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE  ; * JMK93
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>         ; * JMK93
                                 END     ; * JMK93
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK93
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK93
                                 END     ; * JMK93
                              END ELSE   ; * JMK93
                                 EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1     ; * JMK93
                                 DIV.COUNTS<13,DIV.POS>+=1   ; * JMK93
                              END        ; * JMK93
                           END ELSE      ; * JMK93
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1        ; * JMK93
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK93
                           END           ; * JMK93
                        END ELSE         ; *JMK91
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1   ; * JMK91
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK91
                        END              ; * JMK91
                     CASE CLIENT='10356'           ; * JMK91
                        IF CARRIER='00015' OR CARRIER='00365' OR CARRIER='01075' OR CARRIER='00041' OR CARRIER='00143' OR CARRIER='00044' THEN         ; * JMK76
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK32
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CARRIER='00015' THEN
                              IF CLIENT='10356' OR CLIENT='01078' OR CLIENT='01148' THEN
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>
                                 END
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK32
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK32
                                 END     ; * JMK32
                              END
                           END ELSE
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK32
                           END
                        END ELSE
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK32
                        END
*                 END ELSE ; * JMK91
                     CASE 1              ; * JMK91
                        IF CARRIER='01075' OR CARRIER='00041' THEN     ; * JMK76
                           EDI.COUNT<1,2>=EDI.COUNT<1,2>+1
                           DIV.COUNTS<8,DIV.POS>+=1          ; * JMK32
                           IF CLIENT='01163' AND CARRIER='01075' THEN
                              EDI.MD.FEDEX.GROUND.COUNT=EDI.MD.FEDEX.GROUND.COUNT+1
                              DIV.COUNTS<12,DIV.POS>+=1      ; * JMK32
                           END
                           IF CLIENT='01292' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CLIENT='01747' AND CARRIER='00041' THEN  ; * JMK116
                              UPS.BILLS.COUNT+=1   ; * JMK116
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK116
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK116
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK116
                           END           ; * JMK116
                           IF CLIENT='10356' AND CARRIER='00041' THEN  ; * JMK31
                              UPS.BILLS.COUNT+=1   ; * JMK31
                              UPS.TRACK.COUNT+=BILL.REC<198>+0         ; * JMK31
                              DIV.COUNTS<9,DIV.POS>+=1       ; * JMK32
                              DIV.COUNTS<10,DIV.POS>+=BILL.REC<198>+0  ; * JMK32
                           END           ; * JMK31
                           IF CARRIER='00015' THEN
                              IF CLIENT='10356' OR CLIENT='01078' OR CLIENT='01148' THEN
                                 LOCATE BILL.REC<94> IN EDI.COUNT.ARRAY<1> BY 'AR' SETTING EDI.COUNT.POS ELSE
                                    INS BILL.REC<94> BEFORE EDI.COUNT.ARRAY<1,EDI.COUNT.POS>
                                 END
                                 LOCATE BILL.REC<94> IN DIV.COUNTS<11,DIV.POS> BY 'AR' SETTING DIV.EDI.COUNT.POS ELSE    ; * JMK32
                                    INS BILL.REC<94> BEFORE DIV.COUNTS<11,DIV.POS,DIV.EDI.COUNT.POS>           ; * JMK32
                                 END     ; * JMK32
                              END
                           END ELSE
                              EDI.COUNT.PARCEL.NON.FEDEX.AIR=EDI.COUNT.PARCEL.NON.FEDEX.AIR+1
                              DIV.COUNTS<13,DIV.POS>+=1      ; * JMK32
                           END
                        END ELSE
                           EDI.COUNT<1,1>=EDI.COUNT<1,1>+1
                           DIV.COUNTS<7,DIV.POS>+=1          ; * JMK32
                        END
*                 END ; * JMK91
                  END CASE               ; * JMK91
*DF               EDI.COUNT=EDI.COUNT+1
               END ELSE
                  IF NOT(CR.MEMO) THEN CLIENT.YTD<60>=CLIENT.YTD<60>+1
               END
               CLIENT.YTD<62>=CLIENT.YTD<62>+ACTUAL.CHG
         END CASE
         CLIENT.YTD<25>=CLIENT.YTD<25>+(CARRIER.CHG-ACTUAL.CHG)

*
** Update variance totals
*
*DF        IF BILL.REC<51> NE '' THEN
*DF          TIMES=DCOUNT(BILL.REC<51>,CHAR(253))
*DF          FOR I=1 TO TIMES STEP 1
*DF            VAR.CODE=BILL.REC<51,I>
*DF            VAR.AMT=BILL.REC<52,I>
*DF*OLD        READU VAR.REC FROM F.VAR,VAR.CODE ELSE VAR.REC=''
*DF            IF VARIANCE='Y' OR VARIANCE='A' THEN
*DF              READU VAR.REC FROM F.VAR,VAR.CODE THEN
*DF                UP.ARRAY=VAR.REC
*DF              END ELSE
*DF                VAR.REC=''
*DF                IF VARIANCE='A' THEN
*DF                   READV DESC FROM F.TRANSPORT,TRANS.MODE,1 ELSE
*DF                      CALL ELINE("Carrier: ":CARRIER:" has an invalid transportation code of '":TRANS.MODE:"'")
*DF                      DESC=''
*DF                   END
*DF                   VAR.REC<1>=DESC
*DF                END
*DF                UP.ARRAY='*NEW*'
*DF              END
*DF              UP.ID='VARIANCE.CODES,':CLIENT:'*':VAR.CODE ; GOSUB UPDATE.UP.FILE
*DF              VAR.REC<2>=VAR.REC<2>+VAR.AMT
*DF              WRITE VAR.REC ON F.VAR,VAR.CODE
*DF            END
         IF BILL.REC<21> NE '' THEN
            VAR.CODE=BILL.REC<21>
            VAR.AMT=0-BILL.REC<12>
            IF VARIANCE='Y' OR VARIANCE='A' THEN
               READU VAR.REC FROM F.VAR,VAR.CODE THEN
                  UP.ARRAY=VAR.REC
               END ELSE
                  VAR.REC=''
                  IF VARIANCE='A' THEN
*DF                 READV DESC FROM F.TRANSPORT,TRANS.MODE,1 ELSE
                     READV DESC FROM F.TRANSPORT,VAR.CODE,1 ELSE
                        CALL ELINE("Carrier: ":CARRIER:" has an invalid transportation code of '":TRANS.MODE:"'")
                        DESC=''
                     END
                     VAR.REC<1>=DESC
                  END
                  UP.ARRAY='*NEW*'
               END
               UP.ID='VARIANCE.CODES,':CLIENT:'*':VAR.CODE ; GOSUB UPDATE.UP.FILE
               VAR.REC<2>=VAR.REC<2>+VAR.AMT
               WRITE VAR.REC ON F.VAR,VAR.CODE
            END
         END
*
** Update expense totals
*
         IF BILL.REC<31> NE '' AND EXPENSE = 'Y' THEN
            EXP.COUNT=DCOUNT(BILL.REC<31>,CHAR(253))
            FOR I=1 TO EXP.COUNT STEP 1
               EXPENSE.CODE=BILL.REC<31,I>
               EXPENSE.AMT=BILL.REC<33,I>+EXPENSE.DIST.COMM<1,I>
*
               READU EXP.REC FROM F.EXP,EXPENSE.CODE THEN
                  UP.ARRAY=EXP.REC
               END ELSE
                  EXP.REC=EXPENSE.CODE
                  UP.ARRAY='*NEW*'
               END
               UP.ID='EXPENSE.CODES,':CLIENT:'*':EXPENSE.CODE ; GOSUB UPDATE.UP.FILE
*
               BEGIN CASE
                  CASE IOT='O'
                     EXP.REC<2>=EXP.REC<2>+EXPENSE.AMT
                  CASE IOT ='I'
                     EXP.REC<3>=EXP.REC<3>+EXPENSE.AMT
                  CASE 1
                     EXP.REC<4>=EXP.REC<4>+EXPENSE.AMT
               END CASE
               WRITE EXP.REC ON F.EXP,EXPENSE.CODE
            NEXT I
         END
*
** Update division totals
*
         IF DIV NE '' AND DIVISION = 'Y' THEN
            MATREADU DIV.REC FROM F.DIV,DIV THEN
               UP.ID='DIVISION.CODES,':CLIENT:'*':DIV
               READV DUMMY FROM F.UP,UP.ID,1 ELSE
                  MATWRITE DIV.REC ON F.UP,UP.ID
               END
            END ELSE
               MAT DIV.REC=''
               UP.ARRAY='*NEW*'
               UP.ID='DIVISION.CODES,':CLIENT:'*':DIV ; GOSUB UPDATE.UP.FILE
            END
*
            BEGIN CASE
               CASE IOT='O'
                  DIV.O.YTD += ACTUAL.CHG+DISCOUNT.COMM+OVERCHG.COMM+CONSULTING.COMM+MGMT.SVC.COMM
               CASE IOT='I'
                  DIV.I.YTD += ACTUAL.CHG+DISCOUNT.COMM+OVERCHG.COMM+CONSULTING.COMM+MGMT.SVC.COMM
               CASE 1
                  DIV.T.YTD += ACTUAL.CHG+DISCOUNT.COMM+OVERCHG.COMM+CONSULTING.COMM+MGMT.SVC.COMM
            END CASE
            MATWRITE DIV.REC ON F.DIV,DIV
*           IF CLIENT='01706' THEN       ; * JMK107 ; * JMK115
            IF CLIENT='01706' OR CLIENT='00866' THEN         ; * JMK107 ; * JMK115
               REG=DIV.REC(45)           ; * JMK107
               IF REG NE '' THEN         ; * JMK107
                  MATREADU REG.CODE.REC FROM F.REG,REG THEN  ; * JMK107
                     UP.ID='REGION.CODES,':CLIENT:'*':REG    ; * JMK107
                     READV DUMMY FROM F.UP,UP.ID,1 ELSE      ; * JMK107
                        MATWRITE REG.CODE.REC ON F.UP,UP.ID  ; * JMK107
                     END                 ; * JMK107
                  END ELSE               ; * JMK107
                     MAT REG.CODE.REC=''           ; * JMK107
                     UP.ARRAY='*NEW*'    ; * JMK107
                     UP.ID='REGION.CODES,':CLIENT:'*':REG ; GOSUB UPDATE.UP.FILE           ; * JMK107
                  END                    ; * JMK107
*
                  BEGIN CASE             ; * JMK107
                     CASE IOT='O'        ; * JMK107
                        REG.O.YTD += ACTUAL.CHG+DISCOUNT.COMM+OVERCHG.COMM+CONSULTING.COMM+MGMT.SVC.COMM       ; * JMK107
                     CASE IOT='I'        ; * JMK107
                        REG.I.YTD += ACTUAL.CHG+DISCOUNT.COMM+OVERCHG.COMM+CONSULTING.COMM+MGMT.SVC.COMM       ; * JMK107
                     CASE 1              ; * JMK107
                        REG.T.YTD += ACTUAL.CHG+DISCOUNT.COMM+OVERCHG.COMM+CONSULTING.COMM+MGMT.SVC.COMM       ; * JMK107
                  END CASE               ; * JMK107
                  MATWRITE REG.CODE.REC ON F.REG,REG         ; * JMK107
               END                       ; * JMK107
            END                          ; * JMK107
         END
      END


*
* Update History File
*
      BILL.HIST.REC=BILL.REC
      PROC.DATE=END.DATE

      IF NOT(HOLD.FLAG) THEN
         BILL.HIST.REC<40>=BANK
         BILL.HIST.REC<37>=PROC.DATE
*        VIN=BILL.ID
*        VIN<2>=CLIENT.REC<84>
*        VIN<3>=CLIENT.REC<34>
*        VIN<4>=CLIENT.REC<33>
*        VIN<5>=CLIENT.REC<85>
*        VIN<7>=CARRIER
*        VIN<8>=CLIENT
*        VIN<9>=USER
*        CALL CALC.COMMISSION(BILL.HIST.REC,VIN,VOUT)
*        DISCOUNT.COMM=VOUT<1>
*        OVERCHG.COMM=VOUT<2>
*        CONSULTING.COMM=VOUT<3>
*        EXPENSE.DIST.COMM=VOUT<4>
*        BILL.HIST.REC<32>=EXPENSE.DIST.COMM
*        BILL.HIST.REC<42>=DISCOUNT.COMM
*        BILL.HIST.REC<43>=OVERCHG.COMM
*        BILL.HIST.REC<44>=CONSULTING.COMM

*OH      PROCESS.DATE=BILL.HIST.REC<37>
*OH      IF PROCESS.DATE='' THEN BILL.HIST.REC<37>=DATE() ELSE BILL.HIST.REC<37>=PROCESS.DATE

         IF BANK='N' THEN
* Set Check Date, Amount, and Number for NO Voucher Bills
            BILL.HIST.REC<13>=BILL.HIST.REC<8>
            BILL.HIST.REC<14>='999999'
            BILL.HIST.REC<15>=PROC.DATE
         END
         IF PREV.CARRIER#CARRIER THEN
            WRITEV END.DATE ON F.CARRIERS,CARRIER,25
            PREV.CARRIER=CARRIER
         END
      END

      WRITE BILL.HIST.REC ON F.HIST,BILL.ID
      IF BILL.HIST.REC<37>#'' THEN       ; * JMK53
         IF BILL.HIST.REC<39>#'R' THEN   ; * JMK99
            DPROC.LIST<-1>=BILL.ID
         END                             ; * JMK99
         IF CLIENT='10356' THEN          ; * JMK70
            SVIN=''                      ; * JMK70
            SVOUT=''                     ; * JMK70
            SVIN<1>=CLIENT               ; * JMK70
            SVIN<2>=BILL.ID              ; * JMK70
            SVIN<3>='A'                  ; * JMK70
            CALL UPDATE.FB.SUMMARY(SVIN,SVOUT,BILL.HIST.REC,F.SUMM)    ; * JMK70
         END                             ; * JMK70
         IF CLIENT#'10356' THEN          ; * JMK999
            OPEN '','EDI.BILLS.HIST,':CLIENT TO F.EDI.BILLS.HIST THEN  ; * JMK84
               READ EDI.HIST.REC FROM F.EDI.BILLS.HIST,BILL.ID ELSE    ; * JMK84
                  EDI.HIST.REC=''        ; * JMK84
               END                       ; * JMK84
            END ELSE                     ; * JMK84
               EDI.HIST.REC=''           ; * JMK84
            END                          ; * JMK84
            IF DIVISION='Y' THEN         ; * JMK84
               READ DIV.ITM FROM F.DIV,BILL.HIST.REC<9> ELSE DIV.ITM=''          ; * JMK84
            END ELSE                     ; * JMK84
               DIV.ITM=''                ; * JMK84
            END                          ; * JMK84
            OPEN 'VEND.CUST,':CLIENT TO F.VC THEN  ; * JMK84
               READ VC.REC FROM F.VC,BILL.HIST.REC<17> ELSE  ; * JMK84
                  VC.REC=''              ; * JMK84
               END                       ; * JMK84
            END ELSE                     ; * JMK84
               VC.REC=''                 ; * JMK84
            END                          ; * JMK84
            SQLVIN=''                    ; * JMK84
            SQLVIN<1>=USER               ; * JMK84
            SQLVIN<2>=CLIENT             ; * JMK84
            SQLVIN<3>=BILL.ID            ; * JMK84
            SQLVOUT=''                   ; * JMK84
*           CALL UPD.SQL.FBHIST.SUB(SQLVIN,SQLVOUT,CLIENT.REC,DIV.ITM,VC.REC,BILL.HIST.REC,EDI.HIST.REC)      ; * JMK84
         END                             ; * JMK999
      END                                ; * JMK53
      READ D.CRX FROM F.CRX,BILL.ID THEN
*
*       Don't Update UP File with CRX Record.... CRX is Handled with FB.BILLS
*       records
*
*       UP.ARRAY='' ; ** Just Store the Key (The record is not needed)
*       UP.ID='FB.BILLS.CRX*':BILL.ID ; GOSUB UPDATE.UP.FILE
*
         IF BANK='N' THEN
* Set Check Date, Amount, and Number for NO Voucher Bills
            D.CRX<13>=BILL.HIST.REC<8>
            D.CRX<14>='999999'
            D.CRX<15>=PROC.DATE
         END
         D.CRX<37>=PROC.DATE
         WRITE D.CRX ON F.CRX,BILL.ID
      END


      ENTERED.BY=BILL.HIST.REC<53>
      VERIFIED.BY=BILL.HIST.REC<54>
      IF ENTERED.BY#'' THEN
         ENT.ID=PROC.DATE:"*":CLIENT:"*":ENTERED.BY
*
         READ DENT.BY FROM F.EMP.PERF,ENT.ID THEN
            UP.ARRAY=DENT.BY
         END ELSE
            DENT.BY=''
            UP.ARRAY='*NEW*'
         END
         UP.ID='EMP.PERF*':ENT.ID ; GOSUB UPDATE.UP.FILE
*
         DENT.BY<1>+=1
         WRITE DENT.BY ON F.EMP.PERF,ENT.ID
      END

      IF VERIFIED.BY#'' THEN
         VER.ID=PROC.DATE:"*":CLIENT:"*":VERIFIED.BY
         READ DVER.BY FROM F.EMP.PERF,VER.ID THEN
            UP.ARRAY=DVER.BY
         END ELSE
            DVER.BY=''
            UP.ARRAY='*NEW*'
         END
         UP.ID='EMP.PERF*':VER.ID ; GOSUB UPDATE.UP.FILE
         DVER.BY<2>+=1
         WRITE DVER.BY ON F.EMP.PERF,VER.ID
      END

      IF PROC.DATE#'' THEN
         READ DCLIENT.SUM FROM F.CLIENT.SUM,CLIENT THEN
            UP.ARRAY=DCLIENT.SUM
            IF PROC.DATE < DCLIENT.SUM<1> THEN DCLIENT.SUM<1>=PROC.DATE
            IF PROC.DATE > DCLIENT.SUM<2> THEN DCLIENT.SUM<2>=PROC.DATE
            DCLIENT.SUM<3>=+1
         END ELSE
            UP.ARRAY='*NEW*'
            DCLIENT.SUM=PROC.DATE
            DCLIENT.SUM<2>=PROC.DATE
            DCLIENT.SUM<3>=1
         END
         UP.ID='CLIENT.SUM*':CLIENT ; GOSUB UPDATE.UP.FILE
         WRITE DCLIENT.SUM ON F.CLIENT.SUM,CLIENT
      END

*
* Do not update the OPEN BILLS if the bill is....
* REJECTED(HOLD), NEVERPAY, etc....
*
*     IF HOLD.FLAG OR NEVERPAY.FLAG OR DUP OR BANK = 'N' OR CLIENT[1,2]='99' ELSE         ; * JMK59
*     IF HOLD.FLAG OR NEVERPAY.FLAG OR DUP OR BANK = 'N' OR CLIENT[1,2]='99' OR CLIENT.REC<179>#'' ELSE        ; * JMK59 ; * JMK97
      IF HOLD.FLAG OR NEVERPAY.FLAG OR DUP OR BANK = 'N' OR CLIENT[1,2]='99' OR (CLIENT.REC<179>#'' AND ONCE=0) ELSE     ; * JMK59 ; * JMK97
         OPEN.ID=CLIENT:'*':BILL.ID
*NPR01         IF CLIENT.REC<81>='V' THEN
*        IF CLIENT.REC<81> NE 'F' THEN   ; * JMK83
*        IF CLIENT.REC<81> NE 'F' AND CLIENT.REC<81> NE 'K' THEN       ; * JMK83 ; * JMK90
         READ TEST FROM F.OPEN,OPEN.ID THEN        ; * JMK96
            SUBJ='Possible Duplicate Freight Bill Processing!'         ; * JMK96
            TEXT=USER:' processed the account ':CLIENT:'-':CLIENT.REC<2>:' with a bill'    ; * JMK96
            TEXT<1,-1>='that has been previously processed. Please check now.'   ; * JMK96
            TEXT<1,-1>='The pro number is : ':BILL.ID        ; * JMK96
            MVIN=''                      ; * JMK96
            MVIN<1>='HelpDesk@afs.net'   ; * JMK96
            MVIN<2,-1>='DFriend@afs.net'           ; * JMK96
            MVIN<4>='AFS_FB.TEH.JMK'     ; * JMK96
            MVIN<5>=SUBJ                 ; * JMK96
            MVIN<6>=TEXT                 ; * JMK96
            CALL SENDMAIL(MVIN,MVOUT)    ; * JMK96
            CALL ELINE('Client ':CLIENT:'-':CLIENT.REC<2>:', freight bill ':BILL.ID:' has already been processed and is in Open Bills.')     ; * JMK96
            CALL ELINE('Do not process this freight bill again or duplicate payments will occur.')   ; * JMK96
            CALL ELINE('Unprocess this client and notify Help Desk!')  ; * JMK96
            STOP                         ; * JMK96
         END                             ; * JMK96
         READ TEST FROM F.PAY,OPEN.ID THEN         ; * JMK96
            SUBJ='Possible Duplicate Freight Bill Processing!'         ; * JMK96
            TEXT=USER:' processed the account ':CLIENT:'-':CLIENT.REC<2>:' with a bill'    ; * JMK96
            TEXT<1,-1>='that has been previously processed. Please check now.'   ; * JMK96
            TEXT<1,-1>='The pro number is : ':BILL.ID        ; * JMK96
            MVIN=''                      ; * JMK96
            MVIN<1>='HelpDesk@afs.net'   ; * JMK96
            MVIN<2,-1>='DFriend@afs.net'           ; * JMK96
            MVIN<4>='AFS_FB.TEH.JMK'     ; * JMK96
            MVIN<5>=SUBJ                 ; * JMK96
            MVIN<6>=TEXT                 ; * JMK96
            CALL SENDMAIL(MVIN,MVOUT)    ; * JMK96
            CALL ELINE('Client ':CLIENT:'-':CLIENT.REC<2>:', freight bill ':BILL.ID:' has already been processed and is in Accruals.')       ; * JMK96
            CALL ELINE('Do not process this freight bill again or duplicate payments will occur.')   ; * JMK96
            CALL ELINE('Unprocess this client and notify Help Desk!')  ; * JMK96
            STOP                         ; * JMK96
         END                             ; * JMK96
         IF BANK NE 'F' AND BANK NE 'K' THEN       ; * JMK83 ; * JMK90
            PAY.REC = BILL.HIST.REC
            PAY.REC<133> = TODAY
            PAY.REC<134> = TODAY
            PAY.REC<135> = TODAY
            WRITE PAY.REC ON F.PAY,OPEN.ID         ; *NPR01 - Bypass FB.5.1
         END ELSE
*NPR01         WRITE BILL.HIST.REC ON F.OPEN,OPEN.ID
            WRITE BILL.HIST.REC ON F.PRE.OPEN,OPEN.ID        ; *NPR01
            DOPEN.LIST<-1>=OPEN.ID
         END
*
*      Don't Send FB.OPEN.BILLS Records to FU... They are handled by FB.BILLS
*      routine. (Deletes CLIENT*BILL.ID records from FB.OPEN
*
*       UP.ARRAY='*NEW*'
*       UP.ID='FB.OPEN.BILLS*':CLIENT:"*":BILL.ID ; GOSUB UPDATE.UP.FILE
      END
*     IF HOLD.FLAG OR NEVERPAY.FLAG OR DUP OR BANK = 'N' OR CLIENT[1,2]='99' ELSE          ; * JMK01 ; * JMK101
*        VALID.RECORD=1                  ; * JMK01 ; * JMK101
*        IF BILL.HIST.REC<63>+0#0 THEN VALID.RECORD=0        ; * JMK01 - NO MISROUTE BILLS ; * JMK101
*        IF BILL.HIST.REC<21>#1 THEN VALID.RECORD=0          ; * JMK01 - ONLY LTL BILLS ; * JMK101
*        IF CLIENT.REC<93>#'Y' THEN VALID.RECORD=0           ; * JMK01 - ONLY LOGISTICS BILLS ; * JMK101
*        IF CLIENT.REC<94>#'Y' THEN VALID.RECORD=0           ; * JMK01 - ONLY MISROUTE CLIENT BILLS ; * JMK101
*        IF IOT='T' THEN VALID.RECORD=0  ; * JMK02 - NO THIRD PARTY BILLS ; * JMK101
*        IF ADD.DUE OR BAL.DUE THEN VALID.RECORD=0           ; *Added no AD or BD by DRF 12-11-03 ; * JMK101
*        IF VALID.RECORD THEN            ; * JMK01 ; * JMK101
*           OPEN.ID=CLIENT:'*':BILL.ID   ; * JMK01 ; * JMK101
*           WRITE '' ON F.MIS.CHECK,OPEN.ID        ; * JMK01 ; * JMK101
*; * JMK01
*           UP.ARRAY='*NEW*'             ; * JMK01 ; * JMK101
*           UP.ID='FB.MISROUTE.CHECK*':CLIENT:"*":BILL.ID ; GOSUB UPDATE.UP.FILE           ; * JMK01 ; * JMK101
*        END                             ; * JMK01 ; * JMK101
*     END                                ; * JMK01 ; * JMK101

*
* Delete the bill from FB.BILLS if
* it is NOT a REJECT (HOLD) Bill
*
      IF NOT(HOLD.FLAG) THEN
         DELETE F.BILLS,BILL.ID
      END

*
* Do not update In/Out if it is a rejected bill
* (IOT is not been entered on a rejected bill....)
*
      IF NOT(HOLD.FLAG OR NEVERPAY.FLAG) THEN
*
* Update Client Inbound/Outbound Totals
*
         BEGIN CASE
            CASE IOT='O'
               CLIENT.YTD<16>=CLIENT.YTD<16>+CARRIER.CHG
               CLIENT.YTD<27>=CLIENT.YTD<27>+WEIGHT
            CASE IOT='I'
               CLIENT.YTD<18>=CLIENT.YTD<18>+CARRIER.CHG
               CLIENT.YTD<26>=CLIENT.YTD<26>+WEIGHT
            CASE 1
               CLIENT.YTD<61>=CLIENT.YTD<61>+CARRIER.CHG
               CLIENT.YTD<64>=CLIENT.YTD<64>+WEIGHT
         END CASE
      END

*
*
* Update Misroutes File
*
*
*
      TOADDS='' ; CCADDS='' ; BCCADDS=''           ; * JMK42
      TONAMES='' ; CCNAMES='' ; BCCNAMES=''        ; * JMK42
      TOTITLES='' ; CCTITLES='' ; BCCTITLES=''     ; * JMK42

      IF MR.LTRS = 'Y' AND MISROUTE.AMT > 0 AND VC.ID #'' AND IOT = 'I' AND TRANS.MODE = '1' THEN
*DF    IF NOT(NEVERPAY.FLAG) AND NOT(DUP) AND NOT(BAL.DUE) AND NOT(ADD.DUE) AND NOT(CR.MEMO) THEN
         IF BILL.REC<39>='O' AND NOT(DUP) AND NOT(BAL.DUE) AND NOT(ADD.DUE) AND NOT(CR.MEMO) THEN
            UP.ARRAY<1>='*NEW*'
*           IF MISROUTE.AMT LE ACTUAL.CHG THEN     ; * JMK108
            IF MISROUTE.AMT LE TRUE.COST THEN      ; * JMK108
               UP.ID='FB.MISROUTES,':CLIENT:'*':BILL.ID ; GOSUB UPDATE.UP.FILE
               WRITE BILL.REC ON F.MISROUTES,BILL.ID
               HBILL.ID = CLIENT:'*':BILL.ID       ; * NPR02
               WRITE BILL.REC ON F.MISR.HIST,HBILL.ID        ; * NPR02
            END
         END
      END
*     IF MR.EMAIL = 'Y' AND MISROUTE.AMT > 0 AND TRANS.MODE = '1' THEN           ; * JMK04 ; * JMK117
      IF MR.EMAIL = 'Y' AND (MISROUTE.AMT > 0 OR LCC.AMT > 0) AND TRANS.MODE = '1' THEN    ; * JMK04 ; * JMK117
         IF BILL.REC<39>='O' AND NOT(DUP) AND NOT(BAL.DUE) AND NOT(ADD.DUE) AND NOT(CR.MEMO) THEN    ; * JMK04
*           IF MISROUTE.AMT LE ACTUAL.CHG THEN     ; * JMK04 ; * JMK108
*              MIS.VAR=ACTUAL.CHG-MISROUTE.AMT     ; * JMK04 ; * JMK108
            IF MISROUTE.AMT LT TRUE.COST THEN      ; * JMK04 ; * JMK108
               MIS.VAR=TRUE.COST-MISROUTE.AMT      ; * JMK04 ; * JMK108
               IF VC.ID#'' THEN          ; * JMK04; * JMK08
                  READ VC.REC FROM F.VC,VC.ID THEN           ; * JMK04
                     IF IOT = 'I' THEN   ; * JMK04; * JMK08
                        IF VC.REC<24>#'' THEN      ; * JMK04
                           NVAL=DCOUNT(VC.REC<24>,@VM)       ; * JMK04
                           FOR VAL=1 TO NVAL       ; * JMK04
                              TOADD=VC.REC<24,VAL>           ; * JMK04
                              TONAME=VC.REC<27,VAL>          ; * JMK04
                              TOTITLE=VC.REC<28,VAL>         ; * JMK04
                              TOAMT=VC.REC<29,VAL>           ; * JMK04
                              IF OCONV(TOADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN        ; * JMK50
                                 TOAMT=50000       ; * JMK50
                              END        ; * JMK50
*                             TODIR=VC.REC<30,VAL>           ; * JMK04           ; * JMK42
                              TODIR=OCONV(VC.REC<30,VAL>,'MCU')        ; * JMK04           ; * JMK42
                              TOSEP=VC.REC<31,VAL>           ; * JMK04
                              IF MIS.VAR >= TOAMT THEN       ; * JMK04
                                 IF INDEX(TODIR,IOT,1) THEN  ; * JMK04
                                    IF TRIM(TOADD)#'' THEN   ; * JMK64
                                       LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE     ; * JMK42
                                          INS TOADD BEFORE TOADDS<1,TPOS>        ; * JMK42
                                          INS TONAME BEFORE TONAMES<1,TPOS>      ; * JMK42
                                          INS TOTITLE BEFORE TOTITLES<1,TPOS>    ; * JMK42
                                       END         ; * JMK42
                                    END  ; * JMK64
                                 END     ; * JMK04
                              END        ; * JMK04
                           NEXT VAL      ; * JMK04
                        END              ; * JMK04
                        IF VC.REC<25>#'' THEN      ; * JMK04
                           NVAL=DCOUNT(VC.REC<25>,@VM)       ; * JMK04
                           FOR VAL=1 TO NVAL       ; * JMK04
                              CCADD=VC.REC<25,VAL>           ; * JMK04
                              CCNAME=VC.REC<32,VAL>          ; * JMK04
                              CCTITLE=VC.REC<33,VAL>         ; * JMK04
                              CCAMT=VC.REC<34,VAL>           ; * JMK04
                              IF OCONV(CCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN        ; * JMK50
                                 CCAMT=50000       ; * JMK50
                              END        ; * JMK50
*                             CCDIR=VC.REC<35,VAL>           ; * JMK04 ; * JMK42
                              CCDIR=OCONV(VC.REC<35,VAL>,'MCU')        ; * JMK04 ; * JMK42
                              CCSEP=VC.REC<36,VAL>           ; * JMK04
                              IF MIS.VAR >= CCAMT THEN       ; * JMK04
                                 IF INDEX(CCDIR,IOT,1) THEN  ; * JMK04
                                    IF TRIM(CCADD)#'' THEN   ; * JMK64
                                       LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE     ; * JMK42
                                          INS CCADD BEFORE CCADDS<1,CPOS>        ; * JMK42
                                          INS CCNAME BEFORE CCNAMES<1,CPOS>      ; * JMK42
                                          INS CCTITLE BEFORE CCTITLES<1,CPOS>    ; * JMK42
                                       END         ; * JMK42
                                    END  ; * JMK64
                                 END     ; * JMK04
                              END        ; * JMK04
                           NEXT VAL      ; * JMK04
                        END              ; * JMK04
                        IF VC.REC<26>#'' THEN      ; * JMK04
                           NVAL=DCOUNT(VC.REC<26>,@VM)       ; * JMK04
                           FOR VAL=1 TO NVAL       ; * JMK04
                              BCCADD=VC.REC<26,VAL>          ; * JMK04
                              BCCNAME=VC.REC<37,VAL>         ; * JMK04
                              BCCTITLE=VC.REC<38,VAL>        ; * JMK04
                              BCCAMT=VC.REC<39,VAL>          ; * JMK04
                              IF OCONV(BCCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN       ; * JMK50
                                 BCCAMT=50000      ; * JMK50
                              END        ; * JMK50
*                             BCCDIR=VC.REC<40,VAL>          ; * JMK04 ; * JMK42
                              BCCDIR=OCONV(VC.REC<40,VAL>,'MCU')       ; * JMK04 ; * JMK42
                              BCCSEP=VC.REC<41,VAL>          ; * JMK04
                              IF MIS.VAR >= BCCAMT THEN      ; * JMK04
                                 IF INDEX(BCCDIR,IOT,1) THEN           ; * JMK04
                                    IF TRIM(BCCADD)#'' THEN  ; * JMK64
                                       LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE   ; * JMK42
                                          INS BCCADD BEFORE BCCADDS<1,BPOS>      ; * JMK42
                                          INS BCCNAME BEFORE BCCNAMES<1,BPOS>    ; * JMK42
                                          INS BCCTITLE BEFORE BCCTITLES<1,BPOS>  ; * JMK42
                                       END         ; * JMK42
                                    END  ; * JMK64
                                 END     ; * JMK04
                              END        ; * JMK04
                           NEXT VAL      ; * JMK04
                        END              ; * JMK04
                     END                 ; * JMK08
                  END ELSE               ; * JMK08
                     VC.REC=''           ; * JMK08
                  END                    ; * JMK04
               END                       ; * JMK04
               IF DIV.REC(27)#'' THEN    ; * JMK04
                  NVAL=DCOUNT(DIV.REC(27),@VM)     ; * JMK04
                  FOR VAL=1 TO NVAL      ; * JMK04
                     TOADD=DIV.REC(27)<1,VAL>      ; * JMK04
                     TONAME=DIV.REC(30)<1,VAL>     ; * JMK04
                     TOTITLE=DIV.REC(31)<1,VAL>    ; * JMK04
                     TOAMT=DIV.REC(32)<1,VAL>      ; * JMK04
                     IF OCONV(TOADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN       ; * JMK50
                        TOAMT=50000      ; * JMK50
                     END                 ; * JMK50
*                    TODIR=DIV.REC(33)<1,VAL>      ; * JMK04 ; * JMK42
                     TODIR=OCONV(DIV.REC(33)<1,VAL>,'MCU')   ; * JMK04 ; * JMK42
                     TOSEP=DIV.REC(34)<1,VAL>      ; * JMK04
                     IF MIS.VAR >= TOAMT THEN      ; * JMK04
                        IF INDEX(TODIR,IOT,1) THEN           ; * JMK04
                           IF TRIM(TOADD)#'' THEN  ; * JMK64
                              LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE    ; * JMK42
                                 INS TOADD BEFORE TOADDS<1,TPOS>       ; * JMK42
                                 INS TONAME BEFORE TONAMES<1,TPOS>     ; * JMK42
                                 INS TOTITLE BEFORE TOTITLES<1,TPOS>   ; * JMK42
                              END        ; * JMK42
                           END           ; * JMK64
                        END              ; * JMK04
                     END                 ; * JMK04
                  NEXT VAL               ; * JMK04
               END                       ; * JMK04
               IF DIV.REC(28)#'' THEN    ; * JMK04
                  NVAL=DCOUNT(DIV.REC(28),@VM)     ; * JMK04
                  FOR VAL=1 TO NVAL      ; * JMK04
                     CCADD=DIV.REC(28)<1,VAL>      ; * JMK04
                     CCNAME=DIV.REC(35)<1,VAL>     ; * JMK04
                     CCTITLE=DIV.REC(36)<1,VAL>    ; * JMK04
                     CCAMT=DIV.REC(37)<1,VAL>      ; * JMK04
                     IF OCONV(CCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN       ; * JMK50
                        CCAMT=50000      ; * JMK50
                     END                 ; * JMK50
*                    CCDIR=DIV.REC(38)<1,VAL>      ; * JMK04 ; * JMK42
                     CCDIR=OCONV(DIV.REC(38)<1,VAL>,'MCU')   ; * JMK04 ; * JMK42
                     CCSEP=DIV.REC(39)<1,VAL>      ; * JMK04
                     IF MIS.VAR >= CCAMT THEN      ; * JMK04
                        IF INDEX(CCDIR,IOT,1) THEN           ; * JMK04
                           IF TRIM(CCADD)#'' THEN  ; * JMK64
                              LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE    ; * JMK42
                                 INS CCADD BEFORE CCADDS<1,CPOS>       ; * JMK42
                                 INS CCNAME BEFORE CCNAMES<1,CPOS>     ; * JMK42
                                 INS CCTITLE BEFORE CCTITLES<1,CPOS>   ; * JMK42
                              END        ; * JMK42
                           END           ; * JMK64
                        END              ; * JMK04
                     END                 ; * JMK04
                  NEXT VAL               ; * JMK04
               END                       ; * JMK04
               IF DIV.REC(29)#'' THEN    ; * JMK04
                  NVAL=DCOUNT(DIV.REC(29),@VM)     ; * JMK04
                  FOR VAL=1 TO NVAL      ; * JMK04
                     BCCADD=DIV.REC(29)<1,VAL>     ; * JMK04
                     BCCNAME=DIV.REC(40)<1,VAL>    ; * JMK04
                     BCCTITLE=DIV.REC(41)<1,VAL>   ; * JMK04
                     BCCAMT=DIV.REC(42)<1,VAL>     ; * JMK04
                     IF OCONV(BCCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN      ; * JMK50
                        BCCAMT=50000     ; * JMK50
                     END                 ; * JMK50
*                    BCCDIR=DIV.REC(43)<1,VAL>     ; * JMK04 ; * JMK42
                     BCCDIR=OCONV(DIV.REC(43)<1,VAL>,'MCU')  ; * JMK04 ; * JMK42
                     BCCSEP=DIV.REC(44)<1,VAL>     ; * JMK04
                     IF MIS.VAR >= BCCAMT THEN     ; * JMK04
                        IF INDEX(BCCDIR,IOT,1) THEN          ; * JMK04
                           IF TRIM(BCCADD)#'' THEN           ; * JMK64
                              LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE  ; * JMK42
                                 INS BCCADD BEFORE BCCADDS<1,BPOS>     ; * JMK42
                                 INS BCCNAME BEFORE BCCNAMES<1,BPOS>   ; * JMK42
                                 INS BCCTITLE BEFORE BCCTITLES<1,BPOS>           ; * JMK42
                              END        ; * JMK42
                           END           ; * JMK64
                        END              ; * JMK04
                     END                 ; * JMK04
                  NEXT VAL               ; * JMK04
               END                       ; * JMK04
*              IF CLIENT="01706" THEN    ; * JMK114 ; * JMK115
               IF CLIENT="01706" OR CLIENT="00866" THEN      ; * JMK114 ; * JMK115
                  IF REG.CODE.REC(27)#'' THEN      ; * JMK114
                     NVAL=DCOUNT(REG.CODE.REC(27),@VM)       ; * JMK114
                     FOR VAL=1 TO NVAL   ; * JMK114
                        TOADD=REG.CODE.REC(27)<1,VAL>        ; * JMK114
                        TONAME=REG.CODE.REC(30)<1,VAL>       ; * JMK114
                        TOTITLE=REG.CODE.REC(31)<1,VAL>      ; * JMK114
                        TOAMT=REG.CODE.REC(32)<1,VAL>        ; * JMK114
                        IF OCONV(TOADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN    ; * JMK114
                           TOAMT=50000   ; * JMK114
                        END              ; * JMK114
                        TODIR=OCONV(REG.CODE.REC(33)<1,VAL>,'MCU')     ; * JMK114
                        TOSEP=REG.CODE.REC(34)<1,VAL>        ; * JMK114
                        IF MIS.VAR >= TOAMT THEN   ; * JMK114
                           IF INDEX(TODIR,IOT,1) THEN        ; * JMK114
                              IF TRIM(TOADD)#'' THEN         ; * JMK114
                                 LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE           ; * JMK114
                                    INS TOADD BEFORE TOADDS<1,TPOS>    ; * JMK114
                                    INS TONAME BEFORE TONAMES<1,TPOS>  ; * JMK114
                                    INS TOTITLE BEFORE TOTITLES<1,TPOS>          ; * JMK114
                                 END     ; * JMK114
                              END        ; * JMK114
                           END           ; * JMK114
                        END              ; * JMK114
                     NEXT VAL            ; * JMK114
                  END                    ; * JMK114
                  IF REG.CODE.REC(28)#'' THEN      ; * JMK114
                     NVAL=DCOUNT(REG.CODE.REC(28),@VM)       ; * JMK114
                     FOR VAL=1 TO NVAL   ; * JMK114
                        CCADD=REG.CODE.REC(28)<1,VAL>        ; * JMK114
                        CCNAME=REG.CODE.REC(35)<1,VAL>       ; * JMK114
                        CCTITLE=REG.CODE.REC(36)<1,VAL>      ; * JMK114
                        CCAMT=REG.CODE.REC(37)<1,VAL>        ; * JMK114
                        IF OCONV(CCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN    ; * JMK114
                           CCAMT=50000   ; * JMK114
                        END              ; * JMK114
                        CCDIR=OCONV(REG.CODE.REC(38)<1,VAL>,'MCU')     ; * JMK114
                        CCSEP=REG.CODE.REC(39)<1,VAL>        ; * JMK114
                        IF MIS.VAR >= CCAMT THEN   ; * JMK114
                           IF INDEX(CCDIR,IOT,1) THEN        ; * JMK114
                              IF TRIM(CCADD)#'' THEN         ; * JMK114
                                 LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE           ; * JMK114
                                    INS CCADD BEFORE CCADDS<1,CPOS>    ; * JMK114
                                    INS CCNAME BEFORE CCNAMES<1,CPOS>  ; * JMK114
                                    INS CCTITLE BEFORE CCTITLES<1,CPOS>          ; * JMK114
                                 END     ; * JMK114
                              END        ; * JMK114
                           END           ; * JMK114
                        END              ; * JMK114
                     NEXT VAL            ; * JMK114
                  END                    ; * JMK114
                  IF REG.CODE.REC(29)#'' THEN      ; * JMK114
                     NVAL=DCOUNT(REG.CODE.REC(29),@VM)       ; * JMK114
                     FOR VAL=1 TO NVAL   ; * JMK114
                        BCCADD=REG.CODE.REC(29)<1,VAL>       ; * JMK114
                        BCCNAME=REG.CODE.REC(40)<1,VAL>      ; * JMK114
                        BCCTITLE=REG.CODE.REC(41)<1,VAL>     ; * JMK114
                        BCCAMT=REG.CODE.REC(42)<1,VAL>       ; * JMK114
                        IF OCONV(BCCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN   ; * JMK114
                           BCCAMT=50000  ; * JMK114
                        END              ; * JMK114
                        BCCDIR=OCONV(REG.CODE.REC(43)<1,VAL>,'MCU')    ; * JMK114
                        BCCSEP=REG.CODE.REC(44)<1,VAL>       ; * JMK114
                        IF MIS.VAR >= BCCAMT THEN  ; * JMK114
                           IF INDEX(BCCDIR,IOT,1) THEN       ; * JMK114
                              IF TRIM(BCCADD)#'' THEN        ; * JMK114
                                 LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE         ; * JMK114
                                    INS BCCADD BEFORE BCCADDS<1,BPOS>  ; * JMK114
                                    INS BCCNAME BEFORE BCCNAMES<1,BPOS>          ; * JMK114
                                    INS BCCTITLE BEFORE BCCTITLES<1,BPOS>        ; * JMK114
                                 END     ; * JMK114
                              END        ; * JMK114
                           END           ; * JMK114
                        END              ; * JMK114
                     NEXT VAL            ; * JMK114
                  END                    ; * JMK114
               END                       ; * JMK114
               IF CLIENT.REC<153>#'' THEN          ; * JMK04
*                 CLIENT.REC<153,-1>='BBarker@afs.net'        ; * JMK61 ; * JMK67
*                 CLIENT.REC<156,-1>='Brian Barker'          ; * JMK61 ; * JMK67
*                 CLIENT.REC<157,-1>='President'   ; * JMK61 ; * JMK67
*                 CLIENT.REC<158,-1>='0'           ; * JMK61 ; * JMK67
*                 CLIENT.REC<159,-1>='IOT'         ; * JMK61 ; * JMK67
*                 CLIENT.REC<160,-1>=''  ; * JMK61 ; * JMK67
*                 CLIENT.REC<156,-1>='Owen Holman'           ; * JMK61 ; * JMK67
*                 CLIENT.REC<157,-1>='Vice-President of Information Technology'  ; * JMK61 ; * JMK67
*                 CLIENT.REC<158,-1>='0'           ; * JMK61 ; * JMK67
*                 CLIENT.REC<159,-1>='IOT'         ; * JMK61 ; * JMK67
*                 CLIENT.REC<160,-1>=''  ; * JMK61 ; * JMK67
*                 CLIENT.REC<153,-1>=SERV.SLSMAN.EMAIL       ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<156,-1>=SERV.SLSMAN.NAME        ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<157,-1>='Account Executive'     ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<158,-1>='0'           ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<159,-1>='IOT'         ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<160,-1>=''  ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<153,-1>='Misroutes@afs.net'      ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<156,-1>='Misroute Department'   ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<157,-1>='Logistics'   ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<158,-1>='0'           ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<159,-1>='IOT'         ; * JMK61 ; * JMK63 ; * JMK67
*                 CLIENT.REC<160,-1>=''  ; * JMK61 ; * JMK63 ; * JMK67
                  NVAL=DCOUNT(CLIENT.REC<153>,@VM)           ; * JMK04
                  FOR VAL=1 TO NVAL      ; * JMK04
                     TOADD=CLIENT.REC<153,VAL>     ; * JMK04
                     TONAME=CLIENT.REC<156,VAL>    ; * JMK04
                     TOTITLE=CLIENT.REC<157,VAL>   ; * JMK04
                     TOAMT=CLIENT.REC<158,VAL>     ; * JMK04
*                    IF OCONV(TOADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN       ; * JMK50 ; * JMK61
*                       TOAMT=50000      ; * JMK50 ; * JMK61
*                    END                 ; * JMK50 ; * JMK61
*                    TODIR=CLIENT.REC<159,VAL>     ; * JMK04 ; * JMK42
                     TODIR=OCONV(CLIENT.REC<159,VAL>,'MCU')  ; * JMK04 ; * JMK42
                     TOSEP=CLIENT.REC<160,VAL>     ; * JMK04
                     IF MIS.VAR >= TOAMT THEN      ; * JMK04
                        IF INDEX(TODIR,IOT,1) THEN           ; * JMK04
                           IF TRIM(TOADD)#'' THEN  ; * JMK64
                              LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE    ; * JMK42
                                 INS TOADD BEFORE TOADDS<1,TPOS>       ; * JMK42
                                 INS TONAME BEFORE TONAMES<1,TPOS>     ; * JMK42
                                 INS TOTITLE BEFORE TOTITLES<1,TPOS>   ; * JMK42
                              END        ; * JMK42
                           END           ; * JMK64
                        END              ; * JMK04
                     END                 ; * JMK04
                  NEXT VAL               ; * JMK04
               END                       ; * JMK04
               IF CLIENT.REC<154>#'' THEN          ; * JMK04
                  NVAL=DCOUNT(CLIENT.REC<154>,@VM)           ; * JMK04
                  FOR VAL=1 TO NVAL      ; * JMK04
                     CCADD=CLIENT.REC<154,VAL>     ; * JMK04
                     CCNAME=CLIENT.REC<161,VAL>    ; * JMK04
                     CCTITLE=CLIENT.REC<162,VAL>   ; * JMK04
                     CCAMT=CLIENT.REC<163,VAL>     ; * JMK04
*                    IF OCONV(CCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN       ; * JMK50 ; * JMK61
*                       CCAMT=50000      ; * JMK50 ; * JMK61
*                    END                 ; * JMK50 ; * JMK61
*                    CCDIR=CLIENT.REC<164,VAL>     ; * JMK04 ; * JMK42
                     CCDIR=OCONV(CLIENT.REC<164,VAL>,'MCU')  ; * JMK04 ; * JMK42
                     CCSEP=CLIENT.REC<165,VAL>     ; * JMK04
                     IF MIS.VAR >= CCAMT THEN      ; * JMK04
                        IF INDEX(CCDIR,IOT,1) THEN           ; * JMK04
                           IF TRIM(CCADD)#'' THEN  ; * JMK64
                              LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE    ; * JMK42
                                 INS CCADD BEFORE CCADDS<1,CPOS>       ; * JMK42
                                 INS CCNAME BEFORE CCNAMES<1,CPOS>     ; * JMK42
                                 INS CCTITLE BEFORE CCTITLES<1,CPOS>   ; * JMK42
                              END        ; * JMK42
                           END           ; * JMK64
                        END              ; * JMK04
                     END                 ; * JMK04
                  NEXT VAL               ; * JMK04
               END                       ; * JMK04
               IF CLIENT.REC<155>#'' THEN          ; * JMK04
                  NVAL=DCOUNT(CLIENT.REC<155>,@VM)           ; * JMK04
                  FOR VAL=1 TO NVAL      ; * JMK04
                     BCCADD=CLIENT.REC<155,VAL>    ; * JMK04
                     BCCNAME=CLIENT.REC<166,VAL>   ; * JMK04
                     BCCTITLE=CLIENT.REC<167,VAL>  ; * JMK04
                     BCCAMT=CLIENT.REC<168,VAL>    ; * JMK04
*                    IF OCONV(BCCADD,'MCU')='BBARKER@AFSLOGISTICS.COM' THEN      ; * JMK50 ; * JMK61
*                       BCCAMT=50000     ; * JMK50 ; * JMK61
*                    END                 ; * JMK50 ; * JMK61
*                    BCCDIR=CLIENT.REC<169,VAL>    ; * JMK04 ; * JMK42
                     BCCDIR=OCONV(CLIENT.REC<169,VAL>,'MCU')           ; * JMK04 ; * JMK42
                     BCCSEP=CLIENT.REC<170,VAL>    ; * JMK04
                     IF MIS.VAR >= BCCAMT THEN     ; * JMK04
                        IF INDEX(BCCDIR,IOT,1) THEN          ; * JMK04
                           IF TRIM(BCCADD)#'' THEN           ; * JMK64
                              LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE  ; * JMK42
                                 INS BCCADD BEFORE BCCADDS<1,BPOS>     ; * JMK42
                                 INS BCCNAME BEFORE BCCNAMES<1,BPOS>   ; * JMK42
                                 INS BCCTITLE BEFORE BCCTITLES<1,BPOS>           ; * JMK42
                              END        ; * JMK42
                           END           ; * JMK64
                        END              ; * JMK04
                     END                 ; * JMK04
                  NEXT VAL               ; * JMK04
               END                       ; * JMK04
*              CONVERT @VM TO ';' IN TOADDS        ; * JMK42 ; * JMK61
*              CONVERT @VM TO ';' IN CCADDS        ; * JMK42 ; * JMK61
*              CONVERT @VM TO ';' IN BCCADDS       ; * JMK42 ; * JMK61
               EMAIL.ADDS=''             ; * JMK61
               EMAIL.NAMES=''            ; * JMK61
               EMAIL.TITLES=''           ; * JMK61
               TO.NVAL=DCOUNT(TOADDS,@VM)          ; * JMK61
               FOR TO.VAL=1 TO TO.NVAL   ; * JMK61
                  TO.ADD=OCONV(TOADDS<1,TO.VAL>,'MCL')       ; * JMK61
                  TO.NAME=TONAMES<1,TO.VAL>        ; * JMK61
                  TO.TITLE=TOTITLES<1,TO.VAL>      ; * JMK61
                  IF TRIM(TO.ADD)#'' THEN          ; * JMK64
                     LOCATE TO.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE    ; * JMK61
                        INS TO.ADD BEFORE EMAIL.ADDS<1,EPOS>           ; * JMK61
                        INS TO.NAME BEFORE EMAIL.NAMES<1,EPOS>         ; * JMK61
                        INS TO.TITLE BEFORE EMAIL.TITLES<1,EPOS>       ; * JMK61
                     END                 ; * JMK61
                  END                    ; * JMK64
               NEXT TO.VAL               ; * JMK61
               CC.NVAL=DCOUNT(CCADDS,@VM)          ; * JMK61
               FOR CC.VAL=1 TO CC.NVAL   ; * JMK61
                  TO.ADD=OCONV(CCADDS<1,CC.VAL>,'MCL')       ; * JMK61
                  TO.NAME=CCNAMES<1,CC.VAL>        ; * JMK61
                  TO.TITLE=CCTITLES<1,CC.VAL>      ; * JMK61
                  IF TRIM(TO.ADD)#'' THEN          ; * JMK64
                     LOCATE TO.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE    ; * JMK61
                        INS TO.ADD BEFORE EMAIL.ADDS<1,EPOS>           ; * JMK61
                        INS TO.NAME BEFORE EMAIL.NAMES<1,EPOS>         ; * JMK61
                        INS TO.TITLE BEFORE EMAIL.TITLES<1,EPOS>       ; * JMK61
                     END                 ; * JMK61
                  END                    ; * JMK64
               NEXT CC.VAL               ; * JMK61
               BCC.NVAL=DCOUNT(BCCADDS,@VM)        ; * JMK61
               FOR BCC.VAL=1 TO BCC.NVAL           ; * JMK61
                  TO.ADD=OCONV(BCCADDS<1,BCC.VAL>,'MCL')     ; * JMK61
                  TO.NAME=BCCNAMES<1,BCC.VAL>      ; * JMK61
                  TO.TITLE=BCCTITLES<1,BCC.VAL>    ; * JMK61
                  IF TRIM(TO.ADD)#'' THEN          ; * JMK64
                     LOCATE TO.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE    ; * JMK61
                        INS TO.ADD BEFORE EMAIL.ADDS<1,EPOS>           ; * JMK61
                        INS TO.NAME BEFORE EMAIL.NAMES<1,EPOS>         ; * JMK61
                        INS TO.TITLE BEFORE EMAIL.TITLES<1,EPOS>       ; * JMK61
                     END                 ; * JMK61
                  END                    ; * JMK64
               NEXT BCC.VAL              ; * JMK61
               IF EMAIL.ADDS#'' THEN     ; * JMK67
                  AFS.ADD='BBarker@afs.net'        ; * JMK67
                  AFS.NAME='Brian Barker'          ; * JMK67
                  AFS.TITLE='President'  ; * JMK67
                  LOCATE AFS.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE      ; * JMK67
                     INS AFS.ADD BEFORE EMAIL.ADDS<1,EPOS>   ; * JMK67
                     INS AFS.NAME BEFORE EMAIL.NAMES<1,EPOS>           ; * JMK67
                     INS AFS.TITLE BEFORE EMAIL.TITLES<1,EPOS>         ; * JMK67
                  END                    ; * JMK67
                  AFS.NAME='Owen Holman'           ; * JMK67
                  AFS.TITLE='Vice-President of Information Technology'           ; * JMK67
                  LOCATE AFS.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE      ; * JMK67
                     INS AFS.ADD BEFORE EMAIL.ADDS<1,EPOS>   ; * JMK67
                     INS AFS.NAME BEFORE EMAIL.NAMES<1,EPOS>           ; * JMK67
                     INS AFS.TITLE BEFORE EMAIL.TITLES<1,EPOS>         ; * JMK67
                  END                    ; * JMK67
                  IF SERV.SLSMAN.MGR.EMAIL#'' THEN           ; * JMK73
                     MGR.ADD=SERV.SLSMAN.MGR.EMAIL           ; * JMK73
                     MGR.NAME=''         ; * JMK73
                     MGR.TITLE=''        ; * JMK73
                     LOCATE MGR.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE   ; * JMK73
                        INS MGR.ADD BEFORE EMAIL.ADDS<1,EPOS>          ; * JMK73
                        INS MGR.NAME BEFORE EMAIL.NAMES<1,EPOS>        ; * JMK73
                        INS MGR.TITLE BEFORE EMAIL.TITLES<1,EPOS>      ; * JMK73
                     END                 ; * JMK73
                  END                    ; * JMK73
               END                       ; * JMK67
*              MIS.EMAIL.ID=TOADDS:'|':CCADDS:'|':BCCADDS:'|':CLIENT:'||':BEG.DATE:'|':END.DATE      ; * JMK04; * JMK05; * JMK06 ; * JMK11 ; * JMK46
               MIS.EMAIL.ID=CLIENT:'|':BEG.DATE:'|':END.DATE           ; * JMK04; * JMK05; * JMK06 ; * JMK11 ; * JMK46
*              ADD.LST=TOADDS:'|':CCADDS:'|':BCCADDS         ; * JMK46 ; * JMK61
*              IF OCONV(MIS.EMAIL.ID,'G|3')#"||" THEN        ; * JMK04; * JMK05; * JMK06 ; * JMK46
*              IF OCONV(ADD.LST,'G|3')#"||" THEN   ; * JMK04; * JMK05; * JMK06 ; * JMK46
               READU MIS.EMAIL.REC FROM F.MIS.EMAIL,MIS.EMAIL.ID ELSE MIS.EMAIL.REC=''     ; * JMK04
               UP.ARRAY=MIS.EMAIL.REC    ; * JMK04
               IF MIS.EMAIL.REC=''THEN UP.ARRAY="*NEW*"      ; * JMK04
               UP.ID='FB.MISROUTE.EMAIL*':MIS.EMAIL.ID ; GOSUB UPDATE.UP.FILE    ; * JMK04
*              UP.ID='FB.MISROUTE.EMAIL.HIST*':MIS.EMAIL.ID ; GOSUB UPDATE.UP.FILE      ; * JMK04 ; * JMK46
               EMAIL.NVAL=DCOUNT(EMAIL.ADDS<1>,@VM)          ; * JMK61
               FOR EMAIL.VAL=1 TO EMAIL.NVAL       ; * JMK61
                  ADD.LST=EMAIL.ADDS<1,EMAIL.VAL>  ; * JMK61
                  LOCATE(ADD.LST,MIS.EMAIL.REC,30;APOS) ELSE           ; * JMK46
                     APOS=DCOUNT(MIS.EMAIL.REC<30>,@VM)+1    ; * JMK46
                     FOR ATT=1 TO 29     ; * JMK46
                        MIS.EMAIL.REC<ATT,APOS>=''           ; * JMK46
                     NEXT ATT
                     MIS.EMAIL.REC<30,APOS>=ADD.LST          ; * JMK46
                  END                    ; * JMK46
                  NXTSVAL=DCOUNT(MIS.EMAIL.REC<1,APOS>,@SVM)+1         ; * JMK46
                  MIS.EMAIL.REC<1,APOS,NXTSVAL>=CARRIER.NAME           ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<2,APOS,NXTSVAL>=PRO.NO       ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<3,APOS,NXTSVAL>=BILL.DATE    ; * JMK04 ; * JMK46
*                 MIS.EMAIL.REC<4,APOS,NXTSVAL>=ACTUAL.CHG   ; * JMK04 ; * JMK46 ; * JMK108
                  MIS.EMAIL.REC<4,APOS,NXTSVAL>=TRUE.COST    ; * JMK04 ; * JMK46 ; * JMK108
                  MIS.EMAIL.REC<5,APOS,NXTSVAL>=APRV.CARRIER.NAME      ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<6,APOS,NXTSVAL>=MISROUTE.AMT           ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<7,APOS,NXTSVAL>=MIS.VAR      ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<8,APOS,NXTSVAL>=BILL.ID      ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<9,APOS,NXTSVAL>=APRV.CARRIER           ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<10,APOS,NXTSVAL>=PO.BOL      ; * JMK04 ; * JMK46
                  MIS.EMAIL.REC<11,APOS,NXTSVAL>=IOT         ; * JMK04 ; * JMK46
*                 MIS.EMAIL.REC<12,APOS,NXTSVAL>=CHANGE(TONAMES,@VM,';')         ; * JMK04 ; * JMK46 ; * JMK61
*                 MIS.EMAIL.REC<13,APOS,NXTSVAL>=CHANGE(TOTITLES,@VM,';')        ; * JMK04 ; * JMK46 ; * JMK61
*                 MIS.EMAIL.REC<14,APOS,NXTSVAL>=CHANGE(CCNAMES,@VM,';')         ; * JMK04 ; * JMK46 ; * JMK61
*                 MIS.EMAIL.REC<15,APOS,NXTSVAL>=CHANGE(CCTITLES,@VM,';')        ; * JMK04 ; * JMK46 ; * JMK61
*                 MIS.EMAIL.REC<16,APOS,NXTSVAL>=CHANGE(BCCNAMES,@VM,';')        ; * JMK04 ; * JMK46 ; * JMK61
*                 MIS.EMAIL.REC<17,APOS,NXTSVAL>=CHANGE(BCCTITLES,@VM,';')       ; * JMK04 ; * JMK46 ; * JMK61
                  MIS.EMAIL.REC<12,APOS,NXTSVAL>=EMAIL.NAMES<1,EMAIL.VAL>        ; * JMK04 ; * JMK46 ; * JMK61
                  MIS.EMAIL.REC<13,APOS,NXTSVAL>=EMAIL.TITLES<1,EMAIL.VAL>       ; * JMK04 ; * JMK46 ; * JMK61
                  MIS.EMAIL.REC<14,APOS,NXTSVAL>=""          ; * JMK04 ; * JMK46 ; * JMK61
                  MIS.EMAIL.REC<15,APOS,NXTSVAL>=""          ; * JMK04 ; * JMK46 ; * JMK61
                  MIS.EMAIL.REC<16,APOS,NXTSVAL>=""          ; * JMK04 ; * JMK46 ; * JMK61
                  MIS.EMAIL.REC<17,APOS,NXTSVAL>=""          ; * JMK04 ; * JMK46 ; * JMK61
                  MIS.EMAIL.REC<18,APOS,NXTSVAL>=VC.REC<1>   ; * JMK07 ; * JMK46
                  MIS.EMAIL.REC<19,APOS,NXTSVAL>=VC.ID:'-':VC.REC<5>:', ':VC.REC<6>        ; * JMK07 ; * JMK46
                  IF DIV.REC(16)='' THEN           ; * JMK09
                     BEGIN CASE          ; * JMK09
                        CASE IOT='I'     ; * JMK09
                           CITY=BILL.REC<28>       ; * JMK09
                           ST=BILL.REC<26>         ; * JMK09
                        CASE IOT='O'     ; * JMK09
                           CITY=BILL.REC<27>       ; * JMK09
                           ST=BILL.REC<25>         ; * JMK09
                        CASE 1           ; * JMK09
                           CITY=''       ; * JMK09
                           ST=''         ; * JMK09
                     END CASE            ; * JMK09
                     MIS.EMAIL.REC<20,APOS,NXTSVAL>=CITY:', ':ST       ; * JMK09 ; * JMK46
                  END ELSE               ; * JMK09
                     MIS.EMAIL.REC<20,APOS,NXTSVAL>=DIV.REC(16):', ':DIV.REC(17)           ; * JMK09 ; * JMK46
                     MIS.EMAIL.REC<23,APOS,NXTSVAL>=DIV      ; * JMK10 ; * JMK46
                  END                    ; * JMK09
                  MIS.EMAIL.REC<21,APOS,NXTSVAL>=BEG.DATE    ; * JMK09 ; * JMK46
                  MIS.EMAIL.REC<22,APOS,NXTSVAL>=END.DATE    ; * JMK09 ; * JMK46
                  MIS.EMAIL.REC<24,APOS,NXTSVAL>=ORIG.ZIP    ; * JMK17 ; * JMK46
                  MIS.EMAIL.REC<25,APOS,NXTSVAL>=ORIG.CITY   ; * JMK17 ; * JMK46
                  MIS.EMAIL.REC<26,APOS,NXTSVAL>=ORIG.ST     ; * JMK17 ; * JMK46
                  MIS.EMAIL.REC<27,APOS,NXTSVAL>=DEST.ZIP    ; * JMK17 ; * JMK46
                  MIS.EMAIL.REC<28,APOS,NXTSVAL>=DEST.CITY   ; * JMK17 ; * JMK46
                  MIS.EMAIL.REC<29,APOS,NXTSVAL>=DEST.ST     ; * JMK17 ; * JMK46
               NEXT EMAIL.VAL            ; * JMK61
               WRITE MIS.EMAIL.REC ON F.MIS.EMAIL,MIS.EMAIL.ID         ; * JMK04
               WRITE MIS.EMAIL.REC ON F.MIS.EMAIL.HIST,MIS.EMAIL.ID    ; * JMK04
*              END                       ; * JMK04 ; * JMK46
            END                          ; * JMK04
*
* REVIEW LCC AMOUNTS AND RECIPIENTS HERE
*
            IF LCC.AMT LT TRUE.COST THEN           ; * JMK117
               LCC.VAR=TRUE.COST-LCC.AMT           ; * JMK117
               IF VC.ID#'' THEN          ; * JMK117
                  READ VC.REC FROM F.VC,VC.ID THEN           ; * JMK117
                     IF IOT = 'I' THEN   ; * JMK117
                        IF VC.REC<24>#'' THEN      ; * JMK117
                           NVAL=DCOUNT(VC.REC<24>,@VM)       ; * JMK117
                           FOR VAL=1 TO NVAL       ; * JMK117
                              TOADD=VC.REC<24,VAL>           ; * JMK117
                              TONAME=VC.REC<27,VAL>          ; * JMK117
                              TOTITLE=VC.REC<28,VAL>         ; * JMK117
                              TODIR=OCONV(VC.REC<30,VAL>,'MCU')        ; * JMK117
                              TOSEP=VC.REC<31,VAL>           ; * JMK117
                              IF INDEX(TODIR,IOT,1) THEN     ; * JMK117
                                 IF TRIM(TOADD)#'' THEN      ; * JMK117
                                    LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE        ; * JMK117
                                       INS TOADD BEFORE TOADDS<1,TPOS>           ; * JMK117
                                       INS TONAME BEFORE TONAMES<1,TPOS>         ; * JMK117
                                       INS TOTITLE BEFORE TOTITLES<1,TPOS>       ; * JMK117
                                    END  ; * JMK117
                                 END     ; * JMK117
                              END        ; * JMK117
                           NEXT VAL      ; * JMK117
                        END              ; * JMK117
                        IF VC.REC<25>#'' THEN      ; * JMK117
                           NVAL=DCOUNT(VC.REC<25>,@VM)       ; * JMK117
                           FOR VAL=1 TO NVAL       ; * JMK117
                              CCADD=VC.REC<25,VAL>           ; * JMK117
                              CCNAME=VC.REC<32,VAL>          ; * JMK117
                              CCTITLE=VC.REC<33,VAL>         ; * JMK117
                              CCDIR=OCONV(VC.REC<35,VAL>,'MCU')        ; * JMK117
                              CCSEP=VC.REC<36,VAL>           ; * JMK117
                              IF INDEX(CCDIR,IOT,1) THEN     ; * JMK117
                                 IF TRIM(CCADD)#'' THEN      ; * JMK117
                                    LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE        ; * JMK117
                                       INS CCADD BEFORE CCADDS<1,CPOS>           ; * JMK117
                                       INS CCNAME BEFORE CCNAMES<1,CPOS>         ; * JMK117
                                       INS CCTITLE BEFORE CCTITLES<1,CPOS>       ; * JMK117
                                    END  ; * JMK117
                                 END     ; * JMK117
                              END        ; * JMK117
                           NEXT VAL      ; * JMK117
                        END              ; * JMK117
                        IF VC.REC<26>#'' THEN      ; * JMK117
                           NVAL=DCOUNT(VC.REC<26>,@VM)       ; * JMK117
                           FOR VAL=1 TO NVAL       ; * JMK117
                              BCCADD=VC.REC<26,VAL>          ; * JMK117
                              BCCNAME=VC.REC<37,VAL>         ; * JMK117
                              BCCTITLE=VC.REC<38,VAL>        ; * JMK117
                              BCCDIR=OCONV(VC.REC<40,VAL>,'MCU')       ; * JMK117
                              BCCSEP=VC.REC<41,VAL>          ; * JMK117
                              IF INDEX(BCCDIR,IOT,1) THEN    ; * JMK117
                                 IF TRIM(BCCADD)#'' THEN     ; * JMK117
                                    LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE      ; * JMK117
                                       INS BCCADD BEFORE BCCADDS<1,BPOS>         ; * JMK117
                                       INS BCCNAME BEFORE BCCNAMES<1,BPOS>       ; * JMK117
                                       INS BCCTITLE BEFORE BCCTITLES<1,BPOS>     ; * JMK117
                                    END  ; * JMK117
                                 END     ; * JMK117
                              END        ; * JMK117
                           NEXT VAL      ; * JMK117
                        END              ; * JMK117
                     END                 ; * JMK117
                  END ELSE               ; * JMK117
                     VC.REC=''           ; * JMK117
                  END                    ; * JMK117
               END                       ; * JMK117
               IF DIV.REC(27)#'' THEN    ; * JMK117
                  NVAL=DCOUNT(DIV.REC(27),@VM)     ; * JMK117
                  FOR VAL=1 TO NVAL      ; * JMK117
                     TOADD=DIV.REC(27)<1,VAL>      ; * JMK117
                     TONAME=DIV.REC(30)<1,VAL>     ; * JMK117
                     TOTITLE=DIV.REC(31)<1,VAL>    ; * JMK117
                     TODIR=OCONV(DIV.REC(33)<1,VAL>,'MCU')   ; * JMK117
                     TOSEP=DIV.REC(34)<1,VAL>      ; * JMK117
                     IF INDEX(TODIR,IOT,1) THEN    ; * JMK117
                        IF TRIM(TOADD)#'' THEN     ; * JMK117
                           LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE       ; * JMK117
                              INS TOADD BEFORE TOADDS<1,TPOS>          ; * JMK117
                              INS TONAME BEFORE TONAMES<1,TPOS>        ; * JMK117
                              INS TOTITLE BEFORE TOTITLES<1,TPOS>      ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     END                 ; * JMK117
                  NEXT VAL               ; * JMK117
               END                       ; * JMK117
               IF DIV.REC(28)#'' THEN    ; * JMK117
                  NVAL=DCOUNT(DIV.REC(28),@VM)     ; * JMK117
                  FOR VAL=1 TO NVAL      ; * JMK117
                     CCADD=DIV.REC(28)<1,VAL>      ; * JMK117
                     CCNAME=DIV.REC(35)<1,VAL>     ; * JMK117
                     CCTITLE=DIV.REC(36)<1,VAL>    ; * JMK117
                     CCDIR=OCONV(DIV.REC(38)<1,VAL>,'MCU')   ; * JMK117
                     CCSEP=DIV.REC(39)<1,VAL>      ; * JMK117
                     IF INDEX(CCDIR,IOT,1) THEN    ; * JMK117
                        IF TRIM(CCADD)#'' THEN     ; * JMK117
                           LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE       ; * JMK117
                              INS CCADD BEFORE CCADDS<1,CPOS>          ; * JMK117
                              INS CCNAME BEFORE CCNAMES<1,CPOS>        ; * JMK117
                              INS CCTITLE BEFORE CCTITLES<1,CPOS>      ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     END                 ; * JMK117
                  NEXT VAL               ; * JMK117
               END                       ; * JMK117
               IF DIV.REC(29)#'' THEN    ; * JMK117
                  NVAL=DCOUNT(DIV.REC(29),@VM)     ; * JMK117
                  FOR VAL=1 TO NVAL      ; * JMK117
                     BCCADD=DIV.REC(29)<1,VAL>     ; * JMK117
                     BCCNAME=DIV.REC(40)<1,VAL>    ; * JMK117
                     BCCTITLE=DIV.REC(41)<1,VAL>   ; * JMK117
                     BCCDIR=OCONV(DIV.REC(43)<1,VAL>,'MCU')  ; * JMK117
                     BCCSEP=DIV.REC(44)<1,VAL>     ; * JMK117
                     IF INDEX(BCCDIR,IOT,1) THEN   ; * JMK117
                        IF TRIM(BCCADD)#'' THEN    ; * JMK117
                           LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE     ; * JMK117
                              INS BCCADD BEFORE BCCADDS<1,BPOS>        ; * JMK117
                              INS BCCNAME BEFORE BCCNAMES<1,BPOS>      ; * JMK117
                              INS BCCTITLE BEFORE BCCTITLES<1,BPOS>    ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     END                 ; * JMK117
                  NEXT VAL               ; * JMK117
               END                       ; * JMK117
               IF CLIENT="01706" OR CLIENT="00866" THEN      ; * JMK117
                  IF REG.CODE.REC(27)#'' THEN      ; * JMK117
                     NVAL=DCOUNT(REG.CODE.REC(27),@VM)       ; * JMK117
                     FOR VAL=1 TO NVAL   ; * JMK117
                        TOADD=REG.CODE.REC(27)<1,VAL>        ; * JMK117
                        TONAME=REG.CODE.REC(30)<1,VAL>       ; * JMK117
                        TOTITLE=REG.CODE.REC(31)<1,VAL>      ; * JMK117
                        TODIR=OCONV(REG.CODE.REC(33)<1,VAL>,'MCU')     ; * JMK117
                        TOSEP=REG.CODE.REC(34)<1,VAL>        ; * JMK117
                        IF INDEX(TODIR,IOT,1) THEN           ; * JMK117
                           IF TRIM(TOADD)#'' THEN  ; * JMK117
                              LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE    ; * JMK117
                                 INS TOADD BEFORE TOADDS<1,TPOS>       ; * JMK117
                                 INS TONAME BEFORE TONAMES<1,TPOS>     ; * JMK117
                                 INS TOTITLE BEFORE TOTITLES<1,TPOS>   ; * JMK117
                              END        ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     NEXT VAL            ; * JMK117
                  END                    ; * JMK117
                  IF REG.CODE.REC(28)#'' THEN      ; * JMK117
                     NVAL=DCOUNT(REG.CODE.REC(28),@VM)       ; * JMK117
                     FOR VAL=1 TO NVAL   ; * JMK117
                        CCADD=REG.CODE.REC(28)<1,VAL>        ; * JMK117
                        CCNAME=REG.CODE.REC(35)<1,VAL>       ; * JMK117
                        CCTITLE=REG.CODE.REC(36)<1,VAL>      ; * JMK117
                        CCDIR=OCONV(REG.CODE.REC(38)<1,VAL>,'MCU')     ; * JMK117
                        CCSEP=REG.CODE.REC(39)<1,VAL>        ; * JMK117
                        IF INDEX(CCDIR,IOT,1) THEN           ; * JMK117
                           IF TRIM(CCADD)#'' THEN  ; * JMK117
                              LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE    ; * JMK117
                                 INS CCADD BEFORE CCADDS<1,CPOS>       ; * JMK117
                                 INS CCNAME BEFORE CCNAMES<1,CPOS>     ; * JMK117
                                 INS CCTITLE BEFORE CCTITLES<1,CPOS>   ; * JMK117
                              END        ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     NEXT VAL            ; * JMK117
                  END                    ; * JMK117
                  IF REG.CODE.REC(29)#'' THEN      ; * JMK117
                     NVAL=DCOUNT(REG.CODE.REC(29),@VM)       ; * JMK117
                     FOR VAL=1 TO NVAL   ; * JMK117
                        BCCADD=REG.CODE.REC(29)<1,VAL>       ; * JMK117
                        BCCNAME=REG.CODE.REC(40)<1,VAL>      ; * JMK117
                        BCCTITLE=REG.CODE.REC(41)<1,VAL>     ; * JMK117
                        BCCDIR=OCONV(REG.CODE.REC(43)<1,VAL>,'MCU')    ; * JMK117
                        BCCSEP=REG.CODE.REC(44)<1,VAL>       ; * JMK117
                        IF INDEX(BCCDIR,IOT,1) THEN          ; * JMK117
                           IF TRIM(BCCADD)#'' THEN           ; * JMK117
                              LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE  ; * JMK117
                                 INS BCCADD BEFORE BCCADDS<1,BPOS>     ; * JMK117
                                 INS BCCNAME BEFORE BCCNAMES<1,BPOS>   ; * JMK117
                                 INS BCCTITLE BEFORE BCCTITLES<1,BPOS>           ; * JMK117
                              END        ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     NEXT VAL            ; * JMK117
                  END                    ; * JMK117
               END                       ; * JMK117
               IF CLIENT.REC<153>#'' THEN          ; * JMK117
                  NVAL=DCOUNT(CLIENT.REC<153>,@VM)           ; * JMK117
                  FOR VAL=1 TO NVAL      ; * JMK117
                     TOADD=CLIENT.REC<153,VAL>     ; * JMK117
                     TONAME=CLIENT.REC<156,VAL>    ; * JMK117
                     TOTITLE=CLIENT.REC<157,VAL>   ; * JMK117
                     TODIR=OCONV(CLIENT.REC<159,VAL>,'MCU')  ; * JMK117
                     TOSEP=CLIENT.REC<160,VAL>     ; * JMK117
                     IF INDEX(TODIR,IOT,1) THEN    ; * JMK117
                        IF TRIM(TOADD)#'' THEN     ; * JMK117
                           LOCATE(TOADD,TOADDS,1;TPOS;'AL') ELSE       ; * JMK117
                              INS TOADD BEFORE TOADDS<1,TPOS>          ; * JMK117
                              INS TONAME BEFORE TONAMES<1,TPOS>        ; * JMK117
                              INS TOTITLE BEFORE TOTITLES<1,TPOS>      ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     END                 ; * JMK117
                  NEXT VAL               ; * JMK117
               END                       ; * JMK117
               IF CLIENT.REC<154>#'' THEN          ; * JMK117
                  NVAL=DCOUNT(CLIENT.REC<154>,@VM)           ; * JMK117
                  FOR VAL=1 TO NVAL      ; * JMK117
                     CCADD=CLIENT.REC<154,VAL>     ; * JMK117
                     CCNAME=CLIENT.REC<161,VAL>    ; * JMK117
                     CCTITLE=CLIENT.REC<162,VAL>   ; * JMK117
                     CCDIR=OCONV(CLIENT.REC<164,VAL>,'MCU')  ; * JMK117
                     CCSEP=CLIENT.REC<165,VAL>     ; * JMK117
                     IF INDEX(CCDIR,IOT,1) THEN    ; * JMK117
                        IF TRIM(CCADD)#'' THEN     ; * JMK117
                           LOCATE(CCADD,CCADDS,1;CPOS;'AL') ELSE       ; * JMK117
                              INS CCADD BEFORE CCADDS<1,CPOS>          ; * JMK117
                              INS CCNAME BEFORE CCNAMES<1,CPOS>        ; * JMK117
                              INS CCTITLE BEFORE CCTITLES<1,CPOS>      ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     END                 ; * JMK117
                  NEXT VAL               ; * JMK117
               END                       ; * JMK117
               IF CLIENT.REC<155>#'' THEN          ; * JMK117
                  NVAL=DCOUNT(CLIENT.REC<155>,@VM)           ; * JMK117
                  FOR VAL=1 TO NVAL      ; * JMK117
                     BCCADD=CLIENT.REC<155,VAL>    ; * JMK117
                     BCCNAME=CLIENT.REC<166,VAL>   ; * JMK117
                     BCCTITLE=CLIENT.REC<167,VAL>  ; * JMK117
                     BCCDIR=OCONV(CLIENT.REC<169,VAL>,'MCU')           ; * JMK117
                     BCCSEP=CLIENT.REC<170,VAL>    ; * JMK117
                     IF INDEX(BCCDIR,IOT,1) THEN   ; * JMK117
                        IF TRIM(BCCADD)#'' THEN    ; * JMK117
                           LOCATE(BCCADD,BCCADDS,1;BPOS;'AL') ELSE     ; * JMK117
                              INS BCCADD BEFORE BCCADDS<1,BPOS>        ; * JMK117
                              INS BCCNAME BEFORE BCCNAMES<1,BPOS>      ; * JMK117
                              INS BCCTITLE BEFORE BCCTITLES<1,BPOS>    ; * JMK117
                           END           ; * JMK117
                        END              ; * JMK117
                     END                 ; * JMK117
                  NEXT VAL               ; * JMK117
               END                       ; * JMK117
               EMAIL.ADDS=''             ; * JMK117
               EMAIL.NAMES=''            ; * JMK117
               EMAIL.TITLES=''           ; * JMK117
               TO.NVAL=DCOUNT(TOADDS,@VM)          ; * JMK117
               FOR TO.VAL=1 TO TO.NVAL   ; * JMK117
                  TO.ADD=OCONV(TOADDS<1,TO.VAL>,'MCL')       ; * JMK117
                  TO.NAME=TONAMES<1,TO.VAL>        ; * JMK117
                  TO.TITLE=TOTITLES<1,TO.VAL>      ; * JMK117
                  IF TRIM(TO.ADD)#'' THEN          ; * JMK117
                     LOCATE TO.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE    ; * JMK117
                        INS TO.ADD BEFORE EMAIL.ADDS<1,EPOS>           ; * JMK117
                        INS TO.NAME BEFORE EMAIL.NAMES<1,EPOS>         ; * JMK117
                        INS TO.TITLE BEFORE EMAIL.TITLES<1,EPOS>       ; * JMK117
                     END                 ; * JMK117
                  END                    ; * JMK117
               NEXT TO.VAL               ; * JMK117
               CC.NVAL=DCOUNT(CCADDS,@VM)          ; * JMK117
               FOR CC.VAL=1 TO CC.NVAL   ; * JMK117
                  TO.ADD=OCONV(CCADDS<1,CC.VAL>,'MCL')       ; * JMK117
                  TO.NAME=CCNAMES<1,CC.VAL>        ; * JMK117
                  TO.TITLE=CCTITLES<1,CC.VAL>      ; * JMK117
                  IF TRIM(TO.ADD)#'' THEN          ; * JMK117
                     LOCATE TO.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE    ; * JMK117
                        INS TO.ADD BEFORE EMAIL.ADDS<1,EPOS>           ; * JMK117
                        INS TO.NAME BEFORE EMAIL.NAMES<1,EPOS>         ; * JMK117
                        INS TO.TITLE BEFORE EMAIL.TITLES<1,EPOS>       ; * JMK117
                     END                 ; * JMK117
                  END                    ; * JMK117
               NEXT CC.VAL               ; * JMK117
               BCC.NVAL=DCOUNT(BCCADDS,@VM)        ; * JMK117
               FOR BCC.VAL=1 TO BCC.NVAL           ; * JMK117
                  TO.ADD=OCONV(BCCADDS<1,BCC.VAL>,'MCL')     ; * JMK117
                  TO.NAME=BCCNAMES<1,BCC.VAL>      ; * JMK117
                  TO.TITLE=BCCTITLES<1,BCC.VAL>    ; * JMK117
                  IF TRIM(TO.ADD)#'' THEN          ; * JMK117
                     LOCATE TO.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE    ; * JMK117
                        INS TO.ADD BEFORE EMAIL.ADDS<1,EPOS>           ; * JMK117
                        INS TO.NAME BEFORE EMAIL.NAMES<1,EPOS>         ; * JMK117
                        INS TO.TITLE BEFORE EMAIL.TITLES<1,EPOS>       ; * JMK117
                     END                 ; * JMK117
                  END                    ; * JMK117
               NEXT BCC.VAL              ; * JMK117
               IF EMAIL.ADDS#'' THEN     ; * JMK117
                  AFS.ADD='BBarker@afs.net'        ; * JMK117
                  AFS.NAME='Brian Barker'          ; * JMK117
                  AFS.TITLE='President'  ; * JMK117
                  LOCATE AFS.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE      ; * JMK117
                     INS AFS.ADD BEFORE EMAIL.ADDS<1,EPOS>   ; * JMK117
                     INS AFS.NAME BEFORE EMAIL.NAMES<1,EPOS>           ; * JMK117
                     INS AFS.TITLE BEFORE EMAIL.TITLES<1,EPOS>         ; * JMK117
                  END                    ; * JMK117
                  AFS.ADD='OHolman@afs.net'        ; * JMK117
                  AFS.NAME='Owen Holman'           ; * JMK117
                  AFS.TITLE='Vice-President of Information Technology'           ; * JMK117
                  LOCATE AFS.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE      ; * JMK117
                     INS AFS.ADD BEFORE EMAIL.ADDS<1,EPOS>   ; * JMK117
                     INS AFS.NAME BEFORE EMAIL.NAMES<1,EPOS>           ; * JMK117
                     INS AFS.TITLE BEFORE EMAIL.TITLES<1,EPOS>         ; * JMK117
                  END                    ; * JMK117
                  IF SERV.SLSMAN.MGR.EMAIL#'' THEN           ; * JMK117
                     MGR.ADD=SERV.SLSMAN.MGR.EMAIL           ; * JMK117
                     MGR.NAME=''         ; * JMK117
                     MGR.TITLE=''        ; * JMK117
                     LOCATE MGR.ADD IN EMAIL.ADDS<1> BY 'AL' SETTING EPOS ELSE   ; * JMK117
                        INS MGR.ADD BEFORE EMAIL.ADDS<1,EPOS>          ; * JMK117
                        INS MGR.NAME BEFORE EMAIL.NAMES<1,EPOS>        ; * JMK117
                        INS MGR.TITLE BEFORE EMAIL.TITLES<1,EPOS>      ; * JMK117
                     END                 ; * JMK117
                  END                    ; * JMK117
               END                       ; * JMK117
               MIS.EMAIL.ID=CLIENT:'|':BEG.DATE:'|':END.DATE           ; * JMK117
               READU MIS.EMAIL.REC FROM F.MIS.EMAIL,MIS.EMAIL.ID ELSE MIS.EMAIL.REC=''     ; * JMK117
               UP.ARRAY=MIS.EMAIL.REC    ; * JMK117
               IF MIS.EMAIL.REC=''THEN UP.ARRAY="*NEW*"      ; * JMK117
               UP.ID='FB.MISROUTE.EMAIL*':MIS.EMAIL.ID ; GOSUB UPDATE.UP.FILE    ; * JMK117
               EMAIL.NVAL=DCOUNT(EMAIL.ADDS<1>,@VM)          ; * JMK117
               FOR EMAIL.VAL=1 TO EMAIL.NVAL       ; * JMK117
                  ADD.LST=EMAIL.ADDS<1,EMAIL.VAL>  ; * JMK117
                  LOCATE(ADD.LST,MIS.EMAIL.REC,30;APOS) ELSE           ; * JMK117
                     APOS=DCOUNT(MIS.EMAIL.REC<30>,@VM)+1    ; * JMK117
                     FOR ATT=1 TO 32     ; * JMK117
                        MIS.EMAIL.REC<ATT,APOS>=''           ; * JMK117
                     NEXT ATT            ; * JMK117
                     MIS.EMAIL.REC<30,APOS>=ADD.LST          ; * JMK117
                  END                    ; * JMK117
                  NXTSVAL=DCOUNT(MIS.EMAIL.REC<1,APOS>,@SVM)+1         ; * JMK117
                  MIS.EMAIL.REC<31,APOS,NXTSVAL>=BILL.ID     ; * JMK117
                  MIS.EMAIL.REC<32,APOS,NXTSVAL>=LCC.VAR     ; * JMK117
               NEXT EMAIL.VAL            ; * JMK117
               WRITE MIS.EMAIL.REC ON F.MIS.EMAIL,MIS.EMAIL.ID         ; * JMK117
               WRITE MIS.EMAIL.REC ON F.MIS.EMAIL.HIST,MIS.EMAIL.ID    ; * JMK117
            END                          ; * JMK117
         END                             ; * JMK04
      END                                ; * JMK04


*
* Update Truckload File
*
**********************************************************************
*                                                                    *
*    This has not be added to the unprocess process                  *
*                                                                    *
**********************************************************************
      IF TRANS.MODE = "6" THEN
*IF USER="DAVID" THEN CALL ELINE('PRESS BREAK')
*
* Carrier is Truckload ***
*
         IF NOT(NEVERPAY.FLAG) AND NOT(DUP) AND NOT(BAL.DUE) AND NOT(ADD.DUE) AND NOT(CR.MEMO) THEN
            IF BILL.REC<3>#'' AND BILL.REC<4>#'' THEN
*
* Make sure there is an orgin and dest zip ***
*
               TL.ID=BILL.REC<3>[1,5]:"*":BILL.REC<4>[1,5]
               READ TL.REC FROM F.TL.HIST,TL.ID ELSE TL.REC=''
               INS CLIENT BEFORE TL.REC<1,1>
               INS CARRIER BEFORE TL.REC<2,1>
               INS BILL.DATE BEFORE TL.REC<3,1>
               INS WEIGHT+0 BEFORE TL.REC<4,1>
               INS BILL.REC<19>+0 BEFORE TL.REC<5,1>
               INS ACTUAL.CHG+0 BEFORE TL.REC<6,1>
               INS IOT BEFORE TL.REC<7,1>
               WRITE TL.REC ON F.TL.HIST,TL.ID
            END
         END
      END

      GOTO 1000


*
* Update Client Incidental Charges and Update File
*
2000: LOCATE PROC.DATE IN CLIENT.REC<84> BY 'AR' SETTING POS ELSE POS=POS-1
      IF POS=0 THEN POS=1
      IF USER='MKERBOW' THEN             ; * JMK32
         WRITE DARRAY ON F.WORK,'DARRAY*':CLIENT   ; * JMK32
         WRITE INVOICE ON F.WORK,'INVOICE*':CLIENT           ; * JMK32
         WRITE DIV.DARRAY ON F.WORK,'DIV.DARRAY*':CLIENT     ; * JMK32
         WRITE DIV.INVOICE ON F.WORK,'DIV.INVOICE*':CLIENT   ; * JMK32
         WRITE DIV.COUNTS ON F.WORK,'DIV.COUNTS*':CLIENT     ; * JMK32
         WRITE DIV.LIST ON F.WORK,'DIV.LIST*':CLIENT         ; * JMK32
      END                                ; * JMK32
      CARRIER.COUNT=DCOUNT(CARRIERS,CHAR(254))
* ; * JMK32
* MAKE CALL TO EXTERNAL PROCESSING SUBROUTINE ; * JMK32
* ; * JMK32
      PVIN=''                            ; * JMK32
      PVOUT=''                           ; * JMK32
      PVIN<1>=BEG.DATE                   ; * JMK32
      PVIN<2>=END.DATE                   ; * JMK32
      PVIN<3>=PROC.DATE                  ; * JMK32
      PVIN<4>=DAYS                       ; * JMK32
      PVIN<5>=BILLS.COUNT                ; * JMK32
      PVIN<6>=CARRIER.COUNT              ; * JMK32
      PVIN<7>=DUP.COUNT                  ; * JMK32
      PVIN<8>=EDI.COUNT.ARRAY            ; * JMK32
      PVIN<9>=EDI.COUNT<1,1>             ; * JMK32
      PVIN<10>=EDI.MD.FEDEX.GROUND.COUNT           ; * JMK32
      PVIN<11>=EDI.COUNT.PARCEL.NON.FEDEX.AIR      ; * JMK32
      PVIN<12>=EDI.COUNT<1,2>            ; * JMK32
      PVIN<13>=HOLD.COUNT                ; * JMK32
      PVIN<14>=NEVERPAY.COUNT            ; * JMK32
      PVIN<15>=PR.BILLS.COUNT            ; * JMK32
      PVIN<16>=RELEASED.COUNT            ; * JMK32
      PVIN<17>=UPS.BILLS.COUNT           ; * JMK32
      PVIN<18>=UPS.TRACK.COUNT           ; * JMK32
      PVIN<19>=CHANGE(DIV.CODE,@AM,@VM)  ; * JMK32
      PVIN<20>=0                         ; * JMK66
      PVIN<21>=USER                      ; * JMK75
      PVIN<22>=DIV.LIST<1>               ; * JMK89
      PVIN<23>=DIV.LIST<2>               ; * JMK89
      CALL FB.PROCESS.CALC(PVIN,PVOUT,CLIENT,CLIENT.REC)     ; * JMK32
      CORP.FEES=PVOUT                    ; * JMK32
      POSTAGE=CORP.FEES<4>               ; * JMK32
      PR.PROCESS.FEE=CORP.FEES<10>       ; * JMK32
      PROCESS.FEE=CORP.FEES<14>          ; * JMK32
      PRE.AUDIT.FEE=CORP.FEES<15>        ; * JMK32
      WEEKLY.FLAT=CORP.FEES<17>          ; * JMK32
      WKLY.POSTAGE.FEE=CORP.FEES<18>     ; * JMK32
      AFSI.FEE=CORP.FEES<19>             ; * JMK32
      UPS.FEE=CORP.FEES<20>              ; * JMK32
      SERVICE.FEE=CORP.FEES<21>          ; * JMK32
      LOGISTICS.FEE=CORP.FEES<22>        ; * JMK32
      TRN.ALLOC.CODE=CORP.FEES<23>       ; * JMK51
      TRN.ALLOC.FEES=CORP.FEES<24>       ; * JMK51
      IF INV.LVL='D' THEN                ; * JMK32
         DIV.FEES=''                     ; * JMK32
         DVAL=DCOUNT(DIV.LIST<1>,@VM)    ; * JMK32
         FOR VAL=1 TO DVAL               ; * JMK32
            DIV.CARRIER.COUNT=DCOUNT(DIV.LIST<2,VAL>,@SVM)   ; * JMK32
            DIV.NEVERPAY.COUNT=DIV.COUNTS<1,VAL>   ; * JMK32
            DIV.DUP.COUNT=DIV.COUNTS<2,VAL>        ; * JMK32
            DIV.RELEASED.COUNT=DIV.COUNTS<3,VAL>   ; * JMK32
            DIV.HOLD.COUNT=DIV.COUNTS<4,VAL>       ; * JMK32
            DIV.BILLS.COUNT=DIV.COUNTS<5,VAL>      ; * JMK32
            DIV.PR.BILLS.COUNT=DIV.COUNTS<6,VAL>   ; * JMK32
            DIV.EDI.COUNT=''             ; * JMK32
            DIV.EDI.COUNT<1,1>=DIV.COUNTS<7,VAL>   ; * JMK32
            DIV.EDI.COUNT<1,2>=DIV.COUNTS<8,VAL>   ; * JMK32
            DIV.UPS.BILLS.COUNT=DIV.COUNTS<9,VAL>  ; * JMK32
            DIV.UPS.TRACK.COUNT=DIV.COUNTS<10,VAL>           ; * JMK32
            DIV.EDI.COUNT.ARRAY=DIV.COUNTS<11,VAL>           ; * JMK32
            DIV.EDI.MD.FEDEX.GROUND.COUNT=DIV.COUNTS<12,VAL>           ; * JMK32
            DIV.EDI.COUNT.PARCEL.NON.FEDEX.AIR=DIV.COUNTS<13,VAL>      ; * JMK32
            PVIN=''                      ; * JMK32
            PVOUT=''                     ; * JMK32
            PVIN<1>=BEG.DATE             ; * JMK32
            PVIN<2>=END.DATE             ; * JMK32
            PVIN<3>=PROC.DATE            ; * JMK32
            PVIN<4>=DAYS                 ; * JMK32
            PVIN<5>=DIV.BILLS.COUNT      ; * JMK32
            PVIN<6>=DIV.CARRIER.COUNT    ; * JMK32
            PVIN<7>=DIV.DUP.COUNT        ; * JMK32
            PVIN<8>=DIV.EDI.COUNT.ARRAY  ; * JMK32
            PVIN<9>=DIV.EDI.COUNT<1,1>   ; * JMK32
            PVIN<10>=DIV.EDI.MD.FEDEX.GROUND.COUNT           ; * JMK32
            PVIN<11>=DIV.EDI.COUNT.PARCEL.NON.FEDEX.AIR      ; * JMK32
            PVIN<12>=DIV.EDI.COUNT<1,2>  ; * JMK32
            PVIN<13>=DIV.HOLD.COUNT      ; * JMK32
            PVIN<14>=DIV.NEVERPAY.COUNT  ; * JMK32
            PVIN<15>=DIV.PR.BILLS.COUNT  ; * JMK32
            PVIN<16>=DIV.RELEASED.COUNT  ; * JMK32
            PVIN<17>=DIV.UPS.BILLS.COUNT           ; * JMK32
            PVIN<18>=DIV.UPS.TRACK.COUNT           ; * JMK32
*           PVIN<19>=1                   ; * JMK32 ; * JMK75
            PVIN<19>=DIV.LIST<1,VAL>     ; * JMK66 ; * JMK75
            PVIN<20>=1                   ; * JMK66
            PVIN<21>=USER                ; * JMK75
            PVIN<22>=DIV.LIST<1,VAL>     ; * JMK89
            PVIN<23>=DIV.LIST<2,VAL>     ; * JMK89
            CALL FB.PROCESS.CALC(PVIN,PVOUT,CLIENT,CLIENT.REC)         ; * JMK32
*           FOR ATT=1 TO 21              ; * JMK32 ; * JMK75
            DATT=DCOUNT(PVOUT,@AM)       ; * JMK75
            FOR ATT=1 TO DATT            ; * JMK75
               DIV.FEES<ATT,-1>=PVOUT<ATT>         ; * JMK32
            NEXT ATT                     ; * JMK32
         NEXT VAL                        ; * JMK32
         POSTAGE=SUM(DIV.FEES<4>)        ; * JMK32
         PR.PROCESS.FEE=SUM(DIV.FEES<10>)          ; * JMK32
         PROCESS.FEE=SUM(DIV.FEES<14>)   ; * JMK32
         PRE.AUDIT.FEE=SUM(DIV.FEES<15>)           ; * JMK32
         WEEKLY.FLAT=SUM(DIV.FEES<17>)   ; * JMK32
         WKLY.POSTAGE.FEE=SUM(DIV.FEES<18>)        ; * JMK32
         AFSI.FEE=SUM(DIV.FEES<19>)      ; * JMK32
         UPS.FEE=SUM(DIV.FEES<20>)       ; * JMK32
         SERVICE.FEE=SUM(DIV.FEES<21>)   ; * JMK32
         LOGISTICS.FEE=SUM(DIV.FEES<22>)           ; * JMK32
         TRN.ALLOC.CODE=DIV.FEES<23>     ; * JMK51
         TRN.ALLOC.FEES=DIV.FEES<24>     ; * JMK51
         IF TESTING OR USER='MKERBOW' THEN         ; * JMK32
            WRITE CORP.FEES ON F.WORK,'CORP.FEES*':CLIENT    ; * JMK32
            WRITE DIV.FEES ON F.WORK,'DIV.FEES*':CLIENT      ; * JMK32
         END                             ; * JMK32
      END                                ; * JMK32

      CLIENT.YTD<31>=CLIENT.YTD<31>+POSTAGE
      CLIENT.YTD<32>=CLIENT.YTD<32>+PROCESS.FEE+AFSI.FEE
*
      CLIENT.YTD<75>=CLIENT.YTD<75>+PRE.AUDIT.FEE  ; * JMK18
*KD
      CLIENT.YTD<33>=CLIENT.YTD<33>+SERVICE.FEE
      CLIENT.YTD<37>=CLIENT.YTD<37>+LOGISTICS.FEE
      CLIENT.YTD<53>=CLIENT.YTD<53>+UPS.FEE
*KD
      CLIENT.YTD<50>=CLIENT.YTD<50>+WKLY.POSTAGE.FEE
*KD
*
* Update year to date commissions
*
*     CLIENT.YTD<28>=(-CLIENT.YTD<10>*(CLIENT.REC<34,POS>/100))'R0'
*     CLIENT.YTD<29>=(-CLIENT.YTD<11>*(CLIENT.REC<33,POS>/100))'R0'
*     CLIENT.YTD<30>=(-CLIENT.YTD<12>*(CLIENT.REC<35,POS>/100))'R0'
*DF      DISC.COMM=(INVOICE<6> * (-CLIENT.REC<34,POS>/100))'R0'
*DF      OVR.CHG.COMM=(INVOICE<4> * (-CLIENT.REC<33,POS>/100))'R0'
*DF      CONSULT.COMM=(INVOICE<5> * (-CLIENT.REC<85,POS>/100))'R0'
      DISC.COMM=INVOICE<6>
      OVR.CHG.COMM=INVOICE<4>
      UPS.OVR.CHG.COMM = INVOICE<9>
      CONSULT.COMM=INVOICE<5>
      CLIENT.YTD<28>=CLIENT.YTD<28>+DISC.COMM
      CLIENT.YTD<29>=CLIENT.YTD<29>+OVR.CHG.COMM
      CLIENT.YTD<30>=CLIENT.YTD<30>+CONSULT.COMM
      CLIENT.YTD<54>=CLIENT.YTD<54>+UPS.OVR.CHG.COMM
      CLIENT.YTD<74>=CLIENT.YTD<74>+MGMT.SVC.COMM  ; * JMK12
      CLIENT.YTD<40,-1>=PROC.DATE
*NPR10 Start Changes

      DT.POS = DCOUNT(CLIENT.YTD<40>,@VM)          ; * NPR10
      CLIENT.YTD<82,DT.POS> = BILLS.COUNT          ; * NPR10
      CLIENT.YTD<83,DT.POS> = ACTUAL.CHG.TOTAL     ; * NPR10

*NPR10 End Changes
      IF BANK#'F' THEN                   ; * JMK90
         CLIENT.YTD<76>+=1               ; * JMK90
         CLIENT.YTD<77>+=ACTUAL.CHG      ; * JMK90
      END                                ; * JMK90
      IF END.DATE >= ICONV('09/15/08','D') THEN    ; * JMK98
         BEGIN CASE                      ; * JMK98
            CASE CLIENT='01078'          ; * JMK98
            CASE CLIENT='10356'          ; * JMK98
            CASE 1                       ; * JMK98
               IF CLIENT.REC<70,10>#'Y' THEN       ; * JMK98
                  CLIENT.REC<70,10>='Y'  ; * JMK98
                  ADJUST.CLIENT.ID=CLIENT:'*':DATE():'*':TIME():'*FB.TEH.JMK'    ; * JMK98
                  WRITE CLIENT.REC ON F.ADJUST.CLIENT,ADJUST.CLIENT.ID           ; * JMK98
               END                       ; * JMK98
         END CASE                        ; * JMK98
      END                                ; * JMK98
      WRITE CLIENT.REC ON F.CLIENTS,CLIENT
*
* Update Date XREF Files
*
      IF DOPEN.LIST#'' THEN
         IF CLIENT[1,2] # '99' THEN
            UP.ARRAY='*NEW*'
            UP.ID='FB.OPEN.DATE.XREF,':CLIENT:'*':PROC.DATE ; GOSUB UPDATE.UP.FILE
*NPR01            WRITE DOPEN.LIST ON F.OPEN.DATE.XREF,PROC.DATE
         END
      END
      IF DPROC.LIST#'' THEN
         UP.ARRAY='*NEW*'
         UP.ID='FB.PROC.DATE.XREF,':CLIENT:'*':PROC.DATE ; GOSUB UPDATE.UP.FILE
         WRITE DPROC.LIST ON F.PROC.DATE.XREF,PROC.DATE
      END

      IF NOT(TESTING) THEN               ; * JMK33
*
* Run Misroute Letters
*
         IF MR.LTRS THEN
*        DATA 'STD-FROM.PROCESS',CLIENT  ; * JMK03
            IF ONCE=1 THEN               ; * JMK97
               DATA 'ONCE-FROM.PROCESS-':END.DATE,CLIENT     ; * JMK97
            END ELSE                     ; * JMK97
               DATA 'STD-FROM.PROCESS-':END.DATE,CLIENT      ; * JMK03; * JMK04
            END                          ; * JMK97
            EXECUTE 'FB.MR.LTRS'
         END
         IF MR.EMAIL='Y' THEN            ; * JMK04
            IF ONCE=1 THEN               ; * JMK97
               DATA 'ONCE-FROM.PROCESS-':END.DATE,CLIENT     ; * JMK97
            END ELSE                     ; * JMK97
               DATA 'STD-FROM.PROCESS-':END.DATE,CLIENT      ; * JMK03; * JMK04
            END                          ; * JMK97
            EXECUTE 'FB.MR.EMAILS'       ; * JMK04
         END                             ; * JMK04
      END                                ; * JMK31



*
* Calculate current manual logistics fees
*
      PREC='SELECT FB.LOGISTICS WITH 1 GE "':BEG.DATE'D2/'
      PREC=PREC:'" AND WITH 1 LE "':END.DATE'D2/'
      PREC=PREC:'" AND WITH CLIENT# = "':CLIENT:'"'
      EXECUTE PREC PASSLIST CAPTURING OUTPUT
      NUM.ITMS = @SELECTED
      IF SYSTEM(11) THEN
         LOG.DONE = 0
         CLAIMS.DONE = 0
         LOOP
            READNEXT LOG.ID ELSE LOG.DONE = 1
         UNTIL LOG.DONE = 1 DO
            READ LOG.REC FROM F.LOGS, LOG.ID THEN
               INVOICE<8>=INVOICE<8>+LOG.REC<2>
            END
         REPEAT
      END
      CLIENT.YTD<41,-1> = INVOICE<8>

*
* Calculate current manual programming fees
*
      PREC='SELECT FB.PROG.FEE WITH 1 GE "':BEG.DATE'D2/'
      PREC=PREC:'" AND WITH 1 LE "':END.DATE'D2/'
      PREC=PREC:'" AND WITH CLIENT# = "':CLIENT:'"'
      EXECUTE PREC PASSLIST CAPTURING OUTPUT
      NUM.ITMS = @SELECTED
      IF SYSTEM(11) THEN
         PROG.DONE = 0
         LOOP
            READNEXT PROG.ID ELSE PROG.DONE = 1
         UNTIL PROG.DONE = 1 DO
            READ PROG.REC FROM F.PROG.FEE, PROG.ID THEN
               INVOICE<10>=INVOICE<10>+PROG.REC<2>
            END
         REPEAT
      END
      CLIENT.YTD<70,-1> = INVOICE<10>
*
*
* Calculate Managed Returns Amounts   -  NPR05 - Start Changes
*
      STMT.MR='SELECT FB.MANG.RTRNS WITH 1 GE "':BEG.DATE'D2/'
      STMT.MR=STMT.MR:'" AND WITH 1 LE "':END.DATE'D2/'
      STMT.MR=STMT.MR:'" AND WITH CLIENT# = "':CLIENT:'"'
      EXECUTE STMT.MR PASSLIST CAPTURING OUTPUT
      NUM.ITMS = @SELECTED
      IF SYSTEM(11) THEN
         DONE.MR = 0
         LOOP
            READNEXT PROG.ID ELSE DONE.MR = 1
         UNTIL DONE.MR = 1 DO
            READ MAN.RTNS.REC FROM F.MANG.RTRNS, PROG.ID THEN
               INVOICE<13>=INVOICE<13>+MAN.RTNS.REC<2>
            END
         REPEAT
      END
      CLIENT.YTD<78,-1> = INVOICE<13>

* NPR05 - End Changes

*
* Calculate current manual claims fees
*
      PREC='SELECT FB.CLAIMS WITH 1 GE "':BEG.DATE'D2/'
      PREC=PREC:'" AND WITH 1 LE "':END.DATE'D2/'
      PREC=PREC:'" AND WITH CLIENT# = "':CLIENT:'"'
      EXECUTE PREC PASSLIST CAPTURING OUTPUT
      NUM.ITMS = @SELECTED
      IF SYSTEM(11) THEN
         CLAIMS.DONE = 0
         LOOP
            READNEXT CLAIMS.ID ELSE CLAIMS.DONE = 1
         UNTIL CLAIMS.DONE = 1 DO
            READ CLAIMS.REC FROM F.CLAIMS, CLAIMS.ID THEN
               CLAIMS.FEES=CLAIMS.FEES+CLAIMS.REC<2>
            END
         REPEAT
      END
      CLIENT.YTD<66,-1> = CLAIMS.FEES

      WRITE CLIENT.YTD ON F.BILLS.YTD,CLIENT       ; * NPR08 See additional writes after AR-BRIDGE record created.
*
* Calculate current adjustments
*
*DF      PREC='SSELECT FB.ADJUSTS WITH 1 GE "':BEG.DATE'D2/'
*DF      PREC=PREC:' AND WITH 1 LE "':END.DATE:'"'
*DF      PREC=PREC:'" AND WITH CLIENT# = "':CLIENT:'"'
*DF      PREC=PREC:' BY 3'
*DF      EXECUTE PREC PASSLIST CAPTURING OUTPUT
*DF      IF SYSTEM(11) THEN
*DF        LOOP
*DF          READNEXT ADJ.ID ELSE ADJ.ID='**'
*DF        UNTIL ADJ.ID='**' DO
*DF          READ ADJ.REC FROM F.ADJUSTS, ADJ.ID THEN
*DF            READV TRANS.MODE FROM F.CARRIERS,ADJ.REC<3>,44 ELSE TRANS.MODE='NULL'
*DF            IF TRANS.MODE='' THEN TRANS.MODE='NULL'
*DF            LOCATE TRANS.MODE IN DARRAY<1> BY 'AR' SETTING TRAN.POS ELSE
*DF               DARRAY<1>=INSERT(DARRAY,1,TRAN.POS;TRANS.MODE)
*DF            END
*DF            INVOICE<1>=INVOICE<1>+ADJ.REC<2>
*DF            DARRAY<2,TRAN.POS>=DARRAY<2,TRAN.POS>+ADJ.REC<2>
*DF          END
*DF        REPEAT
*DF      END
*
* Post AFS charges to invoice
*
      OPEN '','AR-BRIDGE' TO F.BRIDGE THEN
*        READ AR.REC FROM F.BRIDGE,CLIENT THEN ; * JMK65
         BRIDGE.ID=CLIENT                ; * JMK65
         IF TESTING THEN BRIDGE.ID=CLIENT:'-TEST'  ; * JMK65
         READ AR.REC FROM F.BRIDGE,BRIDGE.ID THEN  ; * JMK65
            IF AR.REC=BRIDGE.INFO THEN
               AR.REC=''
               UP.ARRAY='*NEW*'
            END ELSE
               UP.ARRAY=AR.REC
            END
         END ELSE
            AR.REC=''
            UP.ARRAY='*NEW*'
         END
         IF CLIENT[1,2] # '99' THEN
*           UP.ID='AR-BRIDGE*':CLIENT ; GOSUB UPDATE.UP.FILE ; * JMK65
            UP.ID='AR-BRIDGE*':BRIDGE.ID ; GOSUB UPDATE.UP.FILE        ; * JMK65
         END
*DF        DISC.COMM=(INVOICE<6> * (-CLIENT.REC<34,POS>/100))'R0'
*DF        OVR.CHG.COMM=(INVOICE<4> * (-CLIENT.REC<33,POS>/100))'R0'
*DF        CONSULT.COMM=(INVOICE<5> * (-CLIENT.REC<85,POS>/100))'R0'
         DISC.COMM=INVOICE<6>
         OVR.CHG.COMM=INVOICE<4>
         CONSULT.COMM=INVOICE<5>
         UPS.COMM = INVOICE<9>
         FDXG.COMM = INVOICE<11>         ; * JMK19
         FDXA.COMM = INVOICE<12>         ; * JMK34
         AR.REC=''
         NUM.ITEMS=DCOUNT(DARRAY<1>,@VM)
         FOR I = 1 TO NUM.ITEMS
            TRANS.MODE=DARRAY<1,I>
            LOCATE TRANS.MODE IN TRANS.ARRAY<1> BY "AR" SETTING POS THEN         ; * JMK12
               SALES.CODE = TRANS.ARRAY<3,POS>     ; * JMK12
               OVRCG.CODE = TRANS.ARRAY<4,POS>     ; * JMK12
               MGMT.CODE = TRANS.ARRAY<5,POS>      ; * JMK12
               IF MGMT.CODE='' THEN MGMT.CODE=149  ; * JMK13
            END ELSE                     ; * JMK12
               SALES.CODE = 50           ; * JMK12
               OVRCG.CODE = 30           ; * JMK12
               MGMT.CODE = 149           ; * JMK13
               SUBJ='Invalid Transport Mode'       ; * JMK12
               TEXT=USER:' processed the account ':CLIENT:'-':CLIENT.REC<2>:' with a bill'           ; * JMK12
               TEXT<1,-1>='that has an invalid Transport Mode. Please check now.'          ; * JMK12
               TEXT<1,-1>='The pro number is : ':BILL.ID     ; * JMK12
               MVIN=''                   ; * JMK12
               MVIN<1>='OHolman@afs.net'           ; * JMK12
               MVIN<2>='MKerbow@afs.net'           ; * JMK12
               MVIN<4>='AFS'             ; * JMK12
               MVIN<5>=SUBJ              ; * JMK12
               MVIN<6>=TEXT              ; * JMK12
               CALL SENDMAIL(MVIN,MVOUT)           ; * JMK12
            END                          ; * JMK12
            IF DARRAY<2,I>+0#0 THEN
               CODE=1
               QUANITY=COUNTER-DUP.COUNT-EDI.COUNT<1,1>-EDI.COUNT<1,2>-NEVERPAY.COUNT-HOLD.COUNT
               AMOUNT=DARRAY<2,I>
               GOSUB INSERT.IN.ARRAY
            END
            IF DARRAY<6,I>+0#0 OR EDI.COUNT<1,1>+0#0 THEN
               CODE=21
*DF            QUANITY=EDI.COUNT<1,1>+EDI.COUNT<1,2>
               QUANITY=EDI.COUNT<1,1>
               AMOUNT=DARRAY<6,I>
               GOSUB INSERT.IN.ARRAY
            END
            IF DARRAY<12,I>+0#0 OR EDI.COUNT<1,2>+0#0 THEN
               CODE=22
               QUANITY=EDI.COUNT<1,2>
               AMOUNT=DARRAY<12,I>
               GOSUB INSERT.IN.ARRAY
            END
            IF DARRAY<3,I>+0#0 THEN
               BEGIN CASE
                  CASE 1
*DF                  CODE=17
*                    CODE=30             ; * JMK12
                     CODE=OVRCG.CODE     ; * JMK12
               END CASE
               QUANITY=1
               AMOUNT=0-DARRAY<3,I>
               GOSUB INSERT.IN.ARRAY
*              CODE=31                   ; * JMK12
*              CODE=OVRCG.CODE+1         ; * JMK12 ; * JMK104 - COMBINE COS CODES
               CODE=OVRCG.CODE           ; * JMK12 ; * JMK104 - COMBINE COS CODES
               QUANITY=1
               AMOUNT=DARRAY<7,I>+DARRAY<3,I>
               GOSUB INSERT.IN.ARRAY
            END
*DF         IF DARRAY<7,I>+0#0 THEN
*DF            CODE=30
*DF            QUANITY=1
*DF            AMOUNT=DARRAY<7,I>
*DF            GOSUB INSERT.IN.ARRAY
*DF         END
            IF DARRAY<4,I>+0#0 THEN
*DF         IF DARRAY<8,I>+0#0 THEN
*              LOCATE TRANS.MODE IN TRANS.ARRAY<1> BY "AR" SETTING POS THEN      ; * JMK12
*                SALES.CODE = TRANS.ARRAY<3,POS>  ; * JMK12
*              END ELSE                  ; * JMK12
*                 SALES.CODE = 50        ; * JMK12
*                 SUBJ='Invalid Transport Mode'    ; * JMK12
*                 TEXT=USER:' processed the account ':CLIENT:'-':CLIENT.REC<2>:' with a bill'        ; * JMK12
*                 TEXT<1,-1>='that has an invalid Transport Mode. Please check now.'       ; * JMK12
*                 TEXT<1,-1>='The pro number is : ':BILL.ID  ; * JMK12
*                 MVIN=''                ; * JMK12
*                 MVIN<1>='OHolman@afs.net'  ; * JMK12
*                 MVIN<2>='DFriend@afs.net'           ; * JMK12
*                 MVIN<4>='AFS'          ; * JMK12
*                 MVIN<5>=SUBJ           ; * JMK12
*                 MVIN<6>=TEXT           ; * JMK12
*                 CALL SENDMAIL(MVIN,MVOUT)        ; * JMK12
*              END                       ; * JMK12
               IF USER = "DAVID" THEN CALL ELINE('STOP ':DARRAY<4,I>:' ':SALES.CODE)

               CODE = SALES.CODE

*TBS           BEGIN CASE
*TBS              CASE TRANS.MODE=6
*DF                  CODE=5
*TBS                    CODE=52
*TBS              CASE TRANS.MODE=12
*TBS                 CODE = 54
*TBS
*TBS              CASE 1
*DF                  CODE=5
*TBS                 CODE=50
*TBS           END CASE
               QUANITY=1
               AMOUNT=0-DARRAY<4,I>
*DF            AMOUNT=DARRAY<8,I>
               GOSUB INSERT.IN.ARRAY
*TBS           BEGIN CASE
*TBS              CASE TRANS.MODE=6
*TBS                 CODE=53
*TBS              CASE TRANS.MODE=12
*TBS                 CODE=55
*TBS              CASE 1
*TBS                 CODE=51
*TBS           END CASE
*              CODE = SALES.CODE + 1     ; * JMK104 - COMBINE COS CODES
               CODE = SALES.CODE         ; * JMK104 - COMBINE COS CODES
               QUANITY=1
               AMOUNT=DARRAY<8,I>+DARRAY<4,I>
               GOSUB INSERT.IN.ARRAY
            END
            IF DARRAY<10,I>+0#0 THEN
*DF         IF DARRAY<11,I>+0#0 THEN
               CODE = 32
               QUANITY=1
               AMOUNT=0-DARRAY<10,I>
*DF            AMOUNT=DARRAY<11,I>
               GOSUB INSERT.IN.ARRAY
*              CODE = 33                 ; * JMK104 - COMBINE COS CODES
               CODE = 32                 ; * JMK104 - COMBINE COS CODES
               QUANITY=1
               AMOUNT=DARRAY<11,I>+DARRAY<10,I>
               GOSUB INSERT.IN.ARRAY
            END
            IF DARRAY<13,I>+0#0 THEN     ; * JMK12
               CODE=MGMT.CODE            ; * JMK12
               QUANITY=DARRAY<14,I>
               AMOUNT=DARRAY<13,I>       ; * JMK12
               GOSUB INSERT.IN.ARRAY     ; * JMK12
            END                          ; * JMK12
            IF DARRAY<15,I>+0#0 THEN     ; * JMK19
               CODE = 34                 ; * JMK19
               QUANITY=1                 ; * JMK19
               AMOUNT=0-DARRAY<15,I>     ; * JMK19
               GOSUB INSERT.IN.ARRAY     ; * JMK19
*              CODE = 35                 ; * JMK19 ; * JMK104 - COMBINE COS CODES
               CODE = 34                 ; * JMK19 ; * JMK104 - COMBINE COS CODES
               QUANITY=1                 ; * JMK19
               AMOUNT=DARRAY<16,I>+DARRAY<15,I>    ; * JMK19
               GOSUB INSERT.IN.ARRAY     ; * JMK19
            END
*
* Next block for future separation       ; * JMK34
*
            IF DARRAY<17,I>+0#0 THEN     ; * JMK34
               CODE = 36                 ; * JMK34
               QUANITY=1                 ; * JMK34
               AMOUNT=0-DARRAY<17,I>     ; * JMK34
               GOSUB INSERT.IN.ARRAY     ; * JMK34
*              CODE = 37                 ; * JMK34 ; * JMK104 - COMBINE COS CODES
               CODE = 36                 ; * JMK34 ; * JMK104 - COMBINE COS CODES
               QUANITY=1                 ; * JMK34
               AMOUNT=DARRAY<18,I>+DARRAY<17,I>    ; * JMK34
               GOSUB INSERT.IN.ARRAY     ; * JMK34
            END                          ; * JMK34
*
* End of block for future separation     ; * JMK34
*
            IF DARRAY<19,I>+0#0 THEN     ; * JMK90
               CODE=201                  ; * JMK90
               QUANITY=0-DARRAY<19,I>    ; * JMK90
               AMOUNT=0-DARRAY<20,I>     ; * JMK90
               GOSUB INSERT.IN.ARRAY     ; * JMK90
            END                          ; * JMK90
            IF DARRAY<21,I>+0#0 THEN     ; * JMK90
               CODE=221                  ; * JMK90
               QUANITY=0-DARRAY<21,I>    ; * JMK90
               AMOUNT=0-DARRAY<22,I>     ; * JMK90
               GOSUB INSERT.IN.ARRAY     ; * JMK90
            END                          ; * JMK90
            IF DARRAY<23,I>+0#0 THEN     ; * JMK90
               CODE=222                  ; * JMK90
               QUANITY=0-DARRAY<23,I>    ; * JMK90
               AMOUNT=0-DARRAY<24,I>     ; * JMK90
               GOSUB INSERT.IN.ARRAY     ; * JMK90
            END                          ; * JMK90
         NEXT I
*DF*DF   LOCATE 17 IN AR.REC<1> SETTING REC.POS THEN
*DF      LOCATE 30 IN AR.REC<1> SETTING REC.POS THEN
*DF*DF      CODE=18
*DF         CODE=31
*DF         QUANITY=1
*DF         OVR.CHG.COMM=(AR.REC<3,REC.POS>*(CLIENT.REC<33,POS>/100))'R0'
*DF         AMOUNT=OVR.CHG.COMM-AR.REC<3,REC.POS>
*DF         GOSUB INSERT.IN.ARRAY
*DF      END
*DF*DF   LOCATE 5 IN AR.REC<1> SETTING REC.POS THEN
*DF         LESS.PENNY.DIFF=0
*DF      LOCATE 50 IN AR.REC<1> SETTING REC.POS THEN
*DF*DF      CODE=11
*DF         CODE=51
*DF         QUANITY=1
*DF*DF      CONSULT.COMM=(AR.REC<3,REC.POS>*(CLIENT.REC<85,POS>/100))'R0'
*DF         CONSULT.COMM=(AR.REC<3,REC.POS>*(CLIENT.REC<85,POS>/100))
*DF         LESS.PENNY.DIFF=CONSULT.COMM-(CONSULT.COMM'R0')
*DF         CONSULT.COMM=(CONSULT.COMM'R0')
*DF         AMOUNT=CONSULT.COMM-AR.REC<3,REC.POS>
*DF         GOSUB INSERT.IN.ARRAY
*DF      END
*DF      LOCATE 52 IN AR.REC<1> SETTING REC.POS THEN
*DF         CODE=53
*DF         QUANITY=1
*DF*DF      CONSULT.COMM=(AR.REC<3,REC.POS>*(CLIENT.REC<85,POS>/100))'R0'
*DF         CONSULT.COMM=(AR.REC<3,REC.POS>*(CLIENT.REC<85,POS>/100))+LESS.PENNY.DIFF
*DF         LESS.PENNY.DIFF=CONSULT.COMM-(CONSULT.COMM'R0')
*DF         CONSULT.COMM=(CONSULT.COMM'R0')
*DF         AMOUNT=CONSULT.COMM-AR.REC<3,REC.POS>
*DF         GOSUB INSERT.IN.ARRAY
*DF      END
         IF PROCESS.FEE+0#0 THEN         ; * JMK29
            CODE=2
            QUANITY=1
*           AMOUNT=PROCESS.FEE ; * JMK29
            AMOUNT=PROCESS.FEE-PR.PROCESS.FEE      ; * JMK29
            GOSUB INSERT.IN.ARRAY
         END
         IF PR.PROCESS.FEE+0#0 THEN      ; * JMK29
            CODE=150                     ; * JMK29
            QUANITY=1                    ; * JMK29
            AMOUNT=PR.PROCESS.FEE        ; * JMK29
            GOSUB INSERT.IN.ARRAY        ; * JMK29
         END                             ; * JMK29
         IF PRE.AUDIT.FEE+0#0 THEN
            CODE=121
            QUANITY=1
            AMOUNT=PRE.AUDIT.FEE
            GOSUB INSERT.IN.ARRAY
         END
         IF SERVICE.FEE+0#0 THEN
            CODE=3
            QUANITY=1
            AMOUNT=SERVICE.FEE
            GOSUB INSERT.IN.ARRAY
         END
         IF LOGISTICS.FEE+0#0 THEN
            BEGIN CASE                   ; * JMK43
*DF               CASE CLIENT='01148'       ; * JMK43
*DF                  QUANITY=1              ; * JMK43
*DF                  CODE='54-13'           ; * JMK43
*DF                  AMOUNT=23998           ; * JMK43
*DF                  GOSUB INSERT.IN.ARRAY  ; * JMK43
*DF                  CODE='58-13'           ; * JMK43
*DF                  AMOUNT=60918           ; * JMK43
*DF                  GOSUB INSERT.IN.ARRAY  ; * JMK43
*DF                  CODE='62-13'           ; * JMK43
*DF                  AMOUNT=99684           ; * JMK43
*DF                  GOSUB INSERT.IN.ARRAY  ; * JMK43
*
* Removed per new agreement with 01148 Bell Sports per Myra. DRF 03/17/08
*
               CASE TRN.ALLOC.CODE#''    ; * JMK51
                  QUANITY=1              ; * JMK51
                  NVAL=DCOUNT(TRN.ALLOC.CODE,@VM)  ; * JMK51
                  FOR VAL=1 TO NVAL      ; * JMK51
                     TRN.CODE=TRN.ALLOC.CODE<1,VAL>          ; * JMK51
                     IF TRN.CODE#'' THEN           ; * JMK75
                        READ TRN.REC FROM F.TRANSPORT,TRN.CODE THEN    ; * JMK51
                           CODE=TRN.REC<2>:'-13'   ; * JMK51
                        END ELSE         ; * JMK51
                           CODE=TRN.CODE:'-UNK'    ; * JMK51
                        END              ; * JMK15
                        AMOUNT=TRN.ALLOC.FEES<1,VAL>         ; * JMK51
                        GOSUB INSERT.IN.ARRAY      ; * JMK51
                     END                 ; * JMK75
                  NEXT VAL               ; * JMK51
               CASE 1                    ; * JMK43
                  BEGIN CASE             ; * JMK35
                     CASE SCT.FLG=0      ; * JMK35
                        CODE=13
                     CASE SCT.FLG=1      ; * JMK35
                        IF LOGISTICS='Y' THEN      ; * JMK35
                           CODE=13       ; * JMK35
                        END ELSE         ; * JMK35
                           CODE=151      ; * JMK35
                        END              ; * JMK35
                  END CASE               ; * JMK35
*DF         QUANTITY=1
                  QUANITY=1
                  AMOUNT=LOGISTICS.FEE
                  GOSUB INSERT.IN.ARRAY
            END CASE                     ; * JMK43
         END
*KD
         IF AFSI.FEE+0#0 THEN
            CODE=105
            QUANITY=1
            AMOUNT=AFSI.FEE
            GOSUB INSERT.IN.ARRAY
         END
         IF UPS.FEE+0#0 THEN
*           CODE=65
            CODE=103
            QUANITY=1
            AMOUNT=UPS.FEE
            GOSUB INSERT.IN.ARRAY
         END

         IF WKLY.POSTAGE.FEE+0#0 THEN
*DF         CODE=107
            CODE=102
*DF         QUANTITY=1
            QUANITY=1
            AMOUNT=WKLY.POSTAGE.FEE
            GOSUB INSERT.IN.ARRAY
         END

         IF DISC.COMM+0#0 THEN
            CODE=6
            QUANITY=1
            AMOUNT=DISC.COMM
            GOSUB INSERT.IN.ARRAY
         END
         IF POSTAGE+0#0 THEN
            CODE=7
            QUANITY=1
            AMOUNT=POSTAGE
            GOSUB INSERT.IN.ARRAY
         END
         IF INVOICE<8>+0#0 THEN
            CODE=12
            QUANITY=1
            AMOUNT=INVOICE<8>
            GOSUB INSERT.IN.ARRAY
         END
         IF INVOICE<10>+0#0 THEN
            CODE=135
            QUANITY=1
            AMOUNT=INVOICE<10>
            GOSUB INSERT.IN.ARRAY
         END
         IF INVOICE<13>+0#0 THEN         ; *NPR05
            CODE=133                     ; *NPR05
            QUANITY=1                    ; *NPR05
            AMOUNT=INVOICE<13>           ; *NPR05
            GOSUB INSERT.IN.ARRAY        ; *NPR05
         END                             ; *NPR05
         IF CLAIMS.FEES+0#0 THEN
            CODE=131
            QUANITY=1
            AMOUNT=CLAIMS.FEES
            GOSUB INSERT.IN.ARRAY
         END
*david   AR.REC<4>=DATE()
         AR.REC<4>=END.DATE
         AR.REC<5>=COUNTER-DUP.COUNT-NEVERPAY.COUNT
         IF CLIENT[1,2] # '99' THEN
** Verify that the Total Invoice amount is NOT Less than Zero
            INV.TIMES=DCOUNT(AR.REC<3>,@VM)
            INV.TOTAL=0
            FOR X = 1 TO INV.TIMES
               INV.TOTAL+=AR.REC<3,X>
            NEXT X
            IF INV.TOTAL < 0 THEN
               SUBJ='Account Processed with Negative Charges'
               TEXT=USER:' processed the account ':CLIENT:'-':CLIENT.REC<2>
               TEXT<1,-1>='The total charges were ':INV.TOTAL'R26,'
               TEXT<1,-1>='The charges were NOT written to A/R'
               TEXT<1,-1>='The account MUST be unprocessed and held until'
               TEXT<1,-1>='the charges exceed zero.'
               MVIN=''
               MVIN<1>='OHolman@afs.net'
               MVIN<1,-1>='KGilbert@afs.net'
               MVIN<1,-1>='DCurtis@afs.net'
               MVIN<1,-1>='AGrubbs@afs.net'
               MVIN<1,-1>='MButts@afs.net'
               MVIN<2>='DFriend@afs.net'
               MVIN<2,-1>='MKerbow@afs.net'
               MVIN<4>='AFS'
               MVIN<5>=SUBJ
               MVIN<6>=TEXT
               CALL SENDMAIL(MVIN,MVOUT)
*              WRITE AR.REC ON F.TEMP,CLIENT       ; * JMK65
               WRITE AR.REC ON F.TEMP,BRIDGE.ID    ; * JMK65
               WRITE CLIENT.YTD ON F.BILLS.YTD,CLIENT        ; *NPR08 - Added additional write here
               GOSUB MONITOR.YTD.VALUES  ; *NPR08
               GOTO 9999
            END ELSE
*              WRITE AR.REC ON F.BRIDGE,CLIENT     ; * JMK65
               WRITE AR.REC ON F.BRIDGE,BRIDGE.ID  ; * JMK65
               WRITE CLIENT.YTD ON F.BILLS.YTD,CLIENT        ; *NPR08 - Added additional write here
               GOSUB MONITOR.YTD.VALUES  ; *NPR08
            END
         END ELSE
*           WRITE AR.REC ON F.TEMP,CLIENT          ; * JMK65
            WRITE AR.REC ON F.TEMP,BRIDGE.ID       ; * JMK65
         END
         IF CLIENT#'10356' THEN          ; * JMK999
            SQLVIN=''                    ; * JMK84
            SQLVIN<1>=USER               ; * JMK84
            SQLVIN<2>=CLIENT             ; * JMK84
            SQLVIN<3>='BRIDGE'           ; * JMK84
            SQLVOUT=''                   ; * JMK84
*        CALL UPD.SQL.FBPROC.SUB(SQLVIN,SQLVOUT,AR.REC)      ; * JMK84
         END                             ; * JMK999
      END



      BREAK ON                           ; * Turn Break Key back on
*
* Clear temporary bills file
*
*     CLEARFILE F.BILLS
*

*
* Check to see if a client with new variance
*
*
      YTD.DISCOUNT.VARIANCE= ORIG.CLIENT.YTD<10> + 0
      YTD.OVERCHARGE.VARIANCE= ORIG.CLIENT.YTD<11> + 0
      YTD.CONSULTING.VARIANCE= ORIG.CLIENT.YTD<12> + 0

      NEW.DISCOUNT.VARIANCE = CLIENT.YTD<10>+0
      NEW.OVERCHARGE.VARIANCE = CLIENT.YTD<11>+0
      NEW.CONSULTING.VARIANCE = CLIENT.YTD<12>+0

      NEW.DISCOUNTS = (YTD.DISCOUNT.VARIANCE = 0 AND NEW.DISCOUNT.VARIANCE # 0)
      NEW.OVERCHARGES = (YTD.OVERCHARGE.VARIANCE = 0 AND NEW.OVERCHARGE.VARIANCE # 0)
      NEW.CONSULTING = (YTD.CONSULTING.VARIANCE = 0 AND NEW.CONSULTING.VARIANCE # 0)
      NEW.VARIANCES = NEW.DISCOUNTS + NEW.OVERCHARGES + NEW.CONSULTING
      IF USER = 'TAMI' THEN CALL ELINE('STOP')
      IF NEW.VARIANCES AND LOGISTICS = 'Y' AND DATE() LE CL.PRE.DATE+365 THEN
         SUBJ='Account with First Time Logistics Variance'
         SERV.SLSMAN=CLIENT.REC<115>
*        READV SERV.SLSMAN.NAME FROM F.AR.SLSMAN,SERV.SLSMAN,1 ELSE SER.SLSMAN.NAME = SERV.SLSMAN:" is not on file " ; * JMK61
         READ SERV.SLSMAN.REC FROM F.AR.SLSMAN,SERV.SLSMAN ELSE SER.SLSMAN.REC = ""        ; * JMK61
         SERV.SLSMAN.NAME=SERV.SLSMAN.REC<1>       ; * JMK61
         SERV.SLSMAN.EMAIL=SERV.SLSMAN.REC<8>      ; * JMK61
         IF SERV.SLSMAN.REC="" THEN      ; * JMK61
            SERV.SLSMAN.NAME = SERV.SLSMAN:" is not on file "          ; * JMK61
            SERV.SLSMAN.EMAIL = "NONE"   ; * JMK61
         END                             ; * JMK61
*        TEXT=USER:' processed an account with first time variance amounts ':CLIENT:'-':CLIENT.REC<2>:' Salesman - ':SERV.SLSMAN.NAME:'.'
         TEXT=USER:' processed an account with first time variance amounts '
         TEXT<1,-1>='Client: ':CLIENT:'-':CLIENT.REC<2>
         TEXT<1,-1>='Salesman - ':SERV.SLSMAN:'-':SERV.SLSMAN.NAME
         TEXT<1,-1>='Karen, Debbie, Scott, and Owen must See these reports!!!'
         TEXT<1,-1>="Client's Pre-Audit Date was ":CL.PRE.DATE'D2/'
         TEXT<1,-1>='Make SURE that the salesman EXPLAINS the New Variance in the reports to the client!'
         TEXT<1,-1>=' '
         IF CLIENT.YTD<10> # 0 AND NEW.DISCOUNTS THEN
            TEXT<1,-1>='Discount Variances = ':NEW.DISCOUNT.VARIANCE'R26#8'
            TEXT<1,-1>=' '
         END
         IF CLIENT.YTD<11> # 0 AND NEW.OVERCHARGES THEN
            TEXT<1,-1>='Overcharge Variances = ':NEW.OVERCHARGE.VARIANCE'R26#8'
            TEXT<1,-1>=' '
         END
         IF CLIENT.YTD<12> # 0 AND NEW.CONSULTING THEN
            TEXT<1,-1>='Consulting Variances = ':NEW.CONSULTING.VARIANCE'R26#8'
            TEXT<1,-1>=' '
         END
         MVIN=''
         MVIN<1,-1>='MButts@afs.net'
*        MVIN<1,-1>='RCason@afs.net'     ; * JMK95
         MVIN<1,-1>='DCurtis@afs.net'
         MVIN<1,-1>='JDarwin@afs.net'    ; * JMK102
         MVIN<1,-1>='KGilbert@afs.net'
         MVIN<1,-1>='OHolman@afs.net'
         MVIN<1,-1>='BJeppson@afs.net'
         MVIN<1,-1>='KJohnson@afs.net'   ; * JMK102
         MVIN<1,-1>='SMatthews@afs.net'
         MVIN<1,-1>='KRivet@afs.net'     ; * JMK102
*
* Added Rebecca to email list tracking number 070306. DRF 08/21/07
*
         MVIN<2>='DFriend@afs.net'
         MVIN<4>='AFS'
         MVIN<5>=SUBJ
         MVIN<6>=TEXT
         CALL SENDMAIL(MVIN,MVOUT)
         CALL ELINE('New Logistics Variances!! Have Karen, Scott, Debbie & Owen check!')
      END
*     IF CHG.WARN#'' THEN ; * JMK48
*        SUBJ='Client: ':CLIENT:'-':CLIENT.REC<2>:' Possible Incorrect Charge Page Settings' ; * JMK48
*        TEXT=USER:' processed an account with charge page settings that may be incorrect. ' ; * JMK48
*        TEXT<1,-1>='Karen, Debbie, Scott, and Owen must See these reports!!!' ; * JMK48
*        TEXT<1,-1>=' ' ; * JMK48
*        TEXT<1,-1>=CHG.WARN ; * JMK48
*        MVIN='' ; * JMK48
*        MVIN<1>='OHolman@afs.net' ; * JMK48
*        MVIN<1,-1>='KGilbert@afs.net' ; * JMK48
*        MVIN<1,-1>='DCurtis@afs.net' ; * JMK48
*        MVIN<1,-1>='SMatthews@afs.net' ; * JMK48
*        MVIN<1,-1>='MButts@afs.net' ; * JMK48
*        MVIN<1,-1>='BJeppson@afs.net' ; * JMK48
*        MVIN<2>='DFriend@afs.net' ; * JMK48
*        MVIN<2,-1>='MKerbow@afs.net' ; * JMK48
*        MVIN<4>='AFS' ; * JMK48
*        MVIN<5>=SUBJ ; * JMK48
*        MVIN<6>=TEXT ; * JMK48
*        CALL SENDMAIL(MVIN,MVOUT) ; * JMK48
*        CALL ELINE('Client: ':CLIENT:'-':CLIENT.REC<2>:' Possible Incorrect Charge Page Settings') ; * JMK
*     END ; * JMK48

*
* Process weekly report
*
3000: CRT @(0,3):@(-3)
      HELP="[Y]=Yes. [N]=No."
*     CALL GEN.IN(0,22,'Process weekly report? Y','',Q,0,1,'','',0,-1,22,1,QI,HELP,0,23)
      QI='Y'
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='Y' OR QI=''
            LOOP
               HELP="[O]=Old. [N]=New."
*           CALL GEN.IN(0,22,'Which format? N','',FORMAT,0,1,'','',0,-1,22,1,QI,HELP,0,23)
               FORMAT='N'
               IF FORMAT='' THEN FORMAT='N'
               FORMAT=OCONV(FORMAT,'MCU')
            UNTIL FORMAT='O' ! FORMAT='N' DO
            REPEAT
            B.DATE=BEG.DATE'D2/'
            E.DATE=END.DATE'D2/'
            IF FORMAT='O' THEN
               DATA 'STD.USE.BILLS.IN.WORK.FILE',CLIENT,'2',B.DATE,E.DATE,'','N',''
            END ELSE
*              IF TESTING THEN           ; * JMK33 ; * JMK97
*                 DATA 'TST-FROM.PROCESS',CLIENT,'3','R','N','N','N','N',''      ; * JMK33 ; * JMK97
*              END ELSE                  ; * JMK33
*                 DATA 'STD.USE.BILLS.IN.WORK.FILE',CLIENT,'2',B.DATE,E.DATE,'N','','','','','',''
*DF               DATA 'STD-FROM.PROCESS',CLIENT,'3',B.DATE,E.DATE,'N','','','','','',''
*                 DATA 'STD-FROM.PROCESS',CLIENT,'3','R','N','N','N','N',''      ; * JMK97
*              END                       ; * JMK33 ; * JMK97
               BEGIN CASE                ; * JMK97
                  CASE ONCE=1            ; * JMK97
                     DATA 'ONCE-FROM.PROCESS',CLIENT,'3','R','N','N','N','N',''  ; * JMK97
                  CASE TESTING=1         ; * JMK97
                     DATA 'TST-FROM.PROCESS',CLIENT,'3','R','N','N','N','N',''   ; * JMK97
                  CASE 1                 ; * JMK97
                     DATA 'STD-FROM.PROCESS',CLIENT,'3','R','N','N','N','N',''   ; * JMK97
               END CASE                  ; * JMK97
            END
            IF FORMAT='O' THEN EXECUTE 'FB.3.1' ELSE EXECUTE 'FB.3.1.NEW'
            IF CLIENT='01706' THEN       ; * JMK107
               BEGIN CASE                ; * JMK107
                  CASE ONCE=1            ; * JMK107
                     DATA 'ONCE-FROM.PROCESS',CLIENT,'3','R','N','N','N','Y','',''         ; * JMK107
                  CASE TESTING=1         ; * JMK107
                     DATA 'TST-FROM.PROCESS',CLIENT,'3','R','N','N','N','Y','',''          ; * JMK107
                  CASE 1                 ; * JMK107
                     DATA 'STD-FROM.PROCESS',CLIENT,'3','R','N','N','N','Y','',''          ; * JMK107
               END CASE                  ; * JMK107
               EXECUTE 'FB.3.1.REG'      ; * JMK107
            END                          ; * JMK107

         CASE QI='N' ! QI=''
            NULL
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 3000
      END CASE

      IF CLIENT.REC<125>#'' OR CLIENT.REC<126>#'' OR CLIENT.REC<127>#'' THEN     ; * JMK62
         EMAIL.LOG.ID=CLIENT:'_':END.DATE:'_1'     ; * JMK62
*        READ EMAIL.TEST FROM F.EMAIL.LOG,EMAIL.LOG.ID ELSE  ; * JMK62 ; * JMK105
         READ EMAIL.TEST FROM F.EMAIL.LOG,EMAIL.LOG.ID THEN  ; * JMK62 ; * JMK105
*            LOG.SEQ=0                    ; * JMK105
*            LOOP                         ; * JMK105
*               LOG.SEQ+=1                ; * JMK105
*               LOG.ID=CLIENT:'_':END.DATE:'_':LOG.SEQ        ; * JMK105
*               READ TEST FROM F.EMAIL.LOG,LOG.ID ELSE TEST=''          ; * JMK105
*            UNTIL TEST='' DO             ; * JMK105
*               DELETE F.EMAIL.LOG,LOG.ID ; * JMK105
*            REPEAT                       ; * JMK105
         END ELSE                        ; * JMK105
*           EMAIL.OUT=''                 ; * JMK62 ; * JMK68
*           EMAIL.OUT<5,1>=CLIENT:'- ':CLIENT.REC<2>:' - Weekly Email Reports failed in FB Processing!!!'      ; * JMK62 ; * JMK68
*           EMAIL.OUT<6,1>=USER:' processed this client and the weekly report emails did not get sent!'        ; * JMK62 ; * JMK68
*           GOSUB EMAIL.SENDING.FAILURE  ; * JMK38 ; * JMK68
            EMAIL.ERROR.OUT=''           ; * JMK68
            EMAIL.ERROR.OUT<1,-1>='U2Errors@afs.net'         ; * JMK68
            EMAIL.ERROR.OUT<4>='Reports@afs.net'   ; * From Email address ; * JMK68
            EMAIL.ERROR.OUT<5,1>='** ERROR ** ':CLIENT:'- ':CLIENT.REC<2>:' - Weekly Email Reports have failed in FB Processing!!!'          ; * JMK62 ; * JMK68
            EMAIL.ERROR.OUT<6,1>='***********************************************************************************'   ; * JMK68
            EMAIL.ERROR.OUT<6,-1>=USER:' processed this client and the weekly report emails have not have been sent!'    ; * JMK68
            EMAIL.ERROR.OUT<6,-1>='**********************************************************************************'   ; * JMK68
            EMAIL.ERROR.OUT<6,-1>='The Weekly Report email can not be verified at this time.  This is due to either'     ; * JMK68
            EMAIL.ERROR.OUT<6,-1>=' a server failure with the "E:\Ardent\Accounts\afs\EMAIL.LOG" folder or an'           ; * JMK68
            EMAIL.ERROR.OUT<6,-1>=' unrecognized failure with the email program "blat.exe".'         ; * JMK68
            EMAIL.ERROR.OUT<6,-1>=' '    ; * JMK68
            EMAIL.ERROR.OUT<6,-1>='Additional IT Review is needed to resolve this incident prior to continuing!'         ; * JMK68
            EMAIL.ERROR.OUT<6,-1>='******************************************************************************'       ; * JMK68
            EMAIL.ERROR.OUT<7>=1         ; * Auto format (add carriage returns to end of text)                                                     ; * JMK68
            VIN=EMAIL.ERROR.OUT          ; * JMK68
            VOUT=''                      ; * JMK68
            CALL SENDMAIL(VIN,VOUT)      ; * JMK68
VERIFY.EMAIL:*         ; * JMK62
*            CRT @(0,18):@(-3):CLIENT:' - ':CLIENT.REC<2>:' did not send the weekly email reports.'   ; * JMK62
            CRT @(0,18):@(-3):CLIENT:' - ':CLIENT.REC<2>:' the weekly email reports might not have been sent.'           ; * JMK62
            CRT @(0,19):'You will need to verify receipt of email in AFS folder and either re-process'         ; * JMK62
            CRT @(0,20):'or send the weekly reports manually.'         ; * JMK62

*NPR - Start Debugging option for blat and SENDMAIL  - temporary for debugging purposes  02/26/09

*           ST.TIME = ICONV("09:00","MTS")                                                                        ; * NPR
*           END.TIME = ICONV("16:00","MTS")                                                                       ; * NPR
*           IF TIME() GE ST.TIME AND TIME() LE END.TIME THEN                                                      ; * NPR                                                                                         ; * NPR
*              BREAK OFF                                                                                          ; * NPR
*              QI = ""                                                                                            ; * NPR
*              LOOP                                                                                               ; * NPR
*              UNTIL QI = "FRED" DO                                                                               ; * NPR
*                 CRT @(0,21):"Please contact Mike, Neil or Owen IMMEDIATELY to check why email did not get sent" ; * NPR
*                 HELP="Mike, Neil or Owen enter password to continue"                                            ; * NPR
*                 CALL GEN.IN(0,22,'Enter password please. ****','',Q,0,4,'','',0,-4,22,1,QI,HELP,0,23)           ; * NPR
*              REPEAT                                                                                             ; * NPR
*              BREAK ON                                                                                           ; * NPR
*              QI = "YES"                                                                                         ; * NPR
*           END ELSE                                                                                             ; * NPR
            CRT @(0,21):"[YES] I verify that I was notified of missing reports email."     ; * JMK62
            HELP="[YES]=Continue."       ; * JMK62
            CALL GEN.IN(0,22,'Enter selection please. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)    ; * JMK62
*           END                                                                                                  ; * NPR

*           ID.ERROR = CLIENT:"*":DATE():"*":TIME()   ;* NPR
*           W.ERR = END.DATE                          ;* NPR
*           W.ERR<2> = EMAIL.LOG.ID                   ;* NPR
*           W.ERR<3> = "IN FB.TEH.JMK"                 ;* NPR
*           WRITE W.ERR ON F.EMAIL.LOG, ID.ERROR      ;* NPR

*NPR - End Debugging option for blat and SENDMAIL - temporary for debugging purposes  02/26/09

            QI=OCONV(QI,'MCU')           ; * JMK62
            BEGIN CASE                   ; * JMK62
               CASE QI='YES'             ; * JMK62
                  NULL                   ; * JMK62
*              CASE QI='1'               ; * JMK62
*                 NULL                   ; * JMK62
               CASE 1                    ; * JMK62
                  CALL ELINE('Invalid entry. Must be [YES].')          ; * JMK62
                  GOTO VERIFY.EMAIL      ; * JMK62
            END CASE                     ; * JMK62
            CRT @(0,21):@(-3):           ; * JMK62
         END                             ; * JMK62
      END                                ; * JMK62
*IF USER='MYRA' THEN CALL ELINE("Owen press break.... Others Press Enter")

      IF NOT(TESTING) THEN               ; * JMK33
**********************************************************************
* Send Data to AFSi system
**********************************************************************
         OBEG.DATE=BEG.DATE'D4-'
         BEG.YEAR=FIELD(OBEG.DATE,'-',3)'R%4'
         BEG.MONTH=FIELD(OBEG.DATE,'-',1)'R%2'
         BEG.DAY=FIELD(OBEG.DATE,'-',2)'R%2'

         OEND.DATE=END.DATE'D4-'
         END.YEAR=FIELD(OEND.DATE,'-',3)'R%4'
         END.MONTH=FIELD(OEND.DATE,'-',1)'R%2'
         END.DAY=FIELD(OEND.DATE,'-',2)'R%2'

         COGNOS.ID=CLIENT:"-":BEG.YEAR:BEG.MONTH:BEG.DAY:"-":END.YEAR:END.MONTH:END.DAY:"-10"
         UP.ARRAY='*NEW*'
         UP.ID='COGNOS.ADD':'*':COGNOS.ID ; GOSUB UPDATE.UP.FILE

* Update the -20 item currently its set for 50,000 records per file that will "Protect us to 100,000 bills a week
         COGNOS.ID=CLIENT:"-":BEG.YEAR:BEG.MONTH:BEG.DAY:"-":END.YEAR:END.MONTH:END.DAY:"-20"
         UP.ARRAY='*NEW*'
         UP.ID='COGNOS.ADD':'*':COGNOS.ID ; GOSUB UPDATE.UP.FILE

*DF      CLIENT.INFO=CLIENT:'L'
*DF      DATA CLIENT.INFO                   ; * Feed the Cognos program with the "L-ast processed Switch
*DF      EXECUTE 'COGNOS'                   ; * Execute Cognos
         CLIENT.INFO='OLEDBAFS ':CLIENT:' ':BEG.DATE'D2/':' ':END.DATE'D2/'
         EXECUTE 'COGNOS ':CLIENT.INFO
*        EXECUTE 'UPDATE.SQL.FBHIST ':CLIENT.INFO  ; * JMK81 - DO NOT USE THIS OPTION---EVER!!!

**********************************************************************

*        IF CLIENT.REC<81>='V' THEN      ; * Automatically Process Vouchers ; * JMK90
*DF         IF CLIENT.BANK='V' THEN         ; * Automatically Process Vouchers ; * JMK90
         IF ANY.VOUCHER THEN
*NPR01            EXECUTE 'FB.5.1 AUTO ':CLIENT          ; * Select Voucher to Print
            DATA 'V','P','','','Y'
            EXECUTE 'FB.5.4'
         END
         IF CLIENT='00816' THEN
            DATA CLIENT,'2',B.DATE,E.DATE,''
            EXECUTE 'FB.6.4.2'
         END
         IF CLIENT='00729' THEN
            DATA CLIENT,B.DATE,E.DATE
            EXECUTE 'FB.6.1'
         END
         IF CLIENT='01640' THEN          ; * JMK87
            EXECUTE 'UPS.UPDATE.01640'   ; * JMK87
         END                             ; * JMK87
         IF CLIENT.REC<198>='Y' AND CLIENT.REC<92>='00002' THEN        ; * JMK38
            INFO=''                      ; * JMK38
            INFO<1>=CLIENT ; INFO<2>='N'           ; * JMK38
            INFO<3>='ALL' ; INFO<4>='ALL'          ; * JMK38
            INFO<5>='1' ; INFO<6>=BEG.DATE         ; * JMK38
            INFO<7>=END.DATE ; INFO<8>=''          ; * JMK38
            INFO<9>='N' ; INFO<10>='N'   ; * JMK38
            INFO<11>='N' ; INFO<12>='N'  ; * JMK38
            INFO<13>=CLIENT.REC<134> ; INFO<14>='EMAIL'      ; * JMK38
            INFO<15>=0 ; INFO<16>='ALL'  ; * JMK38
            INFO<17>=CLIENT.REC<135> ; INFO<18>=1  ; * JMK38
            INFO<19>=CLIENT.REC<125> ; INFO<20>=''           ; * JMK38
            INFO<21>=USER ; INFO<22>=CH.NUM        ; * JMK38
            INFO<23>=0 ; INFO<24>=''     ; * JMK38
            INFO<25>='FROM FB.TEH.JMK'   ; * JMK38
            INFO<26>=1                   ; * JMK41
            INFOOUT=''                   ; * JMK38
            CALL BUILD.DF.ACC(F.CLIENTS,F.CARRIERS,F.TRANSPORT,F.TABLES,F.EMAILDATA,INFO,INFOOUT)    ; * JMK38
            THERE.ARE.ATTACHMENTS=(INFOOUT#'')     ; * JMK38
            IF THERE.ARE.ATTACHMENTS THEN          ; * JMK38
               EMAIL.OUT=''              ; * JMK38

               EMAIL.OUT<1>=TRIM(CLIENT.REC<125>)  ; * To: Email addresses ; * JMK38
               EMAIL.OUT<2>=TRIM(CLIENT.REC<126>)  ; * CC: Email addresses ; * JMK38
*NPR06
               IF ACCT.MGR.EMAIL NE "" THEN
                  EMAIL.OUT<2,-1> = ACCT.MGR.EMAIL
**                  EMAIL.OUT<2,-1> = "npratt@afs.net"         ; * NPR06 Testing
               END
*NPR06
               EMAIL.OUT<3>=TRIM(CLIENT.REC<127>)  ; * BCC: Email addresses ; * JMK38
*              IF CLIENT.REC<179>#'' THEN          ; * JMK32 ; * JMK38 ; * JMK97
               IF CLIENT.REC<179>#'' AND ONCE=0 THEN         ; * JMK32 ; * JMK38 ; * JMK97
                  EMAIL.OUT<1>=TRIM(CLIENT.REC<179>)         ; * JMK32 ; * JMK38
                  EMAIL.OUT<2>=''        ; * JMK32 ; * JMK38
                  EMAIL.OUT<3>=''        ; * JMK32 ; * JMK38
               END                       ; * JMK32 ; * JMK38

               EMAIL.OUT<4>='Reports@afs.net'      ; * From Email address ; * JMK38
               EMAIL.OUT<5,1>=CLIENT'R%5':' - ':CLIENT.REC<2>          ; * Subject of Email ; * JMK38
               EMAIL.OUT<5,1>:=' Accrual Spreadsheet'        ; * JMK38
               EMAIL.OUT<5,1>:=' ':BEG.DATE'D2/':' - ':END.DATE'D2/'   ; * JMK38

* Email body ; * JMK38
               EMAIL.OUT<6,-1>='AFS Logistics, LLC.                                        Phone: 318.798.2111'          ; * JMK38
               EMAIL.OUT<6,-1>='330 Marshall Street, Suite 400                               FAX: 318.797.3628'          ; * JMK38
               EMAIL.OUT<6,-1>='Shreveport, LA 71101                                      WWW.AFSLogistics.Com'          ; * JMK38
               EMAIL.OUT<6,-1>=' '       ; * JMK38
               EMAIL.OUT<6,-1>=' '       ; * JMK38
               EMAIL.OUT<6,-1>='------------------------------------------------------------------------------'          ; * JMK38
               EMAIL.PATH='E:\ARDENT\PUBLIC\EMAILDATA\'      ; * JMK38

* Bills to be processed (Weekly Report or Body) created in BUILD.DF.SUB (attachment 1) ; * JMK38
               EMAIL.FILENAME=INFOOUT<1>           ; * JMK38
               EMAIL.OUT<6,-1>='   Accrual Spreadsheet - All remaining bills keyed':SPACE(30-LEN(EMAIL.FILENAME)):EMAIL.FILENAME   ; * JMK38
               EMAIL.OUT<11,-1>=EMAIL.PATH:EMAIL.FILENAME    ; * JMK38

* Excel Macro to format and print bills (Weekly Report) (attachment 2) ; * JMK38

*NPR07            EMAIL.FILENAME='EXCEL-MACRO.XLS'    ; * JMK38
*NPR07            EMAIL.OUT<6,-1>=' '       ; * JMK38

*NPR07            EMAIL.OUT<6,-1>='   Format/Print Bills Spreadsheet:          ':SPACE(30-LEN(EMAIL.FILENAME)):EMAIL.FILENAME         ; * JMK38
*NPR07            EMAIL.OUT<11,-1>='E:\ARDENT\PUBLIC\BILLDATA\FORMS\':EMAIL.FILENAME          ; * JMK38

*NPR07            EMAIL.OUT<6,-1>='------------------------------------------------------------------------------'          ; * JMK38
*NPR07            EMAIL.OUT<6,-1>='EXCEL-MACRO.XLS is an Excel Macro that will format and print the Accrual'      ; * JMK38
*NPR07            EMAIL.OUT<6,-1>='Spreadsheet.  If you want to use this macro, double click on its icon first'   ; * JMK38
*NPR07            EMAIL.OUT<6,-1>=' and then double click on the Accrual Spreadsheet icon.'   ; * JMK38

               EMAIL.OUT<6,-1>=' '       ; * JMK38
               EMAIL.OUT<6,-1>='If you have any questions, please call Myra Butts at 318.798.2111, ext. 232.'  ; * JMK38
               EMAIL.OUT<6,-1>=' '       ; * JMK38
               EMAIL.OUT<6,-1>=' '       ; * JMK38
               EMAIL.OUT<6,-1>='                         Thank You For Your Business'      ; * JMK38
               EMAIL.OUT<7>=1            ; * Auto format (add carriage returns to end of text) ; * JMK38

*              IF CLIENT.REC<179>='' THEN          ; * JMK32 ; * JMK38
               IF CLIENT.REC<179>='' OR ONCE=1 THEN          ; * JMK32 ; * JMK38
* Add our email addresses to the list of addresses for record keeping ; * JMK38
                  EMAIL.OUT<2,-1>='MButts@afs.net'           ; * CC: Email addresses ; * JMK38
               END                       ; * JMK32 ; * JMK38

* For testing and debugging only: Replace all email addresses with our email addresses ; * JMK38
*              IF USER='J-AMES' THEN ; * JMK38
*                 EMAIL.OUT<2>=''           ; * CC: Email addresses ; * JMK38
*                 EMAIL.OUT<3>=''           ; * BCC: Email addresses ; * JMK38
*              END ; * JMK38
               VIN=EMAIL.OUT             ; * JMK38
               CALL SENDMAIL(VIN,VOUT)   ; * JMK38
               IF VOUT<1>='ERROR' THEN   ; * JMK38
                  GOSUB EMAIL.SENDING.FAILURE      ; * JMK38
               END                       ; * JMK38
            END                          ; * IF THERE.ARE.ATTACHMENTS ; * JMK38
         END                             ; * IF CLIENT.REC<198>='Y' AND CLIENT.REC<92>='00002' ; * JMK38
         EDI.OPT=CLIENT.REC<70,13>       ; * JMK71
         IF EDI.OPT='A' OR EDI.OPT='L' OR EDI.OPT='B' THEN   ; * JMK71
            EDI.PB.VIN=''                ; * JMK71
            EDI.PB.VIN<1>=CLIENT         ; * JMK71
            EDI.PB.VIN<2>=EDI.OPT        ; * JMK71
            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
         END                             ; * JMK71
*DF      IF CLIENT='00873' THEN
*DF         EDI.PB.VIN=''
*DF         EDI.PB.VIN<1>='00873'
*DF         EDI.PB.VIN<2>='L'
*DF         CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)
*DF      END
*
* Removed printing of EDI bills on 8/25/03 per BJB. - DRF
*
*         IF CLIENT='00057' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00057'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='00499' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00499'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='00883' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00883'        ; * JMK71
*            EDI.PB.VIN<2>='A'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='00899' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00899'        ; * JMK71
*            EDI.PB.VIN<2>='B'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='00935' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00935'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='00957' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00957'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='00962' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00962'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='00982' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00982'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01005' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01005'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01074' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01074'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01085' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01085'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01109' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01109'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01129' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01129'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01145' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01145'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01168' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01168'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01179' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01179'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01274' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01274'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*         IF CLIENT='01365' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='01365'        ; * JMK71
*            EDI.PB.VIN<2>='L'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*DF         IF CLIENT='01063' THEN
*DF            EDI.PB.VIN=''
*DF            EDI.PB.VIN<1>='01063'
*DF            EDI.PB.VIN<2>='L'
*DF            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)
*DF         END
*
* Removed from printing only need 3rd party and 3rd party should not come
* in EDI. DAV 08/02/05
*
*         IF CLIENT='10272' THEN          ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='10272'        ; * JMK71
*            EDI.PB.VIN<2>='A'            ; * JMK71
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*DFIF CLIENT='00573' THEN
*DF  EDI.PB.VIN=''
*DF  EDI.PB.VIN<1>='00573'
*DF  EDI.PB.VIN<2>='L'
*DF  CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)
*DFEND
*         IF CLIENT='00913' AND END.DATE <='12830' THEN       ; * JMK71
*            EDI.PB.VIN=''                ; * JMK71
*            EDI.PB.VIN<1>='00913'        ; * JMK71
*            EDI.PB.VIN<2>='A'            ; * JMK71
*DF  EDI.PB.VIN<4>='I'
*            CALL PRINT.EDI.BILLS(EDI.PB.VIN,EDI.PB.VOUT,F.CLIENTS,F.CARRIERS)    ; * JMK71
*         END                             ; * JMK71
*
* Commented out on 10/06/99 after Beatrice called and stated that she
* has enough to work with and would let me know if she need any more.
* Change made by David on 10/06/99.
* Reinstated on 12/17/02 per Sly for a 30 day period. The period should
* end on 01/18/03 (12800). DRF 12/17/02
*
      END                                ; * JMK33 - NOT(TESTING)

*NPR09      READU FP.PROC.REC FROM F.TABLES,'FP_PROCESS' THEN      ; * JMK100
*NPR09         LOCATE CLIENT IN FP.PROC.REC<1> BY 'AR' SETTING FPPOS THEN    ; * JMK100
*NPR09            DEL FP.PROC.REC<1,FPPOS>     ; * JMK100
*NPR09            DEL FP.PROC.REC<2,FPPOS>     ; * JMK100
*NPR09            DEL FP.PROC.REC<3,FPPOS>     ; * JMK100
*NPR09            DEL FP.PROC.REC<4,FPPOS>     ; * JMK100
*NPR09         END                             ; * JMK100
*NPR09         IF FP.PROC.REC<1>='' THEN       ; * JMK100
*NPR09            DELETE F.TABLES,'FP_PROCESS'           ; * JMK100
*NPR09         END ELSE                        ; * JMK100
*NPR09            WRITE FP.PROC.REC ON F.TABLES,'FP_PROCESS'       ; * JMK100
*NPR09         END                             ; * JMK100
*NPR09      END                                ; * JMK100
*NPR09      RELEASE F.TABLES,'FP_PROCESS'      ; * JMK100

      GOTO 9999

*
* Start additions NPR09 - Moved updating of FB.TABLES,'FP_PROCESS' to a subroutine.
*
UPDATE.PROGRESS.REC:* UPDATE THE FB.TABLES,'FP_PROCESS' Item
*
      IF CLIENT = '' THEN RETURN         ; * NPR09

      READU FP.PROC.REC FROM F.TABLES,'FP_PROCESS' THEN      ; * JMK100
         LOCATE CLIENT IN FP.PROC.REC<1> BY 'AR' SETTING FPPOS THEN    ; * JMK100
            DEL FP.PROC.REC<1,FPPOS>     ; * JMK100
            DEL FP.PROC.REC<2,FPPOS>     ; * JMK100
            DEL FP.PROC.REC<3,FPPOS>     ; * JMK100
            DEL FP.PROC.REC<4,FPPOS>     ; * JMK100
         END                             ; * JMK100
         IF FP.PROC.REC<1>='' THEN       ; * JMK100
            DELETE F.TABLES,'FP_PROCESS'           ; * JMK100
         END ELSE                        ; * JMK100
            WRITE FP.PROC.REC ON F.TABLES,'FP_PROCESS'       ; * JMK100
         END                             ; * JMK100
      END                                ; * JMK100
      RELEASE F.TABLES,'FP_PROCESS'      ; * JMK100
*
      RETURN
*
* End additions NPR09
*
*
UPDATE.UP.FILE:* UPDATE THE UNPROCESS FILE
*
*DFIF LEN(UP.ID) < 255 THEN
      READV DUMMY FROM F.UP,UP.ID,1 ELSE
         WRITE UP.ARRAY ON F.UP,UP.ID
      END
*DFEND
      RETURN
**********************************************************************
INSERT.IN.ARRAY:
**********************************************************************
      IF SCT.FLG THEN                    ; * JMK18
         CODE+=1000                      ; * JMK18
      END                                ; * JMK18
      LOCATE CODE IN AR.REC<1> BY 'AR' SETTING REC.POS THEN
         AR.REC<3,REC.POS>=AR.REC<3,REC.POS>+AMOUNT
      END ELSE
         INS CODE BEFORE AR.REC<1,REC.POS>
         INS QUANITY BEFORE AR.REC<2,REC.POS>
         INS AMOUNT BEFORE AR.REC<3,REC.POS>
      END

*NPR08 - Start Changes

*      IF USER='NPRATT' THEN                                           ;* Temporary - Query whether YTD values need to be updated for all clients 06/01/09??
      LOCATE CODE IN CLIENT.YTD<79> BY 'AR' SETTING YTDPOS THEN
         CLIENT.YTD<80,YTDPOS>=CLIENT.YTD<80,YTDPOS> + QUANITY
         CLIENT.YTD<81,YTDPOS>=CLIENT.YTD<81,YTDPOS> + AMOUNT
      END ELSE
         INS CODE BEFORE CLIENT.YTD<79,YTDPOS>
         INS QUANITY BEFORE CLIENT.YTD<80,YTDPOS>
         INS AMOUNT BEFORE CLIENT.YTD<81,YTDPOS>
      END
*      END

*NPR08 - End Changes

      IF INDEX(AMOUNT,'.',1) THEN
         AR.REC=''
         SUBJ='Account processed with partial penny'
         TEXT=USER:' processed the account ':CLIENT:'-':CLIENT.REC<2>
         TEXT<1,-1>='This will need to be corrected before the data is pulled into AR'
         MVIN=''
         MVIN<1>='OHolman@afs.net'
         MVIN<1,-1>='MButts@afs.net'
         MVIN<1,-1>='KGilbert@afs.net'
         MVIN<1,-1>='DCurtis@afs.net'
         MVIN<2>='DFriend@afs.net'
         MVIN<4>='AFS'
         MVIN<5>=SUBJ
         MVIN<6>=TEXT
         CALL SENDMAIL(MVIN,MVOUT)
      END
      RETURN
**********************************************************************
EMAIL.SENDING.FAILURE:***
*   This subroutine is called when an email to be sent to a client fails
*   for some reason, most probably a misspelling of the TO:, CC:, or BCC:
*   addresses.  In the case of an email failure, send a warning email to
*   Owen, David, Myra, and James saying that this email failed to go out.

      EMAIL.TO=CHANGE(EMAIL.OUT<1>,@VM,' ')
      EMAIL.CC=CHANGE(EMAIL.OUT<2>,@VM,' ')
      EMAIL.BC=CHANGE(EMAIL.OUT<3>,@VM,' ')
      EMAIL.ERROR.OUT=''
      EMAIL.ERROR.OUT<1,1>='OHolman@afs.net'       ; * To: Email addresses
      EMAIL.ERROR.OUT<1,2>='DFriend@afs.net'
      EMAIL.ERROR.OUT<1,3>='MButts@afs.net'
      EMAIL.ERROR.OUT<1,4>='MMcKay@afs.net'
      EMAIL.ERROR.OUT<2>='MKerbow@afs.net'         ; * CC: Email addresses
      EMAIL.ERROR.OUT<3>=''              ; * BCC Email addresses
      EMAIL.ERROR.OUT<4>='Reports@afs.net'         ; * From Email address
      EMAIL.ERROR.OUT<5,1>='** ERROR ** ':EMAIL.OUT<5,1>     ; * Subject
      EMAIL.ERROR.OUT<6,1>='******************************************************************************'
      EMAIL.ERROR.OUT<6,2>='This email is NOT BEING SENT due to a failure of the email program blat.'
      EMAIL.ERROR.OUT<6,3>=' '
      EMAIL.ERROR.OUT<6,4>='It is NOT being sent to the following people at client ':CLIENT:' ':CLIENT.REC<2>:':'
      EMAIL.ERROR.OUT<6,5>=' '
      EMAIL.ERROR.OUT<6,6>=' TO: Addresses: ':EMAIL.TO
      EMAIL.ERROR.OUT<6,7>=' CC: Addresses: ':EMAIL.CC
      EMAIL.ERROR.OUT<6,8>='BCC: Addresses: ':EMAIL.BC
      EMAIL.ERROR.OUT<6,9>='******************************************************************************'
      NUM.EMAIL.LINES=DCOUNT(EMAIL.OUT<6>,@VM)
      FOR X=1 TO NUM.EMAIL.LINES
         EMAIL.ERROR.OUT<6,-1>=EMAIL.OUT<6,X>
      NEXT X
      EMAIL.ERROR.OUT<7>=1               ; * Auto format (add carriage returns to end of text)
      VIN=EMAIL.ERROR.OUT
      VOUT=''
      CALL SENDMAIL(VIN,VOUT)
      RETURN

* NPR08 - Start Changes
**********************************************************************
MONITOR.YTD.VALUES:***
*
*   This subroutine is called when YTD Value for a Sale Code goes above a previously specified 'cap'

      IF USER NE 'NPRATT' THEN RETURN    ; * ZZ 09/11/09 - this temporarily by-passed while FB.MONITOR.YTD.VALUES under construction/TESTING

      ID.TAB = "COMM_CAP*":CLIENT
      READ CAP.REC FROM F.TABLES, ID.TAB THEN
         MVIN = CLIENT
         MVIN<2> = CLIENT.REC<2>         ; * Client Name
         MVIN<3> = SERV.SLSMAN.EMAIL
         MVIN<4> = ACCT.MGR.EMAIL
         MVIN<5> = CLIENT.REC<29>        ; * Fiscal Year
         MVIN<6> = BEG.DATE              ; * Process from date
         MVIN<7> = END.DATE              ; * Process TO date
         ID.CLIENT2 = CAP.REC<5>
         IF ID.CLIENT2 NE "" THEN
            READV CLIENT2.DESC FROM F.CLIENTS, ID.CLIENT2, 2 ELSE CLIENT2.DESC = "Name not on file"
            MVIN<8> = ID.CLIENT2         ; * Additional Client
            MVIN<9> = CLIENT2.DESC       ; * Additional Client Name
         END
         MVOUT = ''
*ZZ   CALL FB.MONITOR.YTD.VALUES(MVIN,MVOUT,CLIENT.YTD,F.TABLES,F.BILLS.YTD)
      END

*NPR08 - End Changes

      RETURN

**********************************************************************
9999: * EXIT PROGRAM
      IF AR.BRIDGE.FLAG THEN
         READ TBR.INFO FROM F.BDG,BRIDGE.ID THEN
            IF TBR.INFO=BRIDGE.INFO THEN
               DELETE F.BDG,BRIDGE.ID
               AR.BRIDGE.FLAG=0
            END
         END
      END

      GOSUB UPDATE.PROGRESS.REC          ; * NPR09

*
* FINISH CAPTURE OF TIMING INFORMATION   ; * JMK82
*
      BENCH.ETIME=TIME()                 ; * JMK82
      BVIN=''                            ; * JMK82
      BVOUT=''                           ; * JMK82
      BVIN<1>=BENCH.PGM                  ; * JMK82
      BVIN<2>=BENCH.GRP                  ; * JMK82
      BVIN<3>=BENCH.BDATE                ; * JMK82
      BVIN<4>=BENCH.BTIME                ; * JMK82
      BVIN<5>=BENCH.USER                 ; * JMK82
      BVIN<6>=BENCH.ETIME                ; * JMK82
      BVIN<7>=BENCH.NUM.REC              ; * JMK82
      CALL UPD.TIMING.BENCH(BVIN,BVOUT)  ; * JMK82
      STOP
