***********************************************************************
* Program name : COUNT.OCR.QUEUE.RPT
* Author       : Greg Bino
* Date written : 10-11-2019
* Library      : FBBP
* COPYRIGHT (C) 2019 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* generate OCR queue count report
*
* Last updated by afs (AFSLOGISTICS\gbino) at 07:52:42 on 10/11/2019.
*
* Start modification history
* Mod 00 10-11-19, grb, 21092.0000  New program
* End modification history
*
************************************************************************
*
* Initialize variables
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE UDO.H

      STATUS = 0
      TOT.CNT = 0
      TAB = ","
      FILE.DATE = DATE()
      CNT=0
      FILE.DATE = OCONV(FILE.DATE,"D4-")
      RESP.CNT=1
      RESP = ''
      VOUT=''
      TIME.LINE=''
      ST.TIME = TIME()
      TIME.LINE<1,1,1>=TIME()            ; * start time
      PROMPT ''
      PROG.NAME='COUNT.OCR.QUEUE.RPT'
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'COUNT.OCR.QUEUE' ; UPL.VOUT = ''
      ***    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
      OPEN 'CONTROL' TO FILE.CNTL ELSE
         CALL ELINE('UNABLE TO OPEN CONTROL FILE')
         RETURN
      END
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT2("CLIENTS",PROG.NAME)
         RETURN
      END

      FILE.ID2 = 'OCR.QUEUE.CNT.XLS'
      OPENSEQ "GRB",FILE.ID2 TO FILE.OUT ELSE CREATE FILE.OUT
         ELSE ABORT
      WEOFSEQ FILE.OUT
      GOSUB BUILD.HEADER
      READ XMLPARAMS FROM FILE.CNTL,"CLIENT.OCR" THEN
         URL = XMLPARAMS<1>
         SERVER = XMLPARAMS<2>
         SOAPACTION = XMLPARAMS<3>
         LOGGING = XMLPARAMS<4>          ; * Y/N
         LOGFILE = XMLPARAMS<5>
         EMAIL.RECIP = XMLPARAMS<6>
         TEST.FLG = XMLPARAMS<7>
      END ELSE
         **       URL = 'https://imagingws.afs.net/images/list?clientFolder=':CLIENT.ID:'&underReview=null&excludeImported=true&limit=4000'
         LOGFILE="COUNT.OCR.QUEUE.LOG"
         LOGGING = "N"
         EMAIL.RECIP = 'gbino@afs.net'
         TEST.FLG = @FALSE
      END

      IF LOGGING = "Y" OR LOGGING = 1 THEN
         LOGGING = @TRUE
      END ELSE
         LOGGING = @FALSE
      END
      IF LOGGING THEN
         STAT = PROTOCOLLOGGING(LOGFILE, "ON", 10)
      END
      CRT @(-1)
      CRT @(5,2):"OCR IMAGE QUEUE COUNT REPORT"
      CMD ='SSELECT CLIENTS WITH OCR = "Y" AND WITH STATUS = "A"'
      EXECUTE CMD CAPTURING STUFF RETURNING JUNK
      EOJ=0
      LOOP
         READNEXT CLIENT ELSE EOJ = 1
      UNTIL EOJ DO
         CNT+=1
         CRT@(10,10):CNT
         RESP.CNT=1
         RESP = ''
         VOUT=''
         CLIENT.ID = CLIENT"R%5"
         READV CLIENT.NAME FROM F.CLIENTS,CLIENT.ID,2 ELSE CLIENT.NAME = "NOF"
         URL = 'https://imagingws.afs.net/images/list?clientFolder=':CLIENT.ID:'&underReview=null&excludeImported=true&limit=15000'
         GOSUB SEND.REST.REQUEST
         GOSUB PARSE.RESULTS
      REPEAT
      TIME.LINE<1,1,1>=TIME()            ; * finish time

9999: * THE END
      IF LOGGING THEN
         LOG.RET = PROTOCOLLOGGING(LOGFILE,"OFF",10)
      END
      DATALINE = "":CHAR(9):"":CHAR(9):TOT.CNT
      WRITESEQ DATALINE TO FILE.OUT THEN NULL
      CLOSESEQ FILE.OUT
      GOSUB SEND.EMAIL
      RETURN
***********************************************************************
SEND.REST.REQUEST:
***********************************************************************
      METHOD="GET"
*
      STAT = SETHTTPDEFAULT("VERSION", "1.1")
      STAT = CREATESECURITYCONTEXT(CTX, "TLSv1.2")
      STAT = CREATESECUREREQUEST(URL, METHOD, RESTGET,CTX)
      STAT = SETREQUESTHEADER(RESTGET, "Content-Type", "application/json;charset=utf-8")
      STAT = SUBMITREQUEST(RESTGET, 60000, "", HEADER, RESTDATA, HTTPSTATUS)

      RETURN

************************************************************************
PARSE.RESULTS:
************************************************************************

      UDOHANDLE = ""
      RESP = ''
      RESP.CNT = 1
      STATUS =UDORead(RESTDATA, UDOFORMAT_JSON, UDOHANDLE )
      NEW.LINE =""
      ST = UDOArrayGetSize(UDOHANDLE, ITEM_SIZE)
      IF ST NE UDO_SUCCESS OR ITEM_SIZE = 0 THEN
         ITEM_SIZE = 0
         NEW.LINE<1> = CLIENT.ID
         NEW.LINE<2> = CLIENT.NAME
         NEW.LINE<3> = ITEM_SIZE
         DATALINE = NEW.LINE<1>:CHAR(9):NEW.LINE<2>:CHAR(9):NEW.LINE<3>
         WRITESEQ DATALINE TO FILE.OUT THEN NULL
         TOT.CNT = TOT.CNT + ITEM_SIZE
         RETURN
      END ELSE
         NEW.LINE<1> = CLIENT.ID
         NEW.LINE<2> = CLIENT.NAME
         NEW.LINE<3> = ITEM_SIZE
         DATALINE = NEW.LINE<1>:CHAR(9):NEW.LINE<2>:CHAR(9):NEW.LINE<3>
         WRITESEQ DATALINE TO FILE.OUT THEN NULL
         TOT.CNT = TOT.CNT + ITEM_SIZE
         RETURN
      END

      FOR I = 1 TO ITEM_SIZE
         TEMP.ARRAY = ''
         ST = UDOArrayGetItem(UDOHANDLE, I, result_udo, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         ST = UDOGetProperty(result_udo, "imageKey", IMAGE.NO, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN IMAGE.NO = ""
         ST = UDOGetProperty(result_udo, "imagePath", IMAGE.PATH, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         BATCH.NO = FIELD(IMAGE.PATH,"\",9)
         BATCH.NO = FIELD(BATCH.NO,"_",1)
         IF UDOTYPE = UDO_NULL THEN IMAGE.PATH = ""
         ST = UDOGetProperty(result_udo, "clientKey", CLIENTKEY, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CLIENTKEY = ""
         NEW.LINE =''
         NEW.LINE<1> = CLIENT.ID
         NEW.LINE<2> = CLIENT.NAME
         NEW.LINE<3> = ITEM_SIZE
         DATALINE = NEW.LINE<1>:CHAR(9):NEW.LINE<2>
         WRITESEQ DATALINE TO FILE.OUT THEN NULL
         TOT.CNT = TOT.CNT + ITEM_SIZE
         RETURN

         ST = UDOGetProperty(result_udo, "scac", SCAC, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN SCAC = ""
         ST = UDOGetProperty(result_udo, "field1", FIELD1, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN FIELD1 = ""
         ST = UDOGetProperty(result_udo, "field2", PRONUM, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN PRONUM = ""
         ST = UDOGetProperty(result_udo, "field3",FIELD3, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN FIELD3 = ""
         ST = UDOGetProperty(result_udo, "carrierName",CARRIERNAME, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CARRIERNAME = ""
         ST = UDOGetProperty(result_udo, "importedIntoPick", UPDT.DT, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN UPDT.DT = ""
         IF UPDT.DT # "" THEN
            UPDT.DT = ICONV(UPDT.DT,'D')
         END
         ST = UDOGetProperty(result_udo, "clientFolder", CLIENTFOLDER, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CLIENTFOLDER = ""

         ST = UDOGetProperty(result_udo,"reviewId", REVIEWID, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN REVIEWID = ""

         ST = UDOGetProperty(result_udo,"needsReview", NEEDSREVIEW, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN NEEDSREVIEW = "0"
         IF UDOTYPE = UDO_FALSE THEN NEEDSREVIEW = "0"
         IF UDOTYPE = UDO_TRUE THEN NEEDSREVIEW = "1"

         ST = UDOGetProperty(result_udo, "failedVerification", FAIL.VERIFY, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN FAIL.VERIFY = "0"
         IF UDOTYPE = UDO_FALSE THEN FAIL.VERIFY = "0"
         IF UDOTYPE = UDO_TRUE THEN FAIL.VERIFY = "1"

***IF FIELD3 = "100" THEN CONTINUE
         TEMP.ARRAY<3> = IMAGE.NO
         TEMP.ARRAY<1> = FAIL.VERIFY
         ***     TEMP.ARRAY<2> =  TRIM(CARRIERNAME)
         TEMP.ARRAY<4> = PRONUM
         TEMP.ARRAY<5> = BATCH.NO

         RESP<1,-1> = TEMP.ARRAY<1>
         RESP<3,-1> = TEMP.ARRAY<3>
         RESP<4,-1> = TEMP.ARRAY<4>
         RESP<5,-1> = TEMP.ARRAY<5>
         CRT PRONUM:"  ":IMAGE.NO
      NEXT I
      IF RESP # "" THEN
         VOUT = RESP
      END
      RETURN
****************************************************
ERR.HANDLER:
*****************************************************

      ERRCODE = "" ; ERRMSG = ""
      S = UDOGetLastError(ERRCODE, ERRMSG)
      ERROR = "UDO ERROR: (":ERRCODE:") ":ERRMSG
      VOUT<1> =ERROR

      RETURN

************************************************************************
REPORT.INTERNAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()
      EMAIL.OUT<1,-1> = 'gbino@afs.net'
      EMAIL.OUT<6, -1> = 'URL = ':URL
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'CLIENT = ':CLIENT.ID
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'ERROR = ':ERROR
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '

      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
****      VOUT<1> = "ERROR"
      VOUT<1> = 0
      RETURN
************************************************************************
REPORT.FATAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()
      EMAIL.OUT<1>=EMAIL.RECIP
      EMAIL.OUT<1,-1> = 'gbino@afs.net'
      EMAIL.OUT<1,-1> = 'dfriend@afs.net'
      EMAIL.OUT<1,-1> = 'nmeddaugh@afs.net'
      FATAL.ERROR.SUBJ = 'REST REQUEST ERROR'
      EMAIL.OUT<5>=FATAL.ERROR.SUBJ
      EMAIL.OUT<6,-1> = 'URL = ':URL
      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
      IDATE=DATE()
      ITIME=TIME()
      TIME.BLOCK=INT(ITIME/600)
      *  VOUT<1> = "ERROR"
      RETURN
**********************************************
BUILD.HEADER:
**********************************************
      HDR2 ='CLIENT':TAB:"CLIENT NAME":TAB:"COUNT"
      HDR1='Daily OCR Queue Count for ':FILE.DATE
      NULL = ""
      CONVERT TAB TO CHAR(9) IN HDR1
      WRITESEQ HDR1 TO FILE.OUT THEN NULL

      CONVERT TAB TO CHAR(9) IN HDR2
      WRITESEQ HDR2 ON FILE.OUT THEN NULL
      RETURN
**********************************************
SEND.EMAIL:
**********************************************
      PDFVIN =''
      PDFVIN<1> = 'gbino@afs.net'
      PDFVIN<2> = 'gbino@afs.net'
***PDFVIN<2> = 'htinsley@afs.net'
      PDFVIN<4> = 'gbino@afs.net'
      PDFVIN<5> = 'Daily OCR Queue Counts Report'
      BODY = ''
      BODY<1,-1> = ' '
      BODY<1,-1> = 'Here is the OCR Count report for ':FILE.DATE
***BODY<1,-1> = "This is a test. if you can't read the fine print you are getting old "
      BODY<1,-1> = ' '
      BODY<1,-1> = 'Thanks,'
      BODY<1,-1> = 'Greg'
      BODY<1,-1> = ' '
      BODY<1,-1> = ' '

      PDFVIN<6> = BODY

      PDFVIN<11> = ''
      FILE.ID2 = 'OCR.QUEUE.CNT.XLS'
      **  PDFVIN<11,-1> = 'e:\Ardent\public\billdata\E-BILL Hist\':FILE.ID2
      PDFVIN<11,-1> = 'e:\Ardent\accounts\afs\GRB\':FILE.ID2
      BODY<1,-1> = 'Note : ':FILE.ID2

      PDFVOUT=''
      CALL SENDMAIL(PDFVIN,PDFVOUT)
      RETURN
   END
