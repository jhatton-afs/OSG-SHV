      SUBROUTINE UPD.SQL.FBPROC.SUB(VIN,VOUT,AR.REC)
***********************************************************************
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.FBPROC.SUB' ; UPL.VOUT = ''       ; * NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
* Analyze bills acted upon by auditors
* Copyright (c) AFS Logistics, LLC., 2002
*
* AUTHOR : Owen Holman
* Date   : January 2002
***********************************************************************
* 061912 - JMK01 - Choose development SQL server if not production server AFS
*************************************************************************
!
* Include the ODBC definitions
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01
      USER=VIN<1>
      CLIENT.ID=VIN<2>
      SOURCE=VIN<3>                      ; * Either "AR" or "BRIDGE" to indicate where this is loaded from
                                         ; * AR - Historical Load, BRIDGE - FP Processing Load

      form = "T##########"
      dash = "----------"
      Expect = ""
      NULL=""
      TOT.NUM.BILLS=0

      ERROR.CNT=0
10:   ERRORS=''

      GOSUB SETUP.SQL

      TR.DATE=AR.REC<4>
      SQL.ClientNumber=CLIENT.ID
      SQL.ProcessDate=TR.DATE'D4/'
      SQL.ProcessingFee=0
      SQL.Postage=0
      SQL.LogisticsDebitMemo=0
      SQL.ServiceFee=0
      SQL.LogisticsFee=0
      SQL.WeeklyPostageFee=0
      SQL.UPSFee=0
      SQL.DiscountCommission=0
      SQL.ClaimsFee=0
      SQL.ProgramFee=0

      IF SOURCE='AR' THEN
         NVAL1=DCOUNT(AR.REC<6>,@VM)
      END ELSE
         NVAL1=DCOUNT(AR.REC<1>,@VM)
      END
      FOR VAL1 = 1 TO NVAL1
         IF SOURCE='AR' THEN
            SLS.CODE=AR.REC<6,VAL1>
            SLS.AMT=AR.REC<5,VAL1>
         END ELSE
            SLS.CODE=AR.REC<1,VAL1>
            SLS.AMT=AR.REC<3,VAL1>
         END
         BEGIN CASE
            CASE SLS.CODE=2 OR SLS.CODE=1002 OR SLS.CODE=3002 OR SLS.CODE=6002
               SQL.ProcessingFee+=SLS.AMT
            CASE SLS.CODE=3 OR SLS.CODE=1003 OR SLS.CODE=3003 OR SLS.CODE=6003
               SQL.ServiceFee+=SLS.AMT
            CASE SLS.CODE=7 OR SLS.CODE=1007 OR SLS.CODE=3007 OR SLS.CODE=6007
               SQL.Postage+=SLS.AMT
            CASE SLS.CODE=12 OR SLS.CODE=1012 OR SLS.CODE=3012 OR SLS.CODE=6012
               SQL.LogisticsDebitMemo+=SLS.AMT
            CASE SLS.CODE=13 OR SLS.CODE=1013 OR SLS.CODE=3013 OR SLS.CODE=6013
               SQL.LogisticsFee+=SLS.AMT
            CASE SLS.CODE=102 OR SLS.CODE=1102 OR SLS.CODE=3102 OR SLS.CODE=6102
               SQL.WeeklyPostageFee+=SLS.AMT
            CASE SLS.CODE=103 OR SLS.CODE=1103 OR SLS.CODE=3103 OR SLS.CODE=6103
               SQL.UPSFee+=SLS.AMT
            CASE SLS.CODE=105 OR SLS.CODE=1105 OR SLS.CODE=3105 OR SLS.CODE=6105
               SQL.WeeklyPostageFee+=SLS.AMT
            CASE SLS.CODE=121 OR SLS.CODE=1121 OR SLS.CODE=3121 OR SLS.CODE=6121
               SQL.WeeklyPostageFee+=SLS.AMT
            CASE SLS.CODE=131 OR SLS.CODE=1131 OR SLS.CODE=3131 OR SLS.CODE=6131
               SQL.ClaimsFee+=SLS.AMT
            CASE SLS.CODE=135 OR SLS.CODE=1135 OR SLS.CODE=3135 OR SLS.CODE=6135
               SQL.ProgramFee+=SLS.AMT
            CASE SLS.CODE=151 OR SLS.CODE=1151 OR SLS.CODE=3151 OR SLS.CODE=6151
               SQL.LogisticsFee+=SLS.AMT
         END CASE
      NEXT VAL1

      SQL.ProcessingFee=SQL.ProcessingFee'R26'
      SQL.Postage=SQL.Postage'R26'
      SQL.LogisticsDebitMemo=SQL.LogisticsDebitMemo'R26'
      SQL.ServiceFee=SQL.ServiceFee'R26'
      SQL.LogisticsFee=SQL.LogisticsFee'R26'
      SQL.WeeklyPostageFee=SQL.WeeklyPostageFee'R26'
      SQL.UPSFee=SQL.UPSFee'R26'
      SQL.DiscountCommission=SQL.DiscountCommission'R26'
      SQL.ClaimsFee=SQL.ClaimsFee'R26'
      SQL.ProgramFee=SQL.ProgramFee'R26'

      Fn = "SQLExecute"
      STATUS = SQLExecute(STMTENV)
      GOSUB CKSTMTENV



THE.END:***
*     End of program
*
* Now just clean up the environment and leave
*
      Fn = "SQLFreeStmt"
      STATUS = SQLFreeStmt(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      Fn = "SQLDisconnect"
      STATUS = SQLDisconnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeConnect"
      STATUS = SQLFreeConnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeEnv"
      STATUS = SQLFreeEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1>='UPD.SQL.Group@afs.net'
            MVIN<4>='AFS_UPD.SQL.FBPROC.SUB'
            MVIN<5>='SQL Client Non-Shipment Fee Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:' but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP
*************************************************************************
SETUP.SQL:*
*************************************************************************
* Create an ODBC environment & a connection environment. Use the
* SSQLSetConnectOption to specify the Operating system user ID and
* password.

      STATUS = SQLAllocEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLAllocConnect(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* Gather the data source name, userid and password for the server O/S and
* information for the DBMS at the server. The DBMS info is often also
* a user name and password, but not in all cases.
*
*     SQLSVR.INFO=OCONV('SQLSVR','TFB.TABLES;X;;1')          ; * JMK01
*     SOURCE=FIELD(SQLSVR.INFO<1>,' ',1)           ; * JMK01
*     UID=FIELD(SQLSVR.INFO<1>,' ',2)    ; * JMK01
*     PWD=FIELD(SQLSVR.INFO<1>,' ',3)    ; * JMK01
      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='PRODODS'             ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVODS'              ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* Establish a session to the specified data source
*
*     PRINT "Connecting to data source: ": SOURCE
      Fn = "SQLConnect"
      STATUS = SQLConnect(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV
*
* Now allocate an SQL statement environment
* to be used for executing SQL statements
*
      Fn = "SQLAllocStmt"
      STATUS = SQLAllocStmt(CONENV,STMTENV)
      GOSUB CKCONENV

*
* Note that we are using parameter markers in the SQL statement to facilitate
* loading multiple rows of data efficiently
*
      OPT.STR = STR(' ?,',11)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdNonShipmentFee (":OPT.STR:")}"
      CRT @(0,0):@(-1):

      ROWNUM = 0
      Fn = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(STMTENV, 1, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.ClientNumber) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.ProcessDate) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 3, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ProcessingFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 4, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.Postage) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 5, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.LogisticsDebitMemo) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 6, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ServiceFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 7, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.LogisticsFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 8, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.WeeklyPostageFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 9, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.UPSFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 10, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ClaimsFee) ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(STMTENV, 11, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ProgramFee) ; GOSUB CKSTMTENV

      Fn = "SQLPrepare"
      STATUS = SQLPrepare(STMTENV, INST1)
      GOSUB CKSTMTENV

      RETURN
*************************************************************************
CKCONENV:
*************************************************************************

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBPROC.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN
*************************************************************************
CKSTMTENV:
*************************************************************************
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBPROC.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
