      SUBROUTINE FB.AUTO.V2(VIN,VOUT,DAUDIT,CONTR.DFSC,BENCH.DFSC,DTARIFFS,DTARIFF.DATE.XREF,LI.CODES,F.AUDIT.TABLES,F.AUDIT.ZIPS,F.PCIN,F.PCOUT,F.TABLES)
*******************************************************************
* Program name : FB.AUTO.V2
* Author       : Owen Holman
* Date written : 12/23/96
* Library      : FBBP
$* COPYRIGHT (C) 1998 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* FREIGHT BILLING PACKAGE
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 10:31:51 on 10/29/2020.
*
* Start modification history
* 082802 - JMK01 - ADD CANADA TO AUDIT PROCESS
* 110802 - JMK02 - ADD ASSESSORIAL CWT CALCULATION
* 121302 - JMK03 - USE MISC CHG CODES ONLY ONCE
* 012103 - JMK04 - ADD MAX.LTL TO PROCESSING
* 050603 - JMK06 - ADD CALCULATION DETAILS TO OUT VARIABLE
* 060603 - JMK07 - DISABLE JMK06 PROCESSING
* 120903 - JMK08 - LETS TRY JMK06 AGAIN
* 021104 - JMK09 - ADJUST FOR CONTRACT MINIMUMS FOR FB DETAILS
* 021204 - JMK10 - ADD BENCHMARK MIN FOR BLDR FACTORY ST 01209
* 111504 - JMK11 - ADD FORCED BENCHMARK MINIMUM PARAMETERS
* 022805 - JMK12 - COLLECT THREE SETS OF FSC DATA FOR REVIEW
* 040505 - JMK13 - ADD ATK (01365) BM OVERRIDES PER AGREEMENT
* 042905 - JMK14 - ADJUST MAX WEIGHT LTL EVALUATIONS FROM GE TO GT
* 081905 - JMK15 - ADD CONS MFG (00843) BM OVERRIDES PER AGREEMENT
* 112305 - JMK16 - GET TRANSIT TIME AND DIRECT INFO FROM RATEWARE SERVER
* 120705 - JMK17 - SETUP EXCEPTIONS FOR TIME AND DIRECT INFO FROM RATEWARE
* 121305 - JMK18 - ADD TERMINAL INFO FROM CARRIER CONTACT SERVICE
* 012506 - JMK20 - ADD FLAT RATE CHARGES FOR ATK PALLETS AND OTHERS
* 013006 - JMK21 - EXPAND FLAT RATE CHARGES FOR INTRA AND INTER
* 020206 - JMK22 - TEST AFS500 ON RWS FOR FUNCTIONALITY
* 020906 - JMK23 - ADD MULTIPLE CALLS FOR RWS WHEN NETWORK CLOGS
* 021306 - JMK24 - FLAT RATE CHARGE ADJUSTMENTS FOR "0.00" PLACEHOLDERS
* 021406 - JMK25 - DISABLE THE AFS500 CALLS TO RWS AND REINSTATE AFS500 SUBROUTINE
* 030606 - JMK26 - ENABLE CALLS TO RWS AND DISABLE AFS500 SUBROUTINE
* 030806 - JMK27 - ADD ACCESSORIAL CHARGES TO RETURN INFORMATION
* 031506 - JMK28 - RE-ENABLE THE ABSOLUTE MINIMUM WITH THE JMK24 CHANGES
* 031706 - JMK29 - ADD CARRIER DATA UPDATE DATE FROM RWS TO RETURN INFORMATION
* 050106 - JMK30 - DISABLE CON-WAY AB-BA REQUIREMENT FOR THIRD PARTY
* 071306 - JMK31 - ADD AFS525 TO RATEWARE SERVER CALL
* 083106 - JMK32 - ADD OLA.CARRIER FOR SUBSTITUTION CARRIERS
* 092606 - JMK33 - PASS CLIENT TO RWS FOR WEIGHT ADJUSTMENT (01215)
* 122206 - JMK34 - T200612060011 / priority 2 / Excessive charge - CALCULATE % FOR MISC CHG
* 102407 - JMK35 - T070072 - Pozas Bros Direct Points (C200707050003)
* 120507 - JMK36 - C070955 - Add ability to use Old AFS FSC in Benchmark Calculation
* 010308 - JMK37 - T070072 - Pozas Bros Direct Points (C200707050003)
* 020108 - JMK38 - C080232 - Adding Joint Line Pricing to OLA
* 022008 - JMK39 - T080556 - Joint line rate quote
* 022108 - NPR02 - T070199 - 3RD PTY SELECT BEST TABLE BASED ON QUOTE AMT AND NOT HIGHEST TABLE #
* 022208 - JMK40 - TEMPORARY PATCH FOR ROADWAY AVINGER SERVICE OVERRIDE
* 022708 - JMK41 - C080646 - Modify inbound joint line pricing
* 030508 - JMK42 - T080590 - Rate Estimate unresponsive 4:00 - 6:30 EST.
* 031108 - JMK43 - T080590 - Rate Estimate unresponsive 4:00 - 6:30 EST.
* 041808 - NPR03 - C080766 - Adding a date effective to OLA zip code substitution screen
* 051308 - JMK44 - PASS F.TABLES FILE VARIABLE TO RWS AND RWS.SVC INSTEAD OF OPENING
* 062708 - JMK45 - INITIALIZE "ROUTE.ZIP" AND "LOOKUP.ZIP" TO AVOID VNAV NOTICE
* 071508 - JMK46 - C081534 - Special SS report for saving spread between pricing arrangements
* 080708 - NPR04 - T080691 - Added lookup on Table for setting JL related flags for specific zips
* 081108 - JMK47 - C081931 - Send an email each time an invalid zip is sent to RWS
* 090908 - JMK48 - T082074 - Joint Line issue: some information coming from wrong table
* 092908 - JMK49 - C082012 - Add Beaver Express points into web rater
* 100608 - JMK50 - T082273 - FSC Benchmarks ; Force FSC Benchmark to "C" when current fuel is not "AFS" or "AFN"
* 111208 - JMK51 - C081905 - Allow multiple discounts on BM in OLA
* 020409 - JMK52 - ADD TOTAL GROSS CHARGE WITHOUT DISCOUNT TO OUTPUT
* 022709 - DRF01 - VIN<52> is bill date and is used to calculate the FSC
* 052809 - JMK53 - C090708 - Changes to commissions for new client Freight Buddy
* 061809 - JMK54 - T090800 - JL state is turned on but still saying "cannot audit, this is a misroute, NO INBOUND JOINT LINE PRICING"
* 102009 - JMK55 - C091269 - New accessorial calculation
* 122909 - NPR05 - T091441 - Display more info with regard to FSC calculations (Added minor changes on 10/13/09).
* 081310 - JMK56 - ADDITIONAL FILTER FOR JOINT LINE CONFIRMATION JL.FLAG MUST HAVE SOME CC FLAG AND NOT NULL
* 092410 - NPR06 - T100669 - Add email alert for 'ALL is NOT setup as a Routing Zip'.
* 100710 - NPR07 - T100960 - Add PRO No. to email alert for 'ALL is NOT setup as a Routing Zip'.
* 123010 - JMK57 - T101218 - FB entry ; error - 103 bench.tariff  missing from tariff eff date xref
* 011911 - JMK58 - PASSING RATED BILL TYPE FOR CONTRACT AND BENCHMARK
* 092611 - JMK59 - C111243 - AER Sales 01863 Excessive Freight Expense
* 072612 - JMK60 - SysAid#3317 - USI 25117 - Transit Times
* 091712 - JMK61 - HelpDesk#163 - AER-EFE Reports incorrect carrier used
* 110512 - JMK62 - RETURN CONTRACT AND BENCHMARK TARIFFS FOR TABULATION
* 022113 - SWB01 - SysAid#5177 - Modification to override message in INET.FB.ESTIMATOR
* 070113 - JMK63 - SysAid#6347 - Need commissions to calculate for Beaver Express
* 082913 - JMK64 - Project #377 - Retrieve Rate Aquistion Time Line
* 092413 - JMK65 - Project#377 - Install RateWareXL web srevices
* 101413 - JMK66 - SysAid#6347 - Beaver Express to calculate logistics
* 042814 - JMK67 - SysAid#9449 - B&H service points - Disable call to Carrier Connect for overrides
* 042914 - JMK68 - SysAid#9525 - SEFL info not reporting correct (Reverse JMK67)
* 053014 - DRF02 - SysAid 9913 - Allow AFS rating for client 01019 for
*                  carrier 00198 effective 5/16/14 for weight over 1
*                  pound
* 081914 - DRF03 - SysAid 11329 - Allow AFS rating for client 02490 for
*                  carrier 00198 effective 7/31/14 for weight over 100
*                  pounds
* 100814 - DRF04 - SysAid 12264 - Joint Line Benchmark not working
* 110614 - JMK69 - SysAid#10740 - Shipping point on but not quoting (Reversal of JMK61)
* 111814 - DRF05 - SysAid 13642 - Changed client 01822 and carrier 00561
*                  to take commission on all shipment not just those over
*                  Reinstalled DRF05 per email from Wayne on 11/19/14
*                  100 pounds.
* 010515 - DRF06 - SysAid 14472 - Beaver Express should not take
*                  commission on weight less than 200 for client
*                  01015 Hillyard
* 010515 - SWB02 - SysAid#14510 - Disable email for Auditors from FB.AUTO
* 022515 - JMK70 - SysAid#15482 - NON- SMC Carrier Service 1,1,11,17
* 031715 - JMK71 - SysAid#16032 - Webrater issues withe SEFL
* 041715 - DRF07 - SysAid 16764 - Allow AFS rating for client 05171 for
*                  carrier 00198 effective 04/17/15 for weight over 100
*                  pounds
* 042015 - DRF08 - SysAid 16506 - Non SMC Carrier Service
* 042115 - DRF09 - SysAid 16856 - Allow AFS rating for client 01394 for
*                  carrier 00198 effective 01/15/15 for weight over 100
*                  pounds
* 060115 - DRF10 - SysAid 17595 - Allow AFS rating for client 05411 for
*                  carrier 00198 effective 06/01/15 for weight over 100
*                  pounds
* 061015 - SWB03 - SysAid 17933 - Beaver Express should take commission
*                  on weight from 101 to 200 for bills starting 06/12/15
*                  for client 01650 (EGW Utilities)
* 081216 - DRF11 - SysAid 19299 - Beaver Express should take commission
*                  on weight from 1 to 200 for bills 01/01/15 for client
*                  05351 Airgas Gulf Coast
* 012816 - DRF11 - SysAid 21613 - Beaver Express should take commission
*                  on weight from 101 to 200 for bills 01/01/15 for client
*                  01454 HIS Coating
* 051716 - GRB01 - SysAid 24574 - Beaver Express should take commission on weight from 1 to 200 for bills 05/20/16 for client
*                  00851 and 02027
* 061416 - GRB02 - SysAid 25203 - Beaver Express should take commission on weight from 1 to 200 for bills 06/13/16 for client
*                  01781
* 062316 - GRB03 - SysAid 25430 - Beaver Express should take commission on weight from 1 to 200 for bills 06/28/16 for client
*                  01987
* 080316 - GRB04 - SysAid 26204 - Beaver Express should take commission on weight from 1 to 200 for bills 08/08/16 for client
*                  01072, 07073, 07074, 02104
* 082416 - GRB05 - SysAid 26549 Reverse change for ticket 13642
*
* 091216 - TAG01 - Sysaid 26995 Calculate Cost Management Saving For 05095
* 110216 - TAG02 - SysAid 28197 Calculate Cost Management Saving For 05608
* 013017 - TAG03 - SysAid 30104 Calculate Cost Management Saving For 01789
* 080317 - NKH01 - ME 5480 Calculate Cost Management Saving For 01650
* 091417 - NKH02 - Retreive Transit Days from CCXL
* 110217 - NKH03 - ME 8113 Beaver Express should take commision on weight
*                  from 101 and up for bills 11/13/17 for client 00934
* 111417 - NKH04 - ME 8311 Modified to use Audit Assessorial Include/Exclude flags
* 122217 - NKH05 - Modified for call to Carrier Connect XL
* 021217 - NKH06 - Capture FB detail rates and charges for analysis (Rerate)
* 031618 - NKH07 - ME 10931 Changed old TP logic to use orig zip code from table
* 040618 - NKH08 - Modified for Rateware web server version 2 (RWXL.V2)
* 050718 - NKH09 - Corrected issue with rerate
* 050918 - NKH10 - Corected issue with accessorials
* 052218 - DRF12 - Ticket 12681 - Corrected the counter for number of
*                  effective date for the substitute zips if the
*                  beginning date is null.
* 070518 - NKH11 - Added tariff to activity file
* 071118 - NKH12 - ME 12839 Modified accessorial calculations
* 073118 - NKH13 - ME 13646 Corrected accessorial issue with ASK
* 081618 - NKH14 - ACCU-43 Caluculate Cost Manangement Savings For 05763
* 090618 - NKH15 - Summed weights in the same class
* 091218 - GRB06 - Correct table for OLD third party CALC
* 091818 - NKH16 - ACCU-44 Use the substitute client for FB.AUDIT.ACC file
* 103118 - NKH17 - ACCU-180 Calculate Cost Management savings for 5673
* 111218 - NKH18 - ACCU-195 Calculate Cost Management savings for 1141
* 111418 - NKH19 - Modification for AFS tariffs for conversion to RWXL
* 123118 - GRB07 - ACCU-79 Add canadian joint line
* 061119 - NKH20 - ACCU-411 - Corrected unasigned variables
* 071519 - NKH21 - ACCU-438 Calculate Cost Management savings for 1141
* 123019 - NKH22 - ACCU-717 Removed "%" from compare on accesorials
* 011420 - NKH23 - ACCU-738 Calculate Cost Management savings for 726
* 102920 - NKH24 - ACCU-1002 Corrected issue with accesorial minimum
* 121620 - NKH25 - ACCU-1074 Added Tempo Rater - Placeholder for V3
* End modification history
*******************************************************************
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE FILE.DEFS INC_FB.AUDIT
****      COMMON PROG.PARAMS(24)
****      EQU CH.NUM TO PROG.PARAMS(1)
****      EQU USER TO PROG.PARAMS(2)
****      EQU SERVER.NAME TO PROG.PARAMS(3)

      CALL GET.USER.NEW(USER,CH.NUM)
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'FB.AUTO.V2' ; UPL.VOUT = ''     ; * NPR_UPL 04/23/2010
      UPL.VIN<3> = USER
      UPL.VIN<4> = CH.NUM
      ** CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010

      * Open files
      OPEN '','FB.AUDIT.ACC' TO F.AUDIT.ACC ELSE
         ERROR="Cannot Open FB.AUDIT.ACC File for Accessorial Charges"
         AUDIT='U'
         GO 9000
      END
      * Begin NKH02
      OPEN '','ZIPS' TO ZIPS ELSE
         CALL OPEN.ABORT('ZIPS','FB.AUTO')
      END
      * End NKH02
      * Begin GRB18
      OPEN '','TEMPO.CLIENTS' TO F.TEMPOC ELSE
         CALL OPEN.ABORT('TEMPO.CLIENTS',PROG.NAME)
      END
      OPEN '','TEMPO.CLIENTS.ACC' TO F.TEMPOCACC ELSE
         CALL OPEN.ABORT('TEMPO.CLIENTS.ACC',PROG.NAME)
      END
      * End GRB18

      * Initialize variables
      PROMPT ''
*     DFSC=''
      SAVE.CONTR = ''                    ; * NKH04
      SAVE.BENCH = ''                    ; * NKH04
      RWXL.SMC.ERROR=''                  ; * NKH08
      FAK=1
      FSC.LOGISTICS.AMT=0
      GTOT.CONTR.AMT=0
      GTOT.BENCH.AMT=0
      READ AFSO.BENCH.DFSC FROM F.TABLES,'AFSO*FSC' ELSE AFSO.BENCH.DFSC=''      ; * JMK36
      CONTR.FSC.PARMS=''                 ; * JMK12
      BENCH.FSC.PARMS=''                 ; * JMK12
      CUR.CONTR.MISC.AMT = 0             ; * NKH20
      CUR.BENCH.MISC.AMT = 0             ; * NKH20
      CONTR.MIN.A = ''                   ; * NKH20
      BENCH.MIN.A = ''                   ; * NKH20
      AFSO.BENCH.FSC.PARMS=''            ; * JMK36
      AFS.FSC.PARMS=''                   ; * JMK12
      TOT.BENCH.AMT=0                    ; * JMK12
      TOT.CONTR.AMT=0                    ; * JMK12
      WHY=''
      DTL.VOUT=''                        ; * JMK06
      FB.DTL.VOUT=''                     ; * NKH06
      ZIP.VOUT=''
      TP.VOUT1 = ""                      ; * NPR02
      TP.VOUT2 = ""                      ; * NPR02
      CONTR.TARIFF.DRIVER=''
      BENCH.TARIFF.DRIVER=''
      CONTR.DOUT=''
      BENCH.DOUT=''                      ; * In case of no logistics
      CONTR.TIME.LINE=''                 ; * JMK64
      BENCH.TIME.LINE=''                 ; * JMK64
      CUR.BENCH.DISC = 0
      QUOTE.AMT = 0
      NULL=''                            ; * Used for Mass Change back to CRT Command
      DTL.VOUT=''                        ; * JMK06
      SENT.TO.PC=0
      ERROR=''
      TESTING=0
      X.EX.FLAG=''
      RWS.TIMES = 0                      ; * JMK23
      AUDIT.ACC = 0
      OPT = VIN<1>
      IF OPT = 'I' THEN
         INQUIRE = 1
         CW.MODE = 'EDIT'
         MC.MODE = 'EDIT'
      END ELSE
         INQUIRE = 0
         CW.MODE = 'INPUT'
         MC.MODE = 'INPUT'
      END
      TRANS.MODE=''
      CONTR.BILL.TYPE=''                 ; * JMK58
      BENCH.BILL.TYPE=''                 ; * JMK58
      BILL.DATE=VIN<3>
      TRANS.MODE=VIN<4>
      PIECES=VIN<5>
      TOT.WEIGHT=VIN<6>
      AIR.MISC.CHARGE=VIN<7>             ; * Not Used -> Passed Through
      CARRIER.CHARGE=VIN<8>
      CARRIER=VIN<10>
      OLA.CARRIER=CARRIER                ; * JMK32
      IF CARRIER='13171' THEN OLA.CARRIER='01625'  ; * JMK32
      IF CARRIER='00537' THEN OLA.CARRIER='12826'  ; * JMK32
      IF CARRIER='12244' THEN OLA.CARRIER='12826'  ; * JMK32
      CK.CS=0                            ; * JMK35
      READ NSMC.LIST FROM F.TABLES,'NSMC.CARRIERS' ELSE NSMC.LIST=''   ; * JMK37
      LOCATE CARRIER IN NSMC.LIST SETTING WPOS THEN CK.CS=1  ; * JMK37
      CLIENT=VIN<11>
      AUDIT.CLIENT.ID=VIN<59>            ; * NKH16
      IOT=VIN<12>
      ORIG.ZIP=VIN<13,1>
      ORIG.CITY=VIN<13,2>
      ORIG.STATE=VIN<13,3>
      DEST.ZIP=VIN<14,1>
      DEST.CITY=VIN<14,2>
      DEST.STATE=VIN<14,3>
      ROUTE.ZIP=''                       ; * JMK45
      LOOKUP.ZIP=''                      ; * JMK45
      CDN.ROUTE=0                        ; * JMK01
      SET.VOUT=1                         ; * NPR02
      IF NOT(NUM(ORIG.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      IF NOT(NUM(DEST.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      CL.ZIP.DEF=VIN<15>
      USER=VIN<16>
      * Begin GRB01
      VIN1=''
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "S"
      * CALL PROGTRACK(VIN1,VOUT1)
      * End GRB01
      OWEN=0
      MISROUTE=VIN<17>
      CLASS.WGT=''
      * Begin NKH15
      CLASS.ARRAY = ''
      WEIGHT.ARRAY = ''
      CLS.CNT = DCOUNT(VIN<18>,@VM)
      FOR CC = 1 TO CLS.CNT
         CW1 = VIN<18,CC>
         CW2 = VIN<19,CC>
         LOCATE(CW1,CLASS.ARRAY,1;POS;'AL') THEN
            WEIGHT.ARRAY<1,POS> += CW2
         END ELSE
            CLASS.ARRAY = INSERT(CLASS.ARRAY,1,POS,0,CW1)
            WEIGHT.ARRAY = INSERT(WEIGHT.ARRAY,1,POS,0,CW2)
         END
      NEXT CC
      CLASS.WGT<1>=CLASS.ARRAY
      CLASS.WGT<2>=WEIGHT.ARRAY
*      CLASS.WGT<1>=VIN<18>               ; * Mv Classes
*      CLASS.WGT<2>=VIN<19>               ; * Mv Weights
      * End NKH15
      IF TOT.WEIGHT+0=0 THEN             ; * Add it up from the MV Weights
         TIMES=DCOUNT(CLASS.WGT<2>,@VM)
         TOT.WEIGHT=0
         FOR X = 1 TO TIMES
            TOT.WEIGHT+=CLASS.WGT<2,X>
         NEXT X
      END
      MISC.CHG=''
      MISC.CHG<1>=VIN<21>                ; * Mv Charge Codes
      MISC.CHG<2>=VIN<22>                ; * Mv Contract  Charge Amounts
      MISC.CHG<3>=VIN<23>                ; * Mv Benchmark Charge Amounts
      ****IF USER = 'GBINO' THEN DEBUG
      ACC.ARRAY=MISC.CHG                 ; * JMK27
      NO.LOG.FSC=VIN<35>                 ; * 1=Do not Calculate/ADD FSC to Log/Bench Amt
      LOGISTICS=VIN<24>
      MAX.LTL=VIN<46>                    ; * JMK04
      IF MAX.LTL='' THEN MAX.LTL = '15000'
      IF NOT(NUM(MAX.LTL)) THEN MAX.LTL='15000'
      IF MAX.LTL < 0 THEN MAX.LTL = '15000'
      ORIG.CARRIER=VIN<47>               ; * JMK12
      FORCE.BENCH.MIN=VIN<48>            ; * JMK11
      CARR.ONLY.FSC=VIN<49>              ; * JMK12
      CARRIER.SCAC=VIN<50>               ; * JMK16
      CARRIER.TYPE=VIN<51>               ; * JMK16
      FSC.BILL.DATE=VIN<52>              ; * DRF01
      USER.TYPE = VIN<53>                ; * NPR06
      PRO.ID = VIN<54>                   ; * NPR07
      ERROR.ALREADY.SENT=VIN<55>
      TRANSIT.TIME=''                    ; * JMK16
      DIRECT.FLAG='1'                    ; * JMK16
      ORIG.DIR.FLG=''                    ; * JMK16
      DEST.DIR.FLG=''                    ; * JMK16
      COMB.DIR.FLG=''                    ; * JMK16
      ORIG.TERM.NAME=''                  ; * JMK18
      ORIG.TERM.CODE=''                  ; * JMK18
      ORIG.TERM.ADR1=''                  ; * JMK18
      ORIG.TERM.ADR2=''                  ; * JMK18
      ORIG.TERM.CITY=''                  ; * JMK18
      ORIG.TERM.ST=''                    ; * JMK18
      ORIG.TERM.ZIP=''                   ; * JMK18
      ORIG.TERM.PHONE=''                 ; * JMK18
      ORIG.TERM.TPHONE=''                ; * JMK18
      ORIG.TERM.FAX=''                   ; * JMK18
      ORIG.TERM.EMAIL=''                 ; * JMK18
      ORIG.TERM.CNAME=''                 ; * JMK18
      ORIG.TERM.CTITLE=''                ; * JMK18
      DEST.TERM.NAME=''                  ; * JMK18
      DEST.TERM.CODE=''                  ; * JMK18
      DEST.TERM.ADR1=''                  ; * JMK18
      DEST.TERM.ADR2=''                  ; * JMK18
      DEST.TERM.CITY=''                  ; * JMK18
      DEST.TERM.ST=''                    ; * JMK18
      DEST.TERM.ZIP=''                   ; * JMK18
      DEST.TERM.PHONE=''                 ; * JMK18
      DEST.TERM.TPHONE=''                ; * JMK18
      DEST.TERM.FAX=''                   ; * JMK18
      DEST.TERM.EMAIL=''                 ; * JMK18
      DEST.TERM.CNAME=''                 ; * JMK18
      DEST.TERM.CTITLE=''                ; * JMK18
      CARR.DATA.DATE = ''                ; * JMK29
      TOT.BENCH.GROSS=''                 ; * JMK52
      TOT.CONTR.GROSS=''                 ; * JMK52
      CONTR.TARIFF=''                    ; * JMK62
      BENCH.TARIFF=''                    ; * JMK62
      RW.TARIFF=''                       ; * NKH11
      RW.EFF.DATE=''                     ; * NKH11
      REDRAW.SCR=0
      AUDIT='Y'
      * Begin NKH05
      TP.QUOTE.AMT = 0
      TP.GTOT.CONTR.AMT = 0
      TP.GTOT.BENCH.AMT = 0
      TP.CLIENT.COST = 0
      TP.CONSULTING.AMT = 0
      JL.TABLE = ''
      * End NKH05
      CONTR.FSC.PERC = ''                ; * NKH08
      BENCH.FSC.PERC = ''                ; * NKH08
      * Begin GRB18
      DEBUG
        TEMPO.TP = @FALSE
 TEMPO.CLIENT.FLG = @FALSE
 TPOS=''
      READ TEMPO.CLIENT FROM F.TEMPOC,CLIENT THEN
         IF TEMPO.CLIENT<1> = "" THEN
            TEMPO.CLIENT.FLG = @TRUE
            ADD.FSC=1
         END ELSE
            LOCATE(CARRIER,TEMPO.CLIENT<1>,1;TPOS) THEN
               IF TEMPO.CLIENT<2,TPOS> = "T" THEN  ; * GRB20
                 TEMPO.TP = @TRUE
                  IF IOT = "T" THEN      ; * GRB20
                     TEMPO.CLIENT.FLG = @TRUE      ; * GRB20
                     ADD.FSC=1           ; * GRB20
                  END ELSE
                     IF IOT = '' THEN
                        TEMPO.CLIENT.FLG = NULL
                     END ELSE
                        TEMPO.CLIENT.FLG = @FALSE
                     END

                  END
               END ELSE
               TEMPO.CLIENT.FLG = @TRUE
               END
            END
         END
      END ELSE
         TEMPO.CLIENT.FLG = @FALSE
         TEMPO.CLIENT =''
      END
************************************************************
500:  * Calculate Bill
**************************************************************
      BEGIN CASE
         CASE IOT='O'
            ROUTE.ZIP=ORIG.ZIP
            SHIP.ZIP=DEST.ZIP[1,3]
         CASE IOT='I'
            ROUTE.ZIP=DEST.ZIP
            SHIP.ZIP=ORIG.ZIP[1,3]
         CASE IOT='T'
            ROUTE.ZIP=DEST.ZIP[1,3]
            SHIP.ZIP=ORIG.ZIP[1,3]
      END CASE

      IF TOT.WEIGHT GT MAX.LTL THEN      ; * JMK04 ; * JMK14
         ERROR="Cannot Rate! Total weight is ":MAX.LTL:" lbs or more"  ; * JMK04
         AUDIT='U'
         GO 9000
      END

      JL.FLAG=0                          ; * JMK38
      SVC.CNT=0                          ; * JMK43
      TRANSIT.TIME=''                    ; * JMK67
      ORIG.DIR.FLG=''                    ; * JMK67
      DEST.DIR.FLG=''                    ; * JMK67
      COMB.DIR.FLG=''                    ; * JMK67
      IF CARRIER.SCAC#'' THEN            ; * JMK16 ; * JMK67 ; * JMK68

         *RWS.SVC.CALL: * Repalced by call to Carrier Connect Web Server

         * Begin NKH05
         ORIG.DIR.FLG=VIN<56>
         DEST.DIR.FLG=VIN<57>
         COMB.DIR.FLG=VIN<58>
         * End NKH05

         IF CARRIER.SCAC='CNWY' THEN     ; * JMK38 ; * NPR04
            ORIG.DIR.FLG='D'             ; * JMK38 ; * NPR04
            DEST.DIR.FLG='D'             ; * JMK38 ; * NPR04
            COMB.DIR.FLG='D'             ; * JMK38 ; * NPR04
         END
* Begin GRB07
         IF CDN.ROUTE THEN
            ID.JL.TAB = "JC*":CLIENT:"*":CARRIER.SCAC        ; *NPR04
         END ELSE
            ID.JL.TAB = "JL*":CLIENT:"*":CARRIER.SCAC        ; *NPR04
         END
* End  GRB07

         READ JL.REC FROM F.TABLES, ID.JL.TAB ELSE JL.REC = ""         ; *NPR04

         LOCATE DEST.ZIP IN JL.REC SETTING DEST.POS THEN DEST.DIR.FLG = "D"      ; *NPR04

         LOCATE ORIG.ZIP IN JL.REC SETTING ORIG.POS THEN ORIG.DIR.FLG = "D"      ; *NPR04

         IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN       ; * JMK42    ; *NPR04
            COMB.DIR.FLG='D'             ; * JMK42    ; *NPR04
         END                             ; * JMK42    ; *NPR04

         IF COMB.DIR.FLG#'D' THEN        ; * JMK38 ; * JMK56 ; * JMK59
            JL.FLAG=1                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK16
      IF CLIENT='01031' AND CARRIER='25117' THEN   ; * JMK60
         TRANSIT.TIME='09'               ; * JMK60
         ORIG.DIR.FLG='D'                ; * JMK60
         DEST.DIR.FLG='D'                ; * JMK60
         COMB.DIR.FLG='D'                ; * JMK60
      END                                ; * JMK60

      IF CK.CS THEN                      ; * JMK35
         ORIG.DIR.FLG=''                 ; * JMK70
         DEST.DIR.FLG=''                 ; * JMK70
         COMB.DIR.FLG=''                 ; * JMK70
         TRANSIT.TIME=''                 ; * JMK71
         IF COMB.DIR.FLG='' THEN
            JL.FLAG=0
         END
         OPEN '','CARRIER.SVC' TO F.CS THEN        ; * JMK35
            CS.ID=CARRIER:'*':ORIG.ZIP   ; * JMK35
            READ CS.REC FROM F.CS,CS.ID ELSE       ; * JMK35
               CS.ID=CARRIER:'*':ORIG.ZIP[1,3]     ; * JMK35
               READ CS.REC FROM F.CS,CS.ID ELSE    ; * JMK35
                  CS.REC=''              ; * JMK35
               END                       ; * JMK35
            END                          ; * JMK35
            IF CS.REC#'' THEN            ; * JMK35
               DEST.FOUND=0              ; * JMK35
               LOCATE DEST.ZIP IN CS.REC<1> SETTING DPOS THEN          ; * JMK35
                  DEST.FOUND=1           ; * JMK35
               END ELSE                  ; * JMK35
                  LOCATE DEST.ZIP[1,3] IN CS.REC<1> SETTING DPOS THEN  ; * JMK35
                     DEST.FOUND=1        ; * JMK35
                  END                    ; * JMK35
               END                       ; * JMK35
               IF DEST.FOUND THEN        ; * JMK35
                  TRANSIT.TIME=CS.REC<3,DPOS>      ; * JMK35
                  ORIG.DIR.FLG='D'       ; * JMK35
                  DEST.DIR.FLG=CS.REC<2,DPOS>      ; * JMK35
                  COMB.DIR.FLG=''        ; * JMK35
                  IF DEST.DIR.FLG#'' THEN          ; * JMK35
                     IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN     ; * JMK35
                        COMB.DIR.FLG='D'           ; * JMK35
                     END ELSE            ; * JMK35
                        COMB.DIR.FLG='I'           ; * JMK35
                     END                 ; * JMK35
                  END                    ; * JMK35
                  NVAL=DCOUNT(CS.REC<13>,@VM)      ; * JMK35
                  CARR.DATA.DATE=CS.REC<13,NVAL>'D4/'        ; * JMK35

                  IF COMB.DIR.FLG#'D' THEN         ; * JMK38 ; * JMK56 ; * JMK59
                     JL.FLAG=1           ; * JMK38
                  END                    ; * JMK38
               END ELSE                  ; * DRF12
                  ERROR="Shipping point set to N"  ; * DRF12
                  AUDIT='U'              ; * DRF12
                  GO 9000                ; * DRF12
               END                       ; * JMK35
            END                          ; * JMK35
         END                             ; * JMK35
      END                                ; * JMK35
      IF IOT='T' THEN
         OPEN 'FB.AUDIT.ZIPS,99000' TO F.TPZIPS ELSE
            ERROR="Cannot Open Audit Zips 99000 for 3rd party coverage map"
            AUDIT='U'
            GO 9000
         END

         NEW.TP = 1
         OPEN 'FB.AUDIT.TP.DATE,':CLIENT TO F.TPDATE ELSE    ; * INDICATES SETUP FOR NEW THIRD PARTY LOGIC
            OLD.METH = 1
            NEW.TP = 0
            GOTO OLD.TP.LOGIC
            **
         END
         OPEN 'FB.AUDIT.TP.REG,':CLIENT TO F.TPREG ELSE
            NEW.TP = 0
            OLD.METH = 1
            GOTO OLD.TP.LOGIC

         END
         IF NEW.TP THEN

            READ TP.EFF.DT FROM F.TPDATE,CARRIER THEN
               IF TP.EFF.DT<3> = 'DISABLE' THEN
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END ELSE
               NEW.TP = 0
               GOTO OLD.TP.LOGIC
            END
            NEW.TP = 1
            **
            LOCATE BILL.DATE IN TP.EFF.DT<1> BY 'AR' SETTING EFF.DT.POS ELSE     ; * beginning effective date
               IF EFF.DT.POS=1 THEN
                  ERROR='NO Third party effective date found ':CARRIER
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
               EFF.DT.POS=EFF.DT.POS-1
               IF EFF.DT.POS < 1 THEN
                  ERROR='Serious error, EFF.DT.POS is less than 1, Call AFS Programming'
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END
            END.EFF.DT = TP.EFF.DT<2,EFF.DT.POS>
            IF BILL.DATE LT END.EFF.DT OR END.EFF.DT = "" THEN
               TP.EFF.DT = TP.EFF.DT<1,EFF.DT.POS>
               EFF.DATE = TP.EFF.DT
            END
            TP.REG.ID = CARRIER:"*":TP.EFF.DT
            READ TP.REG FROM F.TPREG,TP.REG.ID THEN
               IF TP.REG<1> = 'DISABLE' THEN
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END ELSE
               NEW.TP = 0
               GOTO OLD.TP.LOGIC
            END
            LOCATE ORIG.ZIP[1,3] IN TP.REG<2> BY 'AR' SETTING ORIG.REG.POS ELSE
               ORIG.REG.POS = ORIG.REG.POS -1
            END
            ORIG.REG = TP.REG<5,ORIG.REG.POS>

            TP.AUDIT.ZIPS.ID = CARRIER:"*TP":ORIG.REG:"*":TP.EFF.DT:"*LTLALL*O"
            READ TP.AUDIT.ZIP FROM F.AUDIT.ZIPS,TP.AUDIT.ZIPS.ID THEN
               IF TP.AUDIT.ZIP<1> = 'DISABLE' THEN
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END ELSE
               NEW.TP = 0
               GOTO OLD.TP.LOGIC
            END
            **  IF TP.AUDIT.ZIP<1> = "DISABLE" THEN  GO OLD METHIND
            LOCATE DEST.ZIP[1,3] IN TP.AUDIT.ZIP<2> BY 'AR' SETTING DEST.ZIP.POS ELSE
               DEST.ZIP.POS = DEST.ZIP.POS -1
            END
            DEST.TABLE = TP.AUDIT.ZIP
            TABLE=TP.AUDIT.ZIP<5,DEST.ZIP.POS>
            GOOD.SHIP.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            AUDIT.TABLE.ID=OLA.CARRIER:"*":TABLE   ; * JMK32

            * DO WE JUST PASS THIS AUDIT.TABLE ID DOWN BELOW
            TP.WHY.TAB = ""
            TP.AMT.TAB = ""
            TP.TABLE.TAB = TABLE
            TP.TABLE.TAB<2> = DEST.TABLE
            TP.VOUT1 = ""
            TP.VOUT2 = ""
            TP.CNT = 1
            LOOKUP.ZIP = ROUTE.ZIP
            * Check to See if Routing Zip is Enabled or Disabled
            YN.ROUTE.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            IF YN.ROUTE.POINT='N' THEN ERROR='Dest Zip set to N in Carrier Coverage Map '

            READ DAUDIT.TABLES FROM F.AUDIT.TABLES,AUDIT.TABLE.ID ELSE           ; * FB.AUDIT.TABLES
               ERROR='Cannot Rate Shipment. Table: ':AUDIT.TABLE.ID:' NOF'
            END

            YN.SHIP.POINT=TP.AUDIT.ZIP<4,ORIG.REG.POS>
            IF YN.SHIP.POINT='N' THEN ERROR='Orig Zip set to N in Carrier Coverage Map'

            * DTABLES is ZIPS FILE
            * DAUDIT is FB.AUDIT PASSED IN

            * Check to See if Effective Date is Enabled or Disabled
            * CHECK IF AUDIT ZIPS IS DISABLED

            GOOD.SHIP.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            IF JL.FLAG THEN
               * Begin GRB07
               IF CDN.ROUTE THEN
                  JL.STRG = 'ZZC'
               END ELSE
                  JL.STRG = 'ZZZ'
               END
               * End GRB07

               LOCATE JL.STRG IN TP.AUDIT.ZIP<2> SETTING JL.POS THEN   ; * GRB07
                  IF TP.AUDIT.ZIP<4,JL.POS>='Y' THEN
                     JL.TABLE=TP.AUDIT.ZIP<5,JL.POS>
                  END ELSE
                     IF IOT='I' THEN
                        ERROR=('Cannot Rate!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')          ; * JMK41
                        AUDIT='M'
                        GO 9000
                     END
                     JL.FLAG=0
                  END
               END
            END
            GO GOT.NEW.TP
         END
         ***
         * End GRB07

*******************************************************************
OLD.TP.LOGIC:
*******************************************************************
         TABLE.ID=OLA.CARRIER:"*71101*12055*LTLALL*I"        ; * JMK32
         READ DTABLES FROM F.TPZIPS,TABLE.ID ELSE
            ERROR="Carrier ":OLA.CARRIER:" TP Coverage Map not set up in 99000"  ; * JMK32
            AUDIT='U'
            GO 9000
         END
         IF DTABLES<1>#'ENABLE' THEN
            ERROR="Carrier ":OLA.CARRIER:" TP Coverage Map is set to DISABLE"    ; * JMK32
            AUDIT='U'
            GO 9000
         END

         LOCATE ROUTE.ZIP IN DTABLES<2> BY 'AR' SETTING ROUTE.POS ELSE
            IF ROUTE.POS=1 THEN
               ERROR='DZip ':DEST.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
            ROUTE.POS=ROUTE.POS-1
            IF ROUTE.POS < 1 THEN
               ERROR='Serious error, ROUTE.POS is less than 1, Call Online Audit'
               AUDIT='U'
               GO 9000
            END
            IF ROUTE.ZIP > DTABLES<3,ROUTE.POS> THEN
               ERROR='DZip ':ROUTE.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
         END
         YN.ROUTE.POINT=DTABLES<4,ROUTE.POS>

         LOCATE SHIP.ZIP IN DTABLES<2> BY 'AR' SETTING SHIP.POS ELSE
            IF SHIP.POS=1 THEN
               ERROR='OZip ':ORIG.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
            SHIP.POS=SHIP.POS-1
            IF SHIP.POS < 1 THEN
               ERROR='Serious error, SHIP.POS is less than 1, Call AFS Programming'
               AUDIT='U'
               GO 9000
            END
            IF SHIP.ZIP > DTABLES<3,SHIP.POS> THEN
               ERROR='OZip ':SHIP.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
         END
         YN.SHIP.POINT=DTABLES<4,SHIP.POS>
         ERROR=''
         IF YN.ROUTE.POINT='N' THEN ERROR='Dest Zip set to N in Carrier Coverage Map '
         IF YN.SHIP.POINT='N' THEN ERROR='Orig Zip set to N in Carrier Coverage Map'
         IF ERROR#'' THEN
            AUDIT='U'
            GO 9000
         END

*At this poinet you have a valid carrier
*Get the table number and run the numbers
*Look at both tables and get the table number that is the highest number
*If a table number is one digit add a leading zero to insure that the
*comparison works properly

         LOOKUP.ZIP='OTHER'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            ERROR='Cannot Rate! OTHER is NOT setup as a Routing Zip!'
            AUDIT='U'
            GO 9000
         END
      END ELSE                           ; ************************ END OF OLD THIRD PARTY LOGIC
         LOOKUP.ZIP='ALL'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            LOOKUP.ZIP=ROUTE.ZIP
            LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
               * See if 1st three digits are there (Must Be Unique)
               CK.TIMES=DCOUNT(DAUDIT<FBA.ROUTE.ZIP>,@VM)
               CK.RZIP=''                ; * Put the Routing Zips Found Here
               FOR CK = 1 TO CK.TIMES
                  FIND.RT.ZIP=DAUDIT<FBA.ROUTE.ZIP,CK>
                  IF FIND.RT.ZIP[1,3]=ROUTE.ZIP[1,3] THEN
                     GUIDE.POS=CK
                     SUB.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,CK>
                     IF SUB.ZIP#'' THEN
                        LOCATE SUB.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                           ERROR="Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!"
                           AUDIT='U'
                           GO 9000
                        END
                        FIND.RT.ZIP=SUB.ZIP
                     END
                     LOCATE FIND.RT.ZIP IN CK.RZIP SETTING POS ELSE
                        CK.RZIP<-1>=FIND.RT.ZIP
                        LOOKUP.ZIP=FIND.RT.ZIP
                     END
                  END
               NEXT CK
               IF CK.RZIP='' OR CK.RZIP<2>#'' THEN
                  ERROR='Cannot Rate! ':ROUTE.ZIP:' or ALL is NOT setup as a Routing Zip!'
                  AUDIT='U'
                  GO 9000
               END
            END
            IF DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS> # '' THEN          ; ** Get BASE Routing Zip POS
               LOOKUP.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS>
               LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                  ERROR=("Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!")
                  AUDIT='U'
                  GO 9000
               END
            END
         END
      END

      * Check to See if Routing Zip is Enabled or Disabled
      IF DAUDIT<FBA.ROUTE.ZIP.STATUS,GUIDE.POS>='DISABLE' THEN
         ERROR=("Cannot Rate! Route Zip is set to DISABLE")
         AUDIT='U'
         GO 9000
      END

      * Get Effective Date
      FIRST.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,1>
      LAST.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DCOUNT(DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS>,@SVM)>
      IF BILL.DATE < FIRST.DATE THEN     ; * Is bill Before Beginning Date
         ERROR=('Cannot Rate! Bill date is before 1st effective date.')
         AUDIT='U'
         GO 9000
      END
      IF LAST.DATE#'' AND (BILL.DATE > LAST.DATE) THEN
         ERROR=('Cannot Rate Bill!  Bill Date is after Last Effective Date.')
         AUDIT='U'
         GO 9000
      END
      LOCATE BILL.DATE IN DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS> BY 'AR' SETTING DT.POS ELSE
         DT.POS=DT.POS-1
         IF DT.POS < 1 THEN
            ERROR=('Serious error Contract Carrier Date POS is less than 1, Call AFS Programming')
            AUDIT='U'
            GO 9000
         END
      END
      EFF.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,DT.POS>
      END.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DT.POS>
      IF END.DATE#'' AND (BILL.DATE > END.DATE) THEN
         ERROR=('Cannot Rate Bill!  Bill Date is out of range of Effective dates')
         AUDIT='U'
         GO 9000
      END

      * At this point you have a good DT.POS (Effective Date Position)

      * Check to See if Effective Date is Enabled or Disabled
      IF DAUDIT<FBA.EFF.DATE.STATUS,GUIDE.POS,DT.POS> = 'DISABLE' THEN
         ERROR=("Cannot Rate! Effective Date is set to DISABLE")
         AUDIT='U'
         GO 9000
      END

      AUDIT.ZIPS.ID=OLA.CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":IOT       ; * JMK32
      READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
         IF 1 AND IOT = 'T' THEN
            AUDIT.ZIPS.ID=OLA.CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":"I"           ; * JMK32
            READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
               ERROR=("Cannot Rate! Zip Table Not On File ":AUDIT.ZIPS.ID)
               AUDIT='U'
               GO 9000
            END
         END ELSE
            ERROR=("Cannot Rate! Zip Table Not On File ":AUDIT.ZIPS.ID)
            AUDIT='U'
            GO 9000
         END
      END

      * At this point you have a Valid DAUDIT.ZIPS record
      IF DAUDIT.ZIPS<1>='DISABLE' THEN
         ERROR=('Cannot Rate! Shipping Points have been set to Disable!')
         AUDIT='U'
         GO 9000
      END
      IF DAUDIT.ZIPS<2,1>='' THEN
         ERROR=('Cannot Rate! Shipping Points have not been setup!')
         AUDIT='U'
         GO 9000
      END
      IF SHIP.ZIP < DAUDIT.ZIPS<2,1> THEN
         ERROR=('Cannot Rate!  This bill is a misroute! (Shipping Point is < Lowest)')
         AUDIT='M'
         GO 9000
      END
      LOCATE SHIP.ZIP IN DAUDIT.ZIPS<2> BY 'AR' SETTING SHIP.POS ELSE
         SHIP.POS=SHIP.POS-1
         IF SHIP.POS < 1 THEN
            ERROR=('Serious error, SHIP.POS is less than 1, Call AFS Programming')
            GO 500
         END
         IF SHIP.ZIP > DAUDIT.ZIPS<3,SHIP.POS> THEN
            ERROR=('Cannot Rate!  This bill is a misroute! (Shipping Point is > Highest)')
            AUDIT='M'
            GO 9000
         END
      END
      LOCATE ROUTE.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING RSZ.POS THEN
         SZ.BEG.EFF.DATES = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS>
         SZ.END.EFF.DATES = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS>
         IF SZ.BEG.EFF.DATES = "" AND SZ.END.EFF.DATES = "" THEN
            NULL
         END ELSE
            * Do this piece of code if any effective sub zip dates are set up.
            BEG.N.SZ.DATES = DCOUNT(SZ.BEG.EFF.DATES,@SVM)   ; * DRF12
            END.N.SZ.DATES = DCOUNT(SZ.END.EFF.DATES,@SVM)   ; * DRF12
            IF END.N.SZ.DATES > BEG.N.SZ.DATES THEN          ; * DRF12
               N.SZ.DATES=END.N.SZ.DATES           ; * DRF12
            END ELSE                     ; * DRF12
               N.SZ.DATES=BEG.N.SZ.DATES           ; * DRF12
            END                          ; * DRF12
            SUBZIP.OK = "N"
            LAST.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,N.SZ.DATES>
            LAST.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,N.SZ.DATES>
            IF LAST.END.EFF.DATE = "" AND BILL.DATE GE LAST.BEG.EFF.DATE THEN    ; * No final end eff date
               SUBZIP.OK = "Y"           ; * Open end date ok
            END ELSE
               IF BILL.DATE GE DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,1> THEN        ; * Date after first Eff date ok otherwise not
                  FOR DD = 1 TO N.SZ.DATES
                     SZ.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,DD>
                     SZ.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,DD>
                     * Check if Bill Date is within any date ranges.
                     IF BILL.DATE GE SZ.BEG.EFF.DATE AND BILL.DATE LE SZ.END.EFF.DATE THEN
                        SUBZIP.OK = "Y"
                     END
                  NEXT DD
               END
            END

            IF SUBZIP.OK = "N" THEN
               ERROR = ('Cannot Rate! Substitution Zip ':ROUTE.ZIP:' not in effect as at ':OCONV(BILL.DATE,"D2/"))
               AUDIT='M'
               GO 9000
            END
         END
      END                                ; * END OF I/O READ LOGIC

      GOOD.SHIP.POINT=DAUDIT.ZIPS<4,SHIP.POS>
      TABLE=DAUDIT.ZIPS<5,SHIP.POS>
      IF GOOD.SHIP.POINT='C' THEN        ; * JMK49
         BEGIN CASE                      ; * JMK49
            CASE COMB.DIR.FLG='D'        ; * JMK49
               GOOD.SHIP.POINT='Y'       ; * JMK49
            CASE 1                       ; * JMK49
               GOOD.SHIP.POINT='N'       ; * JMK49
         END CASE                        ; * JMK49
      END                                ; * JMK49
      IF JL.FLAG THEN                    ; * JMK38
         * Begin GRB07
         IF CDN.ROUTE THEN
            JL.STRG = 'ZZC'
         END ELSE
            JL.STRG = 'ZZZ'
         END
         * End GRB07
         LOCATE JL.STRG IN DAUDIT.ZIPS<2> SETTING JL.POS THEN          ; * GRB07
            IF DAUDIT.ZIPS<4,JL.POS>='Y' THEN      ; * JMK38
               JL.TABLE=DAUDIT.ZIPS<5,JL.POS>      ; * JMK38
            END ELSE                     ; * JMK38
               IF IOT='I' THEN           ; * JMK41
                  ERROR=('Cannot Rate!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')      ; * JMK41
                  AUDIT='M'              ; * JMK41
                  GO 9000                ; * JMK41
               END                       ; * JMK41
               JL.FLAG=0                 ; * JMK38
            END                          ; * JMK38
         END ELSE                        ; * JMK38
            IF IOT='I' THEN              ; * JMK41
               ERROR=('Cannot Rate!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')         ; * JMK41
               AUDIT='M'                 ; * JMK41
               GO 9000                   ; * JMK41
            END                          ; * JMK41
            JL.FLAG=0                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38

      * For third party that is the ORIG Table. we must find the Dest table
      IF IOT='T' THEN
         IF ROUTE.ZIP < DAUDIT.ZIPS<2,1> THEN
            ERROR=('Cannot Rate! (Shipping Point is < Lowest)')
            AUDIT='U'
            GO 9000
         END
         LOCATE ROUTE.ZIP IN DAUDIT.ZIPS<2> BY 'AR' SETTING ROUTE.POS ELSE
            ROUTE.POS=ROUTE.POS-1
            IF ROUTE.POS < 1 THEN
               ERROR=('Serious error, ROUTE.POS is less than 1, Call Online Audit')
               AUDIT='U'
               GO 9000
            END
            IF ROUTE.ZIP > DAUDIT.ZIPS<3,ROUTE.POS> THEN
               ERROR=('Cannot Rate! (Shipping Point is > Highest)')
               AUDIT='M'
               GO 9000
            END
         END
         DEST.GOOD.SHIP.POINT=DAUDIT.ZIPS<4,ROUTE.POS>
         DEST.TABLE=DAUDIT.ZIPS<5,ROUTE.POS>
         GOOD.SHIP.POINT='Y'             ; * Force a Good Shipping Point

* Make sure both tables are two digits
* Compare the two use the HIGEST table number as the real TABLE
* Except for Con-Way 02653, Check Orig & Dest Table if they are different
* Use both tables together lowest table letter 1st ie. D & A use AD

         TP.WHY.TAB = ""
         TP.AMT.TAB = ""
         TP.TABLE.TAB = TABLE
         TP.TABLE.TAB<2> = DEST.TABLE
         TP.CLIENT.COST = ""
         TP.QUOTE.AMT = ""
         QUOTE.AMT = 0
         TP.GTOT.CONTR.AMT = ""
         TP.GTOT.BENCH.AMT = ""
         TP.CONSULTING.AMT = ""
         TP.VOUT1 = ""
         TP.VOUT2 = ""
         TP.CNT = 1
      END

      * At this point you have a valid GOOD.SHIP.POINT (Y/N) and TABLE
      IF GOOD.SHIP.POINT#'Y' THEN
         IF TABLE#'' THEN
            * Bill is a misroute but can be audited (have a table #)
            AUDIT='MA'
            GO 575
         END ELSE
            * Bill is a misroute but CANNOT be audited (No Table #)
            ERROR=('Cannot Rate! This bill is a misroute (Shp.Pnt=N No Table to Rate Bill)')
            AUDIT='M'
            GO 9000
         END
      END

*******************************************************************
575:  * Skip for OK Misroutes
*******************************************************************
      * Begin GRB06
      IF IOT = "T" THEN
         IF NEW.TP THEN
            TABLE = TP.TABLE.TAB<1>      ; * Contains Originating  Tables (OUTBOUND)
         END ELSE
            TABLE = TP.TABLE.TAB<2>      ; * Contains  Destination Tables (INBOUND)
         END
      END
      * End GRB06

      ZIP.VIN=CARRIER
      ZIP.VIN<2>=ORIG.ZIP
      ZIP.VIN<3>=DEST.ZIP
      ZIP.VIN<4>=CLIENT
      CALL FB.CHECK.COVERAGE.ZIP(ZIP.VIN,ZIP.VOUT)
      IF ZIP.VOUT<1>='J' THEN
         IF LEN(TABLE) <2 THEN
            TABLE='J':TABLE'R%2'
         END ELSE
            TABLE='J':TABLE
         END
      END
      AUDIT.TABLE.ID=OLA.CARRIER:"*":TABLE         ; * JMK32

*******************************************************************
GOT.NEW.TP:* Land here with new Audit Table ID
*******************************************************************

      READ DAUDIT.TABLES FROM F.AUDIT.TABLES,AUDIT.TABLE.ID ELSE
         IF IOT='T' THEN
            ERROR='Cannot Rate Shipment. Table: ':AUDIT.TABLE.ID:' NOF'
         END ELSE
            ERROR=("Cannot Rate! Audit Table Not On File ":AUDIT.TABLE.ID)
         END
         AUDIT='U'
         GO 9000
      END
      IF JL.FLAG THEN                    ; * JMK38
         JL.AUDIT.TABLE.ID=OLA.CARRIER:'*':JL.TABLE          ; * JMK38
         READ JL.DAUDIT.TABLES FROM F.AUDIT.TABLES,JL.AUDIT.TABLE.ID ELSE        ; * JMK38
            JL.FLAG=0                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38

      MISC.CHG.TIMES=DCOUNT(MISC.CHG<1>,@VM)
      FOR MISC.CHG.X=1 TO MISC.CHG.TIMES
         Q=MISC.CHG<1,MISC.CHG.X>
         MISC.CHG<4,MISC.CHG.X>=0        ; * JMK55
         IF JL.FLAG THEN                 ; * JMK48
            LOCATE Q IN JL.DAUDIT.TABLES<26> SETTING JL.POS ELSE       ; * JMK48
               AUDIT.ACC=0               ; * JMK55
               MISC.CODE=Q               ; * JMK55
               GOSUB 8900                ; * JMK55
               IF AUDIT.ACC=0 THEN       ; * JMK55
                  IF MISROUTE THEN GO GET.NEXT.MISC.CHG      ; * Skip it... ; * JMK48
                  ERROR=("Accessorial Code '":Q:"' is not valid! (Code is not in Table:  ":AUDIT.TABLE.ID:")")           ; * JMK48
                  AUDIT='U'              ; * JMK48
                  GO 9000                ; * JMK48
               END                       ; * JMK55
            END                          ; * JMK48
         END ELSE                        ; * JMK48
            LOCATE Q IN DAUDIT.TABLES<26> SETTING POS ELSE
               AUDIT.ACC=0               ; * JMK55
               MISC.CODE=Q               ; * JMK55
               GOSUB 8900                ; * JMK55
               IF AUDIT.ACC=0 THEN       ; * JMK55
                  IF MISROUTE THEN GO GET.NEXT.MISC.CHG      ; * Skip it...
                  ERROR=("Accessorial Code '":Q:"' is not valid! (Code is not in Table:  ":AUDIT.TABLE.ID:")")
                  AUDIT='U'
                  GO 9000
               END                       ; * JMK55
            END
         END                             ; * JMK48
         TEST.CHG=MISC.CHG               ; * JMK03
         TEST.CNT=0                      ; * JMK03
         FOUND=0                         ; * JMK03
         LOOP                            ; * JMK03
            LOCATE Q IN TEST.CHG<1> SETTING MPOS THEN        ; * JMK03
               DEL TEST.CHG<1,MPOS>      ; * JMK03
               FOUND=1                   ; * JMK03
            END ELSE                     ; * JMK03
               FOUND=0                   ; * JMK03
            END                          ; * JMK03
         WHILE FOUND DO                  ; * JMK03
            TEST.CNT=TEST.CNT+1          ; * JMK03
         REPEAT                          ; * JMK03
         IF TEST.CNT > 1 THEN            ; * JMK03
            ERROR=("Accessorial Code '":Q:"' is used more than once!")           ; * JMK03
            AUDIT='U'                    ; * JMK03
            GO 9000                      ; * JMK03
         END                             ; * JMK03
         PERCENT=0                       ; * Flag
         IF AUDIT.ACC THEN               ; * JMK55
            MISC.CODE=Q                  ; * JMK55
            GOSUB 8950                   ; * JMK55
         END ELSE                        ; * JMK55
            IF JL.FLAG THEN              ; * JMK48
               CUR.CONTR.MISC.AMT=JL.DAUDIT.TABLES<27,JL.POS>          ; * JMK48
               CUR.BENCH.MISC.AMT=JL.DAUDIT.TABLES<28,JL.POS>          ; * JMK48
            END ELSE                     ; * JMK48
               CUR.CONTR.MISC.AMT=DAUDIT.TABLES<27,POS>
               CUR.BENCH.MISC.AMT=DAUDIT.TABLES<28,POS>
            END                          ; * JMK48
         END                             ; * JMK55
         LEN.CHG=LEN(CUR.CONTR.MISC.AMT)
         IF CUR.CONTR.MISC.AMT[LEN.CHG,1]="%" THEN PERCENT=1
         LEN.CHG=LEN(CUR.BENCH.MISC.AMT)
         IF CUR.BENCH.MISC.AMT[LEN.CHG,1]="%" THEN PERCENT=1
         IF Q='FSC' AND PERCENT=1 THEN
            CONTR.DFSC=''
            BENCH.DFSC=''
         END
         DIFF.CONTR.BENCH=0
         CONVERT "%" TO '' IN CUR.BENCH.MISC.AMT   ; * NKH22
         CONVERT "%" TO '' IN CUR.CONTR.MISC.AMT   ; * NKH22
         IF LOGISTICS AND CUR.BENCH.MISC.AMT<CUR.CONTR.MISC.AMT THEN   ; * JMK34
            ERROR=("Unable to Use this code":Q:" Benchmark is Less that Contract")
            AUDIT='U'
            GO 9000
         END
         IF CUR.CONTR.MISC.AMT='ASK' THEN
            IF MISC.CHG<2,MISC.CHG.X>+0 >0 THEN
               CUR.CONTR.MISC.AMT=MISC.CHG<2,MISC.CHG.X>
            END ELSE
               ERROR='Contract Accessorial Amt for Code: ':Q:' is not a fixed amount... Cannot Rate!'          ; * SWB01
               AUDIT='U'
               GO 9000
            END
         END
         IF CUR.CONTR.MISC.AMT#'ASK' THEN          ; * JMK34
            MISC.CHG<2,MISC.CHG.X>=CUR.CONTR.MISC.AMT
         END
         IF CUR.BENCH.MISC.AMT='ASK' THEN
            IF MISC.CHG<3,MISC.CHG.X>+0>0 THEN
               CUR.BENCH.MISC.AMT=MISC.CHG<3,MISC.CHG.X>
            END ELSE
               ERROR='Benchmark Accessorial Amt for Code: ':Q:' is not a fixed amount.... Cannot Rate!'        ; * SWB01
               AUDIT='U'
               GO 9000
            END
         END
         IF CUR.BENCH.MISC.AMT#'ASK' AND CUR.CONTR.MISC.AMT # 'ASK' THEN         ; * JMK34
            MISC.CHG<3,MISC.CHG.X>=CUR.BENCH.MISC.AMT
            MISC.CHG<4,MISC.CHG.X>=AUDIT.ACC       ; * JMK55
         END
         AUDIT.ACC = ''                  ; * NKH04

**************************************************************
GET.NEXT.MISC.CHG:* Used to "Skip" Charges
**************************************************************
      NEXT MISC.CHG.X

**************************************************************
1000: ***   Submit Information to PC Audit Routine to Determine Amounts
**************************************************************
      CLASSES=CLASS.WGT<1>
      WEIGHTS=CLASS.WGT<2>
      CONTR.TARIFF=''
      CONTR.CLASSES=''                   ; * Sub Valued for placment into DIN
      CONTR.DISC=''                      ; * <1>-TMIN <2>-L5C <3>-O5C  All Mv per line item
      LOWEST.CONTR.CLASS=''
      LOWEST.CONTR.CLASS.DISC=''         ; ** <1>-TMIN <2>-L5C <3>-O5C from Lowest class
      BENCH.TARIFF=''
      BENCH.CLASSES=''                   ; * Sub Valued for placment into DIN
      BENCH.DISC=''                      ; * Mv for each line item (contains repeats)
      CUR.BENCH.DISC = 0
      LOWEST.BENCH.CLASS=''
      LOWEST.BENCH.CLASS.DISC=''         ; * Taken from Discount on Lowest Class
      DIN=''
      DIN<1,2>=ORIG.ZIP
      DIN<1,3>=DEST.ZIP
      DETAIL.TIMES=DCOUNT(CLASSES<1>,@VM)
      IF DAUDIT.TABLES<34>='' AND DAUDIT.TABLES<35>='' THEN
         DAUDIT.TABLES<34>=50
         DAUDIT.TABLES<35>=50
      END
      IF DAUDIT.TABLES<34>#'50' THEN
         DAUDIT.TABLES<34>=50
         DAUDIT.TABLES<35>=50
      END
      FOR DET.CNT = 1 TO DETAIL.TIMES
         IF CLASSES<1,DET.CNT> < DAUDIT.TABLES<34> OR CLASSES<1,DET.CNT> > DAUDIT.TABLES<35> THEN FAK=0
         CUR.CLASS=CLASSES<1,DET.CNT>
         CUR.WEIGHT=WEIGHTS<1,DET.CNT>
         LOCATE CUR.CLASS IN DAUDIT.TABLES<1> SETTING CLASS.POS THEN
            CUR.CONTR.CLASS=DAUDIT.TABLES<2,CLASS.POS>       ; * Contract Class
            IF JL.FLAG THEN              ; * JMK48
               LOCATE CUR.CLASS IN JL.DAUDIT.TABLES<1> SETTING JL.CLASS.POS THEN           ; * JMK48
                  CUR.CONTR.CLASS=JL.DAUDIT.TABLES<2,JL.CLASS.POS>     ; * Contract Class ; * JMK48
               END                       ; * JMK48
            END                          ; * JMK48
            CONTR.CLASSES<1,1,DET.CNT>=CUR.CONTR.CLASS
            CUR.BENCH.CLASS=DAUDIT.TABLES<12,CLASS.POS>      ; * Benchmark Class
            IF JL.FLAG THEN              ; * DRF04
               LOCATE CUR.CLASS IN JL.DAUDIT.TABLES<1> SETTING JL.CLASS.POS THEN           ; * DRF04
                  CUR.BENCH.CLASS=JL.DAUDIT.TABLES<12,JL.CLASS.POS>    ; * Contract Class  ; * DRF04
               END                       ; * DRF04
            END                          ; * DRF04
            BENCH.CLASSES<1,1,DET.CNT>=CUR.BENCH.CLASS
            CUR.CONTR.TARIFF=DAUDIT.TABLES<6,CLASS.POS>      ; * Contract Tariff
            CUR.BENCH.TARIFF=DAUDIT.TABLES<6,CLASS.POS>      ; * Benchmark Tariff ; * JMK57
            IF JL.FLAG THEN              ; * JMK48
               CUR.CONTR.TARIFF=JL.DAUDIT.TABLES<6,JL.CLASS.POS>       ; * Contract Tariff ; * JMK48
               CUR.BENCH.TARIFF=JL.DAUDIT.TABLES<6,JL.CLASS.POS>       ; * Contract Tariff  ; * DRF04
            END                          ; * JMK48

            * Determine Contract Discount(s) (And Lowest Class Discount)
            FOR X = 1 TO 3
               CONTR.DISC<X,DET.CNT>=DAUDIT.TABLES<X+2,CLASS.POS>
            NEXT X
            IF JL.FLAG THEN              ; * JMK48
               FOR X = 1 TO 3            ; * JMK48
                  CONTR.DISC<X,DET.CNT>=JL.DAUDIT.TABLES<X+2,JL.CLASS.POS>       ; * JMK48
               NEXT X                    ; * JMK48
            END                          ; * JMK48

*******************************************************************
SKIP.DISC:  *
*******************************************************************
            IF LOWEST.CONTR.CLASS='' THEN
               LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
               FOR X = 1 TO 3
                  LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
               NEXT X
            END ELSE
               IF CUR.CONTR.CLASS<LOWEST.CONTR.CLASS THEN
                  LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
                  FOR X = 1 TO 3
                     LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
                  NEXT X
               END
            END

            * Determine Benchmark Discount (And Lowest Class Discount)
            FOR X = 1 TO 3               ; * JMK51
               BENCH.DISC<X,DET.CNT>=DAUDIT.TABLES<X+12,CLASS.POS>     ; * JMK51
            NEXT X                       ; * JMK51
            IF JL.FLAG THEN              ; * DRF04
               FOR X = 1 TO 3            ; * DRF04
                  BENCH.DISC<X,DET.CNT>=JL.DAUDIT.TABLES<X+12,JL.CLASS.POS>      ; * DRF04
               NEXT X                    ; * DRF04
            END                          ; * DRF04
            IF LOWEST.BENCH.CLASS='' THEN          ; * JMK51
               LOWEST.BENCH.CLASS=CUR.BENCH.CLASS  ; * JMK51
               FOR X = 1 TO 3            ; * JMK51
                  LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>     ; * JMK51
               NEXT X                    ; * JMK51
            END ELSE                     ; * JMK51
               IF CUR.BENCH.CLASS<LOWEST.BENCH.CLASS THEN    ; * JMK51
                  LOWEST.BENCH.CLASS=CUR.BENCH.CLASS         ; * JMK51
                  FOR X = 1 TO 3         ; * JMK51
                     LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>  ; * JMK51
                  NEXT X                 ; * JMK51
               END                       ; * JMK51
            END                          ; * JMK51

            IF DET.CNT=1 THEN
               CONTR.TARIFF=CUR.CONTR.TARIFF
               BENCH.TARIFF=CUR.BENCH.TARIFF
            END ELSE
               IF CUR.CONTR.TARIFF#CONTR.TARIFF THEN
                  * Error Found a Contract Tariff that is different than the
                  * first Class's Contract Tariff.... cannot handle.
                  ERROR=("101 Cls-":CUR.CLASS:" Tar-":CUR.CONTR.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  AUDIT='U'
                  GO 9000
               END
               IF LOGISTICS AND CUR.BENCH.TARIFF#BENCH.TARIFF THEN
                  * Error Found a Benchmark Tariff that is different than the
                  * first Class's Benchmark Tariff.... cannot handle.
                  ERROR=("102 Cls-":CUR.CLASS:" Tar-":BENCH.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  AUDIT='U'
                  GO 9000
               END
            END
         END ELSE
            ERROR=("Serious Error! Class '":CUR.CLASS:"' Cannot be found in AUDIT.TABLE '":TABLE:"'")
            AUDIT='U'
            GO 9000
         END
         DIN<1,5,DET.CNT>=CUR.WEIGHT
      NEXT DET.CNT

      LOCATE CONTR.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
         CONTR.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>      ; * Send to PC Name
         IF CONTR.TARIFF.ACT.NAME='AFS50002' AND CDN.ROUTE=1 THEN      ; * JMK01  NKH19
            CONTR.TARIFF.ACT.NAME='AFS52502'       ; * JMK01 NKH19
         END                             ; * JMK01
         CONTR.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
         CONTR.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
      END ELSE
         ERROR=("103 contr.tariff ":CONTR.TARIFF:" missing from tariff eff date xref")
         AUDIT='U'
         GO 9000
      END
      LOCATE CONTR.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
         CONTR.TARIFF.DRIVER=DTARIFFS<3,POS>
      END ELSE
         ERROR=("106 Unable to locate Contract ":CONTR.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
         AUDIT='U'
         GO 9000
      END
      IF LOGISTICS THEN
         LOCATE BENCH.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
            BENCH.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>   ; * Send to PC Name
            IF BENCH.TARIFF.ACT.NAME='AFS50002' AND CDN.ROUTE=1 THEN   ; * JMK01  * NKH19
               BENCH.TARIFF.ACT.NAME='AFS52502'    ; * JMK01 NKH19
            END                          ; * JMK01
            BENCH.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
            BENCH.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
         END ELSE
            ERROR=("103 bench.tariff ":BENCH.TARIFF:" missing from tariff eff date xref")
            AUDIT='U'
            GO 9000
         END
         LOCATE BENCH.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
            BENCH.TARIFF.DRIVER=DTARIFFS<3,POS>
         END ELSE
            ERROR=("107 Unable to locate Benchmark ":BENCH.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
            AUDIT='U'
            GO 9000
         END
      END

      * Get Contract Rates from CZAR or AFS95
      DIN<1,4>=CONTR.CLASSES
      DIN<1,7>=CONTR.TARIFF.ACT.NAME
      DIN<1,8>=CONTR.TARIFF.EFF.DATE
      DIN<1,9>=CONTR.TARIFF.FACTOR
      VIN='BOTH'
      VIN<2>='10000'                     ; * Max Discount Weight
      VIN<3>=CLIENT                      ; * JMK33
      VIN<4>=CARRIER                     ; * JMK47
      VIN<5>='C'                         ; * JMK47
      VIN<6>=IOT                         ; * NKH08
      VIN<7>=BILL.DATE                   ; * NKH08
      VOUT= ''                           ; * NKH08
      IF NOT(TEMPO.CLIENT.FLG) THEN
         IF CONTR.TARIFF.DRIVER = BENCH.TARIFF.DRIVER THEN
            * Same "Driver" used on both Contract & Benchmark Tariffs
            * Send 1 time with "Both" Bills
            IF LOGISTICS THEN
               DIN<2>=DIN<1>             ; * Set 2nd Bill equal to 1st Bill
               DIN<2,4>=BENCH.CLASSES    ; * Set 2nd Bills Classes to Benchmark's
               DIN<2,7>=BENCH.TARIFF.ACT.NAME      ; * Set 2nd Bill to Correct Tariff
               DIN<2,8>=BENCH.TARIFF.EFF.DATE      ; * Set 2nd Bill's Tariff Eff Date
               DIN<2,9>=BENCH.TARIFF.FACTOR
            END

            * Begin NKH08
*         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
*            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
*            DINNATT=DCOUNT(DIN,@AM)      ; * JMK22 ; * JMK25 ; * JMK26
*            FOR DINATT=1 TO DINNATT      ; * JMK22 ; * JMK25 ; * JMK26
*               DIN<DINATT,7>=AFS.TARIFF.NAME       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
*            NEXT DINATT                  ; * JMK22 ; * JMK25 ; * JMK26
*            CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)   ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
*         END ELSE
*            CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)      ; * JMK31 ; * JMK44 ; * JMK65
*         END

            TARIFF.ACT.NAME = CONTR.TARIFF.ACT.NAME
            BENCH.TARIFF = 0
            GOSUB CALL.TARIFF.DRIVER
            * End NKH08

            CONTR.DOUT=DOUT<1>
*         IF VOUT<3>#'' THEN              ; * JMK64 NKH08
*            CONTR.TIME.LINE=VOUT<3>      ; * JMK64 NKH08
*         END                             ; * JMK64 NKH08
            RWXL.SMC.ERROR=VOUT<1>       ; * NKH08
            IF LOGISTICS THEN            ; * JMK64
               BENCH.DOUT=DOUT<2>        ; * JMK64
*            IF VOUT<3>#'' THEN           ; * JMK64 NKH08
*               BENCH.TIME.LINE=VOUT<3>   ; * JMK64 NKH08
*            END                          ; * JMK64 NKH08
               RWXL.SMC.ERROR=VOUT<1>    ; * NKH08
            END                          ; * JMK64
         END ELSE
            * Different "Driver" used on Contract & Benchmark Tariffs
            * Send each "Bill" to their respective Driver"
            * Begin NKH08
*         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
*            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
*            DINNATT=DCOUNT(DIN,@AM)      ; * JMK22 ; * JMK25 ; * JMK26
*            FOR DINATT=1 TO DINNATT      ; * JMK22 ; * JMK25 ; * JMK26
*               DIN<DINATT,7>=AFS.TARIFF.NAME       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
*            NEXT DINATT                  ; * JMK22 ; * JMK25 ; * JMK26
*            CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
*         END ELSE
*            CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)          ; * JMK31 ; * JMK44 ; * JMK65
*         END

            TARIFF.ACT.NAME = CONTR.TARIFF.ACT.NAME
            BENCH.TARIFF = 0
            GOSUB CALL.TARIFF.DRIVER
            * End NKH08
*         IF VOUT<3>#'' THEN              ; * JMK64 NKH08
*            CONTR.TIME.LINE=VOUT<3>      ; * JMK64 NKH08
*         END                             ; * JMK64 NKH08
            RWXL.SMC.ERROR=VOUT<1>       ; * NKH08
            IF LOGISTICS THEN
               DIN<1,4>=BENCH.CLASSES
               DIN<1,7>=BENCH.TARIFF.ACT.NAME
               DIN<1,8>=BENCH.TARIFF.EFF.DATE
               DIN<1,9>=BENCH.TARIFF.FACTOR
               VIN='BOTH'
               VIN<2>='10000'            ; * Max Discount Weight
               VIN<3>=CLIENT             ; * JMK33
               VIN<4>=CARRIER            ; * JMK47
               VIN<5>='B'                ; * JMK47
               * Begin NKH08
*            IF BENCH.TARIFF.DRIVER='MWB' THEN      ; * JMK01 ; * JMK31
*               IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'    ; * JMK31
*               DINNATT=DCOUNT(DIN,@AM)   ; * JMK22 ; * JMK25 ; * JMK26
*               FOR DINATT=1 TO DINNATT   ; * JMK22 ; * JMK25 ; * JMK26
*                  DIN<DINATT,7>=AFS.TARIFF.NAME    ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
*               NEXT DINATT               ; * JMK22 ; * JMK25 ; * JMK26
*               CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)    ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
*            END ELSE
*               CALL @BENCH.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)       ; * JMK31 ; * JMK44 ; * JMK65
*            END

               TARIFF.ACT.NAME = BENCH.TARIFF.ACT.NAME
               BENCH.TARIFF = 1
               GOSUB CALL.TARIFF.DRIVER
               * End NKH08
*            IF VOUT<3>#'' THEN           ; * JMK64 NKH08
*               BENCH.TIME.LINE=VOUT<3>   ; * JMK64 NKH08
*            END                          ; * JMK64 NKH08
               RWXL.SMC.ERROR=VOUT<1>    ; * NKH08
            END
         END
      END ELSE
         
         
      END




      RW.TARIFF = VOUT<4>                ; * NKH11
      RW.EFF.DATE = VOUT<5>              ; * NKH11
      FLAT.RATE=0                        ; * JMK20
      CONTR.CHRG=''                      ; * JMK24
      BENCH.CHRG=''                      ; * JMK24
      FLAT.ROUTE='INTER'                 ; * JMK21
      IF ORIG.STATE=DEST.STATE THEN      ; * JMK21
         FLAT.ROUTE='INTRA'              ; * JMK21
      END                                ; * JMK21
      IF NOT(JL.FLAG) THEN
         IF DAUDIT.TABLES<55>#'' THEN    ; * JMK20
            FT.NVAL=DCOUNT(DAUDIT.TABLES<55>,@VM)  ; * JMK20
            FOR FT.VAL=1 TO FT.NVAL      ; * JMK20
               BEG.WT=DAUDIT.TABLES<55,FT.VAL>     ; * JMK20
               END.WT=DAUDIT.TABLES<56,FT.VAL>     ; * JMK20
               INTRA.CONTR.CHRG=DAUDIT.TABLES<57,FT.VAL>     ; * JMK20 ; * JMK21
               INTRA.BENCH.CHRG=DAUDIT.TABLES<58,FT.VAL>     ; * JMK20 ; * JMK21
               INTER.CONTR.CHRG=DAUDIT.TABLES<59,FT.VAL>     ; * JMK21
               INTER.BENCH.CHRG=DAUDIT.TABLES<60,FT.VAL>     ; * JMK21
               IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN   ; * JMK20
                  FLAT.VALID=0           ; * JMK24
                  BEGIN CASE             ; * JMK24
                     CASE FLAT.ROUTE='INTER'       ; * JMK24
                        IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                        IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                     CASE FLAT.ROUTE='INTRA'       ; * JMK24
                        IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                        IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                     CASE 1              ; * JMK24
                  END CASE               ; * JMK24
                  IF FLAT.VALID THEN     ; * JMK24
                     FLAT.CONTR=0        ; * JMK24
                     FLAT.BENCH=0        ; * JMK24
                     IF FLAT.ROUTE='INTER' THEN    ; * JMK24
                        IF INTER.CONTR.CHRG+0#0 THEN         ; * JMK24
                           CONTR.CHRG=INTER.CONTR.CHRG       ; * JMK21
                           FLAT.CONTR=1  ; * JMK24
                        END              ; * JMK24
                        IF INTER.BENCH.CHRG+0#0 THEN         ; * JMK24
                           BENCH.CHRG=INTER.BENCH.CHRG       ; * JMK21
                           FLAT.BENCH=1  ; * JMK24
                        END              ; * JMK24
                     END                 ; * JMK24
                     IF FLAT.ROUTE='INTRA' THEN    ; * JMK21
                        IF INTRA.CONTR.CHRG+0#0 THEN         ; * JMK24
                           CONTR.CHRG=INTRA.CONTR.CHRG       ; * JMK21
                           FLAT.CONTR=1  ; * JMK24
                        END              ; * JMK24
                        IF INTRA.BENCH.CHRG+0#0 THEN         ; * JMK24
                           BENCH.CHRG=INTRA.BENCH.CHRG       ; * JMK21
                           FLAT.BENCH=1  ; * JMK24
                        END              ; * JMK24
                     END                 ; * JMK21
                     IF FLAT.CONTR THEN  ; * JMK24
                        CONTR.FLAT=''    ; * JMK20
                        CONTR.FLAT<1,1>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,2>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,3>='FLATRATE'           ; * JMK20
                        CONTR.FLAT<1,4>=TOT.WEIGHT           ; * JMK20
                        CONTR.FLAT<1,5>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK20
                        CONTR.DOUT<1,3>='FLATRATE'           ; * JMK20
                        CONTR.DOUT<1,5>=CONTR.CHRG           ; * JMK20
                     END                 ; * JMK24
                     IF LOGISTICS THEN   ; * JMK20
                        IF FLAT.BENCH THEN         ; * JMK24
                           BENCH.FLAT=''           ; * JMK20
                           BENCH.FLAT<1,1>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,2>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,3>='FLATRATE'        ; * JMK20
                           BENCH.FLAT<1,4>=TOT.WEIGHT        ; * JMK20
                           BENCH.FLAT<1,5>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,6>=END.WT:' LB Flat rate'      ; * JMK20
                           BENCH.DOUT<1,3>='FLATRATE'        ; * JMK20
                           BENCH.DOUT<1,5>=BENCH.CHRG        ; * JMK20
                        END              ; * JMK24
                     END
                     FLAT.RATE=1         ; * JMK20
                  END                    ; * JMK24
               END                       ; * JMK20
            NEXT FT.VAL                  ; * JMK20
         END                             ; * JMK20
      END
      IF JL.FLAG THEN                    ; * JMK48
         IF JL.DAUDIT.TABLES<55>#'' THEN           ; * JMK48
            FT.NVAL=DCOUNT(JL.DAUDIT.TABLES<55>,@VM)         ; * JMK48
            FOR FT.VAL=1 TO FT.NVAL      ; * JMK48
               BEG.WT=JL.DAUDIT.TABLES<55,FT.VAL>  ; * JMK48
               END.WT=JL.DAUDIT.TABLES<56,FT.VAL>  ; * JMK48
               INTRA.CONTR.CHRG=JL.DAUDIT.TABLES<57,FT.VAL>  ; * JMK48
               INTRA.BENCH.CHRG=JL.DAUDIT.TABLES<58,FT.VAL>  ; * JMK48
               INTER.CONTR.CHRG=JL.DAUDIT.TABLES<59,FT.VAL>  ; * JMK48
               INTER.BENCH.CHRG=JL.DAUDIT.TABLES<60,FT.VAL>  ; * JMK48
               IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN   ; * JMK48
                  FLAT.VALID=0           ; * JMK48
                  BEGIN CASE             ; * JMK48
                     CASE FLAT.ROUTE='INTER'       ; * JMK48
                        IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                        IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                     CASE FLAT.ROUTE='INTRA'       ; * JMK48
                        IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                        IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                     CASE 1              ; * JMK48
                  END CASE               ; * JMK48
                  IF FLAT.VALID THEN     ; * JMK48
                     FLAT.CONTR=0        ; * JMK48
                     FLAT.BENCH=0        ; * JMK48
                     IF FLAT.ROUTE='INTER' THEN    ; * JMK48
                        IF INTER.CONTR.CHRG+0#0 THEN         ; * JMK48
                           CONTR.CHRG=INTER.CONTR.CHRG       ; * JMK48
                           FLAT.CONTR=1  ; * JMK48
                        END              ; * JMK48
                        IF INTER.BENCH.CHRG+0#0 THEN         ; * JMK48
                           BENCH.CHRG=INTER.BENCH.CHRG       ; * JMK48
                           FLAT.BENCH=1  ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                     IF FLAT.ROUTE='INTRA' THEN    ; * JMK48
                        IF INTRA.CONTR.CHRG+0#0 THEN         ; * JMK48
                           CONTR.CHRG=INTRA.CONTR.CHRG       ; * JMK48
                           FLAT.CONTR=1  ; * JMK48
                        END              ; * JMK48
                        IF INTRA.BENCH.CHRG+0#0 THEN         ; * JMK48
                           BENCH.CHRG=INTRA.BENCH.CHRG       ; * JMK48
                           FLAT.BENCH=1  ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                     IF FLAT.CONTR THEN  ; * JMK48
                        CONTR.FLAT=''    ; * JMK48
                        CONTR.FLAT<1,1>=CONTR.CHRG           ; * JMK48
                        CONTR.FLAT<1,2>=CONTR.CHRG           ; * JMK48
                        CONTR.FLAT<1,3>='FLATRATE'           ; * JMK48
                        CONTR.FLAT<1,4>=TOT.WEIGHT           ; * JMK48
                        CONTR.FLAT<1,5>=CONTR.CHRG           ; * JMK48
                        CONTR.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK48
                        CONTR.DOUT<1,3>='FLATRATE'           ; * JMK48
                        CONTR.DOUT<1,5>=CONTR.CHRG           ; * JMK48
                     END                 ; * JMK48
                     IF LOGISTICS THEN   ; * JMK48
                        IF FLAT.BENCH THEN         ; * JMK48
                           BENCH.FLAT=''           ; * JMK48
                           BENCH.FLAT<1,1>=BENCH.CHRG        ; * JMK48
                           BENCH.FLAT<1,2>=BENCH.CHRG        ; * JMK48
                           BENCH.FLAT<1,3>='FLATRATE'        ; * JMK48
                           BENCH.FLAT<1,4>=TOT.WEIGHT        ; * JMK48
                           BENCH.FLAT<1,5>=BENCH.CHRG        ; * JMK48
                           BENCH.FLAT<1,6>=END.WT:' LB Flat rate'      ; * JMK48
                           BENCH.DOUT<1,3>='FLATRATE'        ; * JMK48
                           BENCH.DOUT<1,5>=BENCH.CHRG        ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                     FLAT.RATE=1         ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
            NEXT FT.VAL                  ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48

      * Verify Contract Bill Type
      IF CONTR.DOUT<1,10>#'' THEN
         IF CONTR.DOUT<1,10>='0202' THEN
            ERROR=("Error Rating engine obsolete for this tariff. Cannot Rate")
         END ELSE
            ERROR=("Error Code '":CONTR.DOUT<1,10>:"' returned on Contract Rating")
         END
         AUDIT='U'
         GO 9000
      END
      IF LOGISTICS AND BENCH.DOUT<1,10>#'' THEN
         IF BENCH.DOUT<1,10>='0202' THEN
            ERROR=("Error Rating engine obsolete for this tariff. Cannot Rate")
         END ELSE
            ERROR=("Error Code '":BENCH.DOUT<1,10>:"' returned on Benchmark Rating")
         END
         AUDIT='U'
         GO 9000
      END

      CONTR.BILL.TYPE=CONTR.DOUT<1,3>
      BEGIN CASE
         CASE CONTR.BILL.TYPE='FLATRATE'           ; * JMK20
         CASE CONTR.BILL.TYPE='MINIMUM'
         CASE CONTR.BILL.TYPE='ACTUAL'
         CASE CONTR.BILL.TYPE='DEFICIT'
         CASE CONTR.BILL.TYPE='NOTRATED'
            ERROR=("Contract Side of Bill Not Rated by ":CONTR.TARIFF.ACT.NAME:" Return Bill to Audit")
            AUDIT='U'
            GOTO 9000
         CASE 1
            IF RWS.TIMES<3 THEN          ; * JMK23
               SLEEP 1                   ; * JMK23
               RWS.TIMES+=1              ; * JMK23
               GO 1000                   ; * JMK23
            END                          ; * JMK23
            ERROR=("Error 104 Improper CONTR.BILL.TYPE of '":CONTR.BILL.TYPE:"'  Call Programmer!")
            AUDIT='U'
            GO 9000                      ; * Send Again & Lock into loop
      END CASE
      IF CONTR.BILL.TYPE='DEFICIT' THEN
         DEFICIT.WEIGHT=CONTR.DOUT<1,7>
      END ELSE DEFICIT.WEIGHT=0
      DISC.WEIGHT=TOT.WEIGHT+DEFICIT.WEIGHT
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CONTR.DISC.ATT=1
      END ELSE
         IF DISC.WEIGHT < 500 THEN CONTR.DISC.ATT=2 ELSE CONTR.DISC.ATT=3
      END

      * Verify Benchmark Bill Type
      BENCH.BILL.TYPE=BENCH.DOUT<1,3>
      IF LOGISTICS THEN
         BEGIN CASE
            CASE BENCH.BILL.TYPE='FLATRATE'        ; * JMK20
            CASE BENCH.BILL.TYPE='CSMMINIMUM'      ; * JMK15
            CASE BENCH.BILL.TYPE='MINIMUM'
            CASE BENCH.BILL.TYPE='ACTUAL'
            CASE BENCH.BILL.TYPE='DEFICIT'
            CASE BENCH.BILL.TYPE='NOTRATED'
               ERROR=("Benchmark Side of Bill Not Rated by ":BENCH.TARIFF.ACT.NAME:" Return Bill to Audit")
               AUDIT='U'
               GO 9000
            CASE 1
               IF RWS.TIMES<3 THEN       ; * JMK23
                  SLEEP 1                ; * JMK23
                  RWS.TIMES+=1           ; * JMK23
                  GO 1000                ; * JMK23
               END                       ; * JMK23
               ERROR=("Error 105 Improper BENCH.BILL.TYPE of '":BENCH.BILL.TYPE:"'  Call Programmer!")
               AUDIT='U'
               GO 9000                   ; * Send Again & Lock into loop
         END CASE
         IF BENCH.BILL.TYPE='DEFICIT' THEN         ; * JMK51
            BENCH.DEF.WEIGHT=BENCH.DOUT<1,7>       ; * JMK51
         END ELSE BENCH.DEF.WEIGHT=0     ; * JMK51
         BENCH.DEF.WEIGHT=0              ; * JMK51
         TOT.WEIGHT=SUM(CLASS.WGT<2>)    ; * JMK51
         BENCH.DISC.WEIGHT=TOT.WEIGHT+BENCH.DEF.WEIGHT       ; * JMK51
         BEGIN CASE                      ; * JMK51
            CASE BENCH.BILL.TYPE='MINIMUM'         ; * JMK51
               BENCH.DISC.ATT=1          ; * JMK51
            CASE BENCH.DISC.WEIGHT<500   ; * JMK51
               BENCH.DISC.ATT=2          ; * JMK51
            CASE 1                       ; * JMK51
               BENCH.DISC.ATT=3          ; * JMK51
         END CASE                        ; * JMK51
      END
      GOSUB WHY.CALCS

      IF IOT = "T" THEN                  ; * NEED LOGIC MOD HERE IF NEW TP
         TP.WHY.TAB<TP.CNT> = WHY
         * Begin GRB07
         TP.QUOTE.AMT<TP.CNT> = QUOTE.AMT
         TP.GTOT.CONTR.AMT<TP.CNT> = GTOT.CONTR.AMT
         TP.GTOT.BENCH.AMT<TP.CNT> = GTOT.BENCH.AMT
         * End GRB07
         GOSUB 8000
         IF TP.CNT = 1 THEN TP.VOUT1 = VOUT
         IF TP.CNT = 2 THEN TP.VOUT2 = VOUT

         * Begin NKH07
         * For old third party use multivalue 1 [origination zip code]
         IF TP.CNT LT "1" AND NOT(NEW.TP) THEN
*         IF TP.CNT LT "2" AND NOT(NEW.TP) THEN
            * End NKH07
            TP.CNT += 1
            GOTO 575
         END ELSE
            IF TP.AMT.TAB<1> GT TP.AMT.TAB<2> THEN
               WHY = TP.WHY.TAB<1>
               * Begin GRB07
               CLIENT.COST = TP.CLIENT.COST<1>
               QUOTE.AMT = TP.QUOTE.AMT<1>
               GTOT.CONTR.AMT = TP.GTOT.CONTR.AMT<1>
               GTOT.BENCH.AMT = TP.GTOT.BENCH.AMT<1>
               CONSULTING.AMT = TP.CONSULTING.AMT<1>
               * End GRB07
               VOUT = TP.VOUT1
               SET.VOUT=0
               GO 9000
            END
         END
      END

      GO 9000

**************************************************************
WHY.CALCS:
**************************************************************
      WHY=''
      IF JL.FLAG THEN
         WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(57,01):'Rt Zip:':LOOKUP.ZIP:@(71,01):'Tbl#:JL':JL.TABLE
      END ELSE
         WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(57,01):'Rt Zip:':LOOKUP.ZIP:@(71,01):'Tbl#:':TABLE
      END

      DTL.VOUT=''                        ; * JMK06
      FB.DTL.VOUT=''                     ; * NKH06
      WHY:=@(0,02):@(-3):'Origin : ':ORIG.ZIP:' ':ORIG.CITY:', ':ORIG.STATE:NULL
      WHY:=@(0,03):'Dest   : ':DEST.ZIP:' ':DEST.CITY:', ':DEST.STATE:NULL
      BEGIN CASE
         CASE IOT='I' ; IOT.WORDS='--IB---'
         CASE IOT='O' ; IOT.WORDS='--OB---'
         CASE IOT='T' ; IOT.WORDS='--TP---'
      END CASE
      WHY:=@(0,4):IOT.WORDS
      CONTR.STRING='|':STR('-',34):'|'
      L.CONTR.STRING=LEN(CONTR.STRING)
      CONTR.WORDS="Contract-":CONTR.TARIFF
      IF CDN.ROUTE THEN CONTR.WORDS=CHANGE(CONTR.WORDS,'AFS50002','AFS52502')    ; * NKH19
      L.CONTR.TARIFF=LEN(CONTR.WORDS)
      CONTR.START=INT((L.CONTR.STRING-L.CONTR.TARIFF)/2)
      CONTR.STRING[CONTR.START+1,L.CONTR.TARIFF]=CONTR.WORDS
      WHY:=@(0,4):'Tbl:':TABLE:@(7,4):CONTR.STRING:NULL
      IF LOGISTICS THEN
         BENCH.STRING='|':STR('-',33):'|'
         L.BENCH.STRING=LEN(BENCH.STRING)
         BENCH.WORDS="Benchmark-":BENCH.TARIFF
         IF CDN.ROUTE THEN BENCH.WORDS=CHANGE(BENCH.WORDS,'AFS50002','AFS52502')           ; * NKH19
         L.BENCH.TARIFF=LEN(BENCH.WORDS)
         BENCH.START=INT((L.BENCH.STRING-L.BENCH.TARIFF)/2)
         BENCH.STRING[BENCH.START+1,L.BENCH.TARIFF]=BENCH.WORDS
         WHY:=@(45,4):BENCH.STRING:NULL
      END
      WHY:=@(00,05):"Ln":NULL
      WHY:=@(03,05):"Bil":NULL
      WHY:=@(07,05):"Ctr":NULL
      WHY:=@(12,05):"Wgt":NULL
      WHY:=@(17,05):"Rate":NULL
      WHY:=@(23,05):"Charge":NULL
      WHY:=@(30,05):"Disc":NULL
      WHY:=@(37,05):"Amount":NULL
      IF LOGISTICS THEN
         WHY:=@(45,05):"Bch":NULL
         WHY:=@(50,05):"Wgt":NULL
         WHY:=@(55,05):"Rate":NULL
         WHY:=@(61,05):"Charge":NULL
         WHY:=@(68,05):"Disc":NULL
         WHY:=@(74,05):"Amount":NULL
      END
      CONTR.TIMES=DCOUNT(CONTR.DOUT<1,1>,@SVM)
      TIMES=DETAIL.TIMES
      IF CONTR.TIMES > TIMES THEN TIMES=CONTR.TIMES
      IF LOGISTICS THEN
         BENCH.TIMES=DCOUNT(BENCH.DOUT<1,1>,@SVM)
         IF BENCH.TIMES > TIMES THEN TIMES=BENCH.TIMES
      END
      LINE=5
      TOT.CONTR.DISC=0                   ; ** Contract Discount Accumulator
      TOT.BENCH.DISC=0                   ; ** Benchmark Discount Accumulator
      TOT.CONTR.GROSS=0                  ; * JMK52
      TOT.BENCH.GROSS=0                  ; * JMK52
      FOR DET.CNT = 1 TO TIMES
         LINE=LINE+1
         FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)    ; * NKH06
         FB.DTL.POS=FB.DTL.NVAL+1        ; * NKH06
         WHY:=@(00,LINE):DET.CNT'R%2':NULL
         WHY:=@(02,LINE):CLASSES<1,DET.CNT>'R#4':NULL
         WHY:=@(06,LINE):CONTR.CLASSES<1,1,DET.CNT>'R#4':NULL
         WHY:=@(10,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
         WHY:=@(15,LINE):CONTR.DOUT<1,1,DET.CNT>'R26#6':NULL           ; * Contr Rate
         IF CONTR.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN           ; * Catch Zero Rates
            ERROR=("Error $0 Rate on Contr Calcs Line ":DET.CNT)
            AUDIT='U'
            GO 9000
         END
         CUR.CONTR.CHARGE=CONTR.DOUT<1,2,DET.CNT>
         TOT.CONTR.GROSS+=CUR.CONTR.CHARGE         ; * JMK52
         CUR.CONTR.DISC=CONTR.DISC<CONTR.DISC.ATT,DET.CNT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
         CUR.CONTR.AMT=CUR.CONTR.CHARGE-(CUR.CONTR.DISC.AMT/10000)
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Contr Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Contract Disc %
         WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL           ; * Amt (Chg-Disc Amt)
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='FRT'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=CONTR.CLASSES<1,1,DET.CNT>       ; * JMK06
         DTL.VOUT<3,NVAL+1>=WEIGHTS<1,DET.CNT>     ; * JMK06
         DTL.VOUT<4,NVAL+1>=CONTR.DOUT<1,1,DET.CNT>          ; * JMK06
         DTL.VOUT<5,NVAL+1>=ICONV(CUR.CONTR.AMT,'MR0')       ; * JMK06
         DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')     ; * JMK06
         DTL.VOUT<7,NVAL+1>=CUR.CONTR.CHARGE
         DTL.VOUT<8,NVAL+1>=CUR.CONTR.DISC
         DTL.VOUT<9,NVAL+1>=CUR.CONTR.DISC.AMT/10000
         * Begin NKH06
         DTL.BILL.CLASS=CLASSES<1,DET.CNT>
         DTL.CONTR.CLASS=CONTR.CLASSES<1,1,DET.CNT>
         DTL.CONTR.WEIGHT=WEIGHTS<1,DET.CNT>
         DTL.CONTR.RATE=CONTR.DOUT<1,1,DET.CNT>
         DTL.CONTR.CHG=CONTR.DOUT<1,2,DET.CNT>
         DTL.CONTR.DISC.PCT=CONTR.DISC<CONTR.DISC.ATT,DET.CNT>
         DTL.CONTR.DISC.AMT=DTL.CONTR.CHG*DTL.CONTR.DISC.PCT
         DTL.CONTR.NET.AMT=DTL.CONTR.CHG-OCONV((DTL.CONTR.DISC.AMT/10000),'MR0')
         FB.DTL.VOUT< 1,FB.DTL.POS>='FRT'          ; * CODE
         FB.DTL.VOUT< 2,FB.DTL.POS>=DTL.BILL.CLASS           ; * BILLED CLASS
         FB.DTL.VOUT< 3,FB.DTL.POS>=DTL.CONTR.CLASS          ; * CONTRACT CLASS
         FB.DTL.VOUT< 4,FB.DTL.POS>=DTL.CONTR.WEIGHT         ; * CONTRACT WEIGHT
         FB.DTL.VOUT< 5,FB.DTL.POS>=DTL.CONTR.RATE           ; * CONTRACT RATE
         FB.DTL.VOUT< 6,FB.DTL.POS>=DTL.CONTR.CHG  ; * CONTRACT CHARGE
         FB.DTL.VOUT< 7,FB.DTL.POS>=DTL.CONTR.DISC.PCT       ; * CONTRACT DISCOUNT %
         FB.DTL.VOUT< 8,FB.DTL.POS>=DTL.CONTR.NET.AMT        ; * CONTRACT NET AMT
         * End NKH06
         IF LOGISTICS THEN
            WHY:=@(45,LINE):BENCH.CLASSES<1,1,DET.CNT>'R#3':NULL
            WHY:=@(48,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
            WHY:=@(53,LINE):BENCH.DOUT<1,1,DET.CNT>'R26#6':NULL        ; * Rate
            IF BENCH.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN        ; * Catch Zero Rates
               ERROR=("Error $0 Rate on Bmark Calcs Line ":DET.CNT)
               AUDIT='U'
               GO 9000
            END
            CUR.BENCH.CHARGE=BENCH.DOUT<1,2,DET.CNT>
            TOT.BENCH.GROSS+=CUR.BENCH.CHARGE      ; * JMK52
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Charge
            CUR.BENCH.DISC=BENCH.DISC<BENCH.DISC.ATT,DET.CNT>          ; * JMK51
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Bench Amount (Chg-Disc Amt)
            * Begin NKH06
            DTL.BENCH.CLASS=BENCH.CLASSES<1,1,DET.CNT>
            DTL.BENCH.WEIGHT=WEIGHTS<1,DET.CNT>
            DTL.BENCH.RATE=BENCH.DOUT<1,1,DET.CNT>
            DTL.BENCH.CHG=BENCH.DOUT<1,2,DET.CNT>
            DTL.BENCH.DISC.PCT=BENCH.DISC<BENCH.DISC.ATT,DET.CNT>
            DTL.BENCH.DISC.AMT=DTL.BENCH.CHG*DTL.BENCH.DISC.PCT
            DTL.BENCH.NET.AMT=DTL.BENCH.CHG-OCONV((DTL.BENCH.DISC.AMT/10000),'MR0')
            FB.DTL.VOUT< 9,FB.DTL.POS>=DTL.BENCH.CLASS       ; * BENCHMARK CLASS
            FB.DTL.VOUT<10,FB.DTL.POS>=DTL.BENCH.WEIGHT      ; * BENCHMARK WEIGHT
            FB.DTL.VOUT<11,FB.DTL.POS>=DTL.BENCH.RATE        ; * BENCHMARK RATE
            FB.DTL.VOUT<12,FB.DTL.POS>=DTL.BENCH.CHG         ; * BENCHMARK CHARGE
            FB.DTL.VOUT<13,FB.DTL.POS>=DTL.BENCH.DISC.PCT    ; * BENCHMARK DISCOUNT %
            FB.DTL.VOUT<14,FB.DTL.POS>=DTL.BENCH.NET.AMT     ; * BENCHMARK NET AMT
            * End NKH06
         END
      NEXT DET.CNT
      IF CONTR.BILL.TYPE='DEFICIT' OR BENCH.BILL.TYPE='DEFICIT' THEN
         LINE=LINE+1
         FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)    ; * NKH06
         FB.DTL.POS=FB.DTL.NVAL+1        ; * NKH06
         IF CONTR.BILL.TYPE='DEFICIT' THEN
            CUR.CONTR.CHARGE=CONTR.DOUT<1,9>
            TOT.CONTR.GROSS+=CUR.CONTR.CHARGE      ; * JMK52
            CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
            CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
            TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
            CUR.CONTR.AMT=CUR.CONTR.CHARGE-(CUR.CONTR.DISC.AMT/10000)
            WHY:=@(3,LINE):'DEFICIT':NULL
            WHY:=@(10,LINE):CONTR.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(15,LINE):CONTR.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
            NVAL=DCOUNT(DTL.VOUT<1>,@VM)           ; * JMK06
            DTL.VOUT<1,NVAL+1>='DEF'     ; * JMK06
            DTL.VOUT<2,NVAL+1>=''        ; * JMK06
            DTL.VOUT<3,NVAL+1>=CONTR.DOUT<1,7>     ; * JMK06
            DTL.VOUT<4,NVAL+1>=CONTR.DOUT<1,8>     ; * JMK06
            DTL.VOUT<5,NVAL+1>=ICONV(CUR.CONTR.AMT,'MR0')    ; * JMK06
            DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')  ; * JMK06
            DTL.VOUT<7,NVAL+1>=CUR.CONTR.CHARGE
            DTL.VOUT<8,NVAL+1>=CUR.CONTR.DISC
            DTL.VOUT<9,NVAL+1>=CUR.CONTR.DISC.AMT/10000
            * Begin NKH06
            DTL.CONTR.WEIGHT=CONTR.DOUT<1,7>
            DTL.CONTR.RATE=CONTR.DOUT<1,8>
            DTL.CONTR.CHG=CONTR.DOUT<1,9>
            DTL.CONTR.DISC.PCT=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
            DTL.CONTR.DISC.AMT=DTL.CONTR.CHG*DTL.CONTR.DISC.PCT
            DTL.CONTR.NET.AMT=DTL.CONTR.CHG-OCONV((DTL.CONTR.DISC.AMT/10000),'MR0')
            FB.DTL.VOUT< 1,FB.DTL.POS>='DEF'       ; * CODE
            FB.DTL.VOUT< 4,FB.DTL.POS>=DTL.CONTR.WEIGHT      ; * CONTRACT WEIGHT
            FB.DTL.VOUT< 5,FB.DTL.POS>=DTL.CONTR.RATE        ; * CONTRACT RATE
            FB.DTL.VOUT< 6,FB.DTL.POS>=DTL.CONTR.CHG         ; * CONTRACT CHARGE
            FB.DTL.VOUT< 7,FB.DTL.POS>=DTL.CONTR.DISC.PCT    ; * CONTRACT DISCOUNT %
            FB.DTL.VOUT< 8,FB.DTL.POS>=DTL.CONTR.NET.AMT     ; * CONTRACT NET AMT
            * End NKH06
         END
         IF BENCH.BILL.TYPE='DEFICIT' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,9>
            TOT.BENCH.GROSS+=CUR.BENCH.CHARGE      ; * JMK52
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK51
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(48,LINE):BENCH.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(53,LINE):BENCH.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
            * Begin NKH06
            DTL.BENCH.WEIGHT=BENCH.DOUT<1,7>
            DTL.BENCH.RATE=BENCH.DOUT<1,8>
            DTL.BENCH.CHG=BENCH.DOUT<1,9>
            DTL.BENCH.DISC.PCT=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>
            DTL.BENCH.DISC.AMT=DTL.BENCH.CHG*DTL.BENCH.DISC.PCT
            DTL.BENCH.NET.AMT=DTL.BENCH.CHG-OCONV((DTL.BENCH.DISC.AMT/10000),'MR0')
            FB.DTL.VOUT< 9,FB.DTL.POS>=DTL.BENCH.CLASS       ; * BENCHMARK CLASS
            FB.DTL.VOUT<10,FB.DTL.POS>=DTL.BENCH.WEIGHT      ; * BENCHMARK WEIGHT
            FB.DTL.VOUT<11,FB.DTL.POS>=DTL.BENCH.RATE        ; * BENCHMARK RATE
            FB.DTL.VOUT<12,FB.DTL.POS>=DTL.BENCH.CHG         ; * ENCHMARK CHARGE
            FB.DTL.VOUT<13,FB.DTL.POS>=DTL.BENCH.DISC.PCT    ; * BENCHMARK DISCOUNT %
            FB.DTL.VOUT<14,FB.DTL.POS>=DTL.BENCH.NET.AMT     ; * BENCHMARK NET AMT
            * End NKH06
         END
      END
      IF CONTR.BILL.TYPE='FLATRATE' OR BENCH.BILL.TYPE='FLATRATE' THEN           ; * JMK20
         LINE=LINE+1                     ; * JMK20
         FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)    ; * NKH06
         FB.DTL.POS=FB.DTL.NVAL+1        ; * NKH06
         IF CONTR.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.CONTR.CHARGE=CONTR.FLAT<1,5>       ; * JMK20
            TOT.CONTR.GROSS=CUR.CONTR.CHARGE       ; * JMK52
            CUR.CONTR.AMT=CONTR.FLAT<1,5>          ; * JMK20
            TOT.CONTR.DISC=0             ; * JMK20
            WHY:=@(3,LINE):CONTR.FLAT<1,6>:NULL    ; * JMK20
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * JMK20
            * Begin NKH06
            DTL.CONTR.CHG=CONTR.FLAT<1,5>
            DTL.CONTR.NET.AMT=DTL.CONTR.CHG
            FB.DTL.VOUT< 1,FB.DTL.POS>='FLAT'      ; * CODE
            FB.DTL.VOUT< 6,FB.DTL.POS>=DTL.CONTR.CHG         ; * CONTRACT CHARGE
            FB.DTL.VOUT< 8,FB.DTL.POS>=DTL.CONTR.NET.AMT     ; * CONTRACT NET AMT
            * End NKH06
         END                             ; * JMK20
         IF BENCH.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.BENCH.CHARGE=BENCH.FLAT<1,5>       ; * JMK20
            TOT.BENCH.GROSS=CUR.BENCH.CHARGE       ; * JMK52
            CUR.BENCH.AMT=BENCH.FLAT<1,5>          ; * JMK20
            TOT.BENCH.DISC=0             ; * JMK20
            WHY:=@(45,LINE):BENCH.FLAT<1,6>:NULL   ; * JMK24
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * JMK20
            * Begin NKH06
            DTL.BENCH.CHG=BENCH.FLAT<1,5>
            DTL.BENCH.NET.AMT=DTL.BENCH.CHG
            FB.DTL.VOUT< 1,FB.DTL.POS>='FLAT'      ; * CODE
            FB.DTL.VOUT<12,FB.DTL.POS>=DTL.BENCH.CHG         ; * BENCHMARK CHARGE
            FB.DTL.VOUT<14,FB.DTL.POS>=DTL.BENCH.NET.AMT     ; * BENCHMARK NET AMT
            * End NKH06
         END                             ; * JMK20
      END                                ; * JMK20
      LINE=LINE+1
      FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)       ; * NKH06
      FB.DTL.POS=FB.DTL.NVAL+1           ; * NKH06
      WHY:=@(0,LINE):'BILL TOTAL':NULL
      WHY:=@(10,LINE):CONTR.DOUT<1,4>'R#5':NULL    ; * Total Weight
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CUR.CONTR.CHARGE=CONTR.DOUT<1,5>
         TOT.CONTR.GROSS=CUR.CONTR.CHARGE          ; * JMK52
         CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC=CUR.CONTR.DISC.AMT
         WHY:=@(15,LINE):"TMIN"'R#6':NULL
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Tariff Minimum Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Disc (on Lowest Class)
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='MIN'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=CONTR.CLASSES<1,1,DET.CNT>       ; * JMK06
         DTL.VOUT<3,NVAL+1>=WEIGHTS<1,DET.CNT>     ; * JMK06
         DTL.VOUT<4,NVAL+1>='TMIN'       ; * JMK06
         DTL.VOUT<5,NVAL+1>=CUR.CONTR.CHARGE       ; * JMK06
         DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')     ; * JMK06
         DTL.VOUT<7,NVAL+1>=CUR.CONTR.CHARGE
         DTL.VOUT<8,NVAL+1>=CUR.CONTR.DISC
         DTL.VOUT<9,NVAL+1>=CUR.CONTR.DISC.AMT/10000
         * Begin NKH06
         DTL.CONTR.CHG=CONTR.DOUT<1,5>
         DTL.CONTR.DISC.PCT=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
         DTL.CONTR.DISC.AMT=ICONV((DTL.CONTR.CHG*DTL.CONTR.DISC.PCT)/10000,'MR0')
         DTL.CONTR.NET.AMT=DTL.CONTR.CHG-DTL.CONTR.DISC.AMT
         FB.DTL.VOUT< 1,FB.DTL.POS>='TMIN'         ; * CODE
         FB.DTL.VOUT< 6,FB.DTL.POS>=DTL.CONTR.CHG  ; * CONTRACT CHARGE
         FB.DTL.VOUT< 7,FB.DTL.POS>=DTL.CONTR.DISC.PCT       ; * CONTRACT DISC %
         FB.DTL.VOUT< 8,FB.DTL.POS>=DTL.CONTR.NET.AMT        ; * CONTRACT NET AMT
         * End NKH06
      END ELSE
         WHY:=@(21,LINE):CONTR.DOUT<1,5>'R26#8':NULL         ; * Total Charges
      END
      TOT.CONTR.DISC.AMT=OCONV((TOT.CONTR.DISC/10000),'MR0')           ; * JMK55
      TOT.CONTR.AMT=CONTR.DOUT<1,5>-OCONV((TOT.CONTR.DISC/10000),'MR0')
      TOT.BENCH.AMT=TOT.CONTR.AMT        ; * JMK12
      WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
      IF LOGISTICS THEN
         WHY:=@(48,LINE):BENCH.DOUT<1,4>'R#5':NULL           ; * Total Weight
         IF BENCH.BILL.TYPE='MINIMUM' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,5>
            TOT.BENCH.GROSS=CUR.BENCH.CHARGE       ; * JMK52
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK51
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC=CUR.BENCH.DISC.AMT
            WHY:=@(53,LINE):"TMIN"'R#6':NULL
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Tariff Minimum Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; *Disc (on Lowest Class)
            * Begin NKH06
            DTL.BENCH.CHG=BENCH.DOUT<1,5>
            DTL.BENCH.DISC.PCT=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>
            DTL.BENCH.DISC.AMT=ICONV((DTL.BENCH.CHG*DTL.BENCH.DISC.PCT)/10000,'MR0')
            DTL.BENCH.NET.AMT=DTL.BENCH.CHG-DTL.BENCH.DISC.AMT
            FB.DTL.VOUT< 1,FB.DTL.POS>='TMIN'      ; * CODE
            FB.DTL.VOUT<12,FB.DTL.POS>=DTL.BENCH.CHG         ; * BENCHMARK CHARGE
            FB.DTL.VOUT<13,FB.DTL.POS>=DTL.BENCH.DISC.PCT
            FB.DTL.VOUT<14,FB.DTL.POS>=DTL.BENCH.NET.AMT     ; * BENCHMARK NET AMT
            * End NKH06
         END ELSE
            WHY:=@(59,LINE):BENCH.DOUT<1,5>'R26#8':NULL      ; * Total Charges
         END
         TOT.BENCH.DISC.AMT=(TOT.BENCH.DISC/10000)'R0'       ; * JMK55
         TOT.BENCH.AMT=BENCH.DOUT<1,5>-(TOT.BENCH.DISC/10000)'R0'
         WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
      END
      IF TOT.CONTR.AMT+0=0 THEN
         ERROR=("Contract Side of Bill Not Rated, Try an adjacent zip code")
         AUDIT='U'
         GO 9000
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT+0=0 THEN
            ERROR=("Benchmark Side of Bill Not Rated, Try an adjacent zip code")
            AUDIT='U'
            GO 9000
         END
      END

      * Minimum Charge Logic
      IF OCONV(ORIG.STATE,'MCU')=OCONV(DEST.STATE,'MCU') THEN OFFSET=0 ELSE OFFSET=3
      IF TOT.WEIGHT+0=0 THEN CALL ELINE("TOT.WEIGHT is Zero Notify Programming!")
      LOCATE TOT.WEIGHT IN DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING WGT.POS ELSE NULL
      CONTR.MIN=DAUDIT.TABLES<38+OFFSET,WGT.POS>
      BENCH.MIN=DAUDIT.TABLES<39+OFFSET,WGT.POS>
      IF JL.FLAG THEN                    ; * JMK48
         LOCATE TOT.WEIGHT IN JL.DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING JL.WGT.POS ELSE NULL       ; * JMK48
         CONTR.MIN=JL.DAUDIT.TABLES<38+OFFSET,JL.WGT.POS>    ; * JMK48
      END                                ; * JMK48
      CONTR.ABS.MIN=0                    ; * Contract Absolute Minimum Flag
      BENCH.ABS.MIN=0                    ; * Benchmark Absolute Minimum Flag
      IF TOT.CONTR.AMT < CONTR.MIN AND CONTR.BILL.TYPE#'FLATRATE' THEN           ; * JMK28
         FAK=1
         TOT.CONTR.AMT=CONTR.MIN
         CONTR.ABS.MIN=1
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT < BENCH.MIN AND BENCH.BILL.TYPE#'FLATRATE' THEN        ; * JMK28
            TOT.BENCH.AMT=BENCH.MIN
            BENCH.ABS.MIN=1
         END
         FORCED.WORD=''
         IF CONTR.ABS.MIN THEN
            BEGIN CASE
               CASE FORCE.BENCH.MIN="Y"  ; * JMK11
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK11
                  BENCH.ABS.MIN=1        ; * JMK11
                  FORCED.WORD='Forced '  ; * JMK11
               CASE NUM(FORCE.BENCH.MIN) AND TOT.WEIGHT <= FORCE.BENCH.MIN       ; * JMK11
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK11
                  BENCH.ABS.MIN=1        ; * JMK11
                  FORCED.WORD='Forced '  ; * JMK11
            END CASE
         END
      END
      IF CONTR.ABS.MIN OR BENCH.ABS.MIN THEN
         LINE+=1
         FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)    ; * NKH06
         FB.DTL.POS=FB.DTL.NVAL+1        ; * NKH06
         IF CONTR.ABS.MIN THEN
            WHY:=@(3,LINE):"CONTRACT MINIMUM":NULL
            WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
            LOCATE('MIN',DTL.VOUT,1;MPOS) THEN     ; * JMK09
               DTL.VOUT<5,MPOS>=TOT.CONTR.AMT      ; * JMK09
            END                          ; * JMK09
            * Begin NKH06
            FB.DTL.VOUT< 1,FB.DTL.POS>='ABMIN'     ; * CODE
            FB.DTL.VOUT< 8,FB.DTL.POS>=TOT.CONTR.AMT         ; * ABSOLUTE MINIMUM
            IF LOGISTICS THEN
               FB.DTL.VOUT<14,FB.DTL.POS>=TOT.BENCH.AMT      ; * ABSOLUTE MINIMUM
            END
            * End NKH06
         END
         IF BENCH.ABS.MIN THEN
            WHY:=@(45,LINE):"BENCHMARK MINIMUM":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
            FB.DTL.VOUT< 1,FB.DTL.POS>='ABMIN'     ; * NKH06 - CODE
            FB.DTL.VOUT<14,FB.DTL.POS>=TOT.BENCH.AMT         ; * NKH06 - BENCHMARK NET AMT
         END
      END

*******************************************************************
SKIP.MINIMUM:                            ; * JMK20
*******************************************************************
      * Bring Benchmark up to Contract Amount BEFORE FSC and ACC calculations
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT < TOT.CONTR.AMT THEN
            TOT.BENCH.AMT=TOT.CONTR.AMT
            LINE+=1
            FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)           ; * NKH06
            FB.DTL.POS=FB.DTL.NVAL+1     ; * NKH06
            WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
            FB.DTL.VOUT< 1,FB.DTL.POS>='OMIN'      ; * NKH06 - CODE
            FB.DTL.VOUT< 8,FB.DTL.POS>=TOT.CONTR.AMT         ; * NKH06 - CONTRACT NET AMT
            FB.DTL.VOUT<14,FB.DTL.POS>=TOT.BENCH.AMT         ; * NKH06 - BENCHMARK NET AMT
         END
      END

*******************************************************************
1225: * Fuel Surcharge Calculations
*******************************************************************
      CONTR.FSC.AMT=0
      BENCH.FSC.AMT=0
      CONTR.FSC.PARMS=''                 ; * JMK12
      BENCH.FSC.PARMS=''                 ; * JMK12
      AFS.FSC.PARMS=''                   ; * JMK12
      IF CONTR.DFSC='' OR BENCH.DFSC='' THEN GO 1275
      VIN=BILL.DATE
      IF FSC.BILL.DATE#'' THEN
         VIN=FSC.BILL.DATE
      END

      VIN<2>=TOT.WEIGHT
      VIN<6>=TOT.CONTR.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx and AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS
*IF USER = 'NMEDDAUGH' THEN DEBUG
      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)
      CONTR.FSC.PARMS<1,1>=VIN<1>        ; * JMK12 - BILL DATE
      CONTR.FSC.PARMS<1,2>=VIN<2>        ; * JMK12 - WEIGHT
      CONTR.FSC.PARMS<1,3>=VIN<3>        ; * JMK12 - MILES
      CONTR.FSC.PARMS<1,4>=VIN<6>        ; * JMK12 - FREIGHT AMOUNT
      CONTR.FSC.PARMS<1,5>=VIN<7>        ; * JMK12 - ORIGIN ST
      CONTR.FSC.PARMS<1,6>=VIN<8>        ; * JMK12 - DESTINATION ST
      CONTR.FSC.PARMS<1,7>=VOUT<1>       ; * JMK12 - FSC AMT
      CONTR.FSC.PARMS<1,8>=VOUT<2>       ; * JMK12 - MIN FLG
      CONTR.FSC.PARMS<1,9>=VOUT<3>       ; * JMK12 - CALC PERC
      CONTR.FSC.PARMS<1,10>=VOUT<7>      ; * JMK12 - OVERAGE AMT
      CONTR.FSC.PARMS<1,11>=VOUT<8>      ; * JMK12 - OVERAGE STEPS
      CONTR.FSC.PARMS<1,12>=VOUT<9>      ; * JMK12 - BASE PERC
      CONTR.FSC.PARMS<1,13>=VOUT<10>     ; * JMK12 - OVERAGE PERC
      CONTR.FSC.PARMS<1,14>=VOUT<11>     ; * JMK12 - DELAY DAYS
      CONTR.FSC.PARMS<1,15>=VOUT<12>     ; * JMK12 - SHIFT DATE
      CONTR.FSC.PARMS<1,16>=VOUT<13>     ; * JMK12 - NATL FUEL PRICE
      CONTR.FSC.PARMS<1,17>=VOUT<14>     ; * JMK12 - CONV FUEL PRICE
      CONTR.FSC.PARMS<1,18>=VOUT<15>     ; * JMK12 - BEGIN EFF DATE
      CONTR.FSC.PARMS<1,19>=VOUT<16>     ; * JMK12 - FORMULA
      CONTR.FSC.PARMS<1,20>=VOUT<17>     ; * JMK12 - MODE
      CONTR.FSC.PARMS<1,21>=VOUT<18>     ; * JMK12 - BASE FUEL PRICE
      CONTR.FSC.PARMS<1,22>=VOUT<19>     ; * JMK12 - NATL INDEX NAME
      CONTR.FSC.PARMS<1,23>=VOUT<20>     ; * JMK12 - MAX SETUP PRICE
      CONTR.FSC.PARMS<1,24>=VOUT<21>     ; * JMK50 - AFS CONTRACT FSC

      CONTR.FSC.PARMS<1,25>=VOUT<30>     ; * NPR05 - FSC DESCRIPTION/NOTES

      CONTR.FSC.AMT=VOUT<1>
      CONTR.FSC.MIN=VOUT<2>
      CONTR.FSC.PERC=VOUT<3>
      VIN=BILL.DATE
      IF FSC.BILL.DATE#'' THEN
         VIN=FSC.BILL.DATE
      END

      VIN<2>=TOT.WEIGHT
      VIN<6>=TOT.BENCH.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx and AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS

      CALL CALC.FSC(VIN,VOUT,BENCH.DFSC,F.TABLES)
      * Capture carrier benchmark FSC parameters for later review
      BENCH.FSC.PARMS<1,1>=VIN<1>        ; * JMK12 - BILL DATE
      BENCH.FSC.PARMS<1,2>=VIN<2>        ; * JMK12 - WEIGHT
      BENCH.FSC.PARMS<1,3>=VIN<3>        ; * JMK12 - MILES
      BENCH.FSC.PARMS<1,4>=VIN<6>        ; * JMK12 - FREIGHT AMOUNT
      BENCH.FSC.PARMS<1,5>=VIN<7>        ; * JMK12 - ORIGIN ST
      BENCH.FSC.PARMS<1,6>=VIN<8>        ; * JMK12 - DESTINATION ST
      BENCH.FSC.PARMS<1,7>=VOUT<1>       ; * JMK12 - FSC AMT
      BENCH.FSC.PARMS<1,8>=VOUT<2>       ; * JMK12 - MIN FLG
      BENCH.FSC.PARMS<1,9>=VOUT<3>       ; * JMK12 - CALC PERC
      BENCH.FSC.PARMS<1,10>=VOUT<7>      ; * JMK12 - OVERAGE AMT
      BENCH.FSC.PARMS<1,11>=VOUT<8>      ; * JMK12 - OVERAGE STEPS
      BENCH.FSC.PARMS<1,12>=VOUT<9>      ; * JMK12 - BASE PERC
      BENCH.FSC.PARMS<1,13>=VOUT<10>     ; * JMK12 - OVERAGE PERC
      BENCH.FSC.PARMS<1,14>=VOUT<11>     ; * JMK12 - DELAY DAYS
      BENCH.FSC.PARMS<1,15>=VOUT<12>     ; * JMK12 - SHIFT DATE
      BENCH.FSC.PARMS<1,16>=VOUT<13>     ; * JMK12 - NATL FUEL PRICE
      BENCH.FSC.PARMS<1,17>=VOUT<14>     ; * JMK12 - CONV FUEL PRICE
      BENCH.FSC.PARMS<1,18>=VOUT<15>     ; * JMK12 - BEGIN EFF DATE
      BENCH.FSC.PARMS<1,19>=VOUT<16>     ; * JMK12 - FORMULA
      BENCH.FSC.PARMS<1,20>=VOUT<17>     ; * JMK12 - MODE
      BENCH.FSC.PARMS<1,21>=VOUT<18>     ; * JMK12 - BASE FUEL PRICE
      BENCH.FSC.PARMS<1,22>=VOUT<19>     ; * JMK12 - NATL INDEX NAME
      BENCH.FSC.PARMS<1,23>=VOUT<20>     ; * JMK12 - MAX SETUP PRICE
      BENCH.FSC.PARMS<1,24>=VOUT<21>     ; * JMK50 - AFS CONTRACT FSC

      BENCH.FSC.PARMS<1,25>=VOUT<30>     ; * NPR05 - FSC DESCRIPTION/NOTES
      * Setup call to calculate old AFS benchmark FSC charges

      CALL CALC.FSC(VIN,VOUT,AFSO.BENCH.DFSC,F.TABLES)       ; * JMK36
      * Capture carrier benchmark FSC parameters for later review
      AFSO.BENCH.FSC.PARMS<1,1>=VIN<1>   ; * JMK36 - BILL DATE
      AFSO.BENCH.FSC.PARMS<1,2>=VIN<2>   ; * JMK36 - WEIGHT
      AFSO.BENCH.FSC.PARMS<1,3>=VIN<3>   ; * JMK36 - MILES
      AFSO.BENCH.FSC.PARMS<1,4>=VIN<6>   ; * JMK36 - FREIGHT AMOUNT
      AFSO.BENCH.FSC.PARMS<1,5>=VIN<7>   ; * JMK36 - ORIGIN ST
      AFSO.BENCH.FSC.PARMS<1,6>=VIN<8>   ; * JMK36 - DESTINATION ST
      AFSO.BENCH.FSC.PARMS<1,7>=VOUT<1>  ; * JMK36 - FSC AMT
      AFSO.BENCH.FSC.PARMS<1,8>=VOUT<2>  ; * JMK36 - MIN FLG
      AFSO.BENCH.FSC.PARMS<1,9>=VOUT<3>  ; * JMK36 - CALC PERC
      AFSO.BENCH.FSC.PARMS<1,10>=VOUT<7>           ; * JMK36 - OVERAGE AMT
      AFSO.BENCH.FSC.PARMS<1,11>=VOUT<8>           ; * JMK36 - OVERAGE STEPS
      AFSO.BENCH.FSC.PARMS<1,12>=VOUT<9>           ; * JMK36 - BASE PERC
      AFSO.BENCH.FSC.PARMS<1,13>=VOUT<10>          ; * JMK36 - OVERAGE PERC
      AFSO.BENCH.FSC.PARMS<1,14>=VOUT<11>          ; * JMK36 - DELAY DAYS
      AFSO.BENCH.FSC.PARMS<1,15>=VOUT<12>          ; * JMK36 - SHIFT DATE
      AFSO.BENCH.FSC.PARMS<1,16>=VOUT<13>          ; * JMK36 - NATL FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,17>=VOUT<14>          ; * JMK36 - CONV FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,18>=VOUT<15>          ; * JMK36 - BEGIN EFF DATE
      AFSO.BENCH.FSC.PARMS<1,19>=VOUT<16>          ; * JMK36 - FORMULA
      AFSO.BENCH.FSC.PARMS<1,20>=VOUT<17>          ; * JMK36 - MODE
      AFSO.BENCH.FSC.PARMS<1,21>=VOUT<18>          ; * JMK36 - BASE FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,22>=VOUT<19>          ; * JMK36 - NATL INDEX NAME
      AFSO.BENCH.FSC.PARMS<1,23>=VOUT<20>          ; * JMK36 - MAX SETUP PRICE
      AFSO.BENCH.FSC.PARMS<1,24>=VOUT<21>          ; * JMK50 - AFS CONTRACT FSC

      AFSO.BENCH.FSC.PARMS<1,25>=VOUT<30>          ; * NPR05 - FSC DESCRIPTION/NOTES

      * Setup call to calculate AFS benchmark FSC charges
      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)  ; * JMK12

      * Capture AFS benchmark FSC parameters for later review
      AFS.FSC.PARMS<1,1>=VIN<1>          ; * JMK12 - BILL DATE
      AFS.FSC.PARMS<1,2>=VIN<2>          ; * JMK12 - WEIGHT
      AFS.FSC.PARMS<1,3>=VIN<3>          ; * JMK12 - MILES
      AFS.FSC.PARMS<1,4>=VIN<6>          ; * JMK12 - FREIGHT AMOUNT
      AFS.FSC.PARMS<1,5>=VIN<7>          ; * JMK12 - ORIGIN ST
      AFS.FSC.PARMS<1,6>=VIN<8>          ; * JMK12 - DESTINATION ST
      AFS.FSC.PARMS<1,7>=VOUT<1>         ; * JMK12 - FSC AMT
      AFS.FSC.PARMS<1,8>=VOUT<2>         ; * JMK12 - MIN FLG
      AFS.FSC.PARMS<1,9>=VOUT<3>         ; * JMK12 - CALC PERC
      AFS.FSC.PARMS<1,10>=VOUT<7>        ; * JMK12 - OVERAGE AMT
      AFS.FSC.PARMS<1,11>=VOUT<8>        ; * JMK12 - OVERAGE STEPS
      AFS.FSC.PARMS<1,12>=VOUT<9>        ; * JMK12 - BASE PERC
      AFS.FSC.PARMS<1,13>=VOUT<10>       ; * JMK12 - OVERAGE PERC
      AFS.FSC.PARMS<1,14>=VOUT<11>       ; * JMK12 - DELAY DAYS
      AFS.FSC.PARMS<1,15>=VOUT<12>       ; * JMK12 - SHIFT DATE
      AFS.FSC.PARMS<1,16>=VOUT<13>       ; * JMK12 - NATL FUEL PRICE
      AFS.FSC.PARMS<1,17>=VOUT<14>       ; * JMK12 - CONV FUEL PRICE
      AFS.FSC.PARMS<1,18>=VOUT<15>       ; * JMK12 - BEGIN EFF DATE
      AFS.FSC.PARMS<1,19>=VOUT<16>       ; * JMK12 - FORMULA
      AFS.FSC.PARMS<1,20>=VOUT<17>       ; * JMK12 - MODE
      AFS.FSC.PARMS<1,21>=VOUT<18>       ; * JMK12 - BASE FUEL PRICE
      AFS.FSC.PARMS<1,22>=VOUT<19>       ; * JMK12 - NATL INDEX NAME
      AFS.FSC.PARMS<1,23>=VOUT<20>       ; * JMK12 - MAX SETUP PRICE
      AFS.FSC.PARMS<1,24>=VOUT<21>       ; * JMK50 - AFS CONTRACT FSC

      AFS.FSC.PARMS<1,25>=VOUT<30>       ; * NPR05 - FSC DESCRIPTION/NOTES

      IF LOGISTICS THEN                  ; * JMK12
         BENCH.FSC.AMT=AFS.FSC.PARMS<1,7>          ; * JMK12
         BENCH.FSC.MIN=AFS.FSC.PARMS<1,8>          ; * JMK12
         BENCH.FSC.PERC=AFS.FSC.PARMS<1,9>         ; * JMK12
         IF CARR.ONLY.FSC='Y' OR CARR.ONLY.FSC='C' THEN      ; * JMK12 ; * JMK36
            BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>     ; * JMK12
            BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>     ; * JMK12
            BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>    ; * JMK12
         END                             ; * JMK12
         IF CARR.ONLY.FSC='O' THEN       ; * JMK36
            BENCH.FSC.AMT=AFSO.BENCH.FSC.PARMS<1,7>          ; * JMK36
            BENCH.FSC.MIN=AFSO.BENCH.FSC.PARMS<1,8>          ; * JMK36
            BENCH.FSC.PERC=AFSO.BENCH.FSC.PARMS<1,9>         ; * JMK36
            IF CONTR.FSC.PARMS<1,24>[1,2]#'AF' THEN          ; * JMK50
               BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>  ; * JMK50
               BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>  ; * JMK50
               BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>           ; * JMK50
            END                          ; * JMK50
         END                             ; * JMK36
         IF NO.LOG.FSC THEN BENCH.FSC.AMT=0        ; * Set to Zero
      END
      IF CONTR.FSC.AMT+BENCH.FSC.AMT+0#0 THEN
         LINE+=1
         FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)    ; * NKH06
         FB.DTL.POS=FB.DTL.NVAL+1        ; * NKH06
         IF CONTR.FSC.MIN THEN
            WHY:=@(3,LINE):'Fuel Sur Charge Min':NULL
         END ELSE

            CONTR.NAT.IDX = CONTR.FSC.PARMS<1,22>
            CONTR.AFS.AFN = CONTR.FSC.PARMS<1,24>
            CONTR.AFS.DESC = CONTR.FSC.PARMS<1,25>
            IF CONTR.AFS.AFN = "AFN" THEN CONTR.AFS.AFN = "AFS Supp A FSC"
            IF CONTR.AFS.AFN = "AFS" THEN CONTR.AFS.AFN = "AFS FSC"
            IF CONTR.AFS.DESC NE "" THEN CONTR.AFS.AFN = CONTR.AFS.DESC          ; * NPR05
            CONTR.FSC.DETAIL = ""
            IF CONTR.AFS.AFN NE "" THEN
               CONTR.FSC.DETAIL = CONTR.AFS.AFN
            END
            IF CONTR.NAT.IDX NE "" THEN
               IF CONTR.FSC.DETAIL = '' THEN CONTR.FSC.DETAIL := CONTR.NAT.IDX ELSE CONTR.FSC.DETAIL := " - ":CONTR.NAT.IDX
            END
            IF CONTR.AFS.DESC NE "" THEN CONTR.FSC.DETAIL = CONTR.AFS.DESC       ; * NPR05
            IF CONTR.FSC.DETAIL = "" THEN
               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% Fuel Sur Charge':NULL
            END ELSE
               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% FSC (':CONTR.FSC.DETAIL:') ':NULL
            END
         END
         WHY:=@(35,LINE):CONTR.FSC.AMT'R26#8':NULL
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='FSC'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=''           ; * JMK06
         DTL.VOUT<3,NVAL+1>=''           ; * JMK06
         DTL.VOUT<4,NVAL+1>=''           ; * JMK06
         DTL.VOUT<5,NVAL+1>=CONTR.FSC.AMT          ; * JMK06
         DTL.VOUT<7,NVAL+1>=''
         DTL.VOUT<8,NVAL+1>=''
         DTL.VOUT<9,NVAL+1>=''
         FB.DTL.VOUT<1,FB.DTL.POS>='FSC'           ; * NKH06
         FB.DTL.VOUT<8,FB.DTL.POS>=CONTR.FSC.AMT   ; * NKH06
         IF LOGISTICS THEN
            BEGIN CASE
               CASE NO.LOG.FSC
                  WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'Logistics FSC = N':NULL
               CASE BENCH.FSC.MIN
                  WHY:=@(45,LINE):'Fuel Sur Charge Min':NULL
               CASE 1
                  BENCH.NAT.IDX = BENCH.FSC.PARMS<1,22>
                  BENCH.AFS.AFN = BENCH.FSC.PARMS<1,24>
                  BENCH.AFS.DESC = BENCH.FSC.PARMS<1,25>
                  IF BENCH.AFS.AFN = "AFN" THEN BENCH.AFS.AFN = "AFS Supp A FSC"
                  IF BENCH.AFS.AFN = "AFS" THEN BENCH.AFS.AFN = "AFS FSC"
                  IF BENCH.AFS.DESC NE "" THEN BENCH.AFS.AFN = BENCH.AFS.DESC
                  BENCH.FSC.DETAIL = ""
                  IF BENCH.AFS.AFN NE "" THEN
                     BENCH.FSC.DETAIL = BENCH.AFS.AFN
                  END
                  IF BENCH.NAT.IDX NE "" THEN
                     IF BENCH.FSC.DETAIL = '' THEN BENCH.FSC.DETAIL := BENCH.NAT.IDX ELSE BENCH.FSC.DETAIL := " - ":BENCH.NAT.IDX
                  END
                  IF BENCH.AFS.DESC NE "" THEN BENCH.FSC.DETAIL = BENCH.AFS.DESC
                  IF BENCH.FSC.DETAIL = "" THEN
                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% Fuel Sur Charge':NULL
                  END ELSE
                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% FSC (':BENCH.FSC.DETAIL:') ':NULL
                  END
            END CASE
            WHY:=@(73,LINE):BENCH.FSC.AMT'R26#7':NULL
            FB.DTL.VOUT<1,FB.DTL.POS>='FSC'        ; * NKH06
            FB.DTL.VOUT<14,FB.DTL.POS>=BENCH.FSC.AMT         ; * NKH06
         END
      END

*******************************************************************
1275: * Assessorial Charge Calculations
*******************************************************************
****IF USER = 'GBINO' THEN DEBUG
      TOT.CONTR.MISC.CHG=0
      TOT.BENCH.MISC.CHG=0
*      CONTR.TYPE = ''                              ; * NKH06 * NKH12
      SAVE.CONTR = ''                    ; * NKH04
      SAVE.BENCH = ''                    ; * NKH04
      SAVED.LINES = 0                    ; * NKH04
      MISC.CHG.TIMES=DCOUNT(MISC.CHG<1>,@VM)
      FOR MISC.CHG.COUNT=1 TO MISC.CHG.TIMES
         LINE=LINE+1
         FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)    ; * NKH06
         FB.DTL.POS=FB.DTL.NVAL+1        ; * NKH06
         CUR.MISC.CHG.CODE=MISC.CHG<1,MISC.CHG.COUNT>
         LOCATE CUR.MISC.CHG.CODE IN LI.CODES<1> SETTING POS THEN
            CUR.MISC.CHG.DESC=LI.CODES<2,POS>
         END ELSE
            CUR.MISC.CHG.DESC='Not On File'
         END
         IF MISC.CHG<4,MISC.CHG.COUNT>+0=0 THEN    ; * JMK55  ; * NKH10  NKH13
*         IF MISC.CHG<1,MISC.CHG.COUNT> > "" THEN               ; * NKH10  NKH13
            CUR.CONTR.MISC.CHG=MISC.CHG<2,MISC.CHG.COUNT>
            IF CUR.CONTR.MISC.CHG='CWT' THEN       ; * JMK02
               LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN   ; * JMK02
                  CUR.CONTR.MISC.CWT.RATE=DAUDIT.TABLES<49,MPOS> 'R26'           ; * JMK02
                  CUR.CONTR.MISC.CWT.MIN=DAUDIT.TABLES<50,MPOS>        ; * JMK02
                  CUR.CONTR.MISC.CWT.MAX=DAUDIT.TABLES<51,MPOS>        ; * JMK02
                  CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE         ; * JMK02
                  CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')
                  IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN       ; * JMK02
                     IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN         ; * JMK02
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
                  IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN       ; * JMK02
                     IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN         ; * JMK02
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
               END ELSE                  ; * JMK02
                  CUR.CONTR.MISC.CHG=0   ; * JMK02
               END                       ; * JMK02
               IF JL.FLAG THEN           ; * JMK48
                  LOCATE CUR.MISC.CHG.CODE IN JL.DAUDIT.TABLES<26> SETTING JL.MPOS THEN    ; * JMK48
                     CUR.CONTR.MISC.CWT.RATE=JL.DAUDIT.TABLES<49,JL.MPOS> 'R26'  ; * JMK48
                     CUR.CONTR.MISC.CWT.MIN=JL.DAUDIT.TABLES<50,JL.MPOS>         ; * JMK48
                     CUR.CONTR.MISC.CWT.MAX=JL.DAUDIT.TABLES<51,JL.MPOS>         ; * JMK48
                     CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE      ; * JMK48
                     CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')          ; * JMK48
                     IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN    ; * JMK48
                        IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN      ; * JMK48
                           CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN   ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                     IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN    ; * JMK48
                        IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN      ; * JMK48
                           CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX   ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                  END ELSE               ; * JMK48
                     CUR.CONTR.MISC.CHG=0          ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
            END ELSE                     ; * JMK02
               LEN.CHG=LEN(CUR.CONTR.MISC.CHG)
               IF CUR.CONTR.MISC.CHG[LEN.CHG,1]='%' THEN
                  PERC=CUR.CONTR.MISC.CHG[1,LEN.CHG-1]
                  CUR.CONTR.MISC.CHG=OCONV(TOT.CONTR.AMT*PERC/100,'MR0')
               END
            END                          ; * JMK02
            ACC.ARRAY<2,MISC.CHG.COUNT>=CUR.CONTR.MISC.CHG   ; * JMK27
            TOT.CONTR.MISC.CHG+=CUR.CONTR.MISC.CHG
            IF LOGISTICS THEN
               CUR.BENCH.MISC.CHG=MISC.CHG<3,MISC.CHG.COUNT>
               IF CUR.BENCH.MISC.CHG='CWT' THEN    ; * JMK02
                  LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN          ; * JMK02
                     CUR.BENCH.MISC.CWT.RATE=DAUDIT.TABLES<52,MPOS> 'R26'        ; * JMK02
                     CUR.BENCH.MISC.CWT.MIN=DAUDIT.TABLES<53,MPOS>     ; * JMK02
                     CUR.BENCH.MISC.CWT.MAX=DAUDIT.TABLES<54,MPOS>     ; * JMK02
                     CUR.BENCH.MISC.CHG=TOT.WEIGHT *CUR.BENCH.MISC.CWT.RATE      ; * JMK02
                     CUR.BENCH.MISC.CHG=OCONV(CUR.BENCH.MISC.CHG,'MR0')
                     IF CUR.BENCH.MISC.CWT.MIN+0 # 0 THEN    ; * JMK02
                        IF CUR.BENCH.MISC.CHG < CUR.BENCH.MISC.CWT.MIN THEN      ; * JMK02
                           CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MIN   ; * JMK02
                        END              ; * JMK02
                     END                 ; * JMK02
                     IF CUR.BENCH.MISC.CWT.MAX+0 # 0 THEN    ; * JMK02
                        IF CUR.BENCH.MISC.CHG > CUR.BENCH.MISC.CWT.MAX THEN      ; * JMK02
                           CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MAX   ; * JMK02
                        END              ; * JMK02
                     END                 ; * JMK02
                  END ELSE               ; * JMK02
                     CUR.BENCH.MISC.CHG=0          ; * JMK02
                  END                    ; * JMK02
               END ELSE                  ; * JMK02
                  LEN.CHG=LEN(CUR.BENCH.MISC.CHG)
                  IF CUR.BENCH.MISC.CHG[LEN.CHG,1]='%' THEN
                     PERC=CUR.BENCH.MISC.CHG[1,LEN.CHG-1]
                     CUR.BENCH.MISC.CHG=OCONV(TOT.BENCH.AMT*PERC/100,'MR0')
                  END
               END                       ; * JMK02
               ACC.ARRAY<3,MISC.CHG.COUNT>=CUR.BENCH.MISC.CHG          ; * JMK27
               TOT.BENCH.MISC.CHG+=CUR.BENCH.MISC.CHG
            END
            GOSUB BUILD.DETAIL.OUT       ; * NKH04
            * Begin NKH06
            FB.DTL.VOUT<1,FB.DTL.POS>=CUR.MISC.CHG.CODE
            FB.DTL.VOUT<8,FB.DTL.POS>=CUR.CONTR.MISC.CHG

            IF LOGISTICS THEN
               FB.DTL.VOUT<14,FB.DTL.POS>=CUR.BENCH.MISC.CHG
            END
            * End NKH06
         END ELSE                        ; * JMK55
            MISC.CODE=CUR.MISC.CHG.CODE  ; * JMK55
            GOSUB 8975                   ; * JMK55
            GOSUB BUILD.SAVE.LINE        ; * NKH04
            ACC.ARRAY<2,MISC.CHG.COUNT>=CUR.CONTR.MISC.CHG   ; * JMK55
            TOT.CONTR.MISC.CHG+=CUR.CONTR.MISC.CHG           ; * JMK55
            ACC.ARRAY<3,MISC.CHG.COUNT>=CUR.BENCH.MISC.CHG   ; * JMK55
            TOT.BENCH.MISC.CHG+=CUR.BENCH.MISC.CHG           ; * JMK55
         END                             ; * JMK55
      NEXT MISC.CHG.COUNT

      GTOT.CONTR.AMT=TOT.CONTR.AMT+CONTR.FSC.AMT+TOT.CONTR.MISC.CHG
      IF LOGISTICS THEN
         GTOT.BENCH.AMT=TOT.BENCH.AMT+BENCH.FSC.AMT+TOT.BENCH.MISC.CHG
      END

      * Begin NKH04
      IF SAVED.LINES THEN
         SAVE.COUNT = DCOUNT(SAVE.CONTR<1>,@VM)
         FOR SC = 1 TO SAVE.COUNT
            * Begin NKH12

            * Contract Variables
            CUR.MISC.CHG.CODE = SAVE.CONTR<1,SC>
            CUR.CONTR.MISC.CHG.DESC = SAVE.CONTR<2,SC>
            CONTR.RATE = SAVE.CONTR<3,SC>
            CONTR.ACC = SAVE.CONTR<4,SC>
            CONTR.FSC = SAVE.CONTR<5,SC>
            CONTR.TYPE = SAVE.CONTR<7,SC>
            CUR.CONTR.MISC.CHG = SAVE.CONTR<8,SC>
            CONTR.MIN = SAVE.CONTR<9,SC>

            * Bench Variables
*            CUR.BENCH.MISC.CHG.CODE = SAVE.BENCH<1,SC>
            CUR.BENCH.MISC.CHG.DESC = SAVE.BENCH<2,SC>
            BENCH.RATE = SAVE.BENCH<3,SC>
            BENCH.ACC = SAVE.BENCH<4,SC>
            BENCH.FSC = SAVE.BENCH<5,SC>
            BENCH.TYPE = SAVE.BENCH<7,SC>
            CUR.BENCH.MISC.CHG = SAVE.BENCH<8,SC>
            BENCH.MIN = SAVE.BENCH<9,SC>

            AC.VIN = ''
            AC.VIN<1> = SC
            AC.VIN<2> = TOT.CONTR.AMT
            AC.VIN<3> = TOT.BENCH.AMT
            AC.VIN<4> = GTOT.CONTR.AMT
            AC.VIN<5> = GTOT.BENCH.AMT
            AC.VIN<6> = CONTR.FSC.AMT
            AC.VIN<7> = BENCH.FSC.AMT
            AC.VIN<8> = TOT.CONTR.MISC.CHG
            AC.VIN<9> = TOT.BENCH.MISC.CHG
            AC.VIN<10> = CONTR.FSC.PERC
            AC.VIN<11> = BENCH.FSC.PERC
            AC.VIN<12> = CONTR.MAX
            AC.VIN<13> = BENCH.MAX
            AC.VIN<14> = TOT.WEIGHT
            AC.VOUT = ''

            CALL ACC.CALCS(AC.VIN,AC.VOUT,SAVE.CONTR,SAVE.BENCH)

            CUR.CONTR.MISC.CHG = AC.VOUT<1>
            CUR.BENCH.MISC.CHG = AC.VOUT<2>
            GTOT.CONTR.AMT = AC.VOUT<3>
            GTOT.BENCH.AMT = AC.VOUT<4>

            LOCATE(CUR.MISC.CHG.CODE,ACC.ARRAY<1>,1;ACC.POS) THEN
               ACC.ARRAY<2,ACC.POS>=CUR.CONTR.MISC.CHG
            END
            * End NKH12
            LOCATE(CUR.MISC.CHG.CODE,ACC.ARRAY<1>,1;ACC.POS) THEN
               ACC.ARRAY<3,ACC.POS>=CUR.BENCH.MISC.CHG
            END

            GOSUB BUILD.DETAIL.OUT
*            GTOT.CONTR.AMT += CUR.CONTR.MISC.CHG  ; * NKH10
*            GTOT.BENCH.AMT += CUR.BENCH.MISC.CHG  ; * NKH10

            * Begin NKH06
            FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)
            FB.DTL.POS=FB.DTL.NVAL+1

            FB.DTL.VOUT<1,FB.DTL.POS>=CUR.MISC.CHG.CODE
            FB.DTL.VOUT<8,FB.DTL.POS>=CUR.CONTR.MISC.CHG

            IF LOGISTICS THEN
               FB.DTL.VOUT<14,FB.DTL.POS>=CUR.BENCH.MISC.CHG
            END
            * End NKH06
         NEXT SC
      END
      * End NKH04

      * Adjust Benchmark Amount if Less than Contract Amount
      IF LOGISTICS AND GTOT.BENCH.AMT < GTOT.CONTR.AMT THEN
         GTOT.BENCH.AMT=GTOT.CONTR.AMT
         LINE+=1
         FB.DTL.NVAL=DCOUNT(FB.DTL.VOUT<1>,@VM)    ; * NKH06
         FB.DTL.POS=FB.DTL.NVAL+1        ; * NKH06
         WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
         FB.DTL.VOUT< 1,FB.DTL.POS>='OMIN'         ; * NKH06 - CODE
         FB.DTL.VOUT< 8,FB.DTL.POS>=GTOT.CONTR.AMT           ; * NKH06 - CONTRACT NET AMT
         FB.DTL.VOUT<14,FB.DTL.POS>=GTOT.BENCH.AMT           ; * NKH06 - BENCHMARK NET AMT
      END
      IF LOGISTICS THEN
         IF CLIENT = "01769" THEN        ; * JMK53
            IF TOT.WEIGHT GE "700" THEN
               IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "3670" THEN
                  LINE+=1
                  WHY:=@(45,LINE):"BENCHMARK SUBTOTAL          ":NULL
                  WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
                  DIFF.LOG=3670-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)
                  GTOT.BENCH.AMT=GTOT.CONTR.AMT+3670
                  LINE+=1
                  WHY:=@(45,LINE):"ADJ! Max consulting of 36.70":NULL
                  WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL
               END
            END
         END

         IF CARRIER = '00198' THEN
            BEAVER.ADJ=1
            BEGIN CASE
               CASE CLIENT='01457' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01675' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01113' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00879' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01101' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01083' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01873' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01079' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01389' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01739' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01271' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01686' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01604' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01112' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01267' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01432' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01418' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01749' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01770' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01027' AND BILL.DATE GE "15550" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01019' AND BILL.DATE GE "15550" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01463' AND BILL.DATE GE "15590" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00890' AND BILL.DATE GE "15597" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01862' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01863' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01924' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00883' AND BILL.DATE GE "15597" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01717' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01822' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01907' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00866' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='02010' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01435' AND BILL.DATE GE "15980" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01817' AND BILL.DATE GE "16032" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01789' AND BILL.DATE GE "16045" AND TOT.WEIGHT GT "150"
                  BEAVER.ADJ=0
               CASE CLIENT='01014' AND BILL.DATE GE "16003" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01630' AND BILL.DATE GE "16087" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01284' AND BILL.DATE GE "16071" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='00879' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01112' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01457' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01604' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01686' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01873' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01015' AND BILL.DATE GE "16111" AND TOT.WEIGHT GT "0" AND BILL.DATE LE "16889"     ; * DRF06
                  BEAVER.ADJ=0
               CASE CLIENT='00872' AND BILL.DATE GE "16377" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00890' AND BILL.DATE GE "16480" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='02192' AND BILL.DATE GE "16514" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01746' AND BILL.DATE GE "16538" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01504' AND BILL.DATE GE "16635" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01717' AND BILL.DATE GE "16661" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='02204' AND BILL.DATE GE "16668" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00895' AND BILL.DATE GE ICONV('10/09/13','D') AND TOT.WEIGHT GT "100"    ; * JMK66
                  BEAVER.ADJ=0           ; * JMK66
               CASE CLIENT='02102' AND BILL.DATE GE "16755" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01019' AND BILL.DATE GE "16938" AND TOT.WEIGHT GT "0"          ; * DRF02
                  BEAVER.ADJ=0           ; * DRF02
               CASE CLIENT='05171' AND BILL.DATE GE "17277" AND TOT.WEIGHT GT "100"        ; * DRF07
                  BEAVER.ADJ=0           ; * DRF07
               CASE CLIENT='01394' AND BILL.DATE GE "17182" AND TOT.WEIGHT GT "100"        ; * DRF09
                  BEAVER.ADJ=0           ; * DRF09
               CASE CLIENT='05411' AND BILL.DATE GE "17319" AND TOT.WEIGHT GT "100"        ; * DRF10
                  BEAVER.ADJ=0           ; * DRF10
               CASE CLIENT='05351' AND BILL.DATE GE "17168" AND TOT.WEIGHT GT "0"          ; * DRF11
                  BEAVER.ADJ=0           ; * DRF11
               CASE CLIENT='01454' AND BILL.DATE GE "17168" AND TOT.WEIGHT GT "100"        ; * DRF12
                  BEAVER.ADJ=0           ; * DRF12
               CASE CLIENT='02027' AND BILL.DATE GE "17673" AND TOT.WEIGHT GT "100"        ; * GRB01
                  BEAVER.ADJ=0           ; * GRB01
               CASE CLIENT='00851' AND BILL.DATE GE "17673" AND TOT.WEIGHT GT "100"        ; * GRB01
                  BEAVER.ADJ=0           ; * GRB01
               CASE CLIENT='01718' AND BILL.DATE GE "17697" AND TOT.WEIGHT GT "100"        ; * GRB02
                  BEAVER.ADJ=0           ; * GRB02
               CASE CLIENT ='01987' AND BILL.DATE GE "17712" AND TOT.WEIGHT GT "100"       ; * GRB03
                  BEAVER.ADJ=0           ; * GRB03
               CASE CLIENT ='01072' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"       ; * GRB04
                  BEAVER.ADJ=0           ; * GRB04
               CASE CLIENT ='07073' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"       ; * GRB04
                  BEAVER.ADJ=0           ; * GRB04
               CASE CLIENT ='07074' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"       ; * GRB04
                  BEAVER.ADJ=0           ; * GRB04
               CASE CLIENT='05095' AND BILL.DATE GE "17792" AND TOT.WEIGHT GT "100"        ; *TAG01
                  BEAVER.ADJ=0           ; *TAG01
               CASE CLIENT='05608' AND BILL.DATE GE "17838" AND TOT.WEIGHT GT "100"        ; *TAG02
                  BEAVER.ADJ=0           ; *TAG02
               CASE CLIENT='01789' AND BILL.DATE GE "17904" AND TOT.WEIGHT GT "100"        ; *TAG03
                  BEAVER.ADJ=0           ; *TAG03
               CASE CLIENT='01650' AND BILL.DATE GE "17903" AND TOT.WEIGHT GT "100"        ; * NKH01
                  BEAVER.ADJ=0           ; * NKH01
               CASE CLIENT='00934' AND BILL.DATE GE "18215" AND TOT.WEIGHT GT "100"        ; * NKH03
                  BEAVER.ADJ=0           ; * NKH03
               CASE CLIENT='05763' AND BILL.DATE GE "18495" AND TOT.WEIGHT GT "100"        ; * NKH14
                  BEAVER.ADJ=0           ; * NKH14
               CASE CLIENT='05673' AND BILL.DATE GE "18568" AND TOT.WEIGHT GT "0"          ; * NKH17
                  BEAVER.ADJ=0           ; * NKH17
               CASE CLIENT='01141' AND BILL.DATE GE "18579" AND TOT.WEIGHT GT "0"          ; * NKH18
                  BEAVER.ADJ=0           ; * NKH18
               CASE CLIENT='01139' AND BILL.DATE GE "18832" AND TOT.WEIGHT GT "100"        ; * NKH21
                  BEAVER.ADJ=0           ; * NKH21
               CASE CLIENT='00726' AND BILL.DATE GE "19002" AND TOT.WEIGHT GT "100"        ; * NKH23
                  BEAVER.ADJ=0           ; * NKH23
               CASE TOT.WEIGHT GT "200"
                  BEAVER.ADJ=0
            END CASE

            IF BEAVER.ADJ THEN
               IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "0" THEN
                  LINE+=1
                  WHY:=@(45,LINE):"BENCHMARK SUBTOTAL          ":NULL
                  WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
                  DIFF.LOG=0-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)
                  GTOT.BENCH.AMT=GTOT.CONTR.AMT+0
                  LINE+=1
                  WHY:=@(45,LINE):"ADJ! Parcel Rate no consulting":NULL
                  WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL
               END
            END
         END
      END
      LINE=LINE+1
      WHY:=@(3,LINE):'CONTRACT TOTAL':NULL
      WHY:=@(35,LINE):GTOT.CONTR.AMT'R26#8':NULL
      IF LOGISTICS THEN
         WHY:=@(45,LINE):'BENCHMARK TOTAL':NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
      END
      IF IOT = "T" THEN
         TP.AMT.TAB<TP.CNT> = GTOT.CONTR.AMT
      END

      RETURN

*******************************************************************
8000: *** Define VOUT Return Variable
*******************************************************************
*IF USER = 'NMEDDAUGH' THEN DEBUG
      VOUT=''
      VOUT<1>=ERROR
      VOUT<2>=AUDIT
      VOUT<3>=BILL.DATE
      VOUT<4>=TRANS.MODE
      VOUT<5>=PIECES
      VOUT<6>=TOT.WEIGHT
      VOUT<7>=AIR.MISC.CHARGE            ; * Not Used -> Passed Through
      VOUT<8>=GTOT.CONTR.AMT
      IF LOGISTICS THEN
         VOUT<9>=GTOT.BENCH.AMT
      END ELSE
         VOUT<9>=GTOT.CONTR.AMT
      END
      VOUT<10>=CARRIER
      VOUT<11>=CLIENT
      VOUT<12>=IOT
      VOUT<13,1>=ORIG.ZIP
      VOUT<13,2>=ORIG.CITY
      VOUT<13,3>=ORIG.STATE
      VOUT<14,1>=DEST.ZIP
      VOUT<14,2>=DEST.CITY
      VOUT<14,3>=DEST.STATE
      VOUT<17>=MISROUTE
      VOUT<18>=CLASS.WGT<1>              ; * Class Details (Mv)
      VOUT<19>=CLASS.WGT<2>              ; *  Weight Details (Mv)
      VOUT<20>=REDRAW.SCR                ; * Flag to tell calling program to redraw scr
      IF TESTING THEN
         CRT@(0,22):'TESTING Mode - Press <ENTER> to Continue: ':
         INPUT NUL:
      END
      VOUT<21>=MISC.CHG<1>
      VOUT<22>=MISC.CHG<2>
      VOUT<23>=MISC.CHG<3>
      VOUT<24>=WHY
      VOUT<28>=FAK
      VOUT<29>=ZIP.VOUT<2>
      VOUT<40>=DTL.VOUT<1>               ; * JMK06; * JMK07; * JMK08
      VOUT<41>=DTL.VOUT<2>               ; * JMK06; * JMK07; * JMK08
      VOUT<42>=DTL.VOUT<3>               ; * JMK06; * JMK07; * JMK08
      VOUT<43>=DTL.VOUT<4>               ; * JMK06; * JMK07; * JMK08
      VOUT<44>=DTL.VOUT<5>               ; * JMK06; * JMK07; * JMK08
      VOUT<45>=DTL.VOUT<6>               ; * JMK06; * JMK07; * JMK08
      VOUT<46>=CONTR.FSC.PARMS           ; * JMK12
      VOUT<47>=BENCH.FSC.PARMS           ; * JMK12
      VOUT<48>=AFS.FSC.PARMS             ; * JMK12
      VOUT<49>=TRANSIT.TIME              ; * JMK16
      VOUT<50>=ORIG.DIR.FLG              ; * JMK16
      VOUT<51>=DEST.DIR.FLG              ; * JMK16
      VOUT<52>=COMB.DIR.FLG              ; * JMK16
      VOUT<53>=ORIG.TERM.NAME            ; * JMK18
      VOUT<54>=ORIG.TERM.CODE            ; * JMK18
      VOUT<55>=ORIG.TERM.ADR1            ; * JMK18
      VOUT<56>=ORIG.TERM.ADR2            ; * JMK18
      VOUT<57>=ORIG.TERM.CITY            ; * JMK18
      VOUT<58>=ORIG.TERM.ST              ; * JMK18
      VOUT<59>=ORIG.TERM.ZIP             ; * JMK18
      VOUT<60>=ORIG.TERM.PHONE           ; * JMK18
      VOUT<61>=ORIG.TERM.TPHONE          ; * JMK18
      VOUT<62>=ORIG.TERM.FAX             ; * JMK18
      VOUT<63>=ORIG.TERM.EMAIL           ; * JMK18
      VOUT<64>=ORIG.TERM.CNAME           ; * JMK18
      VOUT<65>=ORIG.TERM.CTITLE          ; * JMK18
      VOUT<66>=DEST.TERM.NAME            ; * JMK18
      VOUT<67>=DEST.TERM.CODE            ; * JMK18
      VOUT<68>=DEST.TERM.ADR1            ; * JMK18
      VOUT<69>=DEST.TERM.ADR2            ; * JMK18
      VOUT<70>=DEST.TERM.CITY            ; * JMK18
      VOUT<71>=DEST.TERM.ST              ; * JMK18
      VOUT<72>=DEST.TERM.ZIP             ; * JMK18
      VOUT<73>=DEST.TERM.PHONE           ; * JMK18
      VOUT<74>=DEST.TERM.TPHONE          ; * JMK18
      VOUT<75>=DEST.TERM.FAX             ; * JMK18
      VOUT<76>=DEST.TERM.EMAIL           ; * JMK18
      VOUT<77>=DEST.TERM.CNAME           ; * JMK18
      VOUT<78>=DEST.TERM.CTITLE          ; * JMK18
      VOUT<79>=ACC.ARRAY<1>              ; * JMK27 - MV ACCESSORIAL CODES
      VOUT<80>=ACC.ARRAY<2>              ; * JMK27 - MV ACCESSORIAL CONTRACT AMTS
      VOUT<81>=ACC.ARRAY<3>              ; * JMK27 - MV ACCESSORIAL BENCH AMTS
      VOUT<82>=CARR.DATA.DATE            ; * JMK29
      VOUT<83>=AFSO.BENCH.FSC.PARMS      ; * JMK46
      VOUT<84>=TOT.CONTR.GROSS           ; * JMK52
      VOUT<85>=TOT.BENCH.GROSS           ; * JMK52
      VOUT<86>=DTL.VOUT<7>               ; * JMKXXX
      VOUT<87>=DTL.VOUT<8>
      VOUT<88>=DTL.VOUT<9>
      VOUT<89>=CONTR.BILL.TYPE           ; * JMK58
      VOUT<90>=BENCH.BILL.TYPE           ; * JMK58
      VOUT<91>=ERROR.ALREADY.SENT
      VOUT<92>=CONTR.TARIFF              ; * JMK62
      VOUT<93>=BENCH.TARIFF              ; * JMK62
*      VOUT<94>=CONTR.TIME.LINE           ; * JMK64 NKH08
*      VOUT<95>=BENCH.TIME.LINE           ; * JMK64 NKH08
      VOUT<96> = OCONV(CUR.BENCH.DISC,'MR2')
      VOUT<97>=LOWER(FB.DTL.VOUT)        ; * NKH06
      VOUT<98>=RWXL.SMC.ERROR            ; * NKH08
      VOUT<99>=RW.TARIFF                 ; * NKH11
      VOUT<100>=RW.EFF.DATE              ; * NKH11

      RETURN

*******************************************************************
8900: * Determine if need to get accessorials from FB.AUDIT.ACC
*******************************************************************
*      AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':CLIENT:'*':ROUTE.ZIP   ; * NKH16
      AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':AUDIT.CLIENT.ID:'*':ROUTE.ZIP       ; * NKH16
      READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
         AUDIT.ACC=1
      END
      IF AUDIT.ACC=0 THEN
*         AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':CLIENT:'*ALL' ; * NKH16
         AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':AUDIT.CLIENT.ID:'*ALL'           ; * NKH16
         READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
            AUDIT.ACC=1
         END
      END
      IF AUDIT.ACC=0 THEN
         AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*ALL*':ROUTE.ZIP
         READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
            AUDIT.ACC=1
         END
      END
      IF AUDIT.ACC=0 THEN
         AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*ALL*ALL'
         READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
            AUDIT.ACC=1
         END
      END
      IF AUDIT.ACC THEN
         LOCATE BILL.DATE IN AUDIT.ACC.REC<1> BY 'AR' SETTING EPOS THEN
            NULL
         END ELSE
            IF EPOS GT 1 THEN            ; *grb 8888
               EPOS-=1
            END
         END
         IF AUDIT.ACC.REC<1,EPOS> GE BILL.DATE THEN
            IF AUDIT.ACC.REC<2,EPOS> GE BILL.DATE OR AUDIT.ACC.REC<2,EPOS>='' THEN
               NULL
            END ELSE
               AUDIT.ACC=0
            END
         END
      END

      RETURN

*******************************************************************
8950: * Calculate the accessorial amount from FB.AUDIT.ACC for MISC.CHG ARRAY
*******************************************************************
* This does not use Include/Exclude flags and does not affect totals
* This is used to compare Contract to Benchmark in the accessorial table,
* building the MISC.CHG array and set initial values.
      AUDIT.ACC=0
      GOSUB 8900
      IF AUDIT.ACC.REC<2,EPOS> > BILL.DATE OR AUDIT.ACC.REC<2,EPOS>='' THEN
         CONTR.TYPE=AUDIT.ACC.REC<3,EPOS>
         CONTR.RATE=AUDIT.ACC.REC<4,EPOS>
         CONTR.MIN=AUDIT.ACC.REC<5,EPOS> ; CONTR.MIN.A = CONTR.MIN     ; * NKH12
         CONTR.MAX=AUDIT.ACC.REC<6,EPOS>
         CONTR.BASE=AUDIT.ACC.REC<7,EPOS>
         CONTR.FSC=AUDIT.ACC.REC<8,EPOS>
         CONTR.ACC=AUDIT.ACC.REC<9,EPOS>

         BEGIN CASE
            CASE CONTR.TYPE='P'
               CUR.CONTR.MISC.AMT=CONTR.RATE/100:'%'
               * Begin NKH12
*            CASE CONTR.TYPE='C'
*               CUR.CONTR.MISC.AMT=ICONV(SUM(CLASS.WGT<2>)*CONTR.RATE/100,'MR0')  ; * JMK48
*            CASE CONTR.TYPE='F'
*               CUR.CONTR.MISC.AMT=CONTR.RATE
               * End NKH12
            CASE CONTR.TYPE='A'
*               CUR.CONTR.MISC.AMT=MISC.CHG<2>   ; * NKH09  NKH13
               CUR.CONTR.MISC.AMT='ASK'  ; * NKH09 NKH13
            CASE 1
               CUR.CONTR.MISC.AMT=0      ; * NKH12
         END CASE
         * Begin NKH12
*         IF CONTR.MIN+0 # 0 THEN         ; * JMK48
*            IF CUR.CONTR.MISC.AMT < CONTR.MIN THEN           ; * JMK48
*               CUR.CONTR.MISC.AMT=CONTR.MIN        ; * JMK48
*            END                          ; * JMK48
*         END                             ; * JMK48
*         IF CONTR.MAX+0 # 0 THEN         ; * JMK48
*            IF CUR.CONTR.MISC.AMT > CONTR.MAX THEN           ; * JMK48
*               CUR.CONTR.MISC.AMT=CONTR.MAX        ; * JMK48
*            END                          ; * JMK48
*         END                             ; * JMK48
         * End NKH12

         BENCH.TYPE=AUDIT.ACC.REC<10,EPOS>
         BENCH.RATE=AUDIT.ACC.REC<11,EPOS>
         BENCH.MIN=AUDIT.ACC.REC<12,EPOS> ; BENCH.MIN.A = BENCH.MIN    ; * NKH12
         BENCH.MAX=AUDIT.ACC.REC<13,EPOS>
         BENCH.BASE=AUDIT.ACC.REC<14,EPOS>
         BENCH.FSC=AUDIT.ACC.REC<15,EPOS>
         BENCH.ACC=AUDIT.ACC.REC<16,EPOS>

         BEGIN CASE
            CASE BENCH.TYPE='P'
               CUR.BENCH.MISC.AMT=BENCH.RATE/100:'%'
               * Begin NKH12
*            CASE BENCH.TYPE='C'
*               CUR.BENCH.MISC.AMT=ICONV(SUM(CLASS.WGT<2>)*BENCH.RATE/100,'MR0')  ; * JMK48
*            CASE BENCH.TYPE='F'
*               CUR.BENCH.MISC.AMT=BENCH.RATE
               * End NKH12
            CASE BENCH.TYPE='A'
*               CUR.BENCH.MISC.AMT=MISC.CHG<3>   ; * NKH09  NKH13
               CUR.BENCH.MISC.AMT='ASK'  ; * NKH09 NKH13
            CASE 1
               CUR.BENCH.MISC.AMT=0      ; * NKH12
         END CASE
         * Begin NKH12
*         IF BENCH.MIN+0 # 0 THEN         ; * JMK48
*            IF CUR.BENCH.MISC.AMT < BENCH.MIN THEN           ; * JMK48
*               CUR.BENCH.MISC.AMT=BENCH.MIN        ; * JMK48
*            END                          ; * JMK48
*         END                             ; * JMK48
*         IF BENCH.MAX+0 # 0 THEN         ; * JMK48
*            IF CUR.BENCH.MISC.AMT > BENCH.MAX THEN           ; * JMK48
*               CUR.BENCH.MISC.AMT=BENCH.MAX        ; * JMK48
*            END                          ; * JMK48
*         END                             ; * JMK48
         * End NKH12
      END

      RETURN

*******************************************************************
8975: * Detail calculation after getting freight and FSC amounts
*******************************************************************
      AUDIT.ACC=0
      GOSUB 8900
      CONTR.TYPE=AUDIT.ACC.REC<3,EPOS>
      CONTR.RATE=AUDIT.ACC.REC<4,EPOS>
      CONTR.MIN=AUDIT.ACC.REC<5,EPOS>
      CONTR.MAX=AUDIT.ACC.REC<6,EPOS>
      CONTR.BASE=AUDIT.ACC.REC<7,EPOS>
      CONTR.FSC=AUDIT.ACC.REC<8,EPOS>
      CONTR.ACC=AUDIT.ACC.REC<9,EPOS>

      BEGIN CASE
         CASE CONTR.TYPE='P'
            AUD.CONTR.AMT=TOT.CONTR.AMT
            IF CONTR.BASE='G' THEN AUD.CONTR.AMT+=TOT.CONTR.DISC.AMT
            IF CONTR.FSC='I' THEN AUD.CONTR.AMT+=CONTR.FSC.AMT
*            CUR.CONTR.MISC.CHG=ICONV(AUD.CONTR.AMT*CONTR.RATE/10000,'MR0')   ; * NKH04
            CUR.CONTR.MISC.CHG = 0       ; * NKH04
         CASE CONTR.TYPE='C'
            CUR.CONTR.MISC.CHG=ICONV(TOT.WEIGHT*CONTR.RATE/100,'MR0')  ; * JMK48
         CASE CONTR.TYPE='F'
            CUR.CONTR.MISC.CHG=CONTR.RATE
         CASE CONTR.TYPE='A'
            CUR.CONTR.MISC.CHG=MISC.CHG<2,MISC.CHG.COUNT>    ; * NKH09   NKH13
*            CUR.CONTR.MISC.CHG='ASK'        ; * NKH09
         CASE 1
            CUR.CONTR.MISC.CHG=''
      END CASE

      IF CONTR.MIN+0 # 0 THEN            ; * JMK48
         IF CUR.CONTR.MISC.CHG < CONTR.MIN THEN    ; * JMK48
            CUR.CONTR.MISC.CHG=CONTR.MIN           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
      IF CONTR.MAX+0 # 0 THEN            ; * JMK48
         IF CUR.CONTR.MISC.CHG > CONTR.MAX THEN    ; * JMK48
            CUR.CONTR.MISC.CHG=CONTR.MAX           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48

      BENCH.TYPE=AUDIT.ACC.REC<10,EPOS>
      BENCH.RATE=AUDIT.ACC.REC<11,EPOS>
      BENCH.MIN=AUDIT.ACC.REC<12,EPOS>
      BENCH.MAX=AUDIT.ACC.REC<13,EPOS>
      BENCH.BASE=AUDIT.ACC.REC<14,EPOS>
      BENCH.FSC=AUDIT.ACC.REC<15,EPOS>
      BENCH.ACC=AUDIT.ACC.REC<16,EPOS>

      BEGIN CASE
         CASE BENCH.TYPE='P'
            AUD.BENCH.AMT=TOT.BENCH.AMT
            IF BENCH.BASE='G' THEN AUD.BENCH.AMT+=TOT.BENCH.DISC.AMT
            IF BENCH.FSC='I' THEN AUD.BENCH.AMT+=BENCH.FSC.AMT
*            CUR.BENCH.MISC.CHG=ICONV(AUD.BENCH.AMT*BENCH.RATE/10000,'MR0')   ; * NKH04
            CUR.BENCH.MISC.CHG = 0       ; * NKH04
         CASE BENCH.TYPE='C'
            CUR.BENCH.MISC.CHG=ICONV(TOT.WEIGHT*BENCH.RATE/100,'MR0')  ; * JMK48
         CASE BENCH.TYPE='F'
            CUR.BENCH.MISC.CHG=BENCH.RATE
         CASE BENCH.TYPE='A'
            CUR.BENCH.MISC.CHG=MISC.CHG<3,MISC.CHG.COUNT>    ; * NKH09   NKH13
*            CUR.BENCH.MISC.CHG='ASK'        ; * NKH09
         CASE 1
            CUR.BENCH.MISC.CHG=''
      END CASE

      IF BENCH.MIN+0 # 0 THEN            ; * JMK48
         IF CUR.BENCH.MISC.CHG < BENCH.MIN THEN    ; * JMK48
            CUR.BENCH.MISC.CHG=BENCH.MIN           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
      IF BENCH.MAX+0 # 0 THEN            ; * JMK48
         IF CUR.BENCH.MISC.CHG > BENCH.MAX THEN    ; * JMK48
            CUR.BENCH.MISC.CHG=BENCH.MAX           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48

      RETURN

*******************************************************************
BUILD.DETAIL.OUT:* NKH04
*******************************************************************
      WHY:=@(03,LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.MISC.CHG.DESC
      WHY:=@(35,LINE):CUR.CONTR.MISC.CHG'R26#8'
      NVAL=DCOUNT(DTL.VOUT<1>,@VM)       ; * JMK06
      DTL.VOUT<1,NVAL+1>=CUR.MISC.CHG.CODE         ; * JMK06
      DTL.VOUT<2,NVAL+1>=''              ; * JMK06
      DTL.VOUT<3,NVAL+1>=''              ; * JMK06
      DTL.VOUT<4,NVAL+1>=''              ; * JMK06
      DTL.VOUT<5,NVAL+1>=CUR.CONTR.MISC.CHG        ; * JMK06
      DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')        ; * JMK06
      DTL.VOUT<7,NVAL+1>=''
      DTL.VOUT<8,NVAL+1>=''
      DTL.VOUT<9,NVAL+1>=''
      IF LOGISTICS THEN
         WHY:=@(45,LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.MISC.CHG.DESC
         WHY:=@(73,LINE):CUR.BENCH.MISC.CHG'R26#7'
      END

      RETURN                             ; * NKH04

* Begin NKH04
*******************************************************************
BUILD.SAVE.LINE:
*******************************************************************
      S.CUR.CONTR.MISC.CHG = CUR.CONTR.MISC.CHG
      S.CUR.BENCH.MISC.CHG = CUR.BENCH.MISC.CHG
      IF CONTR.TYPE = 'P' THEN CUR.CONTR.MISC.CHG = 0
      IF CONTR.MIN.A = '' THEN CONTR.MIN.A = 0     ; * NKH24
      SAVE.CONTR<1,-1> = CUR.MISC.CHG.CODE
      SAVE.CONTR<3,-1> = CONTR.RATE
      SAVE.CONTR<4,-1> = CONTR.ACC
      SAVE.CONTR<5,-1> = CONTR.FSC
      SAVE.CONTR<7,-1> = CONTR.TYPE
      SAVE.CONTR<8,-1> = CUR.CONTR.MISC.CHG
      SAVE.CONTR<9,-1> = CONTR.MIN.A     ; * NKH12

      IF BENCH.TYPE = 'P' THEN CUR.BENCH.MISC.CHG = 0
      IF BENCH.MIN.A = '' THEN BENCH.MIN.A = 0     ; * NKH24
      SAVE.BENCH<1,-1> = CUR.MISC.CHG.CODE
      SAVE.BENCH<3,-1> = BENCH.RATE
      SAVE.BENCH<4,-1> = BENCH.ACC
      SAVE.BENCH<5,-1> = BENCH.FSC
      SAVE.BENCH<7,-1> = BENCH.TYPE
      SAVE.BENCH<8,-1> = CUR.BENCH.MISC.CHG
      SAVE.BENCH<9,-1> = BENCH.MIN.A     ; * NKH12

      SAVED.LINES = 1

      RETURN
* End NKH04

* Begin NKH08
*********************************************************************
CALL.TARIFF.DRIVER:
*********************************************************************
      IF TARIFF.ACT.NAME = 'AFS50002' OR TARIFF.ACT.NAME = 'AFS52502' THEN       ; * NKH19
         IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS52502' ELSE AFS.TARIFF.NAME='AFS50002'      ; * NKH19
         DINNATT=DCOUNT(DIN,@AM)
         FOR DINATT=1 TO DINNATT
            DIN<DINATT,7>=AFS.TARIFF.NAME
         NEXT DINATT
      END
      IF BENCH.TARIFF THEN
         CALL @BENCH.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)
         BENCH.DOUT = DOUT
      END ELSE
         CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)
         CONTR.DOUT = DOUT
      END
      BENCH.TARIFF = 0

      RETURN

* End NKH08
*******************************************************************
9000:
*******************************************************************
*CRT 'ERROR= ':ERROR;INPUT CONT
      IF SET.VOUT THEN GOSUB 8000

      * Begin GRB01
      VIN1=''
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "E"
      * CALL PROGTRACK(VIN1,VOUT1)
      * End GRB01
      RETURN
