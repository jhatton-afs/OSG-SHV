****************************************************
* Program name : FB.LTL.SETUP.3
* Author       : JIM T. ROW & DAVID FRIEND
* Date written : 06-29-1996
* Library      : FBBP
* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
*  LTL Auto Audit Setup Program
*
* Last updated by AFS (nmeddaugh) at 07:57:18 on 04/04/2019.
*
* Start modification history
*   DATE   | USER | COMMENT
* -------- | ---- | -------
* 10/10/96 |  JTR | MDLW95 Removed.  Not needed, AFS95 (Same Thing)
* 11/15/96 |  JTR | Started FB.AUDIT.1.1.NEW using old frame of FB.AUDIT.1.1
*  1/30/97 |  JTR | Fixed the SOUNDEX when finding only one name, that it is
*          |      | selected correctly.
*  1/30/97 |  JTR | Removed the warning (commented out) code when a user
*          |      | "EX" back out and will loose changes...
*  2/04/98 |  JTR | Damn.. This program will never die... Now adding coloring
*          |      | to help have fields standout..
*  7/08/02 | JMK01| Add Canada to Zip Table Selection
* 06/21/04 | JMK02| ADD ACCESS FOR MPACE
* 03/31/05 | JMK03| ADD CLIENT AND CARRIER FOR ARTCO BELL AND CRETE
* 02/17/06 | JMK04| EXPAND CANADIAN ACCESS ACROSS PROVINCES
* 080406 - JMK05 - ALLOW CANADA ZIPS FOR ROUTING ZIPS
* 083106 - JMK06 - BLOCK ACCESS TO SUBSTITUTE CARRIERS
* 092706 - JMK07 - RESTRICT ACCESS TO DELETION OF EFFECTIVE DATES
* 013108 - JMK08 - C080232 - Adding Joint Line Pricing to OLA
* 041808 - NPR01 - C080766 - Adding a date effective to OLA zip code substitution screen
* 111108 - JMK09 - C081905 - Allow multiple discounts on BM in OLA
* 050709 - JMK10 - C090585 - OLA change ; Copy effective date to multiple locations
* 061009 - JMK11 - T090764 - Cannot Audit! Shipping point of L9P has a flag of N and No table number
* 101810 - NPR02 - T100977 - Add option to Enter Notes one the Effective Date screen.
* 061312 - JMK12 - SysAid#2918 - OLA ENTRY SCREEN ON FRED JONES/R&L
* 061413 - JMK13 - SysAid#6240 - OLA Pricing Tables Access
* 081914 - JMK14 - SysAis#11538 - OLA ISSUE
* 100314 - DRF01 - SysAid 12611 - Gave CCOX access to run this program
* 102414 - DRF02 - SysAid 12949 - Changed the email from JMHill to 
*                  EDITeam
* 031615 - DRF03 - SysAid 15959 - Gave April the same access as Cynthia
* 091217 - GRB01 - ME6559 - add operator table
* 040419 - NKH01 - ACCU-316 Modified CREATE-FILE file sizes
*
****************************************************
      $INCLUDE PROG.ADMIN INC_OPTIONS
      $INCLUDE FILE.DEFS INC_CLIENTS
      $INCLUDE FILE.DEFS INC_FB.AUDIT
      $INCLUDE FILE.DEFS INC_ADDS60.CODES     ;* These require specific PROCOMM settings!

      TERM.TYPE=SYSTEM(7)
      BEGIN CASE
         CASE TERM.TYPE='REGENT60'
            RED.ON = TERM.ESC.SEQ:CHAR(TERM.BLINK)
            REV.RED.ON = TERM.ESC.SEQ:CHAR(TERM.REV+TERM.BLINK)
            REV.GRN.ON = TERM.ESC.SEQ:CHAR(TERM.REV)
            YEL.ON = TERM.ESC.SEQ:CHAR(TERM.REV+TERM.DIM)
            BLU.ON = TERM.ESC.SEQ:CHAR(TERM.REV+TERM.BLINK)
            TERM.NORM = TERM.ESC.SEQ:CHAR(TERM.NORMAL)
            PRT.SCN = CHAR(27):'P'
         CASE 1
            RED.ON = @(-5)
            REV.RED.ON = @(-13):@(-5)
            REV.GRN.ON = @(-13)
            YEL.ON = @(-13):@(-11)
            BLU.ON = @(-13):@(-11)
            TERM.NORM = @(-14):@(-6):@(-12)
            PRT.SCN = CHAR(27):']'
      END CASE

      EQU TRUE TO 1
      EQU FALSE TO 0
      EQU WRITE.DATA TO TRUE             ; * TRUE = Write data to appropriate files
      ; * FALSE = Don't write data.. In Test Mode
      EQU RESTRICT.ACCESS TO TRUE

      EQU PCMILLER.READ.FILE TO 1        ; * Used in Attr 4

      EQU LTLALL TO "LTLALL"             ; * Make sure to make changes in FB.AUDIT.1
      EQU YES TO "Y"
      EQU NO TO "N"
      EQU PARTIAL TO "*"

      EQU CLIENT.DISABLE.FILE TO FBA.DISABLE       ; * Make sure to make changes in FB.AUDIT.1

*
* Highlighting Effects
*
      EQU REVON TO REV.GRN.ON            ; * Reverse Text ON
      EQU REVOFF TO TERM.NORM            ; * Reverse Text OFF
      EQU PRINT.SCREEN TO PRT.SCN

      EQU DISABLED.MSG TO '[':REVON:'DISABLED':REVOFF:']'
      EQU ENABLED.MSG TO '[ENABLED ]'

*
* Menu option Flags
*
      EQU DISABLED TO 0                  ; * Program set! Pgrmr should not use these!
      EQU ENABLED TO 100                 ; * Program set! Pgrmr should not use these!

*
* Menu options flags...Programmer uses these...
*
      EQU DISABLE TO 100                 ; * Will Clear line and disable if not disabled
      EQU ENABLE TO 200                  ; * Will Enable and Draw if not enabled
      EQU REFRESH TO 300                 ; * Will Refresh if Enabled
      EQU CLEAR TO 400                   ; * Will Clear line and enable
      EQU INIT TO 500                    ; * Will Zero the variables for that line

*
* Menu options - Change the EQUates to
* change the screen option numbers.  Add more
* equates for more options....
*
      EQU OPT.CLIENT TO 1                ; * <-----+ These options are locked
      EQU OPT.CARRIER TO 2               ; * <-----| in the "items have changed"
      EQU OPT.EFF.DATE TO 3              ; * <-----+
      EQU OPT.SHIP.OUT TO 4
      EQU OPT.EFF.DATE.STATUS TO 5
      EQU OPT.SHIP.OUT.STATUS TO 6
      EQU NUM.OPTIONS TO 4

      EQU FBA.EFF.DT.NOTES TO 30         ; * NPR02 - Should perhaps be in FILE.DEFS INC_FB.AUDIT
      EQU FBA.EFF.DT.NOTES.USER.DT TO 31           ; * NPR02 - Should perhaps be in FILE.DEFS INC_FB.AUDIT

*
* HELP Box display routine Coordinates
*
      EQU HLP.X TO 0
      EQU HLP.Y TO 3
      EQU HLP.W TO 30
      EQU HLP.H TO 18

*
* Menu Options...
*
      OPTIONS = 0
      OPTIONS.STATE=0
      AUTO.OPTION = ''
      AUTO.FAILURE = ''
      EFF.DATE.PG=1                      ; * JMK12

*
* Initialize app variables
*
      PROMPT''
      PROG.NAME='FB.LTL.SETUP.3'
      PROG.DESC='NEW LTL Audit Setup'
      PACK.NAME='LTL Audit Setup'
      CO.NAME='AFS Logistics, LLC'
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'FB.LTL.SETUP.3' ; UPL.VOUT = ''           ; * NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
  **    PORT.NUM = SYSTEM(19)              ; * Port user is sitting on
*     USER.NAME = OCONV(PORT.NUM,'MCU')    ;* User's Name
      CALL GET.USER.NEW(USER.NAME,PORT.NUM)
      USER.NAME = OCONV(USER.NAME,'MCU')
      * Begin GRB01
     OPEN '','OPERATOR' TO F.OP ELSE CALL OPEN.ABORT("OPERATOR",PROG.NAME)      ; * GRB01   
        READV OP.FLG FROM F.OP,USER.NAME,52 ELSE
         OP.FLG = "N"
      END
      IF OP.FLG = "Y" THEN
        
    ****  BEGIN CASE
*
* Authorized users
*
    ****     CASE USER.NAME = 'BRIAN'
      ****    CASE USER.NAME = 'DAVID'
      ****    CASE USER.NAME = 'PBASS'
       ****   CASE USER.NAME = 'GBINO'
       ****   CASE USER.NAME = 'AHICKS'       ; * TICKET 3092/ - DRF 07/06/12
       ****   CASE USER.NAME = 'CCOX'      ; * DRF01
END ELSE
* Restrict everyone else
*
   ****      CASE 1
            SUBJ="Unauthorized OLA Access Attempt by ":USER.NAME
            TEXT=''
            TEXT<1,-1>=USER.NAME:' ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):' ':PROG.NAME
            TEXT<1,-1>='User ':USER.NAME:' tried to access LTL Client Audit Setup'
            TEXT<1,-1>="(This user's name was not included in the program to allow access)"
            MVIN=''
            MVIN<1>='SWinstead@afs.net'
****            MVIN<2>='RHollifield@afs.net'
            MVIN<4>='AFS'
            MVIN<5>=SUBJ
            MVIN<6>=TEXT
            CALL SENDMAIL(MVIN,MVOUT)
            CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
            CALL FB.PRINT.CENT(1,80,14,'Access Denied! See the Logistics Manager for Access')
            CALL ELINE('')
            STOP
          END
  ***    END CASE
  * End GRB01
*
      ERR.MSG = ''
      WIDTH = 80
      CTR = INT(WIDTH/2)
      PAGE.SIZE = 15
*
* Init variables
*
      CLIENT.NAME='' ; CLIENT.ID=0 ; NEW.CLIENT.ID=0
      CLIENT.ENABLED = FALSE
      MAT CLIENT.REC = ''
      DIM TCLIENT.REC(CLIENT.REC.SIZE)
      MAT TCLIENT.REC = ''
      CARRIER.NAME='' ; CARRIER.ID=0 ; CARRIER.CITY='' ; CARRIER.STATE=''
      CARRIER.REC=''
      NUM.ZIPS = 0
      CDN.ZIP.ARRAY=''                   ; * JMK04
      CDN.ZIPS=''                        ; * JMK04
      CDN.ZIP.ARRAY<1,-1>='AB'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='T0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='T9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='BC'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='V0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='V9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='MB'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='R0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='R9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='NB'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='E0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='E9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='NF'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='A0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='A9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='NS'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='B0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='B9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='NT'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='X0E'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='X1A'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='NU'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='X0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='X0C'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='ON'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='K0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='P9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='PE'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='C0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='C9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='QC'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='G0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='J9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='SK'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='S0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='S9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      CDN.ZIP.ARRAY<1,-1>='YT'           ; * JMK04
      CDN.ZIP.ARRAY<2,-1>='Y0A'          ; * JMK04
      CDN.ZIP.ARRAY<3,-1>='Y9Z'          ; * JMK04
      CDN.ZIPS<1,-1>=FALSE               ; * JMK04
      CDN.ZIPS<2,-1>=''                  ; * JMK04

      JL.ZIP.ARRAY=''                    ; * JMK08
      JL.ZIPS=''                         ; * JMK08
      JL.ZIP.ARRAY<1,-1>='JL'            ; * JMK08
      JL.ZIP.ARRAY<2,-1>='ZZZ'           ; * JMK08 ; * JMK11
      JL.ZIP.ARRAY<3,-1>='ZZZ'           ; * JMK08 ; * JMK11
      JL.ZIPS<1,-1>=FALSE                ; * JMK08
      JL.ZIPS<2,-1>=''                   ; * JMK08

      DEL.CARRIER.ID = ''
      DEL.ZIP = ''
      DEL.DATE = ''
      DEL.IO = ''

      AZIPS.REC = ''                     ; * General Work variable for Inbound and Outbound zips
      PACK.ZIPS = ''                     ; * Pack Zip ranges by state.  Only used for Reports..
      AZIPS.IN.REC = ''                  ; * Inbound Audit Zip Reocrd from FB.AUDIT.ZIPS
      ORG.AZIPS.IN.REC = ''              ; * Inbound Audit Zip Reocrd from FB.AUDIT.ZIPS
      AZIPS.OUT.REC = ''                 ; * Outbound Audit Zip Record from FB.AUDIT.ZIPS
      ORG.AZIPS.OUT.REC = ''             ; * Outbound Audit Zip Record from FB.AUDIT.ZIPS
      ALL.ZIPS = ''                      ; * Temp Storage for Consolidated Zips
      SUB.ZIPS = ''                      ; * Array of Sub Zips for ROUTE.ZIP
      AUDIT.DATE.REC = ''                     ; * Carrier Audit Rec from FB.AUDIT
      ORG.AUDIT.DATE.REC = ''                 ; * Carrier Audit Rec from FB.AUDIT
      EFF.DT.NOTES = ''                  ; * Notes for Effective dates             ; * NPR02
      EFF.DT.NOTES.USER.DT = ''          ; * Notes for Effective dates             ; * NPR02

*     DATE.POS = 0                       ; * Extraction/Insertion Variable
*     DATA.LINE = 0                      ; * Table Extraction/Insert temp storage
      YN.ANSWER=''
      GOSUB CLEAR.VARIABLES
      OPTIONS<OPT.CLIENT> = REFRESH
      GOSUB INIT.HELP

*
* Init support routines
*
      ASK.FN.MSG='' ; ASK.FN.MASK=''
      FIND.LOCKED.NAME = ''
      FAILURE = FALSE
      EXIT.IT = FALSE
      BOTH.FLAG=0
      REVERSE.CODE=0
      UNDO.ZIP=''
      UNDO.STATE=''
*
* Temp storage User Entry variables
*
      NEW.CARRIER.ID = 0
      NEW.CLIENT.ID = 0
      NEW.ROUTE.ZIP = 0
      NEW.BEG.EFF.DATE = 0
      NEW.END.EFF.DATE = 0
      EFF.DATE.ENABLED = TRUE
      ROUTE.ZIP.ENABLED = FALSE
      STATE.NUM = 0
      SRC.CARRIER.ID=0 ; DST.CARRIER.ID=0 ;

      GOSUB INIT.SCREEN

*
* Check for Restricted Access
*
      IF RESTRICT.ACCESS THEN

      END
*             Open general files


      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN 'DICT','CLIENTS' TO F.DICT.CLIENTS ELSE
         CALL OPEN.ABORT("DICT CLIENTS",PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT("CARRIERS",PROG.NAME)
      END
      OPEN 'DICT','CARRIERS' TO F.DICT ELSE
         CALL OPEN.ABORT("DICT CARRIERS",PROG.NAME)
      END
      OPEN '','FB.OVERRIDE' TO F.OVERRIDE ELSE
         CALL OPEN.ABORT('FB.OVERRIDE',PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','AR.SLSMAN.1000.1' TO F.SLSMAN ELSE
         CALL OPEN.ABORT('AR.SLSMAN.1000.1',PROG.NAME)
      END
      OPEN '','FB.CAR.CTRL' TO F.CAR.CTRL ELSE
         CALL OPEN.ABORT("FB.CAR.CTRL",PROG.NAME)
      END
      READ OVERRIDE.FIELDS FROM F.TABLES,'OVERRIDE.FIELDS' ELSE OVERRIDE.FIELDS=''
      OPEN '','ZIPS.CODES' TO F.ZIPS THEN
         READ STATE.ZIP.REC FROM F.ZIPS,'3.DIGIT' THEN
*
* Remove any ZERO zip codes
*
            NUM.ZIPS = DCOUNT(STATE.ZIP.REC<1>, @VM)
            FOR X = 1 TO NUM.ZIPS
               IF STATE.ZIP.REC<2,X> = 0 THEN
                  DEL STATE.ZIP.REC<1,X>
                  DEL STATE.ZIP.REC<2,X>
                  DEL STATE.ZIP.REC<3,X>
                  X=X-1                  ; * JMK01
                  NUM.ZIPS=NUM.ZIPS-1    ; * JMK01
*                 CALL ELINE('WARNING! - ZERO ZIP REMOVED')
               END
            NEXT X
            INVALID.STATE=''
            INVALID.STATE<1>='AK'
            INVALID.STATE<2>='GV'
            INVALID.STATE<3>='HI'
            INVALID.STATE<4>='CD'
            INVALID.STATE<5>='MX'
            INVALID.STATE<6>='EX'
            INVALID.STATE<7>='IM'
            NUM.OF.INVALID.STATE=DCOUNT(INVALID.STATE,@AM)
            FOR I = 1 TO NUM.OF.INVALID.STATE
               LOCATE INVALID.STATE<I> IN STATE.ZIP.REC<1> SETTING X THEN
                  DEL STATE.ZIP.REC<1,X>
                  DEL STATE.ZIP.REC<2,X>
                  DEL STATE.ZIP.REC<3,X>
               END
            NEXT I

            STATE.ZIP.REC<1,-1>=CDN.ZIP.ARRAY<1>   ; * JMK04
            STATE.ZIP.REC<2,-1>=CDN.ZIP.ARRAY<2>   ; * JMK04
            STATE.ZIP.REC<3,-1>=CDN.ZIP.ARRAY<3>   ; * JMK04
            STATE.ZIP.REC<1,-1>=JL.ZIP.ARRAY<1>    ; * JMK08
            STATE.ZIP.REC<2,-1>=JL.ZIP.ARRAY<2>    ; * JMK08
            STATE.ZIP.REC<3,-1>=JL.ZIP.ARRAY<3>    ; * JMK08
*
* Count number of legit States (zip code ranges) avail.
*
            NUM.ZIPS = DCOUNT(STATE.ZIP.REC<1>, @VM)
         END ELSE
            CALL OPEN.ABORT("READ ZIPS.CODES",PROG.NAME)
         END
      END ELSE
         CALL OPEN.ABORT("ZIPS.CODES",PROG.NAME)
      END

      OPEN 'PCIN' TO F.PCIN ELSE
         CALL OPEN.ABORT("PCIN",PROG.NAME)
      END
      OPEN 'PCOUT' TO F.PCOUT ELSE
         CALL OPEN.ABORT("PCOUT",PROG.NAME)
      END
      OPEN 'FB.MILEAGE' TO F.MILEAGE ELSE
         CALL OPEN.ABORT("FB.MILEAGE", PROG.NAME)
      END
      OPEN '','FB.CUT.BACKS' TO F.CUT.BACKS ELSE
         CALL OPEN.ABORT("FB.CUT.BACKS",PROG.NAME)
      END
      CALL CHANNEL(CH.NUM)

      CLIENT.ID = ''
      OPTIONS<OPT.CLIENT>=REFRESH
      OPTIONS.STATE<1>=ENABLED
*                Main processing

      GOSUB DSP.ENTRY.SCN
      SAVE.IT = TRUE
      EXIT.IT = FALSE
****************************************************
ENTER.CLIENT: ***
****************************************************
      GOSUB INPUT.CLIENT
      OPTIONS<OPT.CLIENT>=REFRESH
      IF NOT(FAILURE) AND NEW.CLIENT.ID # CLIENT.ID THEN
         IF CLIENT.ID > 0 THEN
            GOSUB SAVE.AUDIT.DATE.REC
            GOSUB SAVE.SHIPPING.POINTS
         END
         CLIENT.ID = NEW.CLIENT.ID
         GOSUB LOAD.CLIENT.DESC
         GOSUB CLIENT.ID.CHANGED
      END
      IF FAILURE OR EXIT.IT THEN STOP
      IF YN.ANSWER='N' THEN
         YN.ANSWER=''
         NEW.CLIENT.ID=0
         GOTO ENTER.CLIENT
      END
      GOSUB REFRESH.DISPLAY

****************************************************
ENTER.CARRIER: ***
****************************************************
      GOSUB INPUT.CARRIER
      IF AUTO.OPTION AND FAILURE AND NOT(EXIT.IT) THEN
         AUTO.OPTION = OPT.CLIENT
         AUTO.FAILURE = TRUE
      END
      OPTIONS<OPT.CARRIER>=REFRESH
      IF NOT(FAILURE) AND NEW.CARRIER.ID # CARRIER.ID THEN
         CARRIER.ID = NEW.CARRIER.ID
         GOSUB LOAD.CARRIER.DESC
         GOSUB CARRIER.ID.CHANGED
      END
      IF EXIT.IT THEN STOP
      IF FAILURE AND QI='X' THEN
         OPTIONS<OPT.CARRIER>=CLEAR
         GOSUB REFRESH.DISPLAY
         GOTO ENTER.CLIENT
      END
      IF YN.ANSWER='N' THEN
         YN.ANSWER=''
         CARRIER.ID=''
         GOTO ENTER.CARRIER
      END
      GOSUB REFRESH.DISPLAY
      GOSUB DISPLAY.OVERRIDES
      LOOP
250:
         GOSUB REFRESH.DISPLAY
         CRT @(0,22):'Enter Selection Number :'
         HELP = "OPTIONS: #=Menu Option [R]edraw Screen [X]=Exit Program"
         MASK = '#'

         AUTO.OPTION = ''

         IF AUTO.OPTION THEN
            QI = AUTO.OPTION
            AUTO.FAILURE = FALSE
         END ELSE
            CALL GEN.IN(24,22,MASK,'',Q,0,6,'','',2,24,22,1,QI,HELP,0,23)
            QI = OCONV(QI,'MCU')
         END
         CRT @(0,22):@(-4)

300:
         BEGIN CASE
*
* EXit program
*
            CASE QI = '' OR QI='X'
               EXIT.IT = TRUE

            CASE QI='EX'
               IF CARRIER.ID THEN
                  GOSUB ASK.ABOUT.QUITTING
               END ELSE
                  EXIT.IT = TRUE
               END
               IF EXIT.IT THEN
                  SAVE.IT = FALSE
               END

*
* Print screen...
*
*           CASE QI = 'P'
*               CRT PRINT.SCREEN:

*
* Clear/Redraw screen...
*
            CASE QI = 'R'
               GOSUB DSP.ENTRY.SCN
               FOR Y = 1 TO NUM.OPTIONS
                  IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
               NEXT Y

*
* Handle Menu Options
*
            CASE NUM(QI) AND QI<=NUM.OPTIONS AND QI>0
               IF OPTIONS.STATE<QI> = ENABLED THEN
                  BEGIN CASE

* Client Number/Name

                     CASE QI=OPT.CLIENT
                        GOSUB INPUT.CLIENT
                        OPTIONS<OPT.CLIENT>=REFRESH
                        IF NOT(FAILURE) AND NEW.CLIENT.ID # CLIENT.ID THEN
                           IF CLIENT.ID > 0 THEN
                              GOSUB SAVE.AUDIT.DATE.REC
                              GOSUB SAVE.SHIPPING.POINTS
                           END
                           CLIENT.ID = NEW.CLIENT.ID
                           GOSUB LOAD.CLIENT.DESC
                           GOSUB CLIENT.ID.CHANGED
                           GOSUB DISPLAY.OVERRIDES
                        END

* Carrier Number/Name

                     CASE QI=OPT.CARRIER
                        GOSUB INPUT.CARRIER
                        IF AUTO.OPTION AND FAILURE AND NOT(EXIT.IT) THEN
                           AUTO.OPTION = OPT.CLIENT
                           AUTO.FAILURE = TRUE
                        END
                        OPTIONS<OPT.CARRIER>=REFRESH
                        IF NOT(FAILURE) AND NEW.CARRIER.ID # CARRIER.ID THEN
                           IF CARRIER.ID > 0 THEN
                              GOSUB SAVE.AUDIT.DATE.REC
                              GOSUB SAVE.SHIPPING.POINTS
                           END
                           CARRIER.ID = NEW.CARRIER.ID
                           GOSUB LOAD.CARRIER.DESC
                           GOSUB CARRIER.ID.CHANGED
                           GOSUB DISPLAY.OVERRIDES
                        END

* Effective Dates
                     CASE QI=OPT.EFF.DATE
                        GOSUB INPUT.EFF.DATE
                        IF AUTO.OPTION AND FAILURE AND NOT(EXIT.IT) THEN
                           AUTO.OPTION = OPT.CARRIER
                           AUTO.FAILURE = TRUE
                        END
                        OPTIONS<OPT.EFF.DATE>=REFRESH
                        IF NOT(EXIT.IT) AND DATE.CHANGED THEN
                           IF NEW.BEG.EFF.DATE # BEG.EFF.DATE THEN
                              IF SAVE.EFF.DATE AND BEG.EFF.DATE THEN
                                 GOSUB SAVE.SHIPPING.POINTS
                              END
                              BEG.EFF.DATE = NEW.BEG.EFF.DATE
                              END.EFF.DATE = NEW.END.EFF.DATE
                           END
                           GOSUB BEG.EFF.DATE.CHANGED
                        END
* Valid Shipping Points - Inbound

* Valid Shipping Points - Outbound

                     CASE QI=OPT.SHIP.OUT
                        IF CLIENT.ID='99000' THEN
                           CALL ELINE('Cannot Setup Outbound Shipping For Third Party Carrier Coverage')
                        END ELSE
                           IF AZIPS.OUT.REC<1>='' AND AZIPS.IN.REC<1>#'' THEN
                              YN.MSG = 'Outbound has not been setup! Do you wish to copy inbound to outbound? '
                              YN.MASK = 'N '
                              GOSUB ASK.Y.OR.N
                              IF YN.ANSWER = 'Y' THEN
                                 AZIPS.OUT.REC = AZIPS.IN.REC
                              END
                           END
                           IF AZIPS.OUT.REC<1>='' THEN
                              YN.MSG = 'Regional Shipping has not been setup! Do you wish to set it up now? '
                              YN.MASK = 'N '
                              GOSUB ASK.Y.OR.N
                              IF YN.ANSWER = 'Y' THEN
                                 AZIPS.OUT.REC<1> = FBA.DISABLE
                              END
                           END
                           IF AZIPS.OUT.REC<1> = '' THEN

                           END ELSE
                              AZIPS.REC = AZIPS.OUT.REC
                              ZIP.VAR=ROUTE.ZIP
                              CALL FB.READ.ZIP(ZIP.VAR, DEST.CITY, DEST.STATE)
                              TEMP = ROUTE.ZIP:' ':DEST.CITY:', ':DEST.STATE
                              TABLE.HEADING=TEMP'L#25'
                              TABLE.HEADING:=' Valid Shipping Points - OUTBOUND'
                              TABLE.HEADING:='    Eff Date ':BEG.EFF.DATE'D2/'
                              PRINT.TABLE.HEADING = ' Valid Shipping Points - OUTBOUND '
                              BEGIN CASE
                                 CASE AZIPS.OUT.REC = ''
                                    PRINT.TABLE.STATUS = 'Not setup'
                                 CASE AZIPS.OUT.REC<1> = FBA.ENABLE
                                    PRINT.TABLE.STATUS = 'Enabled'
                                 CASE 1
                                    PRINT.TABLE.STATUS = 'Disabled'
                              END CASE
                              IF AZIPS.OUT.REC<6>#'' THEN
                                 NUM.OF.ITEM=DCOUNT(AZIPS.OUT.REC<6>,@VM)
                                 FOOTER="Last Updated by ":AZIPS.OUT.REC<6,NUM.OF.ITEM>'MCT':" On ":AZIPS.OUT.REC<7,NUM.OF.ITEM>'D2/':" At ":OCONV(AZIPS.OUT.REC<8,NUM.OF.ITEM>,'MTHS')
                              END ELSE
                                 FOOTER=''
                              END
                              GOSUB INPUT.SHIPPING.POINTS
                              AZIPS.OUT.REC=AZIPS.REC

                           END
                           OPTIONS<OPT.SHIP.OUT>=REFRESH
                        END
* Eff Date Status

                     CASE QI=OPT.EFF.DATE.STATUS
                        GOSUB GET.EFF.DATE.STATUS
                        BEGIN CASE
                           CASE EFF.DATE.ENABLED
                              GOSUB DISABLE.EFF.DATE
                           CASE 1
                              GOSUB ENABLE.EFF.DATE
                        END CASE
                        OPTIONS<OPT.EFF.DATE.STATUS>=REFRESH

* Outbound Shipping Point Status

                     CASE QI=OPT.SHIP.OUT.STATUS
                        BEGIN CASE
                           CASE AZIPS.OUT.REC<1> = FBA.ENABLE
                              AZIPS.OUT.REC<1> = FBA.DISABLE
                              OPTIONS<OPT.SHIP.OUT.STATUS>=REFRESH
                           CASE AZIPS.OUT.REC<1> = FBA.DISABLE
                              AZIPS.OUT.REC<1> = FBA.ENABLE
                              OPTIONS<OPT.SHIP.OUT.STATUS>=REFRESH
                        END CASE
                  END CASE
               END ELSE
                  CALL ELINE('Selected option is disabled.')
               END
*
* Idiot input detector....
*
            CASE 1
               CALL ELINE('Invalid option, Try Again.')
               GOTO 250
         END CASE
         IF NOT(AUTO.FAILURE) THEN AUTO.OPTION = ''
      WHILE NOT(EXIT.IT) DO
      REPEAT
*
* Make sure everything is saved
*
      IF SAVE.IT THEN GOSUB SAVE.FILES

      STOP

****************************************************
INPUT.SHIPPING.POINTS:
****************************************************
*
* Init. return value varables
*
      NEW.SHIPPING.POINTS = 0
      FAILURE=FALSE
      SCR.PG=1                           ; * JMK04
*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN
      CBVIN=''
      CBVIN<1>=CLIENT.ID
      CALL CLIENT.BLOCK(CBVIN,CBVOUT,F.CAR.CTRL)
      CRT @(25,0):CBVOUT<1>:CLIENT.ID'L#5':' ':CL.NAME'L#20':@(-6)
      CRT @(25,1):CARRIER.ID'L#5':' ':CARRIER.NAME'L#20'
*
* Setup the Zip/State Tables and Flags...
*
      CRT @(0,20):'Loading Zip/Postal Code Information...':
      GOSUB EXTRACT.AUDIT.ZIPS
      GOSUB SETUP.AUDIT.ZIPS
ISP.1:
      GOSUB LIST.STATES
      UNDO.STATE=ALL.ZIPS

ISP.2:
      IF EXIT.IT THEN GOTO ISP.EXIT
      CRT @(0,22):'Enter Option :':@(-4)
      HELP = "[E]nter [C]hange [R]everse [PRINT]-Print [F]wd [B]ck"    ; * JMK04
      IF UNDO.STATE#ALL.ZIPS THEN
         HELP:=" [U]ndo command"
      END
      PART.STATE=0
      MASK = 'X '

      CALL GEN.IN(14,22,MASK,'',Q,0,6,'','',2,14,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ISP.2

         CASE QI = 'X' OR QI = ''
         CASE QI = 'F'                   ; * JMK04
            SCR.PG=2                     ; * JMK04
            GOTO ISP.1                   ; * JMK04
         CASE QI = 'B'                   ; * JMK04
            SCR.PG=1                     ; * JMK04
            GOTO ISP.1                   ; * JMK04
         CASE QI = 'PRINT'
            GOSUB PRINT.STATES
            GOTO ISP.2
         CASE QI = 'U' AND UNDO.STATE#ALL.ZIPS
            ALL.ZIPS=UNDO.STATE
            START.POS=0
            STOP.POS=0
            GOSUB GET.ZIP.FILE
            GOTO ISP.2
         CASE QI = 'E'
            FAILURE=FALSE
            UNDO.STATE=ALL.ZIPS
ENTER.STATE: ***
            GOSUB GET.STATE.RANGE
            IF FAILURE THEN GOTO ISP.2
            STATE.NUM=START.POS
            LOOP
*
* Edit current State Number
*
               GOSUB EDIT.STATES
*
* Did user ABORT?
*
               IF NOT(FAILURE) THEN
                  IF STATE.NUM+1 <= STOP.POS THEN
                     STATE.NUM+=1
                  END ELSE
                     GOTO ENTER.STATE
                  END
               END ELSE
                  FAILURE=FALSE
                  GOTO ENTER.STATE
               END
            WHILE NOT(FAILURE)
            REPEAT
            GOTO ENTER.STATE

         CASE QI='C'
            REVERSE.CODE=0
            FAILURE=FALSE
            UNDO.STATE=ALL.ZIPS
CHANGE.STATE: ***
            GOSUB GET.CHANGE.INFO
            UNDO.ZIP=''
            IF FAILURE THEN
               GOTO ISP.2
            END
CHANGE.STATE.RANGE: ***
            GOSUB GET.STATE.RANGE
            IF FAILURE THEN
               FAILURE=FALSE
               GOTO CHANGE.STATE
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO CHANGE.STATE.RANGE
         CASE QI='R'
            REVERSE.CODE=1
            FAILURE=FALSE
            UNDO.STATE=ALL.ZIPS
REVERSE.STATE: ***
            GOSUB GET.CHANGE.INFO
            UNDO.ZIP=''
            IF FAILURE THEN
               GOTO ISP.2
            END
REVERSE.STATE.RANGE: ***
            GOSUB GET.STATE.RANGE
            IF FAILURE THEN
               FAILURE=FALSE
               GOTO REVERSE.STATE
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO REVERSE.STATE.RANGE

         CASE NUM(QI)
            STATE.NUM = QI'R%3'
            IF STATE.NUM < 1 OR STATE.NUM > NUM.ZIPS THEN
               CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.ZIPS)
            END ELSE
               UNDO.STATE=ALL.ZIPS
               GOSUB EDIT.STATES
            END
            GOTO ISP.2

         CASE 1
*
* Attempt to locate string entered as a state ID
*
            LOCATE QI IN STATE.ZIP.REC<1> SETTING WHERE THEN
               STATE.NUM = WHERE'R%3'
               IF STATE.NUM < 1 OR STATE.NUM > NUM.ZIPS THEN
                  CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.ZIPS)
               END ELSE
                  UNDO.STATE=ALL.ZIPS
                  GOSUB EDIT.STATES
               END
            END ELSE
               CALL ELINE('Invalid response. Try again.')
            END
            GOTO ISP.2
      END CASE
****************************************************
ISP.EXIT:* COMMON EXIT POINT - Do any necessary clean ups or screen region marking
****************************************************
*
* Rebuild Audit Zip in AUDIT.REC<> - Used to update screen info.
*
      IF NOT(EXIT.IT) THEN GOSUB BUILD.AUDIT.ZIPS
*
* Redraw entire screen contents
*
      GOSUB DSP.ENTRY.SCN
      FOR Y = 1 TO NUM.OPTIONS
         IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
      NEXT Y
      RETURN

****************************************************
ASK.ABOUT.SET.ALL:
****************************************************
      FAILURE = FALSE

AASA.1:
*
* Ask for the flag to set all the tables to
*
      YN.MSG = "Set all the Tables to 'Y' or 'N' ? :"
      YN.MASK = '  '
      GOSUB ASK.Y.OR.N
      BEGIN CASE
         CASE YN.ANSWER='X'
            FAILURE=TRUE
            RETURN
         CASE YN.ANSWER='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO AASA.1
            END
         CASE 1
            SA.FLAG = YN.ANSWER
      END CASE
AASA.2:
*
* Ask for the Table Code to use
*
      AFN.MSG = 'What Table Number to set all entries to? '
      IF SA.FLAG = 'N' THEN
         AFN.ALLOW.NULL = TRUE
         AFN.MSG:="''=None"
      END
      AFN.ALLOW.NULL =(YN.ANSWER = 'N')
      AFN.MSG:=':'
      AFN.MIN =0
      AFN.MAX =9                         ; * This needs to be able to handle alpha's
      AFN.MASK='  '
      GOSUB ASK.FOR.NUM
      BEGIN CASE
         CASE AFN.ANSWER='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO AASA.2
            END
         CASE AFN.ANSWER='X'
            GOTO AASA.1
         CASE 1
            SA.TABLE = AFN.ANSWER
      END CASE

AASA.3:
*
* Confirm changes with the user
*
      YN.MSG = 'Are you sure you wish to set all tables to "':SA.FLAG:'"'
      IF SA.TABLE THEN
         YN.MSG:= ' and "':SA.TABLE:'"'
      END
      YN.MSG:=' ? '
      YN.MASK = 'Y '
      GOSUB ASK.Y.OR.N
      BEGIN CASE
         CASE YN.ANSWER='X'
            GOTO AASA.2
         CASE YN.ANSWER='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO AASA.3
            END
         CASE YN.ANSWER # 'Y'
            FAILURE = TRUE
      END CASE

      RETURN

****************************************************
GET.CHANGE.INFO: ***
****************************************************
* RETURNS:  SA.FLAG   - Source Flag to change
*           SA.FLAG2  - Dest Flag to change Source Flag to.
*           SA.TABLE  - Source Table to change
*           SA.TABLE2 - Dest Table to change Source Table to.
*           FAILURE  - User Does not want to set up tables
*           EXIT.IT  - User wants to exit program
*
      CRT @(0,19):STR('-',17):'SOURCE':STR('-',13):'DEST':STR('-',18)
      IF REVERSE.CODE THEN
         CRT @(36,19):"REVERSE"
      END ELSE
         CRT @(36,19):"CHANGE-"
      END
      CRT @(43,19):STR('-',15):'DEST':STR('-',17)
      CRT @(0,20):"Flag:     "
      CRT @(0,20):"Flag:               Table:            TO  Flag:             Table:              "
      CRT @(0,20):"                    Table:            TO                    Table:              "
      SA.FLAG=''
      SA.TABLE=''
      SA.FLAG2=''
      SA.TABLE2=''
ENTER.SOURCE.FLAG: ***

ENTER.SOURCE.TABLE: ***

      HELP="Enter Source Table. Table Number, ''=No Table, '*'= All Tables"
      MASK=SA.TABLE'L#2'
      CALL GEN.IN(27,20,MASK,'',Q,0,2,'','',2,27,20,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      QI=TRIM(QI)
      BEGIN CASE
         CASE QI='X'
            FAILURE=TRUE
            IF PART.STATE THEN
               CRT @(0,19):SPACE(30):'+':STR('-',47):'+'
            END ELSE
               CRT @(0,19):SPACE(80)
            END
            CRT @(0,20):SPACE(80)
            RETURN

         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.SOURCE.TABLE
            END
         CASE QI='' OR QI='*'
      END CASE
      FOUND.FLAG=0
      NUM.OF.ITMS=DCOUNT(ALL.ZIPS<1>,@VM)
      FOR X = 1 TO NUM.OF.ITMS
         BEGIN CASE
            CASE QI='*' 
               FOUND.FLAG=1
            CASE 1

               IF QI=ALL.ZIPS<2,X> THEN
                  FOUND.FLAG=1
               END
         END CASE
      NEXT X
      IF NOT(FOUND.FLAG) THEN

         CALL ELINE("' Table '":QI:"' is not used! Please select another one.")
         GOTO ENTER.SOURCE.TABLE
      END
      SA.TABLE=QI
      CRT @(27,20):SA.TABLE'L#2'
ENTER.DEST.FLAG: ***

ENTER.DEST.TABLE: ***
      HELP="Enter Source Table. Table Number, ''=No Table, '*'= NO CHANGE"

      MASK=SA.TABLE2'L#2'
      CALL GEN.IN(67,20,MASK,'',Q,0,2,'','',2,67,20,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      QI=TRIM(QI)
      BEGIN CASE
         CASE QI='X'
            CRT @(67,20):SA.TABLE2'L#2'
            GOTO ENTER.SOURCE.TABLE
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.DEST.TABLE
            END
         CASE QI='' OR QI='*'
         CASE 1
            OLD.T = TABLE
            TABLE=QI
           TABLE=OLD.T
      END CASE

      TEMP.1=QI
      IF QI='*' THEN TEMP.1=SA.TABLE
      IF SA.TABLE=TEMP.1 THEN
         CALL ELINE('No Change was requested')
         GOTO ENTER.DEST.TABLE
      END
      SA.TABLE2=QI
      CRT @(67,20):SA.TABLE2
      RETURN

****************************************************
GET.ZIP.FILE: ***
****************************************************
      ZIP.FILE.CHANGE=0
      IF START.POS=0 AND STOP.POS=0 ELSE
         IF PART.STATE=1 THEN
            FOR ZIP.POS=START.POS TO STOP.POS
               GOSUB CHANGE.ZIP.FILE
            NEXT ZIP.POS
         END ELSE
            FOR STATE.NUM = START.POS TO STOP.POS
               LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1    ; * JMK04
               LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1    ; * JMK04
               FOR STATE.RANGE = STATE.BEG.POS TO STATE.END.POS        ; * JMK04
                  ZIP.NUM=ALL.ZIPS<3,STATE.RANGE>  ; * JMK04
                  ZIP.POS=STATE.RANGE
                  GOSUB CHANGE.ZIP.FILE
               NEXT STATE.RANGE
            NEXT STATE.NUM
         END
         IF NOT(ZIP.FILE.CHANGE) THEN
            CALL ELINE('No Change Was Made')
            RETURN
         END
      END
      IF PART.STATE=1 THEN
         GOSUB LIST.STATE.ZIPS
      END ELSE
         GOSUB SETUP.AUDIT.ZIPS
         GOSUB LIST.STATES
      END
      RETURN
****************************************************
CHANGE.ZIP.FILE: ***
****************************************************
      BEGIN CASE
         CASE (SA.TABLE='*' OR SA.TABLE=ALL.ZIPS<2,ZIP.POS>)
            IF SA.TABLE2#'*' THEN
               ALL.ZIPS<2,ZIP.POS>=SA.TABLE2
               ZIP.FILE.CHANGE=1
            END
         CASE (SA.TABLE2='*' OR SA.TABLE2=ALL.ZIPS<2,ZIP.POS>) AND REVERSE.CODE

            IF SA.TABLE#'*' THEN
               ALL.ZIPS<2,ZIP.POS>=SA.TABLE
               ZIP.FILE.CHANGE=1
            END
      END CASE
      RETURN

****************************************************
GET.STATE.RANGE:
****************************************************
      HELP = "[E]ntire sheet, # for single entry, #-# for a range, state code."
      IF UNDO.ZIP#'' THEN
         HELP:=' [U]ndo'
      END
      CRT @(0,22):'Enter State Number/Range or Code: ':@(-4)

      MASK = '     '
      CALL GEN.IN(34,22,MASK,'',Q,0,5,'','',2,34,22,1,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=TRIM(MASK)

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO GET.STATE.RANGE
         CASE QI = 'X' OR QI=''
            FAILURE=TRUE
         CASE QI = 'U'
            IF UNDO.ZIP='' THEN
               CALL ELINE('Invalid function')
               GOTO GET.STATE.RANGE
            END
            ALL.ZIPS=UNDO.ZIP
            START.POS=0
            STOP.POS=0
            UNDO.ZIP=''
         CASE QI = 'E'
            START.POS=1
            STOP.POS=NUM.ZIPS
*
* Range Selection
*
         CASE INDEX(QI,'-',1)
            START.POS=FIELD(QI,'-',1)
            STOP.POS=FIELD(QI,'-',2)
            IF START.POS < 1 OR START.POS > NUM.ZIPS THEN
               CALL ELINE("Invalid Beginning STATE number entered, try again.")
               GOTO GET.STATE.RANGE
            END
            IF STOP.POS < 1 OR STOP.POS > NUM.ZIPS THEN
               CALL ELINE("Invalid Ending STATE number entered, try again.")
               GOTO GET.STATE.RANGE
            END
            IF START.POS > STOP.POS THEN
               CALL ELINE("Invalid Beginning STATE number must be less than Ending STATE number")
               GOTO GET.STATE.RANGE
            END
*
* Individual Selection
*
         CASE NUM(QI)
            STATE.NUM = QI'R%3'
            IF STATE.NUM < 1 OR STATE.NUM > NUM.ZIPS THEN
               CALL ELINE("Invalid STATE number entered, try again.")
               GOTO GET.STATE.RANGE
            END ELSE
*
* Start editing Zips...
*
               START.POS=STATE.NUM
               STOP.POS=STATE.NUM
*              IF STATE.ZIP.REC<1,STOP.POS>='CN' THEN STOP.POS=STOP.POS-1        ; * JMK01 ; * JMK04
            END
*
* Idiot input...
*
         CASE 1
*
* Attempt to locate string entered as a state ID
*
            LOCATE QI IN STATE.ZIP.REC<1> SETTING WHERE THEN
               STATE.NUM = WHERE'R%3'
               IF STATE.NUM < 1 OR STATE.NUM > NUM.ZIPS THEN
                  CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.ZIPS)
                  GOTO GET.STATE.RANGE
               END ELSE
                  START.POS=STATE.NUM
                  STOP.POS=STATE.NUM
*                 IF STATE.ZIP.REC<1,STOP.POS>='CN' THEN STOP.POS=STOP.POS-1     ; * JMK01 ; * JMK04
               END
            END ELSE
               CALL ELINE('Invalid response. Try again.')
               GOTO GET.STATE.RANGE
            END
      END CASE

      RETURN

****************************************************
EDIT.STATES:
****************************************************

      REFRESH.NEEDED = FALSE
      ES.COLS=''
      ES.COLS<1>=0 ; ES.COLS<2>=20 ; ES.COLS<3>=40 ; ES.COLS<4>=60
      ES.START.ROW = 5
      ES.MAX.ROWS=13
      FAILURE = FALSE
      YN.FLAG = ''
      ES.COL.NUM = 1+INT((STATE.NUM-1)/ES.MAX.ROWS)
      ES.ROW.NUM = REM(STATE.NUM, ES.MAX.ROWS)
      IF ES.ROW.NUM = 0 THEN ES.ROW.NUM = 13
      ES.COL = ES.COLS<ES.COL.NUM>
      ES.ROW = ES.START.ROW+ES.ROW.NUM
      TABLE = STATE.ZIP.REC<5,STATE.NUM>
      TEMP = STATE.NUM'R#2':') '         ; * Line Number
      TEMP:= STATE.ZIP.REC<1,STATE.NUM>:' '        ; * State ID Code
      TEMP:= STATE.ZIP.REC<2,STATE.NUM>'R%3':'-'   ; * State Low Zip
      TEMP:= STATE.ZIP.REC<3,STATE.NUM>'R%3':' '   ; * State High Zip
      CRT @(ES.COL,ES.ROW):TEMP
      ES.COL+=15

ES.3:
      TABLE = STATE.ZIP.REC<5,STATE.NUM>
      HELP = "[##]=Tbl [*]=Partl Zips [S]elect"
      IF YN.FLAG ='N' THEN HELP:=" [SPACE]=Clear St"
      IF TABLE THEN
         MASK = TABLE:' '
      END ELSE
         MASK = '##'
      END
      HELP:=" [X]=Back [EX]it"

ES.4:
      CRT @(0,22):"Enter a table Number:":@(-4)
      CALL GEN.IN(ES.COL+2,ES.ROW,MASK,'',Q,0,2,'','',2,ES.COL+2,ES.ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ES.4
         CASE QI = 'X'
            IF STATE.ZIP.REC<6,STATE.NUM> = ' ' THEN TEMP=RED.ON ELSE TEMP=''
            T = STATE.ZIP.REC<5,STATE.NUM>
            IF T='' THEN T='-'
            TEMP:= T
            IF STATE.ZIP.REC<6,STATE.NUM> = ' ' THEN TEMP:=TERM.NORM
            CRT @(ES.COL+2,ES.ROW):TEMP
             FAILURE = TRUE
         CASE QI=''
         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1           ; * JMK04
                  LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1           ; * JMK04
                  FOR STATE.RANGE = STATE.BEG.POS TO STATE.END.POS
                     ALL.ZIPS<2,STATE.RANGE> = ''
                  NEXT STATE.RANGE
                  STATE.ZIP.REC<5,STATE.NUM>=''
                  STATE.ZIP.REC<6,STATE.NUM>=' '   ; * SET 'BLANK' FLAG
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a table with a state marked "Y" - It must be "N" first!')
                  GOTO ES.3
            END CASE
         CASE QI='S'
            VIN=CLIENT.ID
            VIN<2>=CARRIER.ID
            CALL AUDIT.TABLE.SELECT(VIN,VOUT)
            BEGIN CASE
               CASE VOUT<1> = 'EX'
                  FAILURE = TRUE
                  EXIT.IT = TRUE
               CASE VOUT<1> = 'X'
               CASE 1
                  TABLE = VOUT<1>
                  LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1           ; * JMK04
                  LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1           ; * JMK04
                  FOR STATE.RANGE = STATE.BEG.POS TO STATE.END.POS
                     ALL.ZIPS<2,STATE.RANGE> = TABLE
                  NEXT STATE.RANGE
                  STATE.ZIP.REC<5,STATE.NUM>=TABLE
                  STATE.ZIP.REC<6,STATE.NUM>=''    ; * CLEAR 'BLANK' FLAG
            END CASE
            REFRESH.NEEDED = TRUE
            IF REFRESH.NEEDED THEN
               GOSUB INIT.SCREEN
               GOSUB LIST.STATES
            END
            IF VOUT<1>='X' THEN GOTO ES.3
        CASE (QI GE '0' AND QI LE '99') OR (QI GE 'A' AND QI LE 'Z')
            TABLE=QI
            GOSUB CHECK.FOR.TABLE
            IF TABLE.FOUND THEN
               LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1    ; * JMK04
               LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1    ; * JMK04
               FOR STATE.RANGE = STATE.BEG.POS TO STATE.END.POS
                  ALL.ZIPS<2,STATE.RANGE> = TABLE
               NEXT STATE.RANGE
               STATE.ZIP.REC<5,STATE.NUM>=TABLE
               STATE.ZIP.REC<6,STATE.NUM>=''       ; * CLEAR 'BLANK' FLAG
            END
            REFRESH.NEEDED = TRUE
            IF REFRESH.NEEDED THEN
               GOSUB INIT.SCREEN
               GOSUB LIST.STATES
            END

         CASE QI='*'
            GOSUB EDIT.STATE.ZIPS
            GOSUB SETUP.STATE.AUDIT.ZIPS
            GOSUB LIST.STATES
            FAILURE= FALSE
            GOTO ES.3
         CASE 1
            CALL ELINE('Invalid option, valid options are #, "*", "X" and "EX".  Try Again.')
            GOTO ES.4
      END CASE
ES.5:
*
* Display Table Symbol - Colorize it!
*
      IF STATE.ZIP.REC<6,STATE.NUM> = ' ' THEN TEMP=RED.ON ELSE TEMP=''
      T = STATE.ZIP.REC<5,STATE.NUM>
      IF T='' THEN T='-'
      TEMP:= T
      IF STATE.ZIP.REC<6,STATE.NUM> = ' ' THEN TEMP:=TERM.NORM
      CRT @(ES.COL+2,ES.ROW):TEMP

      IF NOT(EXIT.IT) THEN
         IF YN.FLAG='Y' AND STATE.ZIP.REC<5,STATE.NUM>='' THEN
            CALL ELINE('You can not have a State set to "Y" and NO table number setup for the state!')
            FAILURE = FALSE
            GOTO ES.3
         END
      END
*
* COMMON EXIT POINT - Clean up display....
*
      RETURN

****************************************************
CHECK.FOR.TABLE:
****************************************************
      TABLE.FOUND = TRUE
      RETURN
****************************************************
LIST.STATES:
****************************************************
*
* Clear display box
*
      CALL FB.DRAW.BOX(0,2,79,20,' ','--- --- ')   ; * Full box image + header
*
* Display Heading
*
      IF TABLE.HEADING # '' THEN CALL FB.PRINT.CENT(0,79,3,TABLE.HEADING)
      TEMP='##  ST LOW HGH F T  '
      CRT @(0,4):TEMP:TEMP:TEMP:TEMP
      TEMP=STR('=',LEN(TEMP)-2):'  '
      CRT @(0,5):TEMP:TEMP:TEMP:TEMP
      CRT @(0,20):FOOTER'L#78'
*
* Init variables
*
      LS.COLS=''
      LS.COLS<1>=0 ; LS.COLS<2>=20 ; LS.COLS<3>=40 ; LS.COLS<4>=60
      LS.COL.NUM=1
      LS.ROW.NUM=1
      LS.MAX.COLS=4
      LS.MAX.ROWS=13
*
* Draw Left side
*
      LS.POS = 1
      IF SCR.PG=2 THEN LS.POS=53         ; * JMK04
      LS.START.ROW = 5                   ; * Note this is 1 less (due to addition adds 1)
      EXIT.LD = FALSE
      LOOP
         TEMP = LS.POS'R#2':') '         ; * Line Number
         TEMP:= STATE.ZIP.REC<1,LS.POS>:' '        ; * State ID Code
         TEMP:= STATE.ZIP.REC<2,LS.POS>'R%3':'-'   ; * State Low Zip
         TEMP:= STATE.ZIP.REC<3,LS.POS>'R%3':' '   ; * State High Zip
*
* YN FLAG - COLORIZE IT!
*
         TEMP:='  '
*
* TABLE NUMBER/SYMBOL - COLORIZE IT!
*
         IF STATE.ZIP.REC<6,LS.POS> = ' ' THEN TEMP:=RED.ON
         T = STATE.ZIP.REC<5,LS.POS>
         IF T ='' THEN T='-'
         TEMP:= T                        ; * Table
         IF STATE.ZIP.REC<6,LS.POS> = ' ' THEN TEMP:=TERM.NORM
         TEMP:=' '
         LS.POS+=1
         CRT @(LS.COLS<LS.COL.NUM>,LS.START.ROW+LS.ROW.NUM):TEMP
         BEGIN CASE
*
*  End of list?
*
            CASE LS.POS > NUM.ZIPS
               EXIT.LD = TRUE
*
*  Finished A Column?
*
            CASE LS.ROW.NUM = LS.MAX.ROWS
               IF LS.COL.NUM < LS.MAX.COLS THEN
                  LS.COL.NUM+=1
                  LS.ROW.NUM=1
               END ELSE
                  EXIT.LD = TRUE
                  CALL FB.PRINT.CENT(0,79,21,REVON:'* Unable to display all entries *':REVOFF)
               END
*
*  Default
*
            CASE 1
               LS.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.LD)
      REPEAT

      RETURN

****************************************************
GET.ZIP.RANGE:
****************************************************
      HELP = "OPTIONS: [E]ntire sheet, # for single entry, #-# for a range, zip code."
      IF UNDO.ZIP#'' THEN
         HELP:=' [U]ndo'
      END
      CRT @(0,22):'Enter Zip Number/Range or Code: ':@(-4)

      MASK = '       '
      CALL GEN.IN(34,22,MASK,'',Q,0,7,'','',2,34,22,1,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=TRIM(MASK)
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO GET.STATE.RANGE
         CASE QI = 'X' OR QI=''
            FAILURE=TRUE
         CASE QI = 'U'
            IF UNDO.ZIP='' THEN
               CALL ELINE('Invalid function')
               GOTO GET.STATE.RANGE
            END
            ALL.ZIPS=UNDO.ZIP
            START.POS=0
            STOP.POS=0
            UNDO.ZIP=''
         CASE QI = 'E'
            LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING START.POS ELSE START.POS-=1     ; * JMK04
            LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STOP.POS ELSE STOP.POS-=1       ; * JMK04
*
* Range Selection
*
         CASE INDEX(QI,'-',1)
            START.ZIP=FIELD(QI,'-',1)
            STOP.ZIP=FIELD(QI,'-',2)
            LOCATE START.ZIP IN ALL.ZIPS<3> SETTING START.POS ELSE START.POS-=1  ; * JMK04
            LOCATE STOP.ZIP IN ALL.ZIPS<3> SETTING STOP.POS ELSE STOP.POS-=1     ; * JMK04
            LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.START.POS ELSE START.POS-=1         ; * JMK04
            LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.STOP.POS ELSE STOP.POS-=1           ; * JMK04
            IF START.POS < STATE.START.POS OR START.POS > STATE.STOP.POS THEN
               CALL ELINE("Invalid Beginning ZIP number entered, try again.")
               GOTO GET.ZIP.RANGE
            END
            IF STOP.POS < STATE.START.POS OR STOP.POS > STATE.STOP.POS THEN
               CALL ELINE("Invalid Ending ZIP number entered, try again.")
               GOTO GET.ZIP.RANGE
            END
            IF START.POS > STOP.POS THEN
               CALL ELINE("Invalid Beginning ZIP number must be less than Ending ZIP number")
               GOTO GET.ZIP.RANGE
            END
*
* Individual Selection
*
         CASE 1
            ZIP.NUM = QI'R%3'
            IF ZIP.NUM < STATE.ZIP.REC<2,STATE.NUM> OR ZIP.NUM > STATE.ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid ZIP number entered, try again.")
               GOTO GET.ZIP.RANGE
            END ELSE
*
* Start editing Zips...
*
               LOCATE ZIP.NUM IN ALL.ZIPS<3> SETTING ZIP.POS ELSE ZIP.POS-=1     ; * JMK04
               START.POS=ZIP.POS
               STOP.POS=ZIP.POS
            END

      END CASE
     RETURN
****************************************************
EDIT.STATE.ZIPS:
****************************************************
*
* Init. return value varables
*
      PAGE.NUM = 1
      FAILURE = FALSE

*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN
      CBVIN=''
      CBVIN<1>=CLIENT.ID
      CALL CLIENT.BLOCK(CBVIN,CBVOUT,F.CAR.CTRL)
      CRT @(25,0):CBVOUT<1>:CLIENT.ID'L#5':' ':CL.NAME'L#20':@(-6)
      CRT @(25,1):CARRIER.ID'L#5':' ':CARRIER.NAME'L#20'
ESZ.1:
      GOSUB LIST.STATE.ZIPS

ESZ.2:
      CRT @(0,6):TABLE.HEADING[1,25]
      CRT @(0,8):TABLE.HEADING[51,8]
      CRT @(0,10):TABLE.HEADING[63,17]
      IF EXIT.IT THEN GOTO ESZ.EXIT

      CRT @(0,22):'Enter Option :    ':@(-4)
      PART.STATE=1
      HELP = "[E]nter [C]hange [R]everse ''=Next pg [T]op [B]ack [H]elp [X]=Exit"
      IF UNDO.STATE#ALL.ZIPS THEN
         HELP = "[E]nter [C]hang [R]ev [U]ndo ''=Nxt pg [T]op [B]ack [H]elp [X]=Exit"
      END
      MASK = '-'

      CALL GEN.IN(16,22,MASK,'',Q,0,7,'','',2,16,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ESZ.1
         CASE QI = 'X'
         CASE QI = 'U' AND UNDO.STATE#ALL.ZIPS
            ALL.ZIPS=UNDO.STATE
            START.POS=0
            STOP.POS=0
            GOSUB GET.ZIP.FILE
            GOTO ESZ.2
         CASE QI = 'E'
            FAILURE=FALSE
            UNDO.STATE=ALL.ZIPS
ENTER.STATE.ZIP: ***
            GOSUB GET.ZIP.RANGE
            IF FAILURE THEN GOTO ESZ.2
            ZIP.NUM.POS=START.POS
            LOOP
*
* Edit current Zip Number
*
               GOSUB EDIT.STATE.ZIP
*
* Did user ABORT?
*
               IF NOT(FAILURE) THEN
                  IF ZIP.NUM.POS+1 <= STOP.POS THEN
                     ZIP.NUM.POS+=1
                  END ELSE
                     GOTO ENTER.STATE.ZIP
                  END
               END ELSE
                  FAILURE=FALSE
                  GOTO ENTER.STATE.ZIP
               END
            WHILE NOT(FAILURE)
            REPEAT
            GOTO ENTER.STATE.ZIP

         CASE QI='C'
            REVERSE.CODE=0
            FAILURE=FALSE
            UNDO.STATE=ALL.ZIPS
CHANGE.STATE.ZIP: ***
            GOSUB GET.CHANGE.INFO
            IF FAILURE THEN
               GOTO ESZ.2
            END
CHANGE.STATE.ZIP.RANGE: ***
            GOSUB GET.ZIP.RANGE
            IF FAILURE THEN
               FAILURE=FALSE
               GOTO CHANGE.STATE.ZIP
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO CHANGE.STATE.ZIP.RANGE
         CASE QI='R'
            REVERSE.CODE=1
            FAILURE=FALSE
            UNDO.STATE=ALL.ZIPS
REVERSE.STATE.ZIP: ***
            GOSUB GET.CHANGE.INFO
            IF FAILURE THEN
               GOTO ESZ.2
            END
REVERSE.STATE.ZIP.RANGE: ***
            GOSUB GET.ZIP.RANGE
            IF FAILURE THEN
               FAILURE=FALSE
               GOTO REVERSE.STATE.ZIP
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO REVERSE.STATE.ZIP.RANGE
*
* Page forward 1 page
*
         CASE QI=''
            PAGE.NUM+=1
            GOSUB LIST.STATE.ZIPS
            GOTO ESZ.2

*
* Top Page
*
         CASE QI='T'
            IF PAGE.NUM # 1 THEN
               PAGE.NUM=1
               GOSUB LIST.STATE.ZIPS
            END
            GOTO ESZ.2

*
* Page back 1 page
*
         CASE QI='B'
            IF PAGE.NUM > 1 THEN
               PAGE.NUM-=1
               GOSUB LIST.STATE.ZIPS
            END
            GOTO ESZ.2
*
* Refresh Page
*
         CASE QI='R'
            GOTO ESZ.1
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ESZ.HELP
            GOSUB DISPLAY.HELP
            GOTO ESZ.2
*
* Individual Selection
*
         CASE ((STATE.ZIP.REC<2,STATE.NUM> < 5 AND LEN(QI)=3) OR (QI>5))
            ZIP.NUM = QI'R%3'
            IF ZIP.NUM < STATE.ZIP.REC<2,STATE.NUM> OR ZIP.NUM > STATE.ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid zip number entered, try again.")
            END ELSE
               UNDO.STATE=ALL.ZIPS
*             CALL FB.DRAW.BOX(0,3,30,18,' ','')
               GOSUB EDIT.STATE.ZIP
            END
            GOTO ESZ.2

*
* Idiot input...
*
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO ESZ.1
      END CASE
ESZ.EXIT:
*
* COMMON EXIT POINT -
*
      PART.STATE=0
      GOSUB SETUP.STATE.AUDIT.ZIPS
      RETURN
****************************************************
PRINT.STATES:
****************************************************

      PRINTER ON
      ESC=CHAR(27)
      LASER.STR=''
      LASER.STR= ESC:"E"
      LASER.STR:= ESC:"&l0O"             ; * Set orientation
      LASER.STR:= ESC:"(s0b"
      PRINT LASER.STR:
      PAGE 1
      CRT @(0,22):'Printing State Zip Ranges.....':@(-4)
      CRT @(0,23):@(-4):
*
* Build Dynamic Array of output
*
      DARRAY=''
      TARRAY=''
      FOR STATE.NUM = 1 TO NUM.ZIPS
         GOSUB PACK.STATE.ZIPS
         TEMP = ' ':STATE.NUM'R#2':')'   ; * State Number
         TEMP:= ' ':STATE.ZIP.REC<1,STATE.NUM>     ; * State Id Code
         NUM.RANGES = DCOUNT(PACK.ZIPS<1,STATE.NUM>,@SVM)
         FOR POS = 1 TO NUM.RANGES
            TEMP:= ' ':PACK.ZIPS<1,STATE.NUM,POS>'L#3'       ; * State Low Zip
            TEMP:= '-':PACK.ZIPS<2,STATE.NUM,POS>'L#3'       ; * State High Zip
            TEMP:= ' ':PACK.ZIPS<3,STATE.NUM,POS>'L#1'       ; * Y/N Flag
            TABLE = PACK.ZIPS<4,STATE.NUM,POS>
            IF TABLE='' OR TABLE = ' ' THEN TABLE='-'
            TEMP:= ' ':TABLE             ; * Table
            DARRAY<-1>=TEMP
            TEMP=SPACE(7)
*
* Build list of all table numbers
*
            IF TABLE#'-' THEN
               LOCATE TABLE IN TARRAY BY 'AR' SETTING WHERE ELSE
                  TARRAY<-1>=TABLE
               END
            END
         NEXT
      NEXT
      OPEN '','TEMP' TO F.TEMP ELSE
         CALL OPEN.ABORT("TEMP",PROG.NAME)
      END
      WRITE PACK.ZIPS ON F.TEMP,"PACKED.STATES"
      LINES.PER.PAGE=48
      COLS.PER.PAGE=4
*
* Compute number of pages with a little help from Boolean Algebra
*

      NUM.LINES = DCOUNT(DARRAY,@AM)
      NUM.COLS = INT(NUM.LINES/LINES.PER.PAGE)+(REM(NUM.LINES,LINES.PER.PAGE)>0)
      NUM.PAGES = INT(NUM.LINES/(COLS.PER.PAGE*LINES.PER.PAGE))
      NUM.PAGES+= REM(NUM.LINES, COLS.PER.PAGE*LINES.PER.PAGE)>0

      WIDTH = 80
      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"
*
      TITLE=PRINT.TABLE.HEADING
      L.TAB=CTR-(LEN(TITLE)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):TITLE
      R.TAB=(WIDTH-LEN(TEMP))-20
      HEAD2=TEMP:SPACE(R.TAB):USER.NAME'L,(#10 )':"PAGE 'PL'"

      HEAD3 = STR('-',WIDTH):"'L'"
      TEMP = 'Client Info    :':CLIENT.ID:', ':CL.NAME:' (':CL.CITY:', ':CL.ST:')'
      HEAD4 = TEMP'L#78':"'L'"
      TEMP = 'Carrier Info   :':CARRIER.ID:', ':CARRIER.NAME
      HEAD5 = TEMP'L#78':"'L'"
      ZIP.VAR = ROUTE.ZIP
      CALL FB.READ.ZIP(ZIP.VAR, DEST.CITY, DEST.STATE)
      HEAD6 = 'Routing Zip    :':ROUTE.ZIP:' ':DEST.CITY:', ':DEST.STATE:"'L'"
      HEAD7 = 'Eff Date Range :':BEG.EFF.DATE'D2/':' TO '
      T=END.EFF.DATE'D2/'
      IF T='' THEN T= '(Open Ended)'
      HEAD7:=T:"'L'"
      HEAD7.1='Table Status   :':PRINT.TABLE.STATUS:"'L'"
      HEAD8 = STR('-',WIDTH):"'L'"
      HEAD9 = ' ##  ST LOW HGH F T  ##  ST LOW HGH F T  ##  ST LOW HGH F T  ##  ST LOW HGH F T':"'L'"
      HEAD10= ' ==================  ==================  ==================  =================='
      HED=HEAD1:HEAD2:HEAD3:HEAD4:HEAD5:HEAD6:HEAD7:HEAD7.1:HEAD8:HEAD9:HEAD10
      PAGE 1
      HEADING HED

      S.LINE = 1
      FOR PAGE = 1 TO NUM.PAGES
         IF PAGE = NUM.PAGES THEN
            LINES.PER.PAGE = INT((NUM.LINES-S.LINE+1)/4)
            LINES.PER.PAGE+= REM(NUM.LINES-S.LINE+1,4)>0
         END
         MODULA = LINES.PER.PAGE*COLS.PER.PAGE
         E.LINE = S.LINE+LINES.PER.PAGE-1
         IF E.LINE > NUM.LINES THEN E.LINE = NUM.LINES
         FOR LINE = S.LINE TO E.LINE
            TEMP = DARRAY<LINE>
            TEMP:= ' ':DARRAY<LINE+LINES.PER.PAGE>
            TEMP:= ' ':DARRAY<LINE+LINES.PER.PAGE*2>
            TEMP:= ' ':DARRAY<LINE+LINES.PER.PAGE*3>
            PRINT TEMP
         NEXT
         S.LINE+=MODULA
         PAGE
      NEXT
*
* START TABLE REPORTS
*
      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"

      TITLE='Audit Table Listing'
      L.TAB=CTR-(LEN(TITLE)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):TITLE
      R.TAB=(WIDTH-LEN(TEMP))-20
      HEAD2=TEMP:SPACE(R.TAB):USER.NAME'L,(#10 )':"PAGE 'PL'"
      HEAD3 = STR('-',WIDTH):"'L'"
      TEMP = 'Client Info    :':CLIENT.ID:', ':CL.NAME:' (':CL.CITY:', ':CL.ST:')'
      HEAD4 = TEMP'L#78':"'L'"
      TEMP = 'Carrier Info   :':CARRIER.ID:', ':CARRIER.NAME
      HEAD5 = TEMP'L#78':"'L'"
      ZIP.VAR = ROUTE.ZIP
      CALL FB.READ.ZIP(ZIP.VAR, DEST.CITY, DEST.STATE)
      HEAD8 = STR('-',WIDTH):"'L'"
      HED=HEAD1:HEAD2:HEAD3:HEAD4:HEAD5:HEAD8
      HEADING HED

      PVIN=''
      PVIN<2,1>=CLIENT.ID
      PVIN<2,2>=CL.NAME
      PVIN<3,1>=CARRIER.ID
      PVIN<3,2>=CARRIER.NAME
      NUM.TABLES = DCOUNT(TARRAY,@AM)
      FOR TABLE.NUM = 1 TO NUM.TABLES
         PVIN<1>=TARRAY<TABLE.NUM>
         CALL PRINT.AUDIT.TABLE(PVIN,F.AUDIT.TABLES,PVOUT)
         PAGE
      NEXT

      CRT @(0,22):@(-4):

      PRINTER CLOSE
      RETURN

****************************************************
PACK.STATE.ZIPS:
****************************************************
      PACK.ZIPS<1,STATE.NUM>=''          ; * Storage for Beg
      PACK.ZIPS<2,STATE.NUM>=''          ; * Storage for End
      PACK.ZIPS<3,STATE.NUM>=''          ; * Storage for Y/N Flag
      PACK.ZIPS<4,STATE.NUM>=''          ; * Storage for Table
*
* Loop though all zips and consolidate all groups of "yes" and "no"s
*
      S.ZIP = STATE.ZIP.REC<2,STATE.NUM>           ; * Starting Zip for selected State
      E.ZIP = STATE.ZIP.REC<3,STATE.NUM>           ; * Ending Zip for selected State
      LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1   ; * JMK04
      LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1   ; * JMK04
*
* Init our "LAST." varables
*
      LAST.FLAG = ALL.ZIPS<1,STATE.BEG.POS>        ; * First Flag for state
      LAST.TABLE = ALL.ZIPS<2,STATE.BEG.POS>       ; * First Table for State
      LAST.BEG = S.ZIP
      LAST.END = S.ZIP
      NEED.TO.STORE = TRUE               ; * Mark flag that we need to store the "last"s

      FOR ZIP.POS = STATE.BEG.POS TO STATE.END.POS
         T =(ALL.ZIPS<1,ZIP.POS> # LAST.FLAG)
         T+=(ALL.ZIPS<2,ZIP.POS> # LAST.TABLE)
         IF T>0 THEN
*
* Change in flag OR table - store data and update LAST.xxxx variables.
*
            PACK.ZIPS<1,STATE.NUM,-1> = LAST.BEG'R%3'
            PACK.ZIPS<2,STATE.NUM,-1> = LAST.END'R%3'
            PACK.ZIPS<3,STATE.NUM,-1> = LAST.FLAG
            IF LAST.TABLE # '' THEN
               PACK.ZIPS<4,STATE.NUM,-1> = LAST.TABLE
            END ELSE
               PACK.ZIPS<4,STATE.NUM,-1> = ' '
            END

            LAST.FLAG = ALL.ZIPS<1,ZIP.POS>
            LAST.TABLE = ALL.ZIPS<2,ZIP.POS>
            LAST.BEG = ZIP.POS
            NEED.TO.STORE = FALSE        ; * clear flag - already written current...
         END ELSE
*
* Have same flag. - Set flag that we need to write...New ending..
*
            NEED.TO.STORE = TRUE
         END
         LAST.END = ZIP.POS              ; * Move end marker to curr. position.
      NEXT ZIP.POS
*
* Store any last entries
*
      IF NEED.TO.STORE THEN
         PACK.ZIPS<1,STATE.NUM,-1> = LAST.BEG'R%3'
         PACK.ZIPS<2,STATE.NUM,-1> = LAST.END'R%3'
         PACK.ZIPS<3,STATE.NUM,-1> = LAST.FLAG
         PACK.ZIPS<4,STATE.NUM,-1> = LAST.TABLE
      END

      RETURN
****************************************************
EDIT.STATE.ZIP:
****************************************************
*
* Init variables
*
      REFRESH.NEEDED = FALSE
      FAILURE = FALSE
      ESZ.COLS=''
      ESZ.COLS<1>=31 ; ESZ.COLS<2>=40 ; ESZ.COLS<3>=49 ; ESZ.COLS<4>=58 ; ESZ.COLS<5> = 67
     ESZ.MAX.COLS=5
      ESZ.MAX.ROWS=13
      ESZ.START.ROW=5
      ZIP.PAGE.REFRESH=0                 ; * JMK04

ESZ.1.0:
*
* Determine how many zips fit on a page, then determine the starting
* Zip OFFSET that is on the current page.
*
      ESZ.PAGE.SIZE = ESZ.MAX.COLS*ESZ.MAX.ROWS    ; * Number of zips on a page
      ST.SZIP = STATE.ZIP.REC<2,STATE.NUM>         ; * Starting zip # for state
      ST.EZIP = STATE.ZIP.REC<3,STATE.NUM>         ; * Starting zip # for state
      LOCATE ST.SZIP IN ALL.ZIPS<3> SETTING ST.SZIP.POS ELSE ST.SZIP.POS-=1      ; * JMK04
      LOCATE ST.EZIP IN ALL.ZIPS<3> SETTING ST.EZIP.POS ELSE ST.EZIP.POS-=1      ; * JMK04
      S.PAGE.ZIP = ALL.ZIPS<3,ST.SZIP.POS+((PAGE.NUM-1)*ESZ.PAGE.SIZE)>          ; * Starting zip # for page
      LOCATE S.PAGE.ZIP IN ALL.ZIPS<3> SETTING S.PAGE.ZIP.POS ELSE S.PAGE.ZIP.POS-=1       ; * JMK04
      E.PAGE.ZIP = ALL.ZIPS<3,S.PAGE.ZIP.POS+ESZ.PAGE.SIZE>  ; * Ending zip # for page
      LOCATE E.PAGE.ZIP IN ALL.ZIPS<3> SETTING E.PAGE.ZIP.POS ELSE E.PAGE.ZIP.POS-=1       ; * JMK04
      IF E.PAGE.ZIP.POS > ST.EZIP.POS THEN         ; * JMK04
         E.PAGE.ZIP=ST.EZIP              ; * JMK04
         E.PAGE.ZIP.POS=ST.EZIP.POS      ; * JMK04
      END                                ; *JMK04
      LOCATE ZIP.NUM IN ALL.ZIPS<3> SETTING ZIP.NUM.POS ELSE ZIP.NUM.POS-=1      ; * JMK04
      IF ZIP.NUM.POS < ST.SZIP.POS THEN RETURN     ; * JMK04
      IF ZIP.NUM.POS > ST.EZIP.POS THEN RETURN     ; * JMK04
      N.ST.ZIPS = ST.EZIP.POS-ST.SZIP.POS+1        ; * JMK04
      NUM.ST.PAGES = INT(N.ST.ZIPS/(LSZ.MAX.COLS*LSZ.MAX.ROWS))        ; * JMK04
      IF NUM.ST.PAGES < N.ZIPS/(LSZ.MAX.COLS*LSZ.MAX.ROWS) THEN NUM.ST.PAGES+=1  ; * JMK04

*
* Is the zip number entered NOT on this current page?
*
      IF ZIP.NUM.POS < S.PAGE.ZIP.POS OR ZIP.NUM.POS > E.PAGE.ZIP.POS THEN
*
* Yes... Change page number, update display, and recompute
* edit positioning...
*
         IF ZIP.NUM.POS < S.PAGE.ZIP.POS THEN PAGE.NUM-=1    ; * JMK04
         IF ZIP.NUM.POS > E.PAGE.ZIP.POS THEN PAGE.NUM+=1    ; * JMK04
         IF PAGE.NUM<1 THEN PAGE.NUM=1   ; * JMK04
         IF PAGE.NUM>NUM.ST.PAGES THEN PAGE.NUM=NUM.ST.PAGES           ; * JMK04
*        PAGE.NUM = 1+INT(ZIP.NUM.POS-S.PAGE.ZIP.POS/ESZ.PAGE.SIZE) ; * JMK04
*        GOSUB LIST.STATE.ZIPS ; * JMK04
         ZIP.PAGE.REFRESH=1              ; * JMK04
         GOTO ESZ.1.0
      END

      IF ZIP.PAGE.REFRESH THEN GOSUB LIST.STATE.ZIPS         ; * JMK04
*
* Zip position in the list (0-num zips for state) for current page.
*
      ZIP.POS = ZIP.NUM.POS-S.PAGE.ZIP.POS

*
* Convert zip linear position to a two dimensional position
*
      ESZ.COL.NUM = 1+INT(ZIP.POS/ESZ.MAX.ROWS)
      ESZ.ROW.NUM = REM(ZIP.POS+1,ESZ.MAX.ROWS)
      IF ESZ.ROW.NUM = 0 THEN ESZ.ROW.NUM = 13
*
* Adjust for screen locations.
*
      ESZ.COL = ESZ.COLS<ESZ.COL.NUM>
      ESZ.ROW = ESZ.START.ROW+ESZ.ROW.NUM
      YN.FLAG = ALL.ZIPS<1,ZIP.NUM.POS>
      TABLE = ALL.ZIPS<2,ZIP.NUM.POS>
      TEMP=' '
      TEMP:= ZIP.NUM'R%3'
      TEMP:= ' '
      TEMP:= '  '
      IF TABLE='' THEN
         TEMP:=RED.ON:'-':TERM.NORM
      END ELSE
         TEMP:=TABLE
      END
      CRT @(ESZ.COL,ESZ.ROW):TEMP
      ESZ.COL+=5

ESZ.3.A:
      TABLE = ALL.ZIPS<2,ZIP.NUM.POS>
      HELP = "[#]=Table [S]elect Table"
      IF YN.FLAG ='N' THEN HELP:=" [SPACE]=Clear St"
      IF TABLE THEN

         MASK = TABLE:' '
      END ELSE
         MASK = '##'
      END
      HELP:=" [H]elp [X]=Done [EX]it"

ESZ.4.A:
      CRT @(0,22):"Select an option:":@(-4)
      CALL GEN.IN(ESZ.COL+2,ESZ.ROW,MASK,'',Q,0,2,'','',2,ESZ.COL+2,ESZ.ROW,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ESZ.4.A
         CASE QI = 'X'
            FAILURE = TRUE
         CASE QI= ''
         CASE QI = ' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  ALL.ZIPS<2,ZIP.NUM.POS> = ''
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You can not clear a table with a ZIP marked "Y" - It must be "N" first!')
                  GOTO ESZ.3.A
            END CASE
         CASE QI='S'
            VIN=CLIENT.ID
            VIN<2>=CARRIER.ID
            CALL AUDIT.TABLE.SELECT(VIN,VOUT)
            BEGIN CASE
               CASE VOUT<1> = 'EX'
                  FAILURE = TRUE
                  EXIT.IT = TRUE
               CASE VOUT<1> = 'X'
               CASE 1
                  TABLE = VOUT<1>
                  ALL.ZIPS<2,ZIP.NUM.POS> = TABLE
            END CASE
            REFRESH.NEEDED = TRUE
            IF REFRESH.NEEDED THEN
               GOSUB INIT.SCREEN
               GOSUB LIST.STATE.ZIPS
            END
            IF VOUT<1>='X' THEN GOTO ESZ.3.A
         CASE (QI GE '0' AND QI LE '99') OR (QI GE 'A' AND QI LE 'Z')
            TABLE=QI
            GOSUB CHECK.FOR.TABLE
             TABLE.FOUND = TRUE

            IF TABLE.FOUND THEN
               ALL.ZIPS<2,ZIP.NUM.POS> = TABLE
            END
            IF REFRESH.NEEDED THEN
               GOSUB INIT.SCREEN
               GOSUB LIST.STATE.ZIPS
            END
         CASE QI = '?' OR QI = 'H'
            HELP.LINES=ESZ1.HELP
            GOSUB DISPLAY.HELP
            GOTO ESZ.3.A
         CASE 1
            CALL ELINE('Invalid option, valid options are #, "X" and "EX".  Try Again.')
            GOTO ESZ.4.A
      END CASE
*
* Redraw Current Zip Flag
*
ESZ.5.A:

      YN.FLAG = ALL.ZIPS<1,ZIP.NUM.POS>
      TABLE = ALL.ZIPS<2,ZIP.NUM.POS>
      TEMP = ' '
      TEMP:= ZIP.NUM'R%3'
      TEMP:= ' '
      TEMP:='  '
      IF TABLE='' THEN
         TEMP:=RED.ON:'-':TERM.NORM
      END ELSE
         TEMP:=TABLE
      END
      CRT @(ESZ.COLS<ESZ.COL.NUM>,ESZ.ROW):TEMP
      IF NOT(EXIT.IT) THEN
         IF YN.FLAG='Y' AND ALL.ZIPS<2,ZIP.NUM.POS>='' THEN
            CALL ELINE("You can't have a State Zip set to 'Y' and NO table number setup for the Zip!")
            FAILURE = FALSE
            GOTO ESZ.3.A
         END
      END

      RETURN
****************************************************
EDIT.ZIP.RANGE:
****************************************************

EZR.1:
      GOSUB DSP.EDIT.ZIP.RANGE.MENU

EZR.2:
      CRT @(0,11):' Start Zip #  :    '
      HELP = "OPTIONS:  [H]elp [X]=Back [EX]it Program"
      MASK = STATE.ZIP.REC<2,STATE.NUM>

      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',2,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=MASK

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EZR.2
         CASE QI = 'X' OR QI=''
            FAILURE=TRUE
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=EZR.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.EDIT.ZIP.RANGE.MENU
            GOTO EZR.2

*
* Individual Selection
*
         CASE NUM(QI)
            FAILURE = FALSE
            CALL FB.DRAW.BOX(0,3,30,18,' ','')
            ZIP.NUM = QI'R%3'
            IF ZIP.NUM < STATE.ZIP.REC<2,STATE.NUM> OR ZIP.NUM > STATE.ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid zip number entered, try again.")
            END ELSE
               LOOP
                  GOSUB EDIT.STATE.ZIP
                  IF NOT(FAILURE) THEN
                     IF ZIP.NUM < STATE.ZIP.REC<3,STATE.NUM> THEN
                        ZIP.NUM+=1
                     END ELSE
                        FAILURE = TRUE
                     END
                  END
               WHILE NOT(FAILURE)
               REPEAT
            END
*
* Redraw menu
*
            GOSUB DSP.EDIT.ZIP.RANGE.MENU
            GOTO EZR.2

*
* Idiot input...
*
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO EZR.1
      END CASE
      RETURN

****************************************************
DSP.EDIT.ZIP.RANGE.MENU:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 5):'Edit Zip Range Mode'
      CRT @(3, 6):'==================='
      CRT @(1, 8):'Enter the ZIP to start'
      CRT @(1, 9):' Zip Range Editing.'

      RETURN

****************************************************
LIST.STATE.ZIPS:
****************************************************
* Init variables
*
      LSZ.COLS=''
      LSZ.COLS<1>=31 ; LSZ.COLS<2>=40 ; LSZ.COLS<3>=49 ; LSZ.COLS<4>=58 ; LSZ.COLS<5> = 67
      LSZ.COL.NUM=1
      LSZ.ROW.NUM=1
      LSZ.MAX.COLS=5
      LSZ.MAX.ROWS=13
      LSZ.START.ROW=6

      S.ZIP = STATE.ZIP.REC<2,STATE.NUM>           ; * State Low Zip
      E.ZIP = STATE.ZIP.REC<3,STATE.NUM>           ; * State High Zip
      LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1   ; * JMK04
      LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1   ; * JMK04
      N.ZIPS = STATE.END.POS-STATE.BEG.POS+1
      NUM.PAGES = INT(N.ZIPS/(LSZ.MAX.COLS*LSZ.MAX.ROWS))
      IF NUM.PAGES < N.ZIPS/(LSZ.MAX.COLS*LSZ.MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN PAGE.NUM = 1
*
* Display Heading
*
      CALL FB.DRAW.BOX(30,2,49,18,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')

      TEMP=' ~~ STATE: ':STATE.ZIP.REC<1,STATE.NUM>:'               '
      TEMP:='PAGE # ':PAGE.NUM'R#2':' OF ':NUM.PAGES'R#2':' ~~ '
      CRT @(31,3):TEMP:
      TEMP=' ZIP F T '
      CRT @(31,4):TEMP:TEMP:TEMP:TEMP:TEMP:
*
* Display current page
*
      LSZ.POS = (PAGE.NUM-1)*LSZ.MAX.COLS*LSZ.MAX.ROWS
      LSZ.COL = LSZ.COLS<LSZ.COL.NUM>
      LSZ.ROW = LSZ.START.ROW
      EXIT.LSZ = FALSE

      LOOP
         ZIP = ALL.ZIPS<3,STATE.BEG.POS+LSZ.POS>'R%3'
         IF ALL.ZIPS<2,STATE.BEG.POS+LSZ.POS>='' THEN
            T = RED.ON:ZIP:TERM.NORM
         END ELSE
            T = ZIP
         END
         TEMP = ' ':T:' '                ; * ZIP CODE
         T = ALL.ZIPS<1,STATE.BEG.POS+LSZ.POS>     ; * Y/N FLAG
         TEMP:='  '
         T = ALL.ZIPS<2,STATE.BEG.POS+LSZ.POS>     ; * TABLE NUMBER OR NULL
         TEMP:= T
         LSZ.POS+=1
         CRT @(LSZ.COL,LSZ.ROW):TEMP
         BEGIN CASE
*
*  End of list?
*
            CASE LSZ.POS = N.ZIPS
               EXIT.LSZ = TRUE
*
*  Finished A Column?
*
            CASE LSZ.ROW.NUM = LSZ.MAX.ROWS
               IF LSZ.COL.NUM < LSZ.MAX.COLS THEN
                  LSZ.COL.NUM+=1
                  LSZ.ROW.NUM=1
                  LSZ.COL = LSZ.COLS<LSZ.COL.NUM>
                  LSZ.ROW = LSZ.START.ROW
               END ELSE
                  EXIT.LSZ = TRUE
                  CALL FB.PRINT.CENT(30,79,21,REVON:'* Continued on next page *':REVOFF)
               END
*
*  Default
*
            CASE 1
               LSZ.ROW+=1
               LSZ.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.LSZ)
      REPEAT

      RETURN

* SETUP.AUDIT.ZIPS - Builds the Zips record grouped by state.  This
*                    record (STATE.ZIP.REC) is mainly used for display
*                    purposes only.
*
* INPUT: ALL.ZIPS        - Array of all 3 digit zips (atribute value
*                          is ZIP Code)
*        STATE.ZIP.REC   - The arranged record 3.ZIPS from ZIPS.CODES.
*
* OUTPUT:
*        STATE.ZIP.REC<1> = (MV) STATE CODE
*        STATE.ZIP.REC<2> = (MV) LOW ZIP CODE VALUE
*        STATE.ZIP.REC<3> = (MV) HIGH ZIP CODE VALUE
*        STATE.ZIP.REC<4> = # = Table number used for entire state.
*                           * = Mixed Table Numbers, Or partial
*                               selection for state.
*                          '' = Nothing selected for this state.
*        STATE.ZIP.REC<5> -- ????
*        STATE.ZIP.REC<6> = ' ' = Includes a NULL table number for this state
*                           ''  = All tables are the same
*
* NOTES: USE EXTRACT.AUDIT.ZIPS: to build the ALL.ZIPS array from the
*        array AZIPS.REC
*
*        Attribute 1,2,and 3 MUST have been preloaded from 3.ZIPS in
*        file ZIPS.CODES.
*

****************************************************
SETUP.AUDIT.ZIPS:
****************************************************
*
* Process all states.
*
      FOR STATE.NUM = 1 TO NUM.ZIPS
         GOSUB SETUP.STATE.AUDIT.ZIPS
      NEXT STATE.NUM

      RETURN
* SETUP.STATE.AUDIT.ZIPS - UPDATES P/Y/N FLAG FOR A SINGLE STATE.
*
* INPUT: STATE.NUM - STATE NUMBER TO RESETUP.
*        ALL.ZIPS  - USED TO DERMINE
*        AZIPS.REC   - INFO ON STATE
*
* OUTPUT: STATE.ZIP.REC<4,STATE.NUM> = FLAG FOR STATE
*         STATE.ZIP.REC<5,STATE.NUM> = TABLE.NUM (IF THE SAME FOR WHOLE STATE)
*
* NOTES: USE EXTRACT.AUDIT.ZIPS: to build the ALL.ZIPS array from the
*        array AZIPS.REC
*
*        Attribute 1,2,and 3 MUST have been preloaded from 3.ZIPS in
*        file ZIPS.CODES.
*
****************************************************
SETUP.STATE.AUDIT.ZIPS:
****************************************************
      MIXED.FLAG = FALSE
      MIXED.TABLE = FALSE
      EMPTY.TABLE = ''
      LAST.TABLE.ZIP = STATE.ZIP.REC<2,STATE.NUM>  ; * JMK04
      LOCATE LAST.TABLE.ZIP IN ALL.ZIPS<3> SETTING LAST.TABLE.POS ELSE LAST.TABLE.POS-=1   ; * JMK04
      LAST.TABLE.CODE = ALL.ZIPS<2,LAST.TABLE.POS>           ; * JMK04
      LAST.YN.FLAG = ''                  ; * Must USE NULL,
      STATE.ZIP.REC<6,STATE.NUM>=''

* Loop though all the zips for the entire state
      LOCATE STATE.ZIP.REC<2,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1   ; * JMK04
      LOCATE STATE.ZIP.REC<3,STATE.NUM> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1   ; * JMK04
      FOR STATE.RANGE = STATE.BEG.POS TO STATE.END.POS       ; * JMK04
         Y=ALL.ZIPS<3,STATE.RANGE>       ; * JMK04
         IF ALL.ZIPS<1,STATE.RANGE> # '' THEN
            IF LAST.YN.FLAG='' THEN
               LAST.YN.FLAG = ALL.ZIPS<1,STATE.RANGE>
            END ELSE
               IF LAST.YN.FLAG # ALL.ZIPS<1,STATE.RANGE> THEN MIXED.FLAG=TRUE
            END
            IF ALL.ZIPS<2,STATE.RANGE> = '' THEN EMPTY.TABLE = TRUE
            IF LAST.TABLE.CODE # ALL.ZIPS<2,STATE.RANGE> THEN MIXED.TABLE=TRUE
         END ELSE
*
* Correct Any Problems which may occur
*
            ALL.ZIPS<1,STATE.RANGE> = 'N'
            CALL ELINE('CALL PROGRAMMING!')
            CALL ELINE('NON FATAL PROBLEM - SETUP.STATE.AUDIT.ZIPS HAD A STATE ZIP ':Y:' WHICH WAS NULL!')
            CALL ELINE('NON FATAL PROBLEM - SETUP.STATE.AUDIT.ZIPS HAD A STATE ZIP ':Y:' WHICH WAS NULL!')
         END
      NEXT STATE.RANGE                   ; * JMK04

* Evaluate results... All Tables, All No, or Combos

      IF MIXED.FLAG THEN LAST.YN.FLAG = PARTIAL
      IF MIXED.TABLE THEN LAST.TABLE.CODE = PARTIAL
      IF EMPTY.TABLE THEN STATE.ZIP.REC<6,STATE.NUM>=' '
      BEGIN CASE
         CASE LAST.YN.FLAG # ''
            STATE.ZIP.REC<4,STATE.NUM> = LAST.YN.FLAG
            STATE.ZIP.REC<5,STATE.NUM> = LAST.TABLE.CODE

         CASE 1
            STATE.ZIP.REC<4,STATE.NUM> = 'N'
            STATE.ZIP.REC<5,STATE.NUM> = ''
      END CASE

      RETURN

****************************************************
BUILD.AUDIT.ZIPS:
****************************************************
      AZIPS.REC<2>=''                    ; * Storage for Beg
      AZIPS.REC<3>=''                    ; * Storage for End
      AZIPS.REC<4>=''                    ; * Storage for Y/N Flag
      AZIPS.REC<5>=''                    ; * Storage for Table

*
* Loop though all zips and consolidate all groups of "yes" and "no"s
*
* NOTE: We loop though 1000 - This zip (1000) does not exist and is
*       only used to make sure the last zip (999) is written.
*
      LAST.FLAG = ALL.ZIPS<1,1>
      LAST.TABLE = ALL.ZIPS<2,1>
      LAST.BEG = ALL.ZIPS<3,1>
      LAST.END = ALL.ZIPS<3,1>
      FOR ZIP.POS = 2 TO MAX.ZIPS
         T =(ALL.ZIPS<1,ZIP.POS> # LAST.FLAG)
         T+=(ALL.ZIPS<2,ZIP.POS> # LAST.TABLE)
         IF T>0 THEN
*
* Change in flag OR table - store data and update LAST.xxxx variables.
*
            IF LAST.TABLE # '' THEN
*
* Store entries into Temp storage
*
               AZIPS.REC<2,-1> = LAST.BEG'R%3'
               AZIPS.REC<3,-1> = LAST.END'R%3'
               AZIPS.REC<4,-1> = LAST.FLAG
               AZIPS.REC<5,-1> = LAST.TABLE
            END
            LAST.FLAG = ALL.ZIPS<1,ZIP.POS>
            LAST.TABLE = ALL.ZIPS<2,ZIP.POS>
            LAST.BEG = ALL.ZIPS<3,ZIP.POS>
            LAST.END = ALL.ZIPS<3,ZIP.POS>
         END ELSE
*
* Have another same flag.
*
            LAST.END = ALL.ZIPS<3,ZIP.POS>         ; * Move end marker to curr. position.
         END
      NEXT
                                                                    *
* Check to see if every zip has a table.                             *

      NO.TABLE.SETUP=0
      NO.YES.TABLE.SETUP=0
      NO.ZIP.NUM=0

      NUM.OF.STATE.REC=DCOUNT(STATE.ZIP.REC<1>,@VM)
      FOR I = 1 TO NUM.OF.STATE.REC
         LOCATE STATE.ZIP.REC<2,I> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1        ; * JMK04
         LOCATE STATE.ZIP.REC<3,I> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1        ; * JMK04
         FOR STATE.RANGE = STATE.BEG.POS TO STATE.END.POS    ; * JMK04
            J=ALL.ZIPS<3,STATE.RANGE>    ; * JMK04
            IF ALL.ZIPS<2,STATE.RANGE>='' THEN
               NO.TABLE.SETUP=I
               NO.ZIP.NUM = J
            END
            IF ALL.ZIPS<2,STATE.RANGE>='' AND ALL.ZIPS<1,STATE.RANGE>='Y' THEN
               NO.YES.TABLE.SETUP=I
               NO.ZIP.NUM = J
            END
         NEXT STATE.RANGE                ; * JMK04
      NEXT I
      IF NO.YES.TABLE.SETUP THEN
         MSG = 'Missing table number for "Y" table on state '
         MSG:= '"':RED.ON:STATE.ZIP.REC<1,NO.YES.TABLE.SETUP>:TERM.NORM:'"'
         MSG:= ' (State # = ':RED.ON:NO.YES.TABLE.SETUP:TERM.NORM
         MSG:= ' Zip code "':YEL.ON:NO.ZIP.NUM:TERM.NORM:'")'
         CALL ELINE(MSG)
         GOTO ISP.1
      END
      IF NO.TABLE.SETUP THEN
         MSG = 'Missing table numbers prevent on line audit on state '
         MSG:= '"':RED.ON:STATE.ZIP.REC<1,NO.TABLE.SETUP>:TERM.NORM:'"'
         CALL ELINE(MSG)
      END

      RETURN
* INPUT : AZIPS.REC<2> - (MV) Start Zip
*         AZIPS.REC<3> - (MV) End Zip
*         AZIPS.REC<4> - (MV) Y/N Flag
*         AZIPS.REC<5> - (MV) Table Number
*
* OUTPUT: ALL.ZIPS<X,1-999> - Direct Access to Zip 1-999 to alter Included
*                             or exculded or table number
*         ALL.ZIPS<1> - (MV) Y/N Flag
*         ALL.ZIPS<2> - (MV) Table Number
*
****************************************************
EXTRACT.AUDIT.ZIPS:
****************************************************
*
* Init - Set all to FALSE
*
      PER=''
      ALL.ZIPS = 0
      FOR ZIP.POS = 1 TO 999             ; * 999+1 = LAST MARKER
         ALL.ZIPS<1,ZIP.POS> = FALSE
         ALL.ZIPS<2,ZIP.POS> = ''
         ALL.ZIPS<3,ZIP.POS> = ZIP.POS'R%3'        ; * JMK04
      NEXT ZIP.POS
      CNT=999                            ; * JMK04
      FOR A=65 TO 90                     ; * JMK04
         APOS=CHAR(A)                    ; * JMK04
         FOR B=0 TO 9                    ; * JMK04
            BPOS=B                       ; * JMK04
            FOR C=65 TO 90               ; * JMK04
               CPOS=CHAR(C)              ; * JMK04
               CNT+=1                    ; * JMK04
               CAN.ZIP=APOS:BPOS:CPOS    ; * JMK04
               ALL.ZIPS<1,CNT>=FALSE     ; * JMK04
               ALL.ZIPS<2,CNT>=''        ; * JMK04
               ALL.ZIPS<3,CNT>=CAN.ZIP   ; * JMK04
            NEXT C                       ; * JMK04
         NEXT B                          ; * JMK04
      NEXT A                             ; * JMK04
      CNT+=1                             ; * JMK08
      ALL.ZIPS<1,CNT>=FALSE              ; * JMK08
      ALL.ZIPS<2,CNT>=''                 ; * JMK08
      ALL.ZIPS<3,CNT>='ZZZ'              ; * JMK08
      MAX.ZIPS=DCOUNT(ALL.ZIPS<1>,@VM)+1           ; * JMK04
      ALL.ZIPS<1,MAX.ZIPS> = ''          ; * JMK04
      ALL.ZIPS<2,MAX.ZIPS> = ''          ; * JMK04
      ALL.ZIPS<3,MAX.ZIPS> = ''          ; * JMK04
*
* Mark legitimate state ranges as 'N' - Only INVALID
* zips will then remain marked FALSE!
*
      PER=''
      FOR X = 1 TO NUM.ZIPS
         CALL PROG.BAR(22,X,NUM.ZIPS,PER)
         LOCATE STATE.ZIP.REC<2,X> IN ALL.ZIPS<3> SETTING STATE.BEG.POS ELSE STATE.BEG.POS-=1        ; * JMK04
         LOCATE STATE.ZIP.REC<3,X> IN ALL.ZIPS<3> SETTING STATE.END.POS ELSE STATE.END.POS-=1        ; * JMK04
         FOR STATE.RANGE = STATE.BEG.POS TO STATE.END.POS    ; * JMK04
            ZIP.NUM=ALL.ZIPS<3,STATE.RANGE>        ; * JMK04
            ZIP.POS=STATE.RANGE
            ALL.ZIPS<1,STATE.RANGE> = 'N'
            ALL.ZIPS<2,STATE.RANGE> = ''
         NEXT STATE.RANGE                ; * JMK04
      NEXT X
*
* Loop though all zips and setup a Zip-to-State(with flags) table
*
* NOTE: Zip number 1000 is used for force a N in that position to write
*       out zip number 999 without any extra code.
*
* Do not modify zips that are set to FALSE - They are not legit. zip
* codes.
*
      PER=''
      NUM.AUDITS = DCOUNT(AZIPS.REC<2>, @VM)
      FOR AUDIT.NUM = 1 TO NUM.AUDITS
         CALL PROG.BAR(22,AUDIT.NUM,NUM.AUDITS,PER)
         LOCATE AZIPS.REC<2,AUDIT.NUM> IN ALL.ZIPS<3> SETTING AZIP.BEG.POS ELSE AZIP.BEG.POS-=1      ; * JMK04
         LOCATE AZIPS.REC<3,AUDIT.NUM> IN ALL.ZIPS<3> SETTING AZIP.END.POS ELSE AZIP.END.POS-=1      ; * JMK04
         FOR AZIP.RANGE = AZIP.BEG.POS TO AZIP.END.POS       ; * JMK04
            ZIP.NUM=ALL.ZIPS<3,AZIP.RANGE>         ; * JMK04
            ZIP.POS=AZIP.RANGE
            IF ALL.ZIPS<1,AZIP.RANGE> # FALSE THEN           ; * JMK04
               ALL.ZIPS<1,AZIP.RANGE> = AZIPS.REC<4,AUDIT.NUM>         ; * JMK04
               ALL.ZIPS<2,AZIP.RANGE> = AZIPS.REC<5,AUDIT.NUM>         ; * JMK04
            END
         NEXT AZIP.RANGE                 ; * JMK04
      NEXT AUDIT.NUM
*
* Remove any FALSE flags - Make ''
*
      PER=''
      FOR ZIP.NUM = 1 TO MAX.ZIPS        ; * JMK04
         CALL PROG.BAR(22,ZIP.NUM,MAX.ZIPS,PER)
         IF ALL.ZIPS<1,ZIP.NUM> = FALSE THEN
            ALL.ZIPS<1,ZIP.NUM> = ''
            ALL.ZIPS<2,ZIP.NUM> = ''
         END
      NEXT ZIP.NUM

      RETURN

****************************************************
BUILD.ZIP.DISPLAY:
****************************************************
      TEMP=''
      FOR AUDIT.NUM = 1 TO NUM.AUDITS
         IF TEMP THEN TEMP:=', '
         IF T.AZIPS.REC<2,AUDIT.NUM>=T.AZIPS.REC<3,AUDIT.NUM> THEN
            TEMP:= T.AZIPS.REC<2,AUDIT.NUM>'R%3'
         END ELSE
            IF AZIPS.REC<2,AUDIT.NUM+1> = AZIPS.REC<3,AUDIT.NUM> THEN
               TEMP:= T.AZIPS.REC<2,AUDIT.NUM>'R%3':', ':T.AZIPS.REC<3,AUDIT.NUM>'R%3'
            END ELSE
               TEMP:= T.AZIPS.REC<2,AUDIT.NUM>'R%3':'-':T.AZIPS.REC<3,AUDIT.NUM>'R%3'
            END
         END
      NEXT AUDIT.NUM

      RETURN
****************************************************
INPUT.EFF.DATE:
****************************************************
      NEW.BEG.EFF.DATE = 0               ; * If Beg.Eff.Date was chosen these will
      NEW.END.EFF.DATE = 0               ; * contain a non-zero value
      FAILURE=FALSE
      DATE.CHANGED = FALSE
      SAVE.EFF.DATE = TRUE
      NUM.EFF.DATE.PGS=1                 ; * JMK12
      EFF.DATE.PG=1                      ; * JMK12
*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN
*
IED.1:
      GOSUB DSP.EFF.DATE.MENU
      GOSUB LIST.DATES

IED.2:
      IF EXIT.IT THEN GOTO IED.EXIT

      CRT @(0,15):' Enter Option :    '
      HELP = "OPTIONS: NN/NN/NN=Select Date [H]elp [X]=Back [EX]it Prog"
      IF NUM.EFF.DATE.PGS>1 THEN         ; * JMK12
         HELP:=' [F]WD [B]CK'            ; * JMK12
      END                                ; * JMK12
      MASK = 'X '

      CALL GEN.IN(16,15,MASK,'',Q,0,10,'','',1,16,15,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO IED.2
         CASE QI = 'X'
            FAILURE=TRUE
         CASE QI = ''
*
* Print Screen
*
*       CASE QI = 'P'
*           CRT PRINT.SCREEN:
*           GOTO IED.2

* 1) Select Date Range
         CASE QI = '1'
            GOSUB SELECT.DATE
            IF FAILURE THEN
               GOSUB DSP.EFF.DATE.MENU
               GOTO IED.2
            END
* 2) Add Date Range
         CASE QI = '2'
            GOSUB ADD.DATES
            GOTO IED.1
* 3) Delete Date Range
         CASE QI = '3'
            BEGIN CASE                   ; * JMK08
               CASE USER.NAME='DAVID'    ; * JMK08
               CASE USER.NAME='CCOX'
               CASE 1                    ; * JMK08
                  CALL ELINE('This Feature has been Disabled by IT')   ; * JMK08
                  GOTO IED.1             ; * JMK08
            END CASE                     ; * JMK08
            GOSUB DELETE.DATE
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END
* 4) Edit Closing Date Range
         CASE QI = '4'
*           GOSUB EDIT.CLOSING.DATE
            GOSUB EDIT.EFF.DATE
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END
* 5) List Dates
         CASE QI = '5'
            GOSUB TOGGLE.DATE
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END
* 6) Add Date Range
         CASE QI = '6'
            GOSUB COPY.DATES
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END
            GOTO IED.1
* 7) Add Notes                                ;* NPR02 Otion Added
         CASE QI = '7'
            GOSUB EDIT.NOTES
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END
            GOTO IED.1
* 8) Forward a page
         CASE QI = 'F' AND NUM.EFF.DATE.PGS > 1    ; * JMK12
            EFF.DATE.PG+=1               ; * JMK12
            IF EFF.DATE.PG>NUM.EFF.DATE.PGS THEN   ; * JMK12
               EFF.DATE.PG=NUM.EFF.DATE.PGS        ; * JMK12
            END                          ; * JMK12
            GOTO IED.1                   ; * JMK12
* 9) Backward a page
         CASE QI = 'B' AND NUM.EFF.DATE.PGS > 1    ; * JMK12
            EFF.DATE.PG-=1               ; * JMK12
            IF EFF.DATE.PG<1 THEN        ; * JMK12
               EFF.DATE.PG=1             ; * JMK12
            END                          ; * JMK12
            GOTO IED.1                   ; * JMK12
* Someone entered the date
         CASE ICONV(QI,'D')
            NUM.SEL = QI
            GOSUB SELECT.BY.DATE
            IF FAILURE THEN
               GOSUB DSP.EFF.DATE.MENU
               GOTO IED.2
            END
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=IED.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.EFF.DATE.MENU
            GOTO IED.2

         CASE 1
            CALL ELINE('Invalid option, valid options are "1","2","3","4","5","6" or "X".  Try Again.')
            GOTO IED.2
      END CASE
****************************************************
IED.EXIT:
****************************************************
*
* COMMON EXIT POINT... do any necessary clean up or screen region marking
* for refreshing.

      GOSUB DSP.ENTRY.SCN
      FOR Y = 1 TO NUM.OPTIONS
         IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
      NEXT Y
      RETURN

****************************************************
DSP.EFF.DATE.MENU:
****************************************************

      NUM.EFF.DATE.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)      ; * JMK12
      NUM.EFF.DATE.PGS = INT(NUM.EFF.DATE.TABLES/30)+(MOD(NUM.EFF.DATE.TABLES,30)#0)       ; * JMK12

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'Effective Date Range'
      CRT @(3, 5):'   Entry Options'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'1) Select Date Range'
      CRT @(1, 9):'2) Add Date Range'
      CRT @(1,10):'3) Delete Date Range'
*     CRT @(1,11):'4) Edit Closing Date Range'
      CRT @(1,11):'4) Edit Eff.Date Range'
      CRT @(1,12):'5) Toggle Enable/Disable'
      CRT @(1,13):'6) Copy Eff. Dates'
      RETURN

****************************************************
EDIT.CLOSING.DATE:
****************************************************
      FAILURE=FALSE

      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END
ECD.1:
      GOSUB DSP.EDIT.CLOSE.DATE.MENU

ECD.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]elp [X]=Back [EX]it Program"
      MASK = 'X '
      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ECD.2

         CASE QI = 'X' OR QI = ''
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ECD.HELP
            GOSUB DISPLAY.HELP
            GOTO ECD.1

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO ECD.2
            END ELSE
               GOSUB EDIT.CL.DATE
               IF NOT(FAILURE) THEN AUDIT.DATE.REC<2, NUM.SEL> = CLOSE.DATE
            END
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO ECD.2
      END CASE
      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN
****************************************************
EDIT.CL.DATE:
****************************************************

      CALL FB.DRAW.BOX(0,3,30,18,' ','')           ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')  ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')    ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  EDIT CLOSING DATE  ~~')

      OLD.CLOSE.DATE = AUDIT.DATE.REC<2,NUM.SEL>

      CRT @(43, 9):' Closing Date Editing'
      CRT @(43,10):'##  BEG DATE - END DATE'
      CRT @(43,11):'-----------------------'
      CRT @(43,12):NUM.SEL'R%2':'  ':AUDIT.DATE.REC<1,NUM.SEL>'D2/':' - '

ECLD.1:
      MASK = OLD.CLOSE.DATE'D2/'
      CRT @(0,22):"Enter the Closing Date for these Rates.":@(-4)
      HELP ="OPTIONS: [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(58,12,MASK,'DATE',Q,1,8,'','',2,58,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               GOTO ECLD.EXIT
            END ELSE
               GOTO ECLD.1
            END
*
* Todays date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            GOTO ECLD.1
*
* Exit routine
*
         CASE QI = 'X'
            GOTO ECLD.EXIT

         CASE QI = ''
            CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
            GOTO ECLD.1
      END CASE

      BEGIN.DATE = AUDIT.DATE.REC<1, NUM.SEL>
      CLOSE.DATE = TRIM(Q)
      CRT @(58,12):CLOSE.DATE'D2/'
      IF CLOSE.DATE < BEGIN.DATE THEN
         CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
         GOTO ECLD.1
      END
      IF NOT(FAILURE) AND OLD.CLOSE.DATE # CLOSE.DATE THEN
         FOR T = 1 TO NUM.TABLES
            IF T # NUM.SEL THEN
               CHECK = 0
               IF CLOSE.DATE => AUDIT.DATE.REC<1,T> THEN CHECK = 1
               IF CLOSE.DATE <= AUDIT.DATE.REC<2,T> THEN CHECK +=1
               IF CHECK=2 THEN
                  CALL ELINE("Closing Date resides within a prior date range.  Try again.")
                  CLOSE.DATE = OLD.CLOSE.DATE
                  GOTO ECLD.1
               END
               CHECK = 0
               IF BEGIN.DATE < AUDIT.DATE.REC<1, T> THEN CHECK = 1
               IF CLOSE.DATE => AUDIT.DATE.REC<1, T> THEN CHECK +=1
               IF CLOSE.DATE > AUDIT.DATE.REC<2, T> THEN CHECK +=1

               IF CHECK=3 THEN
                  CALL ELINE("Closing Date includes a prior date range.  Try again.")
                  CLOSE.DATE = OLD.CLOSE.DATE
                  GOTO ECLD.1
               END
            END
         NEXT
      END
ECLD.EXIT:
      RETURN

****************************************************
DSP.EDIT.CLOSE.DATE.MENU:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'  Effective Ending'
      CRT @(3, 5):'    Date Editing'
      CRT @(3, 6):'===================='
      CRT @(1, 8):'Please Choose the effective'
      CRT @(1, 9):'Date Range Num to change the'
      CRT @(1,10):'ending date on.'

      RETURN

****************************************************
EDIT.EFF.DATE:
****************************************************
      FAILURE=FALSE
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END
EED.1:
      GOSUB DSP.EDIT.EFF.DATE.MENU

EED.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]elp [X]=Back [EX]it Program"
      MASK = 'X '

      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EED.2
         CASE QI = 'X' OR QI = ''

*
* Help
*
         CASE QI='?' OR QI='H'
            CALL ELINE('NOT YET COMPLETED')
*            HELP.LINES=EED.HELP
*            GOSUB DISPLAY.HELP
            GOTO EED.1
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO EED.2
            END ELSE
               GOSUB EDIT.DATES
               IF NOT(FAILURE) THEN
*
* Effective Dates have Changed...
*
                  GOSUB SAVE.INBOUND.REC
                  GOSUB SAVE.OUTBOUND.REC
                  GOSUB SAVE.AUDIT.DATE.REC
*
* Copy over the necessary files
*
                  SRC.BEG.DATE = AUDIT.DATE.REC<1, NUM.SEL>
                  DST.BEG.DATE = BEGIN.DATE
                  IF SRC.BEG.DATE#DST.BEG.DATE THEN
                     GOSUB RENAME.INBOUND.REC
                     GOSUB RENAME.OUTBOUND.REC
                  END
* Update our Audit Record with the update Effective date
* range.
*
                  IF BEGIN.DATE#AUDIT.DATE.REC<1,NUM.SEL> THEN
                     DEL AUDIT.DATE.REC<1,NUM.SEL>
                     DEL AUDIT.DATE.REC<2,NUM.SEL>
                     TEMP=AUDIT.DATE.REC<3,NUM.SEL>
                     DEL AUDIT.DATE.REC<3,NUM.SEL>

                     LOCATE BEGIN.DATE IN AUDIT.DATE.REC<1> BY 'AR' SETTING NEW.TABLE ELSE
                        INS BEGIN.DATE BEFORE AUDIT.DATE.REC<1,NEW.TABLE>
                        IF CLOSE.DATE='' THEN CLOSE.DATE='OPEN'

* Insert the word OPEN if no close date is assign to keep the sub value
* correct. I then delete the word OPEN

                        INS CLOSE.DATE BEFORE AUDIT.DATE.REC<2,NEW.TABLE>
                        IF CLOSE.DATE='OPEN' THEN
                           CLOSE.DATE=''
                           AUDIT.DATE.REC<2>=CHANGE(AUDIT.DATE.REC<2>,'OPEN','')
                        END
                        INS TEMP BEFORE AUDIT.DATE.REC<3,NEW.TABLE>

                     END
                  END ELSE
                     AUDIT.DATE.REC<2,NUM.SEL>=CLOSE.DATE
                  END
                  AUDIT.DATE.REC<1, NUM.SEL> = BEGIN.DATE
                  AUDIT.DATE.REC<2, NUM.SEL> = CLOSE.DATE
*
* Is the changed Effective Date the current
* effective date we are editing.
*
                  IF BEG.EFF.DATE = OLD.BEGIN.DATE THEN
                     BEG.EFF.DATE = BEGIN.DATE
                     END.EFF.DATE = CLOSE.DATE
                  END
               END
            END
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO EED.2
      END CASE
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      RETURN

****************************************************
EDIT.DATES:
****************************************************

      CALL FB.DRAW.BOX(0,3,30,18,' ','')           ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')  ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')    ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  EDIT BEGINNING DATE  ~~')

      OLD.BEGIN.DATE = AUDIT.DATE.REC<1,NUM.SEL>
      OLD.CLOSE.DATE = AUDIT.DATE.REC<2,NUM.SEL>
      BEGIN.DATE = ''
      CLOSE.DATE = ''

      CRT @(43, 9):' Begining Date Editing'
      CRT @(43,10):'##  BEG DATE - END DATE'
      CRT @(43,11):'-----------------------'
      CRT @(43,12):NUM.SEL'R%2':'  ':OLD.BEGIN.DATE'D2/':' - ':OLD.CLOSE.DATE'D2/'

EBCD.1:
      MASK = OLD.BEGIN.DATE'D2/'
      CRT @(0,22):"Enter the Beginning Date for these Rates.":@(-4)
      HELP ="OPTIONS: [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(47,12,MASK,'DATE',Q,0,8,'','',2,47,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               GOTO EBCD.EXIT
            END ELSE
               GOTO EBCD.1
            END
*
* Todays date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            GOTO EBCD.1
*
* Exit routine
*
         CASE QI = 'X'
            FAILURE = TRUE
            GOTO EBCD.EXIT

         CASE QI = ''
            Q = OLD.BEGIN.DATE
      END CASE
      BEGIN.DATE = TRIM(Q)
      CRT @(47,12):BEGIN.DATE'D2/'
      IF NOT(FAILURE) AND OLD.BEGIN.DATE # BEGIN.DATE THEN
         FOR T = 1 TO NUM.TABLES
            IF T # NUM.SEL THEN          ; * Skip entry currently editing...
               CHECK = 0
               IF BEGIN.DATE => AUDIT.DATE.REC<1,T> THEN CHECK+=1
               IF BEGIN.DATE <= AUDIT.DATE.REC<2,T> THEN CHECK+=1
               IF CHECK=2 THEN
                  CALL ELINE("Beginning Date resides within a prior date range.  Try again.")
                  BEGIN.DATE = OLD.BEGIN.DATE
                  GOTO EBCD.1
               END
            END
         NEXT
      END
EBCD.2:

EBCD.3:
      MASK = OLD.CLOSE.DATE'D2/'
      CRT @(0,22):"Enter the Ending Date for these Rates.":@(-4)
      HELP ="OPTIONS: [T]oday [SPACE] to clear Ending Date [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(58,12,MASK,'DATE',Q,0,8,'','',2,58,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            GOTO EBCD.1
*
* Exit program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               GOTO EBCD.EXIT
            END ELSE
               GOTO EBCD.3
            END
*
* Todays date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            GOTO EBCD.3
*
* Exit routine
*
         CASE QI = 'X'
            GOTO EBCD.EXIT
         CASE QI = '' AND OLD.CLOSE.DATE
            Q = OLD.CLOSE.DATE
      END CASE

      IF TRIM(Q)='' THEN
         Q=''
         CRT @(58,12):SPACE(8)
         IF NOT(FAILURE) THEN
            FOR T = 1 TO NUM.TABLES
               IF T #NUM.SEL THEN
                  IF BEGIN.DATE <= AUDIT.DATE.REC<2,T> THEN
                     CALL ELINE('Date found between the eff. dates')
                     GOTO EBCD.3
                  END
               END
            NEXT T
         END
      END
      IF Q THEN
         CLOSE.DATE = TRIM(Q)
         CRT @(58,12):CLOSE.DATE'D2/'

         IF CLOSE.DATE < BEGIN.DATE THEN
            CALL ELINE("Invalid Date - The Ending date can't be before the Beginning date!")
            GOTO EBCD.3
         END
         IF NOT(FAILURE) THEN
            FOR T = 1 TO NUM.TABLES
               IF T # NUM.SEL THEN
                  CHECK = 0
                  IF CLOSE.DATE => AUDIT.DATE.REC<1, T> THEN CHECK = 1
                  IF CLOSE.DATE <= AUDIT.DATE.REC<2, T> THEN CHECK +=1
                  IF CHECK=2 THEN
                     CALL ELINE("Ending Date resides within a prior date range.  Try again.")
                     CLOSE.DATE = OLD.CLOSE.DATE
                     GOTO EBCD.3
                  END

                  CHECK = 0
                  IF BEGIN.DATE < AUDIT.DATE.REC<1, T> THEN CHECK= 1
                  IF CLOSE.DATE => AUDIT.DATE.REC<1, T> THEN CHECK+=1
                  IF CLOSE.DATE > AUDIT.DATE.REC<2, T> THEN CHECK+=1
                  IF CHECK=3 THEN
                     CALL ELINE("Ending Date includes a prior date range.  Try again.")
                     CLOSE.DATE = OLD.CLOSE.DATE
                     GOTO EBCD.3
                  END
               END
            NEXT
         END
      END

EBCD.EXIT:

      RETURN
****************************************************
DSP.EDIT.EFF.DATE.MENU:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):' Effective Date'
      CRT @(3, 5):'     Editing    '
      CRT @(3, 6):'===================='
      CRT @(1, 8):'Please Choose the Effective'
      CRT @(1, 9):'Date Range to edit.'

      RETURN

****************************************************
TOGGLE.DATE:
****************************************************
      FAILURE=FALSE
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END
TD.1:
      GOSUB DSP.TOGGLE.DATE.MENU

TD.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]elp [X]=Back [EX]it Program"
      MASK = 'X '
      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO TD.2
         CASE QI = 'X' OR QI = ''

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=TD.HELP
            GOSUB DISPLAY.HELP
            GOTO TD.1
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO TD.2
            END ELSE
               BEGIN CASE
                  CASE AUDIT.DATE.REC<3, NUM.SEL>=FBA.DISABLE
                     AUDIT.DATE.REC<3, NUM.SEL>=FBA.ENABLE
                  CASE 1
                     AUDIT.DATE.REC<3, NUM.SEL>=FBA.DISABLE
               END CASE
            END
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO TD.2
      END CASE
      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN
****************************************************
DSP.TOGGLE.DATE.MENU:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'   Effective Date'
      CRT @(3, 5):'       Toggle'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'Please Choose an Effective'
      CRT @(1, 9):'Date Range Num to change the'
      CRT @(1,10):'Enable/Disable flag.'
      RETURN

****************************************************
DELETE.DATE:
****************************************************
      FAILURE=FALSE
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END

DD.1:
      GOSUB DSP.DELETE.DATE.MENU

DD.2:
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS: [H]elp [X]=Back [EX]it Program"
      MASK = 'X '
      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO DD.2
         CASE QI = 'X' OR QI = ''
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=DD.HELP
            GOSUB DISPLAY.HELP
            GOTO DD.1

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO DD.2
            END ELSE
               YN.MSG = 'DELETE Date # ':NUM.SEL:' :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting Zip Tables .... Please wait...':@(-4):
* Remove OLD Zip Tables...
                  DEL.CARRIER.ID = CARRIER.ID
                  DEL.CLIENT.ID = CLIENT.ID

                  DEL.DATE = AUDIT.DATE.REC<1,NUM.SEL>
                  DEL.IO='I'
                  GOSUB REMOVE.AUDIT.TABLE
                  DEL.CARRIER.ID = CARRIER.ID
                  DEL.CLIENT.ID = CLIENT.ID

                  DEL.DATE = AUDIT.DATE.REC<1,NUM.SEL>
                  DEL.IO='O'
                  GOSUB REMOVE.AUDIT.TABLE
                  SAVE.EFF.DATE = FALSE
                  CRT @(0,22):@(-4):
* Check to see if we are deleting the one we are sitting on.
*
                  T.HITS = 0

                  IF AUDIT.DATE.REC<1,NUM.SEL>=BEG.EFF.DATE THEN T.HITS+=1
                  IF AUDIT.DATE.REC<2,NUM.SEL>=END.EFF.DATE THEN T.HITS+=1
* Go ahead and remove the Dates selected.
*
                  DEL AUDIT.DATE.REC<1,NUM.SEL>
                  DEL AUDIT.DATE.REC<2,NUM.SEL>
* Remove the Enable/Disable flag
*
                  DEL AUDIT.DATE.REC<3,NUM.SEL>
* Did we delete the one we were sitting on?
*
                  IF T.HITS = 2 THEN
*
* Yes we are deleteing the ones we are set to..
* then choose a new one... Choose the last one
* and continue.
*
                     LAST.ITEM=DCOUNT(AUDIT.DATE.REC<1>,@VM)
                     NEW.BEG.EFF.DATE = AUDIT.DATE.REC<1,LAST.ITEM>
                     NEW.END.EFF.DATE = AUDIT.DATE.REC<2,LAST.ITEM>

                     BEG.EFF.DATE = NEW.BEG.EFF.DATE
                     END.EFF.DATE = NEW.END.EFF.DATE
                     GOSUB BEG.EFF.DATE.CHANGED
                  END
               END ELSE
                  FAILURE = TRUE
               END
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO DD.2
      END CASE


      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN

****************************************************
DSP.DELETE.DATE.MENU:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'   Effective Date'
      CRT @(3, 5):'      Removal'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'Please Choose an Effective'
      CRT @(1, 9):'Date Range Num to DELETE.'
      RETURN

****************************************************
SELECT.DATE:
****************************************************
      NEW.BEG.EFF.DATE = 0
      NEW.END.EFF.DATE = 0
      FAILURE = FALSE
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END

SD.1:
      GOSUB DSP.SELECT.DATE.MENU

SD.2:
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS:  [H]elp [X]=Back [EX]it Program"
      MASK = 'X '
      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO SD.2
         CASE QI = 'X' OR QI = ''
            FAILURE=TRUE
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=SD.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.SELECT.DATE.MENU
            GOTO IED.2
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF NUM.SEL < 1 OR NUM.SEL > NUM.TABLES THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO SD.2
            END ELSE
               NEW.BEG.EFF.DATE = AUDIT.DATE.REC<1,NUM.SEL>
               NEW.END.EFF.DATE = AUDIT.DATE.REC<2,NUM.SEL>
               DATE.CHANGED = TRUE
            END
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO SD.2
      END CASE
      IF CLIENT.ID='99000' AND NEW.BEG.EFF.DATE#'12055' THEN
         CALL ELINE('Only Eff. Date Of 01/01/01 Can Be Selected For Third Party Carrier Coverage')
         GOTO SD.2
      END
      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN

****************************************************
SELECT.BY.DATE:
****************************************************
      NEW.BEG.EFF.DATE = 0
      NEW.END.EFF.DATE = 0
      FAILURE = FALSE
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END
      INUM.SEL = ICONV(NUM.SEL,"D2/")
      LOCATE INUM.SEL IN AUDIT.DATE.REC<1> SETTING WHERE THEN
         NEW.BEG.EFF.DATE = AUDIT.DATE.REC<1,WHERE>
         NEW.END.EFF.DATE = AUDIT.DATE.REC<2,WHERE>
         DATE.CHANGED = TRUE
      END ELSE
         CALL ELINE('Date "':NUM.SEL:'" was not found in the list of begining dates')
         FAILURE = TRUE
      END

      RETURN
****************************************************
DSP.SELECT.DATE.MENU:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'   Effective Date'
      CRT @(3, 5):'     Selection'
      CRT @(3, 6):'===================='
      CRT @(0, 8):' Please Choose an Effective'
      CRT @(0, 9):' Date Range Num to switch to.'

      RETURN
****************************************************
LIST.DATES:
****************************************************
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')
      CALL FB.PRINT.CENT(30,30+49,3,'~~ EFFECTIVE DATES ON FILE ~~')
      CRT @(31,4):' ## F BEG DATE/END DATE  ## F BEG DATE/END DATE':
*
* Count number of dates
*
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES > 0 THEN
*
* Draw Left side
*
         POS = 1                         ; * JMK12
         POS = (EFF.DATE.PG-1)*30+1
         Y.POS = 6
         X.POS = 32
         EXIT.LD = FALSE
         LOOP
            TEMP = POS'R%2':' '
            IF AUDIT.DATE.REC<3,POS> = FBA.DISABLE THEN
               TEMP:='D '
            END ELSE
               TEMP:='E '
            END
            TEMP:= AUDIT.DATE.REC<1,POS>'D2/':'-'      ; * Beg Eff Date
            TEMP:= AUDIT.DATE.REC<2,POS>'D2/'          ; * End Eff Date
            CRT @(X.POS,Y.POS):TEMP
            BEGIN CASE
*  End of list?
*
               CASE POS = NUM.TABLES
                  EXIT.LD = TRUE
*  Finished Column 2??
*
               CASE Y.POS = 20 AND X.POS = 56
                  EXIT.LD = TRUE
                  Y.POS = 6              ; * JMK12
                  X.POS = 32             ; * JMK12
*  Finished Column 1??
*
               CASE Y.POS = 20
                  POS+=1                 ; * Move to next entry
                  Y.POS=6                ; * Reset to top of Col #2
                  X.POS=56               ; * Set XPosition of screen for col 2
* Default - Inc Position and Entry Number
*
               CASE 1
                  POS+=1
                  Y.POS+=1
            END CASE
         WHILE NOT(EXIT.LD) DO
         REPEAT

      END ELSE
         CALL FB.PRINT.CENT(31,79,12,'* No Date Ranges Entered *')
      END

      RETURN
****************************************************
ADD.DATES:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')           ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')  ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')    ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  ADD DATE RANGE  ~~')
      TABLE.NUM = 0
      TABLE.BACK = 0
      NEW.TABLE = 1
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      OPEN.DATE = ''
      CLOSE.OLD.DATE = ''

      IF NUM.TABLES > 0 THEN
*
* Locate any OPEN tables that have not been closed yet
*
         Y = 1
         LOOP
         WHILE Y<=NUM.TABLES DO
            IF AUDIT.DATE.REC<2,Y> = '' THEN TABLE.NUM = Y       ; * Found Open
            Y+=1
         REPEAT

* Was a NON Closed Table Found?
         IF TABLE.NUM > 0 THEN
AD.0:
            CRT @(43, 9):'   Close Prior Table'
            CRT @(43,10):'##  BEG DATE - END DATE'
            CRT @(43,11):'-----------------------'
            CRT @(43,12):TABLE.NUM'R%2':'  ':AUDIT.DATE.REC<1,TABLE.NUM>'D2/':' - '
AD.1:
            MASK = 'MM/DD/YY'
            CRT @(0,22):"Enter a Closing Date for these Rates.":@(-4)
            IF TABLE.BACK THEN
               HELP ="OPTIONS: [T]oday [H]elp [X]=Abort,Don't change [EX]it Program"
            END ELSE
               HELP ="OPTIONS: [T]oday [H]elp [X]=Exit Back [EX]it Program"
            END
            CALL GEN.IN(58,12,MASK,'DATE',Q,1,8,'','',2,-8,12,0,QI,HELP,0,23)
            QI = OCONV(QI,'MCU')
            BEGIN CASE
*
* Exit program
*
               CASE QI = 'EX'
                  GOSUB ASK.ABOUT.QUITTING
                  IF NOT(EXIT.IT) THEN GOTO AD.1
                  RETURN
*
* Todays date
*
               CASE QI = 'T'
                  Q = DATE()
*
* Help
*
               CASE QI='?' OR QI='H'
                  HELP.LINES=CPT.HELP
                  GOSUB DISPLAY.HELP
                  GOTO AD.1
*
* Exit routine
*
               CASE QI = 'X'
                  GOTO AD.EXIT
               CASE QI = ''
                  CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
                  GOTO AD.1
            END CASE

            BEGIN.DATE = AUDIT.DATE.REC<1, TABLE.NUM>
            CLOSE.OLD.DATE = TRIM(Q)
            CRT @(58,12):CLOSE.OLD.DATE'D2/'
            IF CLOSE.OLD.DATE < BEGIN.DATE THEN
               CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
               GOTO AD.1
            END
            FOR T = 1 TO NUM.TABLES
               IF T # TABLE.NUM THEN
                  CHECK = 0
                  IF CLOSE.OLD.DATE => AUDIT.DATE.REC<1, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE <= AUDIT.DATE.REC<2, T> THEN CHECK +=1
                  IF CHECK=2 THEN
                     CALL ELINE("Closing Date resides within a prior date range.  Try again.")
                     GOTO AD.1
                  END
                  CHECK = 0
                  IF BEGIN.DATE < AUDIT.DATE.REC<1, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE => AUDIT.DATE.REC<1, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE > AUDIT.DATE.REC<2, T> THEN CHECK +=1
                  IF CHECK=3 THEN
                     CALL ELINE("Closing Date includes a prior date range.  Try again.")
                     GOTO AD.1
                  END
               END
            NEXT
         END ELSE
*
* An open table was not found... Get the closing date
* of previous table to avoid over lap on new opening table.
*
            CLOSE.OLD.DATE = AUDIT.DATE.REC<2,NUM.TABLES>
         END
      END


* Add New Table - OPEN DATE

AD.11:
      TABLE.BACK = 0
      CRT @(43, 9):'    Adding New Table'
      CRT @(43,10):'##  BEG DATE - END DATE'
      CRT @(43,11):'-----------------------'
      IF NUM.TABLES > 0 THEN
         TEMP = AUDIT.DATE.REC<1,NUM.TABLES>'D2/'
         TEMP:= ' - ':AUDIT.DATE.REC<2,NUM.TABLES>'D2/'
      END ELSE
         TEMP = 'No prior tables'
      END
      NEW.TABLE = NUM.TABLES+1
      CRT @(43,12):NUM.TABLES'R%2':'  ':TEMP
      CRT @(43,13):NEW.TABLE'R%2':STR(' ',23)
AD.2:
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter the Opening Date for the New Rates. ":@(-4)
      HELP = "OPTIONS: [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(47,13,MASK,'DATE',Q,1,8,'','',2,-8,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* EXIT program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO AD.2
            GOTO AD.EXIT
*
* Today's Date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ADR.HELP
            GOSUB DISPLAY.HELP
            GOTO AD.2
* Back up
*
         CASE QI = 'X'
            IF TABLE.NUM > 0 THEN
               TABLE.BACK = 1
               GOTO AD.0
            END ELSE
               GOTO AD.EXIT
            END
         CASE QI = ''
            CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
            GOTO AD.2
      END CASE
      IF CLIENT.ID='99000' AND Q#'12055' THEN
         CALL ELINE('Effective Date Must Be 01/01/01 For Third Party Carrier Coverage')
         GOTO AD.2
      END

      OPEN.DATE = TRIM(Q)
      CRT @(47,13):OPEN.DATE'D2/':' - '

* Start Checking Dates
*
* Does the Starting date begin on our "Just Closed" prior date field?
*
      IF (TABLE.NUM > 0) AND OPEN.DATE <= CLOSE.OLD.DATE AND OPEN.DATE => AUDIT.DATE.REC<1,TABLE.NUM> THEN
         T.ERROR=TRUE
      END ELSE
         T.ERROR = FALSE
      END

*
* Check the rest of the dates, unless we already have an error...
*
      FOR T = 1 TO NUM.TABLES UNTIL T.ERROR
         T.FAIL = 0
*
* Check starting date for being "IN A PRIOR DATE RANGE"
*
         IF OPEN.DATE => AUDIT.DATE.REC<1, T> THEN T.FAIL=1
         IF OPEN.DATE <= AUDIT.DATE.REC<2, T> THEN T.FAIL+=1
         IF T.FAIL = 2 THEN T.ERROR = TRUE
*
* Check for Starting on the same date as a prior date range
*
         IF OPEN.DATE = AUDIT.DATE.REC<1, T> THEN T.ERROR=TRUE
      NEXT
*
* Display error msg if necessary...
*
      IF T.ERROR THEN
         CALL ELINE("Invalid Date - The Opening date resides within a prior date range.")
         GOTO AD.2
      END
* Add New Table - CLOSE DATE
AD.3:
      CRT @(58,15):STR(' ',10)
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter a Closing Date for the New Rates.":@(-4)
      HELP = "OPTIONS: ''-Leave Open [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(58,13,MASK,'DATE',Q,0,8,'','',2,-8,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* Exit Program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO AD.3
            GOTO AD.EXIT
*
* Todays Date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ECD.HELP
            GOSUB DISPLAY.HELP
            GOTO AD.3
*
* Back up
*
         CASE QI = 'X'
            GOTO AD.11
         CASE QI = ''
            Q = ''
      END CASE
      CLOSE.DATE = Q
      CRT @(58,13):CLOSE.DATE'D2/'
      IF CLOSE.DATE # '' THEN
         IF CLOSE.DATE < OPEN.DATE THEN
            CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
            GOTO AD.3
         END
      END ELSE
         FOR T = 1 TO NUM.TABLES
            IF OPEN.DATE <= AUDIT.DATE.REC<1, T> THEN
               CALL ELINE("Closing Date resides within a prior date range.  Try again.")
               GOTO AD.3
            END
         NEXT
      END
      FOR T = 1 TO NUM.TABLES
         CHECK = 0
         IF CLOSE.DATE => AUDIT.DATE.REC<1, T> THEN CHECK = 1
         IF CLOSE.DATE <= AUDIT.DATE.REC<2, T> THEN CHECK +=1
         IF CHECK=2 THEN
            CALL ELINE("Closing Date resides within a prior date range.  Try again.")
            GOTO AD.3
         END
         CHECK = 0
         IF OPEN.DATE < AUDIT.DATE.REC<1, T> THEN CHECK = 1
         IF CLOSE.DATE => AUDIT.DATE.REC<1, T> THEN CHECK +=1
         IF CLOSE.DATE > AUDIT.DATE.REC<2, T> THEN CHECK +=1
         IF CHECK=3 THEN
            CALL ELINE("Closing Date includes a prior date range.  Try again.")
            GOTO AD.3
         END
      NEXT
      IF TABLE.NUM > 0 THEN
         AUDIT.DATE.REC<2,TABLE.NUM> = CLOSE.OLD.DATE
      END

      LOCATE OPEN.DATE IN AUDIT.DATE.REC<1> BY 'AR' SETTING NEW.TABLE ELSE
         INS OPEN.DATE BEFORE AUDIT.DATE.REC<1,NEW.TABLE>
         IF CLOSE.DATE='' THEN CLOSE.DATE='OPEN'

* Insert the word OPEN if no close date is assign to keep the sub value
* correct. I then delete the word OPEN

         INS CLOSE.DATE BEFORE AUDIT.DATE.REC<2,NEW.TABLE>
         IF CLOSE.DATE='OPEN' THEN
            CLOSE.DATE=''
            AUDIT.DATE.REC<2>=CHANGE(AUDIT.DATE.REC<2>,'OPEN','')
         END
         INS FBA.DISABLE BEFORE AUDIT.DATE.REC<3,NEW.TABLE>

      END
*
* Return new entry as a date.eff to switch to.
*
      NEW.BEG.EFF.DATE = OPEN.DATE
      NEW.END.EFF.DATE = CLOSE.DATE
      DATE.CHANGED = TRUE
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      CHANGES.MADE = 1
      CRT @(0,22):@(-4)
      CRT @(46,21):'[ Press Enter ]'
      HELP='Press the ENTER key to continue.'
      CALL GEN.IN(60,21,'','',Q,0,1,'','',1,60,21,0,QI,HELP,0,23)

AD.EXIT:
*
* COMMON EXIT POINT -
*
      CRT @(0,22):@(-4)
      RETURN
****************************************************
COPY.DATES:
****************************************************
      FAILURE=FALSE
      SOURCE.TABLE=''
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from')
         FAILURE = TRUE
         RETURN
      END
CD.1:
      GOSUB DSP.COPY.DATE.MENU

CD.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]elp [X]=Back [EX]it Program"
      MASK = 'X '

      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO CD.2
         CASE QI = 'X' OR QI = ''
            GOTO CD.EXIT

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=CD.HELP
            GOSUB DISPLAY.HELP
            GOTO CD.1
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO CD.2
            END
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO CD.2
      END CASE
      SOURCE.TABLE=QI

      CALL FB.DRAW.BOX(0,3,30,18,' ','')           ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')  ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')    ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  COPY DATE RANGE  ~~')
      CRT @(43, 7):'   Source Date Table'
      CRT @(43, 8):'##  BEG DATE - END DATE'
      CRT @(43, 9):'-----------------------'
      CRT @(43,10):SOURCE.TABLE'R%2':'  ':AUDIT.DATE.REC<1,SOURCE.TABLE>'D2/':' - ':AUDIT.DATE.REC<2,SOURCE.TABLE>'D2/'
      TABLE.NUM = 0
      TABLE.BACK = 0
      NEW.TABLE = 1
      OPEN.DATE = ''
      CLOSE.OLD.DATE = ''
      IF NUM.TABLES > 0 THEN
CD.0:
*
* Locate any OPEN tables that have not been closed yet
*
         Y = 1
         LOOP
         WHILE Y<=NUM.TABLES DO
            IF AUDIT.DATE.REC<2,Y> = '' THEN TABLE.NUM = Y       ; * Found Open
            Y+=1
         REPEAT

*
* Was a NON Closed Table Found?
*
         IF TABLE.NUM > 0 THEN
            CRT @(43,17):'   Close Prior Table'
            CRT @(43,18):'##  BEG DATE - END DATE'
            CRT @(43,19):'-----------------------'
            CRT @(43,20):TABLE.NUM'R%2':'  ':AUDIT.DATE.REC<1,TABLE.NUM>'D2/':' - '
CD.3:
            MASK = 'MM/DD/YY'
            CRT @(0,22):"Enter a Closing Date for these Rates.":@(-4)
            IF TABLE.BACK THEN
               HELP ="OPTIONS: [T]oday [H]elp [X]=Abort,Don't change [EX]it Program"
            END ELSE
               HELP ="OPTIONS: [T]oday [H]elp [X]=Exit Back [EX]it Program"
            END
            CALL GEN.IN(58,20,MASK,'DATE',Q,1,8,'','',2,-8,20,0,QI,HELP,0,23)
            QI = OCONV(QI,'MCU')
            BEGIN CASE
* Exit program
*
               CASE QI = 'EX'
                  GOSUB ASK.ABOUT.QUITTING
                  IF NOT(EXIT.IT) THEN GOTO CD.3
                  RETURN
* Todays date
*
               CASE QI = 'T'
                  Q = DATE()
* Help
*
               CASE QI='?' OR QI='H'
                  HELP.LINES=CPT.HELP
                  GOSUB DISPLAY.HELP
                  GOTO CD.3
* Exit routine
*
               CASE QI = 'X'
                  GOTO CD.EXIT

               CASE QI = ''
                  CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
                  GOTO CD.3
            END CASE

            BEGIN.DATE = AUDIT.DATE.REC<1, TABLE.NUM>
            CLOSE.OLD.DATE = TRIM(Q)
            CRT @(58,20):CLOSE.OLD.DATE'D2/'
            IF CLOSE.OLD.DATE < BEGIN.DATE THEN
               CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
               GOTO CD.3
            END
            FOR T = 1 TO NUM.TABLES
               IF T # TABLE.NUM THEN
                  CHECK = 0
                  IF CLOSE.OLD.DATE => AUDIT.DATE.REC<1, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE <= AUDIT.DATE.REC<2, T> THEN CHECK +=1
                  IF CHECK=2 THEN
                     CALL ELINE("Closing Date resides within a prior date range.  Try again.")
                     GOTO CD.3
                  END
                  CHECK = 0
                  IF BEGIN.DATE < AUDIT.DATE.REC<1, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE => AUDIT.DATE.REC<1, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE > AUDIT.DATE.REC<2, T> THEN CHECK +=1
                  IF CHECK=3 THEN
                     CALL ELINE("Closing Date includes a prior date range.  Try again.")
                     GOTO CD.3
                  END
               END
            NEXT
         END ELSE
*
* An open table was not found... Get the closing date
* of previous table to avoid over lap on new opening table.
*
            CLOSE.OLD.DATE = AUDIT.DATE.REC<2,NUM.TABLES>
         END
      END

*
* Copy to Destination Table - OPEN DATE
*
CD.11:
      TABLE.BACK = 0
      CRT @(43,12):'Destination Date Table'
      CRT @(43,13):'##  BEG DATE - END DATE'
      CRT @(43,14):'-----------------------'
      NEW.TABLE = NUM.TABLES+1
      CRT @(43,15):NEW.TABLE'R%2':STR(' ',23)

CD.4:
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter the Opening Date for the New Rates. ":@(-4)
      HELP = "OPTIONS: [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(47,15,MASK,'DATE',Q,1,8,'','',2,-8,15,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
* EXIT program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO CD.4
            GOTO CD.EXIT
* Today's Date
*
         CASE QI = 'T'
            Q = DATE()
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=CD.HELP
            GOSUB DISPLAY.HELP
            GOTO CD.4

* Back up
*
         CASE QI = 'X'
            IF TABLE.NUM > 0 THEN
               TABLE.BACK = 1
               GOTO CD.0
            END ELSE
               GOTO CD.EXIT
            END
         CASE QI = ''
            CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
            GOTO CD.4
      END CASE

      OPEN.DATE = TRIM(Q)
      CRT @(47,15):OPEN.DATE'D2/':' - '
*
* Start Checking Dates
*
*
* Does the Starting date begin on our "Just Closed" prior date field?
*
      IF (TABLE.NUM > 0) AND OPEN.DATE <= CLOSE.OLD.DATE AND OPEN.DATE => AUDIT.DATE.REC<1,TABLE.NUM> THEN
         T.ERROR=TRUE
      END ELSE
         T.ERROR = FALSE
      END
* Check the rest of the dates, unless we already have an error...
*
      FOR T = 1 TO NUM.TABLES UNTIL T.ERROR
         T.FAIL = 0
*
* Check starting date for being "IN A PRIOR DATE RANGE"
*
         IF OPEN.DATE => AUDIT.DATE.REC<1, T> THEN T.FAIL=1
         IF OPEN.DATE <= AUDIT.DATE.REC<2, T> THEN T.FAIL+=1
         IF T.FAIL = 2 THEN T.ERROR = TRUE
* Check for Starting on the same date as a prior date range
*
         IF OPEN.DATE = AUDIT.DATE.REC<1, T> THEN T.ERROR=TRUE
      NEXT
*
* Display error msg if necessary...
*
      IF T.ERROR THEN
         CALL ELINE("Invalid Date - The Opening date resides within a prior date range.")
         GOTO CD.4
      END

*
* Add New Table - CLOSE DATE
*
CD.5:
      CRT @(58,15):STR(' ',10)
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter a Closing Date for the New Rates.":@(-4)
      HELP = "OPTIONS: ''-Leave Open [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(58,15,MASK,'DATE',Q,0,8,'','',2,-8,15,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
* Exit Program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO CD.5
            GOTO CD.EXIT
* Todays Date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ECD.HELP
            GOSUB DISPLAY.HELP
            GOTO CD.5
* Back up
*
         CASE QI = 'X'
            GOTO CD.11
         CASE QI = ''
            Q = ''
      END CASE
      CLOSE.DATE = Q
      CRT @(58,13):CLOSE.DATE'D2/'
      IF CLOSE.DATE # '' THEN
         IF CLOSE.DATE < OPEN.DATE THEN
            CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
            GOTO CD.5
         END
      END ELSE
         FOR T = 1 TO NUM.TABLES
            IF OPEN.DATE <= AUDIT.DATE.REC<1, T> THEN
               CALL ELINE("Closing Date resides within a prior date range.  Try again.")
               GOTO CD.5
            END
         NEXT
      END

      FOR T = 1 TO NUM.TABLES
         CHECK = 0
         IF CLOSE.DATE => AUDIT.DATE.REC<1, T> THEN CHECK = 1
         IF CLOSE.DATE <= AUDIT.DATE.REC<2, T> THEN CHECK +=1
         IF CHECK=2 THEN
            CALL ELINE("Closing Date resides within a prior date range.  Try again.")
            GOTO CD.5
         END
         CHECK = 0
         IF OPEN.DATE < AUDIT.DATE.REC<1, T> THEN CHECK = 1
         IF CLOSE.DATE => AUDIT.DATE.REC<1, T> THEN CHECK +=1
         IF CLOSE.DATE > AUDIT.DATE.REC<2, T> THEN CHECK +=1
         IF CHECK=3 THEN
            CALL ELINE("Closing Date includes a prior date range.  Try again.")
            GOTO CD.5
         END
      NEXT

      IF TABLE.NUM > 0 THEN
         AUDIT.DATE.REC<2,TABLE.NUM> = CLOSE.OLD.DATE
      END

      LOCATE OPEN.DATE IN AUDIT.DATE.REC<1> BY 'AR' SETTING NEW.TABLE ELSE
         INS OPEN.DATE BEFORE AUDIT.DATE.REC<1,NEW.TABLE>
         IF CLOSE.DATE='' THEN CLOSE.DATE='OPEN'
*
* Insert the word OPEN if no close date is assign to keep the sub value
* correct. I then delete the word OPEN
*
         INS CLOSE.DATE BEFORE AUDIT.DATE.REC<2,NEW.TABLE>
         IF CLOSE.DATE='OPEN' THEN
            CLOSE.DATE=''
            AUDIT.DATE.REC<2>=CHANGE(AUDIT.DATE.REC<2>,'OPEN','')
         END
         INS AUDIT.DATE.REC<3,SOURCE.TABLE> BEFORE AUDIT.DATE.REC<3,NEW.TABLE>

      END
      BEG.EFF.DATE = AUDIT.DATE.REC<1,SOURCE.TABLE>
      T.NAME=CARRIER.ID:'*':BEG.EFF.DATE
      READ AZIPS.OUT.REC FROM F.AUDIT.ZIPS,T.NAME ELSE AZIPS.OUT.REC=''
      BEG.EFF.DATE = AUDIT.DATE.REC<1,NEW.TABLE>
      GOSUB SAVE.SHIPPING.POINTS
* Return new entry as a date.eff to switch to.
*
      NEW.BEG.EFF.DATE = OPEN.DATE
      NEW.END.EFF.DATE = CLOSE.DATE
      DATE.CHANGED = TRUE
      NUM.TABLES = DCOUNT(AUDIT.DATE.REC<1>, @VM)
      CHANGES.MADE = 1
      CRT @(0,22):@(-4)
      CRT @(46,21):'[ Press Enter ]'
      HELP='Press the ENTER key to continue.'
      CALL GEN.IN(60,21,'','',Q,0,1,'','',1,60,21,0,QI,HELP,0,23)

CD.EXIT:
*
* COMMON EXIT POINT -
*
      CRT @(0,22):@(-4)

      RETURN
****************************************************
EDIT.NOTES: ; * Added options
****************************************************

****************************************************
DSP.COPY.DATE.MENU:
****************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'   Effective Date'
      CRT @(3, 5):'        Copy'
      CRT @(3, 6):'===================='
      CRT @(1, 8):'Please Choose an Effective'
      CRT @(1, 9):'Date Range Num as the SOURCE'
      CRT @(1,10):'For the COPY'
      RETURN

****************************************************
ENABLE.EFF.DATE:
****************************************************
      LOCATE BEG.EFF.DATE IN AUDIT.DATE.REC<1> SETTING EFF.DATE.INDEX ELSE
         RETURN
      END
      AUDIT.DATE.REC<3,EFF.DATE.INDEX> = FBA.ENABLE
      RETURN
****************************************************
DISABLE.EFF.DATE:
****************************************************
      LOCATE BEG.EFF.DATE IN AUDIT.DATE.REC<1> SETTING EFF.DATE.INDEX ELSE
         RETURN
      END
      AUDIT.DATE.REC<3,EFF.DATE.INDEX> = FBA.DISABLE
      RETURN
****************************************************
GET.EFF.DATE.STATUS:
****************************************************
      LOCATE BEG.EFF.DATE IN AUDIT.DATE.REC<1> SETTING EFF.DATE.INDEX ELSE
         RETURN
      END
      BEGIN CASE
         CASE AUDIT.DATE.REC<3,EFF.DATE.INDEX> = FBA.DISABLE
            EFF.DATE.ENABLED = FALSE
         CASE 1
            EFF.DATE.ENABLED = TRUE
      END CASE
      RETURN
****************************************************
INPUT.CARRIER:
****************************************************
* ASK FOR CARRIER
*
      NEW.CARRIER.ID = 0
      FAILURE=FALSE
ICA.0:
      HELP="Enter carrier #, 'name' for search, [C]opy [DELETE] [L]ist, [X]-Back [EX]it."
      IF CARRIER.ID THEN
         MASK = CARRIER.ID
      END ELSE
         MASK = '#####'
      END
ICA.1:
      CRT @(16, 4):STR(' ',49):
      CALL GEN.IN(16,4,MASK,'',Q,0,20,'','',2,16,4,0,QI,HELP,0,23)
      QI=TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI='X' OR QI=''
            FAILURE = TRUE
            RETURN
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ICA.1
            RETURN
        CASE QI EQ 'C'
* Copy carrier
*
            IF CARRIER.ID > 0 THEN
               GOSUB SAVE.AUDIT.DATE.REC
               GOSUB SAVE.SHIPPING.POINTS
            END
            GOSUB COPY.CARRIER
            GOSUB REFRESH.DISPLAY
            NEW.CARRIER.ID = DST.CARRIER.ID

         CASE QI EQ 'DELETE'
* Delete Carrier
*
            GOSUB DELETE.CARRIER
            IF SRC.CARRIER.ID = CARRIER.ID THEN
               CARRIER.ID = 0
               GOSUB CARRIER.ID.CHANGED
               GOTO ICA.0
            END
         CASE QI EQ 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' BY CARRIER.NAME WITH EQUIP = "" CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO ICA.0
         CASE NUM(QI)
            NEW.CARRIER.ID=Q'R%5'
            IF NEW.CARRIER.ID='13171' THEN         ; * JMK06
               CALL ELINE('This carrier uses setup options for carrier 01625')   ; * JMK06
               GOTO ICA.1                ; * JMK06
            END                          ; * JMK06
            IF NEW.CARRIER.ID='12244' THEN         ; * JMK06
               CALL ELINE('This carrier uses setup options for carrier 12826')   ; * JMK06
               GOTO ICA.1                ; * JMK06
            END                          ; * JMK06
            IF NEW.CARRIER.ID='00537' THEN         ; * JMK06
               CALL ELINE('This carrier uses setup options for carrier 12826')   ; * JMK06
               GOTO ICA.1                ; * JMK06
            END                          ; * JMK06

         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO ICA.1

         CASE 1
            CALL ELINE('Invalid Entry.')
            GOTO ICA.1
      END CASE

*
* Open Carrier Records
*
      READ TEMP.REC FROM F.CARRIERS, NEW.CARRIER.ID ELSE
         CALL ELINE(NEW.CARRIER.ID:' is an invalid Carrier Number. Try Again.')
         GOTO ICA.0
      END
      RETURN
****************************************************
DISABLE.CARRIER:
****************************************************
      AUDIT.REC<FBA.CARRIER.STATUS> = FBA.DISABLE
      RETURN
****************************************************
ENABLE.CARRIER:
****************************************************
      AUDIT.REC<FBA.CARRIER.STATUS> = FBA.ENABLE
      RETURN
****************************************************
LOAD.CARRIER.DESC:
****************************************************
* Open Carrier Audit Information
*
      READ TEMP.REC FROM F.CARRIERS, CARRIER.ID THEN
         FAILURE = FALSE
         CARRIER.REC = TEMP.REC
         CARRIER.NAME = CARRIER.REC<1>
         CARRIER.CITY = CARRIER.REC<3>
         CARRIER.STATE = CARRIER.REC<4>
      END ELSE
         FAILURE=TRUE
         CALL ELINE('Carrier "':CARRIER.ID:'" is not a valid carrier!!!')
         GOSUB BEEP
      END
      RETURN
****************************************************
INPUT.CLIENT:
****************************************************
      NEW.CLIENT.ID = 0
      FAILURE=FALSE
ICL:
      HELP = "Enter client number, 'name' for search, [L]ist"
      IF CLIENT.ID THEN
         HELP:= " [X]=Back [EX]it"
      END ELSE
         HELP:= " [EX]it"
      END
      MASK = '#####'
      CRT @(16,3):STR(' ',49):

ICL.1:
      CALL GEN.IN(16,3,MASK,'',Q,0,25,'','',2,16,3,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
* Exit program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ICL.1
            END
* Exit routine
*
         CASE QI = '' OR QI='X'
            FAILURE=TRUE
            RETURN
         CASE NUM(QI) AND QI # ''
            NEW.CLIENT.ID = QI'R%5'
         CASE QI EQ 'L'
            EXECUTE "SELECT VOC 'FB.AUDIT' *A7" PASSLIST CAPTURING OUTPUT
            IF @SELECTED THEN
               EXECUTE 'SELECT CLIENTS' PASSLIST CAPTURING OUTPUT
               IF @SELECTED THEN
                  EXECUTE 'SORT CLIENTS BY 2 2 CSZ'
               END
            END
            CALL ELINE('')
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOTO ICL
         CASE NOT(QI MATCHES "0N") AND QI # ''
            CALL SOUNDEX.DISPLAY(QI,'BCUST','SDX.CLIENTS,NAME',2,ITEM.LIST)
            BEGIN CASE
               CASE ITEM.LIST = ''
                  GOTO ICL               ; * START OVER
               CASE DCOUNT(ITEM.LIST,@VM) GT 1     ; * JIM
                  GOTO ICL               ; * START OVER
               CASE 1
                  DATA ITEM.LIST<1,1>
* Refresh screen and mark fields to be updated...
*
                  GOSUB DSP.ENTRY.SCN
                  FOR Y = 1 TO NUM.OPTIONS
                     IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
                  NEXT Y
                  GOTO ICL               ; * START OVER
            END CASE
         CASE 1
            CALL ELINE('Invalid Client Name, Try Again.')
            GOTO ICL.1
      END CASE
* Check to see if it is a valid client or not
*
      MATREAD TCLIENT.REC FROM F.CLIENTS,NEW.CLIENT.ID ELSE
         CALL ELINE("Client number ":NEW.CLIENT.ID:" is not a valid client #")
         GOTO ICL.1
      END
      CBVIN=''
      CBVIN<1>=NEW.CLIENT.ID
      CALL CLIENT.BLOCK(CBVIN,CBVOUT,F.CAR.CTRL)
      TEMP.CLIENT=NEW.CLIENT.ID:', ':TCLIENT.REC(2):' (':TCLIENT.REC(4):', ':TCLIENT.REC(5):')'
      CRT @(16,3):CBVOUT<1>:TEMP.CLIENT'L#49':@(-6)

      RETURN
****************************************************
DISABLE.CLIENT:
****************************************************
      TEMP = ''
      TEMP<1> = FBA.DISABLE
      TEMP<2> = 'REMOVE THIS FILE TO ENABLE THE CLIENT'
      CLIENT.ENABLED = FALSE
      RETURN
****************************************************
ENABLE.CLIENT:
****************************************************
      CLIENT.ENABLED = TRUE
      RETURN
****************************************************
READ.CLIENT.STATUS:
****************************************************
      READ TEMP FROM F.AUDIT,CLIENT.DISABLE.FILE THEN
         CLIENT.ENABLED = FALSE
      END ELSE
         CLIENT.ENABLED = TRUE
      END
      RETURN
****************************************************
LOAD.CLIENT.DESC:
****************************************************
      MATREAD CLIENT.REC FROM F.CLIENTS,CLIENT.ID THEN
         FAILURE=FALSE
         CLIENT.NAME = CL.NAME
         IF CL.ZIP.FLAG=6 OR CL.ZIP.FLAG=5 OR CL.ZIP.FLAG='C' ELSE
            CALL ELINE("Warning Zip Needs to be corrected! Zip in Client Maint is not 5, 6, or C")
         END
         IF CL.AUDITOR='' THEN
            CALL ELINE("Client: ":CLIENT.ID:" ":CLIENT.NAME:" Does Not Have an Auditor")
            AUDITOR.TEXT='None-Assigned'
         END ELSE
            AUDITOR.TEXT=CL.AUDITOR
         END
         CRT @(38,0):AUDITOR.TEXT'L#25'
      END ELSE
         FAILURE=TRUE
      END

      RETURN
****************************************************
SAVE.AUDIT.DATE.REC:
****************************************************
      IF WRITE.DATA AND CARRIER.ID THEN
         WRITE AUDIT.DATE.REC ON F.AUDIT.DATE,CARRIER.ID
         ORG.AUDIT.DATE.REC = AUDIT.DATE.REC       ; * Update 'Changed' compare record
      END
      RETURN
****************************************************
SAVE.INBOUND.REC:
****************************************************
* Save The Inbound Shipping Points
*
      IF WRITE.DATA AND AZIPS.IN.REC<1> # '' THEN
         T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':BEG.EFF.DATE:'*':FBA.T.LTLALL:'*I'
         IF ORG.AZIPS.IN.REC#AZIPS.IN.REC THEN
            AZIPS.IN.REC<6,-1>=USER.NAME
            AZIPS.IN.REC<7,-1>=DATE()
            AZIPS.IN.REC<8,-1>=TIME()'R0'
         END
         ORG.AZIPS.IN.REC = AZIPS.IN.REC           ; * Update 'Changed' compare record
      END
      RETURN
****************************************************
LOAD.INBOUND.REC:
****************************************************
* Save The Inbound Shipping Points
*
      T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':BEG.EFF.DATE:'*':FBA.T.LTLALL:'*I'
         ORG.AZIPS.IN.REC = AZIPS.IN.REC           ; * SAVE ORGINAL OFF
         IF AZIPS.IN.REC<5>='' AND AZIPS.IN.REC<1,1> # '' THEN
            AZIPS.IN.REC<5> = AZIPS.IN.REC<4>
            T.COUNT = DCOUNT(AZIPS.IN.REC<4>,@VM)
            FOR T = 1 TO T.COUNT
               AZIPS.IN.REC<4,T> = 'Y'
            NEXT
         END
      RETURN
****************************************************
RENAME.INBOUND.REC:
****************************************************
      T.NAME1 = CARRIER.ID:'*':ROUTE.ZIP:'*':SRC.BEG.DATE:'*':FBA.T.LTLALL:'*I'
         T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':DST.BEG.DATE:'*':FBA.T.LTLALL:'*I'
         ORG.AZIPS.IN.REC = AZIPS.IN.REC           ; * Update 'Changed' compare record
      RETURN
****************************************************
DISABLE.INBOUND.ZIPS:
****************************************************
      IF AZIPS.IN.REC # '' THEN
         AZIPS.IN.REC<1> = FBA.DISABLE
      END
      RETURN
****************************************************
ENABLE.INBOUND.ZIPS:
****************************************************
      IF AZIPS.IN.REC#'' THEN
         AZIPS.IN.REC<1> = FBA.ENABLE
      END
      RETURN
****************************************************
SAVE.OUTBOUND.REC:
****************************************************
* Save The Outbound Shipping Points
*
      IF WRITE.DATA AND AZIPS.OUT.REC<1> # '' THEN
         T.NAME=CARRIER.ID:'*':BEG.EFF.DATE
         IF ORG.AZIPS.OUT.REC#AZIPS.OUT.REC THEN
            AZIPS.OUT.REC<6,-1>=USER.NAME
            AZIPS.OUT.REC<7,-1>=DATE()
            AZIPS.OUT.REC<8,-1>=TIME()'R0'
         END
         WRITE AZIPS.OUT.REC ON F.AUDIT.ZIPS,T.NAME
         ORG.AZIPS.OUT.REC = AZIPS.OUT.REC         ; * Update 'Changed' compare record
      END
      RETURN
****************************************************
LOAD.OUTBOUND.REC:
****************************************************
* Save The Outbound Shipping Points
*
      T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':BEG.EFF.DATE:'*':FBA.T.LTLALL:'*O'
      T.NAME = CARRIER.ID:'*':BEG.EFF.DATE
      READ AZIPS.OUT.REC FROM F.AUDIT.ZIPS,T.NAME THEN
         ORG.AZIPS.OUT.REC = AZIPS.OUT.REC         ; * Save off orginal
         IF AZIPS.OUT.REC<5>='' AND AZIPS.OUT.REC<1,1> # '' THEN
            AZIPS.OUT.REC<5> = AZIPS.OUT.REC<4>
            T.COUNT = COUNT(AZIPS.OUT.REC<4>,@VM)
            FOR T = 1 TO T.COUNT
               AZIPS.OUT.REC<4,T> = 'Y'
            NEXT
         END
      END ELSE
         AZIPS.OUT.REC = ''
      END
      RETURN
****************************************************
RENAME.OUTBOUND.REC:
****************************************************
      T.NAME1 = CARRIER.ID:'*':ROUTE.ZIP:'*':SRC.BEG.DATE:'*':FBA.T.LTLALL:'*O'
      T.NAME1 = CARRIER.ID:'*':SRC.BEG.DATE
      READ T.REC FROM F.AUDIT.ZIPS,T.NAME1 THEN
         T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':DST.BEG.DATE:'*':FBA.T.LTLALL:'*O'
         ORG.AZIPS.OUT.REC = AZIPS.OUT.REC         ; * Update 'Changed' compare record
      END
      RETURN
****************************************************
DISABLE.OUTBOUND.ZIPS:
****************************************************
      IF AZIPS.OUT.REC # '' THEN
         AZIPS.OUT.REC<1> = FBA.DISABLE
      END
      RETURN
****************************************************
ENABLE.OUTBOUND.ZIPS:
****************************************************
      IF AZIPS.OUT.REC # '' THEN
         AZIPS.OUT.REC<1> = FBA.ENABLE
      END
      RETURN
****************************************************
SAVE.SHIPPING.POINTS:
****************************************************
* Make sure we have enough criteria to save with
*
      WRITE.BOOLEAN = CLIENT.ID AND CARRIER.ID AND BEG.EFF.DATE
* Save RATE REC
*
      IF OPTIONS.STATE<4> # DISABLED AND WRITE.BOOLEAN THEN
         IF WRITE.DATA THEN
            GOSUB SAVE.INBOUND.REC
            GOSUB SAVE.OUTBOUND.REC
         END
      END
      RETURN
****************************************************
CLIENT.ID.CHANGED:
****************************************************
      ENTRY.POINT = 1
*
* Is Client ID Init? (If it is init - it MUST already be valid!-See input
* routine for the client.id)
*
      IF CLIENT.ID=0 THEN
*
* Client ID is blank - Clear line, and Disable everything down.
*
         OPTIONS<OPT.CLIENT>=CLEAR
         OPTIONS<OPT.CARRIER>=DISABLE
         OPTIONS<OPT.EFF.DATE>=DISABLE
         OPTIONS<OPT.SHIP.OUT>=DISABLE

         RETURN
      END ELSE
*
* Does Client.ID Exist?
*
         OPEN '','FB.AUDIT,':CLIENT.ID TO F.AUDIT THEN
*
* Yes it does exist!
*
            OPTIONS<OPT.CLIENT> = REFRESH
            OPTIONS<OPT.CARRIER> = ENABLE
            GOSUB READ.CLIENT.STATUS
*
* We are changing clients, Open the FB.AUDIT.ZIPS,
* create it if necessary
*
            OPEN '', 'FB.AUDIT.TP.REG,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
               EXECUTE 'CREATE-FILE DATA FB.AUDIT.TP.REG,':CLIENT.ID:' 7,1' PASSLIST CAPTURING OUTPUT
               OPEN '','FB.AUDIT.TP.REG,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
                  CALL OPEN.ABORT("FB.AUDIT.TP.REG,":CLIENT.ID, PROG.NAME)
               END
            END

            OPEN '', 'FB.AUDIT.TP.DATE,':CLIENT.ID TO F.AUDIT.DATE ELSE
               EXECUTE 'CREATE-FILE DATA FB.AUDIT.TP.DATE,':CLIENT.ID:' 7,1' PASSLIST CAPTURING OUTPUT
               OPEN '','FB.AUDIT.TP.DATE,':CLIENT.ID TO F.AUDIT.DATE ELSE
                  CALL OPEN.ABORT("FB.AUDIT.TP.DATE,":CLIENT.ID, PROG.NAME)
               END
            END
         END ELSE
*
* No it does not exist!
*
* DO we wish to create it?
*
            YN.MSG = '"':CLIENT.ID:'" is not setup! Do you want to set it up? :'
            YN.MASK = 'N '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'Y' THEN
*
* Yes Create it!
*
               CRT @(1,22):'Setting up files for client - Please wait':@(-4)
               CRT @(1,23):@(-4):
               EXECUTE 'CREATE-FILE DATA FB.AUDIT,':CLIENT.ID:' 101,1' PASSLIST CAPTURING OUTPUT      ; * NKH01
               OPEN '','FB.AUDIT,':CLIENT.ID TO F.AUDIT ELSE
                  CALL OPEN.ABORT("FB.AUDIT,":CLIENT.ID, PROG.NAME)
               END
*
* We are changing clients, Open the FB.AUDIT.ZIPS,
* create it if necessary
*
               OPEN '', 'FB.AUDIT.TP.REG,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
                  EXECUTE 'CREATE-FILE DATA FB.AUDIT.TP.REG,':CLIENT.ID:' 7,1' PASSLIST CAPTURING OUTPUT
                  OPEN '','FB.AUDIT.TP.REG,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
                     CALL OPEN.ABORT("FB.AUDIT.TP.REG,":CLIENT.ID, PROG.NAME)
                  END
               END

               OPEN '', 'FB.AUDIT.TABLES,':CLIENT.ID TO F.AUDIT.TABLES ELSE
                  EXECUTE 'CREATE-FILE DATA FB.AUDIT.TABLES,':CLIENT.ID:' 503,1' PASSLIST CAPTURING OUTPUT     ; * NKH01
                  OPEN '','FB.AUDIT.TABLES,':CLIENT.ID TO F.AUDIT.TABLES ELSE
                     CALL OPEN.ABORT("FB.AUDIT.TABLES,":CLIENT.ID, PROG.NAME)
                  END
               END
*
* Setup menu items
*
               OPTIONS<OPT.CARRIER>=CLEAR
               GOSUB DISABLE.CLIENT
            END ELSE
*
* No do not wish to creat it.
*
               OPTIONS<OPT.CLIENT>=CLEAR
               OPTIONS<OPT.CARRIER>=DISABLE
               CLIENT.ID=''
               RETURN
            END
*
* We just Created or Cleared the Client - Do disable the rest.
*
            OPTIONS<OPT.EFF.DATE>=DISABLE
            OPTIONS<OPT.SHIP.OUT>=DISABLE
            RETURN
         END
      END
      GOTO CIC.1
****************************************************
CARRIER.ID.CHANGED:
****************************************************
      ENTRY.POINT = 2
CIC.1:

*
* This is the entry point for drop downs or when CARRIER.ID has changed.
* If the CARRIER.ID # "" then the CARRIER.ID MUST be a valid carrier #,
* see the input routine for the CARRIER.ID
*
      IF CARRIER.ID=0 THEN
*
* Carrier ID is blank - Clear line, and Disable everything down.
*
         OPTIONS<OPT.CARRIER>=CLEAR
         OPTIONS<OPT.EFF.DATE>=DISABLE
         OPTIONS<OPT.SHIP.OUT>=DISABLE
         RETURN
      END ELSE
*
* Does the CARRIER.ID exist?
*
         OPTIONS<OPT.CARRIER> = REFRESH
         READ AUDIT.DATE.REC FROM F.AUDIT.DATE,CARRIER.ID THEN
            ORG.AUDIT.REC = AUDIT.REC    ; * Save off orginal
*
* Yes CARRIER.ID exists.. AUDIT.REC is Loaded
*
             OPTIONS<OPT.EFF.DATE>=ENABLE

* Did we load something other than our LTLALL
*
*
* No... Load the record...
*
         END ELSE
*
* Does the ENTRY.POINT = 2 (Routine entered at CARRIER.ID.CHANGED)
*
            IF ENTRY.POINT = 2 THEN
*
* Yes... Ask if want to create it.
*
               YN.MSG = 'Carrier "':CARRIER.ID:'" is not setup for this client!  Create it? :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
*
* Yes .. Create it!
*
                  AUDIT.REC=0
                  AUDIT.REC<FBA.CARRIER.STATUS>=FBA.DISABLE
                  AZIPS.IN.REC=''
                  AZIPS.OUT.REC=''
                  OPTIONS<OPT.EFF.DATE>=CLEAR
*
* Clear Routine Zip line and disable everything down
*
                  IF CLIENT.REC(270)='Y' THEN
                     EMAIL.OUT=''
                     EMAIL.OUT<1,-1>='EDITeam@afs.net'     ; * DRF02
                     EMAIL.OUT<2,-1>='MMCKAY@afs.net'
                     ACCT.MGR = CLIENT.REC(264)
                     ACCT.MGR.NAME = ""
                     ACCT.MGR.EMAIL = ""
                     IF ACCT.MGR # "" THEN
                        READ ACCT.MGR.REC FROM F.SLSMAN,ACCT.MGR THEN
                           ACCT.MGR.NAME = ACCT.MGR.REC<1>'L#25'
                           ACCT.MGR.EMAIL = ACCT.MGR.REC<8>'L#25'
                        END
                     END
                     EMAIL.OUT<2,-1>=ACCT.MGR.EMAIL
                     EMAIL.OUT<5,1>='Carrier was added to OLA for for ':CLIENT.ID
                     EMAIL.OUT<6>="Add carrier ":CARRIER.ID:" ":CARRIER.NAME:"  for EDI 210's "
                     EMAIL.OUT<6,-1>=CLIENT.ID:' ':CLIENT.NAME
                     EMAIL.OUT<7>=1      ; * Auto format (add carriage returns to end of text)
                     VOUT=''
*DF                     CALL SENDMAIL(EMAIL.OUT,VOUT)
                  END
               END ELSE
*
* No Don't create it
*
                  OPTIONS<OPT.CARRIER>=CLEAR
               END

*
* We just created or cleared the CARRIER - So disable
* everything down.
*
               OPTIONS<OPT.SHIP.OUT>=DISABLE
               RETURN
            END ELSE
*
* No Entry Point # 2 ... & CARRIER.ID does not exists.
*
               OPTIONS<OPT.CARRIER>=CLEAR
               OPTIONS<OPT.EFF.DATE>=DISABLE
               OPTIONS<OPT.SHIP.OUT>=DISABLE
               RETURN
            END
         END
      END
      GOTO BEDC.1
****************************************************
BEG.EFF.DATE.CHANGED:
****************************************************
      ENTRY.POINT = 3
BEDC.1:

*
* This is the entry point for drop downs or when BEG.EFF.DATE has changed.
*
      IF BEG.EFF.DATE = '' THEN
*
* BEG.EFF.DATE is null - Clear Line, Disable fields 6-9
*
         OPTIONS<OPT.EFF.DATE>=CLEAR
         OPTIONS<OPT.SHIP.OUT>=DISABLE
         RETURN
      END ELSE
*
* We now have the index where the BEG.EFF.DATE/END.EFF.DATE
* starts in the Zip Range.
*
         LOCATE BEG.EFF.DATE IN AUDIT.DATE.REC<1> SETTING WHERE THEN
*
* Yes the BEG.EFF.DATE is valid.
*
            OPTIONS<OPT.EFF.DATE>=REFRESH
            OPTIONS<OPT.SHIP.OUT>=ENABLE
            END.EFF.DATE = AUDIT.DATE.REC<2,WHERE>
         END ELSE
*
* No the END.EFF.DATE is not valid.
*
* Did we enter this routine at BEG.EFF.DATE?
*
            IF ENTRY.POINT = 3 THEN
*
* Yes.. Store it.  This will create a new file.
*
               AUDIT.DATE.REC<1,-1> = BEG.EFF.DATE
               OPTIONS<OPT.SHIP.OUT>=CLEAR
               RETURN
            END ELSE
*
* No... Set BEG.EFF.DATE to first entry
*
               LAST.ITEM=DCOUNT(AUDIT.DATE.REC<1>,@VM)
               BEG.EFF.DATE = AUDIT.DATE.REC<1,LAST.ITEM>
               END.EFF.DATE = AUDIT.DATE.REC<2,LAST.ITEM>
               IF BEG.EFF.DATE = '' THEN
*
* First entry was blank... Disable 6-9 and clear 5
*
                  OPTIONS<OPT.EFF.DATE>=CLEAR
                  OPTIONS<OPT.SHIP.OUT>=DISABLE
                  RETURN
               END ELSE
*
* No first entry was not null.. File should exists!
* enable 5-9
*
                  OPTIONS<OPT.SHIP.OUT>=ENABLE
               END
            END
         END
      END

LOAD.SHIPPING.POINTS:
*
* Load Shipping Points
*
      GOSUB LOAD.INBOUND.REC
      GOSUB LOAD.OUTBOUND.REC

      RETURN
****************************************************
SORT.AUDIT.TABLE:
****************************************************
      T.ITEMS = DCOUNT(AUDIT.REC<FBA.ROUTE.ZIP>,@VM)
      FOR T.X = 1 TO T.ITEMS
         T.LOWEST = AUDIT.REC<FBA.ROUTE.ZIP,T.X>
         T.LOWEST.POS = T.X
         FOR T.POS = T.X+1 TO T.ITEMS
            T.VAL = AUDIT.REC<FBA.ROUTE.ZIP,T.POS>
            IF T.LOWEST > T.VAL THEN
               T.LOWEST = T.VAL
               T.LOWEST.POS = T.POS
            END
         NEXT T.POS
         IF T.LOWEST.POS # T.X THEN
            SA.SV1 = T.LOWEST.POS
            SA.SV2 = T.X
            GOSUB SWAP.ITEMS
         END
      NEXT T.X
      RETURN
****************************************************
SWAP.ITEMS:
****************************************************
      SA.ATRIB = FBA.BEG.EFF.DATE
      GOSUB SWAP.SUBVALS
      SA.ATRIB = FBA.END.EFF.DATE
      GOSUB SWAP.SUBVALS
      SA.ATRIB = FBA.ROUTE.ZIP
      GOSUB SWAP.SUBVALS
      SA.ATRIB = FBA.ROUTE.ZIP.STATUS
      GOSUB SWAP.SUBVALS
      SA.ATRIB = FBA.BASE.ROUTE.ZIP
      GOSUB SWAP.SUBVALS
      RETURN
****************************************************
SWAP.SUBVALS:
****************************************************
      SA.T.VAL = AUDIT.REC<SA.ATRIB,SA.SV1>
      AUDIT.REC<SA.ATRIB,SA.SV1> = AUDIT.REC<SA.ATRIB,SA.SV2>
      AUDIT.REC<SA.ATRIB,SA.SV2> = SA.T.VAL
      RETURN
****************************************************
SAVE.FILES:
****************************************************
*
* Check about saving files...
*
      IF OPTIONS.STATE<2> # DISABLED THEN GOSUB SAVE.AUDIT.DATE.REC
      GOSUB SAVE.SHIPPING.POINTS
      RETURN
****************************************************
REMOVE.AUDIT.TABLE:
****************************************************
*
* Check for valid input values
*
      BEGIN CASE
         CASE DEL.CARRIER.ID = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.CARRIER.ID')
            RETURN
         CASE DEL.ZIP = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.ZIP')
            RETURN
         CASE DEL.DATE = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.DATE')
            RETURN
         CASE DEL.IO = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.IO')
            RETURN
*
* Everything is valid
*
         CASE 1
            REC.NAME = DEL.CARRIER.ID
            REC.NAME :='*':DEL.ZIP:'*':DEL.DATE:'*LTLALL*':DEL.IO
      END CASE
*
* Prevent any "re-use" problems....
*
      DEL.CARRIER.ID =''
      DEL.ZIP = ''
      DEL.DATE=''
      DEL.IO=''
      RETURN
****************************************************
CLEAR.VARIABLES:
****************************************************

      GOSUB CLR.LINE1                    ; * Clear Client ID & Name
      GOSUB CLR.LINE2                    ; * Clear Carrier ID, Name, City, State
      GOSUB CLR.LINE3                    ; * Clear Rout Zip
      GOSUB CLR.LINE4                    ; * Clear Subitute Zip
      GOSUB CLR.LINE5                    ; * Clear Beg/End Eff Date
      GOSUB CLR.LINE6                    ; * Clear Inbound Shipping Points
      GOSUB CLR.LINE7                    ; * Clear Outbound Shipping Points

      GOSUB CLR.LINE11                   ; * Clear Client Status
      GOSUB CLR.LINE12                   ; * Clear Carrier Status
      GOSUB CLR.LINE13                   ; * Clear Routine Zip Status
      GOSUB CLR.LINE14                   ; *
      GOSUB CLR.LINE15                   ; * Clear Eff Data Range Status
      GOSUB CLR.LINE16                   ; * Clear InBound Shipping Points Status
      GOSUB CLR.LINE17                   ; * Clear OutBound Shipping Points Status

      RETURN
****************************************************
CLR.LINE1:
****************************************************
      CLIENT.ID = 0
      CLIENT.NAME=''
      RETURN
****************************************************
CLR.LINE2:
****************************************************
      CARRIER.ID = 0 ; CARRIER.NAME = '' ; CARRIER.CITY = '' ; CARRIER.STATE = ''
      CARRIER.REC=''
      RETURN
****************************************************
CLR.LINE3:
****************************************************
      ROUTE.ZIP = 0
      RETURN
****************************************************
CLR.LINE4:
****************************************************
      SUB.ZIPS=''
      RETURN
****************************************************
CLR.LINE5:
****************************************************
      BEG.EFF.DATE = 0 ; END.EFF.DATE = 0
      RETURN
****************************************************
CLR.LINE6:
****************************************************
      AZIPS.IN.REC=''                    ; * Inbound Shipping Points from FB.AUDIT.ZIPS
      RETURN
****************************************************
CLR.LINE7:
****************************************************
      AZIPS.OUT.REC=''                   ; * Outbound Shipping Points from FB.AUDIT.ZIPS
      RETURN
****************************************************
CLR.LINE11:
****************************************************
      CLIENT.ENABLED = FALSE
      RETURN
****************************************************
CLR.LINE12:
****************************************************
      RETURN
****************************************************
CLR.LINE13:
****************************************************
      RETURN
****************************************************
CLR.LINE14:
      RETURN
****************************************************
CLR.LINE15:
****************************************************
      RETURN
****************************************************
CLR.LINE16:
****************************************************
      IF AZIPS.IN.REC = '' THEN GOSUB DISABLE.INBOUND.ZIPS
      RETURN
****************************************************
CLR.LINE17:
****************************************************
      IF AZIPS.OUT.REC = '' THEN GOSUB DISABLE.OUTBOUND.ZIPS
      RETURN
****************************************************
REFRESH.DISPLAY:
****************************************************
      FOR T.LINE = 1 TO NUM.OPTIONS
*
* get our options for this menu line item
*
         T.OPT = OPTIONS<T.LINE>
         T.STAT= OPTIONS.STATE<T.LINE>
*
* Do we need to do any form of screen modifications for this line?
*
         IF (T.OPT) THEN
            BEGIN CASE
               CASE T.OPT=DISABLE AND T.STAT # DISABLED
*
* Disable
*
                  OPTIONS.STATE<T.LINE>=DISABLED
                  GOSUB CLR.VAR.T.LINE
                  GOSUB CLR.T.LINE
               CASE T.OPT=CLEAR
*
* Clear
*
                  OPTIONS.STATE<T.LINE>=ENABLED
                  GOSUB CLR.T.LINE
                  GOSUB CLR.VAR.T.LINE
                  GOSUB DSP.T.LINE
               CASE T.OPT=ENABLE
*
* Enable
*
                  OPTIONS.STATE<T.LINE>=ENABLED
                  GOSUB CLR.T.LINE
                  GOSUB DSP.T.LINE
               CASE T.OPT=REFRESH AND T.STAT=ENABLED
*
* Refresh
*
                  GOSUB CLR.T.LINE
                  GOSUB DSP.T.LINE
            END CASE
            OPTIONS<T.LINE>=''
         END
      NEXT TEMP
      RETURN
****************************************************
CLR.T.LINE:
****************************************************
      ON T.LINE GOSUB CLR.1,CLR.2,CLR.3,CLR.4,CLR.5,CLR.6,CLR.7,CLR.8,stub,stub,CLR.11,CLR.12,CLR.13,CLR.14,CLR.15,CLR.16,CLR.17
      RETURN
****************************************************
DSP.T.LINE:
****************************************************
      ON T.LINE GOSUB DSP.1,DSP.2,DSP.3,DSP.4,DSP.5,DSP.6,DSP.7,DSP.8,stub,stub,DSP.11,DSP.12,DSP.13,DSP.14,DSP.15,DSP.16,DSP.17
      RETURN
****************************************************
CLR.VAR.T.LINE:
****************************************************
      ON T.LINE GOSUB CLR.LINE1,CLR.LINE2,CLR.LINE3,CLR.LINE4,CLR.LINE5,CLR.LINE6,CLR.LINE7,stub,stub,stub,CLR.LINE11,CLR.LINE12,CLR.LINE13,CLR.LINE14,CLR.LINE15,CLR.LINE16,CLR.LINE17
      RETURN
****************************************************
stub:
****************************************************
* do nothing... filler for ON GOSUBs
      return
****************************************************
CLR.1:
****************************************************
      CRT @(0, 3):'1) Client Name :':STR(' ',49)
      RETURN
****************************************************
DSP.1:
****************************************************
      IF CLIENT.ID THEN
         CBVIN=''
         CBVIN<1>=CLIENT.ID
         CALL CLIENT.BLOCK(CBVIN,CBVOUT,F.CAR.CTRL)
         TEMP = CLIENT.ID:', ':CL.NAME:' (':CL.CITY:', ':CL.ST:')'
      END ELSE
         TEMP = REVON:'(Client not selected)':REVOFF
         IF NOT(AUTO.FAILURE) THEN AUTO.OPTION = OPT.CLIENT
      END

      CRT @(16, 3):CBVOUT<1>:TEMP'L#49':@(-6)
      RETURN
****************************************************
CLR.2:
****************************************************
      CRT @(0, 4):'2) Carrier Name:':STR(' ',49)
      RETURN
****************************************************
DSP.2:
****************************************************
      IF CARRIER.ID THEN
         TEMP = CARRIER.ID:', ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      END ELSE
         TEMP = REVON:'(Carrier not selected)':REVOFF
         IF NOT(AUTO.FAILURE) THEN AUTO.OPTION = OPT.CARRIER
      END

      CRT @(16, 4):TEMP'L#49'
      RETURN
****************************************************
CLR.3:
****************************************************
      CRT @(0, 7):'3) Eff Date Rng:         TO :':STR(' ',32)
      RETURN
****************************************************
DSP.3:
****************************************************
      IF BEG.EFF.DATE THEN
         IF END.EFF.DATE='' THEN
            TEMP = '(No Ending Date Set)'
         END ELSE
            TEMP = END.EFF.DATE'D2/'
         END
         TEMP = BEG.EFF.DATE'D2/':' TO : ':TEMP
      END ELSE
         TEMP = REVON:'(Effective Date Range not setup)':REVOFF
         IF NOT(AUTO.FAILURE) THEN AUTO.OPTION = OPT.EFF.DATE
      END
      CRT @(16, 7):TEMP:

      RETURN
****************************************************
CLR.4:
****************************************************
      CRT @(0,11):'4) Regions:''L#64'
      RETURN
****************************************************
DSP.4:
****************************************************
      NUM.AUDITS = DCOUNT(AZIPS.OUT.REC<2>, @VM)
      BEGIN CASE
*
* Check to see if not setup
*
         CASE AZIPS.OUT.REC = ''
            TEMP = '(Regions Not Setup)'

*
* Check to see if setup and with points
*
         CASE NUM.AUDITS
            T.AZIPS.REC = AZIPS.OUT.REC
            GOSUB BUILD.ZIP.DISPLAY
            IF LEN(TEMP) > 52 THEN TEMP=TEMP'L#46':'<more>'

*
* File exists, but no zips entered.
*
         CASE 1
            TEMP = REVON:'(No Shipping Points Entered)':REVOFF
      END CASE
      CRT @(12,11):TEMP'L#52'
      RETURN

****************************************************
CLR.5:
****************************************************
      RETURN
****************************************************
DSP.5:
****************************************************
      RETURN
****************************************************
CLR.6:
****************************************************
      RETURN
****************************************************
DSP.6:
****************************************************
      RETURN
****************************************************
CLR.7:
****************************************************
RETURN
****************************************************
DSP.7:
****************************************************
RETURN
****************************************************
CLR.8:
****************************************************
      RETURN
****************************************************
DSP.8:
****************************************************
      RETURN
****************************************************
CLR.11:
****************************************************
      RETURN
****************************************************
DSP.11:
****************************************************
      RETURN
****************************************************
CLR.12:
****************************************************
      RETURN
****************************************************
DSP.12:
****************************************************
      RETURN
****************************************************
CLR.13:
****************************************************
      RETURN
****************************************************
DSP.13:
****************************************************
      RETURN
****************************************************
CLR.14:
****************************************************
      RETURN
****************************************************
DSP.14:
****************************************************
      RETURN
****************************************************
CLR.15:
****************************************************
RETURN
****************************************************
DSP.15:
****************************************************
RETURN
****************************************************
CLR.16:
****************************************************
      RETURN
****************************************************
DSP.16:
****************************************************
      RETURN
****************************************************
CLR.17:
****************************************************
RETURN
****************************************************
DSP.17:
****************************************************
RETURN
****************************************************
DSP.ENTRY.SCN:
****************************************************
      GOSUB INIT.SCREEN
      GOSUB CLR.1                        ; * Display Client ID & Name
      GOSUB CLR.2                        ; * Display Carrier ID, Name, City, State
      GOSUB CLR.3                        ; * Display Rout Zip
      GOSUB CLR.4                        ; * Display Beg/End Eff Date
      GOSUB CLR.5                        ; * Display Inbound Shipping Points
      GOSUB CLR.6                        ; * Display Outbound Shipping Points
      GOSUB CLR.7                        ; * Display Outbound Shipping Points
      GOSUB CLR.8                        ; * Display Core Carrier
      GOSUB CLR.11                       ; * Display Client Status
      GOSUB CLR.12                       ; * Display Carrier Status
      GOSUB CLR.13                       ; * Display Rout Zip Status
      GOSUB CLR.14                       ; *
      GOSUB CLR.15                       ; * Display Eff Date Status
      GOSUB CLR.16                       ; * Display Inbound Shipping Point Status
      GOSUB CLR.17                       ; * Display Outbound Shipping Point Status

      RETURN

* COPY.CARRIER
*
* SRC.CARRIER.ID = Source Carrier ID
* DST.CARRIER.ID = Dest Carrier ID
****************************************************
COPY.CARRIER:
****************************************************
* Enter Source Carrier ID
*
CC.1:
      HELP = "Enter Carrier Number to copy:  [L]=List [X]-Back"
      CRT @(0,22):'Copy Carrier ID: 00000 to Carrier ID: 00000':@(-4)
      MASK = CARRIER.ID'R%5'
      Q=''
      CALL GEN.IN(17,22,MASK,'',Q,0,15,'','',2,17,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI='' AND CARRIER.ID < 1 GOTO CC.1
         CASE QI='X' OR QI='EX'
            CRT @(0,22):@(-4):
            RETURN
         CASE QI EQ 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO CC.1
         CASE NUM(QI)
            SRC.CARRIER.ID=Q'R%5'
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO CC.1
      END CASE

      READ TEMP.REC FROM F.CARRIERS, SRC.CARRIER.ID ELSE
         CALL ELINE(SRC.CARRIER.ID:' is an invalid Carrier Number. Try Again.')
         GOTO CC.1
      END

      READ TEMP.REC FROM F.AUDIT,SRC.CARRIER.ID ELSE
         CALL ELINE('Carrier ':SRC.CARRIER.ID:' is not setup in Online Audit!')
         GOTO CC.1
      END
*
* Enter Dest Carrier ID
*
CC.2:
      HELP = "Enter Destination Carrier Number.   [X]-Back"
      CRT @(0,22):'Copy Carrier ID: ':SRC.CARRIER.ID:' to Carrier ID: 00000':@(-4)
      MASK = CARRIER.ID'R%5'
      Q=''
      CALL GEN.IN(38,22,MASK,'',Q,0,15,'','',2,38,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI='' AND CARRIER.ID < 1 GOTO CC.2
         CASE QI='X'
            GOTO CC.1
         CASE NUM(QI)
            DST.CARRIER.ID=Q'R%5'
         CASE QI EQ 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO CC.2
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO CC.2
      END CASE
      IF DST.CARRIER.ID = SRC.CARRIER.ID THEN
         CALL ELINE('Can not copy carrier ':SRC.CARRIER.ID:' to ':DST.CARRIER.ID:'! Try again.')
         GOTO CC.2
      END
      READ TEMP.REC FROM F.CARRIERS, DST.CARRIER.ID ELSE
         CALL ELINE(DST.CARRIER.ID:' is an invalid Carrier Number. Try Again.')
         GOTO CC.2
      END
      READ TEMP.REC FROM F.AUDIT,DST.CARRIER.ID THEN
         CALL ELINE('Carrier ':DST.CARRIER.ID:' is ALREADY SETUP in Online Audit! Can not copy!')
         GOTO CC.2
      END
      CRT @(0,22):'Copying Carrier ID: ':SRC.CARRIER.ID:' to Carrier ID: ':DST.CARRIER.ID:@(-4)
      CRT @(0,23):'(FB.AUDIT,':SRC.CARRIER.ID:'->':DST.CARRIER.ID:')':@(-4):
*
* COPY.FB.AUDIT
*
      READ TAUDIT.REC FROM F.AUDIT,SRC.CARRIER.ID THEN

      END ELSE
         CALL ELINE('Unable to copy carrier ':SRC.CARRIER.ID:' to ':DST.CARRIER.ID)
      END
*
* COPY.FB.AUDIT.TABLES
*
      STMT = 'SSELECT FB.AUDIT.TABLES,':CLIENT.ID:' WITH CARRIER# = "':SRC.CARRIER.ID:'" BY TABLE#'
      EXECUTE STMT CAPTURING OUTPUT
      KEEP.READING = 1
      LOOP
         READNEXT REC.NAME ELSE KEEP.READING = 0
      WHILE KEEP.READING DO
         READ TTABLE.REC FROM F.AUDIT.TABLES,REC.NAME THEN
            DNAME = DST.CARRIER.ID:'*':FIELD(REC.NAME,'*',2)
            CRT @(0,23):'(FB.AUDIT.TABLES,':REC.NAME:'->':DNAME:')':@(-4):

         END ELSE
            CALL ELINE("ERROR - Unable to read ':REC.NAME:' from FB.AUDIT.TABLES")
            RETURN
         END
      REPEAT
*
* COPY.FB.AUDIT.ZIPS
*
      STMT = 'SELECT FB.AUDIT.ZIPS,':CLIENT.ID:' WITH CARRIER# = "':SRC.CARRIER.ID:'"'
      EXECUTE STMT CAPTURING OUTPUT
      KEEP.READING = 1
      LOOP
         READNEXT REC.NAME ELSE KEEP.READING = 0
      WHILE KEEP.READING DO
         READ TZIP.REC FROM F.AUDIT.ZIPS,REC.NAME THEN
            DNAME = DST.CARRIER.ID:'*'
            DNAME:= FIELD(REC.NAME,'*',2):'*'
            DNAME:= FIELD(REC.NAME,'*',3):'*'
            DNAME:= FIELD(REC.NAME,'*',4):'*'
            DNAME:= FIELD(REC.NAME,'*',5)
            CRT @(0,23):'(FB.AUDIT.ZIPS,':REC.NAME:'->':DNAME:')':@(-4):

         END ELSE
            CALL ELINE("ERROR - Unable to read ':REC.NAME:' from FB.AUDIT.ZIPS")
            RETURN
         END
      REPEAT

      CRT @(0,23):'(Copy Complete.)':@(-4):
      SLEEP 1
      CRT @(0,22):@(-4)
      RETURN
****************************************************
DELETE.CARRIER:
****************************************************
*
* Enter Carrier ID
*
DC.1:
      HELP = "Enter Carrier Number to DELETE [L]=List [X]-Back"
      CRT @(0,22):'Delete Carrier : 00000':@(-4)
      MASK = CARRIER.ID'R%5'
      Q=''
      CALL GEN.IN(17,22,MASK,'',Q,0,15,'','',2,17,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI='' AND CARRIER.ID < 1 GOTO DC.1
         CASE QI='X' OR QI='EX'
            CRT @(0,22):@(-4):
            RETURN
         CASE QI EQ 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO DC.1
         CASE NUM(QI)
            SRC.CARRIER.ID=Q'R%5'
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB DSP.ENTRY.SCN
            FOR Y = 1 TO NUM.OPTIONS
               IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
            NEXT Y
            GOSUB REFRESH.DISPLAY
            GOTO DC.1
      END CASE

      READ TEMP.REC FROM F.AUDIT,SRC.CARRIER.ID ELSE
         CALL ELINE('Carrier ':SRC.CARRIER.ID:' is not setup in Online Audit!')
         GOTO DC.1
      END
      YN.MSG = CHAR(7):'Are you sure you want to DELETE carrier ':SRC.CARRIER.ID:'? '
      YN.MASK = 'N '
      GOSUB ASK.Y.OR.N
      IF YN.ANSWER # 'Y' THEN GOTO DC.1

      YN.MSG = CHAR(7):'This will DELETE ALL SETUPS for carrier ':SRC.CARRIER.ID:'. Are you sure? '
      YN.MASK = 'N '
      GOSUB ASK.Y.OR.N
      IF YN.ANSWER # 'Y' THEN GOTO DC.1
*
* Delete Carrier Files...
*
      CRT @(0,22):'Deleting Carrier ID: ':SRC.CARRIER.ID:@(-4)
      CRT @(0,23):'(FB.AUDIT,':SRC.CARRIER.ID:')':@(-4):
*
* DELETE FB.AUDIT.TABLES
*
      STMT = 'SSELECT FB.AUDIT.TABLES,':CLIENT.ID:' WITH CARRIER# = "':SRC.CARRIER.ID:'" BY TABLE#'
      EXECUTE STMT CAPTURING OUTPUT
      KEEP.READING = 1
      LOOP
         READNEXT REC.NAME ELSE KEEP.READING = 0
      WHILE KEEP.READING DO
         CRT @(0,23):'(FB.AUDIT.TABLES,':REC.NAME:')':@(-4):
      REPEAT
*
* DELETE FB.AUDIT.ZIPS
*
      STMT = 'SELECT FB.AUDIT.ZIPS,':CLIENT.ID:' WITH CARRIER# = "':SRC.CARRIER.ID:'"'
      EXECUTE STMT CAPTURING OUTPUT
      KEEP.READING = 1
      LOOP
         READNEXT REC.NAME ELSE KEEP.READING = 0
      WHILE KEEP.READING DO

         CRT @(0,23):'(FB.AUDIT.ZIPS,':REC.NAME:')':@(-4):
      REPEAT
      CRT @(0,23):'(Delete Complete.)':@(-4):
      SLEEP 1
      CRT @(0,22):@(-4):

      RETURN
****************************************************
INIT.SCREEN:
****************************************************
      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('-',79) ;
      CRT @(0,21):STR('-',79) ;
      RETURN
****************************************************
SHOW.INTRO:
****************************************************
*
      CRT @(X, 6):'        XXX       XXXXXXXX   xXXXXXXx   '
      CRT @(X, 7):'      xXXXXX      XXXXXXX   XXXXXXXXXX  '
      CRT @(X, 8):'     XXX  XX     xXX       XXXX     XXX '
      CRT @(X, 9):'    XXX   XX     XXXXXXX    XXXXXx      '
      CRT @(X,10):'   xXXXXXXXX     XXXXXX       XXXXXXx   '
      CRT @(X,11):'   XXXXXXXXXx   xXX       XXx     XXXX  '
      CRT @(X,12):'  XXX     XXX   XXX        XXXXXXXXXX   '
      CRT @(X,13):' xXX       XXX xXX          XXXXXXXX    '
      CRT @(X,15):' L  O  G  I  S  T  I  C  S     I  N  C  ':
      CRT @(X,16):' -------------------------------------  '
*
      RETURN
****************************************************
ASK.Y.OR.N:
****************************************************
      YN.ANSWER = ''
Y.OR.N:
      HELP = CHAR(7):"Entry Options: [Y]-Yes [N]-No [X]-Back"
      CRT @(0,22):YN.MSG:@(-4):
      MASK = YN.MASK'L#1'
      Q=''
      CALL GEN.IN(LEN(YN.MSG),22,MASK,'',Q,0,1,'','',2,LEN(YN.MSG),22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
*
* Q & D Translation
*
      BEGIN CASE
         CASE QI = ''
            QI=MASK
         CASE QI = '1'
            QI='Y'
         CASE QI = '0'
            QI='N'
      END CASE

*
* Conditions.
*
      BEGIN CASE
         CASE QI = 'Y'
         CASE QI = 'N'
         CASE QI = 'X'
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO Y.OR.N
      END CASE

      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      YN.ANSWER = QI

      RETURN

* AFN.MIN  - MIN VALUE ALLOWABLE
* AFN.MAX  - MAX VALUE ALLOWABLE
* AFN.MSG  - MESSAGE TO DISPLAY
* AFN.MASK - DEFAULT VALUE
* AFN.ALLOW.NULL - TRUE/FALSE - Allows the user to enter nothing.

****************************************************
ASK.FOR.NUM: ***
****************************************************
      AFN.ANSWER = ''
AFN.1:
      HELP = "Entry Options: [":AFN.MIN:"-":AFN.MAX:"] [X]-Back"
      CRT @(0,22):AFN.MSG:@(-4)
      MASK = AFN.MASK:' '
      Q=''
      CALL GEN.IN(LEN(AFN.MSG)+1,22,MASK,'',Q,0,LEN(AFN.MAX),'','',2,LEN(AFN.MSG)+1,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI='' AND AFN.ALLOW.NULL
         CASE QI='X' OR QI='EX'
         CASE QI>=AFN.MIN AND QI<=AFN.MAX
         CASE 1
            CALL ELINE('Invalid entry. Please try again.')
            GOTO AFN.1
      END CASE
      AFN.ANSWER=QI
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      RETURN
****************************************************
ASK.FOR.FNAME:
****************************************************
      FNAME.ANSWER = ''

ASK.NAME:

      HELP = "Entry Options:  [X] = Exit"
      CRT @(1,22):ASK.FN.MSG:@(-4)
      MASK = ASK.FN.MASK
      Q = ''
      CALL GEN.IN(LEN(ASK.FN.MSG)+1,22,MASK,'',Q,0,20,'','',2,LEN(ASK.FN.MSG)+1,22,1,QI,HELP,0,23)

      IF QI='' THEN
         IF MASK='' THEN GOTO ASK.NAME
         QI=MASK
      END ELSE
         QI = OCONV(QI,'MCU')
      END
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      FNAME.ANSWER = QI
      RETURN
****************************************************
ASK.ABOUT.QUITTING:
****************************************************
*
* Perform some boolean magic!
*
      CHANGED = (ORG.AZIPS.IN.REC # AZIPS.IN.REC)
      CHANGED+= (ORG.AZIPS.OUT.REC # AZIPS.OUT.REC)
      CHANGED+= (ORG.AUDIT.DATE.REC # AUDIT.DATE.REC)

      IF CHANGED THEN
         YN.MSG = 'Exit Program and Loose any changes? '
         YN.MASK = 'N '
         GOSUB ASK.Y.OR.N
         EXIT.IT = (YN.ANSWER = 'Y')
      END ELSE
         EXIT.IT = TRUE
      END

      FAILURE+=EXIT.IT
      RETURN
***************************************************
DISPLAY.HELP:
****************************************************
      MASK=''
      EXIT.HELP = FALSE
      T.LINES = DCOUNT(HELP.LINES,@AM)
      HLP.SCN.TOP = HLP.Y+1
      HLP.PAGE.SIZE = HLP.H-HLP.Y-1
      HLP.SCN.BOT = HLP.Y+HLP.H-3
      Y.POS = HLP.SCN.TOP
      HLP.LINE.CNT=0
      T.Y = 1
      CALL FB.DRAW.BOX(HLP.X,HLP.Y,HLP.W,HLP.H,' ','')
      LOOP
         BEGIN CASE
*
*  Handle first 2 lines - Center on help windows
*
            CASE T.Y=1 OR T.Y=2
               CALL FB.PRINT.CENT(HLP.X,HLP.X+HLP.W,Y.POS,HELP.LINES<T.Y>)
            CASE 1
               CRT @(HLP.X, Y.POS):HELP.LINES<T.Y>
         END CASE
         T.Y+=1                          ; * Help Line index
         Y.POS+=1                        ; * Screen Y Position
         HLP.LINE.CNT+=1                 ; * Num Lines prnted on page
*
* Handle screen positioning
*
         BEGIN CASE
*
* Handle Page Breaks
*
            CASE (Y.POS = HLP.SCN.BOT) OR (T.Y > T.LINES)
DH.2:
*
* End of Help?
*
               IF T.Y > T.LINES THEN
                  TEMP = '[ End of Help ]'
                  HELP2 = "Press ENTER to exit help, "
               END ELSE
                  TEMP = '[ Continued on Next Page ]'
                  HELP2 = "Press ENTER to continue to next page, "
               END
*
* Is paging Back possible?
*
               IF T.Y > HLP.PAGE.SIZE+1 THEN
                  HELP2:= " [B]=Back 1 Page [X]=Exit Help."
               END ELSE
                  HELP2:= " [X]=Exit Help."
               END

*
* Display message, help and get input.
*
               CALL FB.PRINT.CENT(HLP.X,HLP.X+HLP.W,HLP.SCN.BOT+1,TEMP)
               CRT @(0,22):'Enter Option :':@(-4)
               CALL GEN.IN(15,22,' ','',Q,0,1,'','',0,15,22,0,QI,HELP2,0,23)
               QI = OCONV(QI,'MCU')
               BEGIN CASE
*
* Back 1 page
*
                  CASE QI = 'B' AND T.Y > (HLP.PAGE.SIZE+1)
                     T.Y-=HLP.PAGE.SIZE+HLP.LINE.CNT
*
* Goto next page
*
                  CASE QI = ''
*
* Goto next page
*
                  CASE QI = 'X'
                     EXIT.HELP = TRUE
*
* Idiot input...
*
                  CASE 1
                     CALL ELINE('Invalid selection, Try Again.')
                     GOTO DH.2
               END CASE

               HLP.LINE.CNT=0            ; * Num Lines prnted on page
               Y.POS = HLP.SCN.TOP       ; * Go back to top of help screen
               CALL FB.DRAW.BOX(HLP.X,HLP.Y,HLP.W,HLP.H,' ','')
         END CASE

      WHILE ((T.Y <= T.LINES) AND NOT(EXIT.HELP))
      REPEAT

      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):

      RETURN
****************************************************
INIT.HELP:
****************************************************
      ESZ1.HELP=''                       ; *123456789012345678901234567890
      ESZ1.HELP<-1>='EDIT STATE FLAGS'
      ESZ1.HELP<-1>='----------------'
      ESZ1.HELP<-1>='You are currently in "Edit'
      ESZ1.HELP<-1>='State Flags".  This mode '
      ESZ1.HELP<-1>='allows you to individually'
      ESZ1.HELP<-1>='mark 3 digit zip codes to be'
      ESZ1.HELP<-1>='included or not included in'
      ESZ1.HELP<-1>='the list of Valid Shipping '
      ESZ1.HELP<-1>='Points.  A "Y" will mark the'
      ESZ1.HELP<-1>='zip to be included as a valid'
      ESZ1.HELP<-1>='shipping point and a "N" will'
      ESZ1.HELP<-1>='mark the zip as a Non Valid '
      ESZ1.HELP<-1>='zip code.  To Exit marking a'
      ESZ1.HELP<-1>='state press the "X" to exit.'

      ESZ.HELP=''                        ; *123456789012345678901234567890
      ESZ.HELP<-1>='SELECTIVE ZIP ENTRY'
      ESZ.HELP<-1>='-------------------'
      ESZ.HELP<-1>='You are editing the Audit'
      ESZ.HELP<-1>='Flags for the current State'
      ESZ.HELP<-1>='you selected.  You can set all'
      ESZ.HELP<-1>='flags to YES, NO, toggle all'
      ESZ.HELP<-1>='of the flags or Enter the zip'
      ESZ.HELP<-1>='number and manualy mark the'
      ESZ.HELP<-1>='individual zip as YES or NO.'
      ESZ.HELP<-1>='You can also enter Range Mode'
      ESZ.HELP<-1>='and manually mark a series of'
      ESZ.HELP<-1>='zips as YES or NO.  You can'
      ESZ.HELP<-1>='also press "X" to exit the '
      ESZ.HELP<-1>='Selective Zip Entry.'

      EZR.HELP=''                        ; *123456789012345678901234567890
      EZR.HELP<-1>='EDIT ZIP RANGE MODE'
      EZR.HELP<-1>='-------------------'
      EZR.HELP<-1>='This mode will allow you to'
      EZR.HELP<-1>='mark a range of zips as YES or'
      EZR.HELP<-1>='NO.  You will be asked for the'
      EZR.HELP<-1>='"Starting Zip" that is the zip'
      EZR.HELP<-1>='number you wish to start edit-'
      EZR.HELP<-1>='ing from.  You will be placed'
      EZR.HELP<-1>='at that zip and will move one'
      EZR.HELP<-1>='zip at a time allowing you to'
      EZR.HELP<-1>='mark the zip as YES or NO.'
      EZR.HELP<-1>='You can also press "X" to exit'
      EZR.HELP<-1>='at any time'

      IED.HELP=''                        ; *123456789012345678901234567890
      IED.HELP<-1>='EFFECTIVE DATE RANGE ENTRY'
      IED.HELP<-1>='--------------------------'
      IED.HELP<-1>='You are setting up the effec- '
      IED.HELP<-1>='tive date range that the rates'
      IED.HELP<-1>='will effect.  Each Date Range'
      IED.HELP<-1>='rates are different from other'
      IED.HELP<-1>='rates.  You can switch to a'
      IED.HELP<-1>='different Date Range, add a'
      IED.HELP<-1>='new Date Range, delete Date'
      IED.HELP<-1>='Ranges, close a Date Range, or'
      IED.HELP<-1>='exit.  You can only have 1'
      IED.HELP<-1>='Date Range "open" at a time.'
      IED.HELP<-1>='all other Date Ranges must '
      IED.HELP<-1>='have a closing date.'

      ADR.HELP=''                        ; *123456789012345678901234567890
      ADR.HELP<-1>='ADD NEW DATE RANGE'
      ADR.HELP<-1>='------------------'
      ADR.HELP<-1>='You are adding a new Date'
      ADR.HELP<-1>='Range.  You are being asked'
      ADR.HELP<-1>='for the Starting Date for the'
      ADR.HELP<-1>='Date Range.  This date will be'
      ADR.HELP<-1>='date in which the new rates'
      ADR.HELP<-1>='will take effect.'
      ADR.HELP<-1>='NOTE:  The new Date Range'
      ADR.HELP<-1>='will not yet have a rate table'
      ADR.HELP<-1>='and will not have any valid'
      ADR.HELP<-1>='shipping points setup.  These'
      ADR.HELP<-1>='will need to setup once the'
      ADR.HELP<-1>='new Date Range is entered.'

      CPT.HELP=''                        ; *123456789012345678901234567890
      CPT.HELP<-1>='CLOSE PRIOR TABLE'
      CPT.HELP<-1>='-----------------'
      CPT.HELP<-1>='You are adding a new Date'
      CPT.HELP<-1>='Range but an existing table'
      CPT.HELP<-1>='did not have a Closing Date'
      CPT.HELP<-1>='so you are being asked to'
      CPT.HELP<-1>='enter the closing date for'
      CPT.HELP<-1>='the prior table.  This date'
      CPT.HELP<-1>='would normally be the day'
      CPT.HELP<-1>='before your opening date of'
      CPT.HELP<-1>='your new Date Range.  This'
      CPT.HELP<-1>='will close out the prior rates'
      CPT.HELP<-1>='and will start the new ones on'
      CPT.HELP<-1>='the starting date entered.'

      ECD.HELP=''                        ; *123456789012345678901234567890
      ECD.HELP<-1>='ENTER CLOSING DATE'
      ECD.HELP<-1>='------------------'
      ECD.HELP<-1>=' '
      ECD.HELP<-1>='You are entering a Closing '
      ECD.HELP<-1>='Date for the rates to stop '
      ECD.HELP<-1>='being used.  If a Closing Date'
      ECD.HELP<-1>='is NOT entered the table will'
      ECD.HELP<-1>='be considered "Open" and will'
      ECD.HELP<-1>='allow the rates to be used'
      ECD.HELP<-1>='until a closing date is '
      ECD.HELP<-1>='choosen.  You can only have'
      ECD.HELP<-1>='one set of rates "Open" at one'
      ECD.HELP<-1>='time.'

      SD.HELP=''                         ; *123456789012345678901234567890
      SD.HELP<-1>='SELECT DATE RANGE'
      SD.HELP<-1>='-----------------'
      SD.HELP<-1>=' '
      SD.HELP<-1>='You are being asked which Date'
      SD.HELP<-1>='Range you would like to switch'
      SD.HELP<-1>='to.  Enter one of the Date'
      SD.HELP<-1>='Range number from the window'
      SD.HELP<-1>='on the right.  You can press'
      SD.HELP<-1>='"X" to exit and not switch to'
      SD.HELP<-1>='another Date Range.'

      DD.HELP=''                         ; *123456789012345678901234567890
      DD.HELP<-1>='DELETE DATE RANGE'
      DD.HELP<-1>='-----------------'
      DD.HELP<-1>=' '
      DD.HELP<-1>='You are being asked which Date'
      DD.HELP<-1>='Range you would like to DELETE'
      DD.HELP<-1>='When you delete a Date Range'
      DD.HELP<-1>='all audit information about'
      DD.HELP<-1>='Date Range will be erased!  Be'
      DD.HELP<-1>='very carefull when choosing to'
      DD.HELP<-1>='delete a Date Range.  You can '
      DD.HELP<-1>='press "X" to exit and not '
      DD.HELP<-1>='delete any date ranges.'

      TD.HELP=''                         ; *123456789012345678901234567890
      TD.HELP<-1>='TOGGLE DATE RANGE'
      TD.HELP<-1>='-----------------'
      TD.HELP<-1>=' '
      TD.HELP<-1>='You are being asked which Date'
      TD.HELP<-1>='Range you would like to TOGGLE'
      TD.HELP<-1>='the Enable/Disable flag.  When'
      TD.HELP<-1>='you TOGGLE a flag, this only'
      TD.HELP<-1>='means that an ENABLE flag will'
      TD.HELP<-1>='switch to DISABLE and a'
      TD.HELP<-1>='DISABLE flag will switch to an'
      TD.HELP<-1>='ENABLE flag - In short, it '
      TD.HELP<-1>='flip-flops or "Toggles" btween'
      TD.HELP<-1>='two states.  If a Date Range'
      TD.HELP<-1>='is disabled, then Data Entry'
      TD.HELP<-1>='will not use this entry for'
      TD.HELP<-1>='this date range'

      CD.HELP=''                         ; *123456789012345678901234567890
      CD.HELP<-1>='COPY DATE RANGE'
      CD.HELP<-1>='-----------------'
      CD.HELP<-1>='You are going to copy an'
      CD.HELP<-1>='existing date range to a new'
      CD.HELP<-1>='non-existing date range.'
      CD.HELP<-1>='You will have to close any'
      CD.HELP<-1>='open date range.'
      CD.HELP<-1>='You will then enter the new'
      CD.HELP<-1>='date range.'

      IRZ.HELP=''                        ; *123456789012345678901234567890
      IRZ.HELP<-1>='ROUTING ZIP SETUP'
      IRZ.HELP<-1>='-----------------'
      IRZ.HELP<-1>=' '
      IRZ.HELP<-1>='You are setting up the Routing'
      IRZ.HELP<-1>='Zips for the Client/Carrier'
      IRZ.HELP<-1>='that you have selected.  Each'
      IRZ.HELP<-1>='Routing Zip will then break '
      IRZ.HELP<-1>='down to effective dates and '
      IRZ.HELP<-1>='rates for each effective date.'

      DRZ.HELP=''                        ; *123456789012345678901234567890
      DRZ.HELP<-1>='DELETE ROUTING ZIP'
      DRZ.HELP<-1>='------------------'
      DRZ.HELP<-1>=' '
      DRZ.HELP<-1>='You are about to delete a'
      DRZ.HELP<-1>='Routing Zip and all Effective'
      DRZ.HELP<-1>='Date Ranges and Rate Tables'
      DRZ.HELP<-1>='for the Routing Zip you select'
      DRZ.HELP<-1>='Once Deleted, all data will be'
      DRZ.HELP<-1>='lost.'

      TRZ.HELP=''                        ; *123456789012345678901234567890
      TRZ.HELP<-1>='TOGGLE ROUTING ZIP'
      TRZ.HELP<-1>='------------------'
      TRZ.HELP<-1>=' '
      TRZ.HELP<-1>='You are being asked which'
      TRZ.HELP<-1>='Routing Zip you wish to TOGGLE'
      TRZ.HELP<-1>='the Enable/Disable flag.  When'
      TRZ.HELP<-1>='you TOGGLE a flag, this only'
      TRZ.HELP<-1>='means that an ENABLE flag will'
      TRZ.HELP<-1>='switch to DISABLE and a'
      TRZ.HELP<-1>='DISABLE flag will switch to an'
      TRZ.HELP<-1>='ENABLE flag - In short, it '
      TRZ.HELP<-1>='flip-flops or "Toggles" btween'
      TRZ.HELP<-1>='two states.  If a Routing Zip'
      TRZ.HELP<-1>='is disabled, then Data Entry'
      TRZ.HELP<-1>='will not use this entry for'
      TRZ.HELP<-1>='this Routing Zip OR ANY '
      TRZ.HELP<-1>='EFFECTIVE DATE RANGES UNDER '
      TRZ.HELP<-1>='THIS ROUTING ZIP no matter the'
      TRZ.HELP<-1>='status of the DATE RANGES'
      TRZ.HELP<-1>='under the Routing Zip.'

      ARZ.HELP=''                        ; *123456789012345678901234567890
      ARZ.HELP<-1>='ADD ROUTING ZIP'
      ARZ.HELP<-1>='---------------'
      ARZ.HELP<-1>=' '
      ARZ.HELP<-1>='You are adding a Routing Zip'
      ARZ.HELP<-1>='for the Client/Carrier that'
      ARZ.HELP<-1>='you have specified.  You can'
      ARZ.HELP<-1>='Enter a U.S. or CANADAN zip'
      ARZ.HELP<-1>='You can NOT enter duplicate'
      ARZ.HELP<-1>='zip codes.  All zips will be'
      ARZ.HELP<-1>='checked to see if the computer'
      ARZ.HELP<-1>='knows the City and State.  If'
      ARZ.HELP<-1>='it doesnt know the City/State'
      ARZ.HELP<-1>='it is POSSIBLE that the zip'
      ARZ.HELP<-1>='is invalid but does not mean'
      ARZ.HELP<-1>='that is invalid.  The computer'
      ARZ.HELP<-1>='may not know the City/State.'
      ARZ.HELP<-1>='You will be asked if you wish'
      ARZ.HELP<-1>='to continue using the zip.'

      SRZ.HELP=''                        ; *123456789012345678901234567890
      SRZ.HELP<-1>='SELECT ROUTING ZIP'
      SRZ.HELP<-1>='------------------'
      SRZ.HELP<-1>=' '
      SRZ.HELP<-1>='You are selecting a Routing'
      SRZ.HELP<-1>='Zip to switch to.  This will'
      SRZ.HELP<-1>='load all the rate tables and'
      SRZ.HELP<-1>='Valid Shipping Points for the'
      SRZ.HELP<-1>='choosen Routing Zip and return'
      SRZ.HELP<-1>='you to the Main Entry screen.'

      SRZS.HELP=''                       ; *123456789012345678901234567890
      SRZS.HELP<-1>='SELECT SUBSTITUTION ZIP'
      SRZS.HELP<-1>='-----------------------'
      SRZS.HELP<-1>=' '
      SRZS.HELP<-1>='You are selecting a Substitution'
      SRZS.HELP<-1>='Zip to switch to.  This will'
      SRZS.HELP<-1>='load all the effective dates'
      SRZS.HELP<-1>='for the substitute zip selected'

      CRZ.HELP=''                        ; *123456789012345678901234567890
      CRZ.HELP<-1>='COPY ROUTING ZIP'
      CRZ.HELP<-1>='----------------'
      CRZ.HELP<-1>=' '
      CRZ.HELP<-1>='You are coping a Routing Zip'
      CRZ.HELP<-1>='for the Client/Carrier that'
      CRZ.HELP<-1>='you have specified.  You can'
      CRZ.HELP<-1>='Enter a U.S. or CANADAN zip'
      CRZ.HELP<-1>='You can NOT enter duplicate'
      CRZ.HELP<-1>='zip codes.  All zips will be'
      CRZ.HELP<-1>='checked to see if the computer'
      CRZ.HELP<-1>='knows the City and State.  If'
      CRZ.HELP<-1>='it doesnt know the City/State'
      CRZ.HELP<-1>='it is POSSIBLE that the zip'
      CRZ.HELP<-1>='is invalid but does not mean'
      CRZ.HELP<-1>='that is invalid.  The computer'
      CRZ.HELP<-1>='may not know the City/State.'
      CRZ.HELP<-1>='You will be asked if you wish'
      CRZ.HELP<-1>='to continue using the zip.'

      CED.HELP=''                        ; *123456789012345678901234567890
      CED.HELP<-1>='COPY EFFECTIVE DATE'
      CED.HELP<-1>='-------------------'
      CED.HELP<-1>=' '
      CED.HELP<-1>='Effective Date Copy help here.'

      ISZ.HELP=''                        ; *123456789012345678901234567890
      ISZ.HELP<-1>='SUBSTITUTE ZIP SETUP'
      ISZ.HELP<-1>='--------------------'
      ISZ.HELP<-1>=' '
      ISZ.HELP<-1>='The Substitute Zip Codes are'
      ISZ.HELP<-1>='used to have multiple zips'
      ISZ.HELP<-1>='using the same Routing setup.'
      ISZ.HELP<-1>=' '
      ISZ.HELP<-1>='This is mainly needed for'
      ISZ.HELP<-1>='Carriers who frequently put'
      ISZ.HELP<-1>='the incorrect Zip Code on a'
      ISZ.HELP<-1>='freight bill which is not the'
      ISZ.HELP<-1>='correct routing zip but the'
      ISZ.HELP<-1>='Zip they use is Close.  The'
      ISZ.HELP<-1>='Substitute Zip acts as an'
      ISZ.HELP<-1>='alternate zip to check for'
      ISZ.HELP<-1>='but will substitute the base'
      ISZ.HELP<-1>='routing zip when used.'
      ASZ.HELP=''                        ; *123456789012345678901234567890
      ASZ.HELP<-1>='ADD SUBSTITUTE ZIP'
      ASZ.HELP<-1>='------------------'
      ASZ.HELP<-1>=' '
      ASZ.HELP<-1>='You are being asked to add a'
      ASZ.HELP<-1>='Substitute Zip Code.'
      ASZ.HELP<-1>=' '
      ASZ.HELP<-1>='The Substitute Zip acts as an'
      ASZ.HELP<-1>='alternate zip to check for'
      ASZ.HELP<-1>='but will substitute the base'
      ASZ.HELP<-1>='routing zip when used.'

      DSZ.HELP=''                        ; *123456789012345678901234567890
      DSZ.HELP<-1>='DELETE SUBSTITUTE ZIP'
      DSZ.HELP<-1>='---------------------'
      DSZ.HELP<-1>=' '
      DSZ.HELP<-1>='Deleting a substitue zip will'
      DSZ.HELP<-1>='remove that substitute zip'
      DSZ.HELP<-1>='from the list of substitute'
      DSZ.HELP<-1>='zips.  It DOES NOT effect any'
      DSZ.HELP<-1>='settings for the Base Routing'
      DSZ.HELP<-1>='Zip.'
      RETURN
****************************************************
FIND.LOCKED:
****************************************************
      STMT = 'LIST.READU EVERY'
      EXECUTE STMT CAPTURING OUTPUT
      FL.LEN = DCOUNT(OUTPUT,@AM)
      FL.USER = 'Someone'
      FOUND = FALSE
      FOR X = 1 TO FL.LEN UNTIL FOUND
         T.USER = OCONV(TRIM(OUTPUT<X>[44,9]),'MCU')
         T.FILE = TRIM(OUTPUT<X>[53,17])
         IF T.FILE = FIND.LOCKED.NAME THEN
            FL.USER = T.USER
            FOUND = TRUE
         END
      NEXT
      CALL ELINE(FL.USER:" has the file ":FIND.LOCKED.NAME:" locked. Find them and tell them to get out!")
      RETURN
****************************************************
ERRORS:
****************************************************
      IF ERR.MSG = '' THEN
         T.MSG = 'ERROR DETECTED'
      END ELSE
         T.MSG = ERR.MSG
         ERR.MSG = ''                    ; * Don't use again By accident.
      END
      CRT @(0,21):CHAR(7):T.MSG:'-PRESS A KEY':
      INPUT NULL
      RETURN
****************************************************
BEEP:
****************************************************
      CRT CHAR(7):
      RETURN
****************************************************
DEBUG:
****************************************************
      CRT @(0,21):CHAR(7):REVON:'DEBUG - PRESS BREAK':REVOFF:@(-4):
      INPUT NULL,1
      CRT @(0,21):@(-4):
      RETURN
****************************************************
DISPLAY.OVERRIDES: ***
****************************************************
      RETURN
*
      OVERRIDE.ARRAY=''
      OVERRIDE.ID=CLIENT.ID:'*':CARRIER.ID
      READ OVERRIDE.REC FROM F.OVERRIDE,OVERRIDE.ID THEN
         OVERRIDE.ARRAY<-1>='     Client ':CLIENT.ID:'/ Carrier ':CARRIER.ID:'     '
         NUM.OF.OVERRIDE = DCOUNT(OVERRIDE.REC<1>,@VM)
         FOR XX = 1 TO NUM.OF.OVERRIDE
            OVERRIDE.TEXT=OVERRIDE.REC<6,XX>:OVERRIDE.REC<14,XX>:' ':OVERRIDE.REC<1,XX>'D2/'
            IF OVERRIDE.REC<2,XX>='' THEN
               OVERRIDE.TEXT=OVERRIDE.TEXT:'  OPEN   '
            END ELSE
               OVERRIDE.TEXT=OVERRIDE.TEXT:' ':OVERRIDE.REC<2,XX>'D2/'
            END
            TYPE=''
            LOCATE OVERRIDE.REC<3,XX> IN OVERRIDE.FIELDS<1> SETTING OVERRIDE.POS THEN
               TYPE=OVERRIDE.FIELDS<4,OVERRIDE.POS>
               IF TYPE='' THEN TYPE='MCU'
            END
            OVERRIDE.INFO=OCONV(OVERRIDE.REC<5,XX>,TYPE)
            OVERRIDE.TEXT=OVERRIDE.TEXT:' ':OVERRIDE.REC<7,XX>'L#1':' ':OVERRIDE.REC<3,XX>'L#5':' ':OVERRIDE.REC<4,XX>:' ':OVERRIDE.INFO
            OVERRIDE.ARRAY<-1>=OVERRIDE.TEXT
         NEXT XX
      END
      OVERRIDE.ID=CLIENT.ID:'*ALL'
      READ OVERRIDE.REC FROM F.OVERRIDE,OVERRIDE.ID THEN
         OVERRIDE.ARRAY<-1>='     Client ':CLIENT.ID:'/ All Carriers      '
         NUM.OF.OVERRIDE = DCOUNT(OVERRIDE.REC<1>,@VM)
         FOR XX = 1 TO NUM.OF.OVERRIDE
            OVERRIDE.TEXT=OVERRIDE.REC<6,XX>:OVERRIDE.REC<14,XX>:' ':OVERRIDE.REC<1,XX>'D2/'
            IF OVERRIDE.REC<2,XX>='' THEN
               OVERRIDE.TEXT=OVERRIDE.TEXT:'  OPEN   '
            END ELSE
               OVERRIDE.TEXT=OVERRIDE.TEXT:' ':OVERRIDE.REC<2,XX>'D2/'
            END
            TYPE=''
            LOCATE OVERRIDE.REC<3,XX> IN OVERRIDE.FIELDS<1> SETTING OVERRIDE.POS THEN
               TYPE=OVERRIDE.FIELDS<4,OVERRIDE.POS>
               IF TYPE='' THEN TYPE='MCU'
            END
            OVERRIDE.INFO=OCONV(OVERRIDE.REC<5,XX>,TYPE)
            OVERRIDE.TEXT=OVERRIDE.TEXT:' ':OVERRIDE.REC<7,XX>'L#1':' ':OVERRIDE.REC<3,XX>'L#5':' ':OVERRIDE.REC<4,XX>:' ':OVERRIDE.INFO
            OVERRIDE.ARRAY<-1>=OVERRIDE.TEXT
         NEXT XX
      END
      OVERRIDE.ID='ALL*':CARRIER.ID
      READ OVERRIDE.REC FROM F.OVERRIDE,OVERRIDE.ID THEN
         OVERRIDE.ARRAY<-1>='     All Clients / Carrier ':CARRIER.ID:'     '
         NUM.OF.OVERRIDE = DCOUNT(OVERRIDE.REC<1>,@VM)
         FOR XX = 1 TO NUM.OF.OVERRIDE
            OVERRIDE.TEXT=OVERRIDE.REC<6,XX>:OVERRIDE.REC<14,XX>:' ':OVERRIDE.REC<1,XX>'D2/'
            IF OVERRIDE.REC<2,XX>='' THEN
               OVERRIDE.TEXT=OVERRIDE.TEXT:'  OPEN   '
            END ELSE
               OVERRIDE.TEXT=OVERRIDE.TEXT:' ':OVERRIDE.REC<2,XX>'D2/'
            END
            TYPE=''
            LOCATE OVERRIDE.REC<3,XX> IN OVERRIDE.FIELDS<1> SETTING OVERRIDE.POS THEN
               TYPE=OVERRIDE.FIELDS<4,OVERRIDE.POS>
               IF TYPE='' THEN TYPE='MCU'
            END
            OVERRIDE.INFO=OCONV(OVERRIDE.REC<5,XX>,TYPE)
            OVERRIDE.TEXT=OVERRIDE.TEXT:' ':OVERRIDE.REC<7,XX>'L#1':' ':OVERRIDE.REC<3,XX>'L#5':' ':OVERRIDE.REC<4,XX>:' ':OVERRIDE.INFO
            OVERRIDE.ARRAY<-1>=OVERRIDE.TEXT
         NEXT XX
      END
      IF OVERRIDE.ARRAY#'' THEN
         NUM.OF.OVERRIDES=DCOUNT(OVERRIDE.ARRAY,@AM)
         IF NUM.OF.OVERRIDES > 12 THEN
            OVERRIDE.ARRAY<12>='   ... See Override Program for MORE  '
            NUM.OF.OVERRIDES = 12
         END
         FOR XX = 1 TO NUM.OF.OVERRIDES
            IF XX < 7 THEN
               CRT @(0,13+XX):OVERRIDE.ARRAY<XX>'L#39'
            END ELSE
               CRT @(40,7+XX):OVERRIDE.ARRAY<XX>'L#39'
            END
         NEXT XX
         CALL ELINE('Override exist - Check override for conflict - Press Enter to Continue')
         GOSUB REFRESH.DISPLAY
         FOR XX = 1 TO 6
            CRT @(0,13+XX):@(-4)
         NEXT XX
      END
      RETURN
