      SUBROUTINE FB.2.1.AUDIT.OWEN.V2(VIN,VOUT,DAUDIT,CONTR.DFSC,BENCH.DFSC,DTARIFFS,DTARIFF.DATE.XREF,LI.CODES,F.AUDIT.TABLES,F.AUDIT.ZIPS,F.PCIN,F.PCOUT,F.TABLES)
********************************************************************
* Program name :  FB.2.1.AUDIT.OWEN.V2
* Author       :  OWEN HOLMAN
* Date written :  DECEMBER 8, 1995
* Library      :  FBBP
$* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* THIS PROGRAM ALLOWS THE ENTRY OF SPECIFIC INFORMATION
* NEEDED TO AUDIT FREIGHT BILLS DURING DATA ENTRY
*
* Last updated by afs (AFSLOGISTICS\gbino) at 09:47:47 on 03/18/2024.
*
* Start modification history*
* 091302 - JMK01 - ADD CANADA TO AUDIT PROCESS
* 110802 - JMK02 - ADD ASSESSORIAL CWT CALCULATION
* 121302 - JMK03 - ADD THIRD PARTY LOGIC FOR OLA
* 121302 - JMK04 - RESTRICT MISC CHG CODE TO ONCE ONLY
* 012103 - JMK05 - ADD MAX.LTL TO PROCESSING
* 050603 - JMK06 - ADD CALCULATION DETAILS TO OUT VARIABLE
* 060603 - JMK07 - DISABLE JMK06 PROCESSING
* 120903 - JMK08 - LETS TRY JMK06 AGAIN
* 021104 - JMK09 - ADJUST FOR CONTRACT MINIMUMS FOR FB DETAILS
* 021204 - JMK10 - ADD BENCHMARK MIN FOR BLDR FACTORY ST 01209
* 032604 - JMK11 - MAKE BENCH FSC SAME AS CONTR FSC WHEN "ASK"
* 052804 - JMK12 - ADD SCROLLING OPTION FOR ASSESORIAL CHG LIST
* 111504 - JMK13 - ADD FORCE BENCHMARK MINIMUM PROCESSING
* 022805 - JMK14 - COLLECT THREE SETS OF FSC DATA FOR REVIEW
* 040505 - JMK15 - ADD ATK (01365) BM OVERRIDES PER AGREEMENT
* 042905 - JMK16 - ADJUST MAX LTL WEIGHT EVALUATIONS FROM GE TO GT
* 081905 - JMK17 - ADD CONS MFG (00843) BM OVERRIDES PER AGREEMENT
* 091305 - JMK18 - CORRECT FSC CALCULATIONS AND ENTRY
* 102405 - JMK19 - BEGIN TESTING FOR RWS RATING TOOL-INSTALLED 012306 DISABLE
* 012506 - JMK20 - ADD FLAT RATE CHARGES FOR ATK PALLETS AND OTHERS
* 013006 - JMK21 - EXPAND FLAT RATE CHARGES FOR INTRA AND INTER
* 020206 - JMK22 - TEST AFS500 ON RWS FOR FUNCTIONALITY
* 020906 - JMK23 - ADD MULTIPLE CALLS FOR RWS WHEN NETWORK CLOGS
* 021306 - JMK24 - FLAT RATE CHARGE ADJUSTMENTS FOR "0.00" PLACEHOLDERS
* 021406 - JMK25 - DISABLE THE AFS500 CALLS TO RWS AND REINSTATE AFS500 SUBROUTINE
* 030606 - JMK26 - ENABLE CALLS TO RWS AND DISABLE AFS500 SUBROUTINE
* 030806 - JMK27 - EXTEND MULTIPLE CALLS TO RWS FROM 10 TO 20
* 031506 - JMK28 - RE-ENABLE THE ABSOLUTE MINIMUM WITH THE JMK24 CHANGES
* 032306 - JMK29 - DISABLE THE EXTENDED CALLS TO RWS FROM 20 BACK TO 10
* 050106 - JMK30 - DISABLE CON-WAY AB-BA REQUIREMENTS FOR THIRD PARTY OLA
* 071306 - JMK31 - ADD AFS525 CALL TO RATEWARE SERVER
* 083106 - JMK32 - ADD SUBSTITUTE CARRIER FOR OLA PROCESSING
* 092606 - JMK33 - PASS CLIENT TO RWS FOR WEIGHT ADJUSTMENTS (01215)
* 120507 - JMK34 - C070955 - Add ability to use Old AFS FSC in Benchmark Calculation
* 020108 - JMK35 - C080232 - Adding Joint Line Pricing to OLA
* 020608 - JMK36 - T080421 - RWS errors ; Combination not in tariff
* 022008 - JMK37 - T080556 - Joint line rate quote
* 022108 - NPR02 - T070199 - 3RD PTY SELECT BEST TABLE BASED ON QUOTE AMT AND NOT HIGHEST TABLE #
* 022208 - JMK38 - TEMPORARY PATCH FOR ROADWAY AVINGER SERVICE OVERRIDE
* 022708 - JMK39 - C080646 - Modify inbound joint line pricing
* 030508 - JMK40 - T080590 - Rate Estimate unresponsive 4:00 - 6:30 EST.
* 041808 - NPR03 - C080766 - Adding a date effective to OLA zip code substitution screen
* 051308 - JMK41 - PASSING F.TABLES TO RWS AND RWS.SVC INSTEAD OF OPENING
* 061308 - NPR04 - T081341 - Added ability to put a cutoff date to disallow keying
* 080708 - NPR05 - T080691 - Added lookup on Table for setting JL related flags for specific zips
* 081108 - JMK42 - C081931 - Send an email each time an invalid zip is sent to RWS
* 081508 - JMK43 - C081314 - Overcharge classification
* 090908 - JMK44 - T082074 - Joint Line issue: some information coming from wrong table
* 092908 - JMK45 - C082012 - Add Beaver Express points into web rater
* 100608 - JMK46 - T082273 - FSC Benchmarks ; Force FSC Benchmark to "C" when current fuel is not "AFS" or "AFN"
* 111208 - JMK47 - C081905 - Allow multiple discounts on BM in OLA
* 122208 - JMK48 - REMOVED ALL CODING FOR JMK19 SINCE IT WAS TESTING AND HAS SINCE BEEN DISABLED
* 122208 - JMK49 - T082190 - Audit system not using correct FSC when making a correction
* 031009 - JMK50 - Capture Time in Transit Days
* 052809 - JMK51 - C090708 - Changes to commissions for new client Freight Buddy
* 061809 - JMK52 - T090800 - JL state is turned on but still saying "cannot audit, this is a misroute, NO INBOUND JOINT LINE PRICING"
* 081409 - NPR06 - T091038 - Keyer / verifier information should be displayed to auditors before a bill is updated
* 092209 - NPR07 - T091132 - Display more info with regard to FSC calculations (Added minor changes on 10/13/09).
* 102709 - JMK63 - C091269 - New accessorial calculation
* 091281 - NPR08 - T091132 - Add option for entering Accessorials with scrolling list of available options.
* 111809 - JMK64 - T091395 - Pilot Freight issues - 01727
* 040510 - NPR09 - T100308 - Accesorial "Protect from Freezing"  amount needs to be expanded up to $999.00
* 040610 - NPR10 - T091391 - Pull in available data from BOL file if setup to do so on Client file.
* 060410 - NPR11 - T100230 - Added Email alert for error "Cannot Audit!  This bill is a misroute! (Shipping Point is > Highest)"
* 091510 - NPR12 - T100669 - Added Email alert for error when an auditor is shown "Cannot audit! (zip) or ALL is not set up as a Routing Zip!"
* 081310 - JMK65 - ADDITIONAL FILTER FOR JOINT LINE CONFIRMATION JL.FLAG MUST HAVE SOME CC FLAG AND NOT NULL
* 101410 - NPR13 - T101076 - Fixed issue where Transit time/Sevice days where not being calculated.
* 123010 - JMK67 - T101218 - FB entry ; error - 103 bench.tariff  missing from tariff eff date xref
* 010311 - JMK68 - CONFIRM ORIGIN AND DESTINATION ZIPS WHEN THE SAME
* 010511 - NPR14 - Add option for Auditors to make changes on Detail page (Asserorials).
* 011411 - NPR15 - Reversed out changes done on 010511 (NPR14) as per Brian Jeppson & Auditors .
* 050911 - NPR16 - Emails for capacity load should not go to Wayne Pardue if from Freight Payment
* 092611 - JMK69 - C111243 - AER Sales 01863 Excessive Freight Expense
* 111111 - JMK70 - Adjust video attributes for Accuterm and future use
* 012812 - SWB01 - Add prompt to first screen to display Override Details
* 030112 - SWB02 - SysAid 1908 - Modify to give privileges to users with BCTRL<12>=1 and user entered the password at the 'FRT' option of the PRO # prompt.
* 072612 - JMK71 - SysAid#3317 - USI 25117 - Transit Times
* 082912 - JMK72 - SysAid#3619 - Web Client Maintenance ? Add option for flat fee
* 102312 - JAD01 - Check and note when Terms don't match, and reject
* 070113 - JMK73 - SysAid#6374 - Need commissions to calculate for Beaver Express
* 070813 - JMK74 - SysAid#6346 - Adjust 10K limit to 20K - audit override to cover
* 081513 - JMK75 - SysAid#6770 - Ability to catch log start date
* 092413 - JMK76 - Project#377 - Install RateWareXL web services
* 101413 - JMK77 - SysAid#7395 - Beaver Express to calculate logistics
* 031914 - DRF01 - SysAid#4811 - Correct a problem with the MISC CODES not display correctly
* 042814 - JMK78 - SysAid#9449 - B&H service points - Disable Carrier Connect for overrides
* 042914 - JMK79 - SysAid#9525 - SEFL info not reporting correct (Reverse JMK78)
* 053014 - DRF02 - SysAid 9913 - Allow AFS rating for client 01019 for
*                  carrier 00198 effective 5/16/14 for weight over 1
*                  pound
* 081914 - DRF03 - SysAid 113293 - Allow AFS rating for client 02490 for
*                  carrier 00198 effective 8/19/14 for weight over 100
*                  pounds
* 100814 - DRF04 - SysAid 12264 - Joint Line Benchmark not working
* 101314 - DRF05 - SysAid 12734 - Removed the email about the capacity loads
* 111814 - DRF06 - SysAid 13642 - Changed client 01822 and carrier 00561
*                  to take commission on all shipment not just those over
*                  Reinstalled DRF06 per email from Wayne on 11/19/14
*                  100 pounds.
* 120514 - SWB03 - SysAid# 13882 - Disable emails when zip code doesn't match routing zip.
* 010515 - DRF07 - SysAid 14472 - Beaver Express should not take
*                  commission on weight less than 200 for client
*                  01015 Hillyard
* 011415 - SWB04 - SysAid# 14659 - Disable a misroute email to Wayne
* 022515 - JMK80 - SysAid#15482 - NON- SMC Carrier Service 1,1,11,17
* 031715 - JMK81 - SysAid#16032 - Webrater issues withe SEFL
* 041715 - DRF08 - SysAid 16764 - Allow AFS rating for client 05171 for
*                  carrier 00198 effective 04/17/15 for weight over 100
*                  pounds
* 042015 - DRF09 - SysAid 16506 - Non SMC Carrier Service
* 042115 - DRF10 - SysAid 16764 - Allow AFS rating for client 01394 for
*                  carrier 00198 effective 01/15/15 for weight over 100
*                  pounds
* 060115 - DRF11 - SysAid 17595 - Allow AFS rating for client 05411 for
*                  carrier 00198 effective 06/01/15 for weight over 100
*                  pounds
* 061015 - SWB05 - SysAid 17933 - Beaver Express should take commission
*                  on weight from 101 to 200 for bills starting 06/12/15
*                  for client 01650 (EGW Utilities)
* 081216 - DRF12 - SysAid 19299 - Beaver Express should take commission
*                  on weight from 1 to 200 for bills 01/01/15 for client
*                  05351 Airgas Gulf Coast
* 011816 - DRF13 - SysAid 21613 - Beaver Express should take commission
*                  on weight from 101 to 200 for bills 01/01/15 for client
*                  01454 HIS Coating
* 051716 - GRB01 - SysAid 24574 - Beaver Express should take commission
*                  on weight from 1 to 200 for bills 05/20/16 for client
*                  00851 and 02027
* 061416 - GRB02 - SysAid 25203 - Beaver Express should take commission on weight from 1 to 200 for bills 06/13/16 for client
*                  01781
* 062316 - GRB03 - SysAid 25430 - Beaver Express should take commission on weight from 1 to 200 for bills 06/28/16 for client
*                  01987
* 080316 - GRB04 - SysAid 26204 - Beaver Express should take commission on weight from 1 to 200 for bills 08/08/16 for client
*                  01072, 07073, 07074, 02104
* 082416 - GRB05 - SysAid 26549 Reverse change for ticket 13642
* 091216 - TAG01 - Sysaid 26995 Calculate Cost Management Saving For 05095
* 110116 - GRB06 - SysAid 27964 Allow audit to see notes
* 110216 - TAG02 - SysAid 28197 Calculate Cost Management Saving For 05608
* 013017 - TAG03 - SysAid 30104 Calculate Cost Management Saving For 01789
* 051917 - DRF14 - SysAid 32509 Remove Capacity Load feature
* 060117 - GRB07 - New Third Party Logic
* 080317 - NKH01 - ME 5480 Caluculate Cost Manangement Savings For 01650
* 110217 - NKH02 - ME 8113 Beaver Express should take commision on weight
*                  from 101 and up for bills 11/13/17 for client 00934
* 111417 - NKH03 - ME 8311 Modified to use Audit Assessorial Include/Exclude flags
* 010418 - NKH04 - Modified to call Carrier Connect XL
* 010818 - DRF15 - Ticket 9630. The percent and CWT if they were entered
*                  in the Assessorial Code Maintenance instead of a OLA table
* 011518 - NKH05 - ME 9628 Check assessorials and audit table before default GST
* 011718 - GRB08 - Correct Third Party Logic
* 022318 - NKH06 - ME 9630 Corrected % from being written to FB.BILLS accessorials.
* 031618 - NKH07 - ME 10931 Changed old TP logic to use orig zip code from table
* 052218 - DRF16 - Ticket 12681 - Corrected the counter for number of
*                  effective date for the substitute zips if the
*                  beginning date is null.
* 062618 - NKH08 - Modified for Rateware web server version 2 (RWXL.V2)
* 071318 - NKH09 - ME 12839 Modified accessorial calculations
* 081618 - NKH10 - ACCU-43 Caluculate Cost Manangement Savings for 5763
* 091218 - GRB09 - Correct table for OLD third party CALC
* 091818 - NKH11 - ACCU-44 Use the substitute client for FB.AUDIT.ACC file
* 103118 - NKH12 - ACCU-180 Calculate Cost Management savings for 5673
* 111218 - NKH13 - ACCU-195 Calculate Cost Management savings for 1141
* 111418 - NKH14 - Modification for AFS tariffs for conversion to RWXL
* 121818 - NKH15 - ACCU-190 Correct issue with substitute client accessorials
* 123118 - GRB10 - ACCU-79 Add canadian joint line
* 032019 - NKH16 - ACCU-328 Corrected disable flag for third party
* 061019 - NKH17 - ACCU-400 Initialed BENCH.FSC.PERC
* 071519 - NKH18 - ACCU-438 Calculate Cost Management savings for 1139
* 011420 - NKH19 - ACCU-738 Calculate Cost Management savings for 726
* 102920 - NKH20 - ACCU-1002 Corrected issue with accesorial minimum
* 121720 - NKH21 - ACCU-1074 Added Tempo Rater - Placeholder for V3
* 090121 - NKH22 - ACCU-1342 AFSmartPay Locking
* 091721 - NKH23 - ACCU-1342 AFSmartPay Locking Mod
* 071123 - NKH24 - ACCU-2288 Modified for smarty logic
* 101723 - NKH25 - ACCU-2472 Added highlight  to Routing zip errors
* 021924 - GRB11 - ACCU-2576 Modify to call TEMPO for hundred weight CWT rating
* 022324 - NKH26 - ACCU-2576 Continue work on TEMPO rating
* End modification history
*********************************************************************
**VIN<1> = OPT ; *'I'nquire or 'V'erify
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE FILE.DEFS INC_FB.AUDIT
$INCLUDE FILE.DEFS INC_ADDS60.CODES
$INCLUDE FILE.DEFS INC_COLORS
      COMMON PROGPARAMS(24)
      EQU PROGFROM TO PROGPARAMS(1)
*****      EQU USER TO PROGPARAMS(2)
      EQU PROCDATE TO PROGPARAMS(3)
      PROGFROM = 'FB.2.1.AUDIT.OWEN.V2'  ; * NKH04
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'FB.2.1.AUDIT.OWEN.V2' ; UPL.VOUT = ''     ; * NPR_UPL 04/23/2010  ; * NKH04

      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
      OPEN '','FB.AUDIT.ACC' TO F.AUDIT.ACC ELSE   ; * JMK63
         CALL OPEN.ABORT('FB.AUDIT.ACC',PROG.NAME)           ; * JMK63
      END                                ; * JMK63
      OPEN '','CARRIERS' TO F.CARRIERS ELSE        ; * NKH04
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)     ; * NKH04
      END                                ; * NKH04
      OPEN '','ZIPS' TO ZIPS ELSE        ; * NKH04
         CALL OPEN.ABORT('ZIPS','FB.2.1.AUDIT.OWEN.V2')      ; * NKH04
      END                                ; * NKH04
      * Begin GRB11
      OPEN '','TEMPO.CLIENTS' TO F.TEMPOC ELSE
         CALL OPEN.ABORT('TEMPO.CLIENTS',PROG.NAME)
      END
      OPEN '','TEMPO.CLIENTS.ACC' TO F.TEMPOCACC ELSE
         CALL OPEN.ABORT('TEMPO.CLIENTS.ACC',PROG.NAME)
      END
      * End GRB11
      OPEN '','OPERATOR' TO F.OPERATOR ELSE
         CALL OPEN.ABORT('OPERATOR','FB.2.1.AUDIT.OWEN.V2')
      END

      * Initialize variables
      TP.WHY.TAB = ""
      TP.AMT.TAB = ""
      **    TP.TABLE.TAB = TABLE
      **    TP.TABLE.TAB<2> = DEST.TABLE
      TP.CLIENT.COST = ""
      TP.QUOTE.AMT = ""
      QUOTE.AMT = 0
      QUOTE.AMT = 0
      TP.GTOT.CONTR.AMT = ""
      TP.GTOT.BENCH.AMT = ""
      TP.CONSULTING.AMT = ""
      TP.CNT = 1
      SAVE.CONTR = ''                    ; * NKH03
      SAVE.BENCH = ''                    ; * NKH03
      LAST.LINE = ''                     ; * NKH03
      SAVED.LINES = 0                    ; * NKH03
      RES.FLAG = ''                      ; * NKH24
      PROMPT ''
      TODAY=DATE()
      CHANGE.MODE=0
      TERM.TYPE=SYSTEM(7)                ; * JMK70
      BEGIN CASE                         ; * JMK70
         CASE TERM.TYPE='REGENT60'       ; * JMK70
            REV.ON = TERM.ESC.SEQ:CHAR(TERM.REV)   ; * JCW07
            REV.OFF = TERM.ESC.SEQ:CHAR(TERM.NORMAL)         ; * JCW07
         CASE 1                          ; * JMK70
            REV.ON = @(-13)              ; * JMK70
            REV.OFF = @(-14)             ; * JMK70
      END CASE                           ; * JMK70
      XPEDX='00908':@AM:'00994':@AM:'00349':@AM:'00803':@AM:'00752':@AM:'00855':@AM:'00992':@AM:'00193':@AM:'00990':@AM:'00988':@AM:'00217':@AM:'00876':@AM:'00806':@AM:'00927':@AM:'00993':@AM:'00298':@AM:'00996':@AM:'00989':@AM:'00279':@AM:'00772':@AM:'00355':@AM:'00991':@AM:'00002':@AM:'00768':@AM:'00005':@AM:'00807':@AM:'00995'
      VALID.CLASSES=50:@VM:55:@VM:60:@VM:65:@VM:70:@VM:77:@VM:85:@VM:92:@VM:100:@VM:110:@VM:125:@VM:150:@VM:175:@VM:200:@VM:250:@VM:300:@VM:400:@VM:500
      DAUDIT.TABLES=''                   ; * For Misroutes Misc Charges
      JL.DAUDIT.TABLES=''                ; * JMK44
      AUDIT.TABLE.ID=''
      FSC.LOGISTICS.AMT=0
      GTOT.CONTR.AMT=0
      GTOT.BENCH.AMT=0
      READ AFSO.BENCH.DFSC FROM F.TABLES,'AFSO*FSC' ELSE AFSO.BENCH.DFSC=''      ; * JMK34
      CONTR.FSC.PARMS=''                 ; * JMK14
      BENCH.FSC.PARMS=''                 ; * JMK14
      AFSO.BENCH.FSC.PARMS=''            ; * JMK34
      AFS.FSC.PARMS=''                   ; * JMK14
      AUDITOR.VIEWED = 0
      DOT.USED = 0
      WHY=''
      AUDIT.WHY=''                       ; * JAD01
      DTL.VOUT=''                        ; * JMK06
      ZIP.VOUT=''
      AMOUNT.MATCH=''
      CONTR.TARIFF.DRIVER=''
      BENCH.TARIFF.DRIVER=''
      CONTR.DOUT=''
      BENCH.DOUT=''                      ; * In case of no logistics
      CAP.DOUT=''
      CAPACITY.LOAD=0
      NULL=''                            ; * Used for Mass Change back to CRT Command
      LOWEST.TABLE.CLASS=''              ; *Lowest possible "Calculated" class on Table
      HIGHEST.CLASS=''                   ; * Highest "Calculated" class on bill
      SENT.TO.PC=0
      TESTING=0
      X.EX.FLAG=''
      BACK.FLAG=0
      PROG.MODE=''
      CONTR.FSC.PERC=''                  ; * JMK12
      BENCH.FSC.PERC=''                  ; * NKH17
      USER.TYPE=''
      OPT = VIN<1>
      FIRST.TIME='Y'
      JL.FLAG = "0"                      ; * NPR00
      COMB.DIR.FLG=''                    ; * NPR99
      TRANSIT.TIME=''                    ; * JMK50
      MC.MODE='INPUT'                    ; * NPR08
      MC.ATTR = 1                        ; * NPR08
      GOT.ASS.CODES=0                    ; * NPR08
      ASS.CNT = 0                        ; * NPR08
      DSP.LN = 1                         ; * NPR08
      MAX.OVC.AMT=-1
      DOT.OVC.AMT=-100
      CUT.DESC='Tariff Error'
      CUT.CLASS='M'                      ; * JMK43
      DIFFERENCE=''
      IF OPT = 'I' THEN
         INQUIRE = 1
         CW.MODE = 'EDIT'
         MC.MODE = 'EDIT'
      END ELSE
         INQUIRE = 0
         CW.MODE = 'INPUT'
         MC.MODE = 'INPUT'
      END
      CALL FB.CLEAR.WINDOW
      TRANS.MODE=''
      FSC.ACCESSORIAL.PERCENT.FLAG=0
      BILL.DATE=VIN<3>
      TRANS.MODE=VIN<4>
      PIECES=VIN<5>
      TOT.WEIGHT=VIN<6>
      AIR.MISC.CHARGE=VIN<7>             ; * Not Used -> Passed Through
      AMT.ON.BILL=VIN<8>
      CARRIER.CHG=VIN<9>
      CARRIER=VIN<10>
      OLA.CARRIER=CARRIER                ; * JMK32
      IF CARRIER='13171' THEN OLA.CARRIER='01625'  ; * JMK32
      IF CARRIER='00537' THEN OLA.CARRIER='12826'  ; * JMK32
      IF CARRIER='12244' THEN OLA.CARRIER='12826'  ; * JMK32
      EQU S5 TO '     '                  ; * JAD01
      AFS.BOL=0                          ; * JAD01
      MATCH.BOL=0
      T.SH.NAME = VIN<68,1>              ; * JAD01
      T.SH.ADDR = VIN<68,2>              ; * JAD01
      T.SH.CITY = VIN<73,2>              ; * JAD01
      T.SH.ST = VIN<73,3>                ; * JAD01
      T.SH.ZP = VIN<73,1>                ; * JAD01
      T.CN.NAME = VIN<69,1>              ; * JAD01
      T.CN.ADDR = VIN<69,2>              ; * JAD01
      T.CN.CITY = VIN<74,2>              ; * JAD01
      T.CN.ST = VIN<74,3>                ; * JAD01
      T.CN.ZP = VIN<74,1>                ; * JAD01
      T.BT.NAME = VIN<70,1>              ; * JAD01
      T.BT.ADDR = VIN<70,2>              ; * JAD01
      T.BT.CITY = VIN<70,3>              ; * JAD01
      T.BT.ST = VIN<70,4>                ; * JAD01
      T.BT.ZP = VIN<70,5>                ; * JAD01
      T.TERMS = VIN<71>                  ; * JAD01
      T.AFS.BOL.DESC = VIN<72>           ; * JAD01
      CHANGE.FLAG=VIN<75>                ; * JAD01
      AFS.BOL=VIN<76>                    ; * JAD01
      FB.NOTE = VIN<77>                  ; * GRB06
      MATCH.BOL=VIN<78>
      CLIENT.NAME=VIN<82>                ; * GRB11
      CARRIER.NAME = VIN<81>             ; * GRB11
      HANDLING.UNITS=VIN<83>             ; * GRB11
      CONVERT '_' TO ' ' IN VIN          ; * JAD01
      CK.CS=0                            ; * JMK35
      READ NSMC.LIST FROM F.TABLES,'NSMC.CARRIERS' ELSE NSMC.LIST=''   ; * JMK35
      LOCATE CARRIER IN NSMC.LIST SETTING WPOS THEN CK.CS=1  ; * JMK35
      CLIENT=VIN<11>
      
      
      
      * Begin GRB11
      READ TEMPO.CLIENT FROM F.TEMPOC,CLIENT THEN
         IF TEMPO.CLIENT<1> = "" THEN
            TEMPO.CLIENT.FLG = @TRUE
            ADD.FSC=1
         END ELSE
            LOCATE(CARRIER,TEMPO.CLIENT<1>,1;TPOS) THEN
               TEMPO.CLIENT.FLG = @TRUE
               ADD.FSC=1
            END ELSE
               TEMPO.CLIENT.FLG = @FALSE
            END
         END
      END ELSE
         TEMPO.CLIENT.FLG = @FALSE
      END
      
      READ TEMPO.CLIENTS.ACC.CDS FROM F.TEMPOCACC,CLIENT ELSE TEMPO.CLIENTS.ACC.CDS =''
      	
      	
      	
* End GRB11
      AUDIT.CLIENT.ID=VIN<79>            ; * NKH11
      IOT=VIN<12>
      ORIG.ZIP=VIN<13,1>
      ORIG.CITY=VIN<13,2>
      ORIG.STATE=VIN<13,3>
      DEST.ZIP=VIN<14,1>
      DEST.CITY=VIN<14,2>
      DEST.STATE=VIN<14,3>
      CDN.ROUTE=0                        ; * JMK01
      IF NOT(NUM(ORIG.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      IF NOT(NUM(DEST.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      CL.ZIP.DEF=VIN<15>
      USER=VIN<16>
      OWEN=0
      MISROUTE=VIN<17>
      CC=VIN<25>                         ; * Character Count
      CLASS.WGT=''
      CLASS.WGT<1>=VIN<18>               ; * Mv Classes
      CLASS.WGT<2>=VIN<19>               ; * Mv Weights
      ORIGNAL.CLASS.WGT=CLASS.WGT
      MISC.CHG=''
      MISC.CHG<1>=VIN<21>                ; * Mv Charge Codes
      MISC.CHG<2>=VIN<22>                ; * Mv Contract  Charge Amounts
      MISC.CHG<3>=VIN<23>                ; * Mv Benchmark Charge Amounts
      LOGISTICS=VIN<24>                  ; * Logistics Switch 1=Logistics 0=None
      LOGISTICS.QUESTION=LOGISTICS       ; * Save Original Value
      IF CLIENT='00223' THEN LOGISTICS=0
      ZIP.LEN=VIN<26>
      IF ZIP.LEN='N' THEN ZIP.LEN=5
      IF ZIP.LEN = 'C' THEN
         ZIP.MASK='L#6'
      END ELSE
         ZIP.MASK='L#5'
      END
      PROG.NAME=VIN<27>
      PROG.DESC=VIN<28>
      PACK.NAME=VIN<29>
      CO.NAME=VIN<30>
      SCREEN.DSP=VIN<31>
      DATA.DSP=VIN<32>
      BILL.DATA=VIN<33>                  ; * Only get Class/Wt/Misc Chg for Misroutes
      AUTO.MISROUTE=VIN<34>              ; * 1=Auto Misroute, 0=Act Like OLA
      NO.LOG.FSC=VIN<35>                 ; * 1=Do not Calculate/ADD FSC to Log/Bench Amt
      PRE.AUDIT.DATE=VIN<36>
      PRO.ID=VIN<37>
      U.TYPE = VIN<43>                   ; * NKH24

      IF VIN<41>='NW' THEN
         NEW.WAY=1
         PROG.MODE=VIN<42>
         USER.TYPE=VIN<43>
         ORIG.AMT.ON.BILL=VIN<44>
      END ELSE
         NEW.WAY=0
      END
      FLAT.RATE=VIN<45>
      MAX.LTL=VIN<46>                    ; * JMK05

      IF USER.TYPE='A' THEN
         IF LOGISTICS THEN
            IF TOT.WEIGHT > MAX.LTL THEN
               CRT @(0,19):REV.ON:TOT.WEIGHT'R#6':REV.OFF
            END
         END
      END
      ORIG.CARRIER=VIN<47>
      FORCE.BENCH.MIN=VIN<48>            ; * JMK13
      CARR.ONLY.FSC=VIN<49>              ; * JMK14
      CARRIER.SCAC=VIN<50>               ; * JMK35
      CARRIER.TYPE=VIN<51>               ; * JMK35
      CUTOFF.DATE = VIN<52>              ; * NPR04
      CHECK.FOR.LOGISTIC = VIN<53>
      LOGISTIC.DATE = VIN<54>
      CHECK.FOR.CAPACITY=VIN<55>
      ENTERED.BY = VIN<56>               ; * Entered  By  * NPR06
      VERIFIED.BY = VIN<57>              ; * Verified By  * NPR06
      DO.BOL.POP = 1                     ; *ZZZ Set flag for BOL Population and verification
      SAVE.CHARGE = 0
      BOL.POP.VER.ARR = VIN<58>          ; * NPR10 *** CLIENTS<254> - MV 'Population' Flags   - Populate Bill data from BOL data ,if flag for data field is set to 'Y'
      BOL.POP.VER.ARR<2> = VIN<59>       ; * NPR10 *** CLIENTS<255> - MV 'Verification' Flags - Verify Bill record against data from BOL data ,if flag for data field is set to 'Y'
      BOL.POP.VER.ARR<3> = VIN<60>       ; * NPR10 *** CLIENTS<256> - MV 'Variance'           - Allow a certain variance on weights and Amount fields when verifying against BOL data.
      BOL.POP.VER.ARR<4> = VIN<61>       ; * NPR10 *** Data from FB.BOL.CRX record related to bill
      ORIG.STACK = VIN<62>               ; * SWB01
      NEW.STACK = VIN<63>                ; * SWB01
      OVR.FIELDS = VIN<64>               ; * SWB01
      OVR.OPTRS = VIN<65>                ; * SWB01
      OVR.INFO = VIN<66>                 ; * SWB01
      FRT.FLAG = VIN<67>                 ; * SWB02
      VC.ID = VIN<80>                    ; * NKH24
      LOGISTICS.AMT=0
      OVERCHARGE.AMT=0
      AMT.TO.PAY=''
      SOCKETHANDLE=''                    ; * JMK40
      REDRAW.SCR=0
      CONTR.ABS.MIN=0                    ; * Contract Absolute Minimum Flag
      BENCH.ABS.MIN=0                    ; * Benchmark Absolute Minimum Flag
      LOCATE CLIENT IN XPEDX SETTING XP.POS THEN XPEDX.CLIENT=1 ELSE XPEDX.CLIENT=0
      IF DAUDIT<11>='DISABLE' THEN
         AUDIT='U'
         MISROUTE=1
      END ELSE
         AUDIT='Y'
         MISROUTE=0
      END
      LOGISTICS.AMT=0
      IF LOGISTICS THEN
         AUDIT.POS=@(65,6)
      END ELSE
         AUDIT.POS=@(65,6)
      END

      GOSUB 6000

      IF (PROG.MODE='2' AND USER.TYPE='A') OR (PROG.MODE='3' AND USER.TYPE='A') THEN GO 525          ; ********************GRBTEMPO
      * IF (PROG.MODE='2' AND USER.TYPE='A') OR (PROG.MODE='3' AND USER.TYPE='A') OR TEMPO.CLIENT.FLG THEN GO 525
*********************************************************************
100:  * Get Audit Y/N
*********************************************************************
      * Begin NKH22
      BILL.IS.LOCKED = 0
      OPEN '', 'FB.BILLS.HIST,':CLIENT TO F.HIST ELSE
         CALL OPEN.ABORT('FB.BILLS.HIST,':CLIENT,'FB.2.1.AUDIT.OWEN.V2')
      END
      READV PRO.BILL.LOCK FROM F.HIST, PRO.ID, 292 THEN
         IF PRO.BILL.LOCK = 'Y' THEN BILL.IS.LOCKED = 1
      END
      * End NKH22
      * Begin NKH23

      READV BILL.LOCK.OVERRIDE FROM F.OPERATOR,USER,79 ELSE BILL.LOCK.OVERRIDE = 0         ; * NKH60
      IF BILL.LOCK.OVERRIDE = 'Y' THEN BILL.LOCK.OVERRIDE = 1          ; * NKH60

      OPEN '','FB.BILLS.LOCKED' TO FB.BILLS.LOCKED ELSE
         CALL OPEN.ABORT('FB.BILLS.LOCKED','FB.2.1.AUDIT.OWEN.V2')
      END
      SENT.ID = CLIENT:"*":PRO.ID
      READ SENT.REC FROM FB.BILLS.LOCKED, SENT.ID THEN
         BILL.IS.LOCKED = 0
      END
      * End NKH23

      IF LOGISTICS.QUESTION AND AUTO.MISROUTE THEN
         IF BILL.IS.LOCKED AND NOT(BILL.LOCK.OVERRIDE) THEN  ; * NKH22  NKH23
            HELP="Is this an LTL bill with class & weight? [Y]es, [NO]"          ; * NKH22
         END ELSE                        ; * NKH22
            HELP="Is this an LTL bill with class & weight? [Y]es, [NO], [R]eject Bill"
         END                             ; * NKH22
         MASK='LTL Bill: Y '
      END ELSE
         IF BILL.IS.LOCKED AND NOT(BILL.LOCK.OVERRIDE) THEN  ; * NKH22  NKH23
            HELP="Use On Line Audit? [Y]es, [NO]"  ; * NKH22
         END ELSE                        ; * NKH22
            HELP="Use On Line Audit? [Y]es, [NO], [R]eject Bill"
         END                             ; * NKH22
         MASK='On Line Audit: Y '
      END
      CALL GEN.IN(50,6,MASK,'',Q,0,2,'L','',2,-2,6,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      QI = ICONV(QI,'MCU')
      IF QI='' THEN QI='Y'
      IF QI='1' THEN QI='Y'
      IF USER.TYPE='A' AND QI='0' THEN QI='NO'
      IF QI='-' THEN QI='R'
      IF QI='X' THEN
         X.EX.FLAG='X'
         GO 9000
      END
      IF QI='EX' THEN
         X.EX.FLAG='EX'
         GO 9000
      END
      IF QI='NO' THEN
         AUDIT='N'
         MISROUTE=0
         CONTR.FSC.PERC=''
         GO 9000
      END
      IF NOT(BILL.IS.LOCKED) OR BILL.LOCK.OVERRIDE THEN      ; * NKH22  NKH23
         IF QI='R' THEN
            AUDIT='R'
            MISROUTE=0
            GO 9000
         END
      END                                ; * NKH22
      IF QI#'NO' AND QI#'Y' THEN
         CALL ELINE('Must be <Y>es or <NO>')
         CC+=1
         GO 100
      END
      IF AUDIT='U' THEN AUDIT='Y'
      PRINT AUDIT.POS:AUDIT:

*********************************************************************
200:  * Get Bill Date
*********************************************************************
      IF DO.BOL.POP THEN
         DATE.POP.FLAG = BOL.POP.VER.ARR<1,15>
         IF DATE.POP.FLAG = 'Y' THEN
            BILL.DATE = BOL.POP.VER.ARR<4,15>
         END
      END
      IF BILL.DATE='' THEN
         MASK='MM/DD/YY'
      END ELSE
         MASK=BILL.DATE'D2/'
      END
      HELP="Enter the Pro Date (Shipment Date) [T]oday [P]rnt Addr Ltr"          ; * NPR999 Added 'T'oday option
      CALL GEN.IN(5,7,MASK,'DATE',Q,0,8,'L','',2,5,7,0,QI,HELP,0,23)
      IF QI = 'T' THEN Q = DATE()
      CC+=LEN(QI)+1
      QI = OCONV(QI,'MCU')
      IF QI='X' THEN GO 100
      IF QI='EX' THEN
         X.EX.FLAG='EX'
         GO 9000
      END
      IF QI='P' THEN
         GOSUB PRINT.CARRIER.ADDRESS.LETTER
         GOTO 200
      END
      IF QI='' THEN
         IF BILL.DATE#'' THEN Q=BILL.DATE ELSE
            CALL ELINE('Entry is Required')
            CC+=1
            GO 200
         END
      END
      BILL.DATE=Q
      IF Q > DATE() THEN
         CALL ELINE('Cannot Be in the Future')
         CC+=1
         GO 200
      END
      IF Q < DATE()-730 THEN
         CALL ELINE("Error Bill was shipped more than 2 years ago!")
         CC+=1
      END
      IF CHECK.FOR.LOGISTIC THEN
         IF BILL.DATE >= LOGISTIC.DATE THEN LOGISTICS=1
         IF NOT(LOGISTICS) THEN AUTO.MISROUTE=0    ; * No Misroutes on Non Log.
         IF BILL.DATE < LOGISTIC.DATE THEN AUTO.MISROUTE=0
      END

      IF Q < PRE.AUDIT.DATE THEN

*********************************************************************
VERIFY.SELECTION:
*********************************************************************
         CRT @(0,21):"[YES] I understand that this bill is Earlier than Client Pre-Audit Start Date!"
         HELP="X=Change. EX=Exit. [YES]=Continue."
         CALL GEN.IN(0,22,'Enter selection please. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='X'
               CRT @(0,21):@(-3):
               GOTO 200
            CASE QI='EX'
               STOP
            CASE QI='YES'
               NULL
            CASE 1
               CALL ELINE('Invalid entry. Must be [X], [EX], or [YES].')
               GOTO VERIFY.SELECTION
         END CASE
         CRT @(0,21):@(-3):
      END
      IF Q < LOGISTIC.DATE THEN          ; * JMK75

*********************************************************************
VERIFY.CM.SELECTION:
*********************************************************************
         CRT @(0,21):"[YES] I understand that this bill is Earlier than Client Cost Mgmt Start Date!"          ; * JMK75
         HELP="X=Change. EX=Exit. [YES]=Continue."           ; * JMK75
         CALL GEN.IN(0,22,'Enter selection please. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)       ; * JMK75
         QI=OCONV(QI,'MCU')              ; * JMK75
         BEGIN CASE                      ; * JMK75
            CASE QI='X'                  ; * JMK75
               CRT @(0,21):@(-3):        ; * JMK75
               GOTO 200                  ; * JMK75
            CASE QI='EX'                 ; * JMK75
               STOP                      ; * JMK75
            CASE QI='YES'                ; * JMK75
               NULL                      ; * JMK75
            CASE 1                       ; * JMK75
               CALL ELINE('Invalid entry. Must be [X], [EX], or [YES].')         ; * JMK75
               GOTO VERIFY.CM.SELECTION  ; * JMK75
         END CASE                        ; * JMK75
         CRT @(0,21):@(-3):              ; * JMK75
      END                                ; * JMK75
      IF CUTOFF.DATE NE "" THEN
         IF BILL.DATE GE CUTOFF.DATE THEN
            CALL ELINE('No bills may be entered for this client starting ': OCONV(CUTOFF.DATE,"D2/"))
            CRT @(0,21):@(-3):
            GOTO 200
         END
      END
      IF Q < DATE()-182 THEN
         CALL ELINE("Warning - Date is older than 6 months")
         CC+=1
      END

      PRINT @(5,7):(BILL.DATE'D2/')'L#8':

*********************************************************************
300:  * Get Inbound or Outbound
*********************************************************************
      IF DO.BOL.POP THEN
         INOUT.POP.FLAG = BOL.POP.VER.ARR<1,17>
         IF INOUT.POP.FLAG = 'Y' AND NOT(BACK.FLAG) THEN
            IOT = "O"
         END
      END
      MASK = IOT'L#2'
      HELP = 'Enter [I]=Inbound [O]Outbound. [X]=Back to Bill date [EX]=Exit'    ; * WHY NO T
      CALL GEN.IN(5,8,MASK,'',Q,0,2,'','',2,-2,8,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            CRT @(5,7):IOT:
            BACK.FLAG = 1
            GO 200
         CASE QI = 'EX'
            X.EX.FLAG='EX'
            GO 9000
         CASE QI = 1 ! QI = 'I'
            Q = 'I'
         CASE QI = 0 ! QI = 'O'
            Q = 'O'
         CASE QI = 3 ! QI = 'T'
            Q = 'T'
         CASE QI = ''
            IF IOT # '' THEN Q = IOT ELSE
               CALL ELINE('Entry is Required')
               CC+=1
               GO 300
            END
         CASE 1
            CALL ELINE('Must be <I>nbound, <O>utbound, or <T>hird Party')
            CC+=1
            GO 300
      END CASE
      IOT = Q
      *  If we have a Bill and  it is NOT the same as the BOL... ask to go on.
      IF (AFS.BOL AND CHANGE.FLAG=0) OR (MATCH.BOL AND CHANGE.FLAG=0) THEN       ; * JAD01
         BEGIN CASE                      ; * JAD01
            CASE IOT = 'I' & T.TERMS = 'C'         ; * JAD01
            CASE IOT = 'O' & T.TERMS = 'P'         ; * JAD01
            CASE 1                       ; * JAD01
               ERRMSG = '* * Invalid Entry * *'    ; * JAD01
               ERRMSG<-1> ='Entry does not match BOL Terms'  ; * JAD01
               ERRMSG<-1>= ' '           ; * JAD01
               ERRMSG<-1>= 'Shipper:''L#20':SPACE(20):'Billto:'        ; * JAD01
               ERRMSG<-1> = T.SH.NAME'L#20':S5:T.BT.NAME'L#20'         ; * JAD01
               ERRMSG<-1> = T.SH.ADDR'L#20':S5:T.BT.ADDR 'L#20'        ; * JAD01
               ERRMSG<-1> = T.SH.CITY'L#20':S5:T.BT.CITY 'L#20'        ; * JAD01
               ERRMSG<-1> = T.SH.ST'L#25':S5:T.BT.ST 'L#20'  ; * JAD01
               ERRMSG<-1> = T.SH.ZP'L#25':S5:T.BT.ZP'L#20'   ; * JAD01
               ERRMSG<-1> = ' '          ; * JAD01
               ERRMSG<-1> = 'Consignee:'           ; * JAD01
               ERRMSG<-1> = T.CN.NAME 'L#20'       ; * JAD01
               ERRMSG<-1> = T.CN.ADDR 'L#20'       ; * JAD01
               ERRMSG<-1> = T.CN.CITY 'L#20'       ; * JAD01
               ERRMSG<-1> = T.CN.ST 'L#20'         ; * JAD01
               ERRMSG<-1> = T.CN.ZP 'L#20'         ; * JAD01
               ERRMSG<-1> = ' '          ; * JAD01
               ERRMSG<-1> = 'Bol Terms : ':T.TERMS           ; * JAD01
               ERRMSG<-1> = ' '          ; * JAD01
               ERRMSG<-1>= 'Do you accept? Y)es, N)o or Cancel'        ; * JAD01
               TITLE = 'Freight Bill Entry - BOL Terms Error!'         ; * JAD01
               ANS='' ;                  ; * JAD01
               OPTS = "579"              ; * JAD01
               CALL ATMSGBOX(TITLE,ERRMSG,OPTS,ANS)          ; * JAD01

               BEGIN CASE                ; * JAD01
                  CASE ANS = 6           ; *  Yes Accept the Mis-match Terms ; * JAD01
                  CASE ANS = 2           ; * Cancel ; * JAD01
                     GO 300              ; * GO REPROMPT - default condition ; * JAD01
                  CASE ANS = 7           ; * No ; * JAD01
                     HELP='Do you want to Reject this Bill? [Y]es or Enter for No'         ; * JAD01
                     CALL GEN.IN(0,22,'Reject? ','',Q,0,2,'','',2,-2,22,1,QI,HELP,0,23)    ; * JAD01
                     QI=OCONV(QI,'MCU')  ; * JAD01
                     BEGIN CASE          ; * JAD01
                        CASE QI='EX'     ; * JAD01
                           STOP          ; * JAD01
                        CASE QI='X'      ; * JAD01
                           GO 300        ; * JAD01
                        CASE QI='N' OR QI=''       ; * JAD01
                           GO 400        ; * JAD01
                        CASE QI='Y'      ; * JAD01
                           AUDIT = 'R'   ; * Reject this BOL ; * JAD01
                           X.EX.FLAG = ''          ; * LEAVE PGM ; * JAD01
                           IF T.TERMS = 'C' THEN   ; * JAD01
                              AUDIT.WHY = '15'     ; *  'This is a collect shipment -- rebill to consignee.' ; * JAD01
                           END           ; * JAD01
                           IF T.TERMS = 'P' THEN   ; * JAD01
                              AUDIT.WHY = '14'     ; * 'This is a prepaid shipment -- rebill to shipper.' ; * JAD01
                           END           ; * JAD01
                           GO 9000       ; * JAD01
                     END CASE            ; * JAD01
                     *  This will be a Reject condition. ; * JAD01
               END CASE                  ; * JAD01
         END CASE                        ; * JAD01
      END                                ; * JAD01

      PRINT @(5,8):IOT'L#2':
      IF IOT='O' AND CL.ZIP.DEF#'' AND ORIG.ZIP='' THEN
         DATA CL.ZIP.DEF
      END
      
      
      TEMPO.TP = @FALSE
      READ TEMPO.CLIENT FROM F.TEMPOC,CLIENT THEN
         IF TEMPO.CLIENT<1> = "" THEN
            TEMPO.CLIENT.FLG = @TRUE
            ADD.FSC=1
         END ELSE
            LOCATE(CARRIER,TEMPO.CLIENT<1>,1;TPOS) THEN
               IF TEMPO.CLIENT<2,TPOS> = "T" THEN  ; * GRB20
                 TEMPO.TP = @TRUE
                  IF IOT = "T" THEN      ; * GRB20
                     TEMPO.CLIENT.FLG = @TRUE      ; * GRB20
                     ADD.FSC=1           ; * GRB20
                  END ELSE
                     IF IOT = '' THEN
                        TEMPO.CLIENT.FLG = NULL
                     END ELSE
                        TEMPO.CLIENT.FLG = @FALSE
                     END

                  END
               END
            END
         END
      END ELSE
         TEMPO.CLIENT.FLG = @FALSE
      END
      
      
      
      IF IOT='O' AND CLIENT='00761' AND CARRIER='00014' AND USER.TYPE#'A' THEN
         DATA '72212'
      END



*********************************************************************
400:  * Get Origin Zip Code
*********************************************************************
      HELP = "Enter the Origination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                              ; * Starting Zip Character Count
      VOUT=''

      IF DO.BOL.POP THEN
         ORIG.ZIP.POP.FLAG = BOL.POP.VER.ARR<1,7>
         IF ORIG.ZIP.POP.FLAG = 'Y' AND NOT(BACK.FLAG) THEN
            ORIG.ZIP = FIELD(BOL.POP.VER.ARR<4,7>,"-",1)
            IF NUM(ORIG.ZIP) AND ORIG.ZIP#'' AND LEN(ORIG.ZIP) LT 5 THEN ORIG.ZIP = ORIG.ZIP "R%5"
            IF ORIG.ZIP#'' THEN DATA ORIG.ZIP
         END
      END
      CALL FB.2.1.CSZ.NEW(VIN,VOUT,10,ORIG.ZIP,HELP,ZIP.LEN,BACK.FLAG,ORIG.CITY,ORIG.STATE)
      CC+=VOUT<1>
      IF CLIENT='00841' AND CARRIER='00030' AND IOT='O' AND ORIG.ZIP='67101' THEN
         ORIG.ZIP='67107'
         ORIG.CITY='Moundridge'
         ORIG.STATE='KS'
      END
      IF HELP = 'S' ! HELP = '' THEN
         GOSUB 8100                      ; * Display screen
         GOSUB 6000                      ; * Display left half of screen
      END
      IF BACK.FLAG THEN GOTO 300
      IF ORIG.CITY # '' THEN
         DESC = ORIG.CITY:', ':ORIG.STATE
      END ELSE
         DESC = ORIG.STATE
      END
      CRT @(5,10):ORIG.ZIP ZIP.MASK:' ':DESC'L#25'
      IF IOT='I' AND CL.ZIP.DEF#'' AND DEST.ZIP='' THEN
         DATA CL.ZIP.DEF
      END

*********************************************************************
500:  * Get Destination Zip Code
*********************************************************************
      HELP = "Enter the Destination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                              ; * Starting Zip Character Count
      VOUT=''
      IF DO.BOL.POP THEN
         DEST.ZIP.POP.FLAG = BOL.POP.VER.ARR<1,14>
         IF DEST.ZIP.POP.FLAG = 'Y' AND NOT(BACK.FLAG) THEN
            DEST.ZIP = FIELD(BOL.POP.VER.ARR<4,14>,"-",1)
            IF NUM(DEST.ZIP) AND DEST.ZIP#'' AND LEN(DEST.ZIP) LT 5 THEN DEST.ZIP = DEST.ZIP "R%5"
            IF DEST.ZIP#'' THEN DATA DEST.ZIP
         END
      END
      CALL FB.2.1.CSZ.NEW(VIN,VOUT,11,DEST.ZIP,HELP,ZIP.LEN,BACK.FLAG,DEST.CITY,DEST.STATE)
      CC+=VOUT<1>
      IF CLIENT='00841' AND CARRIER='00030' AND IOT='I' AND DEST.ZIP='67101' THEN
         DEST.ZIP='67107'
         DEST.CITY='Moundridge'
         DEST.STATE='KS'
      END
      IF HELP = 'S' ! HELP = '' THEN
         GOSUB 8100                      ; * Display screen
         GOSUB 6000                      ; * Display left half of screen
      END
      IF BACK.FLAG THEN GOTO 400
      BACK.FLAG = 0                      ; *NPR10
      IF DEST.CITY # '' THEN
         DESC = DEST.CITY:', ':DEST.STATE
      END ELSE
         DESC = DEST.STATE
      END
      CRT @(5,11):DEST.ZIP ZIP.MASK:' ':DESC'L#25'
      IF DEST.ZIP = ORIG.ZIP THEN
         IF DEST.ZIP#'99999' THEN        ; * JMK68

*********************************************************************
VERIFY.ZIP: *         ; * JMK68
*********************************************************************
            CRT @(0,21):@(-3):"[YES] I verify that the Origin and Destination zip are the same."     ; * JMK68
            HELP="X=Change. EX=Exit. [YES]=Continue."        ; * JMK68
            CALL GEN.IN(0,22,'Enter selection please. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)    ; * JMK68
            QI=OCONV(QI,'MCU')           ; * JMK68
            BEGIN CASE                   ; * JMK68
               CASE QI='X'               ; * JMK68
                  CRT @(0,21):@(-3):     ; * JMK68
                  GOTO 500               ; * JMK68
               CASE QI='EX'              ; * JMK68
                  STOP                   ; * JMK68
               CASE QI='YES'             ; * JMK68
                  NULL                   ; * JMK68
               CASE QI='1'               ; * JMK68
                  NULL                   ; * JMK68
               CASE 1                    ; * JMK68
                  CALL ELINE('Invalid entry. Must be [X], [EX], or [YES].')      ; * JMK68
                  GOTO VERIFY.ZIP        ; * JMK68
                  CC+=1
            END CASE                     ; * JMK68
            CRT @(0,21):@(-3):           ; * JMK68
            CC+=LEN(QI)                  ; * JMK68
         END                             ; * JMK68
      END
      CDN.ROUTE=0                        ; * JMK01
      IF NOT(NUM(ORIG.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      IF NOT(NUM(DEST.ZIP)) THEN CDN.ROUTE=1       ; * JMK01

*********************************************************************
525:  * See if the Routing Guide is on file - If Not Cannot Audit
*********************************************************************
      BEGIN CASE
         CASE IOT='O'
            ROUTE.ZIP=ORIG.ZIP
            SHIP.ZIP=DEST.ZIP[1,3]
         CASE IOT='I'
            ROUTE.ZIP=DEST.ZIP
            SHIP.ZIP=ORIG.ZIP[1,3]
         CASE IOT='T'
            ROUTE.ZIP=DEST.ZIP[1,3]
            SHIP.ZIP=ORIG.ZIP[1,3]
      END CASE

      GOSUB GET.CCXL.INFO                ; * NKH08

      JL.FLAG=0                          ; * JMK35
      TRANSIT.TIME=''                    ; * JMK35
      ORIG.DIR.FLG=''                    ; * JMK78
      DEST.DIR.FLG=''                    ; * JMK78
      COMB.DIR.FLG=''                    ; * JMK78

      IF CARRIER.SCAC#'' THEN            ; * JMK35 ; * JMK78 ; * JMK79
* Begin NKH04
*         SVC.VIN=''                      ; * JMK35
*         SVC.VIN<1>='BOTH'               ; * JMK35
*         SVC.VIN<2>='10000'              ; * JMK35
*         SVC.VIN<3>=CARRIER.SCAC         ; * JMK35
*         SVC.VIN<4>=CARRIER.TYPE         ; * JMK35
*         SVC.VIN<5>=ORIG.ZIP             ; * JMK35
*         SVC.VIN<6>=DEST.ZIP             ; * JMK35
*         SVC.VOUT=''                     ; * JMK35
*         CALL RWS.SVC(SVC.VIN,SVC.VOUT,F.TABLES)   ; * JMK35 ; * JMK41
*         SVC.ERROR=SVC.VOUT<1>           ; * JMK35
*         TRANSIT.TIME=SVC.VOUT<2>        ; * JMK35
*         ORIG.DIR.FLG=SVC.VOUT<3>        ; * JMK35
*         DEST.DIR.FLG=SVC.VOUT<4>        ; * JMK35
*         COMB.DIR.FLG=SVC.VOUT<5>        ; * JMK35

         * From TransitMethod
         TRANSIT.TIME = CCVOUT<29>
         IF TRANSIT.TIME = 0 THEN TRANSIT.TIME = 1
         ORIG.DIR.FLG = CCVOUT<31>[1,1]
         IF ORIG.DIR.FLG = 'C' OR ORIG.DIR.FLG = 'P' THEN ORIG.DIR.FLG = 'I'
         DEST.DIR.FLG = CCVOUT<30>[1,1]
         IF DEST.DIR.FLG = 'C' OR DEST.DIR.FLG = 'P' THEN DEST.DIR.FLG = 'I'
         COMB.DIR.FLG = CCVOUT<32>[1,1]
         IF COMB.DIR.FLG = 'C' OR COMB.DIR.FLG = 'P' THEN COMB.DIR.FLG = 'I'
* End NKH04
         IF CARRIER.SCAC='CNWY' THEN     ; * JMK35 ; * NPR05
            ORIG.DIR.FLG='D'             ; * JMK35 ; * NPR05
            DEST.DIR.FLG='D'             ; * JMK35 ; * NPR05
            COMB.DIR.FLG='D'             ; * JMK35 ; * NPR05
         END
* Begin GRB10
         IF CDN.ROUTE THEN
            ID.JL.TAB = "JC*":CLIENT:"*":CARRIER.SCAC        ; *NPR04
         END ELSE
            ID.JL.TAB = "JL*":CLIENT:"*":CARRIER.SCAC        ; *NPR04
         END
* End  GRB10

         READ JL.REC FROM F.TABLES, ID.JL.TAB ELSE JL.REC = ""         ; *NPR05
         LOCATE DEST.ZIP IN JL.REC SETTING DEST.POS THEN DEST.DIR.FLG = "D"      ; *NPR05
         LOCATE ORIG.ZIP IN JL.REC SETTING ORIG.POS THEN ORIG.DIR.FLG = "D"      ; *NPR05
         IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN       ; * JMK38    ; *NPR05
            COMB.DIR.FLG='D'             ; * JMK38    ; *NPR05
         END                             ; * JMK38    ; *NPR05
         IF COMB.DIR.FLG#'D' THEN        ; * JMK35 ; * JMK65 ; * JMK69
            JL.FLAG=1                    ; * JMK35
         END                             ; * JMK35
      END                                ; * JMK35
      IF CLIENT='01031' AND CARRIER='25117' THEN   ; * JMK71
         TRANSIT.TIME='09'               ; * JMK71
         ORIG.DIR.FLG='D'                ; * JMK71
         DEST.DIR.FLG='D'                ; * JMK71
         COMB.DIR.FLG='D'                ; * JMK71
      END                                ; * JMK71
      IF CK.CS THEN                      ; * JMK35
         ORIG.DIR.FLG=''                 ; * JMK80
         DEST.DIR.FLG=''                 ; * JMK80
         COMB.DIR.FLG=''                 ; * JMK80
         TRANSIT.TIME=''                 ; * JMK81
         IF COMB.DIR.FLG='' THEN         ; * JMK35
            JL.FLAG=0                    ; * JMK35
         END                             ; * JMK35
         OPEN '','CARRIER.SVC' TO F.CS THEN        ; * JMK35
            CS.ID=CARRIER:'*':ORIG.ZIP   ; * JMK35
            READ CS.REC FROM F.CS,CS.ID ELSE       ; * JMK35
               CS.ID=CARRIER:'*':ORIG.ZIP[1,3]     ; * JMK35
               READ CS.REC FROM F.CS,CS.ID ELSE    ; * JMK35
                  CS.REC=''              ; * JMK35
               END                       ; * JMK35
            END                          ; * JMK35
            IF CS.REC#'' THEN            ; * JMK35
               DEST.FOUND=0              ; * JMK35
               LOCATE DEST.ZIP IN CS.REC<1> SETTING DPOS THEN          ; * JMK35
                  DEST.FOUND=1           ; * JMK35
               END ELSE                  ; * JMK35
                  LOCATE DEST.ZIP[1,3] IN CS.REC<1> SETTING DPOS THEN  ; * JMK35
                     DEST.FOUND=1        ; * JMK35
                  END                    ; * JMK35
               END                       ; * JMK35
               IF DEST.FOUND THEN        ; * JMK35
                  TRANSIT.TIME=CS.REC<3,DPOS>      ; * JMK35
                  ORIG.DIR.FLG='D'       ; * JMK35
                  DEST.DIR.FLG=CS.REC<2,DPOS>      ; * JMK35
                  COMB.DIR.FLG=''        ; * JMK35
                  IF DEST.DIR.FLG#'' THEN          ; * JMK35
                     IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN     ; * JMK35
                        COMB.DIR.FLG='D'           ; * JMK35
                     END ELSE            ; * JMK35
                        COMB.DIR.FLG='I'           ; * JMK35
                     END                 ; * JMK35
                  END                    ; * JMK35
                  NVAL=DCOUNT(CS.REC<13>,@VM)      ; * JMK35
                  CARR.DATA.DATE=CS.REC<13,NVAL>   ; * JMK35
                  IF COMB.DIR.FLG#'D' THEN         ; * JMK35 ; * JMK65 ; * JMK69
                     JL.FLAG=1           ; * JMK35
                  END                    ; * JMK35
               END ELSE                  ; * DRF09
                  CALL ELINE("Shipping point set to N")      ; * DRF09
               END                       ; * JMK35
            END                          ; * JMK35
         END                             ; * JMK35
      END                                ; * JMK35
      IF DAUDIT<11>='DISABLE' THEN
         * This will only happen on Logistics Accounts
         AUDIT='U'
         MISROUTE=1
         GO 590
      END
      IF TEMPO.CLIENT.FLG THEN GO 590    ; * GRB11
      IF DAUDIT='' THEN
         AUDIT='U'
         MISROUTE=1
         CALL ELINE('Cannot Audit!  This Carrier is not set up for On-Line Audit!')
         GO 590
      END
      IF IOT='T' THEN
         OPEN 'FB.AUDIT.ZIPS,99000' TO F.TPZIPS ELSE         ; * JMK03
            CALL ELINE("Cannot Open Audit Zips 99000 for 3rd party coverage map")          ; * JMK01
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GO 590                       ; * JMK03
         END                             ; * JMK03
         ** Begin GRB07
         NEW.TP = 1
         * Begin Mod GRB08
         OPEN '','FB.AUDIT,':CLIENT TO F.AUDIT THEN
            READV SUB.CLIENT FROM F.AUDIT,'SUBSTITUTE',1 THEN
               AUDIT.CLIENT.ID = SUB.CLIENT
            END ELSE
               AUDIT.CLIENT.ID = CLIENT
            END
         END ELSE
            AUDIT.CLIENT.ID = CLIENT
         END
         OPEN 'FB.AUDIT.TP.DATE,':AUDIT.CLIENT.ID TO F.TPDATE ELSE     ; * INDICATES SETUP FOR NEW THIRD PARTY LOGIC
            OLD.METH = 1
            NEW.TP = 0
            GOTO OLD.TP.LOGIC            ; *(DO WE ADD ENABLE FLAG TO THIS !!!!!!)
            **
         END
         OPEN 'FB.AUDIT.TP.REG,':AUDIT.CLIENT.ID TO F.TPREG ELSE
            NEW.TP = 0
            OLD.METH = 1
            GOTO OLD.TP.LOGIC
            **  GO 9000
         END
         * End Mod GRB08
         IF NEW.TP THEN
            READ TP.EFF.DT FROM F.TPDATE,CARRIER THEN
            END ELSE
               CRT "MISSED IT"
               GOTO OLD.TP.LOGIC
            END
            NEW.TP = 1
            **
            LOCATE BILL.DATE IN TP.EFF.DT<1> BY 'AR' SETTING EFF.DT.POS ELSE     ; * beginning effective date
               IF EFF.DT.POS=1 THEN
                  ERROR='NO Third party effective date found ':CARRIER
                  GOTO OLD.TP.LOGIC
               END
               EFF.DT.POS=EFF.DT.POS-1
               IF EFF.DT.POS < 1 THEN
                  ERROR='Serious error, EFF.DT.POS is less than 1, Call AFS Programming'
                  GOTO OLD.TP.LOGIC
               END
            END
            END.EFF.DT = TP.EFF.DT<2,EFF.DT.POS>
            IF BILL.DATE LT END.EFF.DT OR END.EFF.DT = "" THEN
               TP.EFF.DT = TP.EFF.DT<1,EFF.DT.POS>
               EFF.DATE = TP.EFF.DT
            END
            TP.REG.ID = CARRIER:"*":TP.EFF.DT
            READ TP.REG FROM F.TPREG,TP.REG.ID THEN
               IF TP.REG<1> = 'DISABLE' THEN       ; * NKH16
                  NEW.TP = 0             ; * NKH16
                  GOTO OLD.TP.LOGIC      ; * NKH16
               END                       ; * NKH16
            END ELSE
               NEW.TP = 0                ; * NKH16
               GOTO OLD.TP.LOGIC
            END
            LOCATE ORIG.ZIP[1,3] IN TP.REG<2> BY 'AR' SETTING ORIG.REG.POS ELSE
               ORIG.REG.POS = ORIG.REG.POS -1
            END
            ORIG.REG = TP.REG<5,ORIG.REG.POS>
            TP.AUDIT.ZIPS.ID = CARRIER:"*TP":ORIG.REG:"*":TP.EFF.DT:"*LTLALL*O"
            READ TP.AUDIT.ZIP FROM F.AUDIT.ZIPS,TP.AUDIT.ZIPS.ID THEN

            END ELSE
               GOTO OLD.TP.LOGIC
            END
            IF TP.AUDIT.ZIP<1> = "DISABLE" THEN
               GOTO OLD.TP.LOGIC
            END
            LOCATE DEST.ZIP[1,3] IN TP.AUDIT.ZIP<2> BY 'AR' SETTING DEST.ZIP.POS ELSE
               DEST.ZIP.POS = DEST.ZIP.POS -1
            END
            DEST.TABLE = TP.AUDIT.ZIP
            TABLE=TP.AUDIT.ZIP<5,DEST.ZIP.POS>
            GOOD.SHIP.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            AUDIT.TABLE.ID=OLA.CARRIER:"*":TABLE   ; * JMK32
            * DO WE JUST PASS THIS AUDIT.TABLE ID DOWN BELOW
            TP.WHY.TAB = ""
            TP.AMT.TAB = ""
            TP.TABLE.TAB = TABLE
            TP.TABLE.TAB<2> = DEST.TABLE
            TP.VOUT1 = ""
            TP.VOUT2 = ""
            TP.CNT = 1
            LOOKUP.ZIP = ROUTE.ZIP
            * Check to See if Routing Zip is Enabled or Disabled
            YN.ROUTE.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            IF YN.ROUTE.POINT='N' THEN ERROR='Dest Zip set to N in Carrier Coverage Map '

            READ DAUDIT.TABLES FROM F.AUDIT.TABLES,AUDIT.TABLE.ID ELSE           ; * FB.AUDIT.TABLES
               ERROR='Cannot Rate Shipment. Table: ':AUDIT.TABLE.ID:' NOF'
            END

            YN.SHIP.POINT=TP.AUDIT.ZIP<4,ORIG.REG.POS>
            IF YN.SHIP.POINT='N' THEN ERROR='Orig Zip set to N in Carrier Coverage Map'

            * DTABLES IS THE FB.AUDIT.ZIPS FILE
            * DAUDIT IS FB.AUDIT PASSED IN

            * Check to See if Effective Date is Enabled or Disabled
            * CHECK IF AUDIT ZIPS IS DISABLED

            GOOD.SHIP.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            IF JL.FLAG THEN
               * Begin GRB10
               IF CDN.ROUTE THEN
                  JL.STRG = 'ZZC'
               END ELSE
                  JL.STRG = 'ZZZ'
               END
               * End GRB10
               LOCATE JL.STRG IN TP.AUDIT.ZIP<2> SETTING JL.POS THEN   ; *GRB10
                  IF TP.AUDIT.ZIP<4,JL.POS>='Y' THEN
                     JL.TABLE=TP.AUDIT.ZIP<5,JL.POS>
                  END ELSE
                     IF IOT='I' THEN
                        ERROR=('Cannot Rate!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')          ; * JMK41
                        AUDIT='M'
                        GO 9000
                     END
                     JL.FLAG=0
                  END
               END
            END
            GO GOT.NEW.TP
         END
         * End GRB07

*********************************************************************
OLD.TP.LOGIC:
*********************************************************************
         TABLE.ID=OLA.CARRIER:"*71101*12055*LTLALL*I"        ; * JMK03 ; * JMK32
         READ DTABLES FROM F.TPZIPS,TABLE.ID ELSE  ; * JMK03
            CALL ELINE("Carrier ":OLA.CARRIER:" TP Coverage Map not set up in 99000")      ; * JMK03 ; * JMK32
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GO 590
         END                             ; * JMK03
         IF DTABLES<1>#'ENABLE' THEN     ; * JMK03
            CALL ELINE("Carrier ":OLA.CARRIER:" TP Coverage Map is set to DISABLE")        ; * JMK03 ; * JMK32
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GO 590
         END                             ; * JMK03
         LOCATE ROUTE.ZIP IN DTABLES<2> BY 'AR' SETTING ROUTE.POS ELSE
            IF ROUTE.POS = 1 THEN        ; * JMK03
               CALL ELINE('Dest Zip ':DEST.ZIP:' is not in coverage Map for carrier ':CARRIER)       ; * JMK03
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GO 590
            END                          ; * JMK03           ; * JMK03
            ROUTE.POS=ROUTE.POS-1        ; * JMK03
            IF ROUTE.POS < 1 THEN        ; * JMK03
               CALL ELINE('Serious error, ROUTE.POS is less than 1, Call Online Audit')    ; * JMK03
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GO 590
            END                          ; * JMK03
            IF ROUTE.ZIP > DTABLES<3,ROUTE.POS> THEN         ; * JMK03
               CALL ELINE('Dest Zip ':DEST.ZIP:' is not in coverage Map for carrier ':CARRIER)       ; * JMK03
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GO 590
            END                          ; * JMK03
         END                             ; * JMK03
         YN.ROUTE.POINT=DTABLES<4,ROUTE.POS>       ; * JMK03

         LOCATE SHIP.ZIP IN DTABLES<2> BY 'AR' SETTING SHIP.POS ELSE   ; * JMK03
            IF SHIP.POS = 1 THEN         ; * JMK03
               CALL ELINE('Orig Zip ':DEST.ZIP:' is not in coverage Map for carrier ':CARRIER)       ; * JMK03
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GO 590
            END                          ; * JMK03           ; * JMK03
            SHIP.POS=SHIP.POS-1          ; * JMK03
            IF SHIP.POS < 1 THEN         ; * JMK03
               CALL ELINE('Serious error, SHIP.POS is less than 1, Call AFS Programming')  ; * JMK03
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GOSUB 8000
            END                          ; * JMK03
            IF CLIENT='01575' AND OLA.CARRIER='00198' AND COMB.DIR.FLG='D' THEN  ; * JMK45
               IF DAUDIT.ZIPS<3,SHIP.POS> < SHIP.ZIP THEN    ; * JMK45
                  DAUDIT.ZIPS<3,SHIP.POS>=SHIP.ZIP           ; * JMK45
               END                       ; * JMK45
            END                          ; * JMK45
            IF SHIP.ZIP > DTABLES<3,SHIP.POS> THEN           ; * JMK03
               CALL ELINE('Orig Zip ':ORIG.ZIP:' is not in coverage Map for carrier ':CARRIER)       ; * JMK03
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GOSUB 8000
            END                          ; *JMK03
         END                             ; * JMK03
         YN.SHIP.POINT=DTABLES<4,SHIP.POS>         ; * JMK03
         ERROR=''                        ; * JMK03
         IF YN.ROUTE.POINT='N' THEN ERROR='Dest Zip set to N in Carrier Coverage Map '     ; * JMK03
         IF YN.SHIP.POINT='N' THEN ERROR='Orig Zip set to N in Carrier Coverage Map'       ; * JMK03
         IF ERROR#'' THEN                ; * JMK03
            CALL ELINE(ERROR)            ; * JMK03
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GOSUB 8000
         END                             ; * JMK03
*At this point you have a valid carrier
*Get the table number and tun the numbers
*Look at both tables and get the table number that is the highest number
*If a table number is one digit add a leading zero to insure that the
*comparison works properly

         LOOKUP.ZIP='OTHER'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            CALL ELINE(REV.ON:'Cannot Audit! OTHER is NOT setup as a Routing Zip!')        ; * NKH25
            CRT TERM.NORM                ; * NKH25
            CC+=1
            AUDIT='U'
            MISROUTE=1
            IF USER.TYPE='A' AND FIRST.TIME='Y' THEN
               FIRST.TIME='N'
               GO 100
            END
            IF LOGISTICS ELSE GOSUB 8000
            GO 590
         END
      END ELSE                           ; *********************************************************** END OF THIRD PARTY LOGIC
         LOOKUP.ZIP='ALL'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            LOOKUP.ZIP=ROUTE.ZIP
            LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
               * See if 1st three digits are there (Must Be Unique)
               CK.TIMES=DCOUNT(DAUDIT<FBA.ROUTE.ZIP>,@VM)
               CK.RZIP=''                ; * Put the Routing Zips Found Here
               FOR CK = 1 TO CK.TIMES
                  FIND.RT.ZIP=DAUDIT<FBA.ROUTE.ZIP,CK>
                  IF FIND.RT.ZIP[1,3]=ROUTE.ZIP[1,3] THEN
                     GUIDE.POS=CK
                     SUB.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,CK>
                     IF SUB.ZIP#'' THEN
                        LOCATE SUB.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                           CALL ELINE("Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!")
                           CC+=1
                           GO 500
                        END
                        FIND.RT.ZIP=SUB.ZIP
                     END
                     LOCATE FIND.RT.ZIP IN CK.RZIP SETTING POS ELSE
                        CK.RZIP<-1>=FIND.RT.ZIP
                        LOOKUP.ZIP=FIND.RT.ZIP
                     END
                  END
               NEXT CK
               IF CK.RZIP='' OR CK.RZIP<2>#'' THEN
                  CALL ELINE(REV.ON:'Cannot Audit! ':ROUTE.ZIP:' or ALL is NOT setup as a Routing Zip!')       ; * NKH25
                  CRT TERM.NORM          ; * NKH25
                  CC+=1
                  AUDIT='U'
                  MISROUTE=1
                  IF LOGISTICS ELSE GOSUB 8000

                  GO 590
               END
            END
            IF DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS> # '' THEN          ; ** Get BASE Routing Zip POS
               LOOKUP.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS>
               LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                  CALL ELINE("Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!")
                  CC+=1
                  GO 500
               END
            END
         END
      END

      * Check to See if Routing Zip is Enabled or Disabled
      IF DAUDIT<FBA.ROUTE.ZIP.STATUS,GUIDE.POS>='DISABLE' THEN
         CALL ELINE("Cannot Audit! Route Zip is set to DISABLE")
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END
      * Get Effective Date
      FIRST.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,1>
      LAST.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DCOUNT(DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS>,@SVM)>
      IF BILL.DATE < FIRST.DATE THEN     ; * Is bill Before Beginning Date
         CALL ELINE('Cannot Audit! Bill date is before 1st effective date.')
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END
      IF LAST.DATE#'' AND (BILL.DATE > LAST.DATE) THEN
         CALL ELINE('Cannot Audit Bill!  Bill Date is after Last Effective Date.')
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END
      LOCATE BILL.DATE IN DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS> BY 'AR' SETTING DT.POS ELSE
         DT.POS=DT.POS-1
         IF DT.POS < 1 THEN
            CALL ELINE('Serious error Contract Carrier Date POS is less than 1, Call David')
            CC+=1
            GO 525
         END
      END
      EFF.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,DT.POS>
      END.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DT.POS>
      IF END.DATE#'' AND (BILL.DATE > END.DATE) THEN
         CALL ELINE('Cannot Audit Bill!  Bill Date is out of range of Effective dates')
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END

      * Check to See if Effective Date is Enabled or Disabled
      IF DAUDIT<FBA.EFF.DATE.STATUS,GUIDE.POS,DT.POS> = 'DISABLE' THEN
         CALL ELINE("Cannot Audit! Effective Date is set to DISABLE")
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END

      AUDIT.ZIPS.ID=OLA.CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":IOT       ; * JMK32
      READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
         IF 1 AND IOT = 'T' THEN
            AUDIT.ZIPS.ID=OLA.CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":"I"           ; * JMK32
            READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
               CALL ELINE("Cannot Audit! Zip Table Not On File ":AUDIT.ZIPS.ID)
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GOSUB 8000
               GO 590
            END
         END ELSE
            IF IOT = 'T' THEN
               CALL ELINE("Cannot Audit! Third Party Setup date has passed and Zip Table Not On File ":AUDIT.ZIPS.ID)
            END ELSE
               CALL ELINE("Cannot Audit! Zip Table Not On File ":AUDIT.ZIPS.ID)
            END
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GOSUB 8000
            GO 590
         END
      END
      IF DAUDIT.ZIPS<1>='DISABLE' THEN
         CALL ELINE('Cannot Audit! Shipping Points have been set to Disable!')
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END
      IF DAUDIT.ZIPS<2,1>='' THEN
         CALL ELINE('Cannot Audit! Shipping Points have not been setup!')
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END
      IF SHIP.ZIP < DAUDIT.ZIPS<2,1> THEN
         CALL ELINE('Cannot Audit!  This bill is a misroute! (Shipping Point is < Lowest)')
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END
      LOCATE SHIP.ZIP IN DAUDIT.ZIPS<2> BY 'AR' SETTING SHIP.POS ELSE
         SHIP.POS=SHIP.POS-1
         IF SHIP.POS < 1 THEN
            CALL ELINE('Serious error, SHIP.POS is less than 1, Call David')
            CC+=1
            GO 525
         END
         IF SHIP.ZIP > DAUDIT.ZIPS<3,SHIP.POS> THEN
            CALL ELINE('Cannot Audit!  This bill is a misroute! (Shipping Point is > Highest)')
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GOSUB 8000
            GO 590
         END
      END

      LOCATE ROUTE.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING RSZ.POS THEN
         SZ.BEG.EFF.DATES = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS>
         SZ.END.EFF.DATES = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS>
         IF SZ.BEG.EFF.DATES = "" AND SZ.END.EFF.DATES = "" THEN
            NULL
         END ELSE
            * Do this piece of code if any effective sub zip dates are set up.
*DF            N.SZ.DATES = DCOUNT(SZ.BEG.EFF.DATES,@SVM)     ; * DRF16
            BEG.N.SZ.DATES = DCOUNT(SZ.BEG.EFF.DATES,@SVM)   ; * DRF16
            END.N.SZ.DATES = DCOUNT(SZ.END.EFF.DATES,@SVM)   ; * DRF16
            IF END.N.SZ.DATES > BEG.N.SZ.DATES THEN          ; * DRF16
               N.SZ.DATES=END.N.SZ.DATES           ; * DRF16
            END ELSE                     ; * DRF16
               N.SZ.DATES=BEG.N.SZ.DATES           ; * DRF16
            END                          ; * DRF16
            SUBZIP.OK = "N"
            LAST.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,N.SZ.DATES>
            LAST.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,N.SZ.DATES>
            IF LAST.END.EFF.DATE = "" AND BILL.DATE GE LAST.BEG.EFF.DATE THEN    ; * No final end eff date
               SUBZIP.OK = "Y"           ; * Open end date ok
            END ELSE
               IF BILL.DATE GE DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,1> THEN        ; * Date after first Eff date ok otherwise not
                  FOR DD = 1 TO N.SZ.DATES
                     SZ.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,DD>
                     SZ.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,DD>
                     * Check if Bill Date is within any date ranges.
                     IF BILL.DATE GE SZ.BEG.EFF.DATE AND BILL.DATE LE SZ.END.EFF.DATE THEN
                        SUBZIP.OK = "Y"
                     END
                  NEXT DD
               END
            END
            IF SUBZIP.OK = "N" THEN
               CALL ELINE('Cannot Audit! Substitution Zip ':ROUTE.ZIP:' not in effect as at ':OCONV(BILL.DATE,"D2/"))
               AUDIT='U'
               MISROUTE=1
               GOSUB 8000
               GO 590
            END
         END
      END

      GOOD.SHIP.POINT=DAUDIT.ZIPS<4,SHIP.POS>
      TABLE=DAUDIT.ZIPS<5,SHIP.POS>
      IF CLIENT='01575' AND CARRIER='00198' AND ORIG.ZIP='75223' THEN GOOD.SHIP.POINT='C'  ; * JMK45
      IF GOOD.SHIP.POINT='C' THEN        ; * JMK45
         BEGIN CASE                      ; * JMK45
            CASE COMB.DIR.FLG='D'        ; * JMK45
               GOOD.SHIP.POINT='Y'       ; * JMK45
            CASE 1                       ; * JMK45
               GOOD.SHIP.POINT='N'       ; * JMK45
         END CASE                        ; * JMK45
      END                                ; * JMK45
      IF JL.FLAG THEN                    ; * JMK35
         * Begin GRB10
         IF CDN.ROUTE THEN
            JL.STRG = 'ZZC'
         END ELSE
            JL.STRG = 'ZZZ'
         END
         * End GRB10
         LOCATE JL.STRG IN DAUDIT.ZIPS<2> SETTING JL.POS THEN          ; * GRB10
            IF DAUDIT.ZIPS<4,JL.POS>='Y' THEN      ; * JMK35
               JL.TABLE=DAUDIT.ZIPS<5,JL.POS>      ; * JMK35
            END ELSE                     ; * JMK35
               IF IOT='I' THEN           ; * JMK39
                  CALL ELINE('Cannot Audit!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')           ; * JMK39
                  CC+=1                  ; * JMK39
                  AUDIT='U'              ; * JMK39
                  MISROUTE=1             ; * JMK39
                  GOSUB 8000             ; * JMK39
                  GO 590                 ; * JMK39
               END                       ; * JMK39
               JL.FLAG=0                 ; * JMK35
            END                          ; * JMK35
         END ELSE                        ; * JMK35
            IF IOT='I' THEN              ; * JMK39
               CALL ELINE('Cannot Audit!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')    ; * JMK39
               CC+=1                     ; * JMK39
               AUDIT='U'                 ; * JMK39
               MISROUTE=1                ; * JMK39
               GOSUB 8000                ; * JMK39
               GO 590                    ; * JMK39
            END                          ; * JMK39
            JL.FLAG=0                    ; * JMK35
         END                             ; * JMK35
      END                                ; * JMK35

      * For third party that is the ORIG Table. we must find the Dest table
      IF IOT='T' THEN                    ; * JMK03
         IF ROUTE.ZIP < DAUDIT.ZIPS<2,1> THEN      ; * JMK03
            CALL ELINE('Cannot Rate! Dest Zip ':ROUTE.ZIP:' is not setup in the Y/N Table')          ; * JMK03
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GOSUB 8000
         END                             ; * JMK03
         LOCATE ROUTE.ZIP IN DAUDIT.ZIPS<2> BY 'AR' SETTING ROUTE.POS ELSE       ; * JMK03
            ROUTE.POS=ROUTE.POS-1        ; * JMK03
            IF ROUTE.POS < 1 THEN        ; * JMK03
               CALL ELINE('Serious error, ROUTE.POS is less than 1, Call Online Audit')    ; * JMK03
               GO 500                    ; * JMK03
            END                          ; * JMK03
            IF ROUTE.ZIP > DAUDIT.ZIPS<3,ROUTE.POS> THEN     ; * JMK03
               CALL ELINE('Cannot Rate! Dest Zip ':ROUTE.ZIP:' is not setup in the Y/N Table')       ; * JMK03
               CC+=1
               AUDIT='U'
               MISROUTE=1
               GOSUB 8000
            END                          ; * JMK03
         END                             ; * JMK03
         DEST.GOOD.SHIP.POINT=DAUDIT.ZIPS<4,ROUTE.POS>       ; * JMK03
         DEST.TABLE=DAUDIT.ZIPS<5,ROUTE.POS>       ; * JMK03
         GOOD.SHIP.POINT='Y'             ; * Force a Good Shipping Point ; * JMK03

* Make sure both tables are two digits
* Compare the two use the HIGEST table number as the real TABLE
* Except for Con-Way 02653, Check Orig & Dest Table if they are different
* Use both tables together lowest table letter 1st ie. D & A use AD

         TP.WHY.TAB = ""
         TP.AMT.TAB = ""
         TP.TABLE.TAB = TABLE
         TP.TABLE.TAB<2> = DEST.TABLE
         TP.CLIENT.COST = ""
         TP.QUOTE.AMT = ""
         QUOTE.AMT = 0
         TP.GTOT.CONTR.AMT = ""
         TP.GTOT.BENCH.AMT = ""
         TP.CONSULTING.AMT = ""
         TP.CNT = 1
      END                                ; * JMK03

      IF GOOD.SHIP.POINT#'Y' THEN
         IF TABLE#'' THEN
            * Bill is a misroute but can be audited (have a table #)
            MISROUTE=1
            GO 575                       ; * GO TO 575 anyway Misroute or Not!
         END ELSE
            * Bill is a misroute but CANNOT be audited (No Table #)
            CALL ELINE('Cannot Audit! This bill is a misroute (Shp.Pnt=N No Table to Rate Bill)')
            CC+=1
            AUDIT='U'
            MISROUTE=1
            GOSUB 8000
            GO 590
         END
      END

*********************************************************************
575:  * Skip for OK Misroutes
*********************************************************************

      * Begin GRB09
      IF IOT = "T" THEN
         IF NEW.TP THEN
            TABLE = TP.TABLE.TAB<1>      ; * Contains Originating  Tables (OUTBOUND)
         END ELSE
            TABLE = TP.TABLE.TAB<2>      ; * Contains  Destination Tables (INBOUND)
         END
      END
      * End GRB09
      ZIP.VIN=CARRIER
      ZIP.VIN<2>=ORIG.ZIP
      ZIP.VIN<3>=DEST.ZIP
      ZIP.VIN<4>=CLIENT
      CALL FB.CHECK.COVERAGE.ZIP(ZIP.VIN,ZIP.VOUT)
      IF ZIP.VOUT<1>='J' THEN
         IF LEN(TABLE) < 2 THEN
            TABLE='J':TABLE'R%2'
         END ELSE
            TABLE='J':TABLE
         END
      END
      AUDIT.TABLE.ID=OLA.CARRIER:"*":TABLE

*********************************************************************
GOT.NEW.TP:* LAND HERE WITH NEW AUDIT TABLE ID
*********************************************************************
      READ DAUDIT.TABLES FROM F.AUDIT.TABLES,AUDIT.TABLE.ID ELSE
         CALL ELINE("Cannot Audit! Audit Table Not On File ":AUDIT.TABLE.ID)
         CC+=1
         AUDIT='U'
         MISROUTE=1
         GOSUB 8000
         GO 590
      END
      IF JL.FLAG THEN                    ; * JMK35
         JL.AUDIT.TABLE.ID=OLA.CARRIER:'*':JL.TABLE          ; * JMK35
         READ JL.DAUDIT.TABLES FROM F.AUDIT.TABLES,JL.AUDIT.TABLE.ID ELSE        ; * JMK35
            JL.FLAG=0                    ; * JMK35
         END                             ; * JMK35
      END                                ; * JMK35

      * Get the Overcharge Cut Back Code
      CUT.CODE=DAUDIT.TABLES<32>
      IF JL.FLAG THEN                    ; * JMK44
         CUT.CODE=JL.DAUDIT.TABLES<32>   ; * JMK44
      END                                ; * JMK44
      IF NEW.WAY THEN CUT.CODE=''
      CUT.DESC=''
      CUT.CLASS=''                       ; * JMK43
      IF CUT.CODE#'' THEN
         MAX.OVC.AMT=-999999
         OPEN 'FB.CUT.BACKS' TO F.CUT.BACKS THEN
            READ CUT.BACK.REC FROM F.CUT.BACKS,CUT.CODE ELSE CUT.BACK.REC=''     ; * JMK43
            CUT.DESC=CUT.BACK.REC<1>     ; * JMK43
            CUT.CLASS=CUT.BACK.REC<6>    ; * JMK43
            IF CUT.DESC='' THEN          ; * JMK43
               CALL ELINE('Notify Auditor Cutback Code: ':CUT.CODE:' is missing from Cut Back File!')
               CALL ELINE('Notify Auditor Overcharge Limit is restored to $.01 until this is fixed!')
               MAX.OVC.AMT=-1
               CUT.CODE=''
            END
         END
      END
      IF CUT.CODE='' OR CUT.DESC='' THEN
         MAX.OVC.AMT=-1
         CUT.DESC='Tariff Error'
         CUT.CLASS='M'                   ; * JMK43
      END

      IF IOT = "T" THEN
         IF TP.CNT EQ "2" THEN GO 1000
      END

*********************************************************************
590:  * Get Freight Bill Details (Class & Weights) of each line item
*********************************************************************
      CW.SEL = 0
      MC.SEL = 0
      RWS.TIMES = 0                      ; * JMK23
      FOR X=1 TO 14
         LINE=REM(X,7)
         IF LINE=0 THEN LINE=7
         LINE=LINE+9
         IF X < 8 THEN OFFSET=0 ELSE OFFSET=20
         IF CLASS.WGT<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(38+OFFSET,LINE):SPACE(15):
            END ELSE
               PRINT @(38+OFFSET,LINE):X'R%2':SPACE(13):
            END
         END ELSE
            PRINT @(38+OFFSET,LINE):X'R(%2 )':     ; * Selection
            PRINT @(41+OFFSET,LINE):CLASS.WGT<1,X>'R(#5 )':  ; * Class
            PRINT @(47+OFFSET,LINE):CLASS.WGT<2,X>'R(#6 )':  ; * Weight
         END
      NEXT X

      CRT @(27,6):@(-4)                  ; * NPR 081610
      CRT @(27,7):@(-4)                  ; * NPR 081610
      CRT @(28,6): 'Entered by  ':ENTERED.BY : '  Verified by: ':VERIFIED.BY     ; * NPR06
      IF USER.TYPE='A' AND PROG.MODE='3' AND NOT(CHANGE.MODE) THEN
         IF AUDIT='U' THEN
            GO 9000
         END
         GO 1000
      END

*********************************************************************
600:  * Enter Line Number for Class Weight
*********************************************************************
      IF CW.MODE='INPUT' THEN
         CW.SEL=CW.SEL+1
         QI=CW.SEL
         IF CW.SEL GT 14 THEN
            CW.MODE='EDIT'
            GO 700
         END
      END ELSE
         HELP="Enter Class-Weight Line Number, <RETURN>=Done, 'X'=Back, 'EX'=Exit."
         CALL GEN.IN(0,22,'Enter Class-Weight line number. ##','',Q,0,2,'','',0,-2,22,0,QI,HELP,0,23)
         CC+=LEN(QI)+1
      END
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            GO 700                       ; *** Done with Line Items
         CASE QI='X'
            GO 500
         CASE QI='EX'
            X.EX.FLAG='EX'
            GO 9000
         CASE NUM(QI)
            IF INQUIRE THEN
               CALL ELINE('Can not access detail in inquiry!')
               CC+=1
            END ELSE
               IF QI > 1 THEN
                  IF CLASS.WGT<1,QI-1>='' THEN
                     CALL ELINE("Cannot Skip a line.  You must select the next blank line")
                     CC+=1
                     GO 600
                  END
               END
               IF QI > 14 THEN
                  CALL ELINE("Maximum line number is 4")
                  CC+=1
                  GO 700
               END
               CW.SEL=QI
               GOSUB 620
               IF QI='X' AND CW.SEL=1 THEN GO 500
               IF OPT='V' & QI='' THEN GO 700      ; ** Done with Class Weight
            END
      END CASE
      GO 600

*********************************************************************
620:  * Enter Class Weight Line Items
*********************************************************************
      IF CW.SEL LT 1 ! CW.SEL GT 14 THEN
         CALL ELINE('Invalid entry.')
         CC+=1
         RETURN
      END
      LINE=REM(CW.SEL,7)
      IF LINE=0 THEN LINE=7
      IF CW.SEL < 8 THEN OFFSET=0 ELSE OFFSET=20
      LINE=LINE+9

*********************************************************
640:  * Enter the Line Item Class
********************************************************
      IF DO.BOL.POP THEN
         CLASS.POP.FLAG = BOL.POP.VER.ARR<1,25>
         IF CLASS.POP.FLAG = 'Y' AND CLASS.WGT<1> = '' AND NOT(BACK.FLAG) THEN
            POP.CLASSES = BOL.POP.VER.ARR<4,25>
            CONVERT "|" to @VM IN POP.CLASSES
            CLASS.WGT<1> = POP.CLASSES
         END
      END
      ENTERED.CLASS=''
      HELP="Enter the Class ''=ACCEPT"
      IF NEW.WAY THEN
         HELP:=" '.'=50"
      END ELSE
         IF JL.FLAG THEN                 ; * JMK44
            IF JL.DAUDIT.TABLES<33>#'' THEN HELP:=" '.'=FAK"           ; * :'(':JL.DAUDIT.TABLES<33>:')' ; * JMK44
         END ELSE                        ; * JMK44
            IF DAUDIT.TABLES<33>#'' THEN HELP:=" '.'=FAK"    ; * :'(':DAUDIT.TABLES<33>:')'
         END                             ; * JMK44
      END
      HELP:=" 'X'=Back 'EX'=Exit"
      IF OPT='V' THEN MASK=SPACE(5) ELSE MASK=CLASS.WGT<1,CW.SEL>'R#5'
      IF CW.MODE='EDIT' AND CLASS.WGT<1,CW.SEL>='' THEN CW.MODE='INPUT'
      CALL GEN.IN(41+OFFSET,LINE,MASK,'',Q,0,5,'','',2,-5,LINE,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      IF QI=' ' THEN
         DEL CLASS.WGT<1,CW.SEL>
         DEL CLASS.WGT<2,CW.SEL>
         QI=''
         Q=''
      END
      IF QI=500 THEN CALL ELINE("Warning Verify Class 500!")
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=CLASS.WGT<1,CW.SEL>
            IF Q='' THEN                 ; ** Done with Line Items
               IF CW.SEL=1 THEN
                  * Cannot <Enter> to pass 1st Line
                  CALL ELINE('Error! You Must Enter at Least One Class & Weight!')
                  CC+=1
                  GO 640
               END
               CW.SEL=CW.SEL-1           ; * Reset Entry Point for X-Back From Misc Chg
               RETURN TO 700
            END
         CASE QI='X'
            BACK.FLAG = 1                ; *NPR10
            CRT @(41+OFFSET,LINE):CLASS.WGT<1,CW.SEL>'R(#5 )'
            IF CW.SEL=1 THEN
               RETURN TO 500
            END ELSE
               CW.SEL=CW.SEL-1
               LINE=REM(CW.SEL,7)
               IF LINE=0 THEN LINE=7
               IF CW.SEL < 8 THEN OFFSET=0 ELSE OFFSET=20
               LINE=LINE+9
               GO 660
            END
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE QI='.'
            IF NEW.WAY THEN
               Q = '50'
               DOT.USED = 1
            END ELSE
               IF JL.FLAG THEN           ; * JMK44
                  IF JL.DAUDIT.TABLES<33>='' THEN  ; * JMK44
                     CALL ELINE('No FAK range setup for this OLA Client.')       ; * JMK44
                     GO 640              ; * JMK44
                  END ELSE               ; * JMK44
                     Q = JL.DAUDIT.TABLES<33>      ; * JMK44
                     DOT.USED = 1        ; * JMK44
                  END                    ; * JMK44
               END ELSE                  ; * JMK44
                  IF DAUDIT.TABLES<33>='' THEN
                     CALL ELINE('No FAK range setup for this OLA Client.')
                     GO 640
                  END ELSE
                     Q = DAUDIT.TABLES<33>
                     DOT.USED = 1
                  END
               END                       ; * JMK44
            END
         CASE QI='-'
            IF CLASS.WGT<1,CW.SEL+1>#'' OR CW.SEL = 1 THEN
               CALL ELINE('CAN NOT DELETE THIS LINE')
            END ELSE
               DEL CLASS.WGT<1,CW.SEL>
               DEL CLASS.WGT<2,CW.SEL>
               PRINT @(41+OFFSET,LINE):'''R(#12 )'
               GO 640
            END
         CASE NUM(QI)
            IF QI LE 0 THEN
               CALL ELINE('Must be a number greater than 0')
               CC+=1
               GO 640
            END
         CASE QI MATCHES "2N" OR QI MATCHES "2N.1N" OR QI MATCHES "3N"
            Q=QI
         CASE 1
            CALL ELINE("Must be NN or NNN or NN.N")
            CC+=1
            GO 640
      END CASE
      IF Q=77.5 THEN Q=77
      IF Q=92.5 THEN Q=92
      LOCATE Q IN VALID.CLASSES<1> SETTING POS ELSE
         CALL ELINE("Invalid Class")
         CC+=1
         GO 640
      END
      IF AUDITOR.VIEWED = 0 AND NOT(NEW.WAY) THEN
         T.VAL = Q
         IF JL.FLAG THEN                 ; * JMK44
            IF T.VAL < JL.DAUDIT.TABLES<34> OR T.VAL > JL.DAUDIT.TABLES<35> THEN           ; * JMK44
               YN.MSG = 'Has an auditor seen this bill? :'   ; * JMK44
               YN.MASK=' '               ; * JMK44
               GOSUB ASK.Y.OR.N          ; * JMK44
               IF YN.ANSWER # 'Y' THEN   ; * JMK44
                  CALL ELINE('Cannot Audit Bill! Class is outside FAK range. Take this bill to an auditor.')   ; * JMK44
                  CC+=1                  ; * JMK44
                  AUDIT='U'              ; * JMK44
                  X.EX.FLAG='X'          ; * JMK44
                  RETURN TO 9000         ; * JMK44
               END                       ; * JMK44
               AUDITOR.VIEWED = 1        ; * JMK44
               Q=T.VAL                   ; * JMK44
            END                          ; * JMK44
         END ELSE                        ; * JMK44
            IF T.VAL < DAUDIT.TABLES<34> OR T.VAL > DAUDIT.TABLES<35> THEN
               YN.MSG = 'Has an auditor seen this bill? :'
               YN.MASK=' '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER # 'Y' THEN
                  CALL ELINE('Cannot Audit Bill! Class is outside FAK range. Take this bill to an auditor.')
                  CC+=1
                  AUDIT='U'
                  X.EX.FLAG='X'
                  RETURN TO 9000
               END
               AUDITOR.VIEWED = 1
               Q=T.VAL
            END
         END                             ; * JMK44
      END
      CLASS.WGT<1,CW.SEL>=Q
      PRINT @(41+OFFSET,LINE):Q'R(#5 )'

*********************************************************************
660:  * Enter the Line Item Weight
*********************************************************************
      IF DO.BOL.POP THEN
         WEIGHT.POP.FLAG = BOL.POP.VER.ARR<1,26>
         IF WEIGHT.POP.FLAG = 'Y' AND CLASS.WGT<2> = "" AND NOT(BACK.FLAG) THEN
            POP.WEIGHTS = BOL.POP.VER.ARR<4,26>
            CONVERT "|" to @VM IN POP.WEIGHTS
            CLASS.WGT<2> = POP.WEIGHTS
         END
      END
      HELP="Enter the Weight ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF OPT='V' THEN MASK=SPACE(6) ELSE MASK=CLASS.WGT<2,CW.SEL>'R#6'
      CALL GEN.IN(47+OFFSET,LINE,MASK,'',Q,0,6,'','',2,-6,LINE,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=CLASS.WGT<2,CW.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               CC+=1
               GO 660
            END
         CASE QI='X'
            CRT @(47+OFFSET,LINE):CLASS.WGT<2,CW.SEL>'R(#6 )'
            GO 640
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NUM(QI)
            IF QI LE 0 OR INDEX(QI,'.',1) THEN
               CALL ELINE('Must be a Whole Number greater than 0')
               CC+=1
               GO 660
            END
         CASE QI MATCHES "0N"
            Q=QI
         CASE 1
            CALL ELINE("Must be a positive whole number")
            CC+=1
            GO 660
      END CASE
      CLASS.WGT<2,CW.SEL>=Q
      PRINT @(47+OFFSET,LINE):Q'R(#6 )'
      IF Q > 50000 THEN CALL ELINE('WARNING! Weight is over 50,000! Check It!')
      RETURN

      * Get Freight Bill Misc Charge (Contract & Benchmark) Codes & Amounts
      * I don't think this will ever execute
      CW.SEL = 0
      FOR X=1 TO 4
         LINE=REM(X,2)
         IF LINE=0 THEN LINE=2
         LINE=LINE+19
         IF X < 3 THEN OFFSET=0 ELSE OFFSET=23
         IF MISC.CHG<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(37+OFFSET,LINE):SPACE(18):
            END ELSE
               PRINT @(37+OFFSET,LINE):SPACE(18):
            END
         END ELSE
            PRINT @(36+OFFSET,LINE):MISC.CHG<1,X>'R(#4 )':   ; * Charge Code
            PRINT @(41+OFFSET,LINE):MISC.CHG<2,X>'R26(#7 )':           ; *Contr Amount
            PRINT @(49+OFFSET,LINE):MISC.CHG<3,X>'R26(#7)':  ; *Bench Amount
         END
      NEXT X

*********************************************************************
700:  * Get Line Number for Misc Charge Entry
*********************************************************************

      IF MC.MODE='INPUT' THEN
         MC.SEL=MC.SEL+1
         QI=MC.SEL
         IF MC.SEL GT 6 THEN             ; * NPR08
            MC.MODE='EDIT'
            GO 800
         END
      END ELSE
         HELP="Enter Misc Charge Line Number, <RETURN>=Done, 'X'=Back, 'EX'=Exit."
         CALL GEN.IN(0,22,'Enter Misc Charge line number. ##','',Q,0,2,'','',0,-2,22,0,QI,HELP,0,23)
         CC+=LEN(QI)+1
      END
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            GO 800                       ; *** Done with Line Items
         CASE QI='X'
            GO 600
         CASE QI='EX'
            X.EX.FLAG='EX'
            GO 9000
         CASE NUM(QI)
            IF INQUIRE THEN
               CALL ELINE('Can not access detail in inquiry!')
               CC+=1
            END ELSE
               IF QI > 1 THEN
                  IF MISC.CHG<1,QI-1>='' THEN
                     CALL ELINE("Cannot Skip a line.  You must select the next blank line")
                     CC+=1
                     GO 700
                  END
               END
               IF QI > 6 THEN
                  CALL ELINE("Maximum line number is 6")
                  CC+=1
                  GO 700
               END
               MC.SEL=QI
               GOSUB 720
               IF QI='X' AND MC.SEL=1 THEN GO 800
               IF OPT='V' & QI='' THEN GO 800      ; ** Done with Line Items
            END
      END CASE
      GO 700

*********************************************************************
720:  * Get Charge Code, Contract Amount, & Benchmark Amount
*********************************************************************
      IF MC.SEL=1 AND NOT(TEMPO.CLIENT.FLG) THEN   ; * GRB11
         IF JL.FLAG THEN                 ; * JMK44
            LOCATE 'FSC' IN JL.DAUDIT.TABLES<26> SETTING JL.POS ELSE   ; * JMK44
               * Force the table to HAVE the FSC code.
               NEXT.CODE=DCOUNT(JL.DAUDIT.TABLES<26>,@VM)+1  ; * JMK44
               JL.DAUDIT.TABLES<26,NEXT.CODE>='FSC'          ; * JMK44
               JL.DAUDIT.TABLES<27,NEXT.CODE>='ASK'          ; * JMK44
               JL.DAUDIT.TABLES<28,NEXT.CODE>='ASK'          ; * JMK44
            END                          ; * JMK44
            * "Rig" 1st Misc Charge to Be FSC if FSC is not Enabled or
            *  Carrier Setup has a % in the Assoc Code Table
            ADD.FSC=0                    ; * JMK44
            FSC.ACCESSORIAL.PERCENT.FLAG=0         ; * JMK44
            LOCATE 'FSC' IN JL.DAUDIT.TABLES<26> SETTING JL.POS THEN   ; * JMK44
               FSC.TEST=JL.DAUDIT.TABLES<27,JL.POS>          ; * JMK44
               LEN.CHG=LEN(FSC.TEST)     ; * JMK44
               IF FSC.TEST[LEN.CHG,1]='%' THEN     ; * JMK44
                  IF XPEDX.CLIENT THEN   ; * JMK44
                     DAUDIT.TABLES<27,JL.POS>='ASK'          ; * JMK44
                     DAUDIT.TABLES<28,JL.POS>='ASK'          ; * JMK44
                     ADD.FSC=1           ; * JMK44
                  END ELSE               ; * JMK44
                     ADD.FSC=1           ; * JMK44
                     FSC.ACCESSORIAL.PERCENT.FLAG=1          ; * JMK44
                     BENCH.DFSC=''       ; * JMK44
                     CONTR.DFSC=''       ; * JMK44
                  END                    ; * JMK44
               END                       ; * JMK44
            END                          ; * JMK44
         END ELSE                        ; * JMK44
            LOCATE 'FSC' IN DAUDIT.TABLES<26> SETTING POS ELSE
               * Force the table to HAVE the FSC code.
               NEXT.CODE=DCOUNT(DAUDIT.TABLES<26>,@VM)+1
               DAUDIT.TABLES<26,NEXT.CODE>='FSC'
               DAUDIT.TABLES<27,NEXT.CODE>='ASK'
               DAUDIT.TABLES<28,NEXT.CODE>='ASK'
            END
            * "Rig" 1st Misc Charge to Be FSC if FSC is not Enabled or
            * Carrier Setup has a % in the Assoc Code Table
            ADD.FSC=0
            FSC.ACCESSORIAL.PERCENT.FLAG=0
            LOCATE 'FSC' IN DAUDIT.TABLES<26> SETTING POS THEN
               FSC.TEST=DAUDIT.TABLES<27,POS>
               LEN.CHG=LEN(FSC.TEST)
               IF FSC.TEST[LEN.CHG,1]='%' THEN
                  IF XPEDX.CLIENT THEN
                     DAUDIT.TABLES<27,POS>='ASK'
                     DAUDIT.TABLES<28,POS>='ASK'
                     ADD.FSC=1
                  END ELSE
                     ADD.FSC=1
                     FSC.ACCESSORIAL.PERCENT.FLAG=1
                     BENCH.DFSC=''
                     CONTR.DFSC=''
                  END
               END
            END
         END                             ; * JMK44
         IF BENCH.DFSC<30>#'ENABLE' THEN ADD.FSC=1
         IF CONTR.DFSC<30>#'ENABLE' THEN ADD.FSC=1
         IF CONTR.DFSC='' THEN ADD.FSC=1           ; * JMK18
         IF XPEDX.CLIENT THEN ADD.FSC=1
         IF MISC.CHG<1,1>='' AND ADD.FSC THEN MISC.CHG<1,1>='FSC'
         * Force FSC as the 1st Misc Charge on EVERY bill
      END

      IF MC.SEL LT 1 ! MC.SEL GT 6 THEN
         CALL ELINE('Invalid entry.')
         CC+=1
         RETURN
      END
      LINE=REM(MC.SEL,3)
      IF LINE=0 THEN LINE=3
      IF MC.SEL < 4 THEN OFFSET=0 ELSE OFFSET=23
      LINE=LINE+18
      CSVAL=1                            ; * JMK12
      DSP.LN = 1                         ; * DRF01

*********************************************************************
740:  * Enter the Misc Charge Code
*********************************************************************
      HELP="Code  OR line No. ''=ACCEPT 'X'=Back 'EX'=Exit '-'=Clear Code"       ; * NPR08
      IF OPT='V' THEN MASK=SPACE(4) ELSE MASK=MISC.CHG<1,MC.SEL>'L#4'
      IF MC.MODE='EDIT' AND MISC.CHG<1,MC.SEL>='' THEN MC.MODE='INPUT'
      CHOICE.ARRAY = ''                  ; * NPR08
      IF NOT(TEMPO.CLIENT.FLG) THEN      ; * GRB11
         IF JL.FLAG THEN                 ; * JMK44
            MAX.CHOICE=DCOUNT(JL.DAUDIT.TABLES<26>,@VM)      ; * JMK44
            FOR X=1 TO MAX.CHOICE        ; * JMK44
               CHOICE.ARRAY<X> = JL.DAUDIT.TABLES<26,X>      ; * NPR08
            NEXT X                       ; * JMK44
         END ELSE                        ; * JMK44
            MAX.CHOICE=DCOUNT(DAUDIT.TABLES<26>,@VM)
            FOR X=1 TO MAX.CHOICE
               CHOICE.ARRAY<X> = DAUDIT.TABLES<26,X>         ; * NPR08
            NEXT X
         END
      END ELSE
         MAX.CHOICE=DCOUNT(TEMPO.CLIENTS.ACC.CDS<1>,@VM)     ; * GRB11
         FOR X=1 TO MAX.CHOICE           ; * GRB11
            CHOICE.ARRAY<X> = TEMPO.CLIENTS.ACC.CDS<1,X>     ; * GRB11
         NEXT X                          ; * GRB11
      END                                ; * JMK44

      IF USER='DAVID' THEN CALL ELINE('CHECKING CODES')
      IF NOT(GOT.ASS.CODES) THEN GOSUB GET.ASS.CHARGES       ; * NPR08
      GOSUB SETUP.MC.DISPLAY             ; * NPR08
      CHOICE.CNT=DCOUNT(CHOICE.ARRAY,@AM)          ; * NPR08
      MAX.CHOICE=CHOICE.CNT              ; * NPR08
      MC.ATTR = 1                        ; * NPR08
      GOSUB DISP.MISC.CHARGES            ; * NPR08

*********************************************************************
745:  *
*********************************************************************
      CALL GEN.IN(36+OFFSET,LINE,MASK,'',Q,0,4,'','',2,-4,LINE,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      CRT @(0,22):@(-4):
      QI=OCONV(QI,'MCU')
      Q =OCONV(Q,'MCU')                  ; * NPR08

      IF QI#'' AND QI MATCHES '0N' THEN
         IF QI > 0 AND QI LE MAX.CHOICE THEN
            Q=CHOICE.ARRAY<QI>           ; * NPR08
            QI=CHOICE.ARRAY<QI>          ; * NPR08
            IF QI='' THEN CALL ELINE("Invalid Choice") ; GO 740
            CRT @(36+OFFSET,LINE):QI:
         END
         LOCATE Q IN MISC.CHG<1> SETTING MPOS THEN           ; * JMK04
            CALL ELINE(Q:" has already been used")           ; * JMK04
            GO 740
         END                             ; * JMK04
      END
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<1,MC.SEL>
            IF Q='' THEN
               MC.SEL=MC.SEL-1
               IF TEMPO.CLIENT.FLG THEN
                  HANDLING.UNITS = ''
                  BACK.FLAG = 0
                  HELP = 'Enter the number of Handling Units. [X]=Back [EX]=Exit'
                  ***   IF HANDLING.UNITS = '' THEN REQ = 1 ELSE REQ = 0
                  REQ = 0
                  CALL GEN.IN(19,15,HANDLING.UNITS'R#5','',Q,REQ,5,'','',2,-5,15,0,QI,HELP,0,23)
                  CC+=LEN(QI)+1          ; *GOSUB PRINT.CC
                  QI = OCONV(QI,'MCU')
                  BEGIN CASE
                     CASE QI = 'X'
                        CRT @(0,21):'       ':
                        CRT @(19,15):HANDLING.UNITS'R#5'
                        BACK.FLAG = 1
                        ***  IF SU.FLAG THEN
                        **    GOTO 1950
                        ** END ELSE
                        **     GOTO 1800
                        **  END
                     CASE QI = 'EX'
                        **   GOTO PROGRAM.EXIT          ; * NKH10
                     CASE CHANGE.FLAG & QI = ''
                        Q = HANDLING.UNITS
                     CASE QI = ''
                        Q = HANDLING.UNITS
                     CASE NUM(QI) AND QI GE 0
                        Q = QI
                     CASE 1
                        CALL ELINE("Enter a valid number or zero")
                        **** GOTO 2050
                  END CASE
                  HANDLING.UNITS = Q
                  CRT @(19,15):HANDLING.UNITS'R#5'
                  RETURN TO 800

                  ***  	RETURN TO 2050
               END ELSE
                  RETURN TO 800
               END
            END
         CASE QI='X'
            CRT @(36+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'
            IF MC.SEL=1 THEN
               MC.SEL=MC.SEL-1
               RETURN TO 600
            END ELSE
               MC.SEL=MC.SEL-1
               LINE=REM(MC.SEL,2)
               IF LINE=0 THEN LINE=2
               IF MC.SEL < 3 THEN OFFSET=0 ELSE OFFSET=23
               LINE=LINE+19
               GO 720                    ; * Previous Code Line
            END
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE QI='M' AND CHOICE.CNT > 1  ; * JMK12
            CSVAL=CSVAL+1
            IF CSVAL > CHOICE.CNT THEN   ; * JMK12
               CSVAL=1                   ; * JMK12
            END                          ; * JMK12
            DSP.LN += 1                  ; * NPR08
            GOSUB DISP.MISC.CHARGES      ; * NPR08
            GO 740                       ; * JMK12
         CASE QI='-' OR QI=' '
            IF MISC.CHG<1,MC.SEL>='' THEN
               CALL ELINE('Item is Not Blank, Unable to delete this item')
            END ELSE
               DEL MISC.CHG<1,MC.SEL>
               DEL MISC.CHG<2,MC.SEL>
               DEL MISC.CHG<3,MC.SEL>
               DEL MISC.CHG<4,MC.SEL>    ; * JMK63
               CRT @(36+OFFSET,LINE):'''L(#19)'
               GOSUB 7000                ; *** Display Data on Screen (If Any)
               GO 740
            END
      END CASE
      IF MC.SEL=1 AND NOT(TEMPO.CLIENT.FLG) THEN   ; * GRB11
         IF Q#'FSC' AND ADD.FSC THEN
            CALL ELINE("1st Misc Charge MUST be FSC")
            CC+=1
            GO 740
            * Require FSC as the 1st Misc Charge on EVERY bill
         END
      END
      IF Q='FSC' AND ADD.FSC=0 THEN      ; * JMK18
         CALL ELINE('Do not enter FSC for this bill.')       ; * JMK18
         CC+=1                           ; * JMK18
         GO 740                          ; * JMK18
      END                                ; * JMK18
      MISC.CHG<4,MC.SEL>=0               ; * JMK63
      AUDIT.ACC=0                        ; * JMK63
      IF NOT(TEMPO.CLIENT.FLG) THEN      ; * GRB11
         IF JL.FLAG THEN                 ; * JMK44
            LOCATE 'FSC' IN JL.DAUDIT.TABLES<26> SETTING JL.POS ELSE   ; * JMK44
               * Force the table to HAVE the FSC code.
               NEXT.CODE=DCOUNT(JL.DAUDIT.TABLES<26>,@VM)+1  ; * JMK44
               JL.DAUDIT.TABLES<26,NEXT.CODE>='FSC'          ; * JMK44
               JL.DAUDIT.TABLES<27,NEXT.CODE>='ASK'          ; * JMK44
               JL.DAUDIT.TABLES<28,NEXT.CODE>='ASK'          ; * JMK44
            END                          ; * JMK44
            LOCATE 'GST' IN JL.DAUDIT.TABLES<26> SETTING JL.POS ELSE   ; * JMK44
               IF Q = 'GST' THEN         ; * NKH05
                  MISC.CODE = Q          ; * NKH05
                  GOSUB 8900             ; * NKH05
                  IF NOT(AUDIT.ACC) THEN           ; * NKH05
                     * Force the table to HAVE the GST code.
                     NEXT.CODE=DCOUNT(JL.DAUDIT.TABLES<26>,@VM)+1      ; * JMK44
                     JL.DAUDIT.TABLES<26,NEXT.CODE>='GST'    ; * JMK44
                     JL.DAUDIT.TABLES<27,NEXT.CODE>='ASK'    ; * JMK44
                     JL.DAUDIT.TABLES<28,NEXT.CODE>='ASK'    ; * JMK44
                  END                    ; * NKH05
               END                       ; * NKH05
            END                          ; * JMK44
            LOCATE Q IN JL.DAUDIT.TABLES<26> SETTING JL.POS ELSE       ; * JMK44
               MISC.CODE=Q               ; * JMK63
               GOSUB 8900                ; * JMK63
               IF AUDIT.ACC=0 THEN       ; * JMK63
                  CALL ELINE("Invalid Code - Code not in Table:  ":JL.AUDIT.TABLE.ID)      ; * JMK44
                  CC+=1                  ; * JMK44
                  GO 740                 ; * JMK44
               END                       ; * JMK63
            END                          ; * JMK44
         END ELSE                        ; * JMK44
            LOCATE 'FSC' IN DAUDIT.TABLES<26> SETTING POS ELSE
               * Force the table to HAVE the FSC code.
               NEXT.CODE=DCOUNT(DAUDIT.TABLES<26>,@VM)+1
               DAUDIT.TABLES<26,NEXT.CODE>='FSC'
               DAUDIT.TABLES<27,NEXT.CODE>='ASK'
               DAUDIT.TABLES<28,NEXT.CODE>='ASK'
            END
            LOCATE 'GST' IN DAUDIT.TABLES<26> SETTING POS ELSE
               IF Q = 'GST' THEN         ; * NKH05
                  MISC.CODE = Q          ; * NKH05
                  GOSUB 8900             ; * NKH05
                  IF NOT(AUDIT.ACC) THEN           ; * NKH05
                     * Force the table to HAVE the GST code.
                     NEXT.CODE=DCOUNT(DAUDIT.TABLES<26>,@VM)+1
                     DAUDIT.TABLES<26,NEXT.CODE>='GST'
                     DAUDIT.TABLES<27,NEXT.CODE>='ASK'
                     DAUDIT.TABLES<28,NEXT.CODE>='ASK'
                  END                    ; * NKH05
               END                       ; * NKH05
            END
            LOCATE Q IN DAUDIT.TABLES<26> SETTING POS ELSE
               MISC.CODE=Q               ; * JMK63
               GOSUB 8900                ; * JMK63
               IF AUDIT.ACC=0 THEN       ; * JMK63
                  CALL ELINE("Invalid Code - Code not in Table:  ":AUDIT.TABLE.ID)
                  CC+=1
                  GO 740
               END                       ; * JMK63
            END
         END                             ; * JMK44
         IF AUDIT.ACC THEN               ; * JMK63
            MISC.CODE=Q                  ; * JMK63

            GOSUB 8950                   ; * JMK63
         END ELSE                        ; * JMK63
            IF JL.FLAG THEN              ; * JMK63
               CUR.CONTR.MISC.AMT=JL.DAUDIT.TABLES<27,JL.POS>          ; * JMK44
               CUR.BENCH.MISC.AMT=JL.DAUDIT.TABLES<28,JL.POS>          ; * JMK44
            END ELSE                     ; * JMK63
               CUR.CONTR.MISC.AMT=DAUDIT.TABLES<27,POS>
               CUR.BENCH.MISC.AMT=DAUDIT.TABLES<28,POS>
            END                          ; * JMK63
         END                             ; * JMK63
         IF LOGISTICS AND CUR.BENCH.MISC.AMT<CUR.CONTR.MISC.AMT THEN
            CALL ELINE("Unable to Use this code! Benchmark is Less that Contract")
            CC+=1
            GO 740
         END
         MISC.CHG<1,MC.SEL>=Q
         CRT @(36+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'

         IF CUR.CONTR.MISC.AMT='ASK' THEN GO 760   ; * Get Contract Amount

         IF CUR.BENCH.MISC.AMT='ASK' THEN          ; * JMK11
            IF MISC.CHG<1,MC.SEL>='FSC' THEN       ; * JMK11
               CUR.BENCH.MISC.AMT=CUR.CONTR.MISC.AMT         ; * JMK11
            END ELSE                     ; * JMK11
               IF MISC.CHG<1,MC.SEL>='GST' THEN    ; * JMK11
                  CUR.BENCH.MISC.AMT=CUR.CONTR.MISC.AMT      ; * JMK11
               END ELSE                  ; * JMK11
                  GO 780                 ; * Get Benchmark Amount; * JMK11
               END                       ; * JMK11
            END
         END                             ; * JMK11

         MISC.CHG<2,MC.SEL>=CUR.CONTR.MISC.AMT
         MISC.CHG<3,MC.SEL>=CUR.BENCH.MISC.AMT
         MISC.CHG<4,MC.SEL>=AUDIT.ACC    ; * JMK63 ; * DRF15
*      MISC.CHG<4,MC.SEL>=0               ; * DRF15

         CRT @(36+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'
         CRT @(41+OFFSET,LINE):CUR.CONTR.MISC.AMT'R26(#7 )'
         CRT @(49+OFFSET,LINE):CUR.BENCH.MISC.AMT'R26(#7)'
      END ELSE                           ; * GRB11
         IF QI#'' AND QI NOT(NUM(QI)) THEN
            LOCATE(QI,CHOICE.ARRAY;CPOS) ELSE
               CALL ELINE("Invalid Code - Code not in Table:  ":QI)
               CC+=1
               GO 740
            END
         END
         MISC.CHG<1,MC.SEL>=Q            ; * GRB11
         CRT @(36+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'    ; * GRB11

         *******  IF TEMPO.CLIENT.FLG THEN GO 760                         ; * GRB11
      END                                ; * GRB11

      RETURN                             ; * Go Get Next Code


*********************************************************************
760:  * Enter the Misc Charge Contract Amount
*********************************************************************
      HELP="Enter Contract (Carrier) Amount for this code ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF OPT='V' THEN MASK=SPACE(7) ELSE MASK=MISC.CHG<2,MC.SEL>'R26#7'
      CALL GEN.IN(41+OFFSET,LINE,MASK,'AMT2',Q,0,7,'','',2,-7,LINE,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<2,MC.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               CC+=1
               GO 760
            END
         CASE QI='X'
            CRT @(41+OFFSET,LINE):MISC.CHG<2,MC.SEL>'R26(#7 )'
            GO 740
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NOT(NUM(QI))
            CALL ELINE("Must be Numeric")
            CC+=1
            GO 760
         CASE CLIENT='00139' AND MISC.CHG<1,MC.SEL>='COD'
            IF Q < 1 OR Q > 35000 THEN
               CALL ELINE("Must be Greater than 0 and less than 350.00 for Sports South")
               CC+=1
               GO 760
            END
         CASE CLIENT='00139' AND MISC.CHG<1,MC.SEL>='ID'
            IF Q < 1 OR Q > 35000 THEN
               CALL ELINE("Must be Greater than 0 and less than 350.00 for Sports South")
               CC+=1
               GO 760
            END
         CASE CLIENT='01832' AND MISC.CHG<1,MC.SEL>='BEYR'
            IF Q < 1 OR Q > 45000 THEN
               CALL ELINE("Must be Greater than 0 and less than 450.00")
               CC+=1
               GO 760
            END
         CASE CLIENT='01853' AND MISC.CHG<1,MC.SEL>='BEYR'
            IF Q < 1 OR Q > 42500 THEN
               CALL ELINE("Must be Greater than 0 and less than 425.00")
               CC+=1
               GO 760
            END
         CASE Q = 0 AND MC.SEL=1 AND MISC.CHG<1,MC.SEL>='FSC'
            NULL
         CASE MISC.CHG<1,MC.SEL>='FSC'
            IF Q < 1 OR Q > 200000 THEN
               CALL ELINE("Must be Greater than 0 and less than 2,000.00")
               CC+=1
               GO 760
            END
         CASE MISC.CHG<1,MC.SEL>='GST' OR MISC.CHG<1,MC.SEL>='HST'
            IF Q < 1 OR Q > 100000 THEN
               CALL ELINE("Must be Greater than 0 and less than 1,000.00")
               CC+=1
               GO 760
            END

         CASE MISC.CHG<1,MC.SEL>='FREZ'
            IF Q < 1 OR Q > 99900 THEN
               CALL ELINE("Must be Greater than 0 and less than 999.00")
               CC+=1
               GO 760
            END

         CASE Q < 1 OR Q > 100000        ; *Changed from 35000 7/12/12 DRF as per Ticket 3151
            CALL ELINE("Must be Greater than 0 and less than 350.00")
            CC+=1
            GO 760
      END CASE
      MISC.CHG<2,MC.SEL>=Q
      PRINT @(41+OFFSET,LINE):Q'R26(#7 )'
      IF LOGISTICS ELSE RETURN

*********************************************************************
780:  * Enter the Misc Charge Benchmark Amount
*********************************************************************
      IF CUR.BENCH.MISC.AMT='ASK' THEN   ; * JMK11
         IF MISC.CHG<1,MC.SEL>='FSC' THEN          ; * JMK11
            Q=MISC.CHG<2,MC.SEL>         ; * JMK11
         END ELSE                        ; * JMK11
            HELP="Enter Benchmark (Logistics) Amount for this code ''=ACCEPT 'X'=Back 'EX'=Exit"
            IF MISC.CHG<3,MC.SEL>='' THEN MISC.CHG<3,MC.SEL>=MISC.CHG<2,MC.SEL>  ; * Default to Contr
            IF OPT='V' THEN MASK=SPACE(7) ELSE MASK=MISC.CHG<3,MC.SEL>'R26#7'
            CALL GEN.IN(49+OFFSET,LINE,MASK,'AMT2',Q,0,7,'','',2,-7,LINE,0,QI,HELP,0,23)
            CC+=LEN(QI)+1
            QI=OCONV(QI,'MCU')
            BEGIN CASE
               CASE QI='' & OPT NE 'V'
                  Q=MISC.CHG<3,MC.SEL>
                  IF Q='' THEN
                     CALL ELINE("Entry is required")
                     CC+=1
                     GO 780
                  END
                  IF Q < MISC.CHG<2,MC.SEL> THEN
                     CALL ELINE("Cannot Be Less than Contract Amount!")
                     CC+=1
                     GO 780
                  END
               CASE QI='X'
                  CRT @(49+OFFSET,LINE):MISC.CHG<3,MC.SEL>'R26(#7)'
                  GO 760
               CASE QI='EX'
                  X.EX.FLAG='EX'
                  RETURN TO 9000
               CASE NOT(NUM(QI))
                  CALL ELINE("Must be Numeric")
                  CC+=1
                  GO 780
               CASE CLIENT='00664' & CARRIER='00377'
                  IF Q < 1 OR Q > 25000 THEN
                     CALL ELINE("Must be Greater than 0 and less than 250.00 for Liberto-Benton")
                     CC+=1
                     GO 760
                  END
               CASE CLIENT='00896'
                  IF Q < 1 OR Q > 25000 THEN
                     CALL ELINE("Must be Greater than 0 and less than 250.00 for Xpedex Great Lakes")
                     CC+=1
                     GO 760
                  END
               CASE CLIENT='00139' AND MISC.CHG<1,MC.SEL>='COD'
                  IF Q < 1 OR Q > 35000 THEN
                     CALL ELINE("Must be Greater than 0 and less than 350.00 for Sports South")
                     CC+=1
                     GO 760
                  END
               CASE CLIENT='00139' AND MISC.CHG<1,MC.SEL>='ID'
                  IF Q < 1 OR Q > 35000 THEN
                     CALL ELINE("Must be Greater than 0 and less than 350.00 for Sports South")
                     CC+=1
                     GO 760
                  END
               CASE Q = 0 AND MC.SEL=1 AND MISC.CHG<1,MC.SEL>='FSC'
                  NULL

               CASE Q < 1 OR Q > 100000  ; *Changed from 35000 7/12/12 DRF as per Ticket 3151
                  CALL ELINE("Must be Greater than 0 and less than 350.00")
                  CC+=1
                  GO 780
               CASE Q < MISC.CHG<2,MC.SEL>         ; * Less than Contract
                  CALL ELINE("Cannot Be Less than Contract Amount!")
                  CC+=1
                  GO 780
            END CASE
         END                             ; * JMK11
      END                                ; * JMK11
      MISC.CHG<3,MC.SEL>=Q
      PRINT @(49+OFFSET,LINE):Q'R26(#7)'
      RETURN

*********************************************************************
800:  * Get the Weight of the Shipment
*********************************************************************
      IF DO.BOL.POP THEN
         WEIGHT.POP.FLAG = BOL.POP.VER.ARR<1,16>
         IF WEIGHT.POP.FLAG = 'Y' AND NOT(BACK.FLAG) THEN
            TOT.WEIGHT = BOL.POP.VER.ARR<4,16>
         END
      END
      HELP="Enter the Total Weight of the shipment"
      MASK=TOT.WEIGHT'R#6'
      CALL GEN.IN(0,19,MASK,'',Q,0,6,'R','',2,0,19,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=TOT.WEIGHT
      IF QI='X' THEN
         IF MC.SEL > 14 THEN MC.MODE='EDIT'
         CRT @(0,19):TOT.WEIGHT'R#6'
         GO 700
      END
      IF QI='EX' THEN
         X.EX.FLAG='EX'
         GO 9000
      END
      BEGIN CASE
         CASE NOT(NUM(QI))
            CALL ELINE('Must be a whole number greater than 0')
            CC+=1
            GO 800
         CASE QI < 1 OR INT(QI)#QI
            CALL ELINE('Must be a whole number greater than 0')
            CC+=1
            GO 800
      END CASE
      TOT.WEIGHT.DETAILS=SUM(CLASS.WGT<2>)
      IF TOT.WEIGHT.DETAILS#QI THEN
         CALL ELINE("Error! Total Weight Does not Match Weight Details of ":TOT.WEIGHT.DETAILS)
         CC+=1
         GO 800
      END
      IF QI > 50000 THEN
         CALL ELINE('WARNING! Weight is over 50,000! Check It!')
      END
      TOT.WEIGHT=QI
      PRINT @(0,19):TOT.WEIGHT'R#6':
      BEGIN CASE                         ; * JMK16
         CASE CLIENT='00949'             ; * JMK16
            MAX.WEIGHT=20000             ; * JMK16
         CASE CLIENT='01081'             ; * JMK16
            MAX.WEIGHT=19000             ; * JMK16
         CASE CLIENT='01092'             ; * JMK16
            MAX.WEIGHT=17000             ; * JMK16
         CASE 1                          ; * JMK16
            MAX.WEIGHT=15000             ; * JMK16
      END CASE                           ; * JMK16

      IF USER.TYPE='A' THEN
         IF TOT.WEIGHT GE MAX.LTL THEN
            CALL ELINE('Total Weight of ':TOT.WEIGHT:' is greater than the max weight of ':MAX.LTL)
            HELP='[Y]es or [N]o'

*********************************************************************
TOT.WEIGHT.TEST:
*********************************************************************
            CALL GEN.IN(0,22,'The weight is higher than the max, do you want to run through OLA Y ','',Q,0,2,'','',2,-2,22,0,QI,HELP,0,23)
            CC+=LEN(QI)+1
            CRT @(0,22):@(-3):
            QI = OCONV(QI,'MCU')
            BEGIN CASE
               CASE QI='EX'
                  X.EX.FLAG='EX'
                  GO 9000
               CASE QI='X'
                  GO 800
               CASE QI='N'

*********************************************************************
LOG.CONFIRMATION:
*********************************************************************
                  HELP='[YES] or [X]-Back'
                  CRT @(0,22):@(-3):
                  CALL GEN.IN(0,22,'No logistics is taken is this what you want ---','',Q,0,3,'','',2,-3,22,0,QI,HELP,0,23)
                  CC+=LEN(QI)+1
                  QI = OCONV(QI,'MCU')
                  IF QI='EX' THEN
                     X.EX.FLAG='EX'
                     GO 9000
                  END
                  IF QI='X' THEN
                     GO TOT.WEIGHT.TEST
                  END
                  IF QI#'YES' THEN
                     CALL ELINE('Invalid Entry. Please try again')
                     GO LOG.CONFIRMATION
                  END
                  AUDIT='U'
               CASE QI#'N' AND QI#'Y' AND QI#''
                  CALL ELINE('Invalid Entry. Please try again')
                  GO TOT.WEIGHT.TEST
            END CASE
         END
      END ELSE
         IF TOT.WEIGHT GT MAX.LTL THEN AUDIT='U'   ; * JMK05 ; * JMK16
      END

      IF AUDIT='U' THEN
         * Have all the important information at this point.... EXIT PROGRAM
         GO 9000
      END

*********************************************************************
1000: * Submit Information to PC Audit Routine to Determine Amounts
*********************************************************************
      CLASSES=CLASS.WGT<1>
      WEIGHTS=CLASS.WGT<2>
      CONTR.TARIFF=''
      CONTR.CLASSES=''                   ; * Sub Valued for placment into DIN
      CONTR.DISC=''                      ; * <1>-TMIN <2>-L5C <3>-O5C  All Mv per line item
      LOWEST.CONTR.CLASS=''
      LOWEST.CONTR.CLASS.DISC=''         ; ** <1>-TMIN <2>-L5C <3>-O5C from Lowest class
      BENCH.TARIFF=''
      BENCH.CLASSES=''                   ; * Sub Valued for placment into DIN
      BENCH.DISC=''                      ; * Mv for each line item (contains repeats)
      LOWEST.BENCH.CLASS=''
      LOWEST.BENCH.CLASS.DISC=''         ; * Taken from Discount on Lowest Class
      DIN=''
      DIN<1,1>=PRO.ID
      DIN<1,2>=ORIG.ZIP
      DIN<1,3>=DEST.ZIP
      IF TEMPO.CLIENT.FLG THEN GO 4700   ; * GRB11
      LOCATE '50' IN DAUDIT.TABLES<1> SETTING CLASS.POS THEN
         LOWEST.TABLE.CLASS=DAUDIT.TABLES<2,CLASS.POS>       ; * Contract Class
      END
      IF CLASSES<1>='' THEN CLASSES<1>='50'        ; * Force at least one Class
      DETAIL.TIMES=DCOUNT(CLASSES<1>,@VM)
      FOR DET.CNT = 1 TO DETAIL.TIMES
         CUR.CLASS=CLASSES<1,DET.CNT>
         CUR.WEIGHT=WEIGHTS<1,DET.CNT>
         LOCATE CUR.CLASS IN DAUDIT.TABLES<1> SETTING CLASS.POS THEN
            CUR.CONTR.CLASS=DAUDIT.TABLES<2,CLASS.POS>       ; * Contract Class
            IF JL.FLAG THEN              ; * JMK44
               LOCATE CUR.CLASS IN JL.DAUDIT.TABLES<1> SETTING JL.CLASS.POS THEN           ; * JMK44
                  CUR.CONTR.CLASS=JL.DAUDIT.TABLES<2,JL.CLASS.POS>     ; * Contract Class ; * JMK44
               END                       ; * JMK44
            END                          ; * JMK44
            IF HIGHEST.CLASS='' OR CUR.CONTR.CLASS > HIGHEST.CLASS THEN
               HIGHEST.CLASS=CUR.CONTR.CLASS
            END
            CONTR.CLASSES<1,1,DET.CNT>=CUR.CONTR.CLASS
            CUR.BENCH.CLASS=DAUDIT.TABLES<12,CLASS.POS>      ; * Benchmark Class
            IF JL.FLAG THEN              ; * DRF04
               LOCATE CUR.CLASS IN JL.DAUDIT.TABLES<1> SETTING JL.CLASS.POS THEN           ; * DRF04
                  CUR.BENCH.CLASS=JL.DAUDIT.TABLES<12,JL.CLASS.POS>    ; * Contract Class  ; * DRF04
               END                       ; * DRF04
            END                          ; * DRF04
            BENCH.CLASSES<1,1,DET.CNT>=CUR.BENCH.CLASS
            CUR.CONTR.TARIFF=DAUDIT.TABLES<6,CLASS.POS>      ; * Contract Tariff
*           CUR.BENCH.TARIFF=DAUDIT.TABLES<16,CLASS.POS>     ; * Benchmark Tariff ; * JMK67
            CUR.BENCH.TARIFF=DAUDIT.TABLES<6,CLASS.POS>      ; * Benchmark Tariff ; * JMK67
            IF JL.FLAG THEN              ; * JMK44
               CUR.CONTR.TARIFF=JL.DAUDIT.TABLES<6,JL.CLASS.POS>       ; * Contract Tariff ; * JMK44
               CUR.BENCH.TARIFF=JL.DAUDIT.TABLES<6,JL.CLASS.POS>       ; * Contract Tariff  ; * DRF04
            END                          ; * JMK44

            * Determine Contract Discount(s) (And Lowest Class Discount)
            FOR X = 1 TO 3
               CONTR.DISC<X,DET.CNT>=DAUDIT.TABLES<X+2,CLASS.POS>
            NEXT X
            IF JL.FLAG THEN              ; * JMK35
               FOR X = 1 TO 3            ; * JMK35
                  CONTR.DISC<X,DET.CNT>=JL.DAUDIT.TABLES<X+2,JL.CLASS.POS>       ; * JMK35
               NEXT X                    ; * JMK35
            END                          ; * JMK35
            IF LOWEST.CONTR.CLASS='' THEN
               LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
               FOR X = 1 TO 3
                  LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
               NEXT X
            END ELSE
               IF CUR.CONTR.CLASS<LOWEST.CONTR.CLASS THEN
                  LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
                  FOR X = 1 TO 3
                     LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
                  NEXT X
               END
            END

            * Determine Benchmark Discount (And Lowest Class Discount)
            FOR X = 1 TO 3               ; * JMK47
               BENCH.DISC<X,DET.CNT>=DAUDIT.TABLES<X+12,CLASS.POS>     ; * JMK47
            NEXT X                       ; * JMK47
            IF JL.FLAG THEN              ; * DRF04
               FOR X = 1 TO 3            ; * DRF04
                  BENCH.DISC<X,DET.CNT>=JL.DAUDIT.TABLES<X+12,JL.CLASS.POS>      ; * DRF04
               NEXT X                    ; * DRF04
            END                          ; * DRF04
            IF LOWEST.BENCH.CLASS='' THEN          ; * JMK47
               LOWEST.BENCH.CLASS=CUR.BENCH.CLASS  ; * JMK47
               FOR X = 1 TO 3            ; * JMK47
                  LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>     ; * JMK47
               NEXT X                    ; * JMK47
            END ELSE                     ; * JMK47
               IF CUR.BENCH.CLASS<LOWEST.BENCH.CLASS THEN    ; * JMK47
                  LOWEST.BENCH.CLASS=CUR.BENCH.CLASS         ; * JMK47
                  FOR X = 1 TO 3         ; * JMK47
                     LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>  ; * JMK47
                  NEXT X                 ; * JMK47
               END                       ; * JMK47
            END                          ; * JMK47

            IF DET.CNT=1 THEN
               CONTR.TARIFF=CUR.CONTR.TARIFF
               BENCH.TARIFF=CUR.BENCH.TARIFF
            END ELSE
               IF CUR.CONTR.TARIFF#CONTR.TARIFF THEN
                  * Error Found a Contract Tariff that is different than the
                  * first Class's Contract Tariff.... cannot handle.
                  CALL ELINE("101 Cls-":CUR.CLASS:" Tar-":CUR.CONTR.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  CC+=1
                  GO 1000
               END
               IF LOGISTICS AND CUR.BENCH.TARIFF#BENCH.TARIFF THEN
                  * Error Found a Benchmark Tariff that is different than the
                  * first Class's Benchmark Tariff.... cannot handle.
                  CALL ELINE("102 Cls-":CUR.CLASS:" Tar-":BENCH.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  CC+=1
                  GO 1000
               END
            END
         END ELSE
            CALL ELINE("Serious Error! Class '":CUR.CLASS:"' Cannot be found in AUDIT.TABLE '":TABLE:"'")
            CC+=1
            GO 1000
         END

         DIN<1,5,DET.CNT>=CUR.WEIGHT
      NEXT DET.CNT
      LOCATE CONTR.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
         CONTR.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>      ; * Send to PC Name
         IF CONTR.TARIFF.ACT.NAME='AFS50002' AND CDN.ROUTE=1 THEN      ; * JMK01  NKH14
            CONTR.TARIFF.ACT.NAME='AFS52502'       ; * JMK01 NKH14
         END                             ; * JMK01
         CONTR.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
         CONTR.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
      END ELSE
         CALL ELINE("103 contr.tariff ":CONTR.TARIFF:" missing from tariff eff date xref")
         CC+=1
         GO 1000
      END
      LOCATE CONTR.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
         CONTR.TARIFF.DRIVER=DTARIFFS<3,POS>
      END ELSE
         CALL ELINE("106 Unable to locate Contract ":CONTR.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
         CC+=1
         GO 1000
      END
      IF LOGISTICS THEN
         LOCATE BENCH.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
            BENCH.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>   ; * Send to PC Name
            IF BENCH.TARIFF.ACT.NAME='AFS50002' AND CDN.ROUTE=1 THEN   ; * JMK01  NKH14
               BENCH.TARIFF.ACT.NAME='AFS52502'    ; * JMK01 NKH14
            END                          ; * JMK01
            BENCH.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
            BENCH.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
         END ELSE
            CALL ELINE("103 bench.tariff ":BENCH.TARIFF:" missing from tariff eff date xref")
            CC+=1
            GO 1000
         END
         LOCATE BENCH.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
            BENCH.TARIFF.DRIVER=DTARIFFS<3,POS>
         END ELSE
            CALL ELINE("107 Unable to locate Benchmark ":BENCH.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
            CC+=1
            GO 1000
         END
      END

      *  Get Contract Rates from CZAR or AFS95
      DIN<1,4>=CONTR.CLASSES
      DIN<1,7>=CONTR.TARIFF.ACT.NAME
      DIN<1,8>=CONTR.TARIFF.EFF.DATE
      DIN<1,9>=CONTR.TARIFF.FACTOR
      VIN='BOTH'
      VIN<2>='10000'                     ; * Max Discount Weight
      VIN<3>=CLIENT                      ; * JMK33
      VIN<4>=CARRIER                     ; * JMK42
      VIN<5>='C'                         ; * JMK42
      VIN<6>=IOT                         ; * NKH08
      VIN<7>=BILL.DATE                   ; * NKH08
4700:                                    ; * GRB11
      IF CONTR.TARIFF.DRIVER = BENCH.TARIFF.DRIVER THEN
         * Same "Driver" used on both Contract & Benchmark Tariffs
         * Send 1 time with "Both" Bills
         IF LOGISTICS THEN
            DIN<2>=DIN<1>                ; * Set 2nd Bill equal to 1st Bill
            DIN<2,4>=BENCH.CLASSES       ; * Set 2nd Bills Classes to Benchmark's
            DIN<2,7>=BENCH.TARIFF.ACT.NAME         ; * Set 2nd Bill to Correct Tariff
            DIN<2,8>=BENCH.TARIFF.EFF.DATE         ; * Set 2nd Bill's Tariff Eff Date
            DIN<2,9>=BENCH.TARIFF.FACTOR
         END
         * Begin NKH08
*         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
*            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
*            DINNATT=DCOUNT(DIN,@AM)      ; * JMK22 ; * JMK25 ; * JMK26
*            FOR DINATT=1 TO DINNATT      ; * JMK22 ; * JMK25 ; * JMK26
*               DIN<DINATT,7>=AFS.TARIFF.NAME       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
*            NEXT DINATT                  ; * JMK22 ; * JMK25 ; * JMK26
*            CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)   ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK41
*         END ELSE
*            CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)      ; * JMK26 ; * JMK41 ; * JMK76
*         END
*
         TARIFF.ACT.NAME = CONTR.TARIFF.ACT.NAME
         BENCH.TARIFF = 0
         GOSUB CALL.TARIFF.DRIVER
         * End NKH08

         CONTR.DOUT=DOUT<1>
         IF LOGISTICS THEN BENCH.DOUT=DOUT<2>
      END ELSE
         * Different "Driver" used on Contract & Benchmark Tariffs
         * Send each "Bill" to their respective Driver"
         * Begin NKH08
*         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
*            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
*            DINNATT=DCOUNT(DIN,@AM)      ; * JMK22 ; * JMK25 ; * JMK26
*            FOR DINATT=1 TO DINNATT      ; * JMK22 ; * JMK25 ; * JMK26
*               DIN<DINATT,7>=AFS.TARIFF.NAME       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
*            NEXT DINATT                  ; * JMK22 ; * JMK25 ; * JMK26
*            CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK41
*         END ELSE
*            CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)          ; * JMK26 ; * JMK41 ; * JMK76
*         END
*
         TARIFF.ACT.NAME = CONTR.TARIFF.ACT.NAME
         BENCH.TARIFF = 0
         GOSUB CALL.TARIFF.DRIVER
         * End NKH08

         IF LOGISTICS THEN
            DIN<1,4>=BENCH.CLASSES
            DIN<1,7>=BENCH.TARIFF.ACT.NAME
            DIN<1,8>=BENCH.TARIFF.EFF.DATE
            DIN<1,9>=BENCH.TARIFF.FACTOR
            VIN='BOTH'
            VIN<2>='10000'               ; * Max Discount Weight
            VIN<3>=CLIENT                ; * JMK33
            VIN<4>=CARRIER               ; * JMK42
            VIN<5>='B'                   ; * JMK42
            * Begin NKH08
*            IF BENCH.TARIFF.DRIVER='MWB' THEN      ; * JMK01 ; * JMK31
*               IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'    ; * JMK31
*               DINNATT=DCOUNT(DIN,@AM)   ; * JMK22 ; * JMK25 ; * JMK26
*               FOR DINATT=1 TO DINNATT   ; * JMK22 ; * JMK25 ; * JMK26
*                  DIN<DINATT,7>=AFS.TARIFF.NAME    ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
*               NEXT DINATT               ; * JMK22 ; * JMK25 ; * JMK26
*               CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)    ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK41
*            END ELSE
*               CALL @BENCH.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK41 ; * JMK76
*            END

            TARIFF.ACT.NAME = BENCH.TARIFF.ACT.NAME
            BENCH.TARIFF = 1
            GOSUB CALL.TARIFF.DRIVER
            * End NKH08

         END
      END
      IF LOGISTICS AND TOT.WEIGHT LT 25000 THEN
         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
            DIN<1,4>='50'
            IF CUR.WEIGHT < 25000 THEN
               DIN<1,5>='25000'
            END ELSE
               DIN<1,5>=CUR.WEIGHT
            END
            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS52502' ELSE AFS.TARIFF.NAME='AFS50002'   ; * JMK31   NKH14
            DINNATT=DCOUNT(DIN,@AM)      ; * JMK22 ; * JMK25 ; * JMK26
            FOR DINATT=1 TO DINNATT      ; * JMK22 ; * JMK25 ; * JMK26
               DIN<DINATT,7>=AFS.TARIFF.NAME       ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
            NEXT DINATT                  ; * JMK22 ; * JMK25 ; * JMK26
            CRT @(0,23):"STOP AND CALL GREG !!!!"
            CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)   ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK41
            CAP.DOUT=DOUT<1>
         END
      END
      FLAT.RATE=0                        ; * JMK20
      CONTR.CHRG=''                      ; * JMK24
      BENCH.CHRG=''                      ; * JMK24
      FLAT.ROUTE='INTER'                 ; * JMK21
      IF ORIG.STATE=DEST.STATE THEN      ; * JMK21
         FLAT.ROUTE='INTRA'              ; * JMK21
      END                                ; * JMK21
      IF NOT(JL.FLAG) THEN
         IF DAUDIT.TABLES<55>#'' THEN    ; * JMK20
            FT.NVAL=DCOUNT(DAUDIT.TABLES<55>,@VM)  ; * JMK20
            FOR FT.VAL=1 TO FT.NVAL      ; * JMK20
               BEG.WT=DAUDIT.TABLES<55,FT.VAL>     ; * JMK20
               END.WT=DAUDIT.TABLES<56,FT.VAL>     ; * JMK20
               INTRA.CONTR.CHRG=DAUDIT.TABLES<57,FT.VAL>     ; * JMK20 ; * JMK21
               INTRA.BENCH.CHRG=DAUDIT.TABLES<58,FT.VAL>     ; * JMK20 ; * JMK21
               INTER.CONTR.CHRG=DAUDIT.TABLES<59,FT.VAL>     ; * JMK21
               INTER.BENCH.CHRG=DAUDIT.TABLES<60,FT.VAL>     ; * JMK21
               IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN   ; * JMK20
                  FLAT.VALID=0           ; * JMK24
                  BEGIN CASE             ; * JMK24
                     CASE FLAT.ROUTE='INTER'       ; * JMK24
                        IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                        IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                     CASE FLAT.ROUTE='INTRA'       ; * JMK24
                        IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                        IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                     CASE 1              ; * JMK24
                  END CASE               ; * JMK24
                  IF FLAT.VALID THEN     ; * JMK24
                     FLAT.CONTR=0        ; * JMK24
                     FLAT.BENCH=0        ; * JMK24
                     IF FLAT.ROUTE='INTER' THEN    ; * JMK24
                        IF INTER.CONTR.CHRG+0#0 THEN         ; * JMK24
                           CONTR.CHRG=INTER.CONTR.CHRG       ; * JMK21
                           FLAT.CONTR=1  ; * JMK24
                        END              ; * JMK24
                        IF INTER.BENCH.CHRG+0#0 THEN         ; * JMK24
                           BENCH.CHRG=INTER.BENCH.CHRG       ; * JMK21
                           FLAT.BENCH=1  ; * JMK24
                        END              ; * JMK24
                     END                 ; * JMK24
                     IF FLAT.ROUTE='INTRA' THEN    ; * JMK21
                        IF INTRA.CONTR.CHRG+0#0 THEN         ; * JMK24
                           CONTR.CHRG=INTRA.CONTR.CHRG       ; * JMK21
                           FLAT.CONTR=1  ; * JMK24
                        END              ; * JMK24
                        IF INTRA.BENCH.CHRG+0#0 THEN         ; * JMK24
                           BENCH.CHRG=INTRA.BENCH.CHRG       ; * JMK21
                           FLAT.BENCH=1  ; * JMK24
                        END              ; * JMK24
                     END                 ; * JMK21
                     IF FLAT.CONTR THEN  ; * JMK24
                        CONTR.FLAT=''    ; * JMK20
                        CONTR.FLAT<1,1>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,2>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,3>='FLATRATE'           ; * JMK20
                        CONTR.FLAT<1,4>=TOT.WEIGHT           ; * JMK20
                        CONTR.FLAT<1,5>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK20
                        CONTR.DOUT<1,3>='FLATRATE'           ; * JMK20
                        CONTR.DOUT<1,5>=CONTR.CHRG           ; * JMK20
                     END                 ; * JMK24
                     IF LOGISTICS THEN   ; * JMK20
                        IF FLAT.BENCH THEN         ; * JMK24
                           BENCH.FLAT=''           ; * JMK20
                           BENCH.FLAT<1,1>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,2>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,3>='FLATRATE'        ; * JMK20
                           BENCH.FLAT<1,4>=TOT.WEIGHT        ; * JMK20
                           BENCH.FLAT<1,5>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,6>=END.WT:' LB Flat rate'      ; * JMK20
                           BENCH.DOUT<1,3>='FLATRATE'        ; * JMK20
                           BENCH.DOUT<1,5>=BENCH.CHRG        ; * JMK20
                        END              ; * JMK24
                     END
                     FLAT.RATE=1         ; * JMK20
                  END                    ; * JMK24
               END                       ; * JMK20
            NEXT FT.VAL                  ; * JMK20
         END                             ; * JMK20
      END
      IF JL.FLAG THEN                    ; * JMK44
         IF JL.DAUDIT.TABLES<55>#'' THEN           ; * JMK44
            FT.NVAL=DCOUNT(JL.DAUDIT.TABLES<55>,@VM)         ; * JMK44
            FOR FT.VAL=1 TO FT.NVAL      ; * JMK44
               BEG.WT=JL.DAUDIT.TABLES<55,FT.VAL>  ; * JMK44
               END.WT=JL.DAUDIT.TABLES<56,FT.VAL>  ; * JMK44
               INTRA.CONTR.CHRG=JL.DAUDIT.TABLES<57,FT.VAL>  ; * JMK44
               INTRA.BENCH.CHRG=JL.DAUDIT.TABLES<58,FT.VAL>  ; * JMK44
               INTER.CONTR.CHRG=JL.DAUDIT.TABLES<59,FT.VAL>  ; * JMK44
               INTER.BENCH.CHRG=JL.DAUDIT.TABLES<60,FT.VAL>  ; * JMK44
               IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN   ; * JMK44
                  FLAT.VALID=0           ; * JMK44
                  BEGIN CASE             ; * JMK44
                     CASE FLAT.ROUTE='INTER'       ; * JMK44
                        IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK44
                        IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK44
                     CASE FLAT.ROUTE='INTRA'       ; * JMK44
                        IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK44
                        IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK44
                     CASE 1              ; * JMK44
                  END CASE               ; * JMK44
                  IF FLAT.VALID THEN     ; * JMK44
                     FLAT.CONTR=0        ; * JMK44
                     FLAT.BENCH=0        ; * JMK44
                     IF FLAT.ROUTE='INTER' THEN    ; * JMK44
                        IF INTER.CONTR.CHRG+0#0 THEN         ; * JMK44
                           CONTR.CHRG=INTER.CONTR.CHRG       ; * JMK44
                           FLAT.CONTR=1  ; * JMK44
                        END              ; * JMK44
                        IF INTER.BENCH.CHRG+0#0 THEN         ; * JMK44
                           BENCH.CHRG=INTER.BENCH.CHRG       ; * JMK44
                           FLAT.BENCH=1  ; * JMK44
                        END              ; * JMK44
                     END                 ; * JMK44
                     IF FLAT.ROUTE='INTRA' THEN    ; * JMK44
                        IF INTRA.CONTR.CHRG+0#0 THEN         ; * JMK44
                           CONTR.CHRG=INTRA.CONTR.CHRG       ; * JMK44
                           FLAT.CONTR=1  ; * JMK44
                        END              ; * JMK44
                        IF INTRA.BENCH.CHRG+0#0 THEN         ; * JMK44
                           BENCH.CHRG=INTRA.BENCH.CHRG       ; * JMK44
                           FLAT.BENCH=1  ; * JMK44
                        END              ; * JMK44
                     END                 ; * JMK44
                     IF FLAT.CONTR THEN  ; * JMK44
                        CONTR.FLAT=''    ; * JMK44
                        CONTR.FLAT<1,1>=CONTR.CHRG           ; * JMK44
                        CONTR.FLAT<1,2>=CONTR.CHRG           ; * JMK44
                        CONTR.FLAT<1,3>='FLATRATE'           ; * JMK44
                        CONTR.FLAT<1,4>=TOT.WEIGHT           ; * JMK44
                        CONTR.FLAT<1,5>=CONTR.CHRG           ; * JMK44
                        CONTR.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK44
                        CONTR.DOUT<1,3>='FLATRATE'           ; * JMK44
                        CONTR.DOUT<1,5>=CONTR.CHRG           ; * JMK44
                     END                 ; * JMK44
                     IF LOGISTICS THEN   ; * JMK44
                        IF FLAT.BENCH THEN         ; * JMK44
                           BENCH.FLAT=''           ; * JMK44
                           BENCH.FLAT<1,1>=BENCH.CHRG        ; * JMK44
                           BENCH.FLAT<1,2>=BENCH.CHRG        ; * JMK44
                           BENCH.FLAT<1,3>='FLATRATE'        ; * JMK44
                           BENCH.FLAT<1,4>=TOT.WEIGHT        ; * JMK44
                           BENCH.FLAT<1,5>=BENCH.CHRG        ; * JMK44
                           BENCH.FLAT<1,6>=END.WT:' LB Flat rate'      ; * JMK44
                           BENCH.DOUT<1,3>='FLATRATE'        ; * JMK44
                           BENCH.DOUT<1,5>=BENCH.CHRG        ; * JMK44
                        END              ; * JMK44
                     END                 ; * JMK44
                     FLAT.RATE=1         ; * JMK44
                  END                    ; * JMK44
               END                       ; * JMK44
            NEXT FT.VAL                  ; * JMK44
         END                             ; * JMK44
      END                                ; * JMK44


      * Verify Contract Bill Type
      IF CONTR.DOUT<1,10>#'' THEN
         IF CONTR.DOUT<1,10>='0202' THEN
            CALL ELINE('Error Rating engine obsolete for this tariff. Cannot rate')
         END ELSE
            CALL ELINE("Error Code '":CONTR.DOUT<1,10>:"' returned on Contract Rating")
         END
         CC+=1
         AUDIT='U'
         GOSUB 8000
         GO 800
      END
      IF LOGISTICS AND BENCH.DOUT<1,10>#'' THEN
         IF BENCH.DOUT<1,10>='0202' THEN
            CALL ELINE('Error Rating engine obsolete for this tariff. Cannot rate')
         END ELSE
            CALL ELINE("Error Code '":BENCH.DOUT<1,10>:"' returned on Benchmark Rating")
         END
         CC+=1
         AUDIT='U'
         GOSUB 8000
         GO 800
      END
      CONTR.BILL.TYPE=CONTR.DOUT<1,3>
      BEGIN CASE
         CASE CONTR.BILL.TYPE='FLATRATE'           ; * JMK20
         CASE CONTR.BILL.TYPE='MINIMUM'
         CASE CONTR.BILL.TYPE='ACTUAL'
         CASE CONTR.BILL.TYPE='DEFICIT'
         CASE CONTR.BILL.TYPE='NOTRATED'
            CALL ELINE("Contract Side of Bill Not Rated by ":CONTR.TARIFF.ACT.NAME:" Return Bill to Audit")
            CC+=1
            AUDIT='U'
            GOSUB 8000
            GO 800
         CASE 1
            IF RWS.TIMES<3 THEN          ; * JMK23 ; * JMK27 ; * JMK29 ; * JMK36
               SLEEP 1                   ; * JMK23
               RWS.TIMES+=1              ; * JMK23
               GO 1000                   ; * JMK23
            END                          ; * JMK23
            CALL ELINE("Error 104 Improper CONTR.BILL.TYPE of '":CONTR.BILL.TYPE:"'  Call Programmer!")
            CC+=1
            GO 1000                      ; * Send Again & Lock into loop
      END CASE
      IF CONTR.BILL.TYPE='DEFICIT' THEN
         DEFICIT.WEIGHT=CONTR.DOUT<1,7>
      END ELSE DEFICIT.WEIGHT=0
      DISC.WEIGHT=TOT.WEIGHT+DEFICIT.WEIGHT
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CONTR.DISC.ATT=1
      END ELSE
         IF DISC.WEIGHT < 500 THEN CONTR.DISC.ATT=2 ELSE CONTR.DISC.ATT=3
      END

      * Verify Benchmark Bill Type
      BENCH.BILL.TYPE=BENCH.DOUT<1,3>
      IF LOGISTICS THEN
         BEGIN CASE
            CASE BENCH.BILL.TYPE='FLATRATE'        ; * JMK20
            CASE BENCH.BILL.TYPE='CSMMINIMUM'      ; * JMK17
            CASE BENCH.BILL.TYPE='MINIMUM'
            CASE BENCH.BILL.TYPE='ACTUAL'
            CASE BENCH.BILL.TYPE='DEFICIT'
            CASE BENCH.BILL.TYPE='NOTRATED'
               CALL ELINE("Benchmark Side of Bill Not Rated by ":BENCH.TARIFF.ACT.NAME:" Return Bill to Audit")
               CC+=1
               AUDIT='U'
               GOSUB 8000
               GO 800
            CASE 1
               IF RWS.TIMES<3 THEN       ; * JMK23 ; * JMK27 ; * JMK29 ; * JMK36
                  SLEEP 1                ; * JMK23
                  RWS.TIMES+=1           ; * JMK23
                  GO 1000                ; * JMK23
               END                       ; * JMK23
               CALL ELINE("Error 105 Improper BENCH.BILL.TYPE of '":BENCH.BILL.TYPE:"'  Call Programmer!")
               CC+=1
               GO 1000                   ; * Send Again & Lock into loop
         END CASE
         IF BENCH.BILL.TYPE='DEFICIT' THEN         ; * JMK47
            BENCH.DEF.WEIGHT=BENCH.DOUT<1,7>       ; * JMK47
         END ELSE BENCH.DEF.WEIGHT=0     ; * JMK47
         BENCH.DEF.WEIGHT=0              ; * JMK47
         TOT.WEIGHT=SUM(CLASS.WGT<2>)    ; * JMK47
         BENCH.DISC.WEIGHT=TOT.WEIGHT+BENCH.DEF.WEIGHT       ; * JMK47
         BEGIN CASE                      ; * JMK47
            CASE BENCH.BILL.TYPE='MINIMUM'         ; * JMK47
               BENCH.DISC.ATT=1          ; * JMK47
            CASE BENCH.DISC.WEIGHT<500   ; * JMK47
               BENCH.DISC.ATT=2          ; * JMK47
            CASE 1                       ; * JMK47
               BENCH.DISC.ATT=3          ; * JMK47
         END CASE                        ; * JMK47
      END
      * Begin GRB11
      IF TEMPO.CLIENT.FLG THEN
         GOSUB WHY.CALCS2
         GOTO 4888
      END ELSE
         GOSUB WHY.CALCS
      END
      *End GRB11
      IF IOT = "T" THEN                  ; *****************************
         TP.WHY.TAB<TP.CNT> = WHY
         * Begin GRB07
*         TP.CLIENT.COST = ''       ; * NKH03
*         TP.QUOTE.AMT = ''         ; * NKH03
*         TP.GTOT.CONTR.AMT = ''    ; * NKH03
*         TP.GTOT.BENCH.AMT = ''    ; * NKH03
*         TP.CONSULTING.AMT = ''    ; * NKH03
         **     TP.CLIENT.COST<TP.CNT> = CLIENT.COST
         **     TP.CONSULTING.AMT<TP.CNT> = CONSULTING.AMT
         * End GRB07
         TP.QUOTE.AMT<TP.CNT> = QUOTE.AMT
         TP.GTOT.CONTR.AMT<TP.CNT> = GTOT.CONTR.AMT
         TP.GTOT.BENCH.AMT<TP.CNT> = GTOT.BENCH.AMT

         * Begin NKH07
         * For old third party use multivalue 1 [origination zip code]
         IF TP.CNT LT "1" THEN
*         IF TP.CNT LT "2" THEN
            * End NKH07
            TP.CNT += 1
            GOTO 575
         END ELSE
            IF TP.AMT.TAB<1> GT TP.AMT.TAB<2> THEN
               WHY = TP.WHY.TAB<1>
               CLIENT.COST = TP.CLIENT.COST<1>
               QUOTE.AMT = TP.QUOTE.AMT<1>
               GTOT.CONTR.AMT = TP.GTOT.CONTR.AMT<1>
               GTOT.BENCH.AMT = TP.GTOT.BENCH.AMT<1>
               CONSULTING.AMT = TP.CONSULTING.AMT<1>
            END
         END
      END

*********************************************************************
4800: *
*********************************************************************
      FIRST.TIME=1
      IF USER.TYPE = 'A' THEN
         IF LOGISTICS THEN
            IF CAPACITY.LOAD THEN
               CRT @(0,21):REV.ON:'Capacity'
            END ELSE
               CRT @(0,21):'        '
            END
            CRT @(6,21):GTOT.BENCH.AMT'R26#9'
            CRT @(24,21):(GTOT.BENCH.AMT-GTOT.CONTR.AMT)'R26#8'
            IF PROG.MODE=4 AND AUDIT='Y' AND USER.TYPE='A' THEN
               CARRIER.CHG=AMT.ON.BILL+GTOT.BENCH.AMT-GTOT.CONTR.AMT
               CRT @(6,19):CARRIER.CHG'R26#9'
               CRT @(24,19):(GTOT.BENCH.AMT-GTOT.CONTR.AMT)'R26#8'
            END
         END ELSE
            CRT @(6,21):GTOT.CONTR.AMT'R26#9'
         END
         CRT @(15,21):GTOT.CONTR.AMT'R26#9'
         IF CAPACITY.LOAD THEN
            CRT @(32,21):REV.OFF
         END
      END
4888:                                    ; * GRB11
      IF TEMPO.CLIENT.FLG AND USER.TYPE = 'A' THEN           ; * NKH26
         RTOTAL = ICONV(TTOTAL,"MD2")    ; * NKH26
         CRT @(6,21):OCONV(RTOTAL,"MD2")"R#9"      ; * NKH26
         CRT @(15,21):OCONV(RTOTAL,"MD2")"R#9"     ; * NKH26
         GTOT.CONTR.AMT=RTOTAL           ; * NKH26
      END                                ; * NKH26

      IF PROG.MODE='2' OR PROG.MODE='3' OR (USER.TYPE='A' AND PROG.MODE='4' AND AUDIT='Y') THEN
         HELP='[1]=OLA, [2]=Data, [3]=Entr Chrgs, [4]=Change, [5]=Audit Scr, [6]=Ovrd Det'           ; * SWB01
         IF ORIGNAL.CLASS.WGT#CLASS.WGT THEN
            HELP='[1]=OLA, [3]=Enter Charges, [4]=Change, [5]=Audit Scr, [6]=Ovrd Det'     ; * SWB01
         END
         *Begin GRB06
*****             IF FB.NOTE # '' THEN
*****               HELP = CONVERT(" ","",HELP)
*****                   HELP=HELP:', [N]ote'
*****                 END
         * End GRB06
         IF CAPACITY.LOAD THEN HELP=HELP:' [7]=Rmv Capacity'           ; * SWB01
         CALL GEN.IN(0,22,'Enter [A] to accept these amounts --','',Q,0,2,'','',2,-2,22,0,QI,HELP,0,23)
         CC+=LEN(QI)+1
         QI = OCONV(QI,'MCU')
         IF QI='X' THEN
            CRT @(0,22):@(-3)
            GO 800
         END
         IF QI='EX' THEN
            X.EX.FLAG='EX'
            GO 9000
         END

         IF QI='Y' OR QI='5' THEN
            CRT @(0,22)
            ***    PRINT        ;* GRB11
            ***    PRINT        ;* GRB11

            PRINT WHY:
            CRT @(0,22):"Press <Enter> to Continue: ":
            INPUT NUL:
            QI=''                        ; * Act as if null Was Entered
            GOSUB 8100
            GO 4800
         END
         IF QI='3' THEN
            AUDIT='S'
            AMT.TO.PAY=''
            AMT.ON.BILL=''
            OVERCHARGE.AMT=''
            LOGISTICS.AMT=''
            GOSUB 8000
            GOTO 9000
         END
         IF QI='4' THEN
            CRT @(0,22):@(-3)
            CHANGE.MODE=1
            IF IOT='T' THEN              ; * JMK49
               TP.WHY.TAB = ""           ; * JMK49
               TP.AMT.TAB = ""           ; * JMK49
               TP.TABLE.TAB = TABLE      ; * JMK49
               TP.TABLE.TAB<2> = DEST.TABLE        ; * JMK49
               TP.CLIENT.COST = ""       ; * JMK49
               TP.QUOTE.AMT = ""         ; * JMK49
               QUOTE.AMT = 0             ; * JMK49
               TP.GTOT.CONTR.AMT = ""    ; * JMK49
               TP.GTOT.BENCH.AMT = ""    ; * JMK49
               TP.CONSULTING.AMT = ""    ; * JMK49
               TP.CNT = 1                ; * JMK49
            END                          ; * JMK49
            CAPACITY.LOAD=0
            GO 590
         END
         IF QI='2' THEN
            IF ORIGNAL.CLASS.WGT#CLASS.WGT THEN
               CALL ELINE('Option 2 is not valid as a change has been made')
               GO 4800
            END
            CRT @(0,21):@(-3)
            IF CARRIER.CHG+0#0 THEN
               LOGISTICS.AMT=CARRIER.CHG-AMT.ON.BILL
               IF LOGISTICS.AMT<0 THEN
                  LOGISTICS.AMT=0
               END
            END
            GO 9000
         END
         IF QI='A' OR QI = '1' THEN
            IF LOGISTICS THEN
               LOGISTICS.AMT=GTOT.BENCH.AMT-GTOT.CONTR.AMT
            END ELSE
               LOGISTICS.AMT=0
            END
            AMT.ON.BILL=ORIG.AMT.ON.BILL
            OVERCHARGE.AMT=AMT.ON.BILL-GTOT.CONTR.AMT
            IF OVERCHARGE.AMT < 0 THEN
               OVERCHARGE.AMT=0
            END ELSE
               AMT.TO.PAY=GTOT.CONTR.AMT
            END
            CRT @(0,22):@(-3)
            GO 9000
         END
         IF QI='6' THEN
            READ OVERRIDE.FIELDS FROM F.TABLES, 'OVERRIDE.FIELDS' ELSE OVERRIDE.FIELDS = ''          ; * SWB01
            OVR.LIST='Orig':SPACE(5):'New'         ; * SWB01
            OVR.LIST<-1>='Stack':SPACE(3):'Stack':SPACE(3):'Field':SPACE(6):'Optr':SPACE(3):'Information'      ; * SWB01
            OVR.LINES=DCOUNT(OVR.FIELDS,@VM)       ; * SWB01
            FOR OL=1 TO OVR.LINES        ; * SWB01
               OVR.FIELD=OVR.FIELDS<1,OL>          ; * SWB01
               INFO=OVR.INFO<1,OL>       ; * SWB01
               LOCATE OVR.FIELD IN OVERRIDE.FIELDS<1> SETTING V.POS THEN         ; * SWB01
                  TYPE=OVERRIDE.FIELDS<4,V.POS>    ; * SWB01
                  IF TYPE='R%5' THEN     ; * SWB01
                     INFO=INFO TYPE      ; * SWB01
                  END ELSE               ; * SWB01
                     INFO=OCONV(INFO,TYPE)         ; * SWB01
                  END                    ; * SWB01
               END                       ; * SWB01
               OVR.LIST<-1>=SPACE(2):ORIG.STACK'L#3':SPACE(5):NEW.STACK'L#3':SPACE(3):OVR.FIELD'L#8':SPACE(3):OVR.OPTRS<1,OL>'L#4':SPACE(3):INFO'L#20'           ; * SWB01
            NEXT OL                      ; * SWB01
            OVR.LIST<-1>= ' '            ; * SWB01
            OVR.LIST<-1>= ' '            ; * SWB01
            TITLE='Override Details'     ; * SWB01
            PRMPT=TITLE                  ; * SWB01
            WIDTH=55                     ; * SWB01
            HEIGHT=DCOUNT(OVR.LIST,@FM)  ; * SWB01
            FIXED=2
            DELIM=@FM                    ; * SWB01
            SELECTION=1                  ; * SWB01
            CALL ATLISTBOX(TITLE, PRMPT, OVR.LIST, WIDTH, HEIGHT, FIXED, DELIM, SELECTION)           ; * SWB01
            GO 4800                      ; * SWB01
         END                             ; * SWB01
         IF QI='7' THEN                  ; * SWB01
            IF CAPACITY.LOAD ELSE
               CALL ELINE('Option 7 is not valid as no capacity load was calculated')      ; * SWB01
               GO 4800
            END
            CHECK.FOR.CAPACITY=0
            CAPACITY.LOAD=0
            GO 1000
         END
         *Begin GRB06
*****            IF QI='N' THEN
*****              CALL FB.2.1.NOTES(FB.NOTE,QI,0)
*****              GOSUB 6000
*****              GOSUB 7000
*****            END
         * End GRB06
         CALL ELINE('Invalid entry')
         GO 4800
      END

*********************************************************************
1300: * Get Carrier Charge Amount
*********************************************************************
      IF FIRST.TIME THEN
         HELP="Enter Carrier Charge (Amount To Be Paid on Freight Bill)"
         FLAT.RATE.CHANGE=0
      END ELSE
         HELP="Re-Enter Carrier Charge (Amount To Be Paid on Freight Bill)"
      END
      IF AMT.ON.BILL='' THEN REQ=1 ELSE REQ =0
      MASK=AMT.ON.BILL
      IF MASK#'' THEN MASK=MASK'R26#8'
      CALL GEN.IN(16,19,MASK,'AMT2',Q,REQ,8,'','',2,16,19,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      QI = OCONV(QI,'MCU')
      IF QI='X' THEN
         CRT @(16,19):AMT.ON.BILL'R26#8'
         GO 800
      END
      IF QI='EX' THEN
         X.EX.FLAG='EX'
         GO 9000
      END
      IF QI[LEN(QI),1]='+' THEN
         IF FIRST.TIME THEN
            FLAT.RATE=1
         END ELSE
            IF FLAT.RATE THEN
               FLAT.RATE.CHANGE=0
            END ELSE
               FLAT.RATE=1
               FLAT.RATE.CHANGE=1
            END
         END
         QI=QI[1,LEN(QI)-1]
      END ELSE
         IF QI#'' THEN
            IF FLAT.RATE THEN
               FLAT.RATE.CHANGE=1
               FLAT.RATE=0
            END ELSE
               FLAT.RATE.CHANGE=0
            END
         END
      END
      IF Q[LEN(Q),1]='+' THEN Q=Q[1,LEN(Q)-1]
      IF Q='' THEN Q=AMT.ON.BILL ; QI=AMT.ON.BILL
      IF NOT(NUM(QI)) THEN
         CALL ELINE('Must be a number 0 or greater')
         CC+=1
         GO 1300
      END
      IF QI < 0 THEN
         CALL ELINE('Must be a number 0 or greater')
         CC+=1
         GO 1300
      END
      IF QI = '0' THEN
         AUDIT='U'
         GOSUB 8000
*       MISROUTE=0
         * Why Set the misroute flag to 0 ??????
         GOTO 9000
      END

      IF Q GE "2000000" AND CARRIER # "00041" AND USER.TYPE#'A' THEN   ; * JMK74
         BEGIN CASE
            CASE FRT.FLAG                ; * SWB02
            CASE USER='FPMGR'
*           CASE USER='DAVID'            ; * DF
*           CASE USER='MARY'             ; * SWB02
            CASE USER='KRISTY'
            CASE USER='BRIAN'
            CASE 1
               CALL ELINE("Only FPMGR can enter bills 20,000 and above.")        ; * JMK74
               GOTO 1300
         END CASE
         CALL ELINE("Warning: Bills over 20,000 must be approved by FPMGR.")     ; * JMK74
      END
      IF USER.TYPE='A' THEN
         IF Q > ORIG.AMT.ON.BILL THEN
            CALL ELINE('Amount must be equal or less than the amount keyed by freight payment')
            CC+=1
            GO 1300
         END
      END
      AMT.ON.BILL=Q
      PRINT @(16,19):AMT.ON.BILL'R26#8':

*********************************************************************
1400: * Compare Calculated Charges to Entered Charges to see if OK
*********************************************************************

      IF NOT(TEMPO.CLIENT.FLG) THEN      ; * GRB11
         DIFFERENCE = GTOT.CONTR.AMT-AMT.ON.BILL
         IF LOGISTICS THEN
            LOGISTICS.AMT=GTOT.BENCH.AMT-GTOT.CONTR.AMT
            IF LOGISTICS.AMT<0 THEN
               CALL ELINE("Error! Benchmark Amount is LESS than Contract Amount")
               CC+=1
               GO 1300
            END
         END ELSE
            LOGISTICS.AMT=0
         END

         * Xpedx Fuel Sur Charge comparison logic
         IF XPEDX.CLIENT AND DIFFERENCE < 0 THEN
            * Only go in if amt billed is higher than GTOT.BENCH.AMT
            XPEDX.DIFF=AMT.ON.BILL-GTOT.CONTR.AMT
            IF XPEDX.DIFF=MISC.CHG<2,1>-CONTR.FSC.AMT THEN
               * The difference in the amounts is the Difference in the FSC
               AMT.TO.PAY=GTOT.CONTR.AMT
               OVERCHARGE.AMT=XPEDX.DIFF
               CUT.DESC='FSC Billed incorrectly per FSC Schedule of Rates per Xpedx Contract. Should be ':CONTR.FSC.PERC'R17':'%'
               CUT.CLASS='F'             ; * JMK43
               GO 9000
            END
         END
         IF ABS(DIFFERENCE) < 2 THEN
            AMT.TO.PAY=AMT.ON.BILL
            GTOT.CONTR.AMT=AMT.ON.BILL
            OVERCHARGE.AMT=0
            GOTO 9000
         END
         IF FIRST.TIME ELSE
            IF SAVE.CHARGE # AMT.ON.BILL OR FLAT.RATE.CHANGE THEN
               FIRST.TIME=1
            END
         END

         * Allow for One Penny Error in the CWT Rate
         WEIGHT.DISC=(TOT.WEIGHT+DEFICIT.WEIGHT)/100*CUR.CONTR.DISC/100
         CWT.ERROR.LIMIT=((TOT.WEIGHT+DEFICIT.WEIGHT)-WEIGHT.DISC)/100
         CWT.ERROR.LIMIT=CWT.ERROR.LIMIT'R0'
         IF ABS(DIFFERENCE) LE CWT.ERROR.LIMIT THEN
            AMT.TO.PAY=AMT.ON.BILL
            GO 9000
         END

         * Special Cases for Overcharge Amount Overrides
         CALL ELINE('Cannot Audit! Carrier Charge does not calculate')
         CC+=1
      END                                ; * GRB11
      GOSUB 8000
      IF QI#'' OR QI#'OK' THEN GOTO 9000
      FIRST.TIME=1
      GO 800

*********************************************************************
6000: * Display screen
*********************************************************************
      GOSUB CHECK.ADDRESS                ; * NKH24
      CALL FB.CLEAR.WINDOW
      CRT @(27,6):@(-4)
      CRT @(27,7):@(-4)
      CRT @(33,6):"|":@(78,6):"|":
      CRT @(33,07):STR('-',46):
      FOR OFFSET=0 TO 20 STEP 20
         CRT @(38+OFFSET,08):'Ln':
         CRT @(38+OFFSET,09):'--':
         CRT @(41+OFFSET,08):'Class':
         CRT @(41+OFFSET,09):'-----':
         CRT @(47+OFFSET,08):'Weight':
         CRT @(47+OFFSET,09):'------':
      NEXT OFFSET
      STARTLINE=18
      FOR OFFSET= 0 TO 23 STEP 23
         STARTLINE2 = STARTLINE - 1      ; * NPR08
         CRT @(34+OFFSET,STARTLINE2):'L':          ; * NPR08
         CRT @(34+OFFSET,STARTLINE2+1):'-':        ; * NPR08
         CRT @(36+OFFSET,STARTLINE2):'Code':       ; * NPR08
         CRT @(36+OFFSET,STARTLINE2+1):'----':     ; * NPR08
         CRT @(41+OFFSET,STARTLINE2):'Contr':      ; * NPR08
         CRT @(41+OFFSET,STARTLINE2+1):'-------':  ; * NPR08
         CRT @(49+OFFSET,STARTLINE2):'Bench':      ; * NPR08
         CRT @(49+OFFSET,STARTLINE2+1):'-------':  ; * NPR08
      NEXT OFFSET

*********************************************************************
7000: * Display Data on Audit Screen
*********************************************************************
      PRINT AUDIT.POS:AUDIT:
      PRINT @(5,7):(BILL.DATE'D2/')'L#8':
      PRINT @(5,8):IOT'L#2':
      IF ORIG.CITY # '' THEN
         DESC = ORIG.CITY:', ':ORIG.STATE
      END ELSE
         DESC = ORIG.STATE
      END
      CRT @(5,10):ORIG.ZIP ZIP.MASK:' ':DESC'L#25'
      IF DEST.CITY # '' THEN
         DESC = DEST.CITY:', ':DEST.STATE
      END ELSE
         DESC = DEST.STATE
      END
      CRT @(5,11):DEST.ZIP ZIP.MASK:' ':DESC'L#25'
      FOR X=1 TO 14
         PLINE=REM(X,7)
         IF PLINE=0 THEN PLINE=7
         PLINE=PLINE+9
         IF X < 8 THEN POFFSET=0 ELSE POFFSET=20
         IF CLASS.WGT<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(38+POFFSET,PLINE):SPACE(15):
            END ELSE
               PRINT @(38+POFFSET,PLINE):X'R%2':SPACE(13):
            END
         END ELSE
            PRINT @(38+POFFSET,PLINE):X'R(%2 )':   ; * Selection
            PRINT @(41+POFFSET,PLINE):CLASS.WGT<1,X>'R(#5 )':          ; * Class
            PRINT @(47+POFFSET,PLINE):CLASS.WGT<2,X>'R(#6 )':          ; * Weight
         END
      NEXT X

      FOR X=1 TO 6
         PLINE=REM(X,3)
         IF PLINE=0 THEN PLINE=3
         PLINE=PLINE+18
         IF X < 4 THEN POFFSET=0 ELSE POFFSET=23
         IF MISC.CHG<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(39+POFFSET,PLINE):SPACE(16):
            END ELSE
               PRINT @(34+POFFSET,PLINE):X'R%1':SPACE(18):
            END
         END ELSE

            * Begin NKH24
            BEGIN CASE
               CASE RES.FLAG = ''
                  PRINT @(36+POFFSET,PLINE):MISC.CHG<1,X>'L(#4 )':     ; * Charge Code
                  PRINT @(41+POFFSET,PLINE):MISC.CHG<2,X>'R26(#7 )':   ; * Contr Amount
                  PRINT @(48+POFFSET,PLINE):MISC.CHG<3,X>'R26(#7)':    ; * Bench Amount
               CASE MISC.CHG<1,X> = 'RES' AND RES.FLAG = 'E'
                  CRT REV.ON:@(36+POFFSET,PLINE):MISC.CHG<1,X>'L(#4 )':TERM.NORM:
                  CRT REV.ON:@(41+POFFSET,PLINE):MISC.CHG<2,X>'R26(#7 )':TERM.NORM:
                  CRT REV.ON:@(48+POFFSET,PLINE):MISC.CHG<3,X>'R26(#7)':TERM.NORM:
               CASE MISC.CHG<1,X> = 'RES' AND RES.FLAG # 'Y'
                  CRT RED.ON:@(36+POFFSET,PLINE):MISC.CHG<1,X>'L(#4 )':TERM.NORM:
                  CRT RED.ON:@(41+POFFSET,PLINE):MISC.CHG<2,X>'R26(#7 )':TERM.NORM:
                  CRT RED.ON:@(48+POFFSET,PLINE):MISC.CHG<3,X>'R26(#7)':TERM.NORM:
               CASE 1
                  PRINT @(36+POFFSET,PLINE):MISC.CHG<1,X>'L(#4 )':     ; * Charge Code
                  PRINT @(41+POFFSET,PLINE):MISC.CHG<2,X>'R26(#7 )':   ; * Contr Amount
                  PRINT @(48+POFFSET,PLINE):MISC.CHG<3,X>'R26(#7)':    ; * Bench Amount
            END CASE
            * End NKH24

*            PRINT @(34+POFFSET,PLINE):X'R(%1 )':   ; * Selection
*            IF MISC.CHG<1,X> = 'RES' AND RES.COM # 'RES' AND RES.COM > "" THEN         ; * NKH24
*               CRT RED.ON:@(36+POFFSET,PLINE):MISC.CHG<1,X>'L(#4 )':TERM.NORM:         ; * NKH24
*            END ELSE                                                                   ; * NKH24
*               PRINT @(36+POFFSET,PLINE):MISC.CHG<1,X>'L(#4 )':        ; * Charge Code
*            END                                                                        ; * NKH24
*            IF MISC.CHG<1,X> = 'RES' AND RES.COM # 'RES' AND RES.COM > "" THEN         ; * NKH24
*               CRT RED.ON:@(41+POFFSET,PLINE):MISC.CHG<2,X>'R26(#7 )':TERM.NORM:       ; * NKH24
*               CRT RED.ON:@(48+POFFSET,PLINE):MISC.CHG<3,X>'R26(#7)':TERM.NORM:
*            END ELSE                                                                   ; * NKH24
*               PRINT @(41+POFFSET,PLINE):MISC.CHG<2,X>'R26(#7 )':      ; * Contr Amount
*               PRINT @(48+POFFSET,PLINE):MISC.CHG<3,X>'R26(#7)':       ; * Bench Amount
*            END                                                                        ; * NKH24
         END
      NEXT X

      RETURN

*********************************************************************
8000: * Exit program or Retry
*********************************************************************
      HELP = ''
      CALL GEN.IN(0,22,'Press [Enter] to Continue:   ','',Q,0,3,'','',3,-2,22,0,QI,HELP,0,23)
      CC+=LEN(QI)+1
      QI = OCONV(QI,'MCU')
      CRT @(0,22):@(-4):
      IF OCONV(QI,'MCU')='WHY' OR QI='.' OR QI='+' THEN
         REDRAW.SCR='REDRAW'             ; ** Tell calling program to redraw screen

         * Controlled Screen Scroll
         CRT @(0,23)
         PRINT
         PRINT
         PRINT WHY:
         CRT @(0,23):"Press <Enter> to Continue: ":
         INPUT NUL:
         QI=''                           ; * Act as if null Was Entered
      END
      IF LOGISTICS AND AUTO.MISROUTE ELSE
         RETURN TO 9000
      END
      RETURN

*********************************************************************
8100: * Display screen
*********************************************************************
      CALL AFS.SCR.REFRESH(PROG.NAME, PROG.DESC, PACK.NAME, CO.NAME, TIME.DATE, 1)
      CRT SCREEN.DSP
      CRT DATA.DSP
      RETURN

*********************************************************************
WHY.CALCS:
*********************************************************************
      WHY=''
      DTL.VOUT=''                        ; * JMK06
      IF JL.FLAG THEN
         WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(57,01):'Rt Zip:':LOOKUP.ZIP:@(71,01):'Tbl#:JL':JL.TABLE
      END ELSE
         WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(57,01):'Rt Zip:':LOOKUP.ZIP:@(71,01):'Tbl#:':TABLE
      END
      WHY:=@(0,02):@(-3):'Origin : ':ORIG.ZIP:' ':ORIG.CITY:', ':ORIG.STATE:NULL
      WHY:=@(42,02):'Pro :':PRO.ID:NULL
      WHY:=@(0,03):'Dest   : ':DEST.ZIP:' ':DEST.CITY:', ':DEST.STATE:NULL
      WHY:=@(42,03):'User:':USER:' ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):NULL
      BEGIN CASE
         CASE IOT='I' ; IOT.WORDS='--IB---'
         CASE IOT='O' ; IOT.WORDS='--OB---'
         CASE IOT='T' ; IOT.WORDS='--TP---'
      END CASE
      WHY:=@(0,4):IOT.WORDS
      CONTR.STRING='|':STR('-',34):'|'
      L.CONTR.STRING=LEN(CONTR.STRING)
      CONTR.WORDS="Contract-":CONTR.TARIFF
      IF CDN.ROUTE THEN CONTR.WORDS=CHANGE(CONTR.WORDS,'AFS50002','AFS52502')    ; * NKH14
      L.CONTR.TARIFF=LEN(CONTR.WORDS)
      CONTR.START=INT((L.CONTR.STRING-L.CONTR.TARIFF)/2)
      CONTR.STRING[CONTR.START+1,L.CONTR.TARIFF]=CONTR.WORDS
      WHY:=@(7,4):CONTR.STRING:NULL
      IF LOGISTICS THEN
         BENCH.STRING='|':STR('-',33):'|'
         L.BENCH.STRING=LEN(BENCH.STRING)
         BENCH.WORDS="Benchmark-":BENCH.TARIFF
         IF CDN.ROUTE THEN BENCH.WORDS=CHANGE(BENCH.WORDS,'AFS50002','AFS52502')           ; * NKH14
         L.BENCH.TARIFF=LEN(BENCH.WORDS)
         BENCH.START=INT((L.BENCH.STRING-L.BENCH.TARIFF)/2)
         BENCH.STRING[BENCH.START+1,L.BENCH.TARIFF]=BENCH.WORDS
         WHY:=@(45,4):BENCH.STRING:NULL
      END
      WHY:=@(00,05):"Ln":NULL
      WHY:=@(03,05):"Bil":NULL
      WHY:=@(07,05):"Ctr":NULL
      WHY:=@(12,05):"Wgt":NULL
      WHY:=@(17,05):"Rate":NULL
      WHY:=@(23,05):"Charge":NULL
      WHY:=@(30,05):"Disc":NULL
      WHY:=@(37,05):"Amount":NULL
      IF LOGISTICS THEN
         WHY:=@(45,05):"Bch":NULL
         WHY:=@(50,05):"Wgt":NULL
         WHY:=@(55,05):"Rate":NULL
         WHY:=@(61,05):"Charge":NULL
         WHY:=@(68,05):"Disc":NULL
         WHY:=@(74,05):"Amount":NULL
      END
      CONTR.TIMES=DCOUNT(CONTR.DOUT<1,1>,@SVM)
      TIMES=DETAIL.TIMES
      IF CONTR.TIMES > TIMES THEN TIMES=CONTR.TIMES
      IF LOGISTICS THEN
         BENCH.TIMES=DCOUNT(BENCH.DOUT<1,1>,@SVM)
         IF BENCH.TIMES > TIMES THEN TIMES=BENCH.TIMES
      END
      LINE=5
      TOT.CONTR.DISC=0                   ; ** Contract Discount Accumulator
      TOT.BENCH.DISC=0                   ; ** Benchmark Discount Accumulator
      TOT.CAP.DISC=0
      FOR DET.CNT = 1 TO TIMES
         LINE=LINE+1
         WHY:=@(00,LINE):DET.CNT'R%2':NULL
         WHY:=@(02,LINE):CLASSES<1,DET.CNT>'R#4':NULL
         WHY:=@(06,LINE):CONTR.CLASSES<1,1,DET.CNT>'R#4':NULL
         WHY:=@(10,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
         WHY:=@(15,LINE):CONTR.DOUT<1,1,DET.CNT>'R26#6':NULL           ; * Contr Rate
         IF CONTR.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN           ; * Catch Zero Rates
            CALL ELINE("Error $0 Rate on Contract Calculations Line ":DET.CNT)
            CC+=1
            AUDIT='U'
            GOSUB 8000
            GO 800
         END
         CUR.CONTR.CHARGE=CONTR.DOUT<1,2,DET.CNT>
         CUR.CONTR.DISC=CONTR.DISC<CONTR.DISC.ATT,DET.CNT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
         CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Contr Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Contract Disc %
         WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL           ; * Amt (Chg-Disc Amt)
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='FRT'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=CONTR.CLASSES<1,1,DET.CNT>       ; * JMK06
         DTL.VOUT<3,NVAL+1>=WEIGHTS<1,DET.CNT>     ; * JMK06
         DTL.VOUT<4,NVAL+1>=CONTR.DOUT<1,1,DET.CNT>          ; * JMK06
         DTL.VOUT<5,NVAL+1>=ICONV(CUR.CONTR.AMT,'MR0')       ; * JMK06
         DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')     ; * JMK06
         IF LOGISTICS THEN
            WHY:=@(45,LINE):BENCH.CLASSES<1,1,DET.CNT>'R#3':NULL
            WHY:=@(48,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
            WHY:=@(53,LINE):BENCH.DOUT<1,1,DET.CNT>'R26#6':NULL        ; * Rate
            IF BENCH.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN        ; * Catch Zero Rates
               CALL ELINE("Error $0 Rate on Benchmark Calculations Line ":DET.CNT)
               CC+=1
               AUDIT='U'
               GOSUB 8000
               GO 800
            END
            CUR.BENCH.CHARGE=BENCH.DOUT<1,2,DET.CNT>
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Charge
            CUR.BENCH.DISC=BENCH.DISC<BENCH.DISC.ATT,DET.CNT>          ; * JMK47
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Bench Amount (Chg-Disc Amt)
         END
      NEXT DET.CNT
      IF CONTR.BILL.TYPE='DEFICIT' OR BENCH.BILL.TYPE='DEFICIT' THEN
         LINE=LINE+1
         IF CONTR.BILL.TYPE='DEFICIT' THEN
            CUR.CONTR.CHARGE=CONTR.DOUT<1,9>
            CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
            CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
            TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
            CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
            WHY:=@(3,LINE):'DEFICIT':NULL
            WHY:=@(10,LINE):CONTR.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(15,LINE):CONTR.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
            NVAL=DCOUNT(DTL.VOUT<1>,@VM)           ; * JMK06
            DTL.VOUT<1,NVAL+1>='DEF'     ; * JMK06
            DTL.VOUT<2,NVAL+1>=''        ; * JMK06
            DTL.VOUT<3,NVAL+1>=CONTR.DOUT<1,7>     ; * JMK06
            DTL.VOUT<4,NVAL+1>=CONTR.DOUT<1,8>     ; * JMK06
            DTL.VOUT<5,NVAL+1>=ICONV(CUR.CONTR.AMT,'MR0')    ; * JMK06
            DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')  ; * JMK06
         END
         IF BENCH.BILL.TYPE='DEFICIT' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,9>
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK47
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(48,LINE):BENCH.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(53,LINE):BENCH.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
         END
      END
      IF CONTR.BILL.TYPE='FLATRATE' OR BENCH.BILL.TYPE='FLATRATE' THEN           ; * JMK20
         LINE=LINE+1                     ; * JMK20
         IF CONTR.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.CONTR.CHARGE=CONTR.FLAT<1,5>       ; * JMK20
            CUR.CONTR.AMT=CONTR.FLAT<1,5>          ; * JMK20
            TOT.CONTR.DISC=0             ; * JMK20
            WHY:=@(3,LINE):CONTR.FLAT<1,6>:NULL    ; * JMK20
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * JMK20
         END                             ; * JMK20
         IF BENCH.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.BENCH.CHARGE=BENCH.FLAT<1,5>       ; * JMK20
            CUR.BENCH.AMT=BENCH.FLAT<1,5>          ; * JMK20
            TOT.BENCH.DISC=0             ; * JMK20
            WHY:=@(45,LINE):BENCH.FLAT<1,6>:NULL   ; * JMK24
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * JMK20
         END                             ; * JMK20
      END                                ; * JMK20
      LINE=LINE+1
      WHY:=@(0,LINE):'BILL TOTAL':NULL
      WHY:=@(10,LINE):CONTR.DOUT<1,4>'R#5':NULL    ; * Total Weight
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CUR.CONTR.CHARGE=CONTR.DOUT<1,5>
         CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC=CUR.CONTR.DISC.AMT
         WHY:=@(15,LINE):"TMIN"'R#6':NULL
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Tariff Minimum Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Disc (on Lowest Class)
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='MIN'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=CONTR.CLASSES<1,1,DET.CNT>       ; * JMK06
         DTL.VOUT<3,NVAL+1>=WEIGHTS<1,DET.CNT>     ; * JMK06
         DTL.VOUT<4,NVAL+1>='TMIN'       ; * JMK06
         DTL.VOUT<5,NVAL+1>=CUR.CONTR.CHARGE       ; * JMK06
         DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')     ; * JMK06
      END ELSE
         WHY:=@(21,LINE):CONTR.DOUT<1,5>'R26#8':NULL         ; * Total Charges
      END


      TOT.CONTR.AMT=CONTR.DOUT<1,5>-OCONV((TOT.CONTR.DISC/10000),'MR0')
      TOT.BENCH.AMT=TOT.CONTR.AMT        ; * JMK14
      WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
      IF LOGISTICS THEN
         WHY:=@(48,LINE):BENCH.DOUT<1,4>'R#5':NULL           ; * Total Weight
         IF BENCH.BILL.TYPE='MINIMUM' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,5>
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK47
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC=CUR.BENCH.DISC.AMT
            WHY:=@(53,LINE):"TMIN"'R#6':NULL
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Tariff Minimum Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; *Disc (on Lowest Class)
         END ELSE
            WHY:=@(59,LINE):BENCH.DOUT<1,5>'R26#8':NULL      ; * Total Charges
         END
         TOT.BENCH.AMT=BENCH.DOUT<1,5>-OCONV((TOT.BENCH.DISC/10000),'MR0')
         WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL

         IF CHECK.FOR.CAPACITY THEN
            IF USER='DAVID' THEN CALL ELINE('CAP CONTRACT')
            IF CAP.DOUT#'' THEN
               CUR.CAP.CHARGE=CAP.DOUT<1,2>
               CUR.CAP.DISC=5000
               CUR.CAP.DISC.AMT=CUR.CAP.CHARGE*CUR.CAP.DISC
               TOT.CAP.DISC+=CUR.CAP.DISC.AMT
               TOT.CAP.AMT=CUR.CAP.CHARGE-OCONV((CUR.CAP.DISC.AMT/10000),'MR0')
               IF TOT.CAP.AMT < TOT.CONTR.AMT THEN
                  LINE=LINE+2
                  WHY:=@(3,LINE):'CAPACITY':NULL
                  IF CUR.WEIGHT < 25000 THEN
                     WHY:=@(10,LINE):'25000':NULL  ; * Capacity Weight
                  END ELSE
                     WHY:=@(10,LINE):CUR.WEIGHT'R#5':NULL    ; * Capacity Weight
                  END
                  WHY:=@(15,LINE):CAP.DOUT<1,1>'R26#6':NULL  ; * Capacity Rate
                  WHY:=@(21,LINE):CUR.CAP.CHARGE'R26#8':NULL           ; * Capacity Charge
                  WHY:=@(29,LINE):CUR.CAP.DISC'R26#6':NULL   ; * Capacity Disc (Disc on Lowest Class)
                  WHY:=@(35,LINE):TOT.CAP.AMT'R26#8':NULL    ; * Capacity Amt (Def Chg-Def Disc Amt)
                  TOT.CONTR.AMT=TOT.CAP.AMT
                  CAPACITY.LOAD=0
*DF                  CAPACITY.LOAD=1     ; * DRF14
                  MVIN=''
                  SUBJ='Bill has a capacity load'
                  TEXT=USER:' entered a bill that has a capacity load date '
                  TEXT<1,-1>='on ':DATE()'D2/':' ':OCONV(TIME(),'MTHS')
                  TEXT<1,-1>='Client ':CLIENT:'  Carrier ':CARRIER:' Pro ':PRO.ID
                  MVIN=''
                  MVIN<1>='DFriend@afs.net'
                  IF USER.TYPE='A' THEN  ; * NPR16
                     MVIN<2>='WPardue@afs.net'
                  END                    ; * NPR16
                  MVIN<4>='AFS'
                  MVIN<5>=SUBJ
                  MVIN<6>=TEXT
               END
            END
         END
      END
      IF TOT.CONTR.AMT+0=0 THEN
         CALL ELINE("Contract Side of Bill Not Rated, Try an adjacent zip code")
         CC+=1
         AUDIT='U'
         GOSUB 8000
         GO 800
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT+0=0 THEN
            ERROR=("Benchmark Side of Bill Not Rated, Try an adjacent zip code")
            AUDIT='U'
            GO 9000
         END
      END

      * Minimum Charge Logic
      IF OCONV(ORIG.STATE,'MCU')=OCONV(DEST.STATE,'MCU') THEN OFFSET=0 ELSE OFFSET=3
      TOT.WEIGHT=TRIM(TOT.WEIGHT)
      LOCATE TOT.WEIGHT IN DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING WGT.POS ELSE NULL
      CONTR.MIN=DAUDIT.TABLES<38+OFFSET,WGT.POS>
      BENCH.MIN=DAUDIT.TABLES<39+OFFSET,WGT.POS>
      IF JL.FLAG THEN                    ; * JMK44
         LOCATE TOT.WEIGHT IN JL.DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING JL.WGT.POS ELSE NULL       ; * JMK44
         CONTR.MIN=JL.DAUDIT.TABLES<38+OFFSET,JL.WGT.POS>    ; * JMK44
      END                                ; * JMK44
      IF TOT.CONTR.AMT < CONTR.MIN THEN
         TOT.CONTR.AMT=CONTR.MIN
         CONTR.ABS.MIN=1
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT < BENCH.MIN THEN
            TOT.BENCH.AMT=BENCH.MIN
            BENCH.ABS.MIN=1
         END
         FORCED.WORD=''
         IF CONTR.ABS.MIN THEN
            BEGIN CASE
               CASE FORCE.BENCH.MIN="Y"  ; * JMK13
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK13
                  BENCH.ABS.MIN=1        ; * JMK13
                  FORCED.WORD='Forced '  ; * JMK13
               CASE NUM(FORCE.BENCH.MIN) AND TOT.WEIGHT <= FORCE.BENCH.MIN       ; * JMK13
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK13
                  BENCH.ABS.MIN=1        ; * JMK13
                  FORCED.WORD='Forced '  ; * JMK13
            END CASE
         END
      END

      IF CONTR.ABS.MIN OR BENCH.ABS.MIN THEN
         LINE+=1
         IF CONTR.ABS.MIN THEN
            WHY:=@(0,LINE):"CONTRACT MINIMUM":NULL
            WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
            LOCATE('MIN',DTL.VOUT,1;MPOS) THEN     ; * JMK09
               DTL.VOUT<5,MPOS>=TOT.CONTR.AMT      ; * JMK09
            END                          ; * JMK09
         END
         IF BENCH.ABS.MIN THEN
            WHY:=@(45,LINE):FORCED.WORD:"BENCHMARK MINIMUM":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
         END
      END

*********************************************************************
SKIP.MINIMUM:
*********************************************************************
      * Bring Benchmark up to Contract Amount BEFORE FSC and ACC calculations
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT < TOT.CONTR.AMT THEN
            TOT.BENCH.AMT=TOT.CONTR.AMT
            LINE+=1
            WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
         END
      END

*********************************************************************
1225: * Fuel Surcharge Calculations
*********************************************************************
*Section to Force Percentage Calculation on Contract Side then use
* the forced percentage to calculate Benchmark Side
* Replace the Benchmark Side of the FSC Misc charge if Logistics

      FSC.MIN=0
      IF LOGISTICS AND MISC.CHG<1,1>='FSC' THEN
         CALC.PERC=MISC.CHG<2,1>/TOT.CONTR.AMT
         CALC.PERC=OCONV(CALC.PERC*10000,'MR0')
         CALC.BENCH.FSC=OCONV(TOT.BENCH.AMT*CALC.PERC/10000,'MR0')
         IF CALC.BENCH.FSC < MISC.CHG<2,1> THEN CALC.BENCH.FSC = MISC.CHG<2,1>
         MISC.CHG<3,1>=CALC.BENCH.FSC
         PRINT @(48,20):MISC.CHG<3,1>'R26(#6 )':   ; *Bench Amount
      END

      CALC.FSC = 0
      CONTR.FSC.PERC = 0
      CONTR.FSC.MIN = 0
      BENCH.FSC.MIN = 0
      CONTR.FSC.AMT=0
      BENCH.FSC.AMT=0
      CONTR.FSC.PARMS=''                 ; * JMK14
      BENCH.FSC.PARMS=''                 ; * JMK14
      AFS.FSC.PARMS=''                   ; * JMK14

*********************************************************************
1250: * Calculate FSC Charge
*********************************************************************
      IF BENCH.DFSC='' OR CONTR.DFSC='' THEN
         CONTR.FSC.AMT=0
         BENCH.FSC.AMT=0
         GO 1265
      END
      VIN=BILL.DATE
      VIN<2>=TOT.WEIGHT
*      VIN<3>=MILES ; * Dont have miles at this point
      VIN<5>=CC
      VIN<6>=TOT.CONTR.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx & AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS
      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)
      * Capture contract FSC parameters for later review
      CONTR.FSC.PARMS<1,1>=VIN<1>        ; * JMK14 - BILL DATE
      CONTR.FSC.PARMS<1,2>=VIN<2>        ; * JMK14 - WEIGHT
      CONTR.FSC.PARMS<1,3>=VIN<3>        ; * JMK14 - MILES
      CONTR.FSC.PARMS<1,4>=VIN<6>        ; * JMK14 - FREIGHT AMOUNT
      CONTR.FSC.PARMS<1,5>=VIN<7>        ; * JMK14 - ORIGIN ST
      CONTR.FSC.PARMS<1,6>=VIN<8>        ; * JMK14 - DESTINATION ST
      CONTR.FSC.PARMS<1,7>=VOUT<1>       ; * JMK14 - FSC AMT
      CONTR.FSC.PARMS<1,8>=VOUT<2>       ; * JMK14 - MIN FLG
      CONTR.FSC.PARMS<1,9>=VOUT<3>       ; * JMK14 - CALC PERC
      CONTR.FSC.PARMS<1,10>=VOUT<7>      ; * JMK14 - OVERAGE AMT
      CONTR.FSC.PARMS<1,11>=VOUT<8>      ; * JMK14 - OVERAGE STEPS
      CONTR.FSC.PARMS<1,12>=VOUT<9>      ; * JMK14 - BASE PERC
      CONTR.FSC.PARMS<1,13>=VOUT<10>     ; * JMK14 - OVERAGE PERC
      CONTR.FSC.PARMS<1,14>=VOUT<11>     ; * JMK14 - DELAY DAYS
      CONTR.FSC.PARMS<1,15>=VOUT<12>     ; * JMK14 - SHIFT DATE
      CONTR.FSC.PARMS<1,16>=VOUT<13>     ; * JMK14 - NATL FUEL PRICE
      CONTR.FSC.PARMS<1,17>=VOUT<14>     ; * JMK14 - CONV FUEL PRICE
      CONTR.FSC.PARMS<1,18>=VOUT<15>     ; * JMK14 - BEGIN EFF DATE
      CONTR.FSC.PARMS<1,19>=VOUT<16>     ; * JMK14 - FORMULA
      CONTR.FSC.PARMS<1,20>=VOUT<17>     ; * JMK14 - MODE
      CONTR.FSC.PARMS<1,21>=VOUT<18>     ; * JMK14 - BASE FUEL PRICE
      CONTR.FSC.PARMS<1,22>=VOUT<19>     ; * JMK14 - NATL INDEX NAME
      CONTR.FSC.PARMS<1,23>=VOUT<20>     ; * JMK14 - MAX SETUP PRICE
      CONTR.FSC.PARMS<1,24>=VOUT<21>     ; * JMK46 - AFS CONTRACT FSC
      CONTR.FSC.PARMS<1,25>=VOUT<30>     ; * NPR07 - DESCRIPTION

      IF MISC.CHG<1,1>#'FSC' OR XPEDX.CLIENT THEN  ; ** Use the Calculated FSC Numbers
         CONTR.FSC.AMT=VOUT<1>
         CONTR.FSC.MIN=VOUT<2>
      END
      CONTR.FSC.PERC=VOUT<3>
      CALC.FSC=VOUT<1>

      VIN=BILL.DATE
      VIN<2>=TOT.WEIGHT
*     VIN<3>=MILES ; * Dont have miles at this point
      VIN<5>=CC
      VIN<6>=TOT.BENCH.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx & AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS
      CALL CALC.FSC(VIN,VOUT,BENCH.DFSC,F.TABLES)
      * Capture carrier benchmark FSC parameters for later review
      BENCH.FSC.PARMS<1,1>=VIN<1>        ; * JMK14 - BILL DATE
      BENCH.FSC.PARMS<1,2>=VIN<2>        ; * JMK14 - WEIGHT
      BENCH.FSC.PARMS<1,3>=VIN<3>        ; * JMK14 - MILES
      BENCH.FSC.PARMS<1,4>=VIN<6>        ; * JMK14 - FREIGHT AMOUNT
      BENCH.FSC.PARMS<1,5>=VIN<7>        ; * JMK14 - ORIGIN ST
      BENCH.FSC.PARMS<1,6>=VIN<8>        ; * JMK14 - DESTINATION ST
      BENCH.FSC.PARMS<1,7>=VOUT<1>       ; * JMK14 - FSC AMT
      BENCH.FSC.PARMS<1,8>=VOUT<2>       ; * JMK14 - MIN FLG
      BENCH.FSC.PARMS<1,9>=VOUT<3>       ; * JMK14 - CALC PERC
      BENCH.FSC.PARMS<1,10>=VOUT<7>      ; * JMK14 - OVERAGE AMT
      BENCH.FSC.PARMS<1,11>=VOUT<8>      ; * JMK14 - OVERAGE STEPS
      BENCH.FSC.PARMS<1,12>=VOUT<9>      ; * JMK14 - BASE PERC
      BENCH.FSC.PARMS<1,13>=VOUT<10>     ; * JMK14 - OVERAGE PERC
      BENCH.FSC.PARMS<1,14>=VOUT<11>     ; * JMK14 - DELAY DAYS
      BENCH.FSC.PARMS<1,15>=VOUT<12>     ; * JMK14 - SHIFT DATE
      BENCH.FSC.PARMS<1,16>=VOUT<13>     ; * JMK14 - NATL FUEL PRICE
      BENCH.FSC.PARMS<1,17>=VOUT<14>     ; * JMK14 - CONV FUEL PRICE
      BENCH.FSC.PARMS<1,18>=VOUT<15>     ; * JMK14 - BEGIN EFF DATE
      BENCH.FSC.PARMS<1,19>=VOUT<16>     ; * JMK14 - FORMULA
      BENCH.FSC.PARMS<1,20>=VOUT<17>     ; * JMK14 - MODE
      BENCH.FSC.PARMS<1,21>=VOUT<18>     ; * JMK14 - BASE FUEL PRICE
      BENCH.FSC.PARMS<1,22>=VOUT<19>     ; * JMK14 - NATL INDEX NAME
      BENCH.FSC.PARMS<1,23>=VOUT<20>     ; * JMK14 - MAX SETUP PRICE
      BENCH.FSC.PARMS<1,24>=VOUT<21>     ; * JMK46 - AFS CONTRACT FSC
      BENCH.FSC.PARMS<1,25>=VOUT<30>     ; * NPR07 - DESCRIPTION

      * Setup call to calculate old AFS benchmark FSC charges
      CALL CALC.FSC(VIN,VOUT,AFSO.BENCH.DFSC,F.TABLES)       ; * JMK34
      * Capture carrier benchmark FSC parameters for later review
      AFSO.BENCH.FSC.PARMS<1,1>=VIN<1>   ; * JMK34 - BILL DATE
      AFSO.BENCH.FSC.PARMS<1,2>=VIN<2>   ; * JMK34 - WEIGHT
      AFSO.BENCH.FSC.PARMS<1,3>=VIN<3>   ; * JMK34 - MILES
      AFSO.BENCH.FSC.PARMS<1,4>=VIN<6>   ; * JMK34 - FREIGHT AMOUNT
      AFSO.BENCH.FSC.PARMS<1,5>=VIN<7>   ; * JMK34 - ORIGIN ST
      AFSO.BENCH.FSC.PARMS<1,6>=VIN<8>   ; * JMK34 - DESTINATION ST
      AFSO.BENCH.FSC.PARMS<1,7>=VOUT<1>  ; * JMK34 - FSC AMT
      AFSO.BENCH.FSC.PARMS<1,8>=VOUT<2>  ; * JMK34 - MIN FLG
      AFSO.BENCH.FSC.PARMS<1,9>=VOUT<3>  ; * JMK34 - CALC PERC
      AFSO.BENCH.FSC.PARMS<1,10>=VOUT<7>           ; * JMK34 - OVERAGE AMT
      AFSO.BENCH.FSC.PARMS<1,11>=VOUT<8>           ; * JMK34 - OVERAGE STEPS
      AFSO.BENCH.FSC.PARMS<1,12>=VOUT<9>           ; * JMK34 - BASE PERC
      AFSO.BENCH.FSC.PARMS<1,13>=VOUT<10>          ; * JMK34 - OVERAGE PERC
      AFSO.BENCH.FSC.PARMS<1,14>=VOUT<11>          ; * JMK34 - DELAY DAYS
      AFSO.BENCH.FSC.PARMS<1,15>=VOUT<12>          ; * JMK34 - SHIFT DATE
      AFSO.BENCH.FSC.PARMS<1,16>=VOUT<13>          ; * JMK34 - NATL FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,17>=VOUT<14>          ; * JMK34 - CONV FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,18>=VOUT<15>          ; * JMK34 - BEGIN EFF DATE
      AFSO.BENCH.FSC.PARMS<1,19>=VOUT<16>          ; * JMK34 - FORMULA
      AFSO.BENCH.FSC.PARMS<1,20>=VOUT<17>          ; * JMK34 - MODE
      AFSO.BENCH.FSC.PARMS<1,21>=VOUT<18>          ; * JMK34 - BASE FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,22>=VOUT<19>          ; * JMK34 - NATL INDEX NAME
      AFSO.BENCH.FSC.PARMS<1,23>=VOUT<20>          ; * JMK34 - MAX SETUP PRICE
      AFSO.BENCH.FSC.PARMS<1,24>=VOUT<21>          ; * JMK46 - AFS CONTRACT FSC
      AFSO.BENCH.FSC.PARMS<1,25>=VOUT<30>          ; * NPR07 - DESCRIPTION

      * Setup call to calculate AFS benchmark FSC charges
      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)  ; * JMK14

      AFS.FSC.PARMS<1,1>=VIN<1>          ; * JMK14 - BILL DATE
      AFS.FSC.PARMS<1,2>=VIN<2>          ; * JMK14 - WEIGHT
      AFS.FSC.PARMS<1,3>=VIN<3>          ; * JMK14 - MILES
      AFS.FSC.PARMS<1,4>=VIN<6>          ; * JMK14 - FREIGHT AMOUNT
      AFS.FSC.PARMS<1,5>=VIN<7>          ; * JMK14 - ORIGIN ST
      AFS.FSC.PARMS<1,6>=VIN<8>          ; * JMK14 - DESTINATION ST
      AFS.FSC.PARMS<1,7>=VOUT<1>         ; * JMK14 - FSC AMT
      AFS.FSC.PARMS<1,8>=VOUT<2>         ; * JMK14 - MIN FLG
      AFS.FSC.PARMS<1,9>=VOUT<3>         ; * JMK14 - CALC PERC
      AFS.FSC.PARMS<1,10>=VOUT<7>        ; * JMK14 - OVERAGE AMT
      AFS.FSC.PARMS<1,11>=VOUT<8>        ; * JMK14 - OVERAGE STEPS
      AFS.FSC.PARMS<1,12>=VOUT<9>        ; * JMK14 - BASE PERC
      AFS.FSC.PARMS<1,13>=VOUT<10>       ; * JMK14 - OVERAGE PERC
      AFS.FSC.PARMS<1,14>=VOUT<11>       ; * JMK14 - DELAY DAYS
      AFS.FSC.PARMS<1,15>=VOUT<12>       ; * JMK14 - SHIFT DATE
      AFS.FSC.PARMS<1,16>=VOUT<13>       ; * JMK14 - NATL FUEL PRICE
      AFS.FSC.PARMS<1,17>=VOUT<14>       ; * JMK14 - CONV FUEL PRICE
      AFS.FSC.PARMS<1,18>=VOUT<15>       ; * JMK14 - BEGIN EFF DATE
      AFS.FSC.PARMS<1,19>=VOUT<16>       ; * JMK14 - FORMULA
      AFS.FSC.PARMS<1,20>=VOUT<17>       ; * JMK14 - MODE
      AFS.FSC.PARMS<1,21>=VOUT<18>       ; * JMK14 - BASE FUEL PRICE
      AFS.FSC.PARMS<1,22>=VOUT<19>       ; * JMK14 - NATL INDEX NAME
      AFS.FSC.PARMS<1,23>=VOUT<20>       ; * JMK14 - MAX SETUP PRICE
      AFS.FSC.PARMS<1,24>=VOUT<21>       ; * JMK46 - AFS CONTRACT FSC
      AFS.FSC.PARMS<1,25>=VOUT<30>       ; * NPR07 - DESCRIPTION

      IF LOGISTICS THEN                  ; * JMK14
         BENCH.FSC.AMT=AFS.FSC.PARMS<1,7>          ; * JMK14
         BENCH.FSC.MIN=AFS.FSC.PARMS<1,8>          ; * JMK14
         BENCH.FSC.PERC=AFS.FSC.PARMS<1,9>         ; * JMK14
         IF CARR.ONLY.FSC='Y' OR CARR.ONLY.FSC='C' THEN      ; * JMK14 ; * JMK34
            BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>     ; * JMK14
            BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>     ; * JMK14
            BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>    ; * JMK14
         END                             ; * JMK14
         IF CARR.ONLY.FSC='O' THEN       ; * JMK34
            BENCH.FSC.AMT=AFSO.BENCH.FSC.PARMS<1,7>          ; * JMK34
            BENCH.FSC.MIN=AFSO.BENCH.FSC.PARMS<1,8>          ; * JMK34
            BENCH.FSC.PERC=AFSO.BENCH.FSC.PARMS<1,9>         ; * JMK34
            IF CONTR.FSC.PARMS<1,24>[1,2]#'AF' THEN          ; * JMK46
               BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>  ; * JMK46
               BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>  ; * JMK46
               BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>           ; * JMK46
            END                          ; * JMK46
         END                             ; * JMK34
         IF NO.LOG.FSC THEN BENCH.FSC.AMT=0        ; * Set to Zero
      END
      IF CONTR.FSC.AMT+BENCH.FSC.AMT+0#0 THEN
         LINE+=1
         IF CONTR.FSC.MIN THEN
            WHY:=@(3,LINE):'Fuel Sur Charge Min':NULL
         END ELSE
            CONTR.NAT.IDX = CONTR.FSC.PARMS<1,22>
            CONTR.AFS.AFN = CONTR.FSC.PARMS<1,24>
            CONTR.AFS.DESC = CONTR.FSC.PARMS<1,25>
            IF CONTR.AFS.AFN = "AFN" THEN CONTR.AFS.AFN = "AFS Supp A FSC"
            IF CONTR.AFS.AFN = "AFS" THEN CONTR.AFS.AFN = "AFS FSC"
            IF CONTR.AFS.DESC NE "" THEN CONTR.AFS.AFN = CONTR.AFS.DESC          ; * NPR07
            CONTR.FSC.DETAIL = ""
            IF CONTR.AFS.AFN NE "" THEN
               CONTR.FSC.DETAIL = CONTR.AFS.AFN
            END
            IF CONTR.NAT.IDX NE "" THEN
               IF CONTR.FSC.DETAIL = '' THEN CONTR.FSC.DETAIL := CONTR.NAT.IDX ELSE CONTR.FSC.DETAIL := " - ":CONTR.NAT.IDX
            END
            IF CONTR.AFS.DESC NE "" THEN CONTR.FSC.DETAIL = CONTR.AFS.DESC       ; * NPR07
            IF CONTR.FSC.DETAIL = "" THEN
               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% Fuel Sur Charge':NULL
            END ELSE
               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% (':CONTR.FSC.DETAIL:') ':NULL
            END
         END
         WHY:=@(35,LINE):CONTR.FSC.AMT'R26#8':NULL
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='FSC'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=''           ; * JMK06
         DTL.VOUT<3,NVAL+1>=''           ; * JMK06
         DTL.VOUT<4,NVAL+1>=''           ; * JMK06
         DTL.VOUT<5,NVAL+1>=CONTR.FSC.AMT          ; * JMK06
         IF LOGISTICS THEN
            BEGIN CASE
               CASE NO.LOG.FSC
                  WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'Logistics FSC = N':NULL
               CASE BENCH.FSC.MIN
                  WHY:=@(45,LINE):'Fuel Sur Charge Min':NULL
               CASE 1
                  BENCH.NAT.IDX = BENCH.FSC.PARMS<1,22>
                  BENCH.AFS.AFN = BENCH.FSC.PARMS<1,24>
                  BENCH.AFS.DESC = BENCH.FSC.PARMS<1,25>
                  IF BENCH.AFS.AFN = "AFN" THEN BENCH.AFS.AFN = "AFS Supp A FSC"
                  IF BENCH.AFS.AFN = "AFS" THEN BENCH.AFS.AFN = "AFS FSC"
                  IF BENCH.AFS.DESC NE "" THEN BENCH.AFS.AFN = BENCH.AFS.DESC
                  BENCH.FSC.DETAIL = ""
                  IF BENCH.AFS.AFN NE "" THEN
                     BENCH.FSC.DETAIL = BENCH.AFS.AFN
                  END
                  IF BENCH.NAT.IDX NE "" THEN
                     IF BENCH.FSC.DETAIL = '' THEN BENCH.FSC.DETAIL := BENCH.NAT.IDX ELSE BENCH.FSC.DETAIL := " - ":BENCH.NAT.IDX
                  END
                  IF BENCH.AFS.DESC NE "" THEN BENCH.FSC.DETAIL = BENCH.AFS.DESC
                  IF BENCH.FSC.DETAIL = "" THEN
                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% Fuel Sur Charge':NULL
                  END ELSE
                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% FSC (':BENCH.FSC.DETAIL:') ':NULL
                  END
            END CASE
            WHY:=@(73,LINE):BENCH.FSC.AMT'R26#7':NULL
         END
      END

*********************************************************************
1265: * Skip FSC Calculation
*********************************************************************
      IF MISC.CHG<1,1>='FSC' AND CALC.FSC+0 # MISC.CHG<2,1> AND FSC.ACCESSORIAL.PERCENT.FLAG=0 THEN
*      Entered and Calculated Do Not Match, Log all information
         IF BENCH.DFSC = '' OR CONTR.DFSC='' THEN
            VIN=BILL.DATE
            VIN<2>=TOT.WEIGHT
*        VIN<3>=MILES ; * Dont have miles at this point
            VIN<5>=CC
            VIN<6>=TOT.CONTR.AMT
         END
         NFSC.ARR = VIN
         NFSC.ARR<10> = MISC.CHG<2,1>
         NFSC.ARR<11> = VOUT
         VIN<1> = USER
         VIN<2> = TIME()
         VIN<3> = DATE()
         VIN<4> = CARRIER
         CALL NFSC.PROBLEMS(VIN,VOUT,NFSC.ARR)
      END

*********************************************************************
1275:* Assessorial Charge Calculations
*********************************************************************
      TOT.CONTR.MISC.CHG=0
      TOT.BENCH.MISC.CHG=0
      OVR.CONTR.MISC.CHG=0               ; * JMK63
      OVR.BENCH.MISC.CHG=0               ; * JMK63
      OVR.CONTR.MISC.CHG.DESC = ''       ; * JMK63
      OVR.BENCH.MISC.CHG.DESC = ''       ; * JMK63
      CUR.CONTR.MISC.CHG=0               ; * JMK63
      CUR.BENCH.MISC.CHG=0               ; * JMK63
      SAVE.CONTR = ''                    ; * NKH03
      SAVE.BENCH = ''                    ; * NKH03
      SAVED.LINES = 0                    ; * NKH03
      MISC.CHG.TIMES=DCOUNT(MISC.CHG<1>,@VM)
      FOR MISC.CHG.COUNT=1 TO MISC.CHG.TIMES
         LINE=LINE+1
         CUR.MISC.CHG.CODE=MISC.CHG<1,MISC.CHG.COUNT>
         LOCATE CUR.MISC.CHG.CODE IN LI.CODES<1> SETTING POS THEN
            CUR.MISC.CHG.DESC=LI.CODES<2,POS>
         END ELSE
            CUR.MISC.CHG.DESC='Not On File'
         END
         CUR.CONTR.MISC.CHG.DESC=CUR.MISC.CHG.DESC
         CUR.BENCH.MISC.CHG.DESC=CUR.MISC.CHG.DESC
         IF MISC.CHG<4,MISC.CHG.COUNT>+0=0 THEN    ; * JMK63

            CUR.CONTR.MISC.CHG=MISC.CHG<2,MISC.CHG.COUNT>
            IF CUR.CONTR.MISC.CHG='CWT' THEN       ; * JMK02
               LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN   ; * JMK02
                  CUR.CONTR.MISC.CWT.RATE=DAUDIT.TABLES<49,MPOS> 'R26'           ; * JMK02
                  CUR.CONTR.MISC.CWT.MIN=DAUDIT.TABLES<50,MPOS>        ; * JMK02
                  CUR.CONTR.MISC.CWT.MAX=DAUDIT.TABLES<51,MPOS>        ; * JMK02
                  CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE         ; * JMK02
                  CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')
                  IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN       ; * JMK02
                     IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN         ; * JMK02
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
                  IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN       ; * JMK02
                     IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN         ; * JMK02
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
               END ELSE                  ; * JMK02
                  CUR.CONTR.MISC.CHG=0   ; * JMK02
               END                       ; * JMK02
               IF JL.FLAG THEN           ; * JMK44
                  LOCATE CUR.MISC.CHG.CODE IN JL.DAUDIT.TABLES<26> SETTING JL.MPOS THEN    ; * JMK44
                     CUR.CONTR.MISC.CWT.RATE=JL.DAUDIT.TABLES<49,JL.MPOS> 'R26'  ; * JMK44
                     CUR.CONTR.MISC.CWT.MIN=JL.DAUDIT.TABLES<50,JL.MPOS>         ; * JMK44
                     CUR.CONTR.MISC.CWT.MAX=JL.DAUDIT.TABLES<51,JL.MPOS>         ; * JMK44
                     CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE      ; * JMK44
                     CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')          ; * JMK44
                     IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN    ; * JMK44
                        IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN      ; * JMK44
                           CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN   ; * JMK44
                        END              ; * JMK44
                     END                 ; * JMK44
                     IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN    ; * JMK44
                        IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN      ; * JMK44
                           CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX   ; * JMK44
                        END              ; * JMK44
                     END                 ; * JMK44
                  END ELSE               ; * JMK44
                     CUR.CONTR.MISC.CHG=0          ; * JMK44
                  END                    ; * JMK44
               END                       ; * JMK44
            END ELSE                     ; * JMK02
               LEN.CHG=LEN(CUR.CONTR.MISC.CHG)
               IF CUR.CONTR.MISC.CHG[LEN.CHG,1]='%' THEN
                  PERC=CUR.CONTR.MISC.CHG[1,LEN.CHG-1]
                  CUR.CONTR.MISC.CHG=OCONV(TOT.CONTR.AMT*PERC/100,'MR0')
               END
            END                          ; * JMK02
            TOT.CONTR.MISC.CHG+=CUR.CONTR.MISC.CHG
            IF LOGISTICS THEN
               CUR.BENCH.MISC.CHG=MISC.CHG<3,MISC.CHG.COUNT>
               IF CUR.BENCH.MISC.CHG='CWT' THEN    ; * JMK02
                  LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN          ; * JMK02
                     CUR.BENCH.MISC.CWT.RATE=DAUDIT.TABLES<52,MPOS> 'R26'        ; * JMK02
                     CUR.BENCH.MISC.CWT.MIN=DAUDIT.TABLES<53,MPOS>     ; * JMK02
                     CUR.BENCH.MISC.CWT.MAX=DAUDIT.TABLES<54,MPOS>     ; * JMK02
                     CUR.BENCH.MISC.CHG=TOT.WEIGHT *CUR.BENCH.MISC.CWT.RATE      ; * JMK02
                     CUR.BENCH.MISC.CHG=OCONV(CUR.BENCH.MISC.CHG,'MR0')
                     IF CUR.BENCH.MISC.CWT.MIN+0 # 0 THEN    ; * JMK02
                        IF CUR.BENCH.MISC.CHG < CUR.BENCH.MISC.CWT.MIN THEN      ; * JMK02
                           CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MIN   ; * JMK02
                        END              ; * JMK02
                     END                 ; * JMK02
                     IF CUR.BENCH.MISC.CWT.MAX+0 # 0 THEN    ; * JMK02
                        IF CUR.BENCH.MISC.CHG > CUR.BENCH.MISC.CWT.MAX THEN      ; * JMK02
                           CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MAX   ; * JMK02
                        END              ; * JMK02
                     END                 ; * JMK02
                  END ELSE               ; * JMK02
                     CUR.BENCH.MISC.CHG=0          ; * JMK02
                  END                    ; * JMK02
               END ELSE                  ; * JMK02
                  IF CUR.BENCH.MISC.CHG[LEN.CHG,1]='%' THEN
                     PERC=CUR.BENCH.MISC.CHG[1,LEN.CHG-1]
                     CUR.BENCH.MISC.CHG=OCONV(TOT.BENCH.AMT*PERC/100,'MR0')
                  END
               END                       ; * JMK02
               TOT.BENCH.MISC.CHG+=CUR.BENCH.MISC.CHG
            END
            MISC.CHG<2,MISC.CHG.COUNT>=CUR.CONTR.MISC.CHG    ; * JMK186    ; * NKH03
            MISC.CHG<3,MISC.CHG.COUNT>=CUR.BENCH.MISC.CHG    ; * JMK186    ; * NKH03

            GOSUB BUILD.DETAIL.OUT       ; * NKH03                                        LOOPS AND DISPLAY EACH MISC.CHG
         END ELSE                        ; * JMK63
            MISC.CODE=CUR.MISC.CHG.CODE  ; * JMK63
            GOSUB 8975                   ; * JMK63
            GOSUB BUILD.SAVE.LINE        ; * NKH03
            TOT.CONTR.MISC.CHG+=CUR.CONTR.MISC.CHG           ; * JMK63
            TOT.BENCH.MISC.CHG+=CUR.BENCH.MISC.CHG           ; * JMK63
         END                             ; * JMK63
         * Begin NKH03
         IF LAST.LINE > '' THEN
            LINE = LAST.LINE
            LAST.LINE = ''
         END
         * End NKH03
      NEXT MISC.CHG.COUNT

*********************************************************************
* Print Grand Totals
*********************************************************************
      IF XPEDX.CLIENT AND MISC.CHG<1,1>='FSC' THEN
         GTOT.CONTR.AMT=TOT.CONTR.AMT+CONTR.FSC.AMT+TOT.CONTR.MISC.CHG-MISC.CHG<2,1>
      END ELSE
         GTOT.CONTR.AMT=TOT.CONTR.AMT+CONTR.FSC.AMT+TOT.CONTR.MISC.CHG
      END
      IF LOGISTICS THEN
         GTOT.BENCH.AMT=TOT.BENCH.AMT+BENCH.FSC.AMT+TOT.BENCH.MISC.CHG
      END
      * Begin NKH03
      IF SAVED.LINES THEN
         SAVE.COUNT = DCOUNT(SAVE.CONTR<1>,@VM)
         FOR SC = 1 TO SAVE.COUNT
            * Begin NKH09

            * Contract Variables
            CUR.MISC.CHG.CODE = SAVE.CONTR<1,SC>
            CUR.CONTR.MISC.CHG.DESC = SAVE.CONTR<2,SC>
            CONTR.RATE = SAVE.CONTR<3,SC>
            CONTR.ACC = SAVE.CONTR<4,SC>
            CONTR.FSC = SAVE.CONTR<5,SC>
            CONTR.TYPE = SAVE.CONTR<7,SC>
            CUR.CONTR.MISC.CHG = SAVE.CONTR<8,SC>
            CONTR.MIN = SAVE.CONTR<9,SC>

            * Bench Variables
            CUR.BENCH.MISC.CHG.CODE = SAVE.BENCH<1,SC>
            CUR.BENCH.MISC.CHG.DESC = SAVE.BENCH<2,SC>
            BENCH.RATE = SAVE.BENCH<3,SC>
            BENCH.ACC = SAVE.BENCH<4,SC>
            BENCH.FSC = SAVE.BENCH<5,SC>
            BENCH.TYPE = SAVE.BENCH<7,SC>
            CUR.BENCH.MISC.CHG = SAVE.BENCH<8,SC>
            BENCH.MIN = SAVE.BENCH<9,SC>

            AC.VIN = ''
            AC.VIN<1> = SC
            AC.VIN<2> = TOT.CONTR.AMT
            AC.VIN<3> = TOT.BENCH.AMT
            AC.VIN<4> = GTOT.CONTR.AMT
            AC.VIN<5> = GTOT.BENCH.AMT
            AC.VIN<6> = CONTR.FSC.AMT
            AC.VIN<7> = BENCH.FSC.AMT
            AC.VIN<8> = TOT.CONTR.MISC.CHG
            AC.VIN<9> = TOT.BENCH.MISC.CHG
            AC.VIN<10> = CONTR.FSC.PERC
            AC.VIN<11> = BENCH.FSC.PERC
            AC.VIN<12> = CONTR.MAX
            AC.VIN<13> = BENCH.MAX
            AC.VIN<14> = TOT.WEIGHT
            AC.VOUT = ''

            CALL ACC.CALCS(AC.VIN,AC.VOUT,SAVE.CONTR,SAVE.BENCH)
            CUR.CONTR.MISC.CHG = AC.VOUT<1>
            CUR.BENCH.MISC.CHG = AC.VOUT<2>
            GTOT.CONTR.AMT = AC.VOUT<3>
            GTOT.BENCH.AMT = AC.VOUT<4>
            * End NKH09

            LOCATE CUR.MISC.CHG.CODE IN MISC.CHG<1> SETTING MPOS THEN  ; * NKH06
               MISC.CHG<2,MPOS>=CUR.CONTR.MISC.CHG           ; * NKH06
               MISC.CHG<3,MPOS>=CUR.BENCH.MISC.CHG           ; * NKH06
            END ELSE                     ; * NKH06
               MISC.CHG<2,SAVE.COUNT>=CUR.CONTR.MISC.CHG
               MISC.CHG<3,SAVE.COUNT>=CUR.BENCH.MISC.CHG
            END                          ; * NKH06
            LINE+=1
            GOSUB BUILD.DETAIL.OUT

         NEXT SC
      END
      * End NKH03

      * Adjust Benchmark Amount if Less than Contract Amount
      IF LOGISTICS AND GTOT.BENCH.AMT < GTOT.CONTR.AMT THEN
         GTOT.BENCH.AMT=GTOT.CONTR.AMT
         LINE+=1
         WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
      END
      LINE=LINE+1



      WHY:=@(3,LINE):'CONTRACT TOTAL':NULL
      WHY:=@(35,LINE):GTOT.CONTR.AMT'R26#8':NULL
      IF LOGISTICS THEN
         WHY:=@(45,LINE):'BENCHMARK TOTAL':NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
      END
      IF LOGISTICS THEN
         LINE+=1
         WHY:=@(0,LINE):"Logistics Amount: ":(GTOT.BENCH.AMT-GTOT.CONTR.AMT)'R26,#8':NULL
         IF CARRIER = '00198' THEN
            BEAVER.ADJ=1
            BEGIN CASE
               CASE CLIENT='00866' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00872' AND BILL.DATE GE "16377" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00879' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00883' AND BILL.DATE GE "15597" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00890' AND BILL.DATE GE "15597" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00890' AND BILL.DATE GE "16480" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01014' AND BILL.DATE GE "16003" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01015' AND BILL.DATE GE "16111" AND TOT.WEIGHT GT "0" AND BILL.DATE LE "16889"     ; * DRF07
                  BEAVER.ADJ=0
               CASE CLIENT='01019' AND BILL.DATE GE "15550" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01027' AND BILL.DATE GE "15550" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01079' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01083' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01101' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01112' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01113' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01267' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01271' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01284' AND BILL.DATE GE "16071" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01389' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01418' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01432' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01435' AND BILL.DATE GE "15980" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01457' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01463' AND BILL.DATE GE "15590" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01604' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01630' AND BILL.DATE GE "16087" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01675' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01686' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01717' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01739' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01746' AND BILL.DATE GE "16538" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01749' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01770' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01789' AND BILL.DATE GE "16045" AND TOT.WEIGHT GT "150"
                  BEAVER.ADJ=0
               CASE CLIENT='01817' AND BILL.DATE GE "16032" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01822' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01873' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01862' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01863' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01924' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01907' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='02010' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00879' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01112' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01457' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01604' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01686' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='01873' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='02192' AND BILL.DATE GE "16514" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01504' AND BILL.DATE GE "16635" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01717' AND BILL.DATE GE "16661" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT='02204' AND BILL.DATE GE "16668" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='00895' AND BILL.DATE GE ICONV('10/09/13','D') AND TOT.WEIGHT GT "100"    ; * JMK77
                  BEAVER.ADJ=0           ; * JMK77
               CASE CLIENT='02102' AND BILL.DATE GE "16755" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT='01019' AND BILL.DATE GE "16938" AND TOT.WEIGHT GT "0"          ; * DRF02
                  BEAVER.ADJ=0           ; * DRF02
               CASE CLIENT='05171' AND BILL.DATE GE "17277" AND TOT.WEIGHT GT "100"        ; * DRF08
                  BEAVER.ADJ=0           ; * DRF08
               CASE CLIENT='01394' AND BILL.DATE GE "17182" AND TOT.WEIGHT GT "100"        ; * DRF10
                  BEAVER.ADJ=0           ; * DRF10
               CASE CLIENT='05411' AND BILL.DATE GE "17319" AND TOT.WEIGHT GT "100"        ; * DRF11
                  BEAVER.ADJ=0           ; * DRF11
               CASE CLIENT='05351' AND BILL.DATE GE "17168" AND TOT.WEIGHT GT "0"          ; * DRF12
                  BEAVER.ADJ=0           ; * DRF12
               CASE CLIENT='01454' AND BILL.DATE GE "17168" AND TOT.WEIGHT GT "100"        ; * DRF13
                  BEAVER.ADJ=0           ; * DRF13
               CASE CLIENT='00851' AND BILL.DATE GE "17673" AND TOT.WEIGHT GT "100"        ; * GRB01
                  BEAVER.ADJ=0           ; * GRB01
               CASE CLIENT='02027' AND BILL.DATE GE "17673" AND TOT.WEIGHT GT "100"        ; * GRB01
                  BEAVER.ADJ=0           ; * GRB01
               CASE CLIENT='01718' AND BILL.DATE GE "17697" AND TOT.WEIGHT GT "100"        ; * GRB02
                  BEAVER.ADJ=0           ; * GRB02
               CASE CLIENT ='01987' AND BILL.DATE GE "17712" AND TOT.WEIGHT GT "100"       ; * GRB03
                  BEAVER.ADJ=0           ; * GRB03
               CASE CLIENT ='01072' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"       ; * GRB04
                  BEAVER.ADJ=0           ; * GRB04
               CASE CLIENT ='07073' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"       ; * GRB04
                  BEAVER.ADJ=0           ; * GRB04
               CASE CLIENT ='07074' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"       ; * GRB04
                  BEAVER.ADJ=0           ; * GRB04
               CASE CLIENT='05095' AND BILL.DATE GE "17792" AND TOT.WEIGHT GT "100"        ; *TAG01
                  BEAVER.ADJ=0           ; *TAG01
               CASE CLIENT='05608' AND BILL.DATE GE "17838" AND TOT.WEIGHT GT "100"        ; *TAG02
                  BEAVER.ADJ=0           ; *TAG02
               CASE CLIENT='01789' AND BILL.DATE GE "17904" AND TOT.WEIGHT GT "100"        ; *TAG03
                  BEAVER.ADJ=0           ; *TAG03
               CASE CLIENT='01650' AND BILL.DATE GE "17903" AND TOT.WEIGHT GT "100"        ; * NKH01
                  BEAVER.ADJ=0           ; * NKH01
               CASE CLIENT='00934' AND BILL.DATE GE "18215" AND TOT.WEIGHT GT "100"        ; * NKH02
                  BEAVER.ADJ=0           ; * NKH02
               CASE CLIENT='05763' AND BILL.DATE GE "18495" AND TOT.WEIGHT GT "100"        ; * NKH10
                  BEAVER.ADJ=0           ; * NKH10
               CASE CLIENT='05673' AND BILL.DATE GE "18568" AND TOT.WEIGHT GT "0"          ; * NKH12
                  BEAVER.ADJ=0           ; * NKH12
               CASE CLIENT='01141' AND BILL.DATE GE "18579" AND TOT.WEIGHT GT "0"          ; * NKH13
                  BEAVER.ADJ=0           ; * NKH13
               CASE CLIENT='01139' AND BILL.DATE GE "18832" AND TOT.WEIGHT GT "100"        ; * NKH18
                  BEAVER.ADJ=0           ; * NKH18
               CASE CLIENT='00726' AND BILL.DATE GE "19002" AND TOT.WEIGHT GT "100"        ; * NKH19
                  BEAVER.ADJ=0           ; * NKH19
               CASE TOT.WEIGHT GT "200"
                  BEAVER.ADJ=0
            END CASE

            IF BEAVER.ADJ THEN
               IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "0" THEN
                  LINE+=1
                  WHY:=@(45,LINE):"BENCHMARK SUBTOTAL          ":NULL
                  WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
                  DIFF.LOG=0-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)
                  GTOT.BENCH.AMT=GTOT.CONTR.AMT+0
                  LINE+=1
                  WHY:=@(45,LINE):"ADJ! Parcel Rate no consulting":NULL
                  WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL
               END
            END
         END
         * Begin GRB05
         *****        IF CLIENT = '01822' AND CARRIER = '00561' THEN      ; * DRF06
         *****            IF TOT.WEIGHT LE "100" THEN  ; * DRF06
         *****            IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "0" THEN          ; * DRF06
         *****            LINE+=1                ; * DRF06
         *****            WHY:=@(45,LINE):"BENCHMARK SUBTOTAL          ":NULL  ; * DRF06
         *****            WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL           ; * DRF06
         *****            DIFF.LOG=0-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)           ; * DRF06
         *****            GTOT.BENCH.AMT=GTOT.CONTR.AMT+0  ; * DRF06
         *****            LINE+=1                ; * DRF06
         *****            WHY:=@(45,LINE):"ADJ! Parcel Rate no consulting":NULL          ; * DRF06
         *****            WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL       ; * DRF06
         *****            END                       ; * DRF06
         *****            END                          ; * DRF06
         *****         END                             ; * DRF06
         * End GRB05
      END

**      IF IOT = "T" THEN      ;***********************************
      TP.AMT.TAB<TP.CNT> = GTOT.CONTR.AMT
**      END

      RETURN

*********************************************************************
8900: * Determine if need to get accessorials from FB.AUDIT.ACC
*********************************************************************

      IF NOT(TEMPO.CLIENT.FLG) THEN      ; * GRB11
*      AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':CLIENT:'*':ROUTE.ZIP         ; * NKH11
         AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':AUDIT.CLIENT.ID:'*':ROUTE.ZIP    ; * NKH11
         READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
            AUDIT.ACC=1
         END
         IF AUDIT.ACC=0 THEN
*         AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':CLIENT:'*ALL'             ; * NKH11
            AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*':AUDIT.CLIENT.ID:'*ALL'        ; * NKH11
            READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
               AUDIT.ACC=1
            END
         END
         IF AUDIT.ACC=0 THEN
            AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*ALL*':ROUTE.ZIP
            READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
               AUDIT.ACC=1
            END
         END
         IF AUDIT.ACC=0 THEN
            AUDIT.ACC.ID=CARRIER:'*':MISC.CODE:'*ALL*ALL'
            READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
               AUDIT.ACC=1
            END
         END
         IF AUDIT.ACC THEN
            LOCATE BILL.DATE IN AUDIT.ACC.REC<1> BY 'AR' SETTING EPOS THEN NULL ELSE EPOS-=1
            IF AUDIT.ACC.REC<1,EPOS> GE BILL.DATE THEN
               IF AUDIT.ACC.REC<2,EPOS> GE BILL.DATE OR AUDIT.ACC.REC<2,EPOS>='' THEN
                  NULL
               END ELSE
                  AUDIT.ACC=0
               END
            END
         END
      END ELSE
         LOCATE(MISC.CODE,CHOICE.ARRAY;CCPOS) THEN           ; * GRB11
            AUDIT.ACC=1                  ; * GRB11
         END ELSE                        ; * GRB11
            AUDIT.ACC=0                  ; * GRB11
         END                             ; * GRB11
      END
      RETURN

*********************************************************************
8950: * Calculate the accessorial amount from FB.AUDIT.ACC for MISC.CHG ARRAY
*********************************************************************
      AUDIT.ACC=0
      GOSUB 8900
      IF AUDIT.ACC.REC<2,EPOS> > BILL.DATE OR AUDIT.ACC.REC<2,EPOS>='' THEN
         CONTR.TYPE=AUDIT.ACC.REC<3,EPOS>
         CONTR.RATE=AUDIT.ACC.REC<4,EPOS>
         CONTR.MIN=AUDIT.ACC.REC<5,EPOS>
         CONTR.MAX=AUDIT.ACC.REC<6,EPOS>
         CONTR.BASE=AUDIT.ACC.REC<7,EPOS>
         CONTR.FSC=AUDIT.ACC.REC<8,EPOS>
         CONTR.ACC=AUDIT.ACC.REC<9,EPOS>

         BEGIN CASE
            CASE CONTR.TYPE='P'
               CUR.CONTR.MISC.AMT=CONTR.RATE/100:'%'
            CASE CONTR.TYPE='C'
               CUR.CONTR.MISC.AMT=ICONV(SUM(CLASS.WGT<2>)*CONTR.RATE/100,'MR0')  ; * JMK48
               IF CONTR.MIN # "" THEN    ; * JMK48
                  IF CUR.CONTR.MISC.AMT < CONTR.MIN THEN     ; * JMK48
                     CUR.CONTR.MISC.AMT=CONTR.MIN  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
               IF CONTR.MAX # "" THEN    ; * JMK48
                  IF CUR.CONTR.MISC.AMT > CONTR.MAX THEN     ; * JMK48
                     CUR.CONTR.MISC.AMT=CONTR.MAX  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
            CASE CONTR.TYPE='F'
               CUR.CONTR.MISC.AMT=CONTR.RATE
            CASE CONTR.TYPE='A'
               CUR.CONTR.MISC.AMT='ASK'
            CASE 1
               CUR.CONTR.MISC.AMT=''
         END CASE

         BENCH.TYPE=AUDIT.ACC.REC<10,EPOS>
         BENCH.RATE=AUDIT.ACC.REC<11,EPOS>
         BENCH.MIN=AUDIT.ACC.REC<12,EPOS>
         BENCH.MAX=AUDIT.ACC.REC<13,EPOS>
         BENCH.BASE=AUDIT.ACC.REC<14,EPOS>
         BENCH.FSC=AUDIT.ACC.REC<15,EPOS>
         BENCH.ACC=AUDIT.ACC.REC<16,EPOS>

         BEGIN CASE
            CASE BENCH.TYPE='P'
               CUR.BENCH.MISC.AMT=BENCH.RATE/100:'%'
            CASE BENCH.TYPE='C'
               CUR.BENCH.MISC.AMT=ICONV(SUM(CLASS.WGT<2>)*BENCH.RATE/100,'MR0')  ; * JMK48
               IF BENCH.MIN # "" THEN    ; * JMK48
                  IF CUR.BENCH.MISC.AMT < BENCH.MIN THEN     ; * JMK48
                     CUR.BENCH.MISC.AMT=BENCH.MIN  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
               IF BENCH.MAX # "" THEN    ; * JMK48
                  IF CUR.BENCH.MISC.AMT > BENCH.MAX THEN     ; * JMK48
                     CUR.BENCH.MISC.AMT=BENCH.MAX  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
            CASE BENCH.TYPE='F'
               CUR.BENCH.MISC.AMT=BENCH.RATE
            CASE BENCH.TYPE='A'
               CUR.BENCH.MISC.AMT='ASK'
            CASE 1
               CUR.BENCH.MISC.AMT=''
         END CASE

      END
      RETURN

*********************************************************************
8975: * Detail calculation after getting freight and FSC amounts
*********************************************************************
      OVR.CONTR.MISC.CHG=''
      OVR.CONTR.MISC.CHG.DESC=''
      OVR.BENCH.MISC.CHG=''
      OVR.BENCH.MISC.CHG.DESC=''
      AUDIT.ACC=0
      GOSUB 8900
      CONTR.TYPE=AUDIT.ACC.REC<3,EPOS>
      CONTR.RATE=AUDIT.ACC.REC<4,EPOS>
      CONTR.MIN=AUDIT.ACC.REC<5,EPOS>
      CONTR.MAX=AUDIT.ACC.REC<6,EPOS>
      CONTR.BASE=AUDIT.ACC.REC<7,EPOS>
      CONTR.FSC=AUDIT.ACC.REC<8,EPOS>
      CONTR.ACC=AUDIT.ACC.REC<9,EPOS>
      BEGIN CASE
         CASE CONTR.TYPE='P'
            AUD.CONTR.AMT=TOT.CONTR.AMT
            IF CONTR.FSC='I' THEN AUD.CONTR.AMT+=CONTR.FSC.AMT
*            CUR.CONTR.MISC.CHG=ICONV(AUD.CONTR.AMT*CONTR.RATE/10000,'MR0')   ; * NKH03
            CUR.CONTR.MISC.CHG = 0       ; * NKH03
            CUR.CONTR.MISC.CHG.DESC:=' (':CONTR.RATE'R26,':'%)'
         CASE CONTR.TYPE='C'
            CUR.CONTR.MISC.CHG=ICONV(TOT.WEIGHT*CONTR.RATE/100,'MR0')  ; * JMK48
            CUR.CONTR.MISC.CHG.DESC:=' (':CONTR.RATE'R26,':'CWT)'
         CASE CONTR.TYPE='F'
            CUR.CONTR.MISC.CHG=CONTR.RATE
         CASE CONTR.TYPE='A'
            CUR.CONTR.MISC.CHG='ASK'
         CASE 1
            CUR.CONTR.MISC.CHG=''
      END CASE
      IF CONTR.MIN # "" THEN             ; * JMK48
         IF CUR.CONTR.MISC.CHG < CONTR.MIN THEN    ; * JMK48
            OVR.CONTR.MISC.CHG=CUR.CONTR.MISC.CHG  ; * JMK48
            OVR.CONTR.MISC.CHG.DESC='MINIMUM'
            CUR.CONTR.MISC.CHG=CONTR.MIN           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
      IF CONTR.MAX # "" THEN             ; * JMK48
         IF CUR.CONTR.MISC.CHG > CONTR.MAX THEN    ; * JMK48
            OVR.CONTR.MISC.CHG=CUR.CONTR.MISC.CHG  ; * JMK48
            OVR.CONTR.MISC.CHG.DESC='MAXIMUM'
            CUR.CONTR.MISC.CHG=CONTR.MAX           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
      BENCH.TYPE=AUDIT.ACC.REC<10,EPOS>
      BENCH.RATE=AUDIT.ACC.REC<11,EPOS>
      BENCH.MIN=AUDIT.ACC.REC<12,EPOS>
      BENCH.MAX=AUDIT.ACC.REC<13,EPOS>
      BENCH.BASE=AUDIT.ACC.REC<14,EPOS>
      BENCH.FSC=AUDIT.ACC.REC<15,EPOS>
      BENCH.ACC=AUDIT.ACC.REC<16,EPOS>
      BEGIN CASE
         CASE BENCH.TYPE='P'
            AUD.BENCH.AMT=TOT.BENCH.AMT
            IF BENCH.FSC='I' THEN AUD.BENCH.AMT+=BENCH.FSC.AMT
*            CUR.BENCH.MISC.CHG=ICONV(AUD.BENCH.AMT*BENCH.RATE/10000,'MR0')   ; * NKH03
            CUR.BENCH.MISC.CHG = 0       ; * NKH03
            CUR.BENCH.MISC.CHG.DESC:=' (':BENCH.RATE'R26,':'%)'
         CASE BENCH.TYPE='C'
            CUR.BENCH.MISC.CHG=ICONV(TOT.WEIGHT*BENCH.RATE/100,'MR0')  ; * JMK48
            CUR.BENCH.MISC.CHG.DESC:=' (':BENCH.RATE'R26,':'CWT)'
         CASE BENCH.TYPE='F'
            CUR.BENCH.MISC.CHG=BENCH.RATE
         CASE BENCH.TYPE='A'
            CUR.BENCH.MISC.CHG='ASK'
         CASE 1
            CUR.BENCH.MISC.CHG=''
      END CASE
      IF BENCH.MIN # "" THEN             ; * JMK48
         IF CUR.BENCH.MISC.CHG < BENCH.MIN THEN    ; * JMK48
            OVR.BENCH.MISC.CHG=CUR.BENCH.MISC.CHG  ; * JMK48
            OVR.BENCH.MISC.CHG.DESC='MINIMUM'
            CUR.BENCH.MISC.CHG=BENCH.MIN           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
      IF BENCH.MAX # "" THEN             ; * JMK48
         IF CUR.BENCH.MISC.CHG > BENCH.MAX THEN    ; * JMK48
            OVR.BENCH.MISC.CHG=CUR.BENCH.MISC.CHG  ; * JMK48
            OVR.BENCH.MISC.CHG.DESC='MAXIMUM'
            CUR.BENCH.MISC.CHG=BENCH.MAX           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48

      RETURN

*********************************************************************
9000: * Return to calling Program
*********************************************************************
      IF NOT(TESTING) THEN CALL FB.CLEAR.WINDOW

      VOUT=''
      VOUT<1>=X.EX.FLAG
      VOUT<2>=AUDIT
      VOUT<3>=BILL.DATE
      VOUT<4>=TRANS.MODE
      VOUT<5>=PIECES
      VOUT<6>=TOT.WEIGHT
      VOUT<7>=AIR.MISC.CHARGE            ; * Not Used -> Passed Through
      IF NEW.WAY THEN
         IF AMT.TO.PAY='' THEN AMT.TO.PAY=AMT.ON.BILL
      END
      VOUT<8>=AMT.TO.PAY
      VOUT<9>=AMT.TO.PAY+OVERCHARGE.AMT+LOGISTICS.AMT
      IF VOUT<9>=0 THEN VOUT<9>=''
      VOUT<10>=CARRIER
      VOUT<11>=CLIENT
      VOUT<12>=IOT
      VOUT<13,1>=ORIG.ZIP
      VOUT<13,2>=ORIG.CITY
      VOUT<13,3>=ORIG.STATE
      VOUT<14,1>=DEST.ZIP
      VOUT<14,2>=DEST.CITY
      VOUT<14,3>=DEST.STATE

      * Misroute flag may have to be expanded upon
      VOUT<17>=MISROUTE
      VOUT<18>=CLASS.WGT<1>              ; * Class Details (Mv)
      VOUT<19>=CLASS.WGT<2>              ; *  Weight Details (Mv)
      VOUT<20>=REDRAW.SCR                ; * Flag to tell calling program to redraw scr
      VOUT<25>=CC
      IF TESTING THEN
         CRT@(0,22):'TESTING Mode - Press <ENTER> to Continue: ':
         INPUT NUL:
      END
      VOUT<21>=MISC.CHG<1>
      VOUT<22>=MISC.CHG<2>
      VOUT<23>=MISC.CHG<3>
*     VOUT<24>=WHY
      VOUT<26>=LOGISTICS.AMT
      VOUT<27>=OVERCHARGE.AMT
      VOUT<28>=CUT.DESC
      VOUT<30>=AUDITOR.VIEWED
      VOUT<31>=HIGHEST.CLASS             ; * Highest "Calculated" Class On Bill
      VOUT<32>=LOWEST.TABLE.CLASS        ; * "Calculated" Class of 50 on Table

      * Added the below 5 lines so that if the amount keyed matches the amount in OLA
      * this will be set to 1. I don't know how this ever worked before because
      * AMOUNT.MATCH was never set to 1 it was either null or 0. - DRD 08/11/10

      IF AMT.ON.BILL = GTOT.CONTR.AMT THEN
         AMOUNT.MATCH=1
      END ELSE
         AMOUNT.MATCH=0
      END
      VOUT<33>=AMOUNT.MATCH
      VOUT<34>=GTOT.CONTR.AMT
      VOUT<35>=FLAT.RATE
      VOUT<36>=DIFFERENCE
      VOUT<37>=CONTR.ABS.MIN
      VOUT<38>=CONTR.FSC.PERC
      VOUT<40>=DTL.VOUT<1>               ; * JMK06; * JMK07; * JMK08
      VOUT<41>=DTL.VOUT<2>               ; * JMK06; * JMK07; * JMK08
      VOUT<42>=DTL.VOUT<3>               ; * JMK06; * JMK07; * JMK08
      VOUT<43>=DTL.VOUT<4>               ; * JMK06; * JMK07; * JMK08
      VOUT<44>=DTL.VOUT<5>               ; * JMK06; * JMK07; * JMK08
      VOUT<45>=DTL.VOUT<6>               ; * JMK06; * JMK07; * JMK08
      VOUT<46>=CONTR.FSC.PARMS           ; * JMK14
      VOUT<47>=BENCH.FSC.PARMS           ; * JMK14
      VOUT<48>=AFS.FSC.PARMS             ; * JMK14
      VOUT<49>=CUT.CLASS                 ; * JMK43
      VOUT<50>=TRANSIT.TIME              ; * JMK50
      VOUT<51>=CAPACITY.LOAD
      VOUT<52>=AUDIT.WHY                 ; * JAD01
      IF U.TYPE # 'A' THEN RES.FLAG = ""           ; * NKH24
      VOUT<53>=RES.FLAG                  ; * NKH24
      VOUT<54>=HANDLING.UNITS            ;* GRB11

      RETURN

*********************************************************************
PRINT.CARRIER.ADDRESS.LETTER:
*********************************************************************
      RVIN = ORIG.CARRIER
      RVIN<2> = CLIENT
      RVIN<3> = PRO.ID
      RVOUT=''
      CALL FB.2.1.CARRIER.LETTER(RVIN, RVOUT)
      RETURN

*********************************************************************
GET.ASS.CHARGES:
*********************************************************************
*      STMT = \SSELECT FB.AUDIT.ACC WITH CLIENT = "\:CLIENT:\" AND WITH CARRIER = "\:ORIG.CARRIER:\"\             ; * NKH15
      STMT = \SSELECT FB.AUDIT.ACC WITH CLIENT = "\:AUDIT.CLIENT.ID:\" AND WITH CARRIER = "\:ORIG.CARRIER:\"\  ; * NKH15
      EXECUTE STMT CAPTURING OUTPUT
      ASS.CNT = 0

      IF @SELECTED GT 0 THEN
         EOF = "N"
         LOOP
            READNEXT ACC.ID ELSE EOF = "Y"
         UNTIL EOF = "Y" DO
            W.ACC.CODE = FIELD(ACC.ID,"*",2)
            LOCATE W.ACC.CODE IN CHOICE.ARRAY SETTING POSA ELSE
               CHOICE.ARRAY<-1> = W.ACC.CODE
               ASS.CNT += 1
            END
         REPEAT
      END

      STMT = \SSELECT FB.AUDIT.ACC WITH CLIENT = "ALL" AND WITH CARRIER = "\:ORIG.CARRIER:\"\
      EXECUTE STMT CAPTURING OUTPUT
      ASS.CNT = 0

      IF @SELECTED GT 0 THEN
         EOF = "N"
         LOOP
            READNEXT ACC.ID ELSE EOF = "Y"
         UNTIL EOF = "Y" DO
            W.ACC.CODE = FIELD(ACC.ID,"*",2)
            LOCATE W.ACC.CODE IN CHOICE.ARRAY SETTING POSA ELSE
               CHOICE.ARRAY<-1> = W.ACC.CODE
               ASS.CNT += 1
            END
         REPEAT
      END
      RETURN

*********************************************************************
SETUP.MC.DISPLAY:* Display available misc charges/Assesorials for the table.  ; *NPR08
*********************************************************************
      IF USER='DAVID' THEN CALL ELINE('SETUP STRING')
      NMC = DCOUNT(CHOICE.ARRAY,@AM)
      DISP.ARRAY = ''
      DISP.STR = ''
      DCNT = 1
      W.AVAIL.CHRS = 79

      FOR IM = 1 TO NMC
         W.MISC.CHG.CD = CHOICE.ARRAY<IM>
         W.NEXT.CODE = CHOICE.ARRAY<IM+1>
         W.AVAIL.CHRS = W.AVAIL.CHRS - (LEN(W.MISC.CHG.CD)+4)
         IF W.AVAIL.CHRS LT 7 AND W.NEXT.CODE NE "" THEN
            DISP.ARRAY<DCNT> = DISP.STR
            DISP.STR = IM "R#2":"-":W.MISC.CHG.CD : " "
            DCNT += 1
            W.AVAIL.CHRS = 71            ; * DRF01
         END ELSE
            IF W.NEXT.CODE='' THEN
               DISP.STR := IM "R#2":"-":W.MISC.CHG.CD
            END ELSE
               DISP.STR := IM "R#2":"-":W.MISC.CHG.CD : " "
            END
         END
      NEXT NMC

      IF DISP.STR NE "" THEN
         DISP.ARRAY<DCNT> = DISP.STR
      END

      RETURN

*********************************************************************
DISP.MISC.CHARGES:* Display available misc charges/Assesorials for the table.
*********************************************************************
      IF USER='DAVID' THEN CALL ELINE('PRESS BREAK')
      DLNS = DCOUNT(DISP.ARRAY,@AM)
      IF DSP.LN = DLNS THEN DSP.LN = DLNS          ; * DRF01
      IF DSP.LN > DLNS THEN DSP.LN = DLNS          ; * DRF01
      IF DISP.ARRAY<DSP.LN+1> = "" OR DSP.LN = DLNS THEN
         CRT @(0,22) : DISP.ARRAY<DSP.LN> : @(-4)
      END ELSE
         CRT @(0,22) : DISP.ARRAY<DSP.LN> : " M=More" : @(-4)
      END

      RETURN

*********************************************************************
ASK.Y.OR.N:
*********************************************************************
      YN.ANSWER = ''

Y.OR.N:

      HELP = CHAR(7):"Entry Options: [Y]-Yes [N]-No"
      CRT @(0,22):YN.MSG:@(-4)
      MASK = YN.MASK'L#1'
      Q=''
      CALL GEN.IN(LEN(YN.MSG)+1,22,MASK,'',Q,0,1,'','',2,LEN(YN.MSG)+1,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      CC+=LEN(QI)+1
      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = '1'
            QI='Y'
         CASE QI = '0'
            QI='N'
         CASE QI = 'Y'
         CASE QI = 'N'
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO Y.OR.N
      END CASE
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      YN.ANSWER = QI
      RETURN

*********************************************************************
BUILD.DETAIL.OUT:* NKH03
*********************************************************************
      CONTR.LINE=LINE
      BENCH.LINE=LINE
      * Begin NKH09
*      IF OVR.CONTR.MISC.CHG+0#0 OR OVR.BENCH.MISC.CHG+0#0 THEN
*         IF OVR.CONTR.MISC.CHG+0#0 THEN
*            WHY:=@(03,CONTR.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.CONTR.MISC.CHG.DESC
*            WHY:=@(35,CONTR.LINE):OVR.CONTR.MISC.CHG'R26#8'
*            CONTR.LINE+=1
*         END
*         IF LOGISTICS THEN
*            IF OVR.BENCH.MISC.CHG+0#0 THEN
*               WHY:=@(45,BENCH.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.BENCH.MISC.CHG.DESC
*               WHY:=@(73,BENCH.LINE):OVR.BENCH.MISC.CHG'R26#7'
*               BENCH.LINE+=1
*            END
*         END
*      END
      * End NKH09
      WHY:=@(03,CONTR.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.CONTR.MISC.CHG.DESC
      IF OVR.CONTR.MISC.CHG.DESC#'' THEN           ; * JMK63
         WHY:=@(26,CONTR.LINE):" ":OVR.CONTR.MISC.CHG.DESC   ; * JMK63
      END                                ; * JMK63
      WHY:=@(35,CONTR.LINE):CUR.CONTR.MISC.CHG'R26#8'
      IF LOGISTICS THEN
         WHY:=@(45,BENCH.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.BENCH.MISC.CHG.DESC
         IF OVR.BENCH.MISC.CHG.DESC#'' THEN        ; * JMK63
            WHY:=@(65,BENCH.LINE):" ":OVR.BENCH.MISC.CHG.DESC          ; * JMK63
         END                             ; * JMK63
         WHY:=@(73,BENCH.LINE):CUR.BENCH.MISC.CHG'R26#7'
      END
      IF CONTR.LINE > LINE THEN LINE=CONTR.LINE
      IF BENCH.LINE > LINE THEN LINE=BENCH.LINE
      NVAL=DCOUNT(DTL.VOUT<1>,@VM)       ; * JMK64
      DTL.VOUT<1,NVAL+1>=CUR.MISC.CHG.CODE         ; * JMK64
      DTL.VOUT<2,NVAL+1>=''              ; * JMK64
      DTL.VOUT<3,NVAL+1>=''              ; * JMK64
      DTL.VOUT<4,NVAL+1>=''              ; * JMK64
      DTL.VOUT<5,NVAL+1>=CUR.CONTR.MISC.CHG        ; * JMK64

      RETURN                             ; * NKH03

* Begin NKH03
*********************************************************************
BUILD.SAVE.LINE:
*********************************************************************
      IF CONTR.TYPE = 'P' THEN CUR.CONTR.MISC.CHG = 0
      IF CONTR.MIN = '' THEN CONTR.MIN = 0         ; * NKH20
      SAVE.CONTR<1,-1> = CUR.MISC.CHG.CODE
      SAVE.CONTR<2,-1> = CUR.CONTR.MISC.CHG.DESC
      SAVE.CONTR<3,-1> = CONTR.RATE
      SAVE.CONTR<4,-1> = CONTR.ACC
      SAVE.CONTR<5,-1> = CONTR.FSC
      SAVE.CONTR<6,-1> = OVR.CONTR.MISC.CHG.DESC
      SAVE.CONTR<7,-1> = CONTR.TYPE
      SAVE.CONTR<8,-1> = CUR.CONTR.MISC.CHG
      SAVE.CONTR<9,-1> = CONTR.MIN
      OVR.CONTR.MISC.CHG.DESC = ''

      IF BENCH.TYPE = 'P' THEN CUR.BENCH.MISC.CHG = 0
      IF BENCH.MIN = '' THEN BENCH.MIN = 0         ; * NKH20
      SAVE.BENCH<1,-1> = CUR.MISC.CHG.CODE
      SAVE.BENCH<2,-1> = CUR.BENCH.MISC.CHG.DESC
      SAVE.BENCH<3,-1> = BENCH.RATE
      SAVE.BENCH<4,-1> = BENCH.ACC
      SAVE.BENCH<5,-1> = BENCH.FSC
      SAVE.BENCH<6,-1> = OVR.BENCH.MISC.CHG.DESC
      SAVE.BENCH<7,-1> = BENCH.TYPE
      SAVE.BENCH<8,-1> = CUR.BENCH.MISC.CHG
      SAVE.BENCH<9,-1> = BENCH.MIN
      OVR.BENCH.MISC.CHG.DESC = ''

      LAST.LINE = LINE-1
      SAVED.LINES = 1

      RETURN
* End NKH03

*********************************************************************
GET.CCXL.INFO:* NKH08
*********************************************************************
      * Begin NKH04
      IF CARRIER > '' THEN
         READV CARRIER.SCAC FROM F.CARRIERS, CARRIER, 12 ELSE CARRIER.SCAC = ''
      END ELSE
         CARRIER.SCAC = 'ALL'
      END

      READV ORIG.COUNTRY FROM ZIPS, ORIG.ZIP, 3 ELSE
         IF NUM(ORIG.ZIP[1,1]) THEN
            ORIG.COUNTRY = 'US'
         END ELSE
            ORIG.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE ORIG.COUNTRY = 'US'
            ORIG.COUNTRY = 'USA'
         CASE ORIG.COUNTRY = 'CA'
            ORIG.COUNTRY = 'CAN'
         CASE ORIG.COUNTRY = 'MX'
            ORIG.COUNTRY = 'MEX'
      END CASE
      READV DEST.COUNTRY FROM ZIPS, DEST.ZIP, 3 ELSE
         IF NUM(DEST.ZIP[1,1]) THEN
            DEST.COUNTRY = 'US'
         END ELSE
            DEST.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE DEST.COUNTRY = 'US'
            DEST.COUNTRY = 'USA'
         CASE DEST.COUNTRY = 'CA'
            DEST.COUNTRY = 'CAN'
         CASE DEST.COUNTRY = 'MX'
            DEST.COUNTRY = 'MEX'
      END CASE
      CCVIN = ''
      CCVIN<1> = CARRIER.SCAC
      CCVIN<2> = DEST.COUNTRY
      CCVIN<3> = DEST.ZIP
      CCVIN<4> = ORIG.COUNTRY
      CCVIN<5> = ORIG.ZIP
      CCVIN<6> = CLIENT
      CALL CCXL.V2(CCVIN,CCVOUT)
      * End NKH04

      RETURN                             ; * NKH08

* Begin NKH08
*********************************************************************
CALL.TARIFF.DRIVER:
*********************************************************************

      * Begin GRB11
      IF TEMPO.CLIENT.FLG THEN
         SERVICE.TYPE=''
         IF CARRIER.SCAC = 'ALL' THEN CARRIER.SCAC = ''
         DBILL.DATE = OCONV(BILL.DATE,"DYMD[4,2,2]")
         SHIP.DATE = "2024-01-19T04:00:00Z"
         DTIME = OCONV(TIME(),"MTS")

         CONVERT " " TO "-" IN DBILL.DATE
         DBILL.DATE = DBILL.DATE:"T":DTIME:"Z"

         BEGIN CASE
            CASE IOT ="O"
               DIRECTION = "OUTBOUND"
            CASE IOT ="I"
               DIRECTION = "INBOUND"
            CASE IOT ="T"
               DIRECTION = "THIRD_PARTY"
            CASE 1
               DIRECTION = "OUTBOUND"
         END CASE

         TVIN=''
         TVIN<1>=CLIENT[2,4]
         TVIN<2>=CARRIER.SCAC
         TVIN<3>=DBILL.DATE
         TVIN<4>= CLASS.WGT<2>
         TVIN<5>=CLASS.WGT<1>
         TVIN<6>=MISC.CHG<1,1>
         TVIN<7>=MISC.CHG<1,2>
         TVIN<8>=MISC.CHG<1,3>
         TVIN<9>=MISC.CHG<1,4>
         TVIN<10>=MISC.CHG<1,5>
         TVIN<11>=MISC.CHG<1,6>
         TVIN<12>=MISC.CHG<1,7>
         TVIN<13>=ORIG.CITY
         TVIN<14>=ORIG.COUNTRY
         TVIN<15>=ORIG.ZIP
         TVIN<16>=ORIG.STATE
         TVIN<17>=DEST.CITY
         TVIN<18>=DEST.COUNTRY
         TVIN<19>=DEST.ZIP
         TVIN<20>=DEST.STATE
         TVIN<21>=DIRECTION
         TVIN<22>=SERVICE.TYPE
         IF HANDLING.UNITS ='' THEN
            HANDLING.UNITS = 0
         END
         TVIN<24>=HANDLING.UNITS
         DOUT=''
         TVOUT=''
         CALL TEMPO.CWT(TVIN,TVOUT)
         IF USER.TYPE # 'A' THEN
            LLINE = 19
            OOFFSET = 0
            ACC.CNT = DCOUNT(TVOUT<55>,@SVM)
            FOR AA = 1 TO ACC.CNT
               ACC.CODE = TVOUT<55,1,AA>
               IF ACC.CODE ='' THEN CONTINUE
               LOCATE(ACC.CODE,MISC.CHG<1>,1;ACC.POS) THEN
                  MISC.CHG<2,ACC.POS> = TVOUT<56,1,ACC.POS>*100
               END ELSE
                  MISC.CHG<1,1>= TVOUT<55,1,AA>
                  MISC.CHG<2,-1> = TVOUT<56,1,AA>*100
               END
            NEXT AA
            IF TVOUT<51,1> # '' THEN
               FSC.AMT = TVOUT<51,1>*100
               FSC.AMT = FIELD(FSC.AMT,".",1)
            END
            FOR II = 1 TO ACC.CNT
               IF II GT 3 THEN
                  OOFFSET = 23
                  LLINE=19
               END
               PRINT @(36+OOFFSET,LLINE):MISC.CHG<1,II>'R(#4 )':       ; * Charge Code
               PRINT @(41+OOFFSET,LLINE):MISC.CHG<2,II>'R26(#7 )'
               LLINE+=1
            NEXT II
         END
         GOSUB WHY.CALCS2
         RETURN TO 4888
* End GRB11
      END ELSE
         IF TARIFF.ACT.NAME = 'AFS50002' OR TARIFF.ACT.NAME = 'AFS52502' THEN    ; * NKH14
            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS52502' ELSE AFS.TARIFF.NAME='AFS50002'   ; * NKH14
            DINNATT=DCOUNT(DIN,@AM)
            FOR DINATT=1 TO DINNATT
               DIN<DINATT,7>=AFS.TARIFF.NAME
            NEXT DINATT
         END
         IF BENCH.TARIFF THEN
            CALL @BENCH.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)
            BENCH.DOUT = DOUT
         END ELSE
            CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)
            CONTR.DOUT = DOUT
         END
         BENCH.TARIFF = 0
      END
      RETURN

* End NKH08
* Begin NKH24
*********************************************************************
CHECK.ADDRESS:
*********************************************************************
      OPEN '','VEND.CUST,':AUDIT.CLIENT.ID TO F.VEND.CUST ELSE
         CALL ELINE("Cannot open VEND.CUST for client ":CLIENT)
      END

      VC.ADDR = '' ; VC.CITY = '' ; VC.STATE = '' ; VC.ZIP = '' ; RES.COM = '' ; RES.FLAG = ''
      IF NUM(VC.ZIP[1,1]) THEN           ; * US Address only
         READ VEND.CUST.REC FROM F.VEND.CUST, VC.ID THEN
            VC.ADDR = VEND.CUST.REC<3,1>
            IF NOT(NUM(VC.ADDR[1,1])) THEN
               VC.ADDR = VEND.CUST.REC<3,2>
            END
            IF NOT(NUM(VC.ADDR[1,1])) THEN VC.ADDR = ''
            VC.CITY = VEND.CUST.REC<5>
            VC.STATE = VEND.CUST.REC<6>
            VC.ZIP = VEND.CUST.REC<7>
         END

         S.VIN = '' ; S.VOUT = ''
         S.VIN<1> = CLIENT
         S.VIN<2> = VC.ADDR
         S.VIN<3> = VC.CITY
         S.VIN<4> = VC.STATE
         S.VIN<5> = VC.ZIP

         IF VC.ADDR > "" AND U.TYPE = "A" THEN
            CALL SMARTY.SUB(S.VIN,S.VOUT)
         END

         RES.FLAG = S.VOUT<1>
         IF RES.FLAG = '' THEN RES.FLAG = 'E'

      END

      RETURN
      * Begin GRB11
*********************************************************************
WHY.CALCS2:
*********************************************************************
      IND.POS = 0

      IF TVOUT<1> = "" THEN
         TEMPO.ERROR = "NO RESPONSE FROM TEMPO"
      END ELSE
         TEMPO.ERROR = ""
      END
      RESPONSE.CNT = DCOUNT(TVOUT<1>,@VM)
      CARRIER.EXP.ARRY=''
      IF RESPONSE.CNT = 1 THEN IND.POS = 1
      IF TVOUT<1,1> = '' THEN IND.POS = 2
      FAK= TVOUT<54,IND.POS>
      WEIGHT= TVOUT<52,IND.POS>
      CHARGE = TVOUT<3,IND.POS>
      TRATE = TVOUT<6,IND.POS>
      FUEL.AMT = TVOUT<51,IND.POS>
      ACC.CD = TVOUT<55,IND.POS>
      ACC.DESC = TVOUT<57,IND.POS>
      ACC.CHG = TVOUT<56,IND.POS>
      ACC.TOT = SUM(TVOUT<56,IND.POS>)
      TTOTAL = TVOUT<3,IND.POS> + TVOUT<51,IND.POS> + ACC.TOT
      DEFICIT.WEIGHT = TVOUT<4,IND.POS>
      BILLED.WEIGHT = TVOUT<40,IND.POS>
      FUEL.PCT = TVOUT<58,IND.POS>
      PALLET.CNT = TVOUT<59,IND.POS>
      RESPONSE.CNT = DCOUNT(TVOUT<1>,@VM)
      CARRIER.EXP.ARRY=''
      IF RESPONSE.CNT GT 2 THEN
         GOSUB BUILD.CARRIERS.TOTALS
      END

      WHY=''
      CL=78-LEN(PACK.NAME[1,26])
      WHY:= @( 0, 0):PROG.DESC
      WHY:= @(24, 0):'Auditor:'
      WHY := @(CL, 0):PACK.NAME[1,26]
      WHY:=@(0,01):@(-3):'Client : ':CLIENT:' ':CLIENT.NAME  ; * NPR05
      WHY:=@(0,02):@(-3):'Origin : ':ORIG.ZIP:' ':ORIG.CITY:', ':ORIG.STATE:NULL
      WHY:=@(39,02):@(-3):'Pro: ':PRO.ID
      WHY:=@(65,02):'Pallets ':PALLET.CNT
      WHY:=@(0,03):'Dest   : ':DEST.ZIP:' ':DEST.CITY:', ':DEST.STATE:NULL
      WHY:=@(39,03):@(-3):'Ship Date : ':SHIP.DATE[1,10]
      BEGIN CASE
         CASE IOT='I' ; IOT.WORDS='--IB---'
         CASE IOT='O' ; IOT.WORDS='--OB---'
         CASE IOT='T' ; IOT.WORDS='--TP---'
      END CASE
      WHY:=@(0,4):IOT.WORDS
      CONTR.STRING='|':STR('-',34):'|'

      L.CONTR.STRING=LEN(CONTR.STRING)
      CONTR.WORDS="Contract-":TVOUT<5,2>

      L.CONTR.TARIFF=LEN(CONTR.WORDS)
      CONTR.START=INT((L.CONTR.STRING-L.CONTR.TARIFF)/2)
      CONTR.STRING[CONTR.START+1,L.CONTR.TARIFF]=CONTR.WORDS
      WHY:=@(7,4):CONTR.STRING:NULL
      IF TEMPO.ERROR # "" THEN
         CALL ELINE(TEMPO.ERROR)

      END ELSE
         IF CARRIER.EXP.ARRY # '' THEN
            WHY:=@(0,06):"----- Approved Carriers -----"
            EXP.ARRY.CNT = DCOUNT(CARRIER.EXP.ARRY<1>,@VM)
            FOR II = 1 TO EXP.ARRY.CNT
               WHY:=@(0,07+II):CARRIER.EXP.ARRY<2,II>
               WHY:=@(10,07+II):CARRIER.EXP.ARRY<1,II>
            NEXT II
         END ELSE

            **  IF LOGISTICS THEN
            ** BENCH.STRING='|':STR('-',33):'|'
            ** L.BENCH.STRING=LEN(BENCH.STRING)
            **  BENCH.WORDS="Benchmark-":BENCH.TARIFF
            **    IF CDN.ROUTE THEN BENCH.WORDS=CHANGE(BENCH.WORDS,'AFS50002','AFS52502')    ; * NKH11
            ** L.BENCH.TARIFF=LEN(BENCH.WORDS)
            ** BENCH.START=INT((L.BENCH.STRING-L.BENCH.TARIFF)/2)
            **  BENCH.STRING[BENCH.START+1,L.BENCH.TARIFF]=BENCH.WORDS
            **  WHY:=@(45,4):BENCH.STRING:NULL
            **END
            WHY:=@(00,05):"Ln":NULL
            WHY:=@(03,05):"Cls":NULL
            WHY:=@(07,05):"Ctr":NULL
            WHY:=@(12,05):"Wgt":NULL
            WHY:=@(17,05):"Rate":NULL
            WHY:=@(23,05):"Charge":NULL
            WHY:=@(30,05):"Disc":NULL
            WHY:=@(37,05):"Amount":NULL
            WHY:=@(03,06):FAK
            WHY:=@(12,06):WEIGHT
            WHY:=@(17,06):TRATE
            WHY:=@(23,06):CHARGE
            WHY:=@(37,06):CHARGE
*   LINE=LINE+1
            IF DEFICIT.WEIGHT GT 0 THEN
               WHY:=@(3,07):"DEFICIT"
               WHY:=@(12,07):DEFICIT.WEIGHT
            END
            WHY:=@(0,08):'BILL TOTAL'
            WHY:=@(12,08):BILLED.WEIGHT

            WHY:=@(10,LINE):'FUEL (':FUEL.PCT:'%)':NULL
            WHY:=@(38,LINE):FUEL.AMT'R2'

            ACC.CNT = DCOUNT(ACC.CD,@SVM)
            FOR II = 1 TO ACC.CNT
               IF ACC.CD<1,1,II> # '' THEN
                  LINE=LINE+1
                  TACC.DES = FIELD(ACC.DESC<1,1,II>,";",1)
                  WHY:=@(5,LINE):ACC.CD<1,1,II>
                  WHY:=@(10,LINE):TACC.DES
                  WHY:=@(38,LINE):ACC.CHG<1,1,II>'R2'
               END
            NEXT II
            LINE=LINE+1
            WHY:=@(15,LINE):"TOTAL"
            WHY:=@(37,LINE):TTOTAL'R2'
**   IF LOGISTICS THEN
            **    WHY:=@(45,05):"Bch":NULL
            **   WHY:=@(51,05):"Wgt":NULL
            **  WHY:=@(55,05):"Rate":NULL
            *  WHY:=@(61,05):"Charge":NULL
            **  WHY:=@(68,05):"Disc":NULL
            **   WHY:=@(74,05):"Amount":NULL
            ** END
         END
      END
      RETURN
      * BELOW FOR BENCHMARK
      PRINT WHY
      CRT @(0,23)
      PRINT
      PRINT
      PRINT WHY:
      CRT @(0,23):"Press <Enter> to Continue: ":
      INPUT NUL:
      QI=''                              ; * Act as if null Was Entered
      **  IF PROCESS.MODE='Quote' THEN
      **    CALL ELINE("Results here may vary slightly from the Web due to rounding.")           ; * JMK44
      ** END ELSE                              ; * JMK44
*         CALL ELINE("Press [ENTER] to continue.")                   ; * NKH04
      **   CALL ELINE(" ")                    ; * NKH04
      ** END                                   ; * JMK44
      AUDITOR.TEXT=''
      ** GOSUB RESET.VARIABLES
      ** PRINT SCREEN.DSP:
      **  GOSUB PAINT.SCR.DATA
      **  GO 200
      RETURN
      CONTR.TIMES=DCOUNT(CONTR.DOUT<1,1>,@SVM)
      TIMES=DETAIL.TIMES
      IF CONTR.TIMES > TIMES THEN TIMES=CONTR.TIMES
      IF LOGISTICS THEN
         BENCH.TIMES=DCOUNT(BENCH.DOUT<1,1>,@SVM)
         IF BENCH.TIMES > TIMES THEN TIMES=BENCH.TIMES
      END
      LINE=5
      TOT.CONTR.DISC=0                   ; ** Contract Discount Accumulator
      TOT.BENCH.DISC=0                   ; ** Benchmark Discount Accumulator
      FOR DET.CNT = 1 TO TIMES
         LINE=LINE+1
         WHY:=@(00,LINE):DET.CNT'R%2':NULL
         WHY:=@(02,LINE):CLASSES<1,DET.CNT>'R#4':NULL
         WHY:=@(06,LINE):CONTR.CLASSES<1,1,DET.CNT>'R#4':NULL
         WHY:=@(10,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
         WHY:=@(15,LINE):CONTR.DOUT<1,1,DET.CNT>'R26#6':NULL           ; * Contr Rate
         IF CONTR.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN           ; * Catch Zero Rates
            CALL ELINE("Error $0 Rate on Contract Calculations Line ":DET.CNT)
            AUDIT='U'
            ERR='' ; GOSUB 8000
            GO 500
         END
         CUR.CONTR.CHARGE=CONTR.DOUT<1,2,DET.CNT>
         CUR.CONTR.DISC=CONTR.DISC<CONTR.DISC.ATT,DET.CNT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
         CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Contr Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Contract Disc %
         WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL           ; * Amt (Chg-Disc Amt)
         IF LOGISTICS THEN
            WHY:=@(45,LINE):BENCH.CLASSES<1,1,DET.CNT>'R#3':NULL
            WHY:=@(48,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
            WHY:=@(53,LINE):BENCH.DOUT<1,1,DET.CNT>'R26#6':NULL        ; * Rate
            IF BENCH.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN        ; * Catch Zero Rates
               CALL ELINE("Error $0 Rate on Benchmark Calculations Line ":DET.CNT)
               AUDIT='U'
               ERR='' ; GOSUB 8000
               GO 500
            END
            CUR.BENCH.CHARGE=BENCH.DOUT<1,2,DET.CNT>
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Charge
            CUR.BENCH.DISC=BENCH.DISC<BENCH.DISC.ATT,DET.CNT>          ; * JMK54
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Bench Amount (Chg-Disc Amt)
         END
      NEXT DET.CNT
      IF CONTR.BILL.TYPE='DEFICIT' OR BENCH.BILL.TYPE='DEFICIT' THEN
         LINE=LINE+1
         IF CONTR.BILL.TYPE='DEFICIT' THEN
            CUR.CONTR.CHARGE=CONTR.DOUT<1,9>
            CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
            CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
            TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
            CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
            WHY:=@(3,LINE):'DEFICIT':NULL
            WHY:=@(10,LINE):CONTR.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(15,LINE):CONTR.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
         END
         IF BENCH.BILL.TYPE='DEFICIT' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,9>
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK54
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(48,LINE):BENCH.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(53,LINE):BENCH.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
         END
      END
      IF CONTR.BILL.TYPE='FLATRATE' OR BENCH.BILL.TYPE='FLATRATE' THEN           ; * JMK20
         LINE=LINE+1                     ; * JMK20
         IF CONTR.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.CONTR.CHARGE=CONTR.FLAT<1,5>       ; * JMK20
            CUR.CONTR.AMT=CONTR.FLAT<1,5>          ; * JMK20
            TOT.CONTR.DISC=0             ; * JMK20
            WHY:=@(3,LINE):CONTR.FLAT<1,6>:NULL    ; * JMK20
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * JMK20
         END                             ; * JMK20
         IF BENCH.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.BENCH.CHARGE=BENCH.FLAT<1,5>       ; * JMK20
            CUR.BENCH.AMT=BENCH.FLAT<1,5>          ; * JMK20
            TOT.BENCH.DISC=0             ; * JMK20
            WHY:=@(45,LINE):BENCH.FLAT<1,6>:NULL   ; * JMK24
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * JMK20
         END                             ; * JMK20
      END                                ; * JMK20
      LINE=LINE+1
      WHY:=@(0,LINE):'BILL TOTAL':NULL
      WHY:=@(10,LINE):CONTR.DOUT<1,4>'R#5':NULL    ; * Total Weight
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CUR.CONTR.CHARGE=CONTR.DOUT<1,5>
         CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC=CUR.CONTR.DISC.AMT
         WHY:=@(15,LINE):"TMIN"'R#6':NULL
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Tariff Minimum Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Disc (on Lowest Class)
      END ELSE
         WHY:=@(21,LINE):CONTR.DOUT<1,5>'R26#8':NULL         ; * Total Charges
      END
      TOT.CONTR.DISC.AMT=(TOT.CONTR.DISC/10000)'R0'
      TOT.CONTR.AMT=CONTR.DOUT<1,5>-TOT.CONTR.DISC.AMT
      WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
      TOT.BENCH.AMT=TOT.CONTR.AMT        ; * JMK14
      IF LOGISTICS THEN
         WHY:=@(48,LINE):BENCH.DOUT<1,4>'R#5':NULL           ; * Total Weight
         IF BENCH.BILL.TYPE='MINIMUM' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,5>
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK54
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC=CUR.BENCH.DISC.AMT
            WHY:=@(53,LINE):"TMIN"'R#6':NULL
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Tariff Minimum Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; *Disc (on Lowest Class)
         END ELSE
            WHY:=@(59,LINE):BENCH.DOUT<1,5>'R26#8':NULL      ; * Total Charges
         END
         TOT.BENCH.AMT=BENCH.DOUT<1,5>-OCONV((TOT.BENCH.DISC/10000),'MR0')
         WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
      END
      IF TOT.CONTR.AMT+0=0 THEN
         CALL ELINE("Contract Side of Bill Not Rated, Try an adjacent zip code")
         AUDIT='U'
         ERR='' ; GOSUB 8000
         GO 500
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT+0=0 THEN
            CALL ELINE("Benchmark Side of Bill Not Rated, Try an adjacent zip code")
            AUDIT='U'
            ERR='' ; GOSUB 8000
            GO 500
         END
      END
* End NKH06
********************************************************************
BUILD.CARRIERS.TOTALS:
********************************************************************
      FOR II = 1 TO RESPONSE.CNT
         ACC.TOTAL = 0
         CAR = TVOUT<1,II>
         IF CAR # "" THEN
            GROSS = TVOUT<3,II>
            FUEL = TVOUT<51,II>
            SV.CNT = DCOUNT(TVOUT<55,II>,@SVM)
            FOR ISV = 1 TO SV.CNT
               ACC.AMT = TVOUT<56,II,ISV>
               ACC.TOTAL = ACC.TOTAL + ACC.AMT
            NEXT ISV
            CARRIER.EXP.ARRY<1,-1> = CAR
            CARRIER.EXP.ARRY<2,-1> = GROSS + FUEL +ACC.TOTAL
         END
      NEXT II

      RETURN
      * End GRB11
