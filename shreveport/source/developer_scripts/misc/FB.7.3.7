* PROGRAM FB.7.3.7
* Program to print State & City Truckload Traffic Analysis
*
* FREIGHT BILLING PACKAGE
*
* AUTHOR: Owen Holman
* DATE: June 2, 1995
*
* FORMATTING MODS:
*   Jim Row - July 5, 1995
*   Cody Henderson - Oct. 15, 1996
* 04/08/97 Brian Requested that The Combined report does not print
*                he stated that it is a waste of paper
* 012612 - DFP01 - ADD PDF PRINT CAPABILITIES
*
***********************************************************************
*
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE FILE.DEFS INC_DIVISION.CODES
*
* Initialize variables
*
*CH   COPIES=1
*
      PROMPT''
      CALL CHANNEL(CH.NUM)
      CALL GET.USER(USER.NAME)
      STATUS=''
      PROG.NAME='FB.7.3.7'
      PROG.DESC='State & City Truckload Traffic Analysis'
      PACK.NAME='Freight Billing'
      PREV.STATE=''
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'FB.7.3.7' ; UPL.VOUT = ''       ; * NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
      ERRMSG=''
      STATE.TOT.REC=''
      STATES.ENTERED=''
      MAT DIV.REC = ''
      ORIG.ZIP='' ; ORIG.CITY='' ; ORIG.STATE=''
      DARRAY=''                          ; * DFP01
      ARRAYCT=6                          ; * DFP01
      MAKE.FILE = 0                      ; * DFP01
      TOTAL.ITEMS=0                              ; * DFP01

*
* Diminsion arrays
*
      DIM MONTHS(12)
*
* Open files
*
      OPEN '','BCUST' TO F.CLIENT ELSE
         CALL OPEN.ABORT('BCUST',PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT("FB.TABLES",PROG.NAME)
      END
      READ TL.ARRAY FROM F.TABLES,'TL.REPORTS' ELSE TL.ARRAY=''
      MAX.TL.TIMES=DCOUNT(TL.ARRAY<1>,@VM)
      TL.ARRAY=CHANGE(TL.ARRAY,"XYZ",MAX.TL.TIMES)
      *TL.ARRAY<1>="Select Criteria"
      *TL.ARRAY<2>="Screen Description (XYZ) is replaced with number of passes"
      *TL.ARRAY<3>="Report Heading Description"
      OPEN '','FB.CONTROL' TO F.CONTROL ELSE
         CALL OPEN.ABORT('FB.CONTROL',PROG.NAME)
      END
      OPEN '','FBWORK':CH.NUM TO F.WORK ELSE
         EXECUTE 'CREATE-FILE FBWORK':CH.NUM:' 1 1001' PASSLIST CAPTURING OUTPUT
         OPEN '','FBWORK':CH.NUM TO F.WORK ELSE
            CALL OPEN.ABORT('FBWORK':CH.NUM,PROG.NAME)
         END
      END
      OPEN 'DICT','FBWORK':CH.NUM TO F.DICT.WORK ELSE
         CALL OPEN.ABORT('DICT FBWORK':CH.NUM,PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS ELSE
         CALL OPEN.ABORT('ZIPS',PROG.NAME)
      END
************************************
* BEGIN DFP01                      *
************************************
      OPEN '','BCTRL' TO F.BCTRL ELSE
         CALL OPEN.ABORT('BCTRL',PROG.NAME)
      END
      READ BCTRL.REC FROM F.BCTRL,USER.NAME ELSE BCTRL.REC=''
      IF BCTRL.REC#'' THEN
         F.NUM=BCTRL.REC<8>
      END ELSE
         F.NUM = ''
      END
      ORIG.F.NUM = F.NUM
      OPEN '','FLEX.DEVICES' TO F.DEVICES ELSE
         CALL OPEN.ABORT('FLEX.DEVICES',PROG.NAME)
      END
      USER.PW=BCTRL.REC<1>
      USER.EMAIL=BCTRL.REC<20>
      OPEN '','VOC' TO F.VOC ELSE
         GOSUB CALL.NET.ADMIN
         CALL ELINE('UNABLE TO OPEN VOC FILE')
         STOP
      END

      READ BILLDATA.REC FROM F.VOC,"BILLDATA" ELSE
         GOSUB CALL.NET.ADMIN
         CALL ELINE('UNABLE TO OPEN "VOC BILLDATA"')
         STOP
      END

      BILLDATA.REC<2>:='\':USER.NAME
      WRITE BILLDATA.REC ON F.VOC,"BILLDATA.":USER.NAME ELSE
         GOSUB CALL.NET.ADMIN
         CALL ELINE("YOUR USER NAME '":USER.NAME:"' IS NOT IN THE BILLDATA FOLDER - PLEASE SEE OWEN/KEITH/DAVID")
         STOP
      END
      OPEN '','BILLDATA.':USER.NAME TO BILLDATA ELSE
         GOSUB CALL.NET.ADMIN
         CALL ELINE('UNABLE TO OPEN "BILLDATA.":USER.NAME')
         STOP
      END
*****************************************
      MATREAD MONTHS FROM F.CONTROL,'MONTHS' ELSE
         CALL READ.ABORT('FB.CONTROL','MONTHS',PROG.NAME)
      END
      READ LI.CODES FROM F.TABLES,'LI.CODES' ELSE
         CALL ELINE("Unable to Read Line Item Code Table")
         LI.CODES=''
      END
      READ STATE.REC FROM F.ZIPS,'3.DIGIT' ELSE
         CALL ELINE("Unable to rea states record")
         STATE.REC=''
      END
*
* Create work file dictionary items
*
      TEMP=''
      TEMP<1>='A'
      TEMP<2>='1'
      TEMP<9>='R'
      TEMP<10>='1'
      WRITE TEMP ON F.DICT.WORK,'IO.STATUS'
      TEMP<1>='S'
      TEMP<2>=0
      TEMP<8>='G0*1'
      TEMP<9>='L'
      TEMP<10>=2
      WRITE TEMP ON F.DICT.WORK,'STATE'
      TEMP<8>='G1*1'
      TEMP<10>=25
      WRITE TEMP ON F.DICT.WORK,'CITY'
      TEMP<8>='G3*1'
      TEMP<9>='R'
      TEMP<10>=5
      WRITE TEMP ON F.DICT.WORK,'DIVISION'
*
*  WORK FILE CONSISTS OF ITEMS WITH THE FOLLOWING DETAIL
*  Variable Attribute Description.....................................
*               ID    State*City*I/O/B*Division   - Carrier Totals
*                     State*"~ALL"*I/O/B*Division - State Sub-Total
*                     "TOTAL*~ALL"*I/O/B*Division - Divisions Totals
*                     "TOTAL*~ALL"*I/O/B*"ALL"    - Grand Totals
*               1     Shipment Type I-nbound O-utbound B-oth
*               2     Number of Shipments (Bills) Including Minimums
*   CAR.FRT     3     Total Carrier Freight Amount (FRT,TMIN,DEF)
*   CAR.NOT     4     Total Carrier Negotiable Charges (NOA,SS,HAZ,NOG)
*   MIN.FLG     5     Number of Minimum Shipments (MIN)
*   MIN.FRT     6     Total Carrier Minimum Charges (MIN)
*   NON.FRT     7     Total Carrier OTHER Charges (All Others)
*   AFS.FRT     8     Total AFS Freight Amount (FRT,TMIN,DEF)
*               9     Total Carrier Discount Amount
*   TOT.PIC    10     Total Pieces (FRT,TMIN,MIN)
*   TOT.WGT    11     Total Weight (FRT,TMIN,MIN)
*              12     Number of Shipments with mileage > 0
*              13     Total Miles
*   HAZ.FLG    14     Total Hazmat Shipments
*   HAZ.PIC    15     Number of Hazmat Pieces
*   CLS.WGT    16     Total of (Class*Weight) for Calc of Weighted Class
*
* Display screen heading
*
30:   CALL AFS.SCR.HEAD(CO.ID,FILE.ID,'',PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
***********************************************************************
*
* Get client number to process
*
50:   HELP.PROMPT="Enter the client number you want to process. S=Search. ''=Exit."
      CRT @(0,3):@(-3)
      CALL GEN.IN(0,3,'Enter Client Number #####','',Q,0,20,'','',1,-5,3,0,QI,HELP.PROMPT,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' ! QI='EX' ! QI='X'
            GO 9999
         CASE ALPHA(QI)
            CALL SOUNDEX.DISPLAY(QI,'BCUST','SDX.CLIENTS,NAME',2,ITEM.LIST)
            CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
            IF ITEM.LIST='' ! DCOUNT(ITEM.LIST<1>,@VM) > 1 THEN GOTO 50
            IF NOT(NUM(ITEM.LIST<1,1>)) THEN GOTO 50
            Q=ITEM.LIST<1,1>'R%5'
      END CASE
      CLIENT.ID=Q'R%5'
      IF CLIENT.ID[1,2]#99 THEN
         CALL ELINE('Invalid entry. Client Number must begin with 99.')
         GOTO 50
      END
      READ CLIENT.REC FROM F.CLIENT,CLIENT.ID ELSE
         CALL ELINE('ERROR - Client ':CLIENT.ID:' not on file.')
         GOTO 50
      END
      CLIENT.NAME=CLIENT.REC<2>
      CRT @(20,3):CLIENT.ID:" - ":CLIENT.NAME:
      FYBD=CLIENT.REC<29>
      OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIVS ELSE
         CALL OPEN.ABORT("DIVISION.CODES,":CLIENT.ID,PROG.NAME)
      END
*
* Get current period beginning and ending dates
*
100:  HELP='Enter the data entry beginning date.'
      CALL GEN.IN(0,5,'Data entry beginning date.  ':DATE()'D2/','DATE',BEG.DATE,0,8,'','',1,-8,5,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='X' THEN GOTO 50
      IF QI='EX' THEN GO 9999
      IF QI='' THEN BEG.DATE=DATE()
      CRT @(28,5):BEG.DATE'D2/'
*
* Get current period ending date
*
200:  HELP='Enter the data entry ending date.'
      CALL GEN.IN(0,7,'Data entry ending date.     ':DATE()'D2/','DATE',END.DATE,0,8,'','',1,-8,7,0,QI,HELP,0,23)
      IF QI='X' THEN GOTO 100
      IF QI='EX' THEN GO 9999
      IF QI='' THEN END.DATE=DATE()
      IF END.DATE LT BEG.DATE THEN
         CALL ELINE('Invalid ending date.')
         GOTO 200
      END
      CRT @(28,7):END.DATE'D2/'
*
250:  HELP="Enter the number of copies. 'X'=Back 'EX'=Exit"
      CALL GEN.IN(0,9,'Enter number of copies: 1','',Q,0,2,'','',2,24,9,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            Q=1
         CASE QI='X'
            GOTO 200
         CASE QI='EX'
            GOTO 9999
         CASE NUM(QI)
            IF INT(QI)#QI THEN
               CALL ELINE('Number of copies can only be a whole number. Try again.')
               GOTO 250
            END ELSE
               Q=QI
            END
         CASE 1
            CALL ELINE('Invalid entry. Entry must be a whole number.')
            GOTO 250
      END CASE
      COPIES=Q

255:  HELP="Enter the States to include or Enter for ALL. 'X'=Back 'EX'=Exit"
      IF STATES.ENTERED='' THEN
         MASK='Enter States: ':STR('-',66)
      END ELSE
         MASK='Enter States: ':CHANGE(STATES.ENTERED,@AM,' ')
      END
      CALL GEN.IN(0,11,MASK,'',Q,0,66,'','',2,14,11,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            IF STATES.ENTERED='' THEN
               Q='ALL'
            END
         CASE QI='X'
            IF STATES.ENTERED='' THEN
               CRT @(14,11):@(-4):STR('-',66):
            END
            GOTO 250
         CASE QI='EX'
            GOTO 9999
         CASE 1
            TIMES=DCOUNT(Q,' ')
            FOR COUNT=1 TO TIMES
               STATES.ENTERED<COUNT>=FIELD(Q,' ',COUNT)
               LOCATE STATES.ENTERED<COUNT> IN STATE.REC<1> SETTING POS ELSE
                  CALL ELINE("Could not locate state '":STATES.ENTERED<COUNT>:"' - Please re-enter")
                  STATES.ENTERED=''
                  GO 255
               END
            NEXT COUNT
      END CASE
      COPIES=Q
      IF STATES.ENTERED='' THEN STATES.ENTERED=Q
      CRT @(14,11):CHANGE(STATES.ENTERED,@AM,' '):@(-4):
*
300:  HELP="X=Change. EX=Exit. RETURN=Continue."
      CALL GEN.IN(0,22,'Enter selection please. --','',Q,0,2,'','',0,-2,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='X'
            CRT @(0,22):@(-3):
            GO 255
         CASE QI='EX'
            GO 9999
         CASE QI=''
            NULL
         CASE 1
            CALL ELINE('Invalid entry. Must be X, EX, or RETURN.')
            GOTO 300
      END CASE
*
* Start processing
*
400:  TEXT="Selecting Bills to Process - Please Wait."
      CALL CENTER(TEXT,80)
      CRT @(0,13):@(-3):TEXT
*
* Get Client Record
*
      READ CLIENT.REC FROM F.CLIENT,CLIENT.ID ELSE CLIENT.REC=''
      MILES=1
      WEIGHTS=0
      CLIENT.NAME=CLIENT.REC<2>
      FYBD=CLIENT.REC<29>
*
* Create beginning of year and monthly descriptions
*
      BEG.MO=OCONV(BEG.DATE,'DM')
      BEG.YR=OCONV(BEG.DATE,'DY')
      FISCAL.MO=FIELD(FYBD,'.',1)'R0'
      IF BEG.MO < FISCAL.MO THEN
         FISCAL.YR=BEG.YR-1
      END ELSE
         FISCAL.YR=BEG.YR
      END
*
      END.MO=OCONV(END.DATE,'DM')
      BEG.MO=MONTHS(BEG.MO)
      END.MO=MONTHS(END.MO)
      IF BEG.MO=END.MO THEN
         MONTH.DESC=BEG.MO
      END ELSE
         MONTH.DESC=BEG.MO:' to ':END.MO
      END
*
      CRT @(0,2):@(-3)
      LINE='Processing Client ':CLIENT.ID:' ':CLIENT.NAME
      CALL CENTER(LINE,80)
      CRT @(0,10):LINE
      CRT
*
* Build divisions array
*
      MASTER.DIV.ARR=''
      DONE = 0
      SELECT F.DIVS
      LOOP
         READNEXT DIV.ID ELSE DONE = 1
      UNTIL DONE = 1 DO
         LOCATE(DIV.ID,MASTER.DIV.ARR;POS;'AL') ELSE NULL
         INS DIV.ID BEFORE MASTER.DIV.ARR<POS>
      REPEAT
*
* Select data for current client
*
      OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILLS ELSE
         CALL OPEN.ABORT("FB.BILLS.HIST,":CLIENT.ID,PROG.NAME)
      END
*
* Set-up printer
*
      WIDTH=132
      CTR=INT(WIDTH/2)
      ESC=CHAR(27)
      IF USER.NAME='BRIAN' THEN
         EXECUTE 'SP-ASSIGN F50,':COPIES           ; * Default to Brians Printer
         GOTO 475
      END
************************************
* BEGIN DFP01                      *
************************************
450:*
      READ PRT.TAB FROM F.DEVICES, "PRINTERS.SL" ELSE PRT.TAB = ""     ; *NPR02

      LOCATE F.NUM IN PRT.TAB<1> SETTING POS THEN  ; *NPR02
         PRT.DESC = PRT.TAB<3,POS>       ; *NPR02
         LAS.PRT= "F":F.NUM              ; *NPR02
      END ELSE
         CALL ELINE("Could not find print que ":F.NUM:" - Aborting!")
         STOP
      END                                ; *NPR02

      HELP="Print to - {":PRT.DESC :"}. [Y]es, [S]elect, [F]ile, [X] or EX."
      CALL GEN.IN(0,22,'Enter selection please. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='X'
            BACK.FLAG=1
            GOTO 400
         CASE QI='EX'
            GOTO 9999
         CASE QI='Y' OR QI = ""
            NULL
         CASE QI='N' OR QI = 'S'
            EXECUTE \SET-LASER\
            GOSUB GET.QUEUE
            IF NOT(NUM(F.NUM)) THEN
               CALL ELINE("Problem encountered with printer selection. Call IT!")
               GOTO 9999
            END ELSE
               CALL AFS.SCR.HEAD(CO.ID,FILE.ID,'',PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
               CRT @(0,2):STR('=',79)
               DATA "Y"
               GOTO 450
            END
         CASE QI="F"
            MAKE.FILE=1
            GOTO 500
         CASE 1
            CALL ELINE('Invalid entry. Must be [Y]es, [S]elect Printer [X] or EX=Exit."')
            GOTO 450
      END CASE

      CRT @( 0,15):'Printer         : ' : PRT.DESC:@(-3)
475:***
      IF PRT.DESC[1,3]='PDF' THEN
         VIN='' ; VOUT=''                ; *DFP01
         COPIES=1
         HELP="To Password Protect the PDF File: Enter a Password"
         CALL GEN.IN(0,22,'PDF Password or [ENTER]:','',Q,0,15,'','',2,25,22,0,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
*           CASE QI='X'
*              GOTO 450
            CASE QI='EX'
               STOP
            CASE INDEX(QI,' ',1)
               CALL ELINE("Spaces aren't allowed in the password")
               GOTO 475
            CASE 1
               Q=QI
         END CASE
         PDF.PW=Q
         CRT @(25,13):PDF.PW:
         IF PDF.PW='' THEN CRT "(No PW Specified - PDF File will NOT be protected)"
      END                                ; *DFP01
************************************
* END DFP01                        *
************************************

      EXECUTE 'TERM ,,,,,,132,60' CAPTURING OUTPUT
      PRINTER ON
************************************
* BEGIN DFP01                      *
************************************
      IF PRT.DESC[1,3]='PDF' THEN
         EXECUTE 'TERM' CAPTURING TERM.CHARS       ; *DFP01
         CONVERT CHAR(32) TO @VM IN TERM.CHARS     ; *DFP01
         VC=DCOUNT(TERM.CHARS<3>,@VM)    ; *DFP01
         PRINTER.WIDTH=TERM.CHARS<3,VC>  ; *DFP01
         EXECUTE "TERM ,,,,,,132,60"     ; *DFP01
         PDF.STMT="!PDF"
         PDF.STMT:=" /f":CLIENT.ID:".PDF"
         IF PDF.PW#'' THEN PDF.STMT:="?OWNER=ownerpassword":USER.PW:"?USER=":PDF.PW:"?PERMISSIONS="
         PDF.STMT:=" /e":USER.EMAIL
         PDF.STMT:=" /jTS7.3.7-":CLIENT.ID
         PRINT PDF.STMT
      END ELSE
         LASER = ''
         LASER<1 >= 0                    ; * Portrait
         LASER<2 >= 6                    ; * Lines per inch
         LASER<3 >= 61                   ; * Page length
         LASER<4 >= 16.7                 ; * Characters per inch
         LASER<5 >= 0
         LASER<6 >= 0
         LASER<7 >= 1
         LASER<8 >= 0
         MARGIN = 0
         PRINT ESC:"E"
         PRINT ESC:"&l":LASER<1>:"O":    ; * Set portrait
         PRINT ESC:"&l":LASER<2>:"D":    ; * Lines per inch
         PRINT ESC:"&l":LASER<3>:"F":    ; * Page length
         PRINT ESC:"(s":LASER<4>:"h":    ; * Set pitch
         PRINT LASER<5>:"p":             ; * Proportional printing
         PRINT LASER<6>:"s":             ; * Italics off
         PRINT "0T":                     ; * Line Printer Font
         PRINT ESC:"&l":LASER<7>:"H"     ; * Bin selection
         PRINT ESC:"&a":MARGIN:"L"
         PRINT ESC:'"g':LASER<8>:'F'     ; * Paper output
      END                                ; * DFP01
500:  * DFP01
      TL.TIMES=1
      * TL.ARRAY<1,9>=' WITH 2="T"'
      * TL.ARRAY<3,9>='Truckload - Third party for states: ':CHANGE(STATES.ENTERED,@VM,' ')
      * MAX.TL.TIMES+=1
NEXT.TL:****
      NO.DIV.FLAG=0
      DIV.ARR=MASTER.DIV.ARR
      STMT='SELECT FB.BILLS.HIST,':CLIENT.ID
*     BEGIN CASE
*       CASE TL.TIMES=1
*         STMT:= ' WITH 70 = "TLF"'
*         TEXT = 'Pass 1 of 5 - Truckload - Flat Bed Bills'
*       CASE TL.TIMES=2
*         STMT:= ' WITH 70 = "TLV"'
*         TEXT = 'Pass 2 of 5 - Truckload - Van Bills'
*       CASE TL.TIMES=3
*         STMT:= ' WITH 70 = "TLR"'
*         TEXT = 'Pass 3 of 5 - Truckload - Refrigerated Bills Combined'
*       CASE TL.TIMES=4
*         STMT:= ' WITH 70 = "TLP"'
*         TEXT = 'Pass 4 of 5 - Truckload - Partial Shipments'
*       CASE TL.TIMES=5
*         STMT:= ' WITH 70 = "TL]"'
*         TEXT = 'Pass 5 of 5 - Truckload - Flat Bed, Van, Refrigerated, & Partial Combined'
*       CASE 1
*         CRT 'Invalid TL.TIMES COUNT.... Programming Error'
*  	       ABORT
*     END CASE
      STMT:=TL.ARRAY<1,TL.TIMES>
      TEXT =TL.ARRAY<2,TL.TIMES>
      CALL CENTER(TEXT,80)
      CRT @(0,15):@(-3):TEXT
      STMT:=' AND WITH 86 GE "':OCONV(BEG.DATE,'D2/'):'"'
      STMT:=' AND WITH 86 LE "':OCONV(END.DATE,'D2/'):'"'
      EXECUTE STMT PASSLIST CAPTURING OUTPUT
      IF SYSTEM(11) ELSE
*BB*     IF TL.TIMES < 5 THEN TL.TIMES+=1 ; GO NEXT.TL
         IF TL.TIMES < MAX.TL.TIMES THEN TL.TIMES+=1 ; GO NEXT.TL
         GO 9999
      END
      NUM.ITEMS = @SELECTED
      COUNTER=0
*
* Clear work file
*
      CLEARFILE F.WORK
*
* Get next record
*
      DONE = 0
      LOOP
         READNEXT HIST.ID ELSE DONE = 1
      UNTIL DONE = 1 DO
         COUNTER=COUNTER+1
         CALL PROG.BAR(21,COUNTER,NUM.ITEMS,PER)
         IF FIELD(HIST.ID,'*',3) GT 0 ELSE
            READ HIST.REC FROM F.BILLS,HIST.ID THEN
               PRO=FIELD(HIST.ID,'*',2)
               START=LEN(PRO)-1
*
* Update carrier total record in work file
*
               IO.STAT=HIST.REC<2>
               DIVISION=HIST.REC<9>
               IF DIVISION='' THEN DIVISION='NONE' ; NO.DIV.FLAG=1
               IF IO.STAT#'I' AND IO.STAT#'O' AND IO.STAT#'T' THEN
                  CALL ELINE('Bill ':HIST.ID:' has and invalid I/O Code Used O')
                  IO.STAT='O'
               END
               ORIG.ZIP=''
               BEGIN CASE
                  CASE IO.STAT='I'
                     ZIP=HIST.REC<3>     ; ** Origin Zip
                     CITY=HIST.REC<27>   ; ** Origin City
                     STATE=HIST.REC<25>  ; ** Origin State
                  CASE IO.STAT='O'
                     ZIP=HIST.REC<4>     ; ** Destination Zip
                     CITY=HIST.REC<28>   ; ** Destination City
                     STATE=HIST.REC<26>  ; ** Destination State
                  CASE IO.STAT='T'
                     ORIG.ZIP=HIST.REC<3>
                     ORIG.CITY=HIST.REC<27>
                     ORIG.STATE=HIST.REC<25>
                     ZIP=HIST.REC<4>
                     CITY=HIST.REC<28>
                     STATE=HIST.REC<26>
                  CASE 1
                     CALL ELINE('Bill ':HIST.ID:' has an invalid I/O Code... Used O')
                     CITY=HIST.REC<28>   ; ** Destination City
                     STATE=HIST.REC<26>  ; ** Destination State
               END CASE
               CITY=TRIM(CITY)
               STATE=TRIM(STATE)
               IF STATE='' THEN STATE='NOF'
               IF CITY='' THEN CITY='City Not On File'
*
               IF ORIG.ZIP#'' THEN
*              WORK.ID=ORIG.STATE:'*':ORIG.CITY:'*':IO.STAT:'*':DIVISION:"*":ZIP:"*":STATE:"*":CITY
                  WORK.ID=ORIG.STATE:'*':ORIG.CITY:'*':IO.STAT:'*':DIVISION
               END ELSE
                  WORK.ID=STATE:'*':CITY:'*':IO.STAT:'*':DIVISION
               END
               READ WORK.REC FROM F.WORK,WORK.ID ELSE WORK.REC=IO.STAT
*
               IF ORIG.ZIP#'' THEN
*              WORK.ALL.ID=ORIG.STATE:'*':ORIG.CITY:'*':IO.STAT:'*ALL':"*":ZIP:"*":STATE:"*":CITY
                  WORK.ALL.ID=ORIG.STATE:'*':ORIG.CITY:'*':IO.STAT:'*ALL'
               END ELSE
                  WORK.ALL.ID=STATE:'*':CITY:'*':IO.STAT:'*ALL'
               END
               READ WORK.ALL.REC FROM F.WORK,WORK.ALL.ID ELSE WORK.ALL.REC=IO.STAT
*
               IF ORIG.ZIP#'' THEN
*              BOTH.ID=ORIG.STATE:"*":ORIG.CITY:'*B*':DIVISION:"*":ZIP:"*":STATE:"*":CITY
                  BOTH.ID=ORIG.STATE:"*":ORIG.CITY:'*B*':DIVISION
               END ELSE
                  BOTH.ID=STATE:"*":CITY:'*B*':DIVISION
               END
               READ BOTH.REC FROM F.WORK,BOTH.ID ELSE BOTH.REC='B'
*
               IF ORIG.ZIP#'' THEN
*              BOTH.ALL.ID=ORIG.STATE:'*':ORIG.CITY:'*B*ALL':"*":ZIP:"*":STATE:"*":CITY
                  BOTH.ALL.ID=ORIG.STATE:'*':ORIG.CITY:'*B*ALL'
               END ELSE
                  BOTH.ALL.ID=STATE:'*':CITY:'*B*ALL'
               END
               READ BOTH.ALL.REC FROM F.WORK,BOTH.ALL.ID ELSE BOTH.ALL.REC='B'
*
               IF ORIG.ZIP#'' THEN
*              SUB.WORK.ID=ORIG.STATE:'*~ALL*':IO.STAT:'*':DIVISION:"*":ZIP:"*":STATE:"*":CITY
                  SUB.WORK.ID=ORIG.STATE:'*~ALL*':IO.STAT:'*':DIVISION
               END ELSE
                  SUB.WORK.ID=STATE:'*~ALL*':IO.STAT:'*':DIVISION
               END
               READ SUB.WORK.REC FROM F.WORK,SUB.WORK.ID ELSE SUB.WORK.REC=IO.STAT
*
               IF ORIG.ZIP#'' THEN
*              SUB.WORK.ALL.ID=ORIG.STATE:'*~ALL*':IO.STAT:"*ALL":"*":ZIP:"*":STATE:"*":CITY
                  SUB.WORK.ALL.ID=ORIG.STATE:'*~ALL*':IO.STAT:"*ALL"
               END ELSE
                  SUB.WORK.ALL.ID=STATE:'*~ALL*':IO.STAT:"*ALL"
               END
               READ SUB.WORK.ALL.REC FROM F.WORK,SUB.WORK.ALL.ID ELSE SUB.WORK.ALL.REC=IO.STAT
*
               IF ORIG.ZIP#'' THEN
*              SUB.BOTH.ID=ORIG.STATE:"*~ALL*B*":DIVISION:"*":ZIP:"*":STATE:"*":CITY
                  SUB.BOTH.ID=ORIG.STATE:"*~ALL*B*":DIVISION
               END ELSE
                  SUB.BOTH.ID=STATE:"*~ALL*B*":DIVISION
               END
               READ SUB.BOTH.REC FROM F.WORK,SUB.BOTH.ID ELSE SUB.BOTH.REC="B"
*
               IF ORIG.ZIP#'' THEN
*              SUB.BOTH.ALL.ID=ORIG.STATE:"*~ALL*B*ALL":"*":ZIP:"*":STATE:"*":CITY
                  SUB.BOTH.ALL.ID=ORIG.STATE:"*~ALL*B*ALL"
               END ELSE
                  SUB.BOTH.ALL.ID=STATE:"*~ALL*B*ALL"
               END
               READ SUB.BOTH.ALL.REC FROM F.WORK,SUB.BOTH.ALL.ID ELSE SUB.BOTH.ALL.REC="B"
*
               TOT.WORK.ID='TOTAL*~ALL*':IO.STAT:'*':DIVISION
               READ TOT.WORK.REC FROM F.WORK,TOT.WORK.ID ELSE
                  TOT.WORK.REC=IO.STAT
               END
*
               TOT.WORK.ALL.ID='TOTAL*~ALL*':IO.STAT:'*ALL'
               READ TOT.WORK.ALL.REC FROM F.WORK,TOT.WORK.ALL.ID ELSE
                  TOT.WORK.ALL.REC=IO.STAT
               END
*
               TOT.BOTH.ID='TOTAL*~ALL*B*':DIVISION
               READ TOT.BOTH.REC FROM F.WORK,TOT.BOTH.ID ELSE
                  TOT.BOTH.REC='B'
               END
*
               TOT.BOTH.ALL.ID='TOTAL*~ALL*B*ALL'
               READ TOT.BOTH.ALL.REC FROM F.WORK,TOT.BOTH.ALL.ID ELSE
                  TOT.BOTH.ALL.REC='B'
               END
*
* Update Arrays with Data
*
               VIN=''
               VIN<2>=CLIENT.REC<79>
               CALL FB.TRAF.SURV(VIN,VOUT,LI,LI.CODES,HIST.REC)
               ATT=2 ; VALUE=VOUT<2> ; GOSUB 8000  ; * Number of Shipments
               ATT=3 ; VALUE=VOUT<3> ; GOSUB 8000  ; * Carrier Charges (Freight)
               ATT=4 ; VALUE=VOUT<4> ; GOSUB 8000  ; * Carrier Charges (Negot.)
               ATT=5 ; VALUE=VOUT<5> ; GOSUB 8000  ; * Number of (Abs Min) Shptms
               ATT=6 ; VALUE=VOUT<6> ; GOSUB 8000  ; * (Abs MIN) Amount
               ATT=7 ; VALUE=VOUT<7> ; GOSUB 8000  ; * (Miscellaneous) Amount
               ATT=8 ; VALUE=VOUT<8> ; GOSUB 8000  ; * AFS Charges on (Freight)
               ATT=9 ; VALUE=VOUT<9> ; GOSUB 8000  ; * Carrier Discount Amount
               ATT=10 ; VALUE=VOUT<10> ; GOSUB 8000          ; * Total Pieces
               ATT=11 ; VALUE=VOUT<11> ; GOSUB 8000          ; * Total Weight
               IF HIST.REC<19>+0=0 ELSE
                  ATT=12 ; VALUE=1 ; GOSUB 8000    ; * Numb of Shmpts With Mileage
                  ATT=13 ; VALUE=HIST.REC<19> ; GOSUB 8000   ; * Milage on Bill
               END
               ATT=14 ; VALUE=VOUT<14> ; GOSUB 8000          ; * Numb of Shmpts W/Haz Mat
               ATT=15 ; VALUE=VOUT<15> ; GOSUB 8000          ; * Number of Haz Mat Pieces
               ATT=16 ; VALUE=VOUT<16> ; GOSUB 8000          ; * Class*Wgt (For Wght Avg.)
               IF ORIG.ZIP#'' THEN
                  ATT=17 ; VALUE=ORIG.ZIP ; GOSUB 8050       ; * Add Single Zip to Array
               END ELSE
                  ATT=17 ; VALUE=ZIP ; GOSUB 8050  ; * Add Single Zip to Array
               END
               IF ORIG.ZIP#'' THEN
                  WORK.REC<20>=ZIP
                  WORK.REC<21>=STATE
                  WORK.REC<22>=CITY
                  WORK.ALL.REC<20>=ZIP
                  WORK.ALL.REC<21>=STATE
                  WORK.ALL.REC<22>=CITY
                  BOTH.REC<20>=ZIP
                  BOTH.REC<21>=STATE
                  BOTH.REC<22>=CITY
                  BOTH.ALL.REC<20>=ZIP
                  BOTH.ALL.REC<21>=STATE
                  BOTH.ALL.REC<22>=CITY
                  SUB.WORK.REC<22>=CITY
                  SUB.WORK.REC<20>=ZIP
                  SUB.WORK.REC<21>=STATE
                  SUB.WORK.ALL.REC<20>=ZIP
                  SUB.WORK.ALL.REC<21>=STATE
                  SUB.WORK.ALL.REC<22>=CITY
                  SUB.BOTH.REC<20>=ZIP
                  SUB.BOTH.REC<21>=STATE
                  SUB.BOTH.REC<22>=CITY
                  SUB.BOTH.ALL.REC<20>=ZIP
                  SUB.BOTH.ALL.REC<21>=STATE
                  SUB.BOTH.ALL.REC<22>=CITY
                  TOT.WORK.REC<20>=ZIP
                  TOT.WORK.REC<21>=STATE
                  TOT.WORK.REC<22>=CITY
                  TOT.WORK.ALL.REC<20>=ZIP
                  TOT.WORK.ALL.REC<21>=STATE
                  TOT.WORK.ALL.REC<22>=CITY
                  TOT.BOTH.REC<20>=ZIP
                  TOT.BOTH.REC<21>=STATE
                  TOT.BOTH.REC<22>=CITY
                  TOT.BOTH.ALL.REC<20>=ZIP
                  TOT.BOTH.ALL.REC<21>=STATE
                  TOT.BOTH.ALL.REC<22>=CITY
               END
*
* Update totals
*
               WRITE WORK.REC ON F.WORK,WORK.ID
               WRITE WORK.ALL.REC ON F.WORK,WORK.ALL.ID
               WRITE BOTH.REC ON F.WORK,BOTH.ID
               WRITE BOTH.ALL.REC ON F.WORK,BOTH.ALL.ID
               WRITE SUB.WORK.REC ON F.WORK,SUB.WORK.ID
               WRITE SUB.WORK.ALL.REC ON F.WORK,SUB.WORK.ALL.ID
               WRITE SUB.BOTH.REC ON F.WORK,SUB.BOTH.ID
               WRITE SUB.BOTH.ALL.REC ON F.WORK,SUB.BOTH.ALL.ID
               WRITE TOT.WORK.REC ON F.WORK,TOT.WORK.ID
               WRITE TOT.WORK.ALL.REC ON F.WORK,TOT.WORK.ALL.ID
               WRITE TOT.BOTH.REC ON F.WORK,TOT.BOTH.ID
               WRITE TOT.BOTH.ALL.REC ON F.WORK,TOT.BOTH.ALL.ID
            END
         END
SKIP.BILL:****
      REPEAT
      IF NO.DIV.FLAG=1 THEN DIV.ARR<-1>='NONE'
      NUMB.DIVS=DCOUNT(DIV.ARR,CHAR(254))
*     IF NUMB.DIVS>1 THEN DIV.ARR<-1>='ALL' ; * Print Total Page
*
* Print report
*
** Get next division code
*
1000: DIVISION=DIV.ARR<1>
      DIV.ARR=DELETE(DIV.ARR,1,0,0)
*
2000: CALL FB.RPT.STAT(CLIENT.ID,STATUS)
      IF STATUS='' THEN
         IF DIV.ARR NE '' THEN           ; * Check for additional divisions
            STATUS=''
            GOTO 1000
         END
*BB*     IF TL.TIMES < 5 THEN TL.TIMES+=1 ; GO NEXT.TL
         IF TL.TIMES < MAX.TL.TIMES THEN TL.TIMES+=1 ; GO NEXT.TL
         GO 9999
      END
      IF STATUS='B' THEN GO 2000         ; ** Skip Both Status
      * IF STATUS='T' & TL.TIMES NE 9 THEN GO 2000
      H5=''
      BEGIN CASE
         CASE DIVISION='ALL'
            BEGIN CASE
               CASE STATUS='I'
                  CSZ="Inbound shipments to all divisions combined'L'"
                  H5="Inbound shipments to all divisions combined"
               CASE STATUS='O'
                  CSZ="Outbound shipments from all divisions combined'L'"
                  H5="Outbound shipments from all divisions combined"
               CASE STATUS='T'
                  CSZ="Third Party shipments from all divisions combined'L'"
                  H5="Third Party shipments from all divisions combined"
               CASE STATUS='B'
                  CSZ="All shipments both inbound and outbound to all divisions combined'L'"
                  H5="All shipments both inbound and outbound to all divisions combined"
            END CASE
         CASE DIVISION='NONE'            ; ** No Divisions
            BEGIN CASE
               CASE STATUS='I'
                  CSZ="Inbound shipments"
                  H5=CSZ
               CASE STATUS='O'
                  CSZ="Outbound shipments"
                  H5=CSZ
               CASE STATUS='T'
                  CSZ="Third Party shipments"
                  H5=CSZ
               CASE STATUS='B'
                  CSZ="All shipments both inbound and outbound"
                  H5=CSZ
            END CASE
            CSZ=''
         CASE 1
            MATREAD DIV.REC FROM F.DIVS, DIVISION ELSE MAT DIV.REC = ''
            READV CITY FROM F.ZIPS, DIV.ZIP, 1 ELSE CITY='~ Unknown ~'
            READV STATE FROM F.ZIPS, DIV.ZIP, 2 ELSE STATE='~ Unknown ~'
            CSZ='For division ':DIVISION:' - ':CITY:', ':STATE:"'L'"
            H5='For division ':DIVISION:' - ':CITY:', ':STATE
            BEGIN CASE
               CASE STATUS='I'
                  CSZ="Inbound shipments to division ":DIVISION:' - ':CITY:', ':STATE:"'L'"
                  H5="Inbound shipments to division ":DIVISION:' - ':CITY:', ':STATE
               CASE STATUS='O'
                  CSZ="Outbound shipments from division ":DIVISION:' - ':CITY:', ':STATE:"'L'"
                  H5="Outbound shipments from division ":DIVISION:' - ':CITY:', ':STATE
               CASE STATUS='T'
                  CSZ="Third Party shipments from division ":DIVISION:' - ':CITY:', ':STATE:"'L'"
                  H5="Third Party shipments from division ":DIVISION:' - ':CITY:', ':STATE
               CASE STATUS='B'
                  CSZ="All shipments both inbound and outbound for division ":DIVISION:' - ':CITY:', ':STATE:"'L'"
                  H5="All shipments both inbound and outbound for division ":DIVISION:' - ':CITY:', ':STATE
            END CASE
      END CASE
*
      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"
      BAR=STR(CHAR(32),WIDTH)
      H1=PROG.NAME:BAR[1,LEN(BAR)-LEN(PROG.DESC)]
      H1:=PROG.DESC:BAR[1,LEN(BAR)-LEN(TIMEDATE())]:TIMEDATE()
      DARRAY<1,1>=H1
*
      TITLE='For Client: ':CLIENT.ID:' ':CLIENT.NAME
      TITLE=CHANGE(TITLE,"'","''")       ; * To Correct Single Quote Problem
      L.TAB=CTR-(LEN(TITLE)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):TITLE
*     R.TAB=(WIDTH-LEN(TEMP))-9
*     HEAD2=TEMP:SPACE(R.TAB):"PAGE 'PL'"
      R.TAB=(WIDTH-LEN(TEMP))-20
      HEAD2=TEMP:SPACE(R.TAB):USER.NAME'L(#10 )':"PAGE 'PL'"
      H2=CO.NAME:BAR[1,70]:TITLE:BAR[1,108]:USER.NAME
      DARRAY<2,1>=H2
*     HEAD3='Entered from ':BEG.DATE'D2/':' to ':END.DATE'D2/'
*     CALL CENTER(HEAD3,WIDTH)
*     HEAD3=HEAD3:"'L'"
*     BEGIN CASE
*       CASE TL.TIMES=1
*         HEAD3="Truckload - Flat Bed'CL'"
*       CASE TL.TIMES=2
*         HEAD3="Truckload - Van'CL'"
*       CASE TL.TIMES=3
*         HEAD3="Truckload - Refrigerated'CL'"
*       CASE TL.TIMES=4
*         HEAD3="Truckload - Partial Shipments'CL'"
*       CASE TL.TIMES=5
*         HEAD3="Truckload - Flat Bed, Van, Refrigerated, & Partial Combined'CL'"
*       CASE 1
*         CRT 'Invalid TL.TIMES COUNT.... Programming Error'
*         ABORT
*     END CASE
      HEAD3=TL.ARRAY<3,TL.TIMES>:"'CL'"
      H3=BAR:TL.ARRAY<3,TL.TIMES>
      DARRAY<3,1>=H3
*
*     HEAD4=HEAD4:' - ':MONTH.DESC
*     CALL CENTER(HEAD4,WIDTH)
*     HEAD4=HEAD4:"'L'"
      HEAD5=STR('-',WIDTH):"'L'"
      IF TOTAL.ITEMS<NUM.ITEMS THEN
         ARRAYCT+=1
         DARRAY<ARRAYCT,1>=H5
      END
*
      IF MAKE.FILE THEN
         DARRAY<4,1>='Line ''L#8'
         IF IO.STAT='T' & TL.TIMES=9 THEN
            DARRAY<4,2>=' Orig''L#7'
            DARRAY<4,3>='State - City''L#14'
         END
         IF IO.STAT='T' & TL.TIMES=9 THEN
            DARRAY<4,2>=' Dest''L#7'
         END ELSE
            DARRAY<4,2>='  Zip''L#7'
         END
*
         DARRAY<4,3>='State - City''L#22'
*
         DARRAY<4,5>='Number''L#6'
         DARRAY<5,5>='  of''L#6'
         DARRAY<6,5>='Shpmts''L#6'
*
         DARRAY<4,6>=' Shp''L#4'
         DARRAY<5,6>=' W/''L#4'
         DARRAY<6,6>=' Haz''L#4'
*
         DARRAY<4,7>='  Numb''L#6'
         DARRAY<5,7>='   of''L#6'
         DARRAY<6,7>='  Pcs''L#6'
*
         DARRAY<4,8>=' Avg''L#4'
         DARRAY<5,8>=' Pcs''L#4'
         DARRAY<6,8>='  ''L#4'
*
         DARRAY<4,9>='Average''L#7'
         DARRAY<5,9>=' Weight''L#7'
         DARRAY<6,9>=' ''L#7'
*
         DARRAY<4,10>='Total''L#6'
         DARRAY<5,10>='Weight''L#6'
*
         DARRAY<4,11>=' Total''L#6'
         DARRAY<5,11>=' Miles''L#6'
*
         DARRAY<4,12>=' Avg''L#5'
         DARRAY<5,12>='Miles''L#5'
      END ELSE
         HEAD6='Line ''L#8'
         HEAD7=' ''L#6'
         HEAD8=' ''L#6'
*
         IF IO.STAT='T' & TL.TIMES=9 THEN
            HEAD6:=' Orig''L#7'
            HEAD7:=' ''L#7'
            HEAD8:=' ''L#7'
            *
            HEAD6:='State - City''L#14'
            HEAD7:=' ''L#4'
            HEAD8:=' ''L#4'
         END
         IF IO.STAT='T' & TL.TIMES=9 THEN
            HEAD6:=' Dest''L#7'
         END ELSE
            HEAD6:='  Zip''L#7'
         END
         HEAD7:=' ''L#7'
         HEAD8:=' ''L#7'
*
         IF IO.STAT='T' & TL.TIMES=9 THEN
            HEAD6:='State - City''L#20'
            HEAD7:=' ''L#32'
            HEAD8:=' ''L#32'
         END ELSE
            HEAD6:='State - City''L#22'
            HEAD7:=' ''L#24'
            HEAD8:=' ''L#24'
         END
*
*     HEAD6:=SPACE(4):'  Gross''L#8'
*     HEAD7:=SPACE(4):' Freight''L#8'
*     HEAD8:=SPACE(4):' Charges''L#8'
*
*     HEAD6:=SPACE(2):' Minimum''L#8'
*     HEAD7:=SPACE(2):' Charges''L#8'
*     HEAD8:=SPACE(2):' ''L#8'
*
*     HEAD6:='    Non''L#11'
*     HEAD7:='  Freight''L#11'
*     HEAD8:='  Charges''L#11'
*
*     HEAD6:=SPACE(1):'Average''L#7'
*     HEAD7:=SPACE(1):'Charge''L#7'
*     HEAD8:=SPACE(1):' ''L#7'
*
         HEAD6:=SPACE(1):'Number''L#6'
         HEAD7:=SPACE(1):'  of''L#6'
         HEAD8:=SPACE(1):'Shpmts''L#6'
*
         HEAD6:=SPACE(4):' Shp''L#4'
         HEAD7:=SPACE(4):' W/''L#4'
         HEAD8:=SPACE(4):' Haz''L#4'
*
         HEAD6:=SPACE(3):'  Numb''L#6'
         HEAD7:=SPACE(3):'   of''L#6'
         HEAD8:=SPACE(3):'  Pcs''L#6'
*
         HEAD6:=SPACE(3):' Avg''L#4'
         HEAD7:=SPACE(3):' Pcs''L#4'
         HEAD8:=SPACE(3):'  ''L#4'
*
         HEAD6:=SPACE(3):'Average''L#7'
         HEAD7:=SPACE(3):' Weight''L#7'
         HEAD8:=SPACE(3):' ''L#7'
*
         HEAD6:=SPACE(5):'Total''L#6'
         HEAD7:=SPACE(5):'Weight''L#6'
         HEAD8:=SPACE(5):' ''L#6'
*
*     HEAD6:=SPACE(2):' Avg''L#5'
*     HEAD7:=SPACE(2):'Class''L#5'
*     HEAD8:=SPACE(2):' ''L#5'
*
         HEAD6:=SPACE(2):' Total''L#6'
         HEAD7:=SPACE(2):' Miles''L#6'
         HEAD8:='  ''L#6'
*
         HEAD6:=SPACE(2):' Avg''L#5'
         HEAD7:=SPACE(2):'Miles''L#5'
         HEAD8:=SPACE(2):' ''L#5'
*
         HEAD6:="'L'"
         HEAD7:="'L'"
         HEAD8:="'L'"
*
         HEAD9=STR('-',WIDTH):"'L'"
*
         HED=HEAD1:HEAD2:HEAD3:CSZ:HEAD5:HEAD6:HEAD7:HEAD8:HEAD9
         HEADING HED
      END
*
** Select data
*
      COUNTER=0
      PREC='SSELECT FBWORK':CH.NUM:' WITH DIVISION = "':DIVISION
      PREC=PREC:'" AND WITH IO.STATUS = "':STATUS
      IF STATES.ENTERED#'ALL' THEN
         TIMES=DCOUNT(STATES.ENTERED,@AM)
         IF TIMES=0 THEN TIMES=1
         FOR COUNT=1 TO TIMES
            IF COUNT=1 THEN
               PREC:='" AND WITH STATE EQ "':STATES.ENTERED<COUNT>
            END ELSE
               PREC:='" OR WITH IO.STATUS = "':STATUS
               PREC:='" AND WITH STATE EQ "':STATES.ENTERED<COUNT>
            END
         NEXT COUNT
      END

      PREC=PREC:'" BY STATE BY CITY'
      EXECUTE PREC PASSLIST CAPTURING OUTPUT
      IF SYSTEM(11) ELSE
         * If No Items Selected then Skip to next select
         GO 2000
      END
      READ TOTAL.REC FROM F.WORK,'TOTAL*~ALL*':STATUS:'*':DIVISION ELSE
         TOTAL.REC=''
      END
      TOTAL.ITEMS+=TOTAL.REC<2> ; * DFP01
*
      DONE = 0
      LOOP
         READNEXT ID ELSE DONE = 1
      UNTIL DONE = 1 DO
         STATE=FIELD(ID,'*',1)
         CITY=FIELD(ID,'*',2)
         IF STATE='TOTAL' ELSE
            READ REC FROM F.WORK,ID THEN
               DEST.ZIP=REC<20>
               DEST.STATE=REC<21>
               DEST.CITY=REC<22>
               ZIP=REC<17>
               IF CITY='~ALL' THEN
                  IF MAKE.FILE ELSE
                     PRINT STR('-',WIDTH)
                  END
                  STATE.CITY=STATE:' - TOTAL'
               END ELSE
                  STATE.CITY=STATE:' - ':CITY
               END
               COUNTER=COUNTER+1
               GOSUB BUILD.DET.LINE
               IF MAKE.FILE ELSE
                  PRINT LINE
                  IF FIELD(ID,'*',2)='~ALL' THEN PRINT ''
               END
            END
         END
      REPEAT
*
** Print total line
*
      IF MAKE.FILE ELSE
         IF SYSTEM(4) < 6 THEN PAGE
         PRINT STR('=',WIDTH)
      END
      BEGIN CASE
         CASE STATUS='I'
            STATE.CITY='Total Inbound Freight'
         CASE STATUS='O'
            STATE.CITY='Total Outbound Freight'
         CASE STATUS='T'
            STATE.CITY='Total 3rd Party Freight'
         CASE STATUS='B'
            STATE.CITY='Total Inbound & Outbound'
         CASE 1
            STATE.CITY=''                ; ** Should Never Happen
      END CASE
      REC=TOTAL.REC
      ZIP=''
      COUNTER=''
      GOSUB BUILD.DET.LINE
      IF MAKE.FILE THEN
         ARRAYCT+=2
         DARRAY<ARRAYCT,1>= "NOTE: Freight Bills with 0 Miles have been EXCLUDED from Average Miles and Cost Per Mile."
         ARRAYCT+=1
      END ELSE
         PRINT LINE
         PRINT
         PRINT "NOTE: Freight Bills with 0 Miles have been EXCLUDED from Average Miles and Cost Per Mile."
      END
      GOTO 2000
8000:* Accumulate Arrays
      WORK.REC<ATT> +=VALUE
      WORK.ALL.REC<ATT> +=VALUE
      BOTH.REC<ATT> +=VALUE
      BOTH.ALL.REC<ATT> +=VALUE
      SUB.WORK.REC<ATT> +=VALUE
      SUB.WORK.ALL.REC<ATT>+=VALUE
      SUB.BOTH.REC<ATT> +=VALUE
      SUB.BOTH.ALL.REC<ATT>+=VALUE
      TOT.WORK.REC<ATT> +=VALUE
      TOT.WORK.ALL.REC<ATT>+=VALUE
      TOT.BOTH.REC<ATT> +=VALUE
      TOT.BOTH.ALL.REC<ATT>+=VALUE
      RETURN
8050:* Update Arrays
      WORK.REC<ATT> =VALUE
      WORK.ALL.REC<ATT> =VALUE
      BOTH.REC<ATT> =VALUE
      BOTH.ALL.REC<ATT> =VALUE
      SUB.WORK.REC<ATT> =VALUE
      SUB.WORK.ALL.REC<ATT>=VALUE
      SUB.BOTH.REC<ATT> =VALUE
      SUB.BOTH.ALL.REC<ATT>=VALUE
      TOT.WORK.REC<ATT> =VALUE
      TOT.WORK.ALL.REC<ATT>=VALUE
      TOT.BOTH.REC<ATT> =VALUE
      TOT.BOTH.ALL.REC<ATT>=VALUE
      RETURN
BUILD.DET.LINE:***
      IF MAKE.FILE THEN
         ARRAYCT+=1 ; VM=1
         DARRAY<ARRAYCT,VM>=COUNTER'R#4':'  '
         VM+=1
         DARRAY<ARRAYCT,VM>=ZIP'R#5':' '
         VM+=1
         IF IO.STAT='T' & TL.TIMES=9 & STATE.CITY#'Total 3rd Party Freight' THEN
            DARRAY<ARRAYCT,VM>=STATE.CITY'L#19'
         END ELSE
            DARRAY<ARRAYCT,VM>=STATE.CITY'L#23'
         END
         VM+=1
         IF IO.STAT='T' & TL.TIMES=9 THEN
            IF STATE.CITY=STATE:' - TOTAL' THEN
            END ELSE
               IF STATE.CITY='Total 3rd Party Freight' THEN
               END ELSE
                  DARRAY<ARRAYCT,VM>=DEST.ZIP'R#6':' ':DEST.STATE'L#2':' - ':DEST.CITY'L#13'
               END
            END
         END
         VM+=1
         DARRAY<ARRAYCT,VM>=REC<2>'R0#7'           ; * Num of Shipments
         VM+=1
         DARRAY<ARRAYCT,VM>=REC<14>'R0,#8'         ; * Num of Shipments W/Hazmat
         VM+=1
         DARRAY<ARRAYCT,VM>=REC<10>'R0,#9'         ; * Num of Pieces
         VM+=1
         IF REC<2>+0=0 THEN VAR=0 ELSE   ; * Average Pieces
            VAR=(REC<10>/REC<2>)
         END
         DARRAY<ARRAYCT,VM>=VAR'R0#7'
         VM+=1
         IF REC<2>+0=0 THEN VAR=0 ELSE   ; * Average Weight
            VAR=(REC<11>/REC<2>)
         END
         DARRAY<ARRAYCT,VM>=VAR'R0,#10'
         VM+=1
         DARRAY<ARRAYCT,VM>=(REC<11>)'R0,#11'      ; * Total Weight
         VM+=1
         DARRAY<ARRAYCT,VM>=REC<13>'R0,#8'         ; * Total Miles
         VM+=1
         IF REC<12>+0=0 THEN VAR=0 ELSE  ; * Average Miles
            VAR=(REC<13>/REC<12>)
         END
         DARRAY<ARRAYCT,VM>=VAR'R0,#7'
      END ELSE
         LINE=''
         LINE:=COUNTER'R#4':'  '
*      IF IO.STAT='T' & STATE.CITY#'Total 3rd Party Freight' THEN
         LINE:=ZIP'R#5':' '
         IF IO.STAT='T' & TL.TIMES=9 & STATE.CITY#'Total 3rd Party Freight' THEN
            LINE:=STATE.CITY'L#19'
         END ELSE
            LINE:=STATE.CITY'L#23'
         END
*      IF IO.STAT='T' & STATE.CITY#'Total 3rd Party Freight' THEN
*     LINE:=(REC<3>+REC<4>)'R26,#12'; * Gross Freight Charges
*     LINE:=REC<6>'R26,#10' ; * Minimum Charges
*     LINE:=REC<7>'R26,#11' ; * Non Freight Charges
*     IF REC<2>+0=0 THEN VAR=0 ELSE ; * Average Charge
*       VAR=((REC<3>+REC<4>+REC<6>)/REC<2>)
*     END
*     LINE:=VAR'R26,#9'
         IF IO.STAT='T' & TL.TIMES=9 THEN
            IF STATE.CITY=STATE:' - TOTAL' THEN
               LINE:=SPACE(25)
            END ELSE
               IF STATE.CITY='Total 3rd Party Freight' THEN
                  LINE:=SPACE(21)
               END ELSE
                  LINE:=DEST.ZIP'R#6':' '
                  LINE:=DEST.STATE'L#2':' - ':DEST.CITY'L#13'
               END
            END
         END
         LINE:=REC<2>'R0#7'              ; * Number of Shipments
         LINE:=REC<14>'R0,#8'            ; * Number of Shipments W/Hazmat
         LINE:=REC<10>'R0,#9'            ; * Number of Pieces
         IF REC<2>+0=0 THEN VAR=0 ELSE   ; * Average Pieces
            VAR=(REC<10>/REC<2>)
         END
         LINE:=VAR'R0#7'
         IF REC<2>+0=0 THEN VAR=0 ELSE   ; * Average Weight
            VAR=(REC<11>/REC<2>)
         END
         LINE:=VAR'R0,#10'
         LINE:=(REC<11>)'R0,#11'         ; * Total Weight
*     IF REC<11>+0=0 THEN VAR=0 ELSE ; * Average Class
*       VAR=(REC<16>/REC<11>)
*     END
*     LINE:=VAR'R1,#7'
         LINE:=REC<13>'R0,#8'            ; * Total Miles
         IF REC<12>+0=0 THEN VAR=0 ELSE  ; * Average Miles
            VAR=(REC<13>/REC<12>)
         END
         LINE:=VAR'R0,#7'
      END
      RETURN

GET.QUEUE:                               ; *DFP01

      EXECUTE "SP-ASSIGN ? " CAPTURING SP.OUTPUT   ; *DFP01

      FOR II = 1 TO 21                   ; *DFP01
         W.LINE = SP.OUTPUT<II>          ; *DFP01
         IF INDEX(W.LINE,"Output form name",1) THEN F.NUM = TRIM(FIELD(W.LINE,":",2))      ; *DFP01
      NEXT II                            ; *DFP01

      RETURN                             ; *DFP01
*
9999:* EXIT PROGRAM
      IF MAKE.FILE THEN
         DARRAY=CHANGE(DARRAY,@VM,CHAR(9))
         ID.XLS=PROG.NAME:'-':TIME():'.XLS'
         WRITE DARRAY ON BILLDATA, ID.XLS
         CALL ELINE("#1 - Excel file ":ID.XLS:" written to your U: drive - RETURN to continue")
      END
      CRT @(0,23):@(-4):
      STOP
CALL.NET.ADMIN:***
      CALL ELINE("CALL NETWORK ADMINISTRATOR!")
      CALL ELINE("CALL NETWORK ADMINISTRATOR!!!!!")
      RETURN
