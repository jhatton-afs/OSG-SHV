***********************************************************************
* Program name :  RATER.V2
* Author       :  OWEN HOLMAN
* Date written :  01/13/98
* Library      :  FBBP
$* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* FREIGHT BILL RATING PROGRAM
*
* Last updated by afs (AFSLOGISTICS\gbino) at 09:54:14 on 06/19/2018.
*
* Start modification history
* 091302 - JMK01 - ADD CANADA TO AUDIT PROCESS
* 110802 - JMK02 - ADD CWT CALCULATION TO MISC CHARGES
* 121302 - JMK03 - ADD THIRD PARTY LOGIC FOR OLA
* 121302 - JMK04 - RESTRICT MISC CHG CODE TO ONCE ONLY
* 012103 - JMK05 - ADD MAX LTL WEIGHT FROM CLIENT FILE
* 021204 - JMK06 - ADD FACTORY BLDR STORE 01209 WITH BENCHMARK MIN
* 111504 - JMK07 - ADD FORCED BENCHMARK MINIMUM PROCESSING
* 111504 - JMK08 - ADD CARRIER ONLY FSC FIELD
* 120304 - JMK09 - REINITIALIZE SAVINGS.QUOTE.PERC VARIABLE
* 022805 - JMK10 - COLLECT THREE SETS OF FSC DATA FOR REVIEW
* 040505 - JMK11 - ADD ATK (01365) BM OVERRIDES PER AGREEMENT
* 042905 - JMK12 - ADJUST MAX WEIGHT LTL CALCULATIONS FROM GE TO GT
* 081905 - JMK13 - ADD CONS MFG (00843) BM OVERRIDES PER AGREEMENT
* 102705 - JMK14 - SET BENCHMARK AMT TO CONTRACT AMT FOR AFS FSC COMPARE
* 012506 - JMK20 - ADD FLAT RATE CHARGES FOR ATK PALLETS AND OTHERS
* 013006 - JMK21 - EXPAND FLAT RATE CHARGES FOR INTRA AND INTER
* 020206 - JMK22 - TEST AFS500 ON RWS FOR FUNCTIONALITY
* 020906 - JMK23 - ADD MULTIPLE CALLS FOR RWS WHEN NETWORK CLOGS
* 021306 - JMK24 - FLAT RATE CHARGE ADJUSTMENTS FOR "0.00" PLACEHOLDERS
* 021406 - JMK25 - DISABLE THE AFS500 CALLS TO RWS AND REINSTATE AFS500 SUBROUTINE
* 022006 - JMK26 - ADD JOINT/DIRECT SVC FROM RATEWARE SERVER
* 030606 - JMK27 - ENABLE CALLS TO RWS AND DISABLE AFS500 SUBROUTINE
* 031506 - JMK28 - RE-ENABLE THE ABSOLUTE MINIMUM WITH THE JMK24 CHANGES
* 050106 - JMK29 - DISABLE THIRD PARTY TABLE REQUIREMENTS FOR CONWAY FROM JMK03
* 051006 - JCW01 - CHANGES TO @SELECTED, CLEARSELECT, AND STMT<X>
* 053106 - JMK30 - LET AMY USE AFS500 INSTEAD OF RWS FOR 05-31-06
* 071306 - JMK31 - ACTIVATE AFS525 THROUGH RWS
* 072406 - JMK32 - REMOVE THE ATTEMPT TO COMBINE CONTR AND BENCH IF THE SAME TARIFFS
* 083106 - JMK33 - ADD OLA CARRIER DEFINITION FOR TST OVERLAND
* 092606 - JMK34 - PASS CLIENT TO RWS
* 101706 - JMK35 - ADD HOMELAND SECURITY FEE $30.00 TO QUOTE FOR CANADA
* 110706 - JMK36 - ADD HOMELAND SECURITY FEE TO MISROUTE QUOTE AMOUNTS
* 120507 - JMK37 - C070955 - Add ability to use Old AFS FSC in Benchmark Calculation
* 010908 - NPR01 - Added for code to calc a Percentage increase on quotes as per CLIENTS file attr 227, 228 & 229
* 013108 - JMK38 - C080232 - Adding Joint Line Pricing to OLA
* 020608 - JMK39 - T080421 - RWS errors ; Combination not in tariff
* 022008 - JMK40 - T080556 - Joint line rate quote
* 022108 - NPR02 - T070199 - 3RD PTY SELECT BEST TABLE BASED ON QUOTE AMT AND NOT HIGHEST TABLE #
* 022208 - JMK41 - TEMPORARY PATCH FOR ROADWAY AVINGER SERVICE OVERRIDE
* 022708 - JMK42 - C080646 - Modify inbound joint line pricing
* 030508 - JMK43 - T080590 - Rate Estimate unresponsive 4:00 - 6:30 EST.
* 032408 - JMK44 - T080897 - Changes to Ward Kraft website quoting
* 040308 - JMK45 - T080932 - Marlite FSC is set wrong - correct ASAP
* 041808 - NPR03 - C080766 - Adding a date effective to OLA zip code substitution screen
* 042408 - JMK46 - C081107 - Rate Estimator Carrier Message
* 051308 - JMK47 - ADD F.TABLES TO RWS AND RWS.SVC INSTEAD OF OPEN
* 080708 - NPR04 - T080691 - Added lookup on Table for setting JL related flags for specific zips
* 081108 - JMK48 - C081931 - Send an email each time an invalid zip is sent to RWS
* 090908 - JMK49 - T082074 - Joint Line issue: some information coming from wrong table
* 092908 - JMK50 - C082012 - Add Beaver Express points into web rater
* 100608 - JMK51 - T082273 - FSC Benchmarks ; Force FSC Benchmark to "C" when current fuel is not "AFS" or "AFN"
* 102008 - JMK52 - T082254 - Error Code 'RWS-Could Not Open Tariff Factor File (.f??) Facopn See Note Below'
* 111308 - JMK53 - T082416 - No Inbound Joint Line Pricing for this carrier (not Joint Line!)
* 111208 - JMK54 - C081905 - Allow multiple discounts on BM in OLA
* 013009 - JMK55 - LLC and Misroute changes  per meeting in Owen's office
* 021009 - JMK56 - Compare Logistics Start Date with Bill Date for Logistics Calculations
* 030309 - NPR05 - T090253 - Highlight Client name based on ranking
* 050509 - JMK57 - CREATE TRUE COST VERSION FOR ANALYSIS - (BT)
* 052809 - JMK58 - C090708 - Changes to commissions for new client Freight Buddy
* 052809 - JMK59 - C090692 - Need to not take commissions on Fuel
* 061809 - JMK60 - T090800 - JL state is turned on but still saying "cannot audit, this is a misroute, NO INBOUND JOINT LINE PRICING"
* 081809 - JMK61 - WardKraft adjustments in markup pricing for quotes
* 092209 - NPR06 - T091132 - Display more info with regard to FSC calculations
* 101209 - NPR07 - T091132 - Display Notes/Description relating to FSC calcs
* 102209 - JMK62 - C091293 - Calculation change for Ward Kraft
* 102709 - JMK63 - C091269 - New accessorial calculation
* 102709 - NPR08 - T091132 - Set up Accessorials scrolling list/Chooser window.
* 110609 - JMK64 - C091350 - Reid Supply -- UPS Freight --- Fuel Commission
* 120109 - JMK65 - T091427 - Errors in FB rater , Variable "OVR.CONTR.MISC.CHG" previously undefined || Variable "OVR.BENCH.MISC.CHG" previously undefined.
* 051910 - JMK66 - C100447 - Polymer Adhesives
* 060310 - JMK67 - C100456 - Intracanada shipment ; no results on website
* 081310 - JMK68 - ADDITIONAL FILTER FOR JOINT LINE CONFIRMATION JL.FLAG MUST HAVE SOME CC FLAG AND NOT NULL
* 101510 - JMK69 - MODERN GROUP 8% COMMISSION RATE
* 123010 - JMK70 - T101218 - FB entry ; error - 103 bench.tariff  missing from tariff eff date xref
* 012011 - DRF01 - Add manditory line item based on zip codes. Can be used for any code but mostly for HIGH High cost delivery area.
* 060811 - NPR09 - T110216 - If quotes for 2 carriers are the same select the one with the highest log. comm. as LCC - Implemented for all clients on 04/26
* 082211 - DFP01 - VENDOR LIMIT TO CARRIERS WITH % COST RANGE OF LEAST COST CARRIER - NO MORE THAN 3 CARRIERS TO BE DISPLAYED
* 091411 - DFP02 - 111193 BQ Screen Variable not initialized.
* 051512 - DFP03 - PROJECT 198 - MODIFY TRANSIT.TIME/SORT.STR
* 092611 - JMK71 - C111243 - AER Sales 01863 Excessive Freight Expense
* 082912 - JMK72 - SysAid#3619 - Web Client Maintenance ? Add option for flat fee
* 091712 - JMK73 - HelpDesk#163 - AER-EFE Reports incorrect carrier used
* 070113 - JMK74 - SysAid#6374 - Need commissions to calculate for Beaver Express
* 092413 - JMK75 - Project#377 - Install RateWareXL web service
* 101413 - JMK76 - SysAid#7395 - Beaver Express to calculate logistics
* 111313 - JMK77 - SysAid#7652 - 20% markup above frt cost
* 123113 - JMK78 - SysAid#8049 - Resiplast - START UP --Need 20% mark up?
* 010214 - JMK79 - SysAid#8039 - R+L Ferry Points
* 021714 - DRF02 - SysAid#8578 - 15% markup above frt cost
* 042814 - JMK80 - SysAid#9449 - B&H service points - Disable Carrier Connect for Overrides
* 042914 - JMK81 - SysAid#9525 - SEFL info not reporting correct (Reverse JMK80)
* 051414 - JMK82 - SysAid#9754 - Houston Casing 10% markup above cost
* 053014 - DRF03 - SysAid 9913 - Allow AFS rating for client 01019 for
*                  carrier 00198 effective 5/16/14 for weight over 1
*                  pound
* 062014 - DRF04 - SysAid 10293 - 20% markup above frt cost
* 081114 - JMK83 - SysAid#11283 - G & t 10% Markup
* 081914 - DRF05 - SysAid 11329 - Allow AFS rating for client 02490 for
*                  carrier 00198 effective 07/31/14 for weight over 100
*                  pounds
* 100614 - JMK84 - SysAid#12425 - Forum Energy Production
* 100814 - DRF06 - SysAid 12264 - Joint Line Benchmark not working
* 110614 - JMK85 - SysAid#10740 - Shipping point on but not quoting (Reversal of JMK73)
* 111814 - DRF07 - SysAid 13642 - Changed client 01822 and carrier 00561
*                  to take commission on all shipment not just those over
*                  Reinstalled DRF07 per email from Wayne on 11/19/14
*                  100 pounds.
* 010515 - DRF08 - SysAid 14246 - 3% markup above frt cost for client
*                  05294 - Atlas Bolt & Screw
* 010515 - DRF09 - SysAid 14472 - Beaver Express should not take
*                  commission on weight less than 200 for client
*                  01015 Hillyard
* 012215 - JMK86 - SysAid#14808 - Karl Klement Ford 5% markup
* 022515 - JMK87 - SysAid#15482 - NON- SMC Carrier Service 1,1,11,17
* 030415 - DRF10 - SysAid 15722 - Changed the 3% mark up for LTL only
*                  for 05294 Atlas Bolt & Screw
* 031715 - JMK88 - SysAid#16032 - Webrater issues withe SEFL
* 041715 - DRF11 - SysAid 16764 - Allow AFS rating for client 05171 for
*                  carrier 00198 effective 04/20/15 for weight over 100
*                  pounds
* 042015 - DRF12 - SysAid 16506 - Non SMC Carrier Service
* 042135 - DRF13 - SysAid 16856 - Allow AFS rating for client 01394 for
*                  carrier 00198 effective 01/15/15 for weight over 100
*                  pounds
* 042715 - DRF14 - SysAid 16963 - 12% markup above frt cost for client
*                  02374 - QFC
* 060115 - DRF15 - SysAid 17595 - Beaver Express should take commission
*                  on weight from 101 to 200 for bills 06/01/15 for client
*                  05411 Hatco
* 061015 -  SWB01 - SysAid 17933 - Beaver Express should take commission
*                   on weight from 101 to 200 for bills starting 06/12/15
*                   for client 01650 (EGW Utilities)
* 081216 - DRF15 - SysAid 19299 - Beaver Express should take commission
*                  on weight from 1 to 200 for bills 01/01/15 for client
*                  05351 Airgas Gulf Coast
* 111115 - DRF16 - SysAid 21044 - 10% markup above frt cost for client
*                  02481 - Unit Automotive
* 011816 - DRF17 - SysAid 21613 - Beaver Express should take commission
*                  on weight from 101 to 200 for bills 01/01/15 for client
*                  01454 HIS Coating
* 032216 - GRB01 - SysAid 23467 - Beaver Express Change
* 051716 - GRB02 - SysAid 24574 - Beaver Express should take commission
*                  on weight from 1 to 200 for bills 05/20/16 for client
*                  00851 and 02027
* 061416 - GRB03 - SysAid 25203 - Beaver Express should take commission on weight from 1 to 200 for bills 06/13/16 for client
*                  01781
* 062316 - GRB04 - SysAid 25430 - Beaver Express should take commission on weight from 1 to 200 for bills 06/28/16 for client
*                  01987
* 080316 - GRB05 - SysAid 26204 - Beaver Express should take commission on weight from 1 to 200 for bills 08/08/16 for client
*                  01072, 07073, 07074, 02104
* 081516 - DRF18 - SysAid 26203 - 5.5% markup above frt cost for client
*                  01933 - Handy Wacks
* 082416 - GRB06 - SysAid 26549 Reverse change for ticket 13642
*
* 091216 - TAG01 - Sysaid 26995 Calculate Cost Management Saving For 05095
* 092016 - DRF19 - SysAid 27073 - 5% markup above frt cost for client
*                  01801 - Natural Foods
* 102816 - DRF20 - SysAid 28158 - 10% markup above frt cost for client
*                  05608 - Agonow
* 110216 - TAG02 - SysAid 28197 Calculate Cost Management Saving For 05608
* 060117 - GRB07 - New Third Party Logic
* 013017 - TAG03 - SysAid 30104 Calculate Cost Management SavingsFor 01789
* 080317 - NKH01 - ME 5480 Caluculate Cost Manangement Savings For 01650
* 110217 - NKH02 - ME 8113 Beaver Express should take commision on weight
*                  from 101 and up for bills 11/13/17 for client 00934
* 111417 - NKH03 - ME 8311 Modified to use Audit Assessorial Include/Exclude flags
* 122917 - DRF21 - Ticket 9402 change the mark up from 5.5 to 4.95 for
*                   01933 Handy Wacks
* 010318 - NKH04 - Modified to call Carrier Connect XL
* 022118 - DRF22 - Ticket 10228 - 15.0% markup above frt cost for client
*                  05765 - Titan Environmental
* 030818 - NKH05 - ME 10931 Changed old TP logic to use orig zip code from table
* 041218 - DRF23 - Ticket 11844 - Remove the 20% mark up for client 02465
*                  Momentum Engineered Systems
* 052218 - DRF24 - Ticket 12681 - Corrected the counter for number of
*                  effective date for the substitute zips if the
*                  beginning date is null.
* 062618 - NKH06 - Modified for Rateware web server version 2 (RWXL.V2)
* End modification history
**********************************************************************************

$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE FILE.DEFS INC_FB.AUDIT
$INCLUDE FILE.DEFS INC_CLIENTS
      COMMON PROGPARAMS(24)
      EQU PROGFROM TO PROGPARAMS(1)
      EQU USER TO PROGPARAMS(2)
      EQU PROCDATE TO PROGPARAMS(3)
      PROGFROM = 'RATER.V2'              ; * GRB07   ; * NKH04
      VALID.CLASSES=50:@VM:55:@VM:60:@VM:65:@VM:70:@VM:77:@VM:85:@VM:92:@VM:100:@VM:110:@VM:125:@VM:150:@VM:175:@VM:200:@VM:250:@VM:300:@VM:400:@VM:500
*---- Initialize variables
      TP.WHY.TAB = ""
      TP.AMT.TAB = ""
****         TP.TABLE.TAB = TABLE
****         TP.TABLE.TAB<2> = DEST.TABLE
      TP.CLIENT.COST = ""
      TP.QUOTE.AMT = ""
      QUOTE.AMT = 0
      QUOTE.AMT = 0
      TP.GTOT.CONTR.AMT = ""
      TP.GTOT.BENCH.AMT = ""
      TP.CONSULTING.AMT = ""
      TP.CNT = 1
      SAVE.CONTR = ''                    ; * NKH03
      SAVE.BENCH = ''                    ; * NKH03
      CLIENT.MODE=0
      INPUT PROCESS.MODE
      IF PROCESS.MODE='00945' THEN
         CLIENT.MODE=1
         CLIENT.ID=PROCESS.MODE
         PROCESS.MODE='Quote'
      END
      MP=0                               ; * Flag to FORCE Mission Pharmacal's "Bad" FSC calculation
      IF PROCESS.MODE='RateMP' THEN
         PROCESS.MODE='Rate'
         MP=1
      END
      TC=0                               ; * JMK57
      IF PROCESS.MODE='TCost' THEN       ; * JMK57
         PROCESS.MODE='Quote'            ; * JMK57
         TC=1                            ; * JMK57
      END                                ; * JMK57
      CW.MODE='INPUT'
      MC.MODE='INPUT'
      MC.ATTR = 1
      JL.FLAG=0                          ; * JMK49
      GOT.ACC.CODES=0                    ; * NPR08
      ACC.CNT = 0                        ; * NPR08
      ORIG.ZIP='' ; ORIG.DESC=''
      NULL=''
      INQUIRE=''
      OPT=''
      BACK.FLAG=''
      DAUDIT=''
      CARRIER=''
      CARRIER.TEXT=''
      TMSG = ''
      VENDOR.TEST=0
      XPEDX='00908':@AM:'00994':@AM:'00349':@AM:'00803':@AM:'00752':@AM:'00855':@AM:'00992':@AM:'00193':@AM:'00990':@AM:'00988':@AM:'00217':@AM:'00876':@AM:'00806':@AM:'00927':@AM:'00993':@AM:'00298':@AM:'00996':@AM:'00989':@AM:'00279':@AM:'00772':@AM:'00355':@AM:'00991':@AM:'00002':@AM:'00768':@AM:'00005':@AM:'00807':@AM:'00995'

      RL.FERRY.ZIP=''                    ; * JMK79
      RL.FERRY.ZIP<1,-1>='27915'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='27920'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='27936'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='27943'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='27960'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='27968'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='27972'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='27982'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='48028'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98261'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98243'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98245'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98279'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98280'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98297'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98286'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98250'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98070'         ; * JMK79
      RL.FERRY.ZIP<1,-1>='98110'         ; * JMK79

      BELL=CHAR(7)
      CARRIER.NAME = '' ; CARRIER.STREET='' ; CARRIER.CITY = ''
      CARRIER.STATE= ''
      CONTR.DOUT=''
      BENCH.DOUT=''
      CONTR.TARIFF.DRIVER=''
      BENCH.TARIFF.DRIVER=''
      PROMPT ''
      PROG.NAME = 'RATER.V2'             ; * NPR775   ; * NKH04
      PROG.DESC='Freight Bill ':OCONV(PROCESS.MODE,'MCT'):'r'
      PACK.NAME = 'AFS Freight Billing System'
****      CALL CHANNEL(CH.NUM)
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'RATER.V2' ; UPL.VOUT = ''       ; * NPR_UPL 04/23/2010   ; * NKH04
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
      CALL GET.USER.NEW(USER,CH.NUM)
* Begin GRB01
      VIN1=""
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "S"
****      CALL PROGTRACK(VIN1,VOUT1)
      OWEN=0
      SUPERUSER=0                        ; * JMK10

      IF USER='DAVID' THEN SUPERUSER=1   ; * JMK10
      IF USER='GBINO' THEN SUPERUSER=1   ; * JMK10

      CO.NAME = 'AFS Logistics, LLC'
      IF NOT(CLIENT.MODE) THEN
         CLIENT.ID=''
         CLIENT.NAME = ''
      END
      CARRIER.ID = ''
      MAT CLIENT.REC = ''
      FGC=0
      BILL.DATE=''
      IOT=''
      DEST.ZIP='' ; DEST.DESC=''

      GOSUB RESET.VARIABLES              ; * (Reset In-Loop Variables)
*---- Open general files

      OPEN '','ZIPS' TO ZIPS ELSE        ; * NKH04
         CALL OPEN.ABORT('ZIPS','RATER.V2')        ; * NKH04
      END                                ; * NKH04
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT("CARRIERS",PROG.NAME)
      END
      OPEN '','FB.BC.FSC' TO F.BC.FSC ELSE
         CALL OPEN.ABORT('FB.BC.FSC',PROG.NAME)
      END
      OPEN '','FB.NFSC.SUB' TO F.NFSC.SUB ELSE
         CALL OPEN.ABORT('FB.NFSC.SUB',PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','BCTRL' TO F.BCTRL ELSE
         CALL OPEN.ABORT('BCTRL',PROG.NAME)
      END
      READ DBCTRL FROM F.BCTRL,USER ELSE DBCTRL=''
      OPEN '','FB.AUDIT.ACC' TO F.AUDIT.ACC ELSE   ; * JMK63
         CALL OPEN.ABORT('FB.AUDIT.ACC',PROG.NAME)           ; * JMK63
      END                                ; * JMK63
      OPEN '','ZIP.LINE.ITEM' TO F.ZIP.LINE.ITEM ELSE        ; *DRF01
         CALL OPEN.ABORT('ZIP.LINE.ITEM',PROG.NAME)          ; *DRF01
      END                                ; *DRF01

*---- Open mileage input and output files

      OPEN '','PCIN' TO F.PCIN ELSE
         CALL OPEN.ABORT('PCIN',PROG.NAME)
      END
      OPEN '','PCOUT' TO F.PCOUT ELSE
         CALL OPEN.ABORT('PCOUT',PROG.NAME)
      END
*
* READ TABLES THAT MAY BE NEEDED
*
      READ DTARIFF.DATE.XREF FROM F.TABLES,'TARIFF.DATE.XREF' ELSE DTARIFF.DATE.XREF=''
      READ DTARIFFS FROM F.TABLES,'TARIFFS' ELSE DTARIFFS=''
      READ LI.CODES FROM F.TABLES,'LI.CODES' ELSE LI.CODES=''
      READ AFSO.BENCH.DFSC FROM F.TABLES,'AFSO*FSC' ELSE AFSO.BENCH.DFSC=''      ; * JMK37
*
* MAIN PROCESSING
*
      GOSUB GET.SCREEN.DSP
*******************************************************
50:* Enter client number
*******************************************************
      PRINT SCREEN.DSP:
      IF CLIENT.MODE THEN GOTO 55
      SEQ.FLAG = 0
      GOT.ACC.CODES=0                    ; * NPR08
      HELP = "Enter the client number [X] = Exit [EX] = Exit"
      IF CLIENT.ID = '' THEN MASK = '#####' ELSE MASK = CLIENT.ID
      IF MP THEN
         QI='01165'
         Q ='01165'
         CRT @(0,1):"==> Special Mode for Mission Pharmacal- CARRIER FSC on Benchmark <==":
      END ELSE
         CALL GEN.IN(9,2,MASK,'',Q,0,20,'','',2,-5,2,1,QI,HELP,0,23)
      END
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX' ! QI = 'X'
            STOP
         CASE QI = '' & CLIENT.ID = ''
            STOP
         CASE QI = ''
            Q = CLIENT.ID
         CASE NOT(QI MATCHES "0N")
            VIN=0                        ; * Starting Chars In
            VOUT=''
            CALL SOUNDEX.DISPLAY.NEW(VIN,VOUT,QI,'BCUST','SDX.CLIENTS,NAME',2,ITEM.LIST)
            PRINT SCREEN.DSP:
            BEGIN CASE
               CASE ITEM.LIST = ''
                  IF CLIENT.MODE THEN STOP ELSE GOTO 50
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
                  IF CLIENT.MODE THEN STOP ELSE GOTO 50
               CASE 1
                  DATA ITEM.LIST<1>
                  IF CLIENT.MODE THEN STOP ELSE GOTO 50
            END CASE
         CASE NUM(QI)
            Q = QI'R%5'
         CASE 1
            IF CLIENT.MODE THEN STOP ELSE GOTO 50
      END CASE

*---- Get client name

      IF CLIENT.ID # Q THEN CLIENT.ID = Q'R%5'
*******************************************************
55:   ***
*******************************************************
      MATREAD CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
         CALL ELINE("ERROR - Client ":CLIENT.ID:" not on file.")
         CLIENT.ID = ''
         IF CLIENT.MODE THEN STOP ELSE GOTO 50
      END
      MAX.LTL=15000                      ; * JMK05
      IF CLIENT.REC(150)#'' THEN MAX.LTL=CLIENT.REC(150)     ; * JMK05
      VENDOR.QUOTE.LIMIT.PERC=''         ; * DFP02
      NUMBER.LIMIT=''                    ; * DFP02
      CARR.ONLY.FSC=CLIENT.REC(189)      ; * JMK08
      IF CLIENT.ID='00223' THEN CL.LOGISTICS='N'
      NO.LOG.FSC=CL.LOG.FSC='N'          ; * 1=Do not Calculate/ADD FSC to Log/Bench Amt
      LOGISTICS=CL.LOGISTICS='Y'
      CLIENT.AUDIT=1
****IF USER = 'GBINO' THEN DEBUG
      OPEN '','FB.AUDIT,':CLIENT.ID TO F.AUDIT THEN
         READV SUB.CLIENT FROM F.AUDIT,'SUBSTITUTE',1 THEN
            AUDIT.CLIENT.ID = SUB.CLIENT
            OPEN '','FB.AUDIT,':AUDIT.CLIENT.ID TO F.AUDIT ELSE CLIENT.AUDIT=0
         END ELSE
            AUDIT.CLIENT.ID = CLIENT.ID
         END
      END ELSE CLIENT.AUDIT=0
      LOCATE CLIENT.ID IN XPEDX SETTING XP.POS THEN XPEDX.CLIENT=1 ELSE XPEDX.CLIENT=0
      IF CLIENT.AUDIT THEN
         READ TEST FROM F.AUDIT,'DISABLE' THEN
            CALL ELINE('Client has been set to DISABLE.  Cannot ':PROCESS.MODE:' Bills')
            CLIENT.ID = ''
            IF CLIENT.MODE THEN STOP ELSE GOTO 50
         END
      END ELSE
         CALL ELINE('Error! On-Line Audit has not been setup for this client!  Cannot ':PROCESS.MODE:' Bills!')
         CLIENT.ID = ''
         IF CLIENT.MODE THEN STOP ELSE GOTO 50
      END
      CLIENT.NAME = CL.NAME
      CLIENT.CITY = CL.CITY
      CLIENT.STATE = CL.ST
      ZIP.LEN = CL.ZIP.FLAG
      ZIP.LEN='C'                        ; * Force Canadian option so Jen can check rates
      IF ZIP.LEN=6 OR ZIP.LEN=5 OR ZIP.LEN='C' ELSE
         CALL ELINE("Cannot Use Bill ":PROCESS.MODE:"r! Zip in Client Maintenance is not 5, 6, or C")
         CLIENT.ID = ''
         IF CLIENT.MODE THEN STOP ELSE GOTO 50
      END
      IN.QUOTE.PERC = CLIENT.REC(136)<1,1>
      OUT.QUOTE.PERC = CLIENT.REC(137)<1,1>
      TP.QUOTE.PERC = CLIENT.REC(138)<1,1>
      FORCE.BENCH.MIN=CLIENT.REC(188)    ; * JMK07
      IF PROCESS.MODE = 'Quote' AND (IN.QUOTE.PERC = 'NO' OR OUT.QUOTE.PERC='NO' OR TP.QUOTE.PERC='NO') THEN
         CALL ELINE("Cannot Use Quoter on Client ":CLIENT.ID:" ":CLIENT.NAME:", please call Auditor for quote!")
         CLIENT.ID = ''
         GO 50
      END
      IF PROCESS.MODE = 'Quote' AND (IN.QUOTE.PERC = '' OR OUT.QUOTE.PERC = '' OR TP.QUOTE.PERC = '') THEN
         CALL ELINE("Client ":CLIENT.ID:" ":CLIENT.NAME:" has not been set up for quotes!")
         CLIENT.ID = ''
         GO 50
      END
      HIN = CLIENT.REC(240) ; HOUT = ""  ; * NPR05  Highlight based on ranking
      CALL CLIENT.HL(HIN,HOUT) ; HLB = HOUT<1,1> ; HLA = HOUT<1,2>     ; * NPR05
      CRT @(9,2):CLIENT.ID:' ':HLB:CLIENT.NAME:HLA:@(-4):
      IF CL.AUDITOR='' THEN
         CALL ELINE("Client: ":CLIENT.ID:" ":CLIENT.NAME:" Does Not Have an Auditor")
         AUDITOR.TEXT='None-Assigned'
      END ELSE
         AUDITOR.TEXT=CL.AUDITOR
      END
      CRT @(32,0):AUDITOR.TEXT'L#20'

*---- Open client files

      MISROUTE=0
      OPEN '','FB.AUDIT.TABLES,':AUDIT.CLIENT.ID TO F.AUDIT.TABLES ELSE
         CALL ELINE('Error! Cannot open file FB.AUDIT.TABLES,':AUDIT.CLIENT.ID)
         CLIENT.ID = ''
         IF CLIENT.MODE THEN STOP ELSE GOTO 50
      END
      OPEN '','FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID TO F.AUDIT.ZIPS ELSE
         EXECUTE 'CREATE-FILE DATA FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID:' 7,1' CAPTURING OUTPUT
         OPEN '','FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID TO F.AUDIT.ZIPS ELSE
            IF PROCESS.MODE = 'Quote' THEN
               CALL ELINE('Error Cannot open FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID:' No On-Line Quotes Allowed!')
            END ELSE
               CALL ELINE('Error Cannot open FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID:' No On-Line Audit Allowed!')
            END
            CLIENT.AUDIT=0
         END
      END
      CARRIER.AUDIT=0
      AUDIT='N'
      AUDIT.TYPE=''
      MC.MODE='INPUT'                    ; * NPR08
      MC.ATTR = 1                        ; * NPR08

*****************************************************************
100:* Enter carrier
*****************************************************************
      IF FGC=1 THEN
         GOSUB RESET.VARIABLES           ; * (Reset In-Loop Variables)
         PRINT SCREEN.DSP:
         GOSUB PAINT.SCR.DATA
         FGC=0
      END
      IF CARRIER.ID # '' THEN MASK = CARRIER.ID'R%5' ELSE MASK = '#####'
*     HELP = "Enter the carrier number. [X]=Back [EX]=Exit [L]ist On-Line Audit Carriers"
      HELP = "Car Number [Enter]-All Carriers [X]=Back [EX]it [L]ist On-Line Audit Carriers"
      CALL GEN.IN(9,3,MASK,'',Q,0,20,'','',2,-5,3,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            CRT @(9,3):@(-4):
            IF MP THEN GO 100
            IF CLIENT.MODE THEN STOP ELSE GOTO 50
         CASE QI = 'EX'
*Begin GRB01
            VIN1=''
            VIN1<1> = UPL.VIN<2>
            VIN1<2> = USER
            VIN1<3> = SYSTEM(18)
            VIN1<4> = "E"
****       CALL PROGTRACK(VIN1,VOUT1)
            * End GRB01
            STOP
         CASE QI = ' '
            Q=''
            CARRIER.TEXT=''
         CASE QI = "L"
            EXECUTE 'SORT FB.AUDIT,':AUDIT.CLIENT.ID:' BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            PRINT SCREEN.DSP:
            GOSUB PAINT.SCR.DATA
            GOTO 100
         CASE NOT(QI MATCHES "0N")
            VIN=0                        ; * Starting Chars In
            VOUT=''
            CALL SOUNDEX.DISPLAY.NEW(VIN,VOUT,QI,'CARRIERS','SDX.CARRIER,NAME','1,2,3,4',ITEM.LIST)
            PRINT SCREEN.DSP:
            GOSUB PAINT.SCR.DATA
            BEGIN CASE
               CASE ITEM.LIST = ''
                  GOTO 100
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
                  GOTO 100
               CASE ITEM.LIST # ''
                  DATA ITEM.LIST<1>
                  GOTO 100
            END CASE
         CASE QI = ''
            Q = CARRIER.ID
         CASE NUM(QI)
            Q = QI'R%5'
         CASE 1
            GOTO 100
      END CASE
      CARRIER.ID = Q
      IF CARRIER.ID='' THEN FGC=1 ELSE FGC=0
      IF FGC THEN
         DAUDIT=''
         BENCH.DFSC=''
         CONTR.DFSC=''
         DAUDIT.TABLES=''
         JL.DAUDIT.TABLES=''             ; * JMK49
         CRT @(9,3):"All Carriers Setup For On-Line Audit"
         GO 200                          ; * Bill Date
      END
      CALL CLR.CONTROL(CARRIER.ID)
      GOT.ACC.CODES=0                    ; * NPR08
*---- Get carrier data

      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE
         CALL ELINE("ERROR - Carrier ":CARRIER.ID:" not on file.")
         CARRIER.ID=''
         GOTO 100
      END
      LTL.CAR=CARRIER.REC<44>=1
      CARRIER.NAME = CARRIER.REC<1>
      CARRIER.STREET = TRIM(CHANGE(CARRIER.REC<2>,@VM,' '))
      CARRIER.CITY = CARRIER.REC<3>
      CARRIER.STATE = CARRIER.REC<4>
      CARRIER.TEXT=TRIM(CARRIER.ID:' ':CARRIER.NAME:' ':CARRIER.STREET:' ':CARRIER.CITY)
      CRT @(9,3):CARRIER.TEXT[1,70]:
      CARRIER.SCAC=CARRIER.REC<12>       ; * JMK38
      CARRIER.TYPE='A'                   ; * JMK38
      IF CARRIER.REC<44>='6' THEN        ; * JMK38
         CARRIER.TYPE='B'                ; * JMK38
      END                                ; * JMK38
************************************************************************
      CARR.ONLY.FSC=CLIENT.REC(189)      ; * JMK64
      IF CLIENT.ID='01505' AND (CARR.ONLY.FSC='Y' OR CARR.ONLY.FSC='C') THEN     ; * JMK45
         BEGIN CASE                      ; * JMK45
            CASE CARRIER.ID='00124'      ; * JMK45
               CARR.ONLY.FSC='N'         ; * JMK45
            CASE CARRIER.ID='01786'      ; * JMK45
               CARR.ONLY.FSC='N'         ; * JMK45
            CASE CARRIER.ID='05156'      ; * JMK45
               CARR.ONLY.FSC='N'         ; * JMK45
            CASE CARRIER.ID='08924'      ; * JMK45
               CARR.ONLY.FSC='N'         ; * JMK45
         END CASE                        ; * JMK45
      END                                ; * JMK45
      IF CLIENT.ID='01758' AND CARRIER.ID='00748' THEN       ; * JMK59
         CARR.ONLY.FSC='N'               ; * JMK59
      END                                ; * JMK59
      IF CLIENT.ID='01784' AND CARRIER.ID='00014' THEN       ; * JMK64
         CARR.ONLY.FSC='N'               ; * JMK64
      END                                ; * JMK64
      IF CLIENT.ID='01810' AND CARRIER.ID='00014' THEN       ; * JMK64
         CARR.ONLY.FSC='N'               ; * JMK64
      END                                ; * JMK64
      OLA.CARRIER.ID=CARRIER.ID
      IF CARRIER.ID='13171' THEN OLA.CARRIER.ID='01625'
      IF CARRIER.ID='12244' THEN OLA.CARRIER.ID='12826'      ; * JMK33
      IF CARRIER.ID='00537' THEN OLA.CARRIER.ID='12826'      ; * JMK33
      READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
         CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
         CARRIER.ID = ''
         GOTO 100
      END
75:   ***
      IF DAUDIT<11>='DISABLE' THEN
         CALL ELINE("Error! - This Carrier is set to DISABLE in On-Line Audit! Cannot ":PROCESS.MODE:" Bills")
         CARRIER.ID = ''
         ERR='CARRIER.DISABLED' ; GOSUB 8000
         IF TRY.AGAIN THEN GO 75
         GOTO 100
      END
      AUDIT.TYPE=DAUDIT<1>
      CARRIER.AUDIT=1
      READV FSC.AUDIT.CLIENT.ID FROM F.NFSC.SUB,AUDIT.CLIENT.ID,1 ELSE FSC.AUDIT.CLIENT.ID=AUDIT.CLIENT.ID
      BENCH.DFSC.ID='B*':OLA.CARRIER.ID:'*':FSC.AUDIT.CLIENT.ID
      READ BENCH.DFSC FROM F.BC.FSC,'B*':OLA.CARRIER.ID:'*':FSC.AUDIT.CLIENT.ID ELSE
         BENCH.DFSC.ID='B*':OLA.CARRIER.ID
         READ BENCH.DFSC FROM F.BC.FSC,'B*':OLA.CARRIER.ID ELSE BENCH.DFSC=''
      END

      CONTR.DFSC.ID="C*":OLA.CARRIER.ID:'*':FSC.AUDIT.CLIENT.ID
      READ CONTR.DFSC FROM F.BC.FSC,"C*":OLA.CARRIER.ID:"*":FSC.AUDIT.CLIENT.ID ELSE CONTR.DFSC=BENCH.DFSC
      IF BENCH.DFSC<30>#'ENABLE' THEN
         BENCH.DFSC=''                   ; ** No Effect
         CONTR.DFSC=''
      END

      CK.CS=0                            ; * JMK38
      READ NSMC.LIST FROM F.TABLES,'NSMC.CARRIERS' ELSE NSMC.LIST=''   ; * JMK38
      LOCATE CARRIER.ID IN NSMC.LIST SETTING WPOS THEN CK.CS=1         ; * JMK38

************************************************************************
200:  *** Get Bill Date
************************************************************************
      IF BILL.DATE='' THEN
         BILL.DATE=DATE()
         MASK=BILL.DATE'D2/'
      END ELSE
         MASK=BILL.DATE'D2/'
      END
      HELP="Enter the Pro Date (Shipment Date)"
      CALL GEN.IN(6,5,MASK,'DATE',Q,0,8,'L','',2,6,5,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='X' THEN GOTO 100
      IF QI='EX' THEN GOTO 9000
      IF QI='' THEN
         IF PROCESS.MODE = 'Quote' THEN BILL.DATE=DATE()
         IF BILL.DATE#'' THEN Q=BILL.DATE ELSE
            CALL ELINE('Entry is Required')
            GOTO 200
         END
      END
      IF Q > DATE() THEN
         CALL ELINE('Warning - This date is in the Future!!!! Be Careful!')
      END
      IF Q < DATE()-182 AND NOT(OWEN) THEN
         CALL ELINE("Warning - This date is older than 6 months")
      END
      BILL.DATE=Q
      PRINT @(6,5):(BILL.DATE'D2/')'L#8':
      LOGISTICS=(CL.LOGISTICS="Y") & (BILL.DATE >= CLIENT.REC(149))    ; * JMK56

      MC.MODE='INPUT'                    ; * NPR08
      MC.ATTR = 1                        ; * NPR08
****************************************************************
300:  *** Get Inbound or Outbound
*****************************************************************
      MASK = IOT'L#2'
      HELP = 'Enter [I]=Inbound, [O]Outbound, or [T]hird Party [X]=Back [EX]=Exit'
      CALL GEN.IN(22,5,MASK,'',Q,0,2,'','',2,-2,5,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            CRT @(22,5):IOT:
            GOTO 200
         CASE QI = 'EX'
            GOTO 9000
         CASE QI = 1 ! QI = 'I'
            Q = 'I'
            TEXT = 'Inbound'
            IOT.AUDIT = 'I'
         CASE QI = 3 ! QI = 'T'

            Q = 'T'
            TEXT = 'Third Party'
            IOT.AUDIT = 'I'
         CASE QI = 0 ! QI = 'O'

            Q = 'O'
            TEXT = 'Outbound'
            IOT.AUDIT = 'O'
         CASE QI = ''
            IF IOT # '' THEN Q = IOT ELSE
               CALL ELINE('Entry is Required')
               GOTO 300
            END
         CASE 1
            CALL ELINE('Must be <I>nbound or <O>utbound or <T>hird party')
            GOTO 300
      END CASE
      BEGIN CASE                         ; * JMK09
         CASE Q='I' ; SAVINGS.QUOTE.PERC=IN.QUOTE.PERC       ; * JMK09
         CASE Q='O' ; SAVINGS.QUOTE.PERC=OUT.QUOTE.PERC      ; * JMK09
         CASE Q='T' ; SAVINGS.QUOTE.PERC=TP.QUOTE.PERC       ; * JMK09
      END CASE                           ; * JMK09
      IF PROCESS.MODE = 'Quote' AND SAVINGS.QUOTE.PERC = 'NO' THEN
         PRINT @(22,5):Q'L#2':
         CALL ELINE("Cannot Use Quoter on ":TEXT:" has not been set up, please call Auditor!")
         GOTO 300
      END
      IOT = Q
      PRINT @(22,5):IOT'L#2':
***************************************************************************
400:  *** Get Origin Zip Code
***************************************************************************
      HELP = "Enter the Origination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                              ; * Starting Zip Character Count
      VIN<2>=6                           ; * Column For Input
      VOUT=''
      CALL FB.2.1.CSZ.NEW(VIN,VOUT,6,ORIG.ZIP,HELP,ZIP.LEN,BACK.FLAG,ORIG.CITY,ORIG.STATE)
      IF BACK.FLAG THEN
         BACK.FLAG=''
         GO 300
      END
      ORIG.ZIP=OCONV(ORIG.ZIP,'MCU')
      IF HELP = 'S' ! HELP = '' THEN
         PRINT SCREEN.DSP:
         GOSUB PAINT.SCR.DATA
      END
      IF ORIG.CITY # '' THEN
         ORIG.DESC = ORIG.CITY:', ':ORIG.STATE
      END ELSE
         ORIG.DESC = ORIG.STATE
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00114' THEN    ; * JMK79
         LOCATE ORIG.ZIP IN RL.FERRY.ZIP<1> SETTING RLPOS THEN         ; * JMK79
            CALL ELINE('Cannot Quote. ':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' requires a Ferry Fee for R&L')        ; * JMK79
            GOTO 400                     ; * JMK79
         END                             ; * JMK79
      END                                ; * JMK79

      CRT @(6,6):ORIG.ZIP'L#6':' ':ORIG.DESC'L#25'           ; * JMK01
****************************************************************************
500:  *** Get Destination Zip Code
****************************************************************************
      HELP = "Enter the Destination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                              ; * Starting Zip Character Count
      VIN<2>=6                           ; * Column For Input
      VOUT=''
      CALL FB.2.1.CSZ.NEW(VIN,VOUT,7,DEST.ZIP,HELP,ZIP.LEN,BACK.FLAG,DEST.CITY,DEST.STATE)
      IF BACK.FLAG THEN
         BACK.FLAG=''
         GO 400
      END
      DEST.ZIP=OCONV(DEST.ZIP,'MCU')
      IF HELP = 'S' ! HELP = '' THEN
         PRINT SCREEN.DSP:
         GOSUB PAINT.SCR.DATA
      END
      IF DEST.CITY # '' THEN
         DEST.DESC = DEST.CITY:', ':DEST.STATE
      END ELSE
         DEST.DESC = DEST.STATE
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00114' THEN    ; * JMK79
         LOCATE DEST.ZIP IN RL.FERRY.ZIP<1> SETTING RLPOS THEN         ; * JMK79
            CALL ELINE('Cannot Quote. ':DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' requires a Ferry Fee for R&L')        ; * JMK79
            GOTO 500                     ; * JMK79
         END                             ; * JMK79
      END                                ; * JMK79
      CRT @(6,7):DEST.ZIP'L#6':' ':DEST.DESC'L#25'           ; * JMK01
      IF DEST.ZIP = ORIG.ZIP THEN
         CALL ELINE('Warning - Origin and destination zip are the same.')
      END
      CDN.ROUTE=0                        ; * JMK01
      IF NOT(NUM(ORIG.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      IF NOT(NUM(DEST.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      IF ORIG.ZIP MATCHES '1A1N1A1N1A1N' THEN      ; * JMK67
         ORG.CAN=1                       ; * JMK67
      END ELSE                           ; * JMK67
         ORG.CAN=0                       ; * JMK67
      END                                ; * JMK67
      IF DEST.ZIP MATCHES '1A1N1A1N1A1N' THEN      ; * JMK67
         DST.CAN=1                       ; * JMK67
      END ELSE                           ; * JMK67
         DST.CAN=0                       ; * JMK67
      END                                ; * JMK67
      IF CLIENT.ID='01282' AND ORG.CAN=1 AND DST.CAN=1 THEN  ; * JMK67
         AUDIT.CLIENT.ID = '01866'       ; * JMK67
         OPEN '','FB.AUDIT,':AUDIT.CLIENT.ID TO F.AUDIT ELSE CLIENT.AUDIT=0      ; * JMK67
         OPEN '','FB.AUDIT.TABLES,':AUDIT.CLIENT.ID TO F.AUDIT.TABLES ELSE       ; * JMK67
            CALL ELINE('Error! Cannot open file FB.AUDIT.TABLES,':AUDIT.CLIENT.ID)         ; * JMK67
            CLIENT.ID = ''               ; * JMK67
            IF CLIENT.MODE THEN STOP ELSE GOTO 50  ; * JMK67
         END                             ; * JMK67
         OPEN '','FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID TO F.AUDIT.ZIPS ELSE           ; * JMK67
            EXECUTE 'CREATE-FILE DATA FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID:' 7,1' CAPTURING OUTPUT        ; * JMK67
            OPEN '','FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID TO F.AUDIT.ZIPS ELSE        ; * JMK67
               IF PROCESS.MODE = 'Quote' THEN      ; * JMK67
                  CALL ELINE('Error Cannot open FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID:' No On-Line Quotes Allowed!')           ; * JMK67
               END ELSE                  ; * JMK67
                  CALL ELINE('Error Cannot open FB.AUDIT.ZIPS,':AUDIT.CLIENT.ID:' No On-Line Audit Allowed!')  ; * JMK67
               END                       ; * JMK67
               CLIENT.AUDIT=0            ; * JMK67
            END                          ; * JMK67
         END                             ; * JMK67
         READV FSC.AUDIT.CLIENT.ID FROM F.NFSC.SUB,AUDIT.CLIENT.ID,1 ELSE FSC.AUDIT.CLIENT.ID=AUDIT.CLIENT.ID  ; * JMK67
         IF FGC THEN                     ; * JMK67
            DAUDIT=''                    ; * JMK67
            BENCH.DFSC=''                ; * JMK67
            CONTR.DFSC=''                ; * JMK67
            DAUDIT.TABLES=''             ; * JMK67
            JL.DAUDIT.TABLES=''          ; * JMK67
         END ELSE                        ; * JMK67
            READ CONTR.DFSC FROM F.BC.FSC,"C*":OLA.CARRIER.ID:"*":FSC.AUDIT.CLIENT.ID ELSE CONTR.DFSC=BENCH.DFSC         ; * JMK67
            IF BENCH.DFSC<30>#'ENABLE' THEN        ; * JMK67
               BENCH.DFSC=''             ; * JMK67
               CONTR.DFSC=''             ; * JMK67
            END                          ; * JMK67
         END                             ; * JMK67
      END                                ; * JMK67
525:  *** See if the Routing Guide is on file - If Not Cannot Audit
      BEGIN CASE
         CASE IOT='O'
            ROUTE.ZIP=ORIG.ZIP
            SHIP.ZIP=DEST.ZIP[1,3]
         CASE IOT='I'
            ROUTE.ZIP=DEST.ZIP
            SHIP.ZIP=ORIG.ZIP[1,3]
         CASE IOT='T'
            ROUTE.ZIP=DEST.ZIP[1,3]
            SHIP.ZIP=ORIG.ZIP[1,3]
      END CASE

      * Begin NKH04
      IF CARRIER.ID > '' THEN
         READV CARRIER.SCAC FROM F.CARRIERS, CARRIER.ID, 12 ELSE CARRIER.SCAC = ''
      END ELSE
         CARRIER.SCAC = 'ALL'
      END

      OPEN '','ZIPS' TO ZIPS ELSE
         CALL OPEN.ABORT('ZIPS','INET.FB.ESTIMATOR')
      END

      READV ORIG.COUNTRY FROM ZIPS, ORIG.ZIP, 3 ELSE
         IF NUM(ORIG.ZIP[1,1]) THEN
            ORIG.COUNTRY = 'US'
         END ELSE
            ORIG.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE ORIG.COUNTRY = 'US'
            ORIG.COUNTRY = 'USA'
         CASE ORIG.COUNTRY = 'CA'
            ORIG.COUNTRY = 'CAN'
         CASE ORIG.COUNTRY = 'MX'
            ORIG.COUNTRY = 'MEX'
      END CASE
      READV DEST.COUNTRY FROM ZIPS, DEST.ZIP, 3 ELSE
         IF NUM(DEST.ZIP[1,1]) THEN
            DEST.COUNTRY = 'US'
         END ELSE
            DEST.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE DEST.COUNTRY = 'US'
            DEST.COUNTRY = 'USA'
         CASE DEST.COUNTRY = 'CA'
            DEST.COUNTRY = 'CAN'
         CASE DEST.COUNTRY = 'MX'
            DEST.COUNTRY = 'MEX'
      END CASE
      CCVIN = ''
      CCVIN<1> = CARRIER.SCAC
      CCVIN<2> = DEST.COUNTRY
      CCVIN<3> = DEST.ZIP
      CCVIN<4> = ORIG.COUNTRY
      CCVIN<5> = ORIG.ZIP
      CCVIN<6> = CLIENT.ID
      CCVOUT = ''
      CALL CCXL.V2(CCVIN,CCVOUT)
      * End NKH04

      IF FGC THEN GO 590                 ; * Get the data
      IF DAUDIT<11>='DISABLE' THEN
* This will only happen on Logistics Accounts
         AUDIT='U'
         MISROUTE=1
      END
      SUBST.ZIP=''

      IF USER='DAVID' THEN CALL ELINE('PRESS BREAK JL.FLAG')

      JL.FLAG=0                          ; * JMK38
      TRANSIT.TIME=''                    ; * JMK47
      ORIG.DIR.FLG=''                    ; * JMK47
      DEST.DIR.FLG=''                    ; * JMK47
      COMB.DIR.FLG=''                    ; * JMK47
      IF CARRIER.SCAC#'' THEN            ; * JMK38 ; * JMK80 ; * JMK81
* Begin NKH04
*         SVC.VIN=''                      ; * JMK38
*         SVC.VIN<1>='BOTH'               ; * JMK38
*         SVC.VIN<2>='10000'              ; * JMK38
*         SVC.VIN<3>=CARRIER.SCAC         ; * JMK38
*         SVC.VIN<4>=CARRIER.TYPE         ; * JMK38
*         SVC.VIN<5>=ORIG.ZIP             ; * JMK38
*         SVC.VIN<6>=DEST.ZIP             ; * JMK38
*         SVC.DOUT=''                     ; * JMK38
*         CALL RWS.SVC(SVC.VIN,SVC.VOUT,F.TABLES)   ; * JMK38 ; * JMK47
*         IF USER='DAVID' THEN CALL ELINE('CARRIER CONNECT')
*         SVC.ERROR=SVC.VOUT<1>           ; * JMK38
*         TRANSIT.TIME=SVC.VOUT<2>        ; * JMK38
*         ORIG.DIR.FLG=SVC.VOUT<3>        ; * JMK38
*         DEST.DIR.FLG=SVC.VOUT<4>        ; * JMK38
*         COMB.DIR.FLG=SVC.VOUT<5>        ; * JMK38

         * From TransitMethod
         TRANSIT.TIME = CCVOUT<29>
         IF TRANSIT.TIME = 0 THEN TRANSIT.TIME = 1
         ORIG.DIR.FLG = CCVOUT<31>[1,1]
         IF ORIG.DIR.FLG = 'C' OR ORIG.DIR.FLG = 'P' THEN ORIG.DIR.FLG = 'I'
         DEST.DIR.FLG = CCVOUT<30>[1,1]
         IF DEST.DIR.FLG = 'C' OR DEST.DIR.FLG = 'P' THEN DEST.DIR.FLG = 'I'
         COMB.DIR.FLG = CCVOUT<32>[1,1]
         IF COMB.DIR.FLG = 'C' OR COMB.DIR.FLG = 'P' THEN COMB.DIR.FLG = 'I'

* End NKH04
         IF CARRIER.SCAC='CNWY' THEN     ; * JMK38 ; * NPR04
            ORIG.DIR.FLG='D'             ; * JMK38 ; * NPR04
            DEST.DIR.FLG='D'             ; * JMK38 ; * NPR04
            COMB.DIR.FLG='D'             ; * JMK38 ; * NPR04
         END

         ID.JL.TAB = "JL*":CLIENT.ID:"*":CARRIER.SCAC        ; *NPR04
         READ JL.REC FROM F.TABLES, ID.JL.TAB ELSE JL.REC = ""         ; *NPR04
*
         LOCATE DEST.ZIP IN JL.REC SETTING DEST.POS THEN DEST.DIR.FLG = "D"      ; *NPR04
*
         LOCATE ORIG.ZIP IN JL.REC SETTING ORIG.POS THEN ORIG.DIR.FLG = "D"      ; *NPR04
*
         IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN       ; * JMK41    ; *NPR04
            COMB.DIR.FLG='D'             ; * JMK41    ; *NPR04
         END                             ; * JMK41    ; *NPR04

         IF COMB.DIR.FLG#'D' THEN        ; * JMK38 ; * JMK68 ; * JMK71
            JL.FLAG=1                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38
      IF CK.CS THEN                      ; * JMK38
         IF USER='DAVID' THEN CALL ELINE('AT CK.CS PRESS BREAK')
         ORIG.DIR.FLG=''                 ; * JMK87
         DEST.DIR.FLG=''                 ; * JMK87
         COMB.DIR.FLG=''                 ; * JMK87
         TRANSIT.TIME=''                 ; * JMK88
         IF COMB.DIR.FLG='' THEN         ; * JMK53
            JL.FLAG=0                    ; * JMK53
         END                             ; * JMK53
         OPEN '','CARRIER.SVC' TO F.CS THEN        ; * JMK38
            CS.ID=CARRIER.ID:'*':ORIG.ZIP          ; * JMK38
            READ CS.REC FROM F.CS,CS.ID ELSE       ; * JMK38
               CS.ID=CARRIER.ID:'*':ORIG.ZIP[1,3]  ; * JMK38
               READ CS.REC FROM F.CS,CS.ID ELSE    ; * JMK38
                  CS.ID=CARRIER.ID:'*':ORIG.STATE  ; * JMK53
                  READ CS.REC FROM F.CS,CS.ID ELSE           ; * JMK53
                     CS.REC=''           ; * JMK38
                  END                    ; * JMK53
               END                       ; * JMK38
            END                          ; * JMK38
            IF CS.REC#'' THEN            ; * JMK38
               DEST.FOUND=0              ; * JMK38
               LOCATE DEST.ZIP IN CS.REC<1> SETTING DPOS THEN          ; * JMK38
                  DEST.FOUND=1           ; * JMK38
               END ELSE                  ; * JMK38
                  LOCATE DEST.ZIP[1,3] IN CS.REC<1> SETTING DPOS THEN  ; * JMK38
                     DEST.FOUND=1        ; * JMK38
                  END ELSE               ; * JMK53
                     LOCATE DEST.STATE IN CS.REC<1> SETTING DPOS THEN  ; * JMK53
                        DEST.FOUND=1     ; * JMK53
                     END                 ; * JMK53
                  END                    ; * JMK38
               END                       ; * JMK38
               IF DEST.FOUND THEN        ; * JMK38
                  TRANSIT.TIME=CS.REC<3,DPOS>      ; * JMK38
                  ORIG.DIR.FLG='D'       ; * JMK38
                  DEST.DIR.FLG=CS.REC<2,DPOS>      ; * JMK38
                  COMB.DIR.FLG=''        ; * JMK38
                  IF DEST.DIR.FLG#'' THEN          ; * JMK38
                     IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN     ; * JMK38
                        COMB.DIR.FLG='D'           ; * JMK38
                     END ELSE            ; * JMK38
                        COMB.DIR.FLG='I'           ; * JMK38
                     END                 ; * JMK38
                  END                    ; * JMK38
                  NVAL=DCOUNT(CS.REC<13>,@VM)      ; * JMK38
                  CARR.DATA.DATE=CS.REC<13,NVAL>   ; * JMK38
                  IF COMB.DIR.FLG#'D' THEN         ; * JMK38 ; * JMK68 ; * JMK71
                     JL.FLAG=1           ; * JMK38
                  END                    ; * JMK38
               END ELSE                  ; * DRF12
                  CALL ELINE("Shipping point set to N")      ; * DRF12
                  GO 500                 ; * DRF12
               END                       ; * JMK38
            END                          ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38
*************************************************************** third part logic
      IF IOT='T' THEN
         OPEN 'FB.AUDIT.ZIPS,99000' TO F.TPZIPS ELSE         ; * JMK03
            CALL ELINE("Cannot Open Audit Zips 99000 for 3rd party coverage map")          ; * JMK01
            GO 500                       ; * JMK03
         END                             ; * JMK03
         **************************************************************
         ** Begin GRB07
         IF USER='GBINO' THEN CALL ELINE('PRESS BREAK START TP LOGIC')
         NEW.TP = 1
         OPEN 'FB.AUDIT.TP.DATE,':AUDIT.CLIENT.ID TO F.TPDATE ELSE     ; * INDICATES SETUP FOR NEW THIRD PARTY LOGIC
            OLD.METH = 1
            NEW.TP = 0
            GOTO OLD.TP.LOGIC            ; *(DO WE ADD ENABLE FLAG TO THIS !!!!!!)
            **
         END
         OPEN 'FB.AUDIT.TP.REG,':AUDIT.CLIENT.ID TO F.TPREG ELSE
            NEW.TP = 0
            OLD.METH = 1
            GOTO OLD.TP.LOGIC
         END
         IF NEW.TP THEN
            READ TP.EFF.DT FROM F.TPDATE,CARRIER.ID THEN
               IF TP.EFF.DT<3> = 'DISABLE' THEN
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END ELSE
               NEW.TP = 0
               GOTO OLD.TP.LOGIC
            END
            NEW.TP = 1
            **
            LOCATE BILL.DATE IN TP.EFF.DT<1> BY 'AR' SETTING EFF.DT.POS ELSE     ; * beginning effective date
               IF EFF.DT.POS=1 THEN
                  ERROR='NO Third party effective date found ':CARRIER.ID
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
               EFF.DT.POS=EFF.DT.POS-1
               IF EFF.DT.POS < 1 THEN
                  ERROR='Serious error, EFF.DT.POS is less than 1, Call AFS Programming'
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END
            END.EFF.DT = TP.EFF.DT<2,EFF.DT.POS>
            IF BILL.DATE LT END.EFF.DT OR END.EFF.DT = "" THEN
               TP.EFF.DT = TP.EFF.DT<1,EFF.DT.POS>
               EFF.DATE = TP.EFF.DT
            END
            TP.REG.ID = CARRIER.ID:"*":TP.EFF.DT
            READ TP.REG FROM F.TPREG,TP.REG.ID THEN
               IF TP.REG<1> = 'DISABLE' THEN
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END ELSE
               NEW.TP = 0
               GOTO OLD.TP.LOGIC
            END
            LOCATE ORIG.ZIP[1,3] IN TP.REG<2> BY 'AR' SETTING ORIG.REG.POS ELSE
               ORIG.REG.POS = ORIG.REG.POS -1
            END
            ORIG.REG = TP.REG<5,ORIG.REG.POS>

            TP.AUDIT.ZIPS.ID = CARRIER.ID:"*TP":ORIG.REG:"*":TP.EFF.DT:"*LTLALL*O"
            READ TP.AUDIT.ZIP FROM F.AUDIT.ZIPS,TP.AUDIT.ZIPS.ID THEN
               IF TP.AUDIT.ZIP<1> = 'DISABLE' THEN
                  NEW.TP = 0
                  GOTO OLD.TP.LOGIC
               END
            END ELSE
               NEW.TP = 0
               GOTO OLD.TP.LOGIC
            END
            IF TP.AUDIT.ZIP<1> = "DISABLE" THEN
               NEW.TP = 0
               GOTO OLD.TP.LOGIC
            END
            LOCATE DEST.ZIP[1,3] IN TP.AUDIT.ZIP<2> BY 'AR' SETTING DEST.ZIP.POS ELSE
               DEST.ZIP.POS = DEST.ZIP.POS -1
            END
            DEST.TABLE = TP.AUDIT.ZIP
            TABLE=TP.AUDIT.ZIP<5,DEST.ZIP.POS>
            GOOD.SHIP.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            AUDIT.TABLE.ID=OLA.CARRIER.ID:"*":TABLE          ; * JMK32
            *******DEBUG
            * DO WE JUST PASS THIS AUDIT.TABLE ID DOWN BELOW
            TP.WHY.TAB = ""
            TP.AMT.TAB = ""
            TP.TABLE.TAB = TABLE
            TP.TABLE.TAB<2> = DEST.TABLE
            TP.VOUT1 = ""
            TP.VOUT2 = ""
            TP.CNT = 1

            * Check to See if Routing Zip is Enabled or Disabled
            YN.ROUTE.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            IF YN.ROUTE.POINT='N' THEN ERROR='Dest Zip set to N in Carrier Coverage Map '

            READ DAUDIT.TABLES FROM F.AUDIT.TABLES,AUDIT.TABLE.ID ELSE           ; * FB.AUDIT.TABLES
               ERROR='Cannot Rate Shipment. Table: ':AUDIT.TABLE.ID:' NOF'
            END

            YN.SHIP.POINT=TP.AUDIT.ZIP<4,ORIG.REG.POS>
            IF YN.SHIP.POINT='N' THEN ERROR='Orig Zip set to N in Carrier Coverage Map'

            * DTABLES ZIPS FILE
            * DAUDIT FB.AUDIT PASSED IN

            * Check to See if Effective Date is Enabled or Disabled
            * CHECK IF AUDIT ZIPS IS DISABLED

            GOOD.SHIP.POINT=TP.AUDIT.ZIP<4,DEST.ZIP.POS>
            IF JL.FLAG THEN
               LOCATE 'ZZZ' IN TP.AUDIT.ZIP<2> SETTING JL.POS THEN
                  IF TP.AUDIT.ZIP<4,JL.POS>='Y' THEN
                     JL.TABLE=TP.AUDIT.ZIP<5,JL.POS>
                  END ELSE
                     IF IOT='I' THEN
                        ERROR=('Cannot Rate!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')          ; * JMK41
                        AUDIT='M'
                        GO 9000
                     END
                     JL.FLAG=0
                  END
               END
            END
            GO GOT.NEW.TP
         END
         * End GRB07
************************************************************
OLD.TP.LOGIC:
************************************************************
         IF USER='GBINO' THEN CALL ELINE('PRESS BREAK OLD LOGIC')
         TABLE.ID=OLA.CARRIER.ID:"*71101*12055*LTLALL*I"     ; * JMK03
         READ DTABLES FROM F.TPZIPS,TABLE.ID ELSE  ; * JMK03
            CALL ELINE("Carrier ":CARRIER.ID:" TP Coverage Map not set up in 99000")       ; * JMK03
            GO 500                       ; * JMK03
         END                             ; * JMK03
         IF DTABLES<1>#'ENABLE' THEN     ; * JMK03
            CALL ELINE("Carrier ":CARRIER.ID:" TP Coverage Map is set to DISABLE")         ; * JMK03
            GO 500                       ; * JMK03
         END                             ; * JMK03
**
         LOCATE ROUTE.ZIP IN DTABLES<2> BY 'AR' SETTING ROUTE.POS ELSE           ; * JMK03                          ; * JMK03
            IF ROUTE.POS=1 THEN
               CALL ELINE('Dest Zip ':DEST.ZIP:' is not in coverage Map for carrier ':CARRIER.ID:" ":CARRIER.NAME)
               GO 500
            END
            ROUTE.POS=ROUTE.POS-1        ; * JMK03
            IF ROUTE.POS < 1 THEN        ; * JMK03
               CALL ELINE('Serious error, ROUTE.POS is less than 1, Call Online Audit')    ; * JMK03
               GO 500                    ; * JMK03
            END                          ; * JMK03
            IF ROUTE.ZIP > DTABLES<3,ROUTE.POS> THEN         ; * JMK03
               CALL ELINE('Dest Zip ':DEST.ZIP:' is not in coverage Map for carrier ':CARRIER.ID:" ":CARRIER.NAME)       ; * JMK03
               GO 500                    ; * JMK03
            END                          ; * JMK03
         END                             ; * JMK03
         YN.ROUTE.POINT=DTABLES<4,ROUTE.POS>       ; * JMK03

         LOCATE SHIP.ZIP IN DTABLES<2> BY 'AR' SETTING SHIP.POS ELSE   ; * JMK03
            IF SHIP.POS=1 THEN
               CALL ELINE('Orig Zip ':ORIG.ZIP:' is not in coverage Map for carrier ':CARRIER.ID:" ":CARRIER.NAME)
               GO 500
            END
            SHIP.POS=SHIP.POS-1          ; * JMK03
            IF SHIP.POS < 1 THEN         ; * JMK03
               CALL ELINE('Serious error, SHIP.POS is less than 1, Call AFS Programming')  ; * JMK03
               GO 500                    ; * JMK03
            END                          ; * JMK03
            IF CLIENT.ID='01575' AND OLA.CARRIER.ID='00198' AND COMB.DIR.FLG='D' THEN      ; * JMK50
               IF DAUDIT.ZIPS<3,SHIP.POS> < SHIP.ZIP THEN    ; * JMK50
                  DAUDIT.ZIPS<3,SHIP.POS>=SHIP.ZIP           ; * JMK50
               END                       ; * JMK50
            END                          ; * JMK50
            IF SHIP.ZIP > DTABLES<3,SHIP.POS> THEN           ; * JMK03
               CALL ELINE('Orig Zip ':ORIG.ZIP:' is not in coverage Map for carrier ':CARRIER.ID:" ":CARRIER.NAME)       ; * JMK03
               GO 500                    ; * JMK03
            END                          ; * JMK03
         END                             ; * JMK03
         YN.SHIP.POINT=DTABLES<4,SHIP.POS>         ; * JMK03
         ERROR=''                        ; * JMK03
         IF YN.ROUTE.POINT='N' THEN ERROR='Dest Zip set to N in Carrier Coverage Map '     ; * JMK03
         IF YN.SHIP.POINT='N' THEN ERROR='Orig Zip set to N in Carrier Coverage Map'       ; * JMK03
         IF ERROR#'' THEN                ; * JMK03
            CALL ELINE(ERROR)            ; * JMK03
            GO 500                       ; * JMK03
         END                             ; * JMK03
*AT THIS POINT YOU HAVE A VALID CARRIER                                    ; * JMK03
*GET THE TABLE NUMBER AND RUN THEN NUMBERS                                 ; * JMK03
*LOOK AT BOTH TABLES AND GET THE TABLE NUMBER THAT IS THE HIGHEST NUMBER   ; * JMK03
*IF A TABLE NUMBER IS ONE DIGIT ADD A LEADING ZERO TO INSURE THAT THE      ; * JMK03
*COMPARISON WORKS PROPERLY                                                 ; * JMK03
*******************************************************************        ; * JMK03
         IF USER='GBINO' THEN CALL ELINE('PRESS BREAK JL.FLAG')
         LOOKUP.ZIP='OTHER'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            CALL ELINE('Cannot Audit! OTHER is NOT setup as a Routing Zip!')
            AUDIT='U'
            MISROUTE=1
            ERR='SELECT.ROUTE.ZIP' ; GOSUB 8000
            IF TRY.AGAIN THEN
*          Re-Read Table and try again
               READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
                  CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
                  GOTO 100
               END
               GOTO 525                  ; * Try It Again
            END
            IF IOT='O' THEN GOTO 400 ELSE GOTO 500           ; ** Routing Zip Field
         END
      END ELSE    ; * ********************* end third party logic
         LOOKUP.ZIP='ALL'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            LOOKUP.ZIP=ROUTE.ZIP
            LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
*******************************************************************
*****    See if 1st three digits are there (Must Be Unique)
               CK.TIMES=DCOUNT(DAUDIT<FBA.ROUTE.ZIP>,@VM)
               CK.RZIP=''                ; * Put the Routing Zips Found Here
               FOR CK = 1 TO CK.TIMES
                  FIND.RT.ZIP=DAUDIT<FBA.ROUTE.ZIP,CK>
                  IF FIND.RT.ZIP[1,3]=ROUTE.ZIP[1,3] THEN
                     GUIDE.POS=CK
                     SUB.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,CK>
                     IF SUB.ZIP#'' THEN
                        LOCATE SUB.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                           CALL ELINE("Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!")
                           CC+=1
                           GO 500
                        END
                        FIND.RT.ZIP=SUB.ZIP
                     END
                     LOCATE FIND.RT.ZIP IN CK.RZIP SETTING POS ELSE
                        CK.RZIP<-1>=FIND.RT.ZIP
                        LOOKUP.ZIP=FIND.RT.ZIP
                     END
                  END
               NEXT CK
               IF CK.RZIP='' OR CK.RZIP<2>#'' THEN
                  CALL ELINE('Cannot Audit! ':ROUTE.ZIP:' or ALL is NOT setup as a Routing Zip!')
                  AUDIT='U'
                  MISROUTE=1
                  ERR='SELECT.ROUTE.ZIP' ; GOSUB 8000
                  IF TRY.AGAIN THEN
*          Re-Read Table and try again
                     READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
                        CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
                        GOTO 100
                     END
                     GOTO 525            ; * Try It Again
                  END
                  IF IOT='O' THEN GOTO 400 ELSE GOTO 500     ; ** Routing Zip Field
               END
*******************************************************************
            END
            IF DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS> # '' THEN          ; ** Get BASE Routing Zip POS
               LOOKUP.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS>
               LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                  CALL ELINE("Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!")
                  CC+=1
                  GO 500
               END
            END
         END
      END
      CRT @(55, 5):SUBST.ZIP:
      CRT @(55, 6):LOOKUP.ZIP:
***************************************************************
* Check to See if Routing Zip is Enabled or Disabled
***************************************************************
      IF DAUDIT<FBA.ROUTE.ZIP.STATUS,GUIDE.POS>='DISABLE' THEN
         IF PROCESS.MODE = 'Quote' THEN
            CALL ELINE("Cannot Quote! Route Zip ":LOOKUP.ZIP:" is set to DISABLE")
         END ELSE
            CALL ELINE("Cannot Audit! Route Zip ":LOOKUP.ZIP:" is set to DISABLE")
         END
         AUDIT='U'
         MISROUTE=1
         ERR='ROUTE.ZIP.DISABLED' ; GOSUB 8000
         IF TRY.AGAIN THEN
*        RE-READ TABLE & TRY AGAIN
            READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
               CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
               GOTO 100
            END
            GOTO 525                     ; * Try It Again
         END
         IF IOT='O' THEN GOTO 400 ELSE GOTO 500    ; ** Routing Zip Field
      END
* Get Effective Date
      FIRST.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,1>
      LAST.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DCOUNT(DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS>,@SVM)>
      IF BILL.DATE < FIRST.DATE THEN     ; * Is bill Before Beginning Date
         IF PROCESS.MODE = 'Quote' THEN
            CALL ELINE('Cannot Quote! Bill date is earlier than 1st effective date of ':FIRST.DATE'D2/')
         END ELSE
            CALL ELINE('Cannot Audit! Bill date is earlier than 1st effective date of ':FIRST.DATE'D2/')
         END
         AUDIT='U'
         MISROUTE=1
         ERR='SELECT.EFF.DATE' ; GOSUB 8000
         IF TRY.AGAIN THEN
*        RE-READ TABLE & TRY AGAIN
            READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
               CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
               GOTO 100
            END
            GOTO 525                     ; * Try It Again
         END
         GOTO 200
      END
      IF LAST.DATE#'' AND (BILL.DATE > LAST.DATE) THEN
         IF PROCESS.MODE = 'Quote' THEN
            CALL ELINE('Cannot Quote!  Bill Date is later than Ending Effective Date of ':LAST.DATE'D2/')
         END ELSE
            CALL ELINE('Cannot Audit!  Bill Date is later than Ending Effective Date of ':LAST.DATE'D2/')
         END
         AUDIT='U'
         MISROUTE=1
         ERR='SELECT.EFF.DATE' ; GOSUB 8000
         IF TRY.AGAIN THEN
*        RE-READ TABLE & TRY AGAIN
            READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
               CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
               GOTO 100
            END
            GOTO 525                     ; * Try It Again
         END
         GOTO 200
      END
      LOCATE BILL.DATE IN DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS> BY 'AR' SETTING DT.POS ELSE
         DT.POS=DT.POS-1
         IF DT.POS < 1 THEN
            CALL ELINE('Serious error Contract Carrier Date POS is less than 1, Call Owen')
            GOTO 525
         END
      END
      EFF.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,DT.POS>
      CRT @(55, 7):EFF.DATE'D2/':
      END.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DT.POS>
      IF END.DATE#'' AND (BILL.DATE > END.DATE) THEN
         IF PROCESS.MODE = 'Quote' THEN
            CALL ELINE('Cannot Quote Bill!  Bill Date is not included in Effective date ranges')
         END ELSE
            CALL ELINE('Cannot Audit Bill!  Bill Date is not included in Effective date ranges')
         END
         AUDIT='U'
         MISROUTE=1
         ERR='SELECT.EFF.DATE' ; GOSUB 8000
         IF TRY.AGAIN THEN
*        RE-READ TABLE & TRY AGAIN
            READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
               CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
               GOTO 100
            END
            GOTO 525                     ; * Try It Again
         END
         GOTO 200
      END
***************************************************************
* Check to See if Effective Date is Enabled or Disabled
***************************************************************

      IF DAUDIT<FBA.EFF.DATE.STATUS,GUIDE.POS,DT.POS> = 'DISABLE' THEN
         IF PROCESS.MODE = 'Quote' THEN
            CALL ELINE('Cannot Quote! Effective Date ':EFF.DATE'D2/':' is set to DISABLE')
         END ELSE
            CALL ELINE('Cannot Audit! Effective Date ':EFF.DATE'D2/':' is set to DISABLE')
         END
         AUDIT='U'
         MISROUTE=1
         ERR='EFF.DATE.DISABLED' ; GOSUB 8000
         IF TRY.AGAIN THEN
*        RE-READ TABLE & TRY AGAIN
            READ DAUDIT FROM F.AUDIT,OLA.CARRIER.ID ELSE
               CALL ELINE("Error! - No On-Line Audit has been setup for this carrier! Cannot ":PROCESS.MODE:" Bills")
               GOTO 100
            END
            GO 525
         END
         GOTO 200
      END
      AUDIT.ZIPS.ID=OLA.CARRIER.ID:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":IOT.AUDIT
      READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
         IF 1 AND IOT = 'T' THEN
            AUDIT.ZIPS.ID=CARRIER.ID:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":"I"
            READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
               ERROR=("Cannot Rate! Zip Table Not On File ":AUDIT.ZIPS.ID)
               AUDIT='U'
               GO 9000
            END
         END ELSE
            IF PROCESS.MODE = 'Quote' THEN
               CALL ELINE("Cannot Quote! ":TEXT:" Shipping points have not been setup.")
            END ELSE
               CALL ELINE("Cannot Audit! ":TEXT:" Shipping points have not been setup.")
            END
            ERR='NO.SHIPPING.POINTS' ; GOSUB 8000
            IF TRY.AGAIN THEN GO 525
            IF IOT='O' THEN GOTO 400 ELSE GOTO 500           ; ** Routing Zip Field
            AUDIT='U'
            MISROUTE=1
            ERR='' ; GOSUB 8000
            GOTO 300
         END
      END
      IF DAUDIT.ZIPS<1>='DISABLE' THEN
         CALL ELINE('Error! Shipping Points have been set to Disable!')
         AUDIT='U'
         MISROUTE=1
         ERR='' ; GOSUB 8000
         IF IOT='O' THEN GOTO 400 ELSE GOTO 500    ; ** Routing Zip Field
      END
      IF DAUDIT.ZIPS<2,1>='' THEN
         CALL ELINE('Error! No Shipping Points have been setup!')
         AUDIT='U'
         MISROUTE=1
         ERR='' ; GOSUB 8000
         IF IOT='O' THEN GOTO 400 ELSE GOTO 500    ; ** Routing Zip Field
      END
      IF SHIP.ZIP < DAUDIT.ZIPS<2,1> THEN
         IF PROCESS.MODE = 'Quote' THEN
            CALL ELINE('Cannot Quote! Shipping point of ':SHIP.ZIP:' has a Flag of N and No table number')
         END ELSE
            CALL ELINE('Cannot Audit! Shipping point of ':SHIP.ZIP:' has a Flag of N and No table number')
         END
         AUDIT='U'
         MISROUTE=1
         ERR='STATE' ; GOSUB 8000
         IF TRY.AGAIN THEN GOTO 525      ; * Try It Again
         IF IOT='I' THEN GOTO 400 ELSE GOTO 500    ; ** ShipPnt Zip Field
      END
      TEMP.STRING=DAUDIT.ZIPS<2>
      LOCATE SHIP.ZIP IN TEMP.STRING<1> BY 'AR' SETTING SHIP.POS ELSE
         SHIP.POS=SHIP.POS-1
         IF SHIP.POS < 1 THEN
            CALL ELINE('Serious error, SHIP.POS is less than 1, Call Owen')
            GOTO 525
         END
         IF SHIP.ZIP > DAUDIT.ZIPS<3,SHIP.POS> THEN
            IF PROCESS.MODE = 'Quote' THEN
               CALL ELINE('Cannot Quote! Shipping point of ':SHIP.ZIP:' has a Flag of N and No table number')
            END ELSE
               CALL ELINE('Cannot Audit! Shipping point of ':SHIP.ZIP:' has a Flag of N and No table number')
            END
            AUDIT='U'
            MISROUTE=1
            ERR='STATE' ; GOSUB 8000
            IF TRY.AGAIN THEN GOTO 525   ; * Try It Again
            IF IOT='I' THEN GOTO 400 ELSE GOTO 500           ; ** ShipPnt Zip Field
         END
      END
      LOCATE ROUTE.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING RSZ.POS THEN
         SZ.BEG.EFF.DATES = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS>
         SZ.END.EFF.DATES = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS>
         IF SZ.BEG.EFF.DATES = "" AND SZ.END.EFF.DATES = "" THEN
            NULL
         END ELSE
******************   Do this piece of code if any effective sub zip dates are set up.
*DF            N.SZ.DATES = DCOUNT(SZ.BEG.EFF.DATES,@SVM)     ; * DRF24
            BEG.N.SZ.DATES = DCOUNT(SZ.BEG.EFF.DATES,@SVM)   ; * DRF24
            END.N.SZ.DATES = DCOUNT(SZ.END.EFF.DATES,@SVM)   ; * DRF24
            IF END.N.SZ.DATES > BEG.N.SZ.DATES THEN          ; * DRF24
               N.SZ.DATES=END.N.SZ.DATES           ; * DRF24
            END ELSE                     ; * DRF24
               N.SZ.DATES=BEG.N.SZ.DATES           ; * DRF24
            END                          ; * DRF24
            SUBZIP.OK = "N"
*
            LAST.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,N.SZ.DATES>
            LAST.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,N.SZ.DATES>
*
            IF LAST.END.EFF.DATE = "" AND BILL.DATE GE LAST.BEG.EFF.DATE THEN    ; * No final end eff date
               SUBZIP.OK = "Y"           ; * Open end date ok
            END ELSE
               IF BILL.DATE GE DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,1> THEN        ; * Date after first Eff date ok otherwise not
                  FOR DD = 1 TO N.SZ.DATES
                     SZ.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,DD>
                     SZ.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,DD>
**********************  Check if Bill Date is within any date ranges.
                     IF BILL.DATE GE SZ.BEG.EFF.DATE AND BILL.DATE LE SZ.END.EFF.DATE THEN
                        SUBZIP.OK = "Y"
                     END
                  NEXT DD
               END
            END
*
            IF SUBZIP.OK = "N" THEN
               CALL ELINE('Cannot Rate! Substitution Zip ':ROUTE.ZIP:' not in effect as at ':OCONV(BILL.DATE,"D2/"))
               GOTO 500
            END
         END
      END
      GOOD.SHIP.POINT=DAUDIT.ZIPS<4,SHIP.POS>
      TABLE=DAUDIT.ZIPS<5,SHIP.POS>
      IF CLIENT.ID='01575' AND OLA.CARRIER.ID='00198' AND ORIG.ZIP='75223' THEN GOOD.SHIP.POINT='C'  ; * JMK50
      IF GOOD.SHIP.POINT='C' THEN        ; * JMK50
         BEGIN CASE                      ; * JMK50
            CASE COMB.DIR.FLG='D'        ; * JMK50
               GOOD.SHIP.POINT='Y'       ; * JMK50
            CASE 1                       ; * JMK50
               GOOD.SHIP.POINT='N'       ; * JMK50
         END CASE                        ; * JMK50
      END                                ; * JMK50
      IF JL.FLAG THEN                    ; * JMK38

         LOCATE 'ZZZ' IN TEMP.STRING<1> SETTING JL.POS THEN  ; * JMK38 ; * JMK40 ; * JMK60
            IF DAUDIT.ZIPS<4,JL.POS>='Y' THEN      ; * JMK38
               JL.TABLE=DAUDIT.ZIPS<5,JL.POS>      ; * JMK38
            END ELSE                     ; * JMK38
               IF IOT='I' THEN           ; * JMK42
                  IF PROCESS.MODE = 'Quote' THEN   ; * JMK42
                     CALL ELINE('Cannot Quote! No Inbound Joint Line Pricing for this Carrier')      ; * JMK42
                  END ELSE               ; * JMK42
                     CALL ELINE('Cannot Audit! No Inbound Joint Line Pricing for this Carrier')      ; * JMK42
                  END                    ; * JMK42
                  AUDIT='U'              ; * JMK42
                  MISROUTE=1             ; * JMK42
                  ERR='STATE' ; GOSUB 8000         ; * JMK42
                  IF TRY.AGAIN THEN GOTO 525       ; * Try It Again ; * JMK42
                  IF IOT='I' THEN GOTO 400 ELSE GOTO 500     ; ** ShipPnt Zip Field ; * JMK42
               END                       ; * JMK42
               JL.FLAG=0                 ; * JMK38
            END                          ; * JMK38
         END ELSE                        ; * JMK38
            IF IOT='I' THEN              ; * JMK42
               IF PROCESS.MODE = 'Quote' THEN      ; * JMK42
                  CALL ELINE('Cannot Quote! No Inbound Joint Line Pricing for this Carrier')         ; * JMK42
               END ELSE                  ; * JMK42
                  CALL ELINE('Cannot Audit! No Inbound Joint Line Pricing for this Carrier')         ; * JMK42
               END                       ; * JMK42
               AUDIT='U'                 ; * JMK42
               MISROUTE=1                ; * JMK42
               ERR='STATE' ; GOSUB 8000  ; * JMK42
               IF TRY.AGAIN THEN GOTO 525          ; * Try It Again ; * JMK42
               IF IOT='I' THEN GOTO 400 ELSE GOTO 500        ; ** ShipPnt Zip Field ; * JMK42
            END                          ; * JMK42
            JL.FLAG=0                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38
********************************************************************
*
* For third party that is the ORIG Table. we must find the Dest table ; * JMK03
*
      IF IOT='T' THEN                    ; * JMK03
*
         IF ROUTE.ZIP < DAUDIT.ZIPS<2,1> THEN      ; * JMK03
            CALL ELINE('Cannot Rate! Dest Zip':ROUTE.ZIP:' is not setup in the Y/N Table')           ; * JMK03
            GO 500                       ; * JMK03
         END                             ; * JMK03
         LOCATE ROUTE.ZIP IN DAUDIT.ZIPS<2> BY 'AR' SETTING ROUTE.POS ELSE       ; * JMK03
            ROUTE.POS=ROUTE.POS-1        ; * JMK03
            IF ROUTE.POS < 1 THEN        ; * JMK03
               CALL ELINE('Serious error, ROUTE.POS is less than 1, Call Online Audit')    ; * JMK03
               GO 500                    ; * JMK03
            END                          ; * JMK03
            IF ROUTE.ZIP > DAUDIT.ZIPS<3,ROUTE.POS> THEN     ; * JMK03
               CALL ELINE('Cannot Rate! Dest Zip ':ROUTE.ZIP:' is not setup in the Y/N Table')       ; * JMK03
               GO 500                    ; * JMK03
            END                          ; * JMK03
         END                             ; * JMK03
         DEST.GOOD.SHIP.POINT=DAUDIT.ZIPS<4,ROUTE.POS>       ; * JMK03
         DEST.TABLE=DAUDIT.ZIPS<5,ROUTE.POS>       ; * JMK03
         GOOD.SHIP.POINT='Y'             ; * Force a Good Shipping Point; * JMK03

* Make sure both tables are two digits ; * JMK03
* Compare the two use the HIGEST table number as the real TABLE ; * JMK03
* Except for Con-Way 02653, Check Orig & Dest Table if they are different ; * JMK03
* Use both tables together lowest table letter 1st ie. D & A use AD ; * JMK03

         TP.WHY.TAB = ""
         TP.AMT.TAB = ""
         TP.TABLE.TAB = TABLE
         TP.TABLE.TAB<2> = DEST.TABLE
         TP.CLIENT.COST = ""
         TP.QUOTE.AMT = ""
         QUOTE.AMT = 0
         TP.GTOT.CONTR.AMT = ""
         TP.GTOT.BENCH.AMT = ""
         TP.CONSULTING.AMT = ""
         TP.CNT = 1
      END
********************************************************************
*
      IF GOOD.SHIP.POINT#'Y' THEN
         IF TABLE#'' THEN
            IF PROCESS.MODE = 'Quote' THEN
               CALL ELINE("Misroute but Able to Quote!  Shipping point flag is: N  Table: ":TABLE)
            END ELSE
               CALL ELINE("Misroute but Able to Audit!  Shipping point flag is: N  Table: ":TABLE)
            END
            MISROUTE=1
            ERR='STATE' ; GOSUB 8000
            IF TRY.AGAIN THEN GOTO 525   ; * Try It Again
            GO 575                       ; * Able to Audit... Continue Anyway
         END ELSE
            IF PROCESS.MODE = 'Quote' THEN
               CALL ELINE("Cannot Quote! This bill is a misroute (Shp.Pnt=N No Table to ":PROCESS.MODE:" Bill)")
            END ELSE
               CALL ELINE("Cannot Audit! This bill is a misroute (Shp.Pnt=N No Table to ":PROCESS.MODE:" Bill)")
            END
            AUDIT='U'
            MISROUTE=1
            ERR='STATE' ; GOSUB 8000
            IF TRY.AGAIN THEN GOTO 525   ; * Try It Again
            IF IOT='I' THEN GOTO 400 ELSE GOTO 500           ; ** ShipPnt Zip Field
         END
      END
************************************************************************
575:  ***   Skip To Rate Misroutes
*************************************************************
      IF IOT = "T" THEN
         TABLE = TP.TABLE.TAB<TP.CNT>    ; * Contains Originating and Destination Tables
      END
      ZIP.VIN=OLA.CARRIER.ID
      ZIP.VIN<2>=ORIG.ZIP
      ZIP.VIN<3>=DEST.ZIP
      ZIP.VIN<4>=CLIENT.ID
      CALL FB.CHECK.COVERAGE.ZIP(ZIP.VIN,ZIP.VOUT)
      IF USER='DAVID' THEN CALL ELINE('JOINT LINE CHECK')
      IF ZIP.VOUT<1>='J' THEN
         IF LEN(TABLE) <2 THEN
            TABLE='J':TABLE'R%2'
         END ELSE
            TABLE='J':TABLE
         END
      END
      AUDIT.TABLE.ID=OLA.CARRIER.ID:"*":TABLE

*********************************************************************
GOT.NEW.TP:* LAND HERE WITH NEW AUDIT TABLE ID
*********************************************************************
****DEBUG
      READ DAUDIT.TABLES FROM F.AUDIT.TABLES,AUDIT.TABLE.ID ELSE
         IF PROCESS.MODE = 'Quote' THEN
            CALL ELINE("Cannot Quote! F.AUDIT.TABLES,":AUDIT.CLIENT.ID:" ":AUDIT.TABLE.ID:" is missing!")
         END ELSE
            CALL ELINE("Cannot Audit! F.AUDIT.TABLES,":AUDIT.CLIENT.ID:" ":AUDIT.TABLE.ID:" is missing!")
         END
         AUDIT='U'
         ERR='EDIT.TABLE' ; GOSUB 8000
         IF TRY.AGAIN THEN GOTO 525      ; * Try It Again
         GO 300
      END
      IF JL.FLAG THEN                    ; * JMK38
         JL.AUDIT.TABLE.ID=OLA.CARRIER.ID:'*':JL.TABLE       ; * JMK38
         READ JL.DAUDIT.TABLES FROM F.AUDIT.TABLES,JL.AUDIT.TABLE.ID ELSE        ; * JMK38
            JL.FLAG=0                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38
      IF IOT = "T" THEN
         IF TP.CNT EQ "2" THEN GO 1000
      END

* Get Freight Bill Details (Class & Weights) of each line item
************************************************************************
590:  *** Just Enter The Data for Misroutes
************************************************************************
      CW.SEL = 0
      MC.SEL = 0
      RWS.TIMES = 0                      ; * JMK23
      FOR X=1 TO 14
         LINE=REM(X,7)
         IF LINE=0 THEN LINE=7
         LINE=LINE+10
         IF X < 8 THEN OFFSET=0 ELSE OFFSET=18
         IF CLASS.WGT<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(0+OFFSET,LINE):SPACE(15):
            END ELSE
               PRINT @(0+OFFSET,LINE):X'R%2':SPACE(13):
            END
         END ELSE
            PRINT @(0+OFFSET,LINE):X'R(%2 )':      ; * Selection
            PRINT @(3+OFFSET,LINE):CLASS.WGT<1,X>'R(#5 )':   ; * Class
            PRINT @(9+OFFSET,LINE):CLASS.WGT<2,X>'R(#6 )':   ; * Weight
         END
      NEXT X
*************************************************************
600:  *** Enter Line Number for Class Weight
*************************************************************
      IF CW.MODE='INPUT' THEN
         CW.SEL=CW.SEL+1
         QI=CW.SEL
         IF CW.SEL GT 14 THEN
            CW.MODE='EDIT'
            GO 700
         END
      END ELSE
         HELP="Enter Class-Weight Line Number, <RETURN>=Done, 'X'=Back, 'EX'=Exit."
         CALL GEN.IN(0,22,'Enter Class-Weight line number. ##','',Q,0,2,'','',0 ,-2,22,0,QI,HELP,0,23)
      END
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            GO 700                       ; *** Done with Line Items
         CASE QI='X'
            GO 500
         CASE QI='EX'
            X.EX.FLAG='EX'
            GO 9000
         CASE NUM(QI)
            IF INQUIRE THEN
               CALL ELINE('Can not access detail in inquiry!')
            END ELSE
               IF QI > 1 THEN
                  IF CLASS.WGT<1,QI-1>='' THEN
                     CALL ELINE("Cannot Skip a line.  You must select the next blank line")
                     GO 600
                  END
               END
               IF QI > 14 THEN
                  CALL ELINE("Maximum line number is 14")
                  GO 700
               END
               CW.SEL=QI
               GOSUB 620
               IF QI='X' AND CW.SEL=1 THEN GO 500
               IF OPT='V' & QI='' THEN GO 700      ; ** Done with Class Weight
            END
      END CASE
      GO 600

*************************************************************************
620:  *** Enter Class Weight Line Items
************************************************************************
      IF CW.SEL LT 1 ! CW.SEL GT 14 THEN
         CALL ELINE('Invalid entry.')
         RETURN
      END
      LINE=REM(CW.SEL,7)
      IF LINE=0 THEN LINE=7
      IF CW.SEL < 8 THEN OFFSET=0 ELSE OFFSET=18
      LINE=LINE+10

*************************************************************************
640:  *** Enter the Line Item Class
************************************************************************
      HELP="Enter the Class ''=ACCEPT 'X'=Back 'EX'=Exit [SPACE]=Clear"
      IF OPT='V' THEN MASK=SPACE(5) ELSE MASK=CLASS.WGT<1,CW.SEL>'R#5'
      IF CW.MODE='EDIT' AND CLASS.WGT<1,CW.SEL>='' THEN CW.MODE='INPUT'
      CALL GEN.IN(3+OFFSET,LINE,MASK,'',Q,0,5,'','',2,-5,LINE,0,QI,HELP,0,23)
      IF QI=' ' THEN CLASS.WGT<1,CW.SEL>='' ; QI=''
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=CLASS.WGT<1,CW.SEL>
            IF Q='' THEN                 ; ** Done with Line Items
               IF CW.SEL=1 THEN

                  CALL ELINE('Error! You Must Enter at Least One Class & Weight!')
                  GO 640
               END
               CW.SEL=CW.SEL-1           ; * Reset Entry Point for X-Back From Misc Chg
               RETURN TO 700
            END
         CASE QI='X'
            CRT @(3+OFFSET,LINE):CLASS.WGT<1,CW.SEL>'R(#5 )'
            IF CW.SEL=1 THEN
               RETURN TO 500
            END ELSE
               CW.SEL=CW.SEL-1
               LINE=REM(CW.SEL,7)
               IF LINE=0 THEN LINE=7
               IF CW.SEL < 8 THEN OFFSET=0 ELSE OFFSET=18
               LINE=LINE+10
               GO 660
            END
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NUM(QI)
            IF QI LE 0 THEN
               CALL ELINE('Must be a number greater than 0')
               GO 640
            END
         CASE QI MATCHES "2N" OR QI MATCHES "2N.1N" OR QI MATCHES "3N"
            Q=QI
         CASE 1
            CALL ELINE("Must be NN or NNN or NN.N")
            GO 640
      END CASE
      IF Q=77.5 THEN Q=77
      IF Q=92.5 THEN Q=92
      LOCATE Q IN VALID.CLASSES<1> SETTING POS ELSE
         CALL ELINE("Invalid Class")
         GO 640
      END
      CLASS.WGT<1,CW.SEL>=Q
      PRINT @(3+OFFSET,LINE):Q'R(#5 )'

*************************************************************************
660:  *** Enter the Line Item Weight
************************************************************************
      HELP="Enter the Weight ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF OPT='V' THEN MASK=SPACE(6) ELSE MASK=CLASS.WGT<2,CW.SEL>'R#6'
      CALL GEN.IN(9+OFFSET,LINE,MASK,'',Q,0,6,'','',2,-6,LINE,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=CLASS.WGT<2,CW.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               GO 660
            END
         CASE QI='X'
            CRT @(9+OFFSET,LINE):CLASS.WGT<2,CW.SEL>'R(#6 )'
            GO 640
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NUM(QI)
            IF QI LE 0 OR INDEX(QI,'.',1) THEN
               CALL ELINE('Must be a Whole Number greater than 0')
               GO 660
            END
         CASE QI MATCHES "0N"
            Q=QI
         CASE 1
            CALL ELINE("Must be a positive whole number")
            GO 660
      END CASE
      CLASS.WGT<2,CW.SEL>=Q
      PRINT @(9+OFFSET,LINE):Q'R(#6 )'
      RETURN

*************************************************************************
700:  *** Get Line Number for Misc Charge Entry
*************************************************************************
      GOSUB CLEAR.MC.WINDOW              ; * NPR08

      IF NOT(FGC) THEN                   ; *DRF01
         TOT.WEIGHT=SUM(CLASS.WGT<2>)    ; *DRF01
         LOCATE TOT.WEIGHT IN CARRIER.REC<70> BY "AR" SETTING WEIGHT.POS ELSE NULL         ; *DRF01
         TRANSPORT.MODE = OCONV(CARRIER.REC<71,WEIGHT.POS>,'MCU')      ; *DRF01
         ZIP.LINE.ID=CARRIER.ID:'*':CLIENT.ID:'*':TRANSPORT.MODE:'*':IOT         ; *DRF01
         READ DZIP.LINE FROM F.ZIP.LINE.ITEM,ZIP.LINE.ID ELSE          ; *DRF01
            ZIP.LINE.ID=CARRIER.ID:'*ALL*':TRANSPORT.MODE:'*':IOT      ; *DRF01
            READ DZIP.LINE FROM F.ZIP.LINE.ITEM,ZIP.LINE.ID ELSE DZIP.LINE=''    ; *DRF01
         END                             ; *DRF01
         IF DZIP.LINE#'' THEN            ; *DRF01
            LOCATE ORIG.ZIP IN DZIP.LINE<1> BY 'AR' SETTING ZIP.POS THEN         ; *DRF01
               ZIP.POS=ZIP.POS+1         ; *DRF01
            END                          ; *DRF01
            IF ZIP.POS > 1 THEN          ; *DRF01
               ZIP.POS=ZIP.POS-1         ; *DRF01
               IF DZIP.LINE<2,ZIP.POS> >= ORIG.ZIP THEN      ; *DRF01
                  NUM.OF.SVM = DCOUNT(DZIP.LINE<3,ZIP.POS>,@SVM)       ; *DRF01
                  FOR Z = 1 TO NUM.OF.SVM          ; *DRF01
                     IF DZIP.LINE<4,ZIP.POS,Z>='O' OR DZIP.LINE<4,ZIP.POS,Z>='B' THEN      ; *DRF01
                        LOCATE DZIP.LINE<3,ZIP.POS,Z> IN MISC.CHG<1> SETTING DUMMY.POS ELSE          ; *DRF01
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MISC.CHG<1,1>       ; *DRF01
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MANDITORY.CHG<1,1>  ; *DRF01
                        END              ; *DRF01
                     END                 ; *DRF01
                  NEXT Z                 ; *DRF01
               END                       ; *DRF01
            END                          ; *DRF01
            LOCATE DEST.ZIP IN DZIP.LINE<1> BY 'AR' SETTING ZIP.POS THEN         ; *DRF01
               ZIP.POS=ZIP.POS+1         ; *DRF01
            END                          ; *DRF01
            IF ZIP.POS > 1 THEN          ; *DRF01
               ZIP.POS=ZIP.POS-1         ; *DRF01
               IF DZIP.LINE<2,ZIP.POS> >= DEST.ZIP THEN      ; *DRF01
                  NUM.OF.SVM = DCOUNT(DZIP.LINE<3,ZIP.POS>,@SVM)       ; *DRF01
                  FOR Z = 1 TO NUM.OF.SVM          ; *DRF01
                     IF DZIP.LINE<4,ZIP.POS,Z>='D' OR DZIP.LINE<4,ZIP.POS,Z>='B' THEN      ; *DRF01
                        LOCATE DZIP.LINE<3,ZIP.POS,Z> IN MISC.CHG<1> SETTING DUMMY.POS ELSE          ; *DRF01
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MISC.CHG<1,1>       ; *DRF01
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MANDITORY.CHG<1,1>  ; *DRF01
                        END              ; *DRF01
                     END                 ; *DRF01
                  NEXT Z                 ; *DRF01
               END                       ; *DRF01
            END                          ; *DRF01
         END                             ; *DRF01
      END                                ; *DRF01
      IF MC.MODE='INPUT' THEN
         MC.SEL=MC.SEL+1
         QI=MC.SEL
         IF MC.SEL GT 7 THEN             ; * NPR08
            MC.MODE='EDIT'
            GO 700                       ; * NPR08
         END
      END ELSE
         HELP="Enter Misc Charge Line Number, <RETURN>=Done, 'X'=Back, 'EX'=Exit."
         CALL GEN.IN(0,22,'Enter Misc Charge line number. ##','',Q,0,2,'','',0,-2,22,0,QI,HELP,0,23)
      END
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            GOSUB CLEAR.MC.WINDOW        ; * NPR08
            GO 1000                      ; *** Done with Line Items
         CASE QI='X'
            GO 600
         CASE QI='EX'
            X.EX.FLAG='EX'
            GO 9000
         CASE NUM(QI)
            IF INQUIRE THEN
               CALL ELINE('Can not access detail in inquiry!')
            END ELSE
               IF QI > 1 THEN
                  IF MISC.CHG<1,QI-1>='' THEN
                     CALL ELINE("Cannot Skip a line.  You must select the next blank line")
                     GO 700
                  END
               END
               IF QI > 7 THEN
                  CALL ELINE("Maximum line number is 7")     ; * NPR08
                  GO 700
               END
               MC.SEL=QI
               LU.LINE = 1               ; * NPR08
               GOSUB 720
               IF QI='X' AND MC.SEL=1 THEN GO 600
               IF OPT='V' & QI='' THEN GO 1000     ; ** Done with Line Items
            END
      END CASE
      GO 700

*************************************************************************
720:  *** Get Charge Code, Contract Amount, & Benchmark Amount
************************************************************************
      IF MC.SEL LT 1 ! MC.SEL GT 7 THEN  ; * NPR08
         CALL ELINE('Invalid entry. Enter a number between 1 and 7')   ; * NPR08
         RETURN
      END
      LINE=MC.SEL ; OFFSET=0
      LINE=LINE+10
      PAGE = 1                           ; * NPR08
*************************************************************************
740:  *** Enter the Misc Charge Code
*************************************************************************

      HELP="Enter the Misc Charge Code, 'L'IST ''=ACCEPT [SPACE]=Clear 'X'=Back 'EX'=Exit"           ; * NPR08
      IF OPT='V' THEN MASK=SPACE(4) ELSE MASK=MISC.CHG<1,MC.SEL>'L#4'
      IF MC.MODE='EDIT' AND MISC.CHG<1,MC.SEL>='' THEN MC.MODE='INPUT'
      CHOICE.STR=''
      CHOICE.ARRAY = ''                  ; * NPR08
      IF JL.FLAG THEN                    ; * JMK49
         MAX.CHOICE=DCOUNT(JL.DAUDIT.TABLES<26>,@VM)         ; * JMK49
         FOR X=1 TO MAX.CHOICE           ; * JMK49
            CHOICE.STR:=" ":X:"=":JL.DAUDIT.TABLES<26,X>     ; * JMK49
            CHOICE.ARRAY<X> = JL.DAUDIT.TABLES<26,X>         ; * NPR08
         NEXT X                          ; * JMK49
      END ELSE                           ; * JMK49
         MAX.CHOICE=DCOUNT(DAUDIT.TABLES<26>,@VM)
         FOR X=1 TO MAX.CHOICE
            CHOICE.STR:=" ":X:"=":DAUDIT.TABLES<26,X>
            CHOICE.ARRAY<X> = DAUDIT.TABLES<26,X>  ; * NPR08
         NEXT X
      END                                ; * JMK49
      BEGIN CASE
         CASE MAX.CHOICE=1
            CRT @(0,22):@(-4):("Choices:":CHOICE.STR)[1,79]
         CASE MAX.CHOICE>1
         CASE 1
            NULL
      END CASE

      IF NOT(GOT.ACC.CODES) THEN GOSUB GET.ACC.CHARGES       ; * NPR08
      GOSUB SETUP.MC.DISPLAY             ; * NPR08
      MC.ATTR = 1                        ; * NPR08
      IF NOT(FGC) THEN GOSUB DISP.MISC.CHARGES     ; * NPR08
************************************************************************
745:
************************************************************************
      HELP="Code  OR line No. ''=End. 'B'=Back Pg. 'F'=Fwd Pg. 'X'=Back. 'EX'=Exit."
      CALL GEN.IN(39+OFFSET,LINE,MASK,'',Q,0,4,'','',0,39+OFFSET,LINE,0,QI,HELP,0,23)      ; *DRF01
      QI = OCONV(QI,"MCU")
      Q = OCONV(Q,"MCU")
      BEGIN CASE
         CASE QI='B'
            MC.ATTR = MC.ATTR - 14
            IF MC.ATTR LE 8 THEN MC.ATTR=1
            GOSUB DISP.MISC.CHARGES
            GOSUB 745
         CASE QI='F'
            IF CHOICE.ARRAY<MC.ATTR+1> = "" THEN
               IF MC.ATTR GT 8 THEN MC.ATTR = MC.ATTR - 8
               CALL ELINE("No more pages!")
               GOSUB DISP.MISC.CHARGES
               GOTO 745
            END
            GOSUB DISP.MISC.CHARGES
            GOTO 745
      END CASE
      CRT @(0,22):@(-4):
      QI=OCONV(QI,'MCU')
      IF QI=' ' THEN
         IF MISC.CHG<1,MC.SEL>#'' THEN   ; *DRF01
            LOCATE MISC.CHG<1,MC.SEL> IN MANDITORY.CHG<1> SETTING DUMMY.POS THEN           ; *DRF01
               CALL ELINE('This is a manditory charge for this zip code. It cannot be deleted')      ; *DRF01
               GOTO 720                  ; *DRF01
            END                          ; *DRF01
         END                             ; *DRF01
         IF MC.SEL<4 AND MISC.CHG<1,MC.SEL+1>#'' THEN
            CALL ELINE('Error!  You can only CLEAR the last charge listed')
            GO 720
         END
         MISC.CHG<1,MC.SEL>=''
         MISC.CHG<2,MC.SEL>=''
         MISC.CHG<3,MC.SEL>=''
         MISC.CHG<4,MC.SEL>=''           ; * JMK63
         PRINT @(44,LINE):SPACE(13):     ; * Clear the Amounts
         QI=''
         Q=''
      END
      IF QI#'' AND QI MATCHES '0N' THEN
         IF QI > 0 AND QI LE (MAX.CHOICE+ACC.CNT) THEN       ; * NPR08
            Q=CHOICE.ARRAY<QI>           ; * NPR08
            QI=CHOICE.ARRAY<QI>          ; * NPR08
            IF QI='' THEN CALL ELINE("Invalid Choice") ; GO 740
            CRT @(39+OFFSET,LINE):QI:
         END
         LOCATE Q IN MISC.CHG<1> SETTING MPOS THEN           ; * JMK04
            CALL ELINE(Q:" has already been used")           ; * JMK04
            GO 740
         END                             ; * JMK04
      END
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<1,MC.SEL>
            IF Q='' THEN
               GOSUB CLEAR.MC.WINDOW     ; * NPR08
               MC.SEL=MC.SEL-1
               RETURN TO 1000
            END
         CASE QI='X'
            CRT @(39+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'
            IF MC.SEL=1 THEN
               MC.SEL=MC.SEL-1
               RETURN TO 600
            END ELSE
               MC.SEL=MC.SEL-1
               LINE=REM(MC.SEL,2)
               IF LINE=0 THEN LINE=2
               IF MC.SEL < 3 THEN OFFSET=0 ELSE OFFSET=25
               LINE=LINE+10
               GO 720                    ; * Previous Code Line
            END
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
      END CASE

      IF FGC=1 THEN
         MISC.CHG<1,MC.SEL>=Q
         RETURN                          ; * No need to "Get Amounts" Just Need Code
      END
      MISC.CHG<4,MC.SEL>=0               ; * JMK63
      AUDIT.ACC=0                        ; * JMK63
      IF JL.FLAG THEN                    ; * JMK49
         LOCATE Q IN JL.DAUDIT.TABLES<26> SETTING JL.POS ELSE          ; * JMK49
            MISC.CODE=Q                  ; * JMK63
            GOSUB 8900                   ; * JMK63
            IF AUDIT.ACC=0 THEN          ; * JMK63
               CALL ELINE("Invalid Code - Code not in Table:  ":JL.AUDIT.TABLE.ID)         ; * JMK49
               GO 740                    ; * JMK49
            END                          ; * JMK63
         END                             ; * JMK49
      END ELSE                           ; * JMK49
         LOCATE Q IN DAUDIT.TABLES<26> SETTING POS ELSE
            MISC.CODE=Q                  ; * JMK63
            GOSUB 8900                   ; * JMK63
            IF AUDIT.ACC=0 THEN          ; * JMK63
               CALL ELINE("Invalid Code - Code not in Table:  ":AUDIT.TABLE.ID)
               GO 740
            END                          ; * JMK63
         END
      END                                ; * JMK49
      IF USER='DAVID' THEN CALL ELINE('DAVID CHECK MISC AMTS')
      IF AUDIT.ACC THEN                  ; * JMK63
         MISC.CODE=Q                     ; * JMK63
         GOSUB 8950                      ; * JMK63
      END ELSE                           ; * JMK63
         IF JL.FLAG THEN                 ; * JMK63
            CUR.CONTR.MISC.AMT=JL.DAUDIT.TABLES<27,JL.POS>   ; * JMK49
            CUR.BENCH.MISC.AMT=JL.DAUDIT.TABLES<28,JL.POS>   ; * JMK49
         END ELSE                        ; * JMK63
            CUR.CONTR.MISC.AMT=DAUDIT.TABLES<27,POS>
            CUR.BENCH.MISC.AMT=DAUDIT.TABLES<28,POS>
         END                             ; * JMK55
      END                                ; * JMK63
      IF LOGISTICS THEN
         IF CUR.BENCH.MISC.AMT<CUR.CONTR.MISC.AMT THEN
            IF NUM(CUR.BENCH.MISC.AMT) AND NUM(CUR.CONTR.MISC.AMT) THEN
               CALL ELINE("Unable to Use this code! Benchmark is Less than Contract")
               GO 740
            END
         END
      END
      LOCATE Q IN MISC.CHG<1> SETTING MPOS THEN    ; * JMK04   ;* NPR08
         IF MPOS#MC.SEL THEN             ; *DRF01
            CALL ELINE(Q:" has already been used")           ; * JMK04   ;* NPR08
            GO 740
         END                             ; *DRF01
      END                                ; * JMK04   ;* NPR08

      MISC.CHG<1,MC.SEL>=Q
      CRT @(39+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'
      IF CUR.CONTR.MISC.AMT='ASK' THEN GO 760      ; * Get Contract Amount
      IF CUR.BENCH.MISC.AMT='ASK' THEN GO 780      ; * Get Benchmark Amount
      MISC.CHG<2,MC.SEL>=CUR.CONTR.MISC.AMT
      MISC.CHG<3,MC.SEL>=CUR.BENCH.MISC.AMT
      MISC.CHG<4,MC.SEL>=AUDIT.ACC       ; * JMK63
      CRT @(39+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'
      CRT @(44+OFFSET,LINE):CUR.CONTR.MISC.AMT'R26(#6 )'
      CRT @(51+OFFSET,LINE):CUR.BENCH.MISC.AMT'R26(#6 )'
      GOSUB CLEAR.MC.WINDOW              ; * NPR08
      RETURN                             ; * Go Get Next Code
*************************************************************************
760:  *** Enter the Misc Charge Contract Amount
*************************************************************************
      HELP="Enter Contract (Carrier) Amount for this code ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF OPT='V' THEN MASK=SPACE(6) ELSE MASK=MISC.CHG<2,MC.SEL>'R26#6'
      CALL GEN.IN(44+OFFSET,LINE,MASK,'AMT2',Q,0,6,'','',2,-6,LINE,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<2,MC.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               GO 760
            END
         CASE QI='X'
            CRT @(44+OFFSET,LINE):MISC.CHG<2,MC.SEL>'R26(#6 )'
            GO 740
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NOT(NUM(QI))
            CALL ELINE("Must be Numeric")
            GO 760
         CASE CLIENT.ID='00664' & CARRIER='00377'
            IF Q < 1 OR Q > 25000 THEN
               CALL ELINE("Must be Greater than 0 and less than 250.00 for Liberto-Benton")
               GO 760
            END
         CASE CLIENT.ID='00886' & CARRIER='00001'
            IF Q < 1 OR Q > 25000 THEN
               CALL ELINE("Must be Greater than 0 and less than 250.00 for Liberto-Benton")
               CC+=1
               GO 760
            END
         CASE Q < 1 OR Q > 9999
            CALL ELINE("Must be Greater than 0 and less than 100.00")
            GO 760
      END CASE
      MISC.CHG<2,MC.SEL>=Q
      PRINT @(44+OFFSET,LINE):Q'R26(#6 )'
      IF LOGISTICS ELSE RETURN
*************************************************************************
780:  *** Enter the Misc Charge Benchmark Amount
*************************************************************************
      HELP="Enter Benchmark (Logistics) Amount for this code ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF MISC.CHG<3,MC.SEL>='' THEN MISC.CHG<3,MC.SEL>=MISC.CHG<2,MC.SEL>        ; * Default to Contr
      IF OPT='V' THEN MASK=SPACE(6) ELSE MASK=MISC.CHG<3,MC.SEL>'R26#6'
      CALL GEN.IN(51+OFFSET,LINE,MASK,'AMT2',Q,0,6,'','',2,-6,LINE,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<3,MC.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               GO 780
            END
         CASE QI='X'
            CRT @(51+OFFSET,LINE):MISC.CHG<3,MC.SEL>'R26(#6 )'
            GO 760
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NOT(NUM(QI))
            CALL ELINE("Must be Numeric")
            GO 780
         CASE CLIENT.ID='00664' & CARRIER='00377'
            IF Q < 1 OR Q > 25000 THEN
               CALL ELINE("Must be Greater than 0 and less than 250.00 for Liberto-Benton")
               GO 760
            END
         CASE Q < 1 OR Q > 9999
            CALL ELINE("Must be Greater than 0 and less than 100.00")
            GO 780
         CASE Q < MISC.CHG<2,MC.SEL>     ; * Less than Contract
            CALL ELINE("Cannot Be Less than Contract Amount!")
            GO 780
      END CASE
      MISC.CHG<3,MC.SEL>=Q
      PRINT @(51+OFFSET,LINE):Q'R26(#6 )'
      RETURN
************************************************************************
* End of Details
************************************************************************
1000: ***   Submit Information to PC Audit Routine to Determine Amounts
      IF FGC THEN GO FIND.GOOD.CARRIER
      CLASSES=CLASS.WGT<1>
      WEIGHTS=CLASS.WGT<2>
      CONTR.TARIFF=''
      CONTR.CLASSES=''                   ; * Sub Valued for placment into DIN
      CONTR.DISC=''                      ; * <1>-TMIN <2>-L5C <3>-O5C  All Mv per line item
      LOWEST.CONTR.CLASS=''
      LOWEST.CONTR.CLASS.DISC=''         ; * <1>-TMIN <2>-L5C <3>-O5C from Lowest class
      BENCH.TARIFF=''
      BENCH.CLASSES=''                   ; * Sub Valued for placment into DIN
      BENCH.DISC=''                      ; * Mv for each line item (contains repeats)
      LOWEST.BENCH.CLASS=''
      LOWEST.BENCH.CLASS.DISC=''         ; * Taken from Discount on Lowest Class
      DIN=''
      DIN<1,2>=ORIG.ZIP
      DIN<1,3>=DEST.ZIP
      DETAIL.TIMES=DCOUNT(CLASSES<1>,@VM)
      FOR DET.CNT = 1 TO DETAIL.TIMES
         CUR.CLASS=CLASSES<1,DET.CNT>
         CUR.WEIGHT=WEIGHTS<1,DET.CNT>
         LOCATE CUR.CLASS IN DAUDIT.TABLES<1> SETTING CLASS.POS THEN
            CUR.CONTR.CLASS=DAUDIT.TABLES<2,CLASS.POS>       ; * Contract Class
            IF JL.FLAG THEN              ; * JMK49
               LOCATE CUR.CLASS IN JL.DAUDIT.TABLES<1> SETTING JL.CLASS.POS THEN           ; * JMK49
                  CUR.CONTR.CLASS=JL.DAUDIT.TABLES<2,JL.CLASS.POS>     ; * Contract Class ; * JMK49
               END                       ; * JMK49
            END                          ; * JMK49
            CONTR.CLASSES<1,1,DET.CNT>=CUR.CONTR.CLASS
            CUR.BENCH.CLASS=DAUDIT.TABLES<12,CLASS.POS>      ; * Benchmark Class
            IF JL.FLAG THEN              ; * DRF06
               LOCATE CUR.CLASS IN JL.DAUDIT.TABLES<1> SETTING JL.CLASS.POS THEN           ; * DRF06
                  CUR.BENCH.CLASS=JL.DAUDIT.TABLES<12,JL.CLASS.POS>    ; * Contract Class  ; * DRF06
               END                       ; * DRF06
            END                          ; * DRF06
            BENCH.CLASSES<1,1,DET.CNT>=CUR.BENCH.CLASS
            CUR.CONTR.TARIFF=DAUDIT.TABLES<6,CLASS.POS>      ; * Contract Tariff

            CUR.BENCH.TARIFF=DAUDIT.TABLES<6,CLASS.POS>      ; * Benchmark Tariff ; * JMK70
            IF JL.FLAG THEN              ; * JMK49
               CUR.CONTR.TARIFF=JL.DAUDIT.TABLES<6,JL.CLASS.POS>       ; * Contract Tariff ; * JMK49
               CUR.BENCH.TARIFF=JL.DAUDIT.TABLES<6,JL.CLASS.POS>       ; * Contract Tariff  ; * DRF06
            END                          ; * JMK49
***************************************************************
* Determine Contract Discount(s) (And Lowest Class Discount)
***************************************************************
            FOR X = 1 TO 3
               CONTR.DISC<X,DET.CNT>=DAUDIT.TABLES<X+2,CLASS.POS>
            NEXT X
            IF JL.FLAG THEN              ; * JMK49
               FOR X = 1 TO 3            ; * JMK49
                  CONTR.DISC<X,DET.CNT>=JL.DAUDIT.TABLES<X+2,JL.CLASS.POS>       ; * JMK49
               NEXT X                    ; * JMK49
            END                          ; * JMK49
            IF LOWEST.CONTR.CLASS='' THEN
               LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
               FOR X = 1 TO 3
                  LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
               NEXT X
            END ELSE
               IF CUR.CONTR.CLASS<LOWEST.CONTR.CLASS THEN
                  LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
                  FOR X = 1 TO 3
                     LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
                  NEXT X
               END
            END
***************************************************************
* Determine Benchmark Discount (And Lowest Class Discount)
***************************************************************

            FOR X = 1 TO 3               ; * JMK54
               BENCH.DISC<X,DET.CNT>=DAUDIT.TABLES<X+12,CLASS.POS>     ; * JMK54
            NEXT X                       ; * JMK54
            IF JL.FLAG THEN              ; * DRF06
               FOR X = 1 TO 3            ; * DRF06
                  BENCH.DISC<X,DET.CNT>=JL.DAUDIT.TABLES<X+12,JL.CLASS.POS>      ; * DRF06
               NEXT X                    ; * DRF06
            END                          ; * DRF06
            IF LOWEST.BENCH.CLASS='' THEN          ; * JMK54
               LOWEST.BENCH.CLASS=CUR.BENCH.CLASS  ; * JMK54
               FOR X = 1 TO 3            ; * JMK54
                  LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>     ; * JMK54
               NEXT X                    ; * JMK54
            END ELSE                     ; * JMK54
               IF CUR.BENCH.CLASS<LOWEST.BENCH.CLASS THEN    ; * JMK54
                  LOWEST.BENCH.CLASS=CUR.BENCH.CLASS         ; * JMK54
                  FOR X = 1 TO 3         ; * JMK54
                     LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>  ; * JMK54
                  NEXT X                 ; * JMK54
               END                       ; * JMK54
            END                          ; * JMK54

            IF DET.CNT=1 THEN
               CONTR.TARIFF=CUR.CONTR.TARIFF
               BENCH.TARIFF=CUR.BENCH.TARIFF
            END ELSE
               IF CUR.CONTR.TARIFF#CONTR.TARIFF THEN
*            Error Found a Contract Tariff that is different than the
*               first Class's Contract Tariff.... cannot handle.
                  CALL ELINE("101 Cls-":CUR.CLASS:" Tar-":CUR.CONTR.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  GO 1000
               END
               IF LOGISTICS AND CUR.BENCH.TARIFF#BENCH.TARIFF THEN
*            Error Found a Benchmark Tariff that is different than the
*               first Class's Benchmark Tariff.... cannot handle.
                  CALL ELINE("102 Cls-":CUR.CLASS:" Tar-":BENCH.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  GO 1000
               END
            END
         END ELSE
            CALL ELINE("Serious Error! Class '":CUR.CLASS:"' Cannot be found in AUDIT.TABLE '":TABLE:"'")
            GO 1000
         END
         DIN<1,5,DET.CNT>=CUR.WEIGHT
      NEXT DET.CNT
      LOCATE CONTR.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
         CONTR.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>      ; * Send to PC Name
         IF CONTR.TARIFF.ACT.NAME='AFS500' AND CDN.ROUTE=1 THEN        ; * JMK01
            CONTR.TARIFF.ACT.NAME='AFS525'         ; * JMK01
         END                             ; * JMK01
         CONTR.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
         CONTR.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
      END ELSE
         CALL ELINE("103 contr.tariff ":CONTR.TARIFF:" missing from tariff eff date xref")
         GO 1000
      END
      LOCATE CONTR.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
         CONTR.TARIFF.DRIVER=DTARIFFS<3,POS>
      END ELSE
         CALL ELINE("106 Unable to locate Contract ":CONTR.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
         GO 1000
      END
      IF LOGISTICS THEN
         LOCATE BENCH.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
            BENCH.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>   ; * Send to PC Name
            IF BENCH.TARIFF.ACT.NAME='AFS500' AND CDN.ROUTE=1 THEN     ; * JMK01
               BENCH.TARIFF.ACT.NAME='AFS525'      ; * JMK01
            END                          ; * JMK01
            BENCH.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
            BENCH.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
         END ELSE
            CALL ELINE("103 bench.tariff ":BENCH.TARIFF:" missing from tariff eff date xref")
            GO 1000
         END
         LOCATE BENCH.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
            BENCH.TARIFF.DRIVER=DTARIFFS<3,POS>
         END ELSE
            CALL ELINE("107 Unable to locate Benchmark ":BENCH.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
            GO 1000
         END
      END
      TOT.WEIGHT=SUM(CLASS.WGT<2>)
      IF TOT.WEIGHT GT MAX.LTL THEN      ; * JMK05 ; * JMK12
         CALL ELINE("Warning weight is ":MAX.LTL:" lbs or more")       ; * JMK05; * JMK12

      END
************************************************************************
*  Get Contract Rates from CZAR or AFS95
************************************************************************
*      IF CONTR.TARIFF.DRIVER = 'RWXL' THEN CONTR.TARIFF.DRIVER = 'RWXL.V2'    ; * NKH06
*      IF BENCH.TARIFF.DRIVER = 'RWXL' THEN BENCH.TARIFF.DRIVER = 'RWXL.V2'    ; * NKH06

      DIN<1,4>=CONTR.CLASSES
      DIN<1,7>=CONTR.TARIFF.ACT.NAME
      DIN<1,8>=CONTR.TARIFF.EFF.DATE
      DIN<1,9>=CONTR.TARIFF.FACTOR
      VIN='BOTH'
      VIN<2>='10000'                     ; * Max Discount Weight
      VIN<3>=CLIENT.ID                   ; * JMK34
      VIN<4>=CARRIER.ID                  ; * JMK48
      VIN<5>='C'                         ; * JMK48
      VIN<6>=IOT                         ; * NKH06
      VIN<7>=BILL.DATE                   ; * NKH06            

* This processes a single carrier
      IF CONTR.TARIFF.DRIVER = BENCH.TARIFF.DRIVER THEN
* Same "Driver" used on both Contract & Benchmark Tariffs
* Send 1 time with "Both" Bills
         IF LOGISTICS THEN
            DIN<2>=DIN<1>                ; * Set 2nd Bill equal to 1st Bill
            DIN<2,4>=BENCH.CLASSES       ; * Set 2nd Bills Classes to Benchmark's
            DIN<2,7>=BENCH.TARIFF.ACT.NAME         ; * Set 2nd Bill to Correct Tariff
            DIN<2,8>=BENCH.TARIFF.EFF.DATE         ; * Set 2nd Bill's Tariff Eff Date
            DIN<2,9>=BENCH.TARIFF.FACTOR
         END
         IF USER='DAVID' THEN CALL ELINE('DAVID PRESS BREAK CHECK VARIABLES')
         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
            DINNATT=DCOUNT(DIN,@AM)      ; * JMK22 ; * JMK25 ; * JMK27
            FOR DINATT=1 TO DINNATT      ; * JMK22 ; * JMK25 ; * JMK27
               DIN<DINATT,7>=AFS.TARIFF.NAME       ; * JMK22 ; * JMK25 ; * JMK27 ; *JMK31
            NEXT DINATT                  ; * JMK22 ; * JMK25 ; * JMK27
            CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)   ; * JMK22 ; * JMK25 ; * JMK27 ; * JMK47
         END ELSE
            CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)      ; * JMK31 ; * JMK47 ; * JMK75

         END
RWS.BOTH.BYPASS:* ; * JMK30
         CONTR.DOUT=DOUT<1>
         IF LOGISTICS THEN BENCH.DOUT=DOUT<2>
      END ELSE
* Different "Driver" used on Contract & Benchmark Tariffs
* Send each "Bill" to their respective Driver"
         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
            DINNATT=DCOUNT(DIN,@AM)      ; * JMK22 ; * JMK25 ; * JMK27
            FOR DINATT=1 TO DINNATT      ; * JMK22 ; * JMK25 ; * JMK27
               DIN<DINATT,7>=AFS.TARIFF.NAME       ; * JMK22 ; * JMK25 ; * JMK27 ; * JMK31
            NEXT DINATT                  ; * JMK22 ; * JMK25 ; * JMK27
            CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)       ; * JMK22 ; * JMK25 ; * JMK27 ; * JMK47
         END ELSE
            CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)          ; * JMK31 ; * JMK47 ; * JMK75
         END
RWS.CONTR.BYPASS:* ; * JMK30
         IF LOGISTICS THEN
            DIN<1,4>=BENCH.CLASSES
            DIN<1,7>=BENCH.TARIFF.ACT.NAME
            DIN<1,8>=BENCH.TARIFF.EFF.DATE
            DIN<1,9>=BENCH.TARIFF.FACTOR
            VIN='BOTH'
            VIN<2>='10000'               ; * Max Discount Weight
            VIN<3>=CLIENT.ID             ; * JMK34
            VIN<4>=CARRIER.ID            ; * JMK48
            VIN<5>='B'                   ; * JMK48

            IF BENCH.TARIFF.DRIVER='MWB' THEN      ; * JMK01 ; * JMK31
               IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'    ; * JMK31
               DINNATT=DCOUNT(DIN,@AM)   ; * JMK22 ; * JMK25 ; * JMK27
               FOR DINATT=1 TO DINNATT   ; * JMK22 ; * JMK25 ; * JMK27
                  DIN<DINATT,7>=AFS.TARIFF.NAME    ; * JMK22 ; * JMK25 ; * JMK27 ; * JMK31
               NEXT DINATT               ; * JMK22 ; * JMK25 ; * JMK27
               CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)    ; * JMK22 ; * JMK27 ; * JMK47
            END ELSE
               CALL @BENCH.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)       ; * JMK31 ; * JMK47 ; * JMK75
            END
         END
      END
RWS.BENCH.BYPASS:* ; * JMK30
      FLAT.RATE=0                        ; * JMK20
      FLAT.ROUTE='INTER'                 ; * JMK21
      IF ORIG.STATE=DEST.STATE THEN      ; * JMK21
         FLAT.ROUTE='INTRA'              ; * JMK21
      END                                ; * JMK21
      IF NOT(JL.FLAG) THEN
         IF DAUDIT.TABLES<55>#'' THEN    ; * JMK20
            FT.NVAL=DCOUNT(DAUDIT.TABLES<55>,@VM)  ; * JMK20
            FOR FT.VAL=1 TO FT.NVAL      ; * JMK20
               BEG.WT=DAUDIT.TABLES<55,FT.VAL>     ; * JMK20
               END.WT=DAUDIT.TABLES<56,FT.VAL>     ; * JMK20
               INTRA.CONTR.CHRG=DAUDIT.TABLES<57,FT.VAL>     ; * JMK20 ; * JMK21
               INTRA.BENCH.CHRG=DAUDIT.TABLES<58,FT.VAL>     ; * JMK20 ; * JMK21
               INTER.CONTR.CHRG=DAUDIT.TABLES<59,FT.VAL>     ; * JMK21
               INTER.BENCH.CHRG=DAUDIT.TABLES<60,FT.VAL>     ; * JMK21
               IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN   ; * JMK20
                  FLAT.VALID=0           ; * JMK24
                  BEGIN CASE             ; * JMK24
                     CASE FLAT.ROUTE='INTER'       ; * JMK24
                        IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                        IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                     CASE FLAT.ROUTE='INTRA'       ; * JMK24
                        IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                        IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK24
                     CASE 1              ; * JMK24
                  END CASE               ; * JMK24
                  IF FLAT.VALID THEN     ; * JMK24
                     FLAT.CONTR=0        ; * JMK24
                     FLAT.BENCH=0        ; * JMK24
                     IF FLAT.ROUTE='INTER' THEN    ; * JMK24
                        IF INTER.CONTR.CHRG+0#0 THEN         ; * JMK24
                           CONTR.CHRG=INTER.CONTR.CHRG       ; * JMK21
                           FLAT.CONTR=1  ; * JMK24
                        END              ; * JMK24
                        IF INTER.BENCH.CHRG+0#0 THEN         ; * JMK24
                           BENCH.CHRG=INTER.BENCH.CHRG       ; * JMK21
                           FLAT.BENCH=1  ; * JMK24
                        END              ; * JMK24
                     END                 ; * JMK24
                     IF FLAT.ROUTE='INTRA' THEN    ; * JMK21
                        IF INTRA.CONTR.CHRG+0#0 THEN         ; * JMK24
                           CONTR.CHRG=INTRA.CONTR.CHRG       ; * JMK21
                           FLAT.CONTR=1  ; * JMK24
                        END              ; * JMK24
                        IF INTRA.BENCH.CHRG+0#0 THEN         ; * JMK24
                           BENCH.CHRG=INTRA.BENCH.CHRG       ; * JMK21
                           FLAT.BENCH=1  ; * JMK24
                        END              ; * JMK24
                     END                 ; * JMK21
                     IF FLAT.CONTR THEN  ; * JMK24
                        CONTR.FLAT=''    ; * JMK20
                        CONTR.FLAT<1,1>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,2>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,3>='FLATRATE'           ; * JMK20
                        CONTR.FLAT<1,4>=TOT.WEIGHT           ; * JMK20
                        CONTR.FLAT<1,5>=CONTR.CHRG           ; * JMK20
                        CONTR.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK20
                        CONTR.DOUT<1,3>='FLATRATE'           ; * JMK20
                        CONTR.DOUT<1,5>=CONTR.CHRG           ; * JMK20
                     END                 ; * JMK24
                     IF LOGISTICS THEN   ; * JMK20
                        IF FLAT.BENCH THEN         ; * JMK24
                           BENCH.FLAT=''           ; * JMK20
                           BENCH.FLAT<1,1>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,2>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,3>='FLATRATE'        ; * JMK20
                           BENCH.FLAT<1,4>=TOT.WEIGHT        ; * JMK20
                           BENCH.FLAT<1,5>=BENCH.CHRG        ; * JMK20
                           BENCH.FLAT<1,6>=END.WT:' LB Flat rate'      ; * JMK20
                           BENCH.DOUT<1,3>='FLATRATE'        ; * JMK20
                           BENCH.DOUT<1,5>=BENCH.CHRG        ; * JMK20
                        END              ; * JMK24
                     END
                     FLAT.RATE=1         ; * JMK20
                  END                    ; * JMK24
               END                       ; * JMK20
            NEXT FT.VAL                  ; * JMK20
         END                             ; * JMK20
      END
      IF JL.FLAG THEN                    ; * JMK49
         IF JL.DAUDIT.TABLES<55>#'' THEN           ; * JMK49
            FT.NVAL=DCOUNT(JL.DAUDIT.TABLES<55>,@VM)         ; * JMK49
            FOR FT.VAL=1 TO FT.NVAL      ; * JMK49
               BEG.WT=JL.DAUDIT.TABLES<55,FT.VAL>  ; * JMK49
               END.WT=JL.DAUDIT.TABLES<56,FT.VAL>  ; * JMK49
               INTRA.CONTR.CHRG=JL.DAUDIT.TABLES<57,FT.VAL>  ; * JMK49
               INTRA.BENCH.CHRG=JL.DAUDIT.TABLES<58,FT.VAL>  ; * JMK49
               INTER.CONTR.CHRG=JL.DAUDIT.TABLES<59,FT.VAL>  ; * JMK49
               INTER.BENCH.CHRG=JL.DAUDIT.TABLES<60,FT.VAL>  ; * JMK49
               IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN   ; * JMK49
                  FLAT.VALID=0           ; * JMK49
                  BEGIN CASE             ; * JMK49
                     CASE FLAT.ROUTE='INTER'       ; * JMK49
                        IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK49
                        IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK49
                     CASE FLAT.ROUTE='INTRA'       ; * JMK49
                        IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK49
                        IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK49
                     CASE 1              ; * JMK49
                  END CASE               ; * JMK49
                  IF FLAT.VALID THEN     ; * JMK49
                     FLAT.CONTR=0        ; * JMK49
                     FLAT.BENCH=0        ; * JMK49
                     IF FLAT.ROUTE='INTER' THEN    ; * JMK49
                        IF INTER.CONTR.CHRG+0#0 THEN         ; * JMK49
                           CONTR.CHRG=INTER.CONTR.CHRG       ; * JMK49
                           FLAT.CONTR=1  ; * JMK49
                        END              ; * JMK49
                        IF INTER.BENCH.CHRG+0#0 THEN         ; * JMK49
                           BENCH.CHRG=INTER.BENCH.CHRG       ; * JMK49
                           FLAT.BENCH=1  ; * JMK49
                        END              ; * JMK49
                     END                 ; * JMK49
                     IF FLAT.ROUTE='INTRA' THEN    ; * JMK49
                        IF INTRA.CONTR.CHRG+0#0 THEN         ; * JMK49
                           CONTR.CHRG=INTRA.CONTR.CHRG       ; * JMK49
                           FLAT.CONTR=1  ; * JMK49
                        END              ; * JMK49
                        IF INTRA.BENCH.CHRG+0#0 THEN         ; * JMK49
                           BENCH.CHRG=INTRA.BENCH.CHRG       ; * JMK49
                           FLAT.BENCH=1  ; * JMK49
                        END              ; * JMK49
                     END                 ; * JMK49
                     IF FLAT.CONTR THEN  ; * JMK49
                        CONTR.FLAT=''    ; * JMK49
                        CONTR.FLAT<1,1>=CONTR.CHRG           ; * JMK49
                        CONTR.FLAT<1,2>=CONTR.CHRG           ; * JMK49
                        CONTR.FLAT<1,3>='FLATRATE'           ; * JMK49
                        CONTR.FLAT<1,4>=TOT.WEIGHT           ; * JMK49
                        CONTR.FLAT<1,5>=CONTR.CHRG           ; * JMK49
                        CONTR.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK49
                        CONTR.DOUT<1,3>='FLATRATE'           ; * JMK49
                        CONTR.DOUT<1,5>=CONTR.CHRG           ; * JMK49
                     END                 ; * JMK49
                     IF LOGISTICS THEN   ; * JMK49
                        IF FLAT.BENCH THEN         ; * JMK49
                           BENCH.FLAT=''           ; * JMK49
                           BENCH.FLAT<1,1>=BENCH.CHRG        ; * JMK49
                           BENCH.FLAT<1,2>=BENCH.CHRG        ; * JMK49
                           BENCH.FLAT<1,3>='FLATRATE'        ; * JMK49
                           BENCH.FLAT<1,4>=TOT.WEIGHT        ; * JMK49
                           BENCH.FLAT<1,5>=BENCH.CHRG        ; * JMK49
                           BENCH.FLAT<1,6>=END.WT:' LB Flat rate'      ; * JMK49
                           BENCH.DOUT<1,3>='FLATRATE'        ; * JMK49
                           BENCH.DOUT<1,5>=BENCH.CHRG        ; * JMK49
                        END              ; * JMK49
                     END                 ; * JMK49
                     FLAT.RATE=1         ; * JMK49
                  END                    ; * JMK49
               END                       ; * JMK49
            NEXT FT.VAL                  ; * JMK49
         END                             ; * JMK49
      END                                ; * JMK49
******************************************************************
* Verify Contract Bill Type
*******************************************************************
      IF CONTR.DOUT<1,10>#'' THEN
         CONTR.ERR=CONTR.DOUT<1,10>      ; * JMK39
         BEGIN CASE                      ; * JMK39
            CASE CONTR.ERR='0202'        ; * JMK39
               CALL ELINE("Error Rating engine obsolete for this tariff. Cannot rate")     ; * JMK39
               GO 500                    ; * JMK39
            CASE INDEX(CONTR.ERR,' - Badorg',1)    ; * JMK39
               CALL ELINE("Invalid Origin Zip for tariff. Cannot rate")          ; * JMK39
               GO 500                    ; * JMK39
            CASE INDEX(CONTR.ERR,' - Baddst',1)    ; * JMK39
               CALL ELINE("Invalid Destination Zip Code for tariff. Cannot rate")          ; * JMK39
               GO 500                    ; * JMK39
            CASE INDEX(CONTR.ERR,' - Badcmb',1)    ; * JMK39
               CALL ELINE("Invalid Zip Code combination for tariff. Cannot rate")          ; * JMK39
               GO 500                    ; * JMK39
            CASE 1                       ; * JMK39
               CALL ELINE("Error Code '":CONTR.DOUT<1,10>:"' returned on Contract Rating")           ; * JMK39
               AUDIT='U'
               ERR='' ; GOSUB 8000

               GO 500                    ; * JMK51
         END CASE                        ; * JMK39
      END
      IF LOGISTICS AND BENCH.DOUT<1,10>#'' THEN
         BENCH.ERR=BENCH.DOUT<1,10>      ; * JMK39
         BEGIN CASE                      ; * JMK39
            CASE BENCH.ERR='0202'        ; * JMK39
               CALL ELINE("Error Rating engine obsolete for this tariff. Cannot rate")     ; * JMK39
               GO 500                    ; * JMK39
            CASE INDEX(BENCH.ERR,' - Badorg',1)    ; * JMK39
               CALL ELINE("Invalid Origin Zip for tariff. Cannot rate")          ; * JMK39
               GO 500                    ; * JMK39
            CASE INDEX(BENCH.ERR,' - Baddst',1)    ; * JMK39
               CALL ELINE("Invalid Destination Zip Code for tariff. Cannot rate")          ; * JMK39
               GO 500                    ; * JMK39
            CASE INDEX(BENCH.ERR,' - Badcmb',1)    ; * JMK39
               CALL ELINE("Invalid Zip Code combination for tariff. Cannot rate")          ; * JMK39
               GO 500                    ; * JMK39
            CASE 1                       ; * JMK39
               CALL ELINE("Error Code '":BENCH.DOUT<1,10>:"' returned on Benchmark Rating")          ; * JMK39
               AUDIT='U'
               ERR='' ; GOSUB 8000
*              GO 1000                   ; * JMK51
               GO 500                    ; * JMK51
         END CASE                        ; * JMK39
      END
      CONTR.BILL.TYPE=CONTR.DOUT<1,3>
      BEGIN CASE
         CASE CONTR.BILL.TYPE='FLATRATE'           ; * JMK20
         CASE CONTR.BILL.TYPE='MINIMUM'
         CASE CONTR.BILL.TYPE='ACTUAL'
         CASE CONTR.BILL.TYPE='DEFICIT'
         CASE CONTR.BILL.TYPE='NOTRATED'
            CALL ELINE("Bill Not ":PROCESS.MODE:"d by ":CONTR.TARIFF.ACT.NAME:"  Probably a Zip Code Problem. Try with PC")
            AUDIT='U'
            ERR='' ; GOSUB 8000
            GO 500
         CASE 1
            IF RWS.TIMES<3 THEN          ; * JMK23 ; * JMK39
               SLEEP 1                   ; * JMK23
               RWS.TIMES+=1              ; * JMK23
               GO 1000                   ; * JMK23
            END                          ; * JMK23
            CALL ELINE("Error 104 Improper CONTR.BILL.TYPE of '":CONTR.BILL.TYPE:"'  Call Programmer!")
            GO 1000                      ; * Send Again & Lock into loop
      END CASE
      IF CONTR.BILL.TYPE='DEFICIT' THEN
         DEFICIT.WEIGHT=CONTR.DOUT<1,7>
      END ELSE DEFICIT.WEIGHT=0
      TOT.WEIGHT=SUM(CLASS.WGT<2>)
      DISC.WEIGHT=TOT.WEIGHT+DEFICIT.WEIGHT
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CONTR.DISC.ATT=1
      END ELSE
         IF DISC.WEIGHT < 500 THEN CONTR.DISC.ATT=2 ELSE CONTR.DISC.ATT=3
      END
*******************************************************************
* Verify Benchmark Bill Type
*******************************************************************
      BENCH.BILL.TYPE=BENCH.DOUT<1,3>
      IF LOGISTICS THEN
         BEGIN CASE
            CASE BENCH.BILL.TYPE='FLATRATE'        ; * JMK20
            CASE BENCH.BILL.TYPE='CSMMINIMUM'      ; * JMK13
            CASE BENCH.BILL.TYPE='MINIMUM'
            CASE BENCH.BILL.TYPE='ACTUAL'
            CASE BENCH.BILL.TYPE='DEFICIT'
            CASE BENCH.BILL.TYPE='NOTRATED'
               CALL ELINE("Benchmark Side of Bill Not ":PROCESS.MODE:"d by ":BENCH.TARIFF.ACT.NAME:" Return Bill to Audit")
               AUDIT='U'
               ERR='' ; GOSUB 8000
               GO 1000
            CASE 1
               IF RWS.TIMES<3 THEN       ; * JMK23 ; * JMK39
                  SLEEP 1                ; * JMK23
                  RWS.TIMES+=1           ; * JMK23
                  GO 1000                ; * JMK23
               END                       ; * JMK23
               CALL ELINE("Error 105 Improper BENCH.BILL.TYPE of '":BENCH.BILL.TYPE:"'  Call Programmer!")
               GO 1000                   ; * Send Again & Lock into loop
         END CASE
         IF BENCH.BILL.TYPE='DEFICIT' THEN         ; * JMK54
            BENCH.DEF.WEIGHT=BENCH.DOUT<1,7>       ; * JMK54
         END ELSE BENCH.DEF.WEIGHT=0     ; * JMK54
         BENCH.DEF.WEIGHT=0              ; * JMK54
         TOT.WEIGHT=SUM(CLASS.WGT<2>)    ; * JMK54
         BENCH.DISC.WEIGHT=TOT.WEIGHT+BENCH.DEF.WEIGHT       ; * JMK54
         BEGIN CASE                      ; * JMK54
            CASE BENCH.BILL.TYPE='MINIMUM'         ; * JMK54
               BENCH.DISC.ATT=1          ; * JMK54
            CASE BENCH.DISC.WEIGHT<500   ; * JMK54
               BENCH.DISC.ATT=2          ; * JMK54
            CASE 1                       ; * JMK54
               BENCH.DISC.ATT=3          ; * JMK54
         END CASE                        ; * JMK54
      END
*************************************************************************
      GOSUB WHY.CALCS
*
      IF IOT = "T" THEN
         TP.WHY.TAB<TP.CNT> = WHY
         * Begin GRB07
*         TP.CLIENT.COST = ''    ; * NKH03
*         TP.QUOTE.AMT = ''      ; * NKH03
*         TP.GTOT.CONTR.AMT = '' ; * NKH03
*         TP.GTOT.BENCH.AMT = '' ; * NKH03
*         TP.CONSULTING.AMT = '' ; * NKH03
         * End GRB07
         TP.CLIENT.COST<TP.CNT> = CLIENT.COST
         TP.QUOTE.AMT<TP.CNT> = QUOTE.AMT
         TP.GTOT.CONTR.AMT<TP.CNT> = GTOT.CONTR.AMT
         TP.GTOT.BENCH.AMT<TP.CNT> = GTOT.BENCH.AMT
         TP.CONSULTING.AMT<TP.CNT> = CONSULTING.AMT
         * Begin NKH05
         * For old third party use multivalue 1 [origination zip code]
         IF TP.CNT LT "1" AND NOT(NEW.TP) THEN     ; * GRB07
*         IF TP.CNT LT "2" AND NOT(NEW.TP) THEN  ; * GRB07
            * End NKH05
            TP.CNT += 1
            GOTO 575                     ; * GRB07
         END ELSE
            IF TP.GTOT.CONTR.AMT<1> GT TP.GTOT.CONTR.AMT<2> THEN       ; * NPR999
               WHY = TP.WHY.TAB<1>
               CLIENT.COST = TP.CLIENT.COST<1>
               QUOTE.AMT = TP.QUOTE.AMT<1>
               GTOT.CONTR.AMT = TP.GTOT.CONTR.AMT<1>
               GTOT.BENCH.AMT = TP.GTOT.BENCH.AMT<1>
               CONSULTING.AMT = TP.CONSULTING.AMT<1>
               GOSUB PRINT.TP.TOTALS
            END
         END
      END
*
*      CALL ELINE("Press [ENTER] to See the Line Item Details")      ; * NKH04
      CALL ELINE(" ")                    ; * NKH04
      PRINT WHY
      IF PROCESS.MODE='Quote' THEN       ; * JMK44
         CALL ELINE("Results here may vary slightly from the Web due to rounding.")        ; * JMK44
      END ELSE                           ; * JMK44
*         CALL ELINE("Press [ENTER] to continue.")                    ; * NKH04
         CALL ELINE(" ")                 ; * NKH04
      END                                ; * JMK44
*
*************************************************************************
      GOSUB RESET.VARIABLES
      PRINT SCREEN.DSP:
      GOSUB PAINT.SCR.DATA
      GO 200
* Single carrier selection ends here
*
FIND.GOOD.CARRIER:
*********************************************************************
* Process ALL carriers starts here
      IF USER = 'GBINO' THEN DEBUG
      STMT= 'SSELECT FB.AUDIT,':AUDIT.CLIENT.ID    ; * NPR09
      STMT:=' BY-DSND CARRIER.NAME'      ; * NPR09
      STMT:=' WITH 1 = "LTLALL"'
      EXECUTE STMT RTNLIST MISR.LIST CAPTURING OUTPUT
      IF @SELECTED < 1 THEN RETURN       ; * JCW01
      GOOD.MISROUTE.ARRAY=''             ; *<1>=Amount (MV Lowest to Highest)
      BAD.MISROUTE.ARRAY=''              ; *<1>=Amount (MV Lowest to Highest)
*                                           <2>=Carrier #
*                                           <3>=Carrier Name
*                                           <4>=Reason Can't Calculate
      GOOD.MISROUTE.SORT=''              ; * JMK55
*******************************************************
GET.NEXT.CARRIER:
*******************************************************
      READNEXT MISR.CARRIER.ID FROM MISR.LIST ELSE
         GOOD.LINE=9
         CRT @(0,9):@(-3):
         IF PROCESS.MODE = 'Quote' THEN
            PRINT "----- Approved Carriers - Quotes -----"
         END ELSE
            PRINT "----- Approved Carriers -----"
         END
         VENDOR.QUOTE.LIMIT.PERC = CLIENT.REC(262) + 0       ; * DFP01
         PERC=VENDOR.QUOTE.LIMIT.PERC*100          ; * DFP01
         NUMBER.LIMIT = CLIENT.REC(263) + 0        ; * DFP01
         IF VENDOR.QUOTE.LIMIT.PERC # 0 OR NUMBER.LIMIT # 0 THEN       ; * DFP01
            VENDOR.QUOTE.LIMIT.PERC=(VENDOR.QUOTE.LIMIT.PERC/10000)    ; * DFP01
            TEST.VAR=GOOD.MISROUTE.ARRAY<1,1>+(GOOD.MISROUTE.ARRAY<1,1>*VENDOR.QUOTE.LIMIT.PERC) 'MR0'         ; * DFP01
            VENDOR.TEST=1                ; * DFP01
         END                             ; * DFP01
         GOOD.TIMES=DCOUNT(GOOD.MISROUTE.ARRAY<1>,@VM)
         FOR X = 1 TO GOOD.TIMES
            GOOD.MISR.AMT=GOOD.MISROUTE.ARRAY<1,X>
            GOOD.MISR.AMT=GOOD.MISROUTE.SORT<1,X>  ; * JMK62
            IF CLIENT.ID='01127' THEN    ; * JMK46
               GOOD.MISR.AMT=GOOD.MISROUTE.SORT<1,X>         ; * JMK62
               IF X=1 THEN               ; * JMK46
                  BEGIN CASE             ; * JMK46
                     CASE GOOD.MISR.AMT>= 75001    ; * JMK46
                        QUOTE.INC=1.15   ; * JMK46 ; * JMK61 ; * JMK62
                        QUOTE.INC.PERC=15          ; * JMK46 ; * JMK61 ; * JMK62
                     CASE GOOD.MISR.AMT>= 50001    ; * JMK46
                        QUOTE.INC=1.3    ; * JMK46 ; * JMK61
                        QUOTE.INC.PERC=30          ; * JMK46 ; * JMK61
                     CASE GOOD.MISR.AMT>= 30001    ; * JMK61
                        QUOTE.INC=1.5    ; * JMK61
                        QUOTE.INC.PERC=50          ; * JMK61
                     CASE 1              ; * JMK46
                        QUOTE.INC=2.0    ; * JMK46 ; * JMK61
                        QUOTE.INC.PERC=100         ; * JMK46 ; * JMK61
                  END CASE               ; * JMK46
               END                       ; * JMK46
               QUOTE.INCR.AMT=(GOOD.MISR.AMT*QUOTE.INC.PERC/100)'R0'   ; * JMK46
               IF QUOTE.INCR.AMT NE "0" THEN       ; * JMK46
                  QUOTE.AMT=(GOOD.MISR.AMT + QUOTE.INCR.AMT)'R0'       ; * JMK46
               END                       ; * JMK46
               GOOD.MISR.AMT=QUOTE.AMT   ; * JMK46
            END                          ; * JMK46
            IF VENDOR.QUOTE.LIMIT.PERC # 0 THEN    ; * DFP01
               PERC=VENDOR.QUOTE.LIMIT.PERC*100    ; * DFP01
               IF VENDOR.TEST AND GOOD.MISROUTE.SORT<1,X> > TEST.VAR 'MR0' THEN  ; * DFP01
                  VENDOR.QUOTE.LIMIT.PERC=0        ; * DFP01
                  TMSG<1>="The VENDOR QUOTE LIMIT of "       ; * DFP01
                  TMSG<1>:=PERC          ; * DFP01
                  TMSG<1>:="% ($":TEST.VAR 'MR26':") "       ; * DFP01
                  TMSG<1>:="will prevent the following carriers"       ; * DFP01
                  TMSG<2>='from appearing on the Web Quote System "Vendor" user .'         ; * DFP01
                  CRT                    ; * DFP01
                  CRT TMSG<1>            ; * DFP01
                  CRT TMSG<2>            ; * DFP01
                  CRT                    ; * DFP01
                  VENDOR.TEST=0          ; * DFP01
                  TMSG=''                ; * DFP01
                  GOTO 9100              ; * DFP01
               END                       ; * DFP01
            END                          ; * DFP01
            IF NUMBER.LIMIT # 0 THEN     ; * DFP01
               IF VENDOR.TEST AND X > NUMBER.LIMIT THEN
                  TMSG<1>="The MAXIMUM VENDOR QUOTES of "    ; * DFP01
                  TMSG<1>:=NUMBER.LIMIT  ; * DFP01
                  TMSG<1>:=" will prevent the following carriers from"           ; * DFP01
                  TMSG<2>='appearing on the Web Quote System "Vendor" user .'    ; * DFP01
                  CRT                    ; * DFP01
                  CRT TMSG<1>            ; * DFP01
                  CRT TMSG<2>            ; * DFP01
                  CRT                    ; * DFP01
                  VENDOR.TEST=0          ; * DFP01
                  NUMBER.LIMIT=0         ; * DFP01
                  TMSG=''                ; * DFP01
                  GOTO 9100              ; * DFP01
               END                       ; * DFP01
            END                          ; * DFP01
9100:       * EXIT POINT ; * DFP01
            CRT GOOD.MISR.AMT'R26,(#8 )':
            CRT GOOD.MISROUTE.ARRAY<2,X>'L(#6 )':GOOD.MISROUTE.ARRAY<3,X>
         NEXT X
         IF VENDOR.TEST AND GOOD.MISROUTE.SORT # '' THEN
            IF VENDOR.QUOTE.LIMIT.PERC AND NUMBER.LIMIT THEN
               TMSG<1>="All carriers fall within the Vendor Carrier Limits of Max: "
               TMSG<1>:=NUMBER.LIMIT:" or ":PERC:"% ":"($":TEST.VAR 'MR26':")"
            END
            IF VENDOR.QUOTE.LIMIT.PERC AND NOT(NUMBER.LIMIT) THEN
               TMSG='All carriers fall within the Vendor Carrier Limits of '
               TMSG:=PERC:"%":'($':TEST.VAR'MR26':")"
            END

            IF NUMBER.LIMIT <= X AND NOT(VENDOR.QUOTE.LIMIT.PERC) THEN
               TMSG='All carriers fall within the Vendor Carrier Limits of '
               TMSG:='Maximum Quotes: ': NUMBER.LIMIT
            END
         END
         CRT ; CRT TMSG ; CRT            ; * DFP01
         CRT "Press [ENTER] to Continue...":       ; * NPR775
         INPUT NUL:                      ; * NPR775
         CRT
         CRT
         PRINT "----- NON Approved Carriers -----"
         BAD.TIMES=DCOUNT(BAD.MISROUTE.ARRAY<1>,@VM)
         FOR X = 1 TO BAD.TIMES
            BAD.MISR.AMT=BAD.MISROUTE.ARRAY<1,X>
            IF BAD.MISR.AMT#"~" THEN
               CRT BAD.MISR.AMT'R26,(#8 )':
            END ELSE
               CRT SPACE(9):
            END
            CRT BAD.MISROUTE.ARRAY<2,X>'L(#6)':BAD.MISROUTE.ARRAY<3,X>'L(#15 )':
            CRT BAD.MISROUTE.ARRAY<4,X>[1,48]
         NEXT X
         CRT "Press [ENTER] to Continue...":
         INPUT NUL:
         GO 100
      END
      READ MISR.CARRIER.REC FROM F.CARRIERS,MISR.CARRIER.ID ELSE
         MISR.CARRIER.REC='~~ Not On File ~~'
      END
      CARR.ONLY.FSC=CLIENT.REC(189)      ; * JMK31
      IF CLIENT.ID='01505' THEN          ; * JMK31
         CARR.ONLY.FSC=CLIENT.REC(189)   ; * JMK31
         IF CARR.ONLY.FSC='Y' OR CARR.ONLY.FSC='C' THEN      ; * JMK31
            BEGIN CASE                   ; * JMK31
               CASE MISR.CARRIER.ID='00124'        ; * JMK31
                  CARR.ONLY.FSC='N'      ; * JMK31
               CASE MISR.CARRIER.ID='01786'        ; * JMK31
                  CARR.ONLY.FSC='N'      ; * JMK31
               CASE MISR.CARRIER.ID='05156'        ; * JMK31
                  CARR.ONLY.FSC='N'      ; * JMK31
               CASE MISR.CARRIER.ID='08924'        ; * JMK31
                  CARR.ONLY.FSC='N'      ; * JMK31
            END CASE                     ; * JMK31
         END                             ; * JMK31
      END                                ; * JMK31
      IF CLIENT.ID='01758' AND CARRIER.ID='00748' THEN       ; * JMK59
         CARR.ONLY.FSC='N'               ; * JMK59
      END                                ; * JMK59
      IF CLIENT.ID='01784' AND CARRIER.ID='00014' THEN       ; * JMK64
         CARR.ONLY.FSC='N'               ; * JMK64
      END                                ; * JMK64
      IF CLIENT.ID='01810' AND CARRIER.ID='00014' THEN       ; * JMK64
         CARR.ONLY.FSC='N'               ; * JMK64
      END                                ; * JMK64
      MISR.CARRIER.SCAC = MISR.CARRIER.REC<12>     ; * JMK26
      MISR.CARRIER.TYPE = 'A'            ; * JMK09
      IF MISR.CARRIER.REC<44>='6' THEN   ; * JMK09
         MISR.CARRIER.TYPE='B'           ; * JMK09
      END                                ; * JMK09
      IF PROCESS.MODE='Quote' AND MISR.CARRIER.ID='00114' THEN         ; * JMK79
         LOCATE ORIG.ZIP IN RL.FERRY.ZIP<1> SETTING RLPOS THEN         ; * JMK79
            REASON=ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' requires a Ferry Fee for R&L'          ; * JMK79
            GO GET.NEXT.CARRIER          ; * JMK79
         END                             ; * JMK79
         LOCATE DEST.ZIP IN RL.FERRY.ZIP<1> SETTING RLPOS THEN         ; * JMK79
            REASON=DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' requires a Ferry Fee for R&L'          ; * JMK79
            GO GET.NEXT.CARRIER          ; * JMK79
         END                             ; * JMK79
      END                                ; * JMK79
      MISROUTE.NAME = MISR.CARRIER.REC<1>
      READ DMRA.AUDIT FROM F.AUDIT,MISR.CARRIER.ID ELSE GO GET.NEXT.CARRIER
      IF DMRA.AUDIT<11>#'ENABLE' THEN
         REASON='Not Considered - Carrier Disabled'
         BAD.MISROUTE.ARRAY<1,-1>="~"
         BAD.MISROUTE.ARRAY<2,-1>=MISR.CARRIER.ID
         BAD.MISROUTE.ARRAY<3,-1>=MISROUTE.NAME
         BAD.MISROUTE.ARRAY<4,-1>=REASON
         GO GET.NEXT.CARRIER
      END
      IF LOGISTICS AND DMRA.AUDIT<13>#'Y' THEN
         REASON="Not Considered - Core Carrier Flag is No"
         BAD.MISROUTE.ARRAY<1,-1>="~"
         BAD.MISROUTE.ARRAY<2,-1>=MISR.CARRIER.ID
         BAD.MISROUTE.ARRAY<3,-1>=MISROUTE.NAME
         BAD.MISROUTE.ARRAY<4,-1>=REASON
         GO GET.NEXT.CARRIER
      END
      PRINT @(0,23):"Now Processing Carrier ":MISR.CARRIER.ID:" ":MISROUTE.NAME:@(-4):
      MRA.VIN=''
      MRA.VIN<3>=BILL.DATE
      MRA.VIN<11>=CLIENT.ID
      MRA.VIN<12>=IOT
      MRA.VIN<13,1>=ORIG.ZIP
      MRA.VIN<13,2>=ORIG.CITY
      MRA.VIN<13,3>=ORIG.STATE
      MRA.VIN<14,1>=DEST.ZIP
      MRA.VIN<14,2>=DEST.CITY
      MRA.VIN<14,3>=DEST.STATE
      MRA.VIN<16>=USER
      MRA.VIN<18>=CLASS.WGT<1>
      MRA.VIN<19>=CLASS.WGT<2>

      TOT.WEIGHT=SUM(CLASS.WGT<2>)       ; *DRF01
      TEMP.MISC.CHG=MISC.CHG             ; *DRF01
      LOCATE TOT.WEIGHT IN MISR.CARRIER.REC<70> BY "AR" SETTING WEIGHT.POS ELSE NULL       ; *DRF01
      TEMP.TRANSPORT.MODE = OCONV(MISR.CARRIER.REC<71,WEIGHT.POS>,'MCU')         ; *DRF01
      ZIP.LINE.ID=MISR.CARRIER.ID:'*':CLIENT.ID:'*':TEMP.TRANSPORT.MODE:'*':IOT  ; *DRF01
      READ DZIP.LINE FROM F.ZIP.LINE.ITEM,ZIP.LINE.ID ELSE   ; *DRF01
         ZIP.LINE.ID=MISR.CARRIER.ID:'*ALL*':TEMP.TRANSPORT.MODE:'*':IOT         ; *DRF01
         READ DZIP.LINE FROM F.ZIP.LINE.ITEM,ZIP.LINE.ID ELSE DZIP.LINE=''       ; *DRF01
      END                                ; *DRF01

      IF DZIP.LINE#'' THEN               ; *DRF01
         LOCATE ORIG.ZIP IN DZIP.LINE<1> BY 'AR' SETTING ZIP.POS THEN  ; *DRF01
            ZIP.POS=ZIP.POS+1            ; *DRF01
         END                             ; *DRF01
         IF ZIP.POS > 1 THEN             ; *DRF01
            ZIP.POS=ZIP.POS-1            ; *DRF01
            IF DZIP.LINE<2,ZIP.POS> >= ORIG.ZIP THEN         ; *DRF01
               NUM.OF.SVM = DCOUNT(DZIP.LINE<3,ZIP.POS>,@SVM)          ; *DRF01
               FOR Z = 1 TO NUM.OF.SVM   ; *DRF01
                  IF DZIP.LINE<4,ZIP.POS,Z>='O' OR DZIP.LINE<4,ZIP.POS,Z>='B' THEN         ; *DRF01
                     LOCATE DZIP.LINE<3,ZIP.POS,Z> IN TEMP.MISC.CHG<1> SETTING DUMMY.POS ELSE        ; *DRF01
                        INS DZIP.LINE<3,ZIP.POS,Z> BEFORE TEMP.MISC.CHG<1,1>     ; *DRF01
                     END                 ; *DRF01
                  END                    ; *DRF01
               NEXT Z                    ; *DRF01
            END                          ; *DRF01
         END                             ; *DRF01
         LOCATE DEST.ZIP IN DZIP.LINE<1> BY 'AR' SETTING ZIP.POS THEN  ; *DRF01
            ZIP.POS=ZIP.POS+1            ; *DRF01
         END                             ; *DRF01
         IF ZIP.POS > 1 THEN             ; *DRF01
            ZIP.POS=ZIP.POS-1            ; *DRF01
            IF DZIP.LINE<2,ZIP.POS> >= DEST.ZIP THEN         ; *DRF01
               NUM.OF.SVM = DCOUNT(DZIP.LINE<3,ZIP.POS>,@SVM)          ; *DRF01
               FOR Z = 1 TO NUM.OF.SVM   ; *DRF01
                  IF DZIP.LINE<4,ZIP.POS,Z>='D' OR DZIP.LINE<4,ZIP.POS,Z>='B' THEN         ; *DRF01
                     LOCATE DZIP.LINE<3,ZIP.POS,Z> IN TEMP.MISC.CHG<1> SETTING DUMMY.POS ELSE        ; *DRF01
                        INS DZIP.LINE<3,ZIP.POS,Z> BEFORE TEMP.MISC.CHG<1,1>     ; *DRF01
                     END                 ; *DRF01
                  END                    ; *DRF01
               NEXT Z                    ; *DRF01
            END                          ; *DRF01
         END                             ; *DRF01
      END                                ; *DRF01

      MRA.VIN<21>=TEMP.MISC.CHG<1>       ; *DRF01
      MRA.VIN<10>=MISR.CARRIER.ID        ; * Correct to "Test" Carrier Number
      MRA.VIN<24>=LOGISTICS
      MRA.VIN<25>=''
      MRA.VIN<35>=CL.LOG.FSC='N'         ; * Flag to NOT Calculate Log FSC
      MRA.VIN<46>=MAX.LTL
      MRA.VIN<47>=CARRIER.ID             ; * JMK10
      MRA.VIN<48>=CLIENT.REC(188)        ; * JMK10
      MRA.VIN<49>=CARR.ONLY.FSC          ; * JMK10
      MRA.VIN<50>= MISR.CARRIER.SCAC     ; * JMK26
      MRA.VIN<51>= MISR.CARRIER.TYPE     ; * JMK26
      READ DMRA.BENCH.FSC FROM F.BC.FSC,'B*':MISR.CARRIER.ID:'*':AUDIT.CLIENT.ID ELSE
         READ DMRA.BENCH.FSC FROM F.BC.FSC,'B*':MISR.CARRIER.ID ELSE DMRA.BENCH.FSC=''
      END

      READ DMRA.CONTR.FSC FROM F.BC.FSC,'C*':MISR.CARRIER.ID:"*":AUDIT.CLIENT.ID ELSE DMRA.CONTR.FSC=DMRA.BENCH.FSC
      IF DMRA.BENCH.FSC<30>='DISABLE' THEN
         DMRA.BENCH.FSC=''               ; ** No Effect
         DMRA.CONTR.FSC=''
      END
      * Begin NKH04
      READV CC.CARRIER.SCAC FROM F.CARRIERS, CARRIER.ID, 12 ELSE
         READV CC.CARRIER.SCAC FROM F.CARRIERS, MISR.CARRIER.ID, 12 ELSE CC.CARRIER.SCAC = ''
      END

      ORIG.DIR.FLG = ''
      DEST.DIR.FLG = ''
      COMB.DIR.FLG = ''

      SCAC.COUNT = DCOUNT(CCVOUT<1>,@VM)
      FOR SC = 1 TO SCAC.COUNT
         LOCATE(CC.CARRIER.SCAC,CCVOUT,1,SC;S.POS;'AL') THEN
            * From TransitMethod
            TRANSIT.TIME = CCVOUT<29,SC>
            IF TRANSIT.TIME = 0 THEN TRANSIT.TIME = 1
            ORIG.DIR.FLG = CCVOUT<31,SC>[1,1]
            IF ORIG.DIR.FLG = 'C' OR ORIG.DIR.FLG = 'P' THEN ORIG.DIR.FLG = 'I'
            DEST.DIR.FLG = CCVOUT<30,SC>[1,1]
            IF DEST.DIR.FLG = 'C' OR DEST.DIR.FLG = 'P' THEN DEST.DIR.FLG = 'I'
            COMB.DIR.FLG = CCVOUT<32,SC>[1,1]
            IF COMB.DIR.FLG = 'C' OR COMB.DIR.FLG = 'P' THEN COMB.DIR.FLG = 'I'
         END
      NEXT SC

      MRA.VIN<56>=ORIG.DIR.FLG
      MRA.VIN<57>=DEST.DIR.FLG
      MRA.VIN<58>=COMB.DIR.FLG
      * End NKH04
      IF USER='DAVID' THEN CALL ELINE('PRESS BREAK ':MISR.CARRIER.ID)
      CALL FB.AUTO.V2(MRA.VIN,MRA.VOUT,DMRA.AUDIT,DMRA.CONTR.FSC,DMRA.BENCH.FSC,DTARIFFS,DTARIFF.DATE.XREF,LI.CODES,F.AUDIT.TABLES,F.AUDIT.ZIPS,F.PCIN,F.PCOUT,F.TABLES)
      IF USER='DAVID' THEN CALL ELINE('PRESS BREAK')
      TRANSIT.TIME=MRA.VOUT<49>          ; * JMK26
      IF TRANSIT.TIME="" THEN            ; * DFP03
         TRANSIT.TIME=999                ; * DFP03
      END                                ; * DFP03
      ORIG.DIRECT.FLAG=MRA.VOUT<50>      ; * JMK26
      DEST.DIRECT.FLAG=MRA.VOUT<51>      ; * JMK26
      COMB.DIRECT.FLAG=MRA.VOUT<52>      ; * JMK26
      IF COMB.DIRECT.FLAG='I' AND IOT='I' THEN     ; * JMK26
         REASON="Not Considered - Indirect Shipment"         ; * JMK26
         BAD.MISROUTE.ARRAY<1,-1>="~"    ; * JMK26
         BAD.MISROUTE.ARRAY<2,-1>=MISR.CARRIER.ID  ; * JMK26
         BAD.MISROUTE.ARRAY<3,-1>=MISROUTE.NAME    ; * JMK26
         BAD.MISROUTE.ARRAY<4,-1>=REASON           ; * JMK26
         GO GET.NEXT.CARRIER             ; * JMK26
      END                                ; * JMK26
      MRA.VOUT<24>=''                    ; * Kill Why
      ORIG.CONTR.AMT = MRA.VOUT<8>
*** Locate and set percentages for quotes and commissions

      LOCATE BILL.DATE IN CLIENT.REC(84)<1> BY 'AR' SETTING POS ELSE
         POS=POS-1
      END
      IF POS<1 THEN
         CALL ELINE("Cannot Rate! Bill date is before 1st Charge Date in Client Maintenance")
         GO 500
      END
      COMM.PERC = (CLIENT.REC(85)<1,POS>)/100
      IF CLIENT.ID='00735' THEN COMM.PERC='0'      ; * JMK - UNTIL WE CAN ADD PERCENT BY MODE

      IF PROCESS.MODE = 'Quote' THEN
         MIS.BENCH.AMT = MRA.VOUT<9>
         SAVINGS = MIS.BENCH.AMT-ORIG.CONTR.AMT
         LOG.COMM = (SAVINGS*COMM.PERC/100)'R0'
         IF CLIENT.ID='01510' THEN       ; * JMK66
            LOG.COMM=ORIG.CONTR.AMT*.08  ; * JMK66
         END                             ; * JMK66
         IF CLIENT.ID='01769' THEN       ; * JMK72
            LOG.COMM='800'               ; * JMK72
         END                             ; * JMK72
         IF CLIENT.ID='02171' THEN
            LOG.COMM=ORIG.CONTR.AMT*.15
         END

         IF CLIENT.ID='05096' THEN       ; * JMK82
            LOG.COMM=ORIG.CONTR.AMT*.10  ; * JMK82
            DATE.SETUP=CLIENT.REC(84)    ; * JMK82
            CONSULTING.RATE=CLIENT.REC(85)         ; * JMK82
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * JMK82
            IF MOD.POS=0 THEN MOD.POS=1  ; * JMK82
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * JMK82
            IF CONSULTING.PERC=0 THEN    ; * JMK82
               LOG.COMM=0                ; * JMK82
            END                          ; * JMK82
         END                             ; * DRF02
         IF CLIENT.ID='05178' THEN       ; * JMK86
            LOG.COMM=ORIG.CONTR.AMT*.05  ; * JMK86
            DATE.SETUP=CLIENT.REC(84)    ; * JMK86
            CONSULTING.RATE=CLIENT.REC(85)         ; * JMK86
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * JMK86
            IF MOD.POS=0 THEN MOD.POS=1  ; * JMK86
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * JMK86
            IF CONSULTING.PERC=0 THEN    ; * JMK86
               LOG.COMM=0                ; * JMK86
            END                          ; * JMK86
         END                             ; * JMK86
         IF CLIENT.ID='05238' THEN       ; * JMK84
            LOG.COMM=ORIG.CONTR.AMT*.15  ; * JMK84
            DATE.SETUP=CLIENT.REC(84)    ; * JMK84
            CONSULTING.RATE=CLIENT.REC(85)         ; * JMK84
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * JMK84
            IF MOD.POS=0 THEN MOD.POS=1  ; * JMK84
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * JMK84
            IF CONSULTING.PERC=0 THEN    ; * JMK84
               LOG.COMM=0                ; * JMK84
            END                          ; * JMK84
         END                             ; * JMK84
         IF CLIENT.ID='05294' THEN       ; * DRF08
            IF TEMP.TRANSPORT.MODE=1 THEN          ; * DRF10
               LOG.COMM=ORIG.CONTR.AMT*.03         ; * DRF08
            END ELSE                     ; * DRF10
               LOG.COMM=0                ; * DRF09
            END                          ; * DRF09
            DATE.SETUP=CLIENT.REC(84)    ; * DRF08
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF08
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF08
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF08
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF08
            IF CONSULTING.PERC=0 THEN    ; * DRF08
               LOG.COMM=0                ; * DRF08
            END                          ; * DRF08
         END                             ; * DRF08
         IF CLIENT.ID='02374' THEN       ; * DRF14
            IF TEMP.TRANSPORT.MODE=1 THEN          ; * DRF14
               LOG.COMM=ORIG.CONTR.AMT*.12         ; * DRF14
            END ELSE                     ; * DRF14
               LOG.COMM=0                ; * DRF14
            END                          ; * DRF14
            DATE.SETUP=CLIENT.REC(84)    ; * DRF14
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF14
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF14
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF14
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF14
            IF CONSULTING.PERC=0 THEN    ; * DRF14
               LOG.COMM=0                ; * DRF14
            END                          ; * DRF14
         END                             ; * DRF14
         IF CLIENT.ID='02481' THEN       ; * DRF16
            IF TEMP.TRANSPORT.MODE=1 THEN          ; * DRF16
               LOG.COMM=ORIG.CONTR.AMT*.10         ; * DRF16
            END ELSE                     ; * DRF16
               LOG.COMM=0                ; * DRF16
            END                          ; * DRF16
            DATE.SETUP=CLIENT.REC(84)    ; * DRF16
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF16
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF16
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF16
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF16
            IF CONSULTING.PERC=0 THEN    ; * DRF16
               LOG.COMM=0                ; * DRF16
            END                          ; * DRF16
         END                             ; * DRF16
         IF CLIENT.ID='01933' THEN       ; * DRF18
            IF TEMP.TRANSPORT.MODE=1 THEN          ; * DRF18
*DF               LOG.COMM=ORIG.CONTR.AMT*.055        ; * DRF18
               LOG.COMM=ORIG.CONTR.AMT*.0495       ; * DRF21
            END ELSE                     ; * DRF18
               LOG.COMM=0                ; * DRF18
            END                          ; * DRF18
            DATE.SETUP=CLIENT.REC(84)    ; * DRF18
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF18
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF18
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF18
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF18
            IF CONSULTING.PERC=0 THEN    ; * DRF18
               LOG.COMM=0                ; * DRF18
            END                          ; * DRF18
         END                             ; * DRF18
         IF CLIENT.ID='01801' THEN       ; * DRF19
            LOG.COMM=ORIG.CONTR.AMT*.05  ; * DRF19
            DATE.SETUP=CLIENT.REC(84)    ; * DRF19
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF19
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF19
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF19
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF19
            IF CONSULTING.PERC=0 THEN    ; * DRF19
               LOG.COMM=0                ; * DRF19
            END                          ; * DRF19
         END                             ; * DRF19
         IF CLIENT.ID='05608' THEN       ; * DRF20
            LOG.COMM=ORIG.CONTR.AMT*.10  ; * DRF20
            DATE.SETUP=CLIENT.REC(84)    ; * DRF20
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF20
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF20
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF20
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF20
            IF CONSULTING.PERC=0 THEN    ; * DRF20
               LOG.COMM=0                ; * DRF20
            END                          ; * DRF20
         END                             ; * DRF20
         IF CLIENT.ID='05765' THEN       ; * DRF22
            IF TEMP.TRANSPORT.MODE=1 THEN          ; * DRF22
               LOG.COMM=ORIG.CONTR.AMT*.1500       ; * DRF22
            END ELSE                     ; * DRF22
               LOG.COMM=0                ; * DRF22
            END                          ; * DRF22
            DATE.SETUP=CLIENT.REC(84)    ; * DRF22
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF22
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF22
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF22
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF22
            IF CONSULTING.PERC=0 THEN    ; * DRF22
               LOG.COMM=0                ; * DRF22
            END                          ; * DRF22
         END                             ; * DRF22
         LOG.COMM = OCONV(LOG.COMM,'MR0')
         CL.SAVINGS = SAVINGS - LOG.COMM
         SAVINGS.QUOTE.AMT = CL.SAVINGS*(1-SAVINGS.QUOTE.PERC/10000)
         MIS.CONTR.AMT = ORIG.CONTR.AMT + LOG.COMM + SAVINGS.QUOTE.AMT
         MIS.CL.COST=ORIG.CONTR.AMT+LOG.COMM       ; * JMK55
************************************************************************
         QUOTE.AMT=MIS.CONTR.AMT
         IF CDN.ROUTE THEN               ; * JMK36
            IF ORG.CAN=0 OR DST.CAN=0 THEN         ; * JMK67
               QUOTE.AMT=QUOTE.AMT+3000  ; * 10-21-04 Add $30.00 to each Canadian Quote to cover the homeland security fee ; * JMK36
            END                          ; * JMK67
         END                             ; * JMK36
         OB.QUOTE.INCR.PERC = (CLIENT.REC(227)/100)          ; *NPR01
         IB.QUOTE.INCR.PERC = (CLIENT.REC(228)/100)          ; *NPR01
         TP.QUOTE.INCR.PERC = (CLIENT.REC(229)/100)          ; *NPR01
         BEGIN CASE                      ; *NPR01
            CASE IOT='O' AND OB.QUOTE.INCR.PERC NE "0"       ; *NPR01
               OB.QUOTE.INCR.AMT = QUOTE.AMT * (OB.QUOTE.INCR.PERC/100)          ; *NPR01
               IF OB.QUOTE.INCR.AMT NE "0" THEN    ; *NPR01
                  QUOTE.AMT=(QUOTE.AMT + OB.QUOTE.INCR.AMT)'R0'        ; *NPR01
               END                       ; *NPR01
            CASE IOT='I' AND IB.QUOTE.INCR.PERC NE "0"       ; *NPR01
               IB.QUOTE.INCR.AMT = QUOTE.AMT * (IB.QUOTE.INCR.PERC/100)          ; *NPR01
               IF IB.QUOTE.INCR.AMT NE "0" THEN    ; *NPR01
                  QUOTE.AMT=(QUOTE.AMT + IB.QUOTE.INCR.AMT)'R0'        ; *NPR01
               END                       ; *NPR01
            CASE IOT='T' AND TP.QUOTE.INCR.PERC NE "0"       ; *NPR01
               TP.QUOTE.INCR.AMT = QUOTE.AMT * (TP.QUOTE.INCR.PERC/100)          ; *NPR01
               IF TP.QUOTE.INCR.AMT NE "0" THEN    ; *NPR01
                  QUOTE.AMT=(QUOTE.AMT + TP.QUOTE.INCR.AMT)'R0'        ; *NPR01
               END                       ; *NPR01
         END CASE                        ; *NPR01
         MIS.CONTR.AMT=QUOTE.AMT
**************************************************************************
      END ELSE
         LOG.COMM = 0                    ; * NPR09
         MIS.CONTR.AMT = ORIG.CONTR.AMT
         MIS.CL.COST=ORIG.CONTR.AMT      ; * JMK55
      END
      IF MRA.VOUT<2>='Y' THEN
         SORT.STR = MIS.CL.COST "R%10" : ORIG.CONTR.AMT "R%10"         ; * NPR09
         SORT.STR = SORT.STR:TRANSIT.TIME "R%3"    ; * DFP03
         LOCATE SORT.STR IN GOOD.MISROUTE.SORT<10> BY 'AR' SETTING POS ELSE NULL           ; * NPR09
         INS SORT.STR BEFORE GOOD.MISROUTE.SORT<10,POS>
         INS MIS.CL.COST BEFORE GOOD.MISROUTE.SORT<1,POS>
         INS MIS.CONTR.AMT BEFORE GOOD.MISROUTE.ARRAY<1,POS>
         INS MISR.CARRIER.ID BEFORE GOOD.MISROUTE.ARRAY<2,POS>
         INS MISROUTE.NAME BEFORE GOOD.MISROUTE.ARRAY<3,POS>
         INS '' BEFORE GOOD.MISROUTE.ARRAY<4,POS>
      END ELSE
         IF MRA.VOUT<2>='MA' THEN
            BAD.MISROUTE.ARRAY<1,-1>=MIS.CL.COST   ; * JMK55
            REASON='Shipping Point Set to N'
         END ELSE
            REASON=MRA.VOUT<1>
            BAD.MISROUTE.ARRAY<1,-1>="~"
         END
         BAD.MISROUTE.ARRAY<2,-1>=MISR.CARRIER.ID
         BAD.MISROUTE.ARRAY<3,-1>=MISROUTE.NAME
         BAD.MISROUTE.ARRAY<4,-1>=REASON
      END
      GO GET.NEXT.CARRIER
      RETURN
      STOP
*********************************************************************
GET.SCREEN.DSP:**** Display screen to send to subroutine
**********************************************************************

      SCREEN.DSP = @(-1)
      SCREEN.DSP := @( 0, 0):PROG.DESC
      SCREEN.DSP := @(24, 0):'Auditor:'
      CL=78-LEN(PACK.NAME[1,26])
      SCREEN.DSP := @(CL, 0):PACK.NAME[1,26]
      SCREEN.DSP := @(0 , 2):'Client : '
      SCREEN.DSP := @(0 , 3):'Carrier: '
      SCREEN.DSP := @(0 , 4):STR('-',79)
      SCREEN.DSP := @(0 , 5):'Date: '
      SCREEN.DSP := @(15, 5):'I-O-T:'
      SCREEN.DSP := @(0 , 6):'Orig: '
      SCREEN.DSP := @(15, 6):'Range:'    ; * DFP01
      SCREEN.DSP := @(0 , 7):'Dest: '
      SCREEN.DSP := @(39, 5):'Substitute Zip: '
      SCREEN.DSP := @(39, 6):'Routing Zip   : '
      SCREEN.DSP := @(39, 7):'Effective Date: '
      SCREEN.DSP := @(66, 5):'Flag    : '
      SCREEN.DSP := @(66, 6):'Table # : '
      SCREEN.DSP := @(66, 7):'Ship Pnt: '
      SCREEN.DSP := @(0 , 9):'Ln Class Weight'
      SCREEN.DSP := @(0 ,10):'-- ----- ------'
      SCREEN.DSP := @(18, 9):'Ln Class Weight'
      SCREEN.DSP := @(18,10):'-- ----- ------'
      SCREEN.DSP := @(36, 9):'Ln Code Contr  Bench'
      SCREEN.DSP := @(36,10):'-- ---- ------ ------'
      FOR X = 1 TO 7
         SCREEN.DSP := @(0,X+10):X'R%2'
         SCREEN.DSP := @(18,X+10):(X+7)'R%2'
         SCREEN.DSP := @(36,X+10):X'R%2'           ; *NPR08
      NEXT X

      IF PROCESS.MODE = 'Quote' THEN
         IF CLIENT.MODE THEN
            SCREEN.DSP := @(58,17):'Client Cost: '
         END
         SCREEN.DSP := @(58,18):'Quote Amt  : '
      END ELSE
         SCREEN.DSP := @(58,10):'Benchmark  : '
         SCREEN.DSP := @(58,11):'Cons Var   : '
         SCREEN.DSP := @(70,12):STR('-',9)
         SCREEN.DSP := @(58,13):'Contract   : '
      END
      RETURN
*********************************************************************
PAINT.SCR.DATA:***
*********************************************************************
      CRT @(34, 0):AUDITOR.TEXT:
      CRT @( 9, 2):CLIENT.ID:' ':HLB:CLIENT.NAME:HLA:
      CRT @( 9, 3):CARRIER.TEXT[1,70]:
      CRT @( 6, 5):(BILL.DATE'D2/')'L#8':
      CRT @(22, 5):IOT:
      CRT @( 6, 6):ORIG.ZIP'L#6':' ':ORIG.DESC[1,25]:        ; * JMK01
      CRT @(22, 6):VENDOR.QUOTE.LIMIT.PERC 'L#2' :           ; * DFP01
      CRT @( 6, 7):DEST.ZIP'L#6':' ':DEST.DESC[1,25]:        ; * JMK01
      CRT @(55, 5):SUBST.ZIP:
      CRT @(55, 6):LOOKUP.ZIP:
      IF EFF.DATE#'' THEN CRT @(55, 7):EFF.DATE'D2/':
      FOR X=1 TO 7                       ; * NPR08
         LINE=REM(X,2)
         IF LINE=0 THEN LINE=2
         LINE=LINE+10
         IF X < 6 THEN OFFSET=0 ELSE OFFSET=23     ; * NPR08
         IF MISC.CHG<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(37+OFFSET,LINE):SPACE(18):
            END ELSE
               PRINT @(39+OFFSET,LINE):SPACE(18):
            END
         END ELSE
            PRINT @(39+OFFSET,LINE):MISC.CHG<1,X>'R(#4 )':   ; * Charge Code
            PRINT @(42+OFFSET,LINE):MISC.CHG<2,X>'R26(#6 )':           ; *Contr Amount
            PRINT @(49+OFFSET,LINE):MISC.CHG<3,X>'R26(#6 )':           ; *Bench Amount
         END
      NEXT X
      RETURN
*********************************************************************
RESET.VARIABLES:*****
*********************************************************************
      BENCH.TARIFF.DRIVER=''
      BENCH.DOUT=''
      GTOT.BENCH.AMT=''
      CONSULTING.AMT=''
      MISC.CHG=''
      MANDITORY.CHG=''                   ; *DRF01
      SUBST.ZIP=''
      LOOKUP.ZIP=''
      EFF.DATE=''
      TEXT=''
      CLASS.WGT=''
      JL.TABLE = 0                       ; * GRB
      RETURN
*********************************************************************
8000: *** Ask Question What Do You Want To Do Now?
*********************************************************************
      TRY.AGAIN=0
      IF ERR='' THEN RETURN              ; * Nothing to Do

      IF INDEX('DAVID-GBINO', USER,1) ELSE RETURN        ; * TICKET 3092 - DRF 07/06/12 TICKET 5817 - DRF 05/03/13
      CRT @(0,22):@(-3):"Press any key then [ENTER] to Jump to On-Line Audit Setup":
      CRT @(0,23):"Or just press [ENTER] to ignore error: ":
      INPUT NUL:
      CRT @(0,22):@(-3):
      IF NUL='' THEN
         RETURN
      END
      TRY.AGAIN=1
      BEGIN CASE
         CASE ERR='CARRIER.DISABLED'
            DATA AUDIT.CLIENT.ID,CARRIER.ID
         CASE ERR='SELECT.ROUTE.ZIP'
            DATA AUDIT.CLIENT.ID,CARRIER.ID,3
         CASE ERR='ROUTE.ZIP.DISABLED'
            DATA AUDIT.CLIENT.ID,CARRIER.ID,3,LOOKUP.ZIP
         CASE ERR='EFF.DATE.DISABLED'
            DATA AUDIT.CLIENT.ID,CARRIER.ID,3,LOOKUP.ZIP,5,EFF.DATE'D2/'
         CASE ERR='SELECT.EFF.DATE'
            DATA AUDIT.CLIENT.ID,CARRIER.ID,3,LOOKUP.ZIP,5
         CASE ERR='STATE'
            DATA AUDIT.CLIENT.ID,CARRIER.ID,3,LOOKUP.ZIP,5,EFF.DATE'D2/'
            IF IOT='I' THEN
               DATA 6,'E',ORIG.STATE
            END ELSE
               DATA 7,'E',DEST.STATE
            END
         CASE ERR='NO.SHIPPING.POINTS'
            DATA AUDIT.CLIENT.ID,CARRIER.ID,3,LOOKUP.ZIP,5,EFF.DATE'D2/'
            IF IOT='I' THEN
               DATA 6
            END ELSE
               DATA 7
            END
         CASE ERR='EDIT.TABLE'
            DATA Q,CARRIER.ID,3,LOOKUP.ZIP,5,EFF.DATE'D2/'
            IF IOT='I' THEN
               DATA 6,'E',ORIG.STATE
            END ELSE
               DATA 7,'E',DEST.STATE
            END
      END CASE
      EXECUTE 'FB.LTL.SETUP.1'
      PRINT SCREEN.DSP:
      GOSUB PAINT.SCR.DATA
      RETURN
*
**********************************************************************
WHY.CALCS:
**********************************************************************
      WHY=''
      IF JL.FLAG THEN                    ; * JMK38
         WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(57,01):'Rt Zip:':LOOKUP.ZIP:@(71,01):'Tbl#:JL':JL.TABLE     ; * JMK38
      END ELSE                           ; * JMK38
         WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(57,01):'Rt Zip:':LOOKUP.ZIP:@(71,01):'Tbl#:':TABLE
      END                                ; * JMK38
      WHY:=@(0,01):'Ship Dt: ':BILL.DATE'D2-'
      WHY:=@(0,02):@(-3):'Origin : ':ORIG.ZIP:' ':ORIG.CITY:', ':ORIG.STATE:NULL
      WHY:=@(39,02):@(-3):'Client : ':CLIENT.ID:' ':HLB:CLIENT.NAME:HLA          ; * NPR05
      WHY:=@(0,03):'Dest   : ':DEST.ZIP:' ':DEST.CITY:', ':DEST.STATE:NULL
      WHY:=@(39,03):@(-3):'Carrier: ':OLA.CARRIER.ID:' ':CARRIER.NAME
      BEGIN CASE
         CASE IOT='I' ; IOT.WORDS='--IB---'
         CASE IOT='O' ; IOT.WORDS='--OB---'
         CASE IOT='T' ; IOT.WORDS='--TP---'
      END CASE
      WHY:=@(0,4):IOT.WORDS
      CONTR.STRING='|':STR('-',34):'|'
      L.CONTR.STRING=LEN(CONTR.STRING)
      CONTR.WORDS="Contract-":CONTR.TARIFF
      IF CDN.ROUTE THEN CONTR.WORDS=CHANGE(CONTR.WORDS,'AFS500','AFS525')
      L.CONTR.TARIFF=LEN(CONTR.WORDS)
      CONTR.START=INT((L.CONTR.STRING-L.CONTR.TARIFF)/2)
      CONTR.STRING[CONTR.START+1,L.CONTR.TARIFF]=CONTR.WORDS
      WHY:=@(7,4):CONTR.STRING:NULL
      IF LOGISTICS THEN
         BENCH.STRING='|':STR('-',33):'|'
         L.BENCH.STRING=LEN(BENCH.STRING)
         BENCH.WORDS="Benchmark-":BENCH.TARIFF
         IF CDN.ROUTE THEN BENCH.WORDS=CHANGE(BENCH.WORDS,'AFS500','AFS525')
         L.BENCH.TARIFF=LEN(BENCH.WORDS)
         BENCH.START=INT((L.BENCH.STRING-L.BENCH.TARIFF)/2)
         BENCH.STRING[BENCH.START+1,L.BENCH.TARIFF]=BENCH.WORDS
         WHY:=@(45,4):BENCH.STRING:NULL
      END
      WHY:=@(00,05):"Ln":NULL
      WHY:=@(03,05):"Cls":NULL
      WHY:=@(07,05):"Ctr":NULL
      WHY:=@(12,05):"Wgt":NULL
      WHY:=@(17,05):"Rate":NULL
      WHY:=@(23,05):"Charge":NULL
      WHY:=@(30,05):"Disc":NULL
      WHY:=@(37,05):"Amount":NULL
      IF LOGISTICS THEN
         WHY:=@(45,05):"Bch":NULL
         WHY:=@(51,05):"Wgt":NULL
         WHY:=@(55,05):"Rate":NULL
         WHY:=@(61,05):"Charge":NULL
         WHY:=@(68,05):"Disc":NULL
         WHY:=@(74,05):"Amount":NULL
      END
      CONTR.TIMES=DCOUNT(CONTR.DOUT<1,1>,@SVM)
      TIMES=DETAIL.TIMES
      IF CONTR.TIMES > TIMES THEN TIMES=CONTR.TIMES
      IF LOGISTICS THEN
         BENCH.TIMES=DCOUNT(BENCH.DOUT<1,1>,@SVM)
         IF BENCH.TIMES > TIMES THEN TIMES=BENCH.TIMES
      END
      LINE=5
      TOT.CONTR.DISC=0                   ; ** Contract Discount Accumulator
      TOT.BENCH.DISC=0                   ; ** Benchmark Discount Accumulator
      FOR DET.CNT = 1 TO TIMES
         LINE=LINE+1
         WHY:=@(00,LINE):DET.CNT'R%2':NULL
         WHY:=@(02,LINE):CLASSES<1,DET.CNT>'R#4':NULL
         WHY:=@(06,LINE):CONTR.CLASSES<1,1,DET.CNT>'R#4':NULL
         WHY:=@(10,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
         WHY:=@(15,LINE):CONTR.DOUT<1,1,DET.CNT>'R26#6':NULL           ; * Contr Rate
         IF CONTR.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN           ; * Catch Zero Rates
            CALL ELINE("Error $0 Rate on Contract Calculations Line ":DET.CNT)

            AUDIT='U'
            ERR='' ; GOSUB 8000
            GO 500

         END
         CUR.CONTR.CHARGE=CONTR.DOUT<1,2,DET.CNT>
         CUR.CONTR.DISC=CONTR.DISC<CONTR.DISC.ATT,DET.CNT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
         CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Contr Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Contract Disc %
         WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL           ; * Amt (Chg-Disc Amt)
         IF LOGISTICS THEN
            WHY:=@(45,LINE):BENCH.CLASSES<1,1,DET.CNT>'R#3':NULL
            WHY:=@(48,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
            WHY:=@(53,LINE):BENCH.DOUT<1,1,DET.CNT>'R26#6':NULL        ; * Rate
            IF BENCH.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN        ; * Catch Zero Rates
               CALL ELINE("Error $0 Rate on Benchmark Calculations Line ":DET.CNT)
               AUDIT='U'
               ERR='' ; GOSUB 8000
               GO 500
            END
            CUR.BENCH.CHARGE=BENCH.DOUT<1,2,DET.CNT>
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Charge
            CUR.BENCH.DISC=BENCH.DISC<BENCH.DISC.ATT,DET.CNT>          ; * JMK54
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Bench Amount (Chg-Disc Amt)
         END
      NEXT DET.CNT
      IF CONTR.BILL.TYPE='DEFICIT' OR BENCH.BILL.TYPE='DEFICIT' THEN
         LINE=LINE+1
         IF CONTR.BILL.TYPE='DEFICIT' THEN
            CUR.CONTR.CHARGE=CONTR.DOUT<1,9>
            CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
            CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
            TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
            CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
            WHY:=@(3,LINE):'DEFICIT':NULL
            WHY:=@(10,LINE):CONTR.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(15,LINE):CONTR.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
         END
         IF BENCH.BILL.TYPE='DEFICIT' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,9>
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK54
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(48,LINE):BENCH.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(53,LINE):BENCH.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
         END
      END
      IF CONTR.BILL.TYPE='FLATRATE' OR BENCH.BILL.TYPE='FLATRATE' THEN           ; * JMK20
         LINE=LINE+1                     ; * JMK20
         IF CONTR.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.CONTR.CHARGE=CONTR.FLAT<1,5>       ; * JMK20
            CUR.CONTR.AMT=CONTR.FLAT<1,5>          ; * JMK20
            TOT.CONTR.DISC=0             ; * JMK20
            WHY:=@(3,LINE):CONTR.FLAT<1,6>:NULL    ; * JMK20
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * JMK20
         END                             ; * JMK20
         IF BENCH.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.BENCH.CHARGE=BENCH.FLAT<1,5>       ; * JMK20
            CUR.BENCH.AMT=BENCH.FLAT<1,5>          ; * JMK20
            TOT.BENCH.DISC=0             ; * JMK20
            WHY:=@(45,LINE):BENCH.FLAT<1,6>:NULL   ; * JMK24
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * JMK20
         END                             ; * JMK20
      END                                ; * JMK20
      LINE=LINE+1
      WHY:=@(0,LINE):'BILL TOTAL':NULL
      WHY:=@(10,LINE):CONTR.DOUT<1,4>'R#5':NULL    ; * Total Weight
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CUR.CONTR.CHARGE=CONTR.DOUT<1,5>
         CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC=CUR.CONTR.DISC.AMT
         WHY:=@(15,LINE):"TMIN"'R#6':NULL
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Tariff Minimum Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Disc (on Lowest Class)
      END ELSE
         WHY:=@(21,LINE):CONTR.DOUT<1,5>'R26#8':NULL         ; * Total Charges
      END
      TOT.CONTR.DISC.AMT=(TOT.CONTR.DISC/10000)'R0'
      TOT.CONTR.AMT=CONTR.DOUT<1,5>-TOT.CONTR.DISC.AMT
      WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
      TOT.BENCH.AMT=TOT.CONTR.AMT        ; * JMK14
      IF LOGISTICS THEN
         WHY:=@(48,LINE):BENCH.DOUT<1,4>'R#5':NULL           ; * Total Weight
         IF BENCH.BILL.TYPE='MINIMUM' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,5>
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK54
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC=CUR.BENCH.DISC.AMT
            WHY:=@(53,LINE):"TMIN"'R#6':NULL
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Tariff Minimum Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; *Disc (on Lowest Class)
         END ELSE
            WHY:=@(59,LINE):BENCH.DOUT<1,5>'R26#8':NULL      ; * Total Charges
         END
         TOT.BENCH.AMT=BENCH.DOUT<1,5>-OCONV((TOT.BENCH.DISC/10000),'MR0')
         WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
      END
      IF TOT.CONTR.AMT+0=0 THEN
         CALL ELINE("Contract Side of Bill Not Rated, Try an adjacent zip code")
         AUDIT='U'
         ERR='' ; GOSUB 8000
         GO 500
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT+0=0 THEN
            CALL ELINE("Benchmark Side of Bill Not Rated, Try an adjacent zip code")
            AUDIT='U'
            ERR='' ; GOSUB 8000
            GO 500
         END
      END

*******************************************************************
* Minimum Charge Logic
*******************************************************************
      IF ORIG.STATE=DEST.STATE THEN OFFSET=0 ELSE OFFSET=3
      LOCATE TOT.WEIGHT IN DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING WGT.POS ELSE NULL
      CONTR.MIN=DAUDIT.TABLES<38+OFFSET,WGT.POS>
      BENCH.MIN=DAUDIT.TABLES<39+OFFSET,WGT.POS>
      IF JL.FLAG THEN                    ; * JMK49
         LOCATE TOT.WEIGHT IN JL.DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING JL.WGT.POS ELSE NULL       ; * JMK49
         CONTR.MIN=JL.DAUDIT.TABLES<38+OFFSET,JL.WGT.POS>    ; * JMK49
      END                                ; * JMK49
      CONTR.ABS.MIN=0                    ; * Contract Absolute Minimum Flag
      BENCH.ABS.MIN=0                    ; * Benchmark Absolute Minimum Flag
      IF TOT.CONTR.AMT < CONTR.MIN AND CONTR.BILL.TYPE#'FLATRATE' THEN           ; * JMK28
         TOT.CONTR.AMT=CONTR.MIN
         CONTR.ABS.MIN=1
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT < BENCH.MIN AND BENCH.BILL.TYPE#'FLATRATE' THEN        ; * JMK28
            TOT.BENCH.AMT=BENCH.MIN
            BENCH.ABS.MIN=1
         END
         FORCED.WORD=''
         IF CONTR.ABS.MIN THEN
            BEGIN CASE
               CASE FORCE.BENCH.MIN="Y"  ; * JMK07
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK07
                  BENCH.ABS.MIN=1        ; * JMK07
                  FORCED.WORD='Forced '  ; * JMK07
               CASE NUM(FORCE.BENCH.MIN) AND TOT.WEIGHT <= FORCE.BENCH.MIN       ; * JMK07
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK07
                  BENCH.ABS.MIN=1        ; * JMK07
                  FORCED.WORD='Forced '  ; * JMK07
            END CASE
         END
      END
      IF CONTR.ABS.MIN OR BENCH.ABS.MIN THEN
         LINE+=1
         IF CONTR.ABS.MIN THEN
            WHY:=@(0,LINE):"CONTRACT MINIMUM":NULL
            WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
         END
         IF BENCH.ABS.MIN THEN
            WHY:=@(45,LINE):FORCED.WORD:"BENCHMARK MINIMUM":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
         END
      END

SKIP.MINIMUM:                            ; * JMK20
************************************************************************
* Bring Benchmark up to Contract Amount BEFORE FSC and ACC calculations
************************************************************************
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT < TOT.CONTR.AMT THEN
            TOT.BENCH.AMT=TOT.CONTR.AMT
            LINE+=1
            WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
         END
      END
*
*******************************************************************
1225: * Fuel Surcharge Calculations
*******************************************************************
      CONTR.FSC.PARMS=''                 ; * JMK10
      BENCH.FSC.PARMS=''                 ; * JMK10
      AFSO.BENCH.FSC.PARMS=''            ; * JMK37
      AFS.FSC.PARMS=''                   ; * JMK10
      FSC.MIN = 0
      IF BENCH.DFSC='' OR CONTR.DFSC='' THEN GO 1250
      CONTR.FSC.MIN = 0
      BENCH.FSC.MIN = 0
      CONTR.FSC.AMT=0
      BENCH.FSC.AMT=0
*********************************************************
1250: *** Have FSC.PERC Calculate Charge
********************************************************
      IF BENCH.DFSC='' OR CONTR.DFSC='' THEN
         CONTR.FSC.AMT=0
         BENCH.FSC.AMT=0
         GO 1275
      END
      IF USER='DAVID' THEN CALL ELINE('PRESS BREAK')
      VIN=BILL.DATE
      VIN<2>=TOT.WEIGHT

      VIN<6>=TOT.CONTR.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx & AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS

      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)

      CONTR.FSC.PARMS<1,1>=VIN<1>        ; * JMK10 - BILL DATE
      CONTR.FSC.PARMS<1,2>=VIN<2>        ; * JMK10 - WEIGHT
      CONTR.FSC.PARMS<1,3>=VIN<3>        ; * JMK10 - MILES
      CONTR.FSC.PARMS<1,4>=VIN<6>        ; * JMK10 - FREIGHT AMOUNT
      CONTR.FSC.PARMS<1,5>=VIN<7>        ; * JMK10 - ORIGIN ST
      CONTR.FSC.PARMS<1,6>=VIN<8>        ; * JMK10 - DESTINATION ST
      CONTR.FSC.PARMS<1,7>=VOUT<1>       ; * JMK10 - FSC AMT
      CONTR.FSC.PARMS<1,8>=VOUT<2>       ; * JMK10 - MIN FLG
      CONTR.FSC.PARMS<1,9>=VOUT<3>       ; * JMK10 - CALC PERC
      CONTR.FSC.PARMS<1,10>=VOUT<7>      ; * JMK10 - OVERAGE AMT
      CONTR.FSC.PARMS<1,11>=VOUT<8>      ; * JMK10 - OVERAGE STEPS
      CONTR.FSC.PARMS<1,12>=VOUT<9>      ; * JMK10 - BASE PERC
      CONTR.FSC.PARMS<1,13>=VOUT<10>     ; * JMK10 - OVERAGE PERC
      CONTR.FSC.PARMS<1,14>=VOUT<11>     ; * JMK10 - DELAY DAYS
      CONTR.FSC.PARMS<1,15>=VOUT<12>     ; * JMK10 - SHIFT DATE
      CONTR.FSC.PARMS<1,16>=VOUT<13>     ; * JMK10 - NATL FUEL PRICE
      CONTR.FSC.PARMS<1,17>=VOUT<14>     ; * JMK10 - CONV FUEL PRICE
      CONTR.FSC.PARMS<1,18>=VOUT<15>     ; * JMK10 - BEGIN EFF DATE
      CONTR.FSC.PARMS<1,19>=VOUT<16>     ; * JMK10 - FORMULA
      CONTR.FSC.PARMS<1,20>=VOUT<17>     ; * JMK10 - MODE
      CONTR.FSC.PARMS<1,21>=VOUT<18>     ; * JMK10 - BASE FUEL PRICE
      CONTR.FSC.PARMS<1,22>=VOUT<19>     ; * JMK10 - NATL INDEX NAME
      CONTR.FSC.PARMS<1,23>=VOUT<20>     ; * JMK10 - MAX SETUP PRICE
      CONTR.FSC.PARMS<1,24>=VOUT<21>     ; * JMK51 - AFS CONTRACT FSC TABLE

      CONTR.FSC.PARMS<1,25>=VOUT<30>     ; * NPR07 - DESCRIPTION

      CONTR.FSC.AMT=VOUT<1>
      CONTR.FSC.MIN=VOUT<2>
      CONTR.FSC.PERC=VOUT<3>
      CALC.FSC=VOUT<1>
      VIN=BILL.DATE
      VIN<2>=TOT.WEIGHT
      VIN<6>=TOT.BENCH.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx & AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS
      CALL CALC.FSC(VIN,VOUT,BENCH.DFSC,F.TABLES)
*  CAPTURE CARRIER BENCHMARK FSC PARAMETERS FOR LATER REVIEW
      BENCH.FSC.PARMS<1,1>=VIN<1>        ; * JMK10 - BILL DATE
      BENCH.FSC.PARMS<1,2>=VIN<2>        ; * JMK10 - WEIGHT
      BENCH.FSC.PARMS<1,3>=VIN<3>        ; * JMK10 - MILES
      BENCH.FSC.PARMS<1,4>=VIN<6>        ; * JMK10 - FREIGHT AMOUNT
      BENCH.FSC.PARMS<1,5>=VIN<7>        ; * JMK10 - ORIGIN ST
      BENCH.FSC.PARMS<1,6>=VIN<8>        ; * JMK10 - DESTINATION ST
      BENCH.FSC.PARMS<1,7>=VOUT<1>       ; * JMK10 - FSC AMT
      BENCH.FSC.PARMS<1,8>=VOUT<2>       ; * JMK10 - MIN FLG
      BENCH.FSC.PARMS<1,9>=VOUT<3>       ; * JMK10 - CALC PERC
      BENCH.FSC.PARMS<1,10>=VOUT<7>      ; * JMK10 - OVERAGE AMT
      BENCH.FSC.PARMS<1,11>=VOUT<8>      ; * JMK10 - OVERAGE STEPS
      BENCH.FSC.PARMS<1,12>=VOUT<9>      ; * JMK10 - BASE PERC
      BENCH.FSC.PARMS<1,13>=VOUT<10>     ; * JMK10 - OVERAGE PERC
      BENCH.FSC.PARMS<1,14>=VOUT<11>     ; * JMK10 - DELAY DAYS
      BENCH.FSC.PARMS<1,15>=VOUT<12>     ; * JMK10 - SHIFT DATE
      BENCH.FSC.PARMS<1,16>=VOUT<13>     ; * JMK10 - NATL FUEL PRICE
      BENCH.FSC.PARMS<1,17>=VOUT<14>     ; * JMK10 - CONV FUEL PRICE
      BENCH.FSC.PARMS<1,18>=VOUT<15>     ; * JMK10 - BEGIN EFF DATE
      BENCH.FSC.PARMS<1,19>=VOUT<16>     ; * JMK10 - FORMULA
      BENCH.FSC.PARMS<1,20>=VOUT<17>     ; * JMK10 - MODE
      BENCH.FSC.PARMS<1,21>=VOUT<18>     ; * JMK10 - BASE FUEL PRICE
      BENCH.FSC.PARMS<1,22>=VOUT<19>     ; * JMK10 - NATL INDEX NAME
      BENCH.FSC.PARMS<1,23>=VOUT<20>     ; * JMK10 - MAX SETUP PRICE
      BENCH.FSC.PARMS<1,24>=VOUT<21>     ; * JMK51 - AFS CONTRACT FSC TABLE
      BENCH.FSC.PARMS<1,25>=VOUT<30>     ; * NPR07 - DESCRIPTION
*  SETUP CALL TO CALCULATE OLD AFS BENCHMARK FSC CHARGES
      CALL CALC.FSC(VIN,VOUT,AFSO.BENCH.DFSC,F.TABLES)       ; * JMK37
*  CAPTURE CARRIER BENCHMARK FSC PARAMETERS FOR LATER REVIEW
      AFSO.BENCH.FSC.PARMS<1,1>=VIN<1>   ; * JMK37 - BILL DATE
      AFSO.BENCH.FSC.PARMS<1,2>=VIN<2>   ; * JMK37 - WEIGHT
      AFSO.BENCH.FSC.PARMS<1,3>=VIN<3>   ; * JMK37 - MILES
      AFSO.BENCH.FSC.PARMS<1,4>=VIN<6>   ; * JMK37 - FREIGHT AMOUNT
      AFSO.BENCH.FSC.PARMS<1,5>=VIN<7>   ; * JMK37 - ORIGIN ST
      AFSO.BENCH.FSC.PARMS<1,6>=VIN<8>   ; * JMK37 - DESTINATION ST
      AFSO.BENCH.FSC.PARMS<1,7>=VOUT<1>  ; * JMK37 - FSC AMT
      AFSO.BENCH.FSC.PARMS<1,8>=VOUT<2>  ; * JMK37 - MIN FLG
      AFSO.BENCH.FSC.PARMS<1,9>=VOUT<3>  ; * JMK37 - CALC PERC
      AFSO.BENCH.FSC.PARMS<1,10>=VOUT<7>           ; * JMK37 - OVERAGE AMT
      AFSO.BENCH.FSC.PARMS<1,11>=VOUT<8>           ; * JMK37 - OVERAGE STEPS
      AFSO.BENCH.FSC.PARMS<1,12>=VOUT<9>           ; * JMK37 - BASE PERC
      AFSO.BENCH.FSC.PARMS<1,13>=VOUT<10>          ; * JMK37 - OVERAGE PERC
      AFSO.BENCH.FSC.PARMS<1,14>=VOUT<11>          ; * JMK37 - DELAY DAYS
      AFSO.BENCH.FSC.PARMS<1,15>=VOUT<12>          ; * JMK37 - SHIFT DATE
      AFSO.BENCH.FSC.PARMS<1,16>=VOUT<13>          ; * JMK37 - NATL FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,17>=VOUT<14>          ; * JMK37 - CONV FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,18>=VOUT<15>          ; * JMK37 - BEGIN EFF DATE
      AFSO.BENCH.FSC.PARMS<1,19>=VOUT<16>          ; * JMK37 - FORMULA
      AFSO.BENCH.FSC.PARMS<1,20>=VOUT<17>          ; * JMK37 - MODE
      AFSO.BENCH.FSC.PARMS<1,21>=VOUT<18>          ; * JMK37 - BASE FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,22>=VOUT<19>          ; * JMK37 - NATL INDEX NAME
      AFSO.BENCH.FSC.PARMS<1,23>=VOUT<20>          ; * JMK37 - MAX SETUP PRICE
      AFSO.BENCH.FSC.PARMS<1,24>=VOUT<21>          ; * JMK51 - AFS CONTRACT FSC TABLE
      AFSO.BENCH.FSC.PARMS<1,25>=VOUT<30>          ; * NPR07 - DESCRIPTION

*  SETUP CALL TO CALCULATE AFS BENCHMARK FSC CHARGES

      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)  ; * JMK10

*  CAPTURE AFS BENCHMARK FSC PARAMETERS FOR LATER REVIEW
      AFS.FSC.PARMS<1,1>=VIN<1>          ; * JMK10 - BILL DATE
      AFS.FSC.PARMS<1,2>=VIN<2>          ; * JMK10 - WEIGHT
      AFS.FSC.PARMS<1,3>=VIN<3>          ; * JMK10 - MILES
      AFS.FSC.PARMS<1,4>=VIN<6>          ; * JMK10 - FREIGHT AMOUNT
      AFS.FSC.PARMS<1,5>=VIN<7>          ; * JMK10 - ORIGIN ST
      AFS.FSC.PARMS<1,6>=VIN<8>          ; * JMK10 - DESTINATION ST
      AFS.FSC.PARMS<1,7>=VOUT<1>         ; * JMK10 - FSC AMT
      AFS.FSC.PARMS<1,8>=VOUT<2>         ; * JMK10 - MIN FLG
      AFS.FSC.PARMS<1,9>=VOUT<3>         ; * JMK10 - CALC PERC
      AFS.FSC.PARMS<1,10>=VOUT<7>        ; * JMK10 - OVERAGE AMT
      AFS.FSC.PARMS<1,11>=VOUT<8>        ; * JMK10 - OVERAGE STEPS
      AFS.FSC.PARMS<1,12>=VOUT<9>        ; * JMK10 - BASE PERC
      AFS.FSC.PARMS<1,13>=VOUT<10>       ; * JMK10 - OVERAGE PERC
      AFS.FSC.PARMS<1,14>=VOUT<11>       ; * JMK10 - DELAY DAYS
      AFS.FSC.PARMS<1,15>=VOUT<12>       ; * JMK10 - SHIFT DATE
      AFS.FSC.PARMS<1,16>=VOUT<13>       ; * JMK10 - NATL FUEL PRICE
      AFS.FSC.PARMS<1,17>=VOUT<14>       ; * JMK10 - CONV FUEL PRICE
      AFS.FSC.PARMS<1,18>=VOUT<15>       ; * JMK10 - BEGIN EFF DATE
      AFS.FSC.PARMS<1,19>=VOUT<16>       ; * JMK10 - FORMULA
      AFS.FSC.PARMS<1,20>=VOUT<17>       ; * JMK10 - MODE
      AFS.FSC.PARMS<1,21>=VOUT<18>       ; * JMK10 - BASE FUEL PRICE
      AFS.FSC.PARMS<1,22>=VOUT<19>       ; * JMK10 - NATL INDEX NAME
      AFS.FSC.PARMS<1,23>=VOUT<20>       ; * JMK10 - MAX SETUP PRICE
      AFS.FSC.PARMS<1,24>=VOUT<21>       ; * JMK51 - AFS CONTRACT FSC TABLE
      AFS.FSC.PARMS<1,25>=VOUT<30>       ; * NPR07 - DESCRIPTION
      IF LOGISTICS THEN                  ; * JMK10
         BENCH.FSC.AMT=AFS.FSC.PARMS<1,7>          ; * JMK10
         BENCH.FSC.MIN=AFS.FSC.PARMS<1,8>          ; * JMK10
         BENCH.FSC.PERC=AFS.FSC.PARMS<1,9>         ; * JMK10
         IF CARR.ONLY.FSC='Y' OR CARR.ONLY.FSC='C' THEN      ; * JMK10 ; * JMK37
            BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>     ; * JMK10
            BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>     ; * JMK10
            BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>    ; * JMK10
         END                             ; * JMK10
         IF CARR.ONLY.FSC='O' THEN       ; * JMK37
            BENCH.FSC.AMT=AFSO.BENCH.FSC.PARMS<1,7>          ; * JMK37
            BENCH.FSC.MIN=AFSO.BENCH.FSC.PARMS<1,8>          ; * JMK37
            BENCH.FSC.PERC=AFSO.BENCH.FSC.PARMS<1,9>         ; * JMK37
            IF CONTR.FSC.PARMS<1,24>[1,2]#'AF' THEN          ; * JMK51
               BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>  ; * JMK51
               BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>  ; * JMK51
               BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>           ; * JMK51
            END                          ; * JMK51
         END                             ; * JMK37
         IF NO.LOG.FSC THEN BENCH.FSC.AMT=0        ; * Set to Zero
      END
****************************************************************************

      IF CONTR.FSC.AMT+BENCH.FSC.AMT+0#0 THEN
         LINE+=1
         IF CONTR.FSC.MIN THEN
            WHY:=@(3,LINE):'Fuel Sur Charge Min':NULL
         END ELSE
            CONTR.NAT.IDX = CONTR.FSC.PARMS<1,22>
            CONTR.AFS.AFN = CONTR.FSC.PARMS<1,24>
            CONTR.AFS.DESC = CONTR.FSC.PARMS<1,25>           ; * NPR07
            IF CONTR.AFS.AFN = "AFN" THEN CONTR.AFS.AFN = "AFS Supp A FSC"
            IF CONTR.AFS.AFN = "AFS" THEN CONTR.AFS.AFN = "AFS FSC"
            IF CONTR.AFS.DESC NE "" THEN CONTR.AFS.AFN = CONTR.AFS.DESC          ; * NPR07
            CONTR.FSC.DETAIL = ""
            IF CONTR.AFS.AFN NE "" THEN
               CONTR.FSC.DETAIL = CONTR.AFS.AFN
            END
            IF CONTR.NAT.IDX NE "" THEN
               IF CONTR.FSC.DETAIL = '' THEN CONTR.FSC.DETAIL := CONTR.NAT.IDX ELSE CONTR.FSC.DETAIL := " - ":CONTR.NAT.IDX
            END
            IF CONTR.AFS.DESC NE "" THEN CONTR.FSC.DETAIL = CONTR.AFS.DESC       ; * NPR07
            IF CONTR.FSC.DETAIL = "" THEN
               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% Fuel Sur Charge':NULL
            END ELSE
               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% FSC (':CONTR.FSC.DETAIL:') ':NULL
            END

         END
         WHY:=@(35,LINE):CONTR.FSC.AMT'R26#8':NULL
         IF LOGISTICS THEN
            BEGIN CASE
               CASE NO.LOG.FSC
                  WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'Logistics FSC = N':NULL
               CASE BENCH.FSC.MIN
                  WHY:=@(45,LINE):'Fuel Sur Charge Min':NULL
               CASE 1
                  BENCH.NAT.IDX = BENCH.FSC.PARMS<1,22>
                  BENCH.AFS.AFN = BENCH.FSC.PARMS<1,24>
                  BENCH.AFS.DESC = BENCH.FSC.PARMS<1,25>     ; * NPR07
                  IF BENCH.AFS.AFN = "AFN" THEN BENCH.AFS.AFN = "AFS Supp A FSC"
                  IF BENCH.AFS.AFN = "AFS" THEN BENCH.AFS.AFN = "AFS FSC"
                  IF BENCH.AFS.DESC NE "" THEN BENCH.AFS.AFN = BENCH.AFS.DESC    ; * NPR07
                  BENCH.FSC.DETAIL = ""
                  IF BENCH.AFS.AFN NE "" THEN
                     BENCH.FSC.DETAIL = BENCH.AFS.AFN
                  END
                  IF BENCH.NAT.IDX NE "" THEN
                     IF BENCH.FSC.DETAIL = '' THEN BENCH.FSC.DETAIL := BENCH.NAT.IDX ELSE BENCH.FSC.DETAIL := " - ":BENCH.NAT.IDX
                  END
                  IF BENCH.AFS.DESC NE "" THEN BENCH.FSC.DETAIL = BENCH.AFS.DESC           ; * NPR07

                  IF BENCH.FSC.DETAIL = "" THEN
                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% Fuel Sur Charge':NULL
                  END ELSE
                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% FSC (':BENCH.FSC.DETAIL:') ':NULL
                  END
            END CASE
            WHY:=@(73,LINE):BENCH.FSC.AMT'R26#7':NULL
         END
      END

*******************************************************************
1275: * Assessorial Charge Calculations
*******************************************************************
      IF USER='DAVID' THEN CALL ELINE('MISC CHGS')
      TOT.CONTR.MISC.CHG=0
      TOT.BENCH.MISC.CHG=0
      OVR.CONTR.MISC.CHG.DESC = ''       ; * JMK63
      OVR.BENCH.MISC.CHG.DESC = ''       ; * JMK63
      OVR.CONTR.MISC.CHG = 0             ; * JMK64
      OVR.BENCH.MISC.CHG = 0             ; * JMK64
      CUR.CONTR.MISC.CHG = 0             ; * JMK63
      CUR.BENCH.MISC.CHG = 0             ; * JMK63
* Begin NKH03
      SAVE.CONTR = ''
      SAVE.BENCH = ''
      LAST.LINE = ''
      SAVED.LINES = 0
* End NKH03
      MISC.CHG.TIMES=DCOUNT(MISC.CHG<1>,@VM)
      FOR MISC.CHG.COUNT=1 TO MISC.CHG.TIMES
         LINE=LINE+1
         CUR.MISC.CHG.CODE=MISC.CHG<1,MISC.CHG.COUNT>
         LOCATE CUR.MISC.CHG.CODE IN LI.CODES<1> SETTING POS THEN
            CUR.MISC.CHG.DESC=LI.CODES<2,POS>
         END ELSE
            CUR.MISC.CHG.DESC='Not On File'
         END
         CUR.CONTR.MISC.CHG.DESC=CUR.MISC.CHG.DESC
         CUR.BENCH.MISC.CHG.DESC=CUR.MISC.CHG.DESC
         IF MISC.CHG<4,MISC.CHG.COUNT>+0=0 THEN    ; * JMK63
            CUR.CONTR.MISC.CHG=MISC.CHG<2,MISC.CHG.COUNT>
            IF CUR.CONTR.MISC.CHG='CWT' THEN       ; * JMK02
               LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN   ; * JMK02
                  CUR.CONTR.MISC.CWT.RATE=DAUDIT.TABLES<49,MPOS> 'R26'           ; * JMK02
                  CUR.CONTR.MISC.CWT.MIN=DAUDIT.TABLES<50,MPOS>        ; * JMK02
                  CUR.CONTR.MISC.CWT.MAX=DAUDIT.TABLES<51,MPOS>        ; * JMK02
                  CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE         ; * JMK02
                  CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')
                  IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN       ; * JMK02
                     IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN         ; * JMK02
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
                  IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN       ; * JMK02
                     IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN         ; * JMK02
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
               END ELSE                  ; * JMK02
                  CUR.CONTR.MISC.CHG=0   ; * JMK02
               END                       ; * JMK02
               IF JL.FLAG THEN           ; * JMK49
                  LOCATE CUR.MISC.CHG.CODE IN JL.DAUDIT.TABLES<26> SETTING JL.MPOS THEN    ; * JMK49
                     CUR.CONTR.MISC.CWT.RATE=JL.DAUDIT.TABLES<49,JL.MPOS> 'R26'  ; * JMK49
                     CUR.CONTR.MISC.CWT.MIN=JL.DAUDIT.TABLES<50,JL.MPOS>         ; * JMK49
                     CUR.CONTR.MISC.CWT.MAX=JL.DAUDIT.TABLES<51,JL.MPOS>         ; * JMK49
                     CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE      ; * JMK49
                     CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')          ; * JMK49
                     IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN    ; * JMK49
                        IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN      ; * JMK49
                           CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN   ; * JMK49
                        END              ; * JMK49
                     END                 ; * JMK49
                     IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN    ; * JMK49
                        IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN      ; * JMK49
                           CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX   ; * JMK49
                        END              ; * JMK49
                     END                 ; * JMK49
                  END ELSE               ; * JMK49
                     CUR.CONTR.MISC.CHG=0          ; * JMK49
                  END                    ; * JMK49
               END                       ; * JMK49
            END ELSE                     ; * JMK02
               LEN.CHG=LEN(CUR.CONTR.MISC.CHG)
               IF CUR.CONTR.MISC.CHG[LEN.CHG,1]='%' THEN
                  PERC=CUR.CONTR.MISC.CHG[1,LEN.CHG-1]
                  CUR.CONTR.MISC.CHG=OCONV(TOT.CONTR.AMT*PERC/100,'MR0')
               END
            END                          ; * JMK02
            TOT.CONTR.MISC.CHG+=CUR.CONTR.MISC.CHG
            IF LOGISTICS THEN
               CUR.BENCH.MISC.CHG=MISC.CHG<3,MISC.CHG.COUNT>
               IF CUR.BENCH.MISC.CHG='CWT' THEN    ; * JMK02
                  LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN          ; * JMK02
                     CUR.BENCH.MISC.CWT.RATE=DAUDIT.TABLES<52,MPOS> 'R26'        ; * JMK02
                     CUR.BENCH.MISC.CWT.MIN=DAUDIT.TABLES<53,MPOS>     ; * JMK02
                     CUR.BENCH.MISC.CWT.MAX=DAUDIT.TABLES<54,MPOS>     ; * JMK02
                     CUR.BENCH.MISC.CHG=TOT.WEIGHT *CUR.BENCH.MISC.CWT.RATE      ; * JMK02
                     CUR.BENCH.MISC.CHG=OCONV(CUR.BENCH.MISC.CHG,'MR0')
                     IF CUR.BENCH.MISC.CWT.MIN+0 # 0 THEN    ; * JMK02
                        IF CUR.BENCH.MISC.CHG < CUR.BENCH.MISC.CWT.MIN THEN      ; * JMK02
                           CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MIN   ; * JMK02
                        END              ; * JMK02
                     END                 ; * JMK02
                     IF CUR.BENCH.MISC.CWT.MAX+0 # 0 THEN    ; * JMK02
                        IF CUR.BENCH.MISC.CHG > CUR.BENCH.MISC.CWT.MAX THEN      ; * JMK02
                           CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MAX   ; * JMK02
                        END              ; * JMK02
                     END                 ; * JMK02
                  END ELSE               ; * JMK02
                     CUR.BENCH.MISC.CHG=0          ; * JMK02
                  END                    ; * JMK02
                  IF JL.FLAG THEN        ; * JMK49
                     LOCATE CUR.MISC.CHG.CODE IN JL.DAUDIT.TABLES<26> SETTING JL.MPOS THEN           ; * JMK49
                        CUR.BENCH.MISC.CWT.RATE=JL.DAUDIT.TABLES<52,JL.MPOS> 'R26'         ; * JMK49
                        CUR.BENCH.MISC.CWT.MIN=JL.DAUDIT.TABLES<53,JL.MPOS>      ; * JMK49
                        CUR.BENCH.MISC.CWT.MAX=JL.DAUDIT.TABLES<54,JL.MPOS>      ; * JMK49
                        CUR.BENCH.MISC.CHG=TOT.WEIGHT *CUR.BENCH.MISC.CWT.RATE   ; * JMK49
                        CUR.BENCH.MISC.CHG=OCONV(CUR.BENCH.MISC.CHG,'MR0')       ; * JMK49
                        IF CUR.BENCH.MISC.CWT.MIN+0 # 0 THEN           ; * JMK49
                           IF CUR.BENCH.MISC.CHG < CUR.BENCH.MISC.CWT.MIN THEN   ; * JMK49
                              CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MIN          ; * JMK49
                           END           ; * JMK49
                        END              ; * JMK49
                        IF CUR.BENCH.MISC.CWT.MAX+0 # 0 THEN           ; * JMK49
                           IF CUR.BENCH.MISC.CHG > CUR.BENCH.MISC.CWT.MAX THEN   ; * JMK49
                              CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MAX          ; * JMK49
                           END           ; * JMK49
                        END              ; * JMK49
                     END ELSE            ; * JMK49
                        CUR.BENCH.MISC.CHG=0       ; * JMK49
                     END                 ; * JMK49
                  END                    ; * JMK49
               END ELSE                  ; * JMK02
                  IF CUR.BENCH.MISC.CHG[LEN.CHG,1]='%' THEN
                     PERC=CUR.BENCH.MISC.CHG[1,LEN.CHG-1]
                     CUR.BENCH.MISC.CHG=OCONV(TOT.BENCH.AMT*PERC/100,'MR0')
                  END
               END                       ; * JMK02
               TOT.BENCH.MISC.CHG+=CUR.BENCH.MISC.CHG
            END
            GOSUB BUILD.SCREEN           ; * NKH03
         END ELSE                        ; * JMK63
            MISC.CODE=CUR.MISC.CHG.CODE  ; * JMK63
            GOSUB 8975                   ; * JMK63
            GOSUB BUILD.SAVE.LINE        ; * NKH03
            TOT.CONTR.MISC.CHG+=CUR.CONTR.MISC.CHG           ; * JMK63
            TOT.BENCH.MISC.CHG+=CUR.BENCH.MISC.CHG           ; * JMK63
         END                             ; * JMK63
* Begin NKH03
         IF LAST.LINE > '' THEN
            LINE = LAST.LINE
            LAST.LINE = ''
         END
* End NKH03
      NEXT MISC.CHG.COUNT
*******************************************************************
* Print Grand Totals
*******************************************************************
      GTOT.CONTR.AMT=TOT.CONTR.AMT+CONTR.FSC.AMT+TOT.CONTR.MISC.CHG
      IF LOGISTICS THEN
         GTOT.BENCH.AMT=TOT.BENCH.AMT+BENCH.FSC.AMT+TOT.BENCH.MISC.CHG
      END
* Begin NKH03
      IF SAVED.LINES THEN
         SAVE.COUNT = DCOUNT(SAVE.CONTR<1>,@VM)
         FOR SC = 1 TO SAVE.COUNT
            * Contract
            CUR.MISC.CHG.CODE = SAVE.CONTR<1,SC>
            CUR.CONTR.MISC.CHG.DESC = SAVE.CONTR<2,SC>
            CONTR.RATE = SAVE.CONTR<3,SC>
            CONTR.ACC = SAVE.CONTR<4,SC>
            CONTR.FSC = SAVE.CONTR<5,SC>
            CONTR.TYPE = SAVE.CONTR<7,SC>
            CUR.CONTR.MISC.CHG = SAVE.CONTR<8,SC>
            CONTR.MIN = SAVE.CONTR<9,SC>
            CONTR.CALC.TOTAL = TOT.CONTR.AMT
            IF CONTR.TYPE = 'P' THEN

               IF CONTR.FSC = 'I' THEN CONTR.CALC.TOTAL += CONTR.FSC.AMT
               IF CONTR.ACC = 'I' THEN CONTR.CALC.TOTAL += TOT.CONTR.MISC.CHG
               CUR.CONTR.MISC.CHG=OCONV(CONTR.CALC.TOTAL*CONTR.RATE/10000,'MR0')
               IF CONTR.MIN > CUR.CONTR.MISC.CHG THEN
                  CUR.CONTR.MISC.CHG = CONTR.MIN
               END
               GTOT.CONTR.AMT += CUR.CONTR.MISC.CHG
            END

            * Bench
            CUR.BENCH.MISC.CHG.CODE = SAVE.BENCH<1,SC>
            CUR.BENCH.MISC.CHG.DESC = SAVE.BENCH<2,SC>
            BENCH.RATE = SAVE.BENCH<3,SC>
            BENCH.ACC = SAVE.BENCH<4,SC>
            BENCH.FSC = SAVE.BENCH<5,SC>
            BENCH.TYPE = SAVE.BENCH<7,SC>
            CUR.BENCH.MISC.CHG = SAVE.BENCH<8,SC>
            BENCH.MIN = SAVE.BENCH<9,SC>
            BENCH.CALC.TOTAL = TOT.BENCH.AMT
            IF BENCH.TYPE = 'P' THEN
               IF BENCH.FSC = 'I' THEN BENCH.CALC.TOTAL += BENCH.FSC.AMT
               IF BENCH.ACC = 'I' THEN BENCH.CALC.TOTAL += TOT.BENCH.MISC.CHG
               CUR.BENCH.MISC.CHG=OCONV(BENCH.CALC.TOTAL*BENCH.RATE/10000,'MR0')
               IF BENCH.MIN > CUR.BENCH.MISC.CHG THEN
                  CUR.BENCH.MISC.CHG = BENCH.MIN
               END
               GTOT.BENCH.AMT += CUR.BENCH.MISC.CHG
            END

            LINE += 1
            GOSUB BUILD.SCREEN
         NEXT SC
      END
* End NKH03

*********************************************************
* Adjust Benchmark Amount if Less than Contract Amount
*********************************************************
      IF LOGISTICS AND GTOT.BENCH.AMT < GTOT.CONTR.AMT THEN
         GTOT.BENCH.AMT=GTOT.CONTR.AMT
         LINE+=1
         WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
      END
      IF LOGISTICS THEN
         ******  IF BILL.DATE GE "12167" THEN
         IF CLIENT.ID = "01769" THEN     ; * JMK58
            IF TOT.WEIGHT GE "700" THEN
               IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "3670" THEN
                  CONSULTING.AMT=3670
                  DIFF.LOG=3670-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)
                  GTOT.BENCH.AMT=GTOT.CONTR.AMT+3670
                  LINE+=1
                  WHY:=@(45,LINE):"ADJ! Max consulting of 36.70":NULL
                  WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL
               END
            END
         END
         IF CARRIER.ID = '00198' THEN
            BEAVER.ADJ=1
            BEGIN CASE
               CASE CLIENT.ID='01457' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01675' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01113' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00879' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01101' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01083' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01873' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01079' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01389' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01739' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01271' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01686' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01604' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01112' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01267' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01432' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01418' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01749' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01770' AND BILL.DATE GE "15572" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01027' AND BILL.DATE GE "15550" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01019' AND BILL.DATE GE "15550" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01463' AND BILL.DATE GE "15590" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00890' AND BILL.DATE GE "15597" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01862' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01863' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01924' AND BILL.DATE GE "15462" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00883' AND BILL.DATE GE "15597" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01717' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01822' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01907' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00866' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='02010' AND BILL.DATE GE "15827" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01435' AND BILL.DATE GE "15980" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01817' AND BILL.DATE GE "16032" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01789' AND BILL.DATE GE "16045" AND TOT.WEIGHT GT "150"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01014' AND BILL.DATE GE "16003" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01630' AND BILL.DATE GE "16087" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01284' AND BILL.DATE GE "16071" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00879' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01112' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01457' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01604' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01686' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01873' AND BILL.DATE GE "16011" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01015' AND BILL.DATE GE "16111" AND TOT.WEIGHT GT "0" AND BILL.DATE LE "16889"  ; * DRF09
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00872' AND BILL.DATE GE "16377" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00890' AND BILL.DATE GE "16480" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='02192' AND BILL.DATE GE "16514" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01746' AND BILL.DATE GE "16538" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01504' AND BILL.DATE GE "16635" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01717' AND BILL.DATE GE "16661" AND TOT.WEIGHT GT "0"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='02204' AND BILL.DATE GE "16668" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='00895' AND BILL.DATE GE ICONV('10/09/13','D') AND TOT.WEIGHT GT "100"           ; * JMK75
                  BEAVER.ADJ=0
               CASE CLIENT.ID='02102' AND BILL.DATE GE "16755" AND TOT.WEIGHT GT "100"
                  BEAVER.ADJ=0
               CASE CLIENT.ID='01019' AND BILL.DATE GE "16938" AND TOT.WEIGHT GT "0"       ; * DRF03
                  BEAVER.ADJ=0           ; * DRF03
               CASE CLIENT.ID='05171' AND BILL.DATE GE "17277" AND TOT.WEIGHT GT "100"     ; * DRF11
                  BEAVER.ADJ=0           ; * DRF11
               CASE CLIENT.ID='01394' AND BILL.DATE GE "17182" AND TOT.WEIGHT GT "100"     ; * DRF13
                  BEAVER.ADJ=0           ; * DRF13
               CASE CLIENT.ID='05411' AND BILL.DATE GE "17319" AND TOT.WEIGHT GT "100"     ; * DRF15
                  BEAVER.ADJ=0           ; * DRF15
               CASE CLIENT.ID='05351' AND BILL.DATE GE "17168" AND TOT.WEIGHT GT "0"       ; * DRF16
                  BEAVER.ADJ=0           ; * DRF16
               CASE CLIENT.ID='01454' AND BILL.DATE GE "17168" AND TOT.WEIGHT GT "100"     ; * DRF17
                  BEAVER.ADJ=0           ; * DRF17
               CASE CLIENT.ID='02027' AND BILL.DATE GE "17673" AND TOT.WEIGHT GT "100"     ; * GRB02
                  BEAVER.ADJ=0           ; * GRB02
               CASE CLIENT.ID='00851' AND BILL.DATE GE "17673" AND TOT.WEIGHT GT "100"     ; * GRB02
                  BEAVER.ADJ=0           ; * GRB02
               CASE CLIENT.ID ='01718' AND BILL.DATE GE "17697" AND TOT.WEIGHT GT "100"    ; * GRB03
                  BEAVER.ADJ=0           ; * GRB03
               CASE CLIENT.ID ='01987' AND BILL.DATE GE "17712" AND TOT.WEIGHT GT "100"    ; * GRB04
                  BEAVER.ADJ=0           ; * GRB04
               CASE CLIENT.ID ='01072' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"    ; * GRB05
                  BEAVER.ADJ=0           ; * GRB05
               CASE CLIENT.ID ='07073' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"    ; * GRB05
                  BEAVER.ADJ=0           ; * GRB05
               CASE CLIENT.ID ='07074' AND BILL.DATE GE "17753" AND TOT.WEIGHT GT "100"    ; * GRB05
                  BEAVER.ADJ=0           ; * GRB05
               CASE CLIENT.ID='05095' AND BILL.DATE GE "17792" AND TOT.WEIGHT GT "100"     ; *TAG01
                  BEAVER.ADJ=0           ; *TAG01
               CASE CLIENT.ID='05608' AND BILL.DATE GE "17838" AND TOT.WEIGHT GT "100"     ; *TAG02
                  BEAVER.ADJ=0           ; *TAG02
               CASE CLIENT.ID='01789' AND BILL.DATE GE "17904" AND TOT.WEIGHT GT "100"     ; *TAG03
                  BEAVER.ADJ=0           ; *TAG03
               CASE CLIENT.ID='01650' AND BILL.DATE GE "17903" AND TOT.WEIGHT GT "100"     ; *NKH01
                  BEAVER.ADJ=0           ; *NKH01
               CASE CLIENT.ID='00934' AND BILL.DATE GE "18215" AND TOT.WEIGHT GT "100"     ; *NKH02
                  BEAVER.ADJ=0           ; *NKH02
               CASE TOT.WEIGHT GT "200"
                  BEAVER.ADJ=0
            END CASE

            IF BEAVER.ADJ THEN
               IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "0" THEN
                  LINE+=1
                  WHY:=@(45,LINE):"BENCHMARK SUBTOTAL          ":NULL
                  WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
                  DIFF.LOG=0-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)
                  GTOT.BENCH.AMT=GTOT.CONTR.AMT+0
                  LINE+=1
                  WHY:=@(45,LINE):"ADJ! Parcel Rate no consulting":NULL
                  WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL
               END
            END
         END
* Begin GRB06
         ******           IF CLIENT.ID = '01822' AND CARRIER.ID = '00561' THEN       ; * DRF07
*df               IF TOT.WEIGHT LE "200" THEN     ; * DRF07
         ******               IF TOT.WEIGHT LE "100" THEN         ; * DRF07
         ******                  IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "0" THEN       ; * DRF07
         ******                     LINE+=1             ; * DRF07
         ******                     WHY:=@(45,LINE):"BENCHMARK SUBTOTAL          ":NULL         ; * DRF07
         ******                     WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL        ; * DRF07
         ******                     DIFF.LOG=0-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)        ; * DRF07
         ******                     GTOT.BENCH.AMT=GTOT.CONTR.AMT+0         ; * DRF07
         ******                     LINE+=1             ; * DRF07
******                      WHY:=@(45,LINE):"ADJ! Parcel Rate no consulting":NULL       ; * DRF07
******                      WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL    ; * DRF07
         ******                  END                    ; * DRF07
         ******               END                       ; * DRF07
******             END                          ; * DRF07
*     ; * DRF07
* End GRB06

         *** END
      END
      LINE=LINE+1
      WHY:=@(3,LINE):'CONTRACT TOTAL':NULL
      WHY:=@(35,LINE):GTOT.CONTR.AMT'R26#8':NULL
      IF LOGISTICS THEN
         WHY:=@(45,LINE):'BENCHMARK TOTAL':NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
         LINE+=1
         CONSULTING.AMT=GTOT.BENCH.AMT-GTOT.CONTR.AMT
         WHY:=@(0,LINE):"Logistics Amount: ":(CONSULTING.AMT)'R26,#8':NULL
      END
      IF SUPERUSER THEN                  ; * JMK10
         LINE+=2                         ; * JMK10
         WHY:=@(0,LINE):"FSC Method":@(25,LINE):"FSC Base Amount"'R#15':@(40,LINE):"FSC %"'R#15':@(55,LINE):"FSC Amount"'R#15'     ; * JMK10
         LINE+=1                         ; * JMK10
         WHY:=@(0,LINE):"AFS Contract":@(25,LINE):CONTR.FSC.PARMS<1,4>'R26,#15':@(40,LINE):CONTR.FSC.PARMS<1,9>'R37#15':@(55,LINE):CONTR.FSC.PARMS<1,7>'R26,#15'           ; * JMK10
         LINE+=1                         ; * JMK10
         WHY:=@(0,LINE):"Carrier Benchmark":@(25,LINE):BENCH.FSC.PARMS<1,4>'R26,#15':@(40,LINE):BENCH.FSC.PARMS<1,9>'R37#15':@(55,LINE):BENCH.FSC.PARMS<1,7>'R26,#15'      ; * JMK10
         LINE+=1                         ; * JMK10
         IF CARR.ONLY.FSC='O' THEN       ; * JMK37
            WHY:=@(0,LINE):"AFS Benchmark":@(25,LINE):AFSO.BENCH.FSC.PARMS<1,4>'R26,#15':@(40,LINE):AFSO.BENCH.FSC.PARMS<1,9>'R37#15':@(55,LINE):AFSO.BENCH.FSC.PARMS<1,7>'R26,#15'  ; * JMK37
         END ELSE                        ; * JMK37
            WHY:=@(0,LINE):"AFS Benchmark":@(25,LINE):AFS.FSC.PARMS<1,4>'R26,#15':@(40,LINE):AFS.FSC.PARMS<1,9>'R37#15':@(55,LINE):AFS.FSC.PARMS<1,7>'R26,#15'   ; * JMK10
         END                             ; * JMK10
      END                                ; * JMK10
      LOCATE BILL.DATE IN CLIENT.REC(84)<1> BY 'AR' SETTING POS ELSE
         POS=POS-1
      END
      IF POS<1 THEN
         CALL ELINE("Cannot Rate! Bill date is before 1st Charge Date in Client Maintenance")
         GO 500
      END

***************** Calculate Comissions ********************
* Begin GRB
      LOG.COMM=0
      CLIENT.COST=GTOT.CONTR.AMT
      LOG.DIFF = ''                      ; * NKH04
      NEW.LOG.COMM = 0
      DEBUG
      IF LOGISTICS THEN
         LTL.MIN.FLG = "Y"
         TOT.BENCH.AMT=BENCH.DOUT<1,5>-OCONV((TOT.BENCH.DISC/10000),'MR0')
         LTL.MIN.FLG = CLIENT.REC(320)
         IF USER = 'GBINO' THEN DEBUG
         IF LTL.MIN.FLG AND MISROUTE = 0 THEN
         	 IF TOT.BENCH.AMT < TOT.CONTR.AMT THEN
            TOT.BENCH.AMT=TOT.CONTR.AMT
          END
            VIN=''
            VOUT =''
            VIN<1> = TOT.BENCH.AMT
**** VIN<1> = GTOT.BENCH.AMT
            VIN<2> = TOT.CONTR.AMT
            VIN<3> = BENCH.FSC.AMT
            VIN<4> = CONTR.FSC.AMT
            VIN<5> = TOT.BENCH.MISC.CHG
            VIN<6> = TOT.CONTR.MISC.CHG
            CALL CALC.LTL.MARKUP.MIN(VIN,MAT CLIENT.REC,VOUT)
            NEW.LOG.COMM = VOUT<1> * 100
         END
         LOG.COMM=CONSULTING.AMT*(CLIENT.REC(85)<1,POS>)/10000
****         IF LOG.COMM LT NEW.LOG.COMM THEN
****            LOG.DIFF = NEW.LOG.COMM
****         END ELSE
****            LOG.DIFF = ""
****         END
         LOG.DIFF = NEW.LOG.COMM
*****************************
         IF CLIENT.ID='00735' THEN LOG.COMM='0'    ; * JMK - UNTIL WE CAN ADD PERCENTAGE BY TRANSPORT MODE OR CARRIER
         IF CLIENT.ID='01510' THEN       ; * JMK66
            LOG.COMM=GTOT.CONTR.AMT*.08  ; * JMK66
         END                             ; * JMK66
         IF CLIENT.ID='01769' THEN       ; * JMK72
            LOG.COMM='800'               ; * JMK72
         END                             ; * JMK72

         IF CLIENT.ID='02171' THEN
            LOG.COMM=GTOT.CONTR.AMT*.15
         END


         IF CLIENT.ID='05096' THEN       ; * JMK82
            LOG.COMM=GTOT.CONTR.AMT*.10  ; * JMK82
            DATE.SETUP=CLIENT.REC(84)    ; * JMK82
            CONSULTING.RATE=CLIENT.REC(85)         ; * JMK82
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * JMK82
            IF MOD.POS=0 THEN MOD.POS=1  ; * JMK82
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * JMK82
            IF CONSULTING.PERC=0 THEN    ; * JMK82
               LOG.COMM=0                ; * JMK82
            END                          ; * JMK82
         END                             ; * JMK82

         IF CLIENT.ID='05178' THEN       ; * JMK86
            LOG.COMM=GTOT.CONTR.AMT*.05  ; * JMK86
            DATE.SETUP=CLIENT.REC(84)    ; * JMK86
            CONSULTING.RATE=CLIENT.REC(85)         ; * JMK86
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * JMK86
            IF MOD.POS=0 THEN MOD.POS=1  ; * JMK86
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * JMK86
            IF CONSULTING.PERC=0 THEN    ; * JMK86
               LOG.COMM=0                ; * JMK86
            END                          ; * JMK86
         END                             ; * JMK86

         IF CLIENT.ID='05294' THEN       ; * DRF08
            IF TRANSPORT.MODE=1 THEN     ; * DRF09
               LOG.COMM=GTOT.CONTR.AMT*.03         ; * DRF08
            END ELSE                     ; * DRF09
               LOG.COMM=0                ; * DRF09
            END                          ; * DRF09
            DATE.SETUP=CLIENT.REC(84)    ; * DRF08
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF08
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF08
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF08
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF08
            IF CONSULTING.PERC=0 THEN    ; * DRF08
               LOG.COMM=0                ; * DRF08
            END                          ; * DRF08
         END                             ; * DRF08
         IF CLIENT.ID='02374' THEN       ; * DRF14
            IF TRANSPORT.MODE=1 THEN     ; * DRF14
               LOG.COMM=GTOT.CONTR.AMT*.12         ; * DRF14
            END ELSE                     ; * DRF14
               LOG.COMM=0                ; * DRF14
            END                          ; * DRF14
            DATE.SETUP=CLIENT.REC(84)    ; * DRF14
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF14
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF14
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF14
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF14
            IF CONSULTING.PERC=0 THEN    ; * DRF14
               LOG.COMM=0                ; * DRF14
            END                          ; * DRF14
         END                             ; * DRF14
         IF CLIENT.ID='02481' THEN       ; * DRF16
            IF TRANSPORT.MODE=1 THEN     ; * DRF16
               LOG.COMM=GTOT.CONTR.AMT*.10         ; * DRF16
            END ELSE                     ; * DRF16
               LOG.COMM=0                ; * DRF16
            END                          ; * DRF16
            DATE.SETUP=CLIENT.REC(84)    ; * DRF16
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF16
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF16
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF16
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF16
            IF CONSULTING.PERC=0 THEN    ; * DRF16
               LOG.COMM=0                ; * DRF16
            END                          ; * DRF16
         END                             ; * DRF16
         IF CLIENT.ID='01933' THEN       ; * DRF18
            IF TRANSPORT.MODE=1 THEN     ; * DRF18
*DF               LOG.COMM=GTOT.CONTR.AMT*.055        ; * DRF18
               LOG.COMM=GTOT.CONTR.AMT*.0495       ; * DRF21
            END ELSE                     ; * DRF18
               LOG.COMM=0                ; * DRF18
            END                          ; * DRF18
            DATE.SETUP=CLIENT.REC(84)    ; * DRF18
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF18
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF18
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF18
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF18
            IF CONSULTING.PERC=0 THEN    ; * DRF18
               LOG.COMM=0                ; * DRF18
            END                          ; * DRF18
         END                             ; * DRF18
         IF CLIENT.ID='01801' THEN       ; * DRF19
            LOG.COMM=GTOT.CONTR.AMT*.05  ; * DRF19
            DATE.SETUP=CLIENT.REC(84)    ; * DRF19
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF19
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF19
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF19
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF19
            IF CONSULTING.PERC=0 THEN    ; * DRF19
               LOG.COMM=0                ; * DRF19
            END                          ; * DRF19
         END                             ; * DRF19
         IF CLIENT.ID='05608' THEN       ; * DRF20
            LOG.COMM=GTOT.CONTR.AMT*.10  ; * DRF20
            DATE.SETUP=CLIENT.REC(84)    ; * DRF20
            CONSULTING.RATE=CLIENT.REC(85)         ; * DRF20
            LOCATE DATE() IN DATE.SETUP<1> BY 'AR' SETTING MOD.POS ELSE MOD.POS=MOD.POS-1  ; * DRF20
            IF MOD.POS=0 THEN MOD.POS=1  ; * DRF20
            CONSULTING.PERC=CONSULTING.RATE<1,MOD.POS>       ; * DRF20
            IF CONSULTING.PERC=0 THEN    ; * DRF20
               LOG.COMM=0                ; * DRF20
            END                          ; * DRF20
         END                             ; * DRF20
         LOG.COMM=OCONV(LOG.COMM,'MR0')
         CLIENT.COST+=LOG.COMM
      END ELSE GTOT.BENCH.AMT=GTOT.CONTR.AMT
*
* If is a quote will then figure and print the quote amount
*
      IF PROCESS.MODE = 'Quote' THEN
         LINE=LINE+1
         WHY:=@(3,LINE):'-- Quote Additions --':NULL
         SAVINGS = GTOT.BENCH.AMT-GTOT.CONTR.AMT
         CL.SAVINGS = SAVINGS - LOG.COMM
         SAVINGS.QUOTE.AMT = CL.SAVINGS*(1-SAVINGS.QUOTE.PERC/10000)
         IF LOG.DIFF GT 0 THEN LOG.COMM = LOG.COMM + NEW.LOG.COMM
         QUOTE.AMT = GTOT.CONTR.AMT + LOG.COMM + SAVINGS.QUOTE.AMT
         IF CDN.ROUTE THEN               ; * JMK35
            IF ORG.CAN=0 OR DST.CAN=0 THEN         ; * JMK67
               QUOTE.AMT=QUOTE.AMT+3000  ; * 10-21-04 Add $30.00 to each Canadian Quote to cover the homeland security fee ; * JMK35

            END                          ; * JMK67
         END                             ; * JMK35
         LINE=LINE+1
         WHY:=@(3,LINE):'Logistics Commission':NULL
         WHY:=@(35,LINE):LOG.COMM'R26#8':NULL:LOG.DIFF'R26#8'
         LINE=LINE+1
         WHY:=@(3,LINE):'Quote Amount':NULL
         WHY:=@(35,LINE):QUOTE.AMT'R26#8':NULL
         IF TC THEN                      ; * JMK57
            LINE=LINE+1                  ; * JMK57
            WHY:=@(3,LINE):'True Cost':NULL        ; * JMK57
            WHY:=@(35,LINE):CLIENT.COST'R26#8':NULL          ; * JMK57
         END                             ; * JMK57

         IF IOT = "T" THEN
            TP.AMT.TAB<TP.CNT> = QUOTE.AMT
         END
****************************************************************************
         OB.QUOTE.INCR.PERC = (CLIENT.REC(227)/100)          ; *NPR01
         IB.QUOTE.INCR.PERC = (CLIENT.REC(228)/100)          ; *NPR01
         TP.QUOTE.INCR.PERC = (CLIENT.REC(229)/100)          ; *NPR01
         BEGIN CASE                      ; *NPR01
            CASE IOT='O' AND OB.QUOTE.INCR.PERC NE "0"       ; *NPR01
               OB.QUOTE.INCR.AMT = QUOTE.AMT * (OB.QUOTE.INCR.PERC/100)          ; *NPR01
               WHY:=@(35,LINE):QUOTE.AMT'R26#8':NULL         ; *NPR01
               IF OB.QUOTE.INCR.AMT NE "0" THEN    ; *NPR01
                  QUOTE.AMT=(QUOTE.AMT + OB.QUOTE.INCR.AMT)'R0'        ; *NPR01
                  LINE+=1                ; *NPR01
                  WHY:=@(3,LINE):'Increase Quote by ':OB.QUOTE.INCR.PERC*100 'R26#6' : "%":NULL      ; *NPR01
                  WHY:=@(35,LINE):OB.QUOTE.INCR.AMT 'R26#8':NULL       ; *NPR01
                  LINE+=1                ; *NPR01
                  WHY:=@(35,LINE):QUOTE.AMT 'R26#8':NULL     ; *NPR01
               END                       ; *NPR01
            CASE IOT='I' AND IB.QUOTE.INCR.PERC NE "0"       ; *NPR01
               IB.QUOTE.INCR.AMT = QUOTE.AMT * (IB.QUOTE.INCR.PERC/100)          ; *NPR01
               WHY:=@(35,LINE):QUOTE.AMT'R26#8':NULL         ; *NPR01
               IF IB.QUOTE.INCR.AMT NE "0" THEN    ; *NPR01
                  QUOTE.AMT=(QUOTE.AMT + IB.QUOTE.INCR.AMT)'R0'        ; *NPR01
                  LINE+=1                ; *NPR01
                  WHY:=@(3,LINE):'Increase Quote by ':IB.QUOTE.INCR.PERC*100 'R26#6' : "%":NULL      ; *NPR01
                  WHY:=@(35,LINE):IB.QUOTE.INCR.AMT 'R26#8':NULL       ; *NPR01
                  LINE+=1                ; *NPR01
                  WHY:=@(35,LINE):QUOTE.AMT 'R26#8':NULL     ; *NPR01
               END                       ; *NPR01
            CASE IOT='T' AND TP.QUOTE.INCR.PERC NE "0"       ; *NPR01
               TP.QUOTE.INCR.AMT = QUOTE.AMT * (TP.QUOTE.INCR.PERC/100)          ; *NPR01
               WHY:=@(35,LINE):QUOTE.AMT'R26#8':NULL         ; *NPR01
               IF TP.QUOTE.INCR.AMT NE "0" THEN    ; *NPR01
                  QUOTE.AMT=(QUOTE.AMT + TP.QUOTE.INCR.AMT)'R0'        ; *NPR01
                  LINE+=1                ; *NPR01
                  WHY:=@(3,LINE):'Increase Quote by ':TP.QUOTE.INCR.PERC*100 'R26#6' : "%":NULL      ; *NPR01
                  WHY:=@(35,LINE):TP.QUOTE.INCR.AMT 'R26#8':NULL       ; *NPR01
                  LINE+=1                ; *NPR01
                  WHY:=@(35,LINE):QUOTE.AMT 'R26#8':NULL     ; *NPR01

                  IF IOT = "T" THEN
                     TP.AMT.TAB<TP.CNT> = QUOTE.AMT
                  END
               END                       ; *NPR01
         END CASE
         IF CLIENT.ID='01127' THEN       ; * JMK44
            QUOTE.AMT=CLIENT.COST        ; * JMK62
            BEGIN CASE                   ; * JMK44
               CASE QUOTE.AMT>= 75001    ; * JMK44
                  QUOTE.INC=1.15         ; * JMK44 ; * JMK61 ; * JMK62
                  QUOTE.INC.PERC=15      ; * JMK44 ; * JMK61 ; * JMK62
               CASE QUOTE.AMT>= 50001    ; * JMK44
                  QUOTE.INC=1.3          ; * JMK44 ; * JMK61
                  QUOTE.INC.PERC=30      ; * JMK44 ; * JMK61
               CASE QUOTE.AMT>= 30001    ; * JMK61
                  QUOTE.INC=1.5          ; * JMK61
                  QUOTE.INC.PERC=50      ; * JMK61
               CASE 1                    ; * JMK44
                  QUOTE.INC=2.0          ; * JMK44 ; * JMK61
                  QUOTE.INC.PERC=100     ; * JMK44 ; * JMK61
            END CASE                     ; * JMK44
            WHY:=@(35,LINE):QUOTE.AMT'R26#8':NULL  ; * JMK44
            QUOTE.INCR.AMT=(QUOTE.AMT*QUOTE.INC.PERC/100)'R0'          ; * JMK44
            IF QUOTE.INCR.AMT NE "0" THEN          ; * JMK44
               QUOTE.AMT=(QUOTE.AMT + QUOTE.INCR.AMT)'R0'    ; * JMK44
               LINE+=1                   ; * JMK44
               WHY:=@(3,LINE):'Ward Kraft Incr Quote by ':QUOTE.INC 'R2#6':NULL  ; * JMK44
               WHY:=@(35,LINE):QUOTE.INCR.AMT 'R26#8':NULL   ; * JMK44
               LINE+=1                   ; * JMK44
               WHY:=@(35,LINE):QUOTE.AMT 'R26#8':NULL        ; * JMK44
            END                          ; * JMK44
         END                             ; * JMK44
***************************************************************************
         IF CLIENT.MODE THEN
            CRT @(70,17):CLIENT.COST'R26,#9':
         END
         CRT @(70,18):QUOTE.AMT'R26,#9':
      END ELSE
         IF LOGISTICS THEN
            CRT @(70,10):GTOT.BENCH.AMT'R26,#9':
            CRT @(70,11):CONSULTING.AMT'R26,#9':
         END
         CRT @(70,13):GTOT.CONTR.AMT'R26,#9':
         IF IOT = "T" THEN
            TP.AMT.TAB<TP.CNT> = GTOT.CONTR.AMT
         END
      END
*
      RETURN
*******************************************************
PRINT.TP.TOTALS:
********************************************************
      IF PROCESS.MODE = 'Quote' THEN
         IF CLIENT.MODE THEN
            CRT @(70,17):CLIENT.COST'R26,#9':
         END
         CRT @(70,18):QUOTE.AMT'R26,#9':
      END ELSE
         IF LOGISTICS THEN
            CRT @(70,10):GTOT.BENCH.AMT'R26,#9':
            CRT @(70,11):CONSULTING.AMT'R26,#9':
         END
         CRT @(70,13):GTOT.CONTR.AMT'R26,#9':
      END
*
      RETURN
*
***************************************************
8900: * DETERMINE IF NEED TO GET ACCESSORIALS FROM FB.AUDIT.ACC
********************************************************
      AUDIT.ACC.ID=CARRIER.ID:'*':MISC.CODE:'*':CLIENT.ID:'*':ROUTE.ZIP
      READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
         AUDIT.ACC=1
      END
      IF AUDIT.ACC=0 THEN
         AUDIT.ACC.ID=CARRIER.ID:'*':MISC.CODE:'*':CLIENT.ID:'*ALL'
         READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
            AUDIT.ACC=1
         END
      END
      IF AUDIT.ACC=0 THEN
         AUDIT.ACC.ID=CARRIER.ID:'*':MISC.CODE:'*ALL*':ROUTE.ZIP
         READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
            AUDIT.ACC=1
         END
      END
      IF AUDIT.ACC=0 THEN
         AUDIT.ACC.ID=CARRIER.ID:'*':MISC.CODE:'*ALL*ALL'
         READ AUDIT.ACC.REC FROM F.AUDIT.ACC,AUDIT.ACC.ID THEN
            AUDIT.ACC=1
         END
      END
      IF AUDIT.ACC THEN
         LOCATE BILL.DATE IN AUDIT.ACC.REC<1> BY 'AR' SETTING EPOS THEN NULL ELSE EPOS-=1
         IF AUDIT.ACC.REC<1,EPOS> GE BILL.DATE THEN
            IF AUDIT.ACC.REC<2,EPOS> GE BILL.DATE OR AUDIT.ACC.REC<2,EPOS>='' THEN
               NULL
            END ELSE
               AUDIT.ACC=0
            END
         END
      END
      RETURN
********************************************************
8950: * CALCULATE THE ACCESSORIAL AMOUNT FROM FB.AUDIT.ACC FOR MISC.CHG ARRAY
********************************************************
      AUDIT.ACC=0
      GOSUB 8900
      IF AUDIT.ACC.REC<2,EPOS> > BILL.DATE OR AUDIT.ACC.REC<2,EPOS>='' THEN
         CONTR.TYPE=AUDIT.ACC.REC<3,EPOS>
         CONTR.RATE=AUDIT.ACC.REC<4,EPOS>
         CONTR.MIN=AUDIT.ACC.REC<5,EPOS>
         CONTR.MAX=AUDIT.ACC.REC<6,EPOS>
         CONTR.BASE=AUDIT.ACC.REC<7,EPOS>
         CONTR.FSC=AUDIT.ACC.REC<8,EPOS>
         CONTR.ACC=AUDIT.ACC.REC<9,EPOS>

         BEGIN CASE
            CASE CONTR.TYPE='P'
               CUR.CONTR.MISC.AMT=CONTR.RATE/100:'%'
            CASE CONTR.TYPE='C'
               CUR.CONTR.MISC.AMT=ICONV(SUM(CLASS.WGT<2>)*CONTR.RATE/100,'MR0')  ; * JMK48
               IF CONTR.MIN # "" THEN    ; * JMK48
                  IF CUR.CONTR.MISC.AMT < CONTR.MIN THEN     ; * JMK48
                     CUR.CONTR.MISC.AMT=CONTR.MIN  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
               IF CONTR.MAX # "" THEN    ; * JMK48
                  IF CUR.CONTR.MISC.AMT > CONTR.MAX THEN     ; * JMK48
                     CUR.CONTR.MISC.AMT=CONTR.MAX  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
            CASE CONTR.TYPE='F'
               CUR.CONTR.MISC.AMT=CONTR.RATE
            CASE CONTR.TYPE='A'
               CUR.CONTR.MISC.AMT='ASK'
            CASE 1
               CUR.CONTR.MISC.AMT=''
         END CASE

         BENCH.TYPE=AUDIT.ACC.REC<10,EPOS>
         BENCH.RATE=AUDIT.ACC.REC<11,EPOS>
         BENCH.MIN=AUDIT.ACC.REC<12,EPOS>
         BENCH.MAX=AUDIT.ACC.REC<13,EPOS>
         BENCH.BASE=AUDIT.ACC.REC<14,EPOS>
         BENCH.FSC=AUDIT.ACC.REC<15,EPOS>
         BENCH.ACC=AUDIT.ACC.REC<16,EPOS>

         BEGIN CASE
            CASE BENCH.TYPE='P'
               CUR.BENCH.MISC.AMT=BENCH.RATE/100:'%'
            CASE BENCH.TYPE='C'
               CUR.BENCH.MISC.AMT=ICONV(SUM(CLASS.WGT<2>)*BENCH.RATE/100,'MR0')  ; * JMK48
               IF BENCH.MIN # "" THEN    ; * JMK48
                  IF CUR.BENCH.MISC.AMT < BENCH.MIN THEN     ; * JMK48
                     CUR.BENCH.MISC.AMT=BENCH.MIN  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
               IF BENCH.MAX # "" THEN    ; * JMK48
                  IF CUR.BENCH.MISC.AMT > BENCH.MAX THEN     ; * JMK48
                     CUR.BENCH.MISC.AMT=BENCH.MAX  ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
            CASE BENCH.TYPE='F'
               CUR.BENCH.MISC.AMT=BENCH.RATE
            CASE BENCH.TYPE='A'
               CUR.BENCH.MISC.AMT='ASK'
            CASE 1
               CUR.BENCH.MISC.AMT=''
         END CASE
      END
      RETURN
********************************************************
8975: * DETAIL CALCULATION AFTER GETTING FREIGHT AND FSC AMOUNTS
********************************************************
      OVR.CONTR.MISC.CHG=''
      OVR.CONTR.MISC.CHG.DESC=''
      OVR.BENCH.MISC.CHG=''
      OVR.BENCH.MISC.CHG.DESC=''

      AUDIT.ACC=0
      GOSUB 8900
      CONTR.TYPE=AUDIT.ACC.REC<3,EPOS>
      CONTR.RATE=AUDIT.ACC.REC<4,EPOS>
      CONTR.MIN=AUDIT.ACC.REC<5,EPOS>
      CONTR.MAX=AUDIT.ACC.REC<6,EPOS>
      CONTR.BASE=AUDIT.ACC.REC<7,EPOS>
      CONTR.FSC=AUDIT.ACC.REC<8,EPOS>
      CONTR.ACC=AUDIT.ACC.REC<9,EPOS>

      BEGIN CASE
         CASE CONTR.TYPE='P'
            AUD.CONTR.AMT=TOT.CONTR.AMT
            IF CONTR.FSC='I' THEN AUD.CONTR.AMT+=CONTR.FSC.AMT
*            CUR.CONTR.MISC.CHG=ICONV(AUD.CONTR.AMT*CONTR.RATE/10000,'MR0')   NKH03
            CUR.CONTR.MISC.CHG = 0       ; * NKH03
            CUR.CONTR.MISC.CHG.DESC:=' (':CONTR.RATE'R26,':'%)'
         CASE CONTR.TYPE='C'
            CUR.CONTR.MISC.CHG=ICONV(TOT.WEIGHT*CONTR.RATE/100,'MR0')  ; * JMK48
            CUR.CONTR.MISC.CHG.DESC:=' (':CONTR.RATE'R26,':'CWT)'
         CASE CONTR.TYPE='F'
            CUR.CONTR.MISC.CHG=CONTR.RATE
         CASE CONTR.TYPE='A'
            CUR.CONTR.MISC.CHG='ASK'
         CASE 1
            CUR.CONTR.MISC.CHG=''
      END CASE

      IF CONTR.MIN # "" THEN             ; * JMK48
         IF CUR.CONTR.MISC.CHG < CONTR.MIN THEN    ; * JMK48
            OVR.CONTR.MISC.CHG=CUR.CONTR.MISC.CHG  ; * JMK48
            OVR.CONTR.MISC.CHG.DESC='MINIMUM'
            CUR.CONTR.MISC.CHG=CONTR.MIN           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
      IF CONTR.MAX # "" THEN             ; * JMK48
         IF CUR.CONTR.MISC.CHG > CONTR.MAX THEN    ; * JMK48
            OVR.CONTR.MISC.CHG=CUR.CONTR.MISC.CHG  ; * JMK48
            OVR.CONTR.MISC.CHG.DESC='MAXIMUM'
            CUR.CONTR.MISC.CHG=CONTR.MAX           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48

      BENCH.TYPE=AUDIT.ACC.REC<10,EPOS>
      BENCH.RATE=AUDIT.ACC.REC<11,EPOS>
      BENCH.MIN=AUDIT.ACC.REC<12,EPOS>
      BENCH.MAX=AUDIT.ACC.REC<13,EPOS>
      BENCH.BASE=AUDIT.ACC.REC<14,EPOS>
      BENCH.FSC=AUDIT.ACC.REC<15,EPOS>
      BENCH.ACC=AUDIT.ACC.REC<16,EPOS>

      BEGIN CASE
         CASE BENCH.TYPE='P'
            AUD.BENCH.AMT=TOT.BENCH.AMT
            IF BENCH.FSC='I' THEN AUD.BENCH.AMT+=BENCH.FSC.AMT
*            CUR.BENCH.MISC.CHG=ICONV(AUD.BENCH.AMT*BENCH.RATE/10000,'MR0')   ; * NKH03
            CUR.BENCH.MISC.CHG = 0       ; * NKH03
            CUR.BENCH.MISC.CHG.DESC:=' (':BENCH.RATE'R26,':'%)'
         CASE BENCH.TYPE='C'
            CUR.BENCH.MISC.CHG=ICONV(TOT.WEIGHT*BENCH.RATE/100,'MR0')  ; * JMK48
            CUR.BENCH.MISC.CHG.DESC:=' (':BENCH.RATE'R26,':'CWT)'
         CASE BENCH.TYPE='F'
            CUR.BENCH.MISC.CHG=BENCH.RATE
         CASE BENCH.TYPE='A'
            CUR.BENCH.MISC.CHG='ASK'
         CASE 1
            CUR.BENCH.MISC.CHG=''
      END CASE

      IF BENCH.MIN # "" THEN             ; * JMK48
         IF CUR.BENCH.MISC.CHG < BENCH.MIN THEN    ; * JMK48
            OVR.BENCH.MISC.CHG=CUR.BENCH.MISC.CHG  ; * JMK48
            OVR.BENCH.MISC.CHG.DESC='MINIMUM'
            CUR.BENCH.MISC.CHG=BENCH.MIN           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
      IF BENCH.MAX # "" THEN             ; * JMK48
         IF CUR.BENCH.MISC.CHG > BENCH.MAX THEN    ; * JMK48
            OVR.BENCH.MISC.CHG=CUR.BENCH.MISC.CHG  ; * JMK48
            OVR.BENCH.MISC.CHG.DESC='MAXIMUM'
            CUR.BENCH.MISC.CHG=BENCH.MAX           ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48

      RETURN

********************************************************
GET.ACC.CHARGES:
********************************************************
      STMT = \SSELECT FB.AUDIT.ACC WITH CARRIER = "\:CARRIER.ID:\" AND WITH CLIENT = "\:CLIENT.ID:\" OR WITH CARRIER = "\:CARRIER.ID:\" AND WITH CLIENT = "ALL"\
      EXECUTE STMT CAPTURING OUTPUT
      ACC.CNT = 0
*
      IF @SELECTED GT 0 THEN
         EOF = "N"
         LOOP
            READNEXT ACC.ID ELSE EOF = "Y"
         UNTIL EOF = "Y" DO
            W.ACC.CODE = FIELD(ACC.ID,"*",2)
            LOCATE W.ACC.CODE IN CHOICE.ARRAY SETTING POSA ELSE
               CHOICE.ARRAY<-1> = W.ACC.CODE
               ACC.CNT += 1
            END
         REPEAT
      END

      RETURN
*******************************************************
SETUP.MC.DISPLAY:* Display available misc charges/Assesorials for the table.  ; *NPR08
********************************************************
      NMC = DCOUNT(CHOICE.ARRAY,@AM)
      DISP.ARRAY = ''
      FOR IM = 1 TO NMC
         W.MISC.CHG.CD = CHOICE.ARRAY<IM>
         LOCATE W.MISC.CHG.CD IN LI.CODES<1> SETTING POSC THEN
            W.MISC.CHG.DESC=LI.CODES<2,POSC>
         END ELSE
            W.MISC.CHG.DESC='..'
         END
         DISP.ARRAY<IM> = W.MISC.CHG.CD "L#6" :" ": W.MISC.CHG.DESC[1,25]
      NEXT NMC

      RETURN
*******************************************************
DISP.MISC.CHARGES:* Display available misc charges/Assesorials for the table.  ; *NPR08
*******************************************************
      CRT @(0,18):STR("-",31):' Available codes ':STR("-",32)
      ROW.CNT = 0
      MLN = 19
      FOR LNX = 1 TO 4
         CRT @(0,MLN):MC.ATTR'L#3':' ':DISP.ARRAY<MC.ATTR>[1,33] "L#33"
         MC.ATTR += 1
         MLN += 1
      NEXT LNX

      MLN = 19
      FOR LNX = 1 TO 4

         IF LNX = 4 AND CHOICE.ARRAY<MC.ATTR+1> NE '' THEN
            CRT @(40,MLN):"'F' to see more codes"
         END ELSE
            CRT @(40,MLN):MC.ATTR'L#3':' ':DISP.ARRAY<MC.ATTR>[1,33] "L#33"
            MC.ATTR += 1
         END
         MLN += 1
      NEXT LNX

      RETURN
*******************************************************
CLEAR.MC.WINDOW:
*******************************************************
      FOR LN = 18 TO 22
         CRT @(0,LN):@(-4)
      NEXT LN
*
      RETURN
*******************************************************
GET.MISC.CHARGES:
*******************************************************
      PAGE = 1
      GOSUB DISP.MISC.CHARGES
      HELP="Code  OR line No. ''=End. 'B'=Back Pg. 'F'=Fwd Pg. 'X'=Back. 'EX'=Exit."
      CALL GEN.IN(73,23,'######','',Q,0,6,'','',0,73,23,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='B'
            PAGE=PAGE-1
            IF PAGE=0 THEN PAGE=1
            GOSUB DISP.MISC.CHARGES
         CASE QI='F'
            TST.PAGE=PAGE+1
            NXT.LN=(TST.PAGE*5)-4
            IF DISP.ARRAY<NXT.LN> = '' THEN
               CALL ELINE("No more pages")
               GOSUB DISP.MISC.CHARGES
               GOTO GET.MISC.CHARGES
            END ELSE
               PAGE=PAGE+1
               GOSUB DISP.MISC.CHARGES
            END
         CASE QI=''
            GOSUB CLEAR.MC.WINDOW
            DATA QI
            RETURN
         CASE QI='X'
            GOSUB CLEAR.MC.WINDOW
            DATA QI
            RETURN
         CASE QI='EX'
            STOP
         CASE NUM(QI)
            IF QI GT NMC THEN
               CALL ELINE("Invalid line number")
               GOTO GET.MISC.CHARGES
            END ELSE
               MC.MODE='EDIT'
               DATA CHOICE.ARRAY<QI>     ; * Send actual code back - hopefully
               RETURN
            END
         CASE 1
            DATA QI
            RETURN
      END CASE
      GOTO GET.MISC.CHARGES

      RETURN
*******************************************************************************
BUILD.SCREEN:* NKH03
*******************************************************************************
      CONTR.LINE=LINE
      BENCH.LINE=LINE
      IF OVR.CONTR.MISC.CHG+0#0 OR OVR.BENCH.MISC.CHG+0#0 THEN
         IF OVR.CONTR.MISC.CHG+0#0 THEN
            WHY:=@(03,CONTR.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.CONTR.MISC.CHG.DESC
            WHY:=@(35,CONTR.LINE):OVR.CONTR.MISC.CHG'R26#8'
            CONTR.LINE+=1
         END
         IF LOGISTICS THEN
            IF OVR.BENCH.MISC.CHG+0#0 THEN
               WHY:=@(45,BENCH.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.BENCH.MISC.CHG.DESC
               WHY:=@(73,BENCH.LINE):OVR.BENCH.MISC.CHG'R26#7'
               BENCH.LINE+=1
            END
         END
      END
      WHY:=@(03,CONTR.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.CONTR.MISC.CHG.DESC
      IF OVR.CONTR.MISC.CHG.DESC#'' THEN           ; * JMK63
         WHY:=@(26,CONTR.LINE):" ":OVR.CONTR.MISC.CHG.DESC   ; * JMK63
      END                                ; * JMK63
      WHY:=@(35,CONTR.LINE):CUR.CONTR.MISC.CHG'R26#8'
      IF LOGISTICS THEN
         WHY:=@(45,BENCH.LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.BENCH.MISC.CHG.DESC
         IF OVR.BENCH.MISC.CHG.DESC#'' THEN        ; * JMK63
            WHY:=@(65,BENCH.LINE):" ":OVR.BENCH.MISC.CHG.DESC          ; * JMK63
         END                             ; * JMK63
         WHY:=@(73,BENCH.LINE):CUR.BENCH.MISC.CHG'R26#7'
      END
      IF CONTR.LINE > LINE THEN LINE=CONTR.LINE
      IF BENCH.LINE > LINE THEN LINE=BENCH.LINE

      RETURN                             ; * NKH03

* Begin NKH03
*******************************************************************************
BUILD.SAVE.LINE:
*******************************************************************************
      IF CONTR.TYPE = 'P' THEN CUR.CONTR.MISC.CHG = 0
      SAVE.CONTR<1,-1> = CUR.MISC.CHG.CODE
      SAVE.CONTR<2,-1> = CUR.CONTR.MISC.CHG.DESC
      SAVE.CONTR<3,-1> = CONTR.RATE
      SAVE.CONTR<4,-1> = CONTR.ACC
      SAVE.CONTR<5,-1> = CONTR.FSC
      SAVE.CONTR<7,-1> = CONTR.TYPE
      SAVE.CONTR<8,-1> = CUR.CONTR.MISC.CHG
      SAVE.CONTR<9,-1> = CONTR.MIN

      IF BENCH.TYPE = 'P' THEN CUR.BENCH.MISC.CHG = 0
      SAVE.BENCH<1,-1> = CUR.MISC.CHG.CODE
      SAVE.BENCH<2,-1> = CUR.BENCH.MISC.CHG.DESC
      SAVE.BENCH<3,-1> = BENCH.RATE
      SAVE.BENCH<4,-1> = BENCH.ACC
      SAVE.BENCH<5,-1> = BENCH.FSC
      SAVE.BENCH<7,-1> = BENCH.TYPE
      SAVE.BENCH<8,-1> = CUR.BENCH.MISC.CHG
      SAVE.BENCH<9,-1> = BENCH.MIN

      LAST.LINE = LINE-1
      SAVED.LINES = 1

      RETURN

* End NKH03

*******************************************************
9000: *** Exit Program
*******************************************************
* Begin GRB01
      VIN1=''
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "E"
****      CALL PROGTRACK(VIN1,VOUT1)
      * End GRB01
      STOP
