***********************************************************************
* Program name : BATCH.IMG.UPDT
* Author       : Greg Bino
* Date written : 01-10-2019
* Library      : FBBP
* COPYRIGHT (C) 2019 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* SEND IMAGE UPDATE FOR LIST OF IMAGE NUMBERS
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 08:08:59 on 06/01/2022.
*
* Start modification history
* Mod 00 01-10-19, grb, 21092.0000  New program
* 02/15/21 : NKH01 : ACCU-1133 Added server checking for dev
* 06/01/22 : NKH02 : ACCU-1753 Added list option for users
* End modification history
*
************************************************************************
*
* Initialize variables
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE UDO.H

      CALL GET.USER(USER)                ; * NKH02

      EMAIL.RECIP = ''                   ; * NKH02
      IMAGE.COUNT = 0                    ; * NKH02
      STATUS = 0
      KEYER = "BATCH"
      RESP.CNT=1
      RESP = ''
      VOUT=''
      TIME.LINE=''
      ST.TIME = TIME()
      TIME.LINE<1,1,1>=TIME()            ; * start time
      PROMPT ''
      TIMEOUT = 3000
      PROG.NAME='BATCH.IMG.UPDT'
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * NKH01
      SERVER.NAME=SVR.VOUT<1>                      ; * NKH01            

      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'BATCH.IMG.UPDT' ; UPL.VOUT = ''
      DUP.CNT=0
      ***    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
      * Begin NKH01
      OPEN '','OPERATOR' TO F.OP ELSE CALL OPEN.ABORT("OPERATOR",PROG.NAME)      ; * GRB01
      READV OP.FLG FROM F.OP,USER,81 ELSE
         OP.FLG = "N"
      END
      IF OP.FLG = "Y" THEN
      END ELSE
         CALL ELINE('Authorized Access is Required.')
         GO PROGRAM.END
      END
      * End NKH01

      OPEN 'CONTROL' TO FILE.CNTL ELSE
         CALL ELINE('UNABLE TO OPEN CONTROL FILE')
         RETURN
      END
*      OPEN 'GRB' TO F.GRB ELSE
*         CALL ELINE('UNABLE TO OPEN GRB FILE')
*         RETURN
*      END
      OPEN "CLEAN.UP" TO F.CLEAN ELSE
         CALL ELINE('UNABLE TO OPEN CLEAN.UP FILE')
      END
      * Begin NKH01
      OPEN '','BILLDATA.':USER TO F.BILLDATA ELSE
         CALL ELINE(USER:" is not a folder in U:\Billdata. Add the folder and try again")
         CALL ELINE("CALL NETWORK ADMINISTRATOR!")
         GOTO PROGRAM.END
      END   
      OPEN '','&SAVEDLISTS&' TO F.SL ELSE 
         CALL ELINE('UNABLE TO OPEN &SAVEDLISTS&')
         CALL ELINE("CALL NETWORK ADMINISTRATOR!")         
         STOP
      END   
      * End NKH01
      READ XMLPARAMS FROM FILE.CNTL,"CLIENT.OCR" THEN
         URL = XMLPARAMS<1>
         SERVER = XMLPARAMS<2>
         SOAPACTION = XMLPARAMS<3>
         LOGGING = XMLPARAMS<4>          ; * Y/N
         LOGFILE = XMLPARAMS<5>
         EMAIL.RECIP = XMLPARAMS<6>
         TEST.FLG = XMLPARAMS<7>
      END ELSE
         LOGFILE="BATCH.UPDT"
         LOGGING = "N"
*         EMAIL.RECIP = 'gbino@afs.net'
         TEST.FLG = @FALSE
      END

      IF LOGGING = "Y" OR LOGGING = 1 THEN
         LOGGING = @TRUE
      END ELSE
         LOGGING = @FALSE
      END
      IF LOGGING THEN
         STAT = PROTOCOLLOGGING(LOGFILE, "ON", 10)
      END

      EMAIL.OUT=''
      EMAIL.OUT<1,-1>='HelpDesk@afs.net'
      EMAIL.OUT<2,-1>= EMAIL.RECIP
      EMAIL.OUT<4>='FBBP_BATCH.IMG.UPDT@afs.net'
      EMAIL.OUT<5>='Error while trying to access BATCH IMAGE UPDATE Web-Service .'
      
MAIN.LOGIC:
      GOSUB PRINT.INPUT.SCREEN      ; * NKH02 
      GOSUB CREATE.LIST             ; * NKH02     
      
      EXECUTE "GET-LIST BATCH.IMAGE"
      EOJ = 0
      LOOP
         READNEXT IMAGE.NO ELSE EOJ = 1
      UNTIL EOJ DO
         IF SERVER.NAME = 'AFS' THEN   ; * NKH01                     
            URL = 'https://imagingws.afs.net/images/update?imageKey=':IMAGE.NO:"&keyerName=":KEYER
         END ELSE                      ; * NKH01
            URL = 'https://imagingws.qa.afs.net/images/update?imageKey=':IMAGE.NO:"&keyerName=":KEYER    ; * NKH01
         END                           ; * NKH01                           
      
         GOSUB SEND.REST.REQUEST
         BEGIN CASE
            CASE TRIM(RESTDATA) = 'Failed to Update'
               FAILED = 1
            CASE TRIM(RESTDATA) = 'Updated Successfully'
               FAILED = 0
            CASE TRIM(RESTDATA)[1,24]= 'Error: This image (key #'
               FAILED = 0
            CASE 1
               FAILED = 1
         END CASE

         IF FAILED THEN
            CRT @(0,20):" Error updating image ":RESTDATA
            INPUT XX
         END
      REPEAT

      TIME.LINE<1,1,1>=TIME()            ; * finish time

9999: * THE END
      GOTO PROGRAM.END        ; * NKH01
      
***********************************************************************
SEND.REST.REQUEST:
***********************************************************************
      METHOD="GET"
*
      STAT = SETHTTPDEFAULT("VERSION", "1.1")
      STAT = CREATESECURITYCONTEXT(CTX, "TLSv1.2")
      STAT = CREATESECUREREQUEST(URL, METHOD, RESTGET,CTX)
      STAT = SETREQUESTHEADER(RESTGET, "Content-Type", "application/json;charset=utf-8")
      STAT = SUBMITREQUEST(RESTGET, 30000, "", HEADER, RESTDATA, HTTPSTATUS)

      RETURN

****************************************************
ERR.HANDLER:
*****************************************************

      ERRCODE = "" ; ERRMSG = ""
      S = UDOGetLastError(ERRCODE, ERRMSG)
      ERROR = "UDO ERROR: (":ERRCODE:") ":ERRMSG
      VOUT<1> =ERROR

      RETURN

************************************************************************
REPORT.INTERNAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()

      EMAIL.OUT<6, -1> = 'URL = ':URL
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'ERROR = ':ERROR
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '

      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
****      VOUT<1> = "ERROR"
      VOUT<1> = 0
      RETURN
************************************************************************
REPORT.FATAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()
      EMAIL.OUT<1>=EMAIL.RECIP
*      EMAIL.OUT<1,-1> = 'gbino@afs.net'
      EMAIL.OUT<1,-1> = 'dfriend@afs.net'
      EMAIL.OUT<1,-1> = 'nmeddaugh@afs.net'
      FATAL.ERROR.SUBJ = 'REST REQUEST ERROR'
      EMAIL.OUT<5>=FATAL.ERROR.SUBJ
      EMAIL.OUT<6,-1> = 'URL = ':URL
      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
      IDATE=DATE()
      ITIME=TIME()
      TIME.BLOCK=INT(ITIME/600)
      *  VOUT<1> = "ERROR"
      RETURN

* Begin NKH01
************************************************************************
PRINT.INPUT.SCREEN:
************************************************************************      
      CRT @(0,03):@(-3):
      CRT @(0,05):'Instructions for use BEFORE Continuing:'
      CRT @(0,07):'1. Create a spreadsheet with images in column A'
      CRT @(0,08):"2. In the Excel Menu Bar, CLICK File, CLICK Save As, 'Change Save as type:' to:"
      CRT @(0,09):'   Text (Tab Delimited)(*.txt).'
      CRT @(0,10):'3. Name the file "U:\':USER:'\{FileName}.TXT" (Ex."U:\':USER:'\IMAGES.TXT").'

100:  HELP='Enter the File Name to process or [EX]it'
      CALL GEN.IN(0,3,'Enter File Name #########################','',Q,0,25,'','',1,-25,3,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' ! QI='EX' ! QI='X'
            GOTO PROGRAM.END
         CASE 1
            RAW.ID=QI
      END CASE
      
      RETURN

************************************************************************
CREATE.LIST:
************************************************************************      
      READ RAW.DATA FROM F.BILLDATA,RAW.ID ELSE
         CALL ELINE('U:\':USER:'\':RAW.ID:' is not on file.  Please re-enter.')
         GOTO 100
      END

      RAW.DATA=CHANGE(RAW.DATA,CHAR(9),@AM)        ; * Replace Tabs with Values
      IMAGE.COUNT = DCOUNT(RAW.DATA,@AM)
      WRITE RAW.DATA ON F.SL, 'BATCH.IMAGE'

      RETURN
      
************************************************************************
PROGRAM.END:
************************************************************************     
      IF LOGGING THEN
         LOG.RET = PROTOCOLLOGGING(LOGFILE,"OFF",10)
      END
*      WRITE RESP ON F.GRB,"OCR.BATCH.IMG.UPDT"

      CRT @(0,03):@(-3):
      CRT @(0,05):IMAGE.COUNT:' Images updated'
      CALL ELINE(' ')            

* End NKH01
   END
