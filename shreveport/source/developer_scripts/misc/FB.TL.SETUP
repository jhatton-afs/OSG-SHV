*******************************************************
* Program name : FB.TL.SETUP
* Author       : TAMI SEAGO
* Date written : UNKNOWN
* Library      : 11/05/99
* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* TL Auto Audit Setup Program
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 09:22:51 on 04/03/2019.
*
* Start modification history
* 062104 - JMK01 - ADD ACCESS FOR MPACE
* 033105 - JMK02 - ADD CLIENT AND CARRIER FOR ARTCO BELL AND CRETE
* 120106 - JMK03 - ADD ACCESS FOR MKERBOW
* 051309 - NPR01 - T082721 Fixed issue where contract amount was being updated with a * when changing flag from * to 'N'
* 051509 - NPR02 - T082528 Added option to enter a Management fee.
* 111111 - JMK04 - Adjust video attributes for Accuterm and future use
* 040319 - NKH01 - ACCU-316 Modified CREATE-FILE file sizes
* End modification history
*
*******************************************************
      $INCLUDE PROG.ADMIN INC_OPTIONS
      $INCLUDE FILE.DEFS INC_CLIENTS
      $INCLUDE FILE.DEFS INC_FB.AUDIT
      $INCLUDE FILE.DEFS INC_ADDS60.CODES     ;* These require specific PROCOMM settings!

**************************************************
*                Local equates
**************************************************
      TERM.TYPE=SYSTEM(7)                ; * JMK04
      BEGIN CASE                         ; * JMK04
         CASE TERM.TYPE='REGENT60'       ; * JMK04
            RED.ON = TERM.ESC.SEQ:CHAR(TERM.BLINK)
            REV.RED.ON = TERM.ESC.SEQ:CHAR(TERM.REV+TERM.BLINK)
            REV.GRN.ON = TERM.ESC.SEQ:CHAR(TERM.REV)
            YEL.ON = TERM.ESC.SEQ:CHAR(TERM.REV+TERM.DIM)
            BLU.ON = TERM.ESC.SEQ:CHAR(TERM.REV+TERM.BLINK)
            TERM.NORM = TERM.ESC.SEQ:CHAR(TERM.NORMAL)
            PRT.SCN = CHAR(27):'P'
         CASE 1                          ; * JMK04
            RED.ON = @(-5)               ; * JMK04
            REV.RED.ON = @(-13)@(-5)     ; * JMK04
            REV.GRN.ON = @(-13)          ; * JMK04
            YEL.ON = @(-13):@(-11)       ; * JMK04
            BLU.ON = @(-13):@(-5)        ; * JMK04
            TERM.NORM = @(-6):@(-12):@(-14)        ; * JMK04
            PRT.SCN = CHAR(27):']'       ; * JMK04
      END CASE                           ; * JMK04
      EQU TRUE TO 1
      EQU FALSE TO 0
      EQU WRITE.DATA TO TRUE             ; * TRUE = Write data to appropriate files
      ; * FALSE = Don't write data.. In Test Mode
      EQU RESTRICT.ACCESS TO TRUE
      EQU PCMILLER.READ.FILE TO 1        ; * Used in Attr 4
      EQU TLALL TO "TLALL"               ; * Make sure to make changes in FB.AUDIT.1
      EQU LTLALL TO "LTLALL"             ; * Make sure to make changes in FB.AUDIT.1
      EQU YES TO "Y"
      EQU NO TO "N"
      EQU PARTIAL TO "*"
      EQU CLIENT.DISABLE.FILE TO FBA.DISABLE       ; * Make sure to make changes in FB.AUDIT.1
***************************************************
* Highlighting Effects
***************************************************
      EQU REVON TO REV.GRN.ON            ; * Reverse Text ON
      EQU REVOFF TO TERM.NORM            ; * Reverse Text OFF
      EQU PRINT.SCREEN TO PRT.SCN
      EQU DISABLED.MSG TO '[':REVON:'DISABLED':REVOFF:']'
      EQU ENABLED.MSG TO '[ENABLED ]'

      GOSUB INIT.VARIABLES
      GOSUB INIT.SCREEN
**********************************************************************
      BEGIN CASE
*
* Authorized users
*
         CASE USER.NAME = 'BRIAN'        ; * JMK04
         CASE USER.NAME = 'KAREN'        ; * JMK04
         CASE USER.NAME = 'OWEN'
         CASE USER.NAME = 'BRINP'        ; * JMK04

         CASE USER.NAME = 'DAVID'
         CASE USER.NAME = 'MKERBOW'      ; * JMK03

*        CASE USER.NAME = 'SCOTT'
*        CASE USER.NAME = 'CHADM'
*        CASE USER.NAME = 'MJENKINS'
         CASE USER.NAME = 'SSHAFER'        ; * MATT 12/15/05
*        CASE USER.NAME = 'MSTATOS'          ; * Ticket 082238. DRF 10/02/08
         CASE USER.NAME = 'TBURNS'            ; * Ticket 100065. NPR 01/20/10
         CASE USER.NAME = 'AHICKS'        ; * TICKET 3092 - DRF 07/06/12
         CASE USER.NAME = 'NKELLY'        ; * TICKET 5817 - DRF 05/03/13
*        CASE USER.NAME = 'WCARTOLANO'
*        CASE USER.NAME = 'LSMITH'
*        CASE USER.NAME = 'JAMES'
*        CASE USER.NAME = 'NPRATT'       ; * NPR99
*
* Restrict everyone else
*
         CASE 1
            SUBJ="Unauthorized TL OLA Access Attempt by ":USER.NAME
            TEXT=''
            TEXT<1,-1>=USER.NAME:' ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):' ':PROG.NAME
            TEXT<1,-1>='User ':USER.NAME:' tried to access TL Client Audit Setup'
            TEXT<1,-1>="(This user's name was not included in the program to allow access)"
            MVIN=''
            MVIN<1>='oweninfo@afs.net':@VM:'SMatthews@afs.net'
            MVIN<2>=''
            MVIN<4>='AFS'
            MVIN<5>=SUBJ
            MVIN<6>=TEXT
            CALL SENDMAIL(MVIN,MVOUT)

            CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
            CALL FB.PRINT.CENT(1,80,14,'Access Denied! See CHRIS for Access')
            CALL ELINE('')
            STOP
      END CASE
**********************************************************************
*    IF RESTRICT.ACCESS THEN
*      IF INDEX('DAVID-OWEN-SUSAN-HEATHERB', USER.NAME,1) ELSE
*        CALL FB.PRINT.CENT(1,80,10,'YOU DO NOT HAVE ACCESS TO THIS APPLICATION!')
*        CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
*        CALL ELINE("ACCESS DENIED!")
*        STOP
*      END
*    END
***********************************************************
*             Open general files
***********************************************************
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN 'DICT','CLIENTS' TO F.DICT.CLIENTS ELSE
         CALL OPEN.ABORT("DICT CLIENTS",PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT("CARRIERS",PROG.NAME)
      END
      OPEN 'DICT','CARRIERS' TO F.DICT ELSE
         CALL OPEN.ABORT("DICT CARRIERS",PROG.NAME)
      END
      OPEN 'FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT("FB.TABLES",PROG.NAME)
      END
      READ AVAL.EQUIP.TYPES FROM F.TABLES,"TL.EQUIPMENT.TYPES" ELSE
         AVAL.EQUIP.TYPES = ''
      END
      READ AVAL.ACC.CHRG FROM F.TABLES,"LI.CODES" ELSE
         AVAL.ACC.CHRG = ''
      END
      OPEN 'PCIN' TO F.PCIN ELSE
         CALL OPEN.ABORT("PCIN",PROG.NAME)
      END
      OPEN 'PCOUT' TO F.PCOUT ELSE
         CALL OPEN.ABORT("PCOUT",PROG.NAME)
      END
      OPEN 'FB.MILEAGE' TO F.MILEAGE ELSE
         CALL OPEN.ABORT("FB.MILEAGE", PROG.NAME)
      END
      GOSUB GET.STATE.ZIP.INFO
      CALL CHANNEL(CH.NUM)

***********************************************************************
* Main processing
***********************************************************************
      CRT @(15, 6):'        XXX       XXXXXXXX   xXXXXXXx   '
      CRT @(15, 7):'      xXXXXX      XXXXXXX   XXXXXXXXXX  '
      CRT @(15, 8):'     XXX  XX     xXX       XXXX     XXX '
      CRT @(15, 9):'    XXX   XX     XXXXXXX    XXXXXx      '
      CRT @(15,10):'   xXXXXXXXX     XXXXXX       XXXXXXx   '
      CRT @(15,11):'   XXXXXXXXXx   xXX       XXx     XXXX  '
      CRT @(15,12):'  XXX     XXX   XXX        XXXXXXXXXX   '
      CRT @(15,13):' xXX       XXX xXX          XXXXXXXX    '
      CRT @(15,15):' L  O  G  I  S  T  I  C  S     L  L  C  ':
      SLEEP 1
      GOSUB DISPLAY.SCREEN
      GOSUB ENTER.CLIENT

***********************************************************************
* Handle Menu Selections
***********************************************************************
START.SEL:***

      IF NEW.CLIENT OR NEW.CARRIER OR NEW.EQUIP THEN
         IF NEW.CLIENT THEN
            GOSUB ENTER.CARRIER
         END
         GOSUB LOAD.VARIABLES
         NEW.CLIENT = FALSE
         NEW.CARRIER = FALSE
         NEW.EQUIP = FALSE
      END ELSE
         IF DATA.CHANGED OR NEW.DATE THEN
            GOSUB LOAD.VARIABLES
            DATA.CHANGED = FALSE
         END
      END
      GOSUB DISPLAY.SCREEN
      GOSUB DISPLAY.DATA

      ORG.TL.AUDIT.REC = TL.AUDIT.REC
      CRT @(0,22):'Enter Selection Number :'
      HELP = "OPTIONS: #=Menu Option [R]edraw Screen [X]=Exit Program"
      MASK = '#'
      CALL GEN.IN(24,22,MASK,'',Q,0,6,'','',2,24,22,1,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = ''
            GOSUB UPDATE.SAVE.INFO
            STOP
         CASE QI = 'R'
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
         CASE QI = 'X' OR QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO START.SEL
         CASE NUM(QI) AND QI<=NUM.OPTIONS AND QI>0
            BEGIN CASE
               CASE QI = 1
                  IF CLIENT.ID # '' THEN GOSUB UPDATE.SAVE.INFO
                  GOSUB INIT.VARIABLES
                  GOSUB DISPLAY.SCREEN
                  GOSUB ENTER.CLIENT
               CASE QI = 2
                  IF CARRIER.ID # '' THEN GOSUB UPDATE.SAVE.INFO
                  GOSUB ENTER.CARRIER
               CASE QI = 3
                  IF EQUIP.TYPE # '' THEN GOSUB UPDATE.SAVE.INFO
                  GOSUB ENTER.EQUIP.TYPE
               CASE QI = 4
                  IF ROUTE.ZIP # '' THEN GOSUB UPDATE.SAVE.INFO
                  GOSUB ENTER.ROUTE.ZIP
               CASE QI = 5
                  IF ROUTE.ZIP # '' THEN
                     GOSUB ENTER.SUB.ZIP
                  END ELSE
                     CALL ELINE('MUST ENTER ROUTE ZIP FIRST')
                     GO START.SEL
                  END
               CASE QI = 6
                  IF BEG.EFF.DATE # '' THEN GOSUB UPDATE.SAVE.INFO
                  IF ROUTE.ZIP # '' THEN
                     GOSUB ENTER.EFF.DATE
                  END ELSE
                     CALL ELINE('MUST SELECT A ROUTING ZIP FIRST')
                     GO START.SEL
                  END
                  IF NEW.BEG.EFF.DATE NE "0" THEN BEG.EFF.DATE = NEW.BEG.EFF.DATE
                  IF NEW.END.EFF.DATE NE "0" THEN END.EFF.DATE = NEW.END.EFF.DATE
               CASE QI = 7
                  IF ROUTE.ZIP = '' OR BEG.EFF.DATE = '' THEN
                     CALL ELINE('YOU MUST SET UP A ROUTE ZIP AND EFFECTIVE DATES FIRST')
                     GO START.SEL
                  END
                  IF AZIPS.IN.REC<1>='' THEN
                     YN.MSG = 'Inbound Shipping has not been setup! Do you wish to set it up now? '
                     YN.MASK = 'N '
                     GOSUB ASK.Y.OR.N
                     IF YN.ANSWER = 'Y' THEN
                        AZIPS.IN.REC<1> = FBA.DISABLE
                     END ELSE
                        GO START.SEL
                     END
                  END
                  AZIPS.REC = AZIPS.IN.REC
                  ZIP.VAR=ROUTE.ZIP
                  CALL FB.READ.ZIP(ZIP.VAR, DEST.CITY, DEST.STATE)
                  TEMP = ROUTE.ZIP:' ':DEST.CITY:', ':DEST.STATE
                  TABLE.HEADING=TEMP'L#25'
                  TABLE.HEADING:=' Valid Shipping Points - INBOUND '
                  PRINT.TABLE.HEADING = ' Valid Shipping Points - INBOUND '
                  TABLE.HEADING:='    Eff Date ':BEG.EFF.DATE'D2/'
                  IF AZIPS.IN.REC<6>#'' THEN
                     NUM.OF.ITEM=DCOUNT(AZIPS.IN.REC<6>,@VM)
                     FOOTER="Last Updated by ":AZIPS.IN.REC<6,NUM.OF.ITEM>'MCT':" On ":AZIPS.IN.REC<7,NUM.OF.ITEM>'D2/':" At ":OCONV(AZIPS.IN.REC<8,NUM.OF.ITEM>,'MTHS')
                  END ELSE
                     FOOTER=''
                  END
                  BEGIN CASE
                     CASE AZIPS.IN.REC = ''
                        PRINT.TABLE.STATUS = 'Not setup'
                     CASE AZIPS.IN.REC<1> = FBA.ENABLE
                        PRINT.TABLE.STATUS = 'Enabled'
                     CASE 1
                        PRINT.TABLE.STATUS = 'Disabled'
                  END CASE

                  DSP.NUM.LINES = NUM.STATES
                  DSP.PAGE = 1
                  GOSUB ENTER.SHIPPING.POINTS
                  AZIPS.IN.REC = AZIPS.REC
                  GOSUB UPDATE.SAVE.INFO

               CASE QI = 8
                  IF ROUTE.ZIP = '' OR BEG.EFF.DATE = '' THEN
                     CALL ELINE('YOU MUST SET UP A ROUTE ZIP AND EFFECTIVE DATES FIRST')
                     GO START.SEL
                  END
                  IF AZIPS.OUT.REC<1>='' THEN
                     YN.MSG = 'Outbound Shipping has not been setup! Do you wish to set it up now? '
                     YN.MASK = 'N '
                     GOSUB ASK.Y.OR.N
                     IF YN.ANSWER = 'Y' THEN
                        AZIPS.OUT.REC<1> = FBA.DISABLE
                     END ELSE
                        GO START.SEL
                     END

                  END
                  AZIPS.REC = AZIPS.OUT.REC
                  ZIP.VAR=ROUTE.ZIP
                  CALL FB.READ.ZIP(ZIP.VAR, DEST.CITY, DEST.STATE)
                  TEMP = ROUTE.ZIP:' ':DEST.CITY:', ':DEST.STATE
                  TABLE.HEADING=TEMP'L#25'
                  TABLE.HEADING:=' Valid Shipping Points - OUTBOUND '
                  PRINT.TABLE.HEADING = ' Valid Shipping Points - OUTBOUND '
                  TABLE.HEADING:='    Eff Date ':BEG.EFF.DATE'D2/'
                  IF AZIPS.OUT.REC<6>#'' THEN
                     NUM.OF.ITEM=DCOUNT(AZIPS.OUT.REC<6>,@VM)
                     FOOTER="Last Updated by ":AZIPS.OUT.REC<6,NUM.OF.ITEM>'MCT':" On ":AZIPS.OUT.REC<7,NUM.OF.ITEM>'D2/':" At ":OCONV(AZIPS.OUT.REC<8,NUM.OF.ITEM>,'MTHS')
                  END ELSE
                     FOOTER=''
                  END
                  BEGIN CASE
                     CASE AZIPS.OUT.REC = ''
                        PRINT.TABLE.STATUS = 'Not setup'
                     CASE AZIPS.OUT.REC<1> = FBA.ENABLE
                        PRINT.TABLE.STATUS = 'Enabled'
                     CASE 1
                        PRINT.TABLE.STATUS = 'Disabled'
                  END CASE

                  DSP.NUM.LINES = NUM.STATES
                  DSP.PAGE = 1
                  GOSUB ENTER.SHIPPING.POINTS
                  AZIPS.OUT.REC = AZIPS.REC
                  GOSUB UPDATE.SAVE.INFO

               CASE QI = 9
                  IF ROUTE.ZIP = '' OR BEG.EFF.DATE = '' THEN
                     CALL ELINE('YOU MUST SET UP A ROUTE ZIP AND EFFECTIVE DATES FIRST')
                     GO START.SEL
                  END
                  GOSUB ENTER.MILEAGE.INFO
               CASE QI = 10
                  GOSUB ENTER.POINT.TO.POINTS
               CASE QI = 11
                  IF ROUTE.ZIP = '' OR BEG.EFF.DATE = '' THEN
                     CALL ELINE('YOU MUST SET UP A ROUTE ZIP AND EFFECTIVE DATES FIRST')
                     GO START.SEL
                  END
                  GOSUB ENTER.ACC.CHRGS
               CASE QI = 12
                  GOSUB ENTER.MGMT.FEE                      ;* NPR02
               CASE QI = 13
                  IF CLIENT.ENABLED = FBA.DISABLE THEN
                     CLIENT.ENABLED = FBA.ENABLE
                     DELETE F.AUDIT,CLIENT.DISABLE.FILE
                  END ELSE
                     CLIENT.ENABLED = FBA.DISABLE
*--------------------------------------------------------------------------
* DISABLE.CLIENT:
*  Any changes to this routine should also be made in FB.AUDIT.1
*--------------------------------------------------------------------------
                     TEMP = ''
                     TEMP<1> = FBA.DISABLE
                     TEMP<2> = 'REMOVE THIS FILE TO ENABLE THE CLIENT'
                     WRITE TEMP ON F.AUDIT,CLIENT.DISABLE.FILE
                  END
               CASE QI = 14
                  IF CARRIER.ENABLED = FBA.DISABLE THEN
                     CARRIER.ENABLED = FBA.ENABLE
                  END ELSE
                     CARRIER.ENABLED = FBA.DISABLE
                  END
                  TL.AUDIT.REC<FBA.CARRIER.STATUS> = CARRIER.ENABLED
               CASE QI = 15
                  IF EQUIP.TYPE.ENABLED = FBA.DISABLE THEN
                     EQUIP.TYPE.ENABLED = FBA.ENABLE
                  END ELSE
                     EQUIP.TYPE.ENABLED = FBA.DISABLE
                  END
                  TL.AUDIT.REC<FBA.EQUIP.STATUS> = EQUIP.TYPE.ENABLED
               CASE QI = 16
                  IF ROUTE.ZIP.ENABLED = FBA.DISABLE THEN
                     ROUTE.ZIP.ENABLED = FBA.ENABLE
                  END ELSE
                     ROUTE.ZIP.ENABLED = FBA.DISABLE
                  END
*DF       TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS> = ROUTE.ZIP.ENABLED
                  TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,ROUTE.ZIP.POS> = ROUTE.ZIP.ENABLED
               CASE QI = 17
                  IF BEG.EFF.DATE = '' THEN
                     CALL ELINE('YOU MUST SET UP EFFECTIVE DATES')
                     GO START.SEL
                  END
                  IF EFF.DATE.ENABLED = FBA.DISABLE THEN
                     EFF.DATE.ENABLED = FBA.ENABLE
                  END ELSE
                     EFF.DATE.ENABLED = FBA.DISABLE
                  END
                  TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,EFF.DATE.POS> = EFF.DATE.ENABLED
               CASE QI = 18
                  IF ROUTE.ZIP = '' OR BEG.EFF.DATE = '' THEN
                     CALL ELINE('YOU MUST SET UP A ROUTE ZIP AND EFFECTIVE DATES FIRST')
                     GO START.SEL
                  END
                  IF IN.ZIP.ENABLED = FBA.DISABLE THEN
                     IN.ZIP.ENABLED = FBA.ENABLE
                  END ELSE
                     IN.ZIP.ENABLED = FBA.DISABLE
                  END
               CASE QI = 19
                  IF ROUTE.ZIP = '' OR BEG.EFF.DATE = '' THEN
                     CALL ELINE('YOU MUST SET UP A ROUTE ZIP AND EFFECTIVE DATES FIRST')
                     GO START.SEL
                  END
                  IF OUT.ZIP.ENABLED = FBA.DISABLE THEN
                     OUT.ZIP.ENABLED = FBA.ENABLE
                  END ELSE
                     OUT.ZIP.ENABLED = FBA.DISABLE
                  END
            END CASE
      END CASE
      IF TL.AUDIT.REC # ORG.TL.AUDIT.REC THEN GOSUB UPDATE.SAVE.INFO
      GO START.SEL

*----------------------------------------------------------------------
* Client Routines
*----------------------------------------------------------------------
***********************************************************************
ENTER.CLIENT:***
***********************************************************************
      HELP='Enter the client number - Name for Search - [EX]it'
      CALL GEN.IN(24,3,'#####','',Q,0,20,'','',0,-5,3,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            STOP
         CASE QI='EX' OR QI='X'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.CLIENT
         CASE NUM(QI)
            Q=QI'R%5'
         CASE 1
            CALL SOUNDEX.DISPLAY(QI,'BCUST','SDX.CLIENTS,NAME','2,1,3,4',ITEM.LIST)
            CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
            IF ITEM.LIST='' ! DCOUNT(ITEM.LIST<1>,@VM) > 1 THEN GOTO ENTER.CLIENT
            IF NOT(NUM(ITEM.LIST<1,1>))THEN
               GOSUB DISPLAY.SCREEN
               GOTO ENTER.CLIENT
            END
            Q=ITEM.LIST<1,1>'R%5'
            GOSUB DISPLAY.SCREEN
      END CASE
      IF QI # CLIENT.ID THEN
         NEW.CLIENT = TRUE
      END
      CLIENT.ID=Q'R%5'
      MATREAD CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
         CALL ELINE('Client Number ':CLIENT.ID:' not on file!')
         GOTO ENTER.CLIENT
      END
      CLIENT.INFO = CLIENT.ID'R%5':', ':CL.NAME:' (':CL.CITY:', ':CL.ST:')'
      CRT @(24,3): CLIENT.INFO'L#40'

***********************************************************************
* Open Applicable Client Files
***********************************************************************
      OPEN '','FB.AUDIT,':CLIENT.ID TO F.AUDIT THEN
         READ TEMP FROM F.AUDIT,CLIENT.DISABLE.FILE THEN
            CLIENT.ENABLED = FBA.DISABLE
         END ELSE
            CLIENT.ENABLED = FBA.ENABLE
         END
         OPEN '', 'FB.AUDIT.ZIPS,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
            EXECUTE 'CREATE-FILE DATA FB.AUDIT.ZIPS,':CLIENT.ID:' 101,1' PASSLIST CAPTURING OUTPUT    ; * NKH01
            OPEN '','FB.AUDIT.ZIPS,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
               CALL OPEN.ABORT("FB.AUDIT.ZIPS,":CLIENT.ID, PROG.NAME)
            END
         END
         OPEN '', 'FB.AUDIT.PP,':CLIENT.ID TO F.AUDIT.PP ELSE
            EXECUTE 'CREATE-FILE DATA FB.AUDIT.PP,':CLIENT.ID:' 7,1' PASSLIST CAPTURING OUTPUT
            OPEN '','FB.AUDIT.PP,':CLIENT.ID TO F.AUDIT.PP ELSE
               CALL OPEN.ABORT("FB.AUDIT.PP,":CLIENT.ID, PROG.NAME)
            END
         END
      END ELSE
         LINE ='"':CLIENT.ID:'" is not setup! Do you want to set it up? : ##'
         HELP='Enter [Y]es [N]o [X]-Back [EX]it'
         CALL GEN.IN(0,22,LINE,'',Q,0,20,'','',0,-2,22,0,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='' OR QI = 'X'
               BACK.FLAG = TRUE
               CRT @(0,22):@(-3)
               CRT @(0,21):@(-4):
               CRT @(24,3):SPACES(40)
               GOTO ENTER.CLIENT

            CASE QI='EX'
               GOSUB ASK.ABOUT.QUITTING
               GO ENTER.CLIENT

            CASE QI='N'
               GOTO ENTER.CLIENT

            CASE QI='Y'
               CRT @(1,22):'Setting up files for client - Please wait':@(-4)
               CRT @(1,23):@(-4):
               EXECUTE 'CREATE-FILE DATA FB.AUDIT,':CLIENT.ID:' 101,1' PASSLIST CAPTURING OUTPUT      ; * NKH01
               OPEN '','FB.AUDIT,':CLIENT.ID TO F.AUDIT ELSE
                  CALL OPEN.ABORT("FB.AUDIT,":CLIENT.ID, PROG.NAME)
               END
               OPEN '', 'FB.AUDIT.ZIPS,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
                  EXECUTE 'CREATE-FILE DATA FB.AUDIT.ZIPS,':CLIENT.ID:' 101,1' PASSLIST CAPTURING OUTPUT    ; * NKH01
                  OPEN '','FB.AUDIT.ZIPS,':CLIENT.ID TO F.AUDIT.ZIPS ELSE
                     CALL OPEN.ABORT("FB.AUDIT.ZIPS,":CLIENT.ID, PROG.NAME)
                  END
               END
               OPEN '', 'FB.AUDIT.PP,':CLIENT.ID TO F.AUDIT.PP ELSE
                  EXECUTE 'CREATE-FILE DATA FB.AUDIT.PP,':CLIENT.ID:' 7,1' PASSLIST CAPTURING OUTPUT
                  OPEN '','FB.AUDIT.PP,':CLIENT.ID TO F.AUDIT.PP ELSE
                     CALL OPEN.ABORT("FB.AUDIT.PP,":CLIENT.ID, PROG.NAME)
                  END
               END
               CLIENT.ENABLED = FBA.ENABLE
         END CASE
      END
      IF CLIENT.ENABLED = FBA.DISABLE THEN
         TEMP = DISABLED.MSG
      END ELSE
         TEMP = ENABLED.MSG
      END
      CRT @(69,3):TEMP
      RETURN

*----------------------------------------------------------------------
* Carrier Routines
*----------------------------------------------------------------------
***********************************************************************
ENTER.CARRIER:***
***********************************************************************

      MASK = CARRIER.ID'R%5'
      HELP="Enter carrier #, 'name' for search, [C]opy [DELETE] [L]ist, [X]-Back [EX]it."
      CALL GEN.IN(24,4,'#####','',Q,0,20,'','',0,-5,4,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            GO ENTER.CARRIER
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.CARRIER
         CASE QI='X'
            BACK.FLAG = TRUE
            CRT @(0,22):@(-3)
            CRT @(0,21):@(-4):
            CRT @(24,4):SPACE(40)
            RETURN
         CASE QI = 'C'
            GOSUB COPY.CARRIER
         CASE QI = 'DELETE'
            GOSUB DEL.CARRIER
            GO ENTER.CARRIER
         CASE QI = 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' WITH EQUIP GT "" BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DISPLAY.SCREEN
            CRT @(24,3): CLIENT.INFO'L#40'
            GO ENTER.CARRIER
         CASE NUM(QI)
            Q=QI'R%5'
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',ITEM.LIST)
            CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
            GOSUB DISPLAY.SCREEN
            CRT @(24,3): CLIENT.INFO'L#40'
            IF ITEM.LIST='' ! DCOUNT(ITEM.LIST<1>,@VM) > 1 THEN GOTO ENTER.CARRIER
            IF NOT(NUM(ITEM.LIST<1,1>))THEN GOTO ENTER.CARRIER
            Q=ITEM.LIST<1,1>'R%5'
      END CASE
      IF QI # CARRIER.ID THEN
         NEW.CARRIER = TRUE
      END
      CARRIER.ID=Q'R%5'
      READ TEMP.REC FROM F.CARRIERS, CARRIER.ID THEN
         CARRIER.REC = TEMP.REC
         CARRIER.NAME = CARRIER.REC<1>
         CARRIER.CITY = CARRIER.REC<3>
         CARRIER.STATE = CARRIER.REC<4>
      END ELSE
         CALL ELINE('Carrier "':CARRIER.ID:'" is not a valid carrier!!!')
         GO ENTER.CARRIER
      END
      CARRIER.INFO = CARRIER.ID'R%5':', ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      CRT @(24,4): CARRIER.INFO'L#40'

      IF USER.NAME NE "NPRATT" THEN
         L.IN    = PROG.NAME :" ":PROG.DESC
         L.IN<2> = CLIENT.INFO:@VM:CARRIER.INFO
******         L.IN<3> = "npratt@afs.net"
         L.OUT = ""

         L.OUT<3,1> = "Client  : " : CLIENT.INFO
         L.OUT<3,2> = "Carrier : " : CARRIER.INFO

         CALL UPD.PROCESS.LOG(L.IN,L.OUT)
      END


      T.SETUP.EQUIP.TYPES = ''
      NUM.AVAL = DCOUNT(AVAL.EQUIP.TYPES<1>,@VM)
      FOR X = 1 TO NUM.AVAL
         T.AUDIT.ID = CARRIER.ID:'*':AVAL.EQUIP.TYPES<1,X>
         READV T.EQUIP.STATUS FROM F.AUDIT,T.AUDIT.ID,15 THEN
            T.SETUP.EQUIP.TYPES<1,-1> = AVAL.EQUIP.TYPES<1,X>
         END
      NEXT X
      NUM.SEL = DCOUNT(T.SETUP.EQUIP.TYPES<1>,@VM)
      IF NUM.SEL # 0 THEN
         EQUIP.TYPE = T.SETUP.EQUIP.TYPES<1,1>
         REC.NAME = CARRIER.ID:'*':EQUIP.TYPE
         READ TL.AUDIT.REC FROM F.AUDIT,REC.NAME THEN
            ORG.TL.AUDIT.REC = TL.AUDIT.REC
            CARRIER.ENABLED = TL.AUDIT.REC<FBA.CARRIER.STATUS>
         END ELSE
            CALL ELINE('PROBLEM WITH AUDIT RECORD, PLEASE CALL PROGRAMMER')
            STOP
         END
      END ELSE
         LINE = 'Carrier "':CARRIER.ID:'" is not setup for truckload on this client!  Create it? :  '
         HELP='Enter [Y]es [N]o [X]-Back [EX]it'
         CALL GEN.IN(0,22,LINE,'',Q,0,20,'','',0,-2,22,0,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='' OR QI = 'X'
               BACK.FLAG = TRUE
               CRT @(0,22):@(-3)
               CRT @(0,21):@(-4):
               CRT @(24,4):SPACES(40)
               GO ENTER.CARRIER
            CASE QI='EX'
               GOSUB ASK.ABOUT.QUITTING
               GO ENTER.CARRIER
            CASE QI='N'
               GOTO ENTER.CARRIER
            CASE QI='Y'
               CRT @(1,22):'Setting up files for carrier - Please wait':@(-4)
               CRT @(1,23):@(-4):
               TL.AUDIT.REC<FBA.TYPE> = LTLALL
               TL.AUDIT.REC<FBA.CARRIER.STATUS>=FBA.DISABLE
               AZIPS.IN.REC=''
               AZIPS.OUT.REC=''
               CARRIER.ENABLED = FBA.DISABLE
         END CASE
         GOSUB ENTER.EQUIP.TYPE
      END
      IF CARRIER.ID = '' THEN GO ENTER.CARRIER
      RETURN

***********************************************************************
COPY.CARRIER:***
***********************************************************************
      HELP = "Enter Carrier Number to copy:  [L]=List [X]-Back"
      CRT @(0,22):'Copy Carrier ID: 00000 to Carrier ID: 00000':@(-4)
      MASK = CARRIER.ID'R%5'
      Q=''
      CALL GEN.IN(17,22,MASK,'',Q,0,15,'','',2,17,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI='' AND CARRIER.ID < 1 GOTO COPY.CARRIER
         CASE QI='X' OR QI='EX'
            BACK.FLAG = TRUE
            CRT @(0,22):@(-4)
            CRT @(0,21):@(-4):
            RETURN
         CASE QI EQ 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' WITH EQUIP GT "" BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DISPLAY.SCREEN
            CRT @(24,3): CLIENT.INFO'L#40'
            GO COPY.CARRIER
         CASE NUM(QI)
            SRC.CARRIER.ID=Q'R%5'
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            GOTO COPY.CARRIER
      END CASE

      READ TEMP.REC FROM F.CARRIERS, SRC.CARRIER.ID ELSE
         CALL ELINE(SRC.CARRIER.ID:' is an invalid Carrier Number. Try Again.')
         GOTO COPY.CARRIER
      END
      T.SETUP.EQUIP.TYPES = ''
      NUM.AVAL = DCOUNT(AVAL.EQUIP.TYPES<1>,@VM)
      FOR X = 1 TO NUM.AVAL
         T.AUDIT.ID = SRC.CARRIER.ID:'*':AVAL.EQUIP.TYPES<1,X>
         READV T.EQUIP.STATUS FROM F.AUDIT,T.AUDIT.ID,15 THEN
            T.SETUP.EQUIP.TYPES<1,-1> = AVAL.EQUIP.TYPES<1,X>
         END
      NEXT X
      NUM.SEL = DCOUNT(T.SETUP.EQUIP.TYPES<1>,@VM)
      IF NUM.SEL = 0 THEN
         CALL ELINE('Carrier ':SRC.CARRIER.ID:' is not setup in Online Audit!')
         GO COPY.CARRIER
      END
***********************************************************************
COPY.CARRIER.2:
***********************************************************************
      HELP = "Enter Destination Carrier Number.   [X]-Back"
      CRT @(0,22):'Copy Carrier ID: ':SRC.CARRIER.ID:' to Carrier ID: 00000':@(-4)
      MASK = CARRIER.ID'R%5'
      Q=''
      CALL GEN.IN(38,22,MASK,'',Q,0,15,'','',2,38,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI='' AND CARRIER.ID < 1 GOTO COPY.CARRIER
         CASE QI='X'
            BACK.FLAG = TRUE
            GOTO COPY.CARRIER
         CASE NUM(QI)
            DST.CARRIER.ID=Q'R%5'
         CASE QI EQ 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' WITH EQUIP GT "" BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            GOTO COPY.CARRIER.2
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            GOTO COPY.CARRIER.2
      END CASE
      IF DST.CARRIER.ID = SRC.CARRIER.ID THEN
         CALL ELINE('Can not copy carrier ':SRC.CARRIER.ID:' to ':DST.CARRIER.ID:'! Try again.')
         GOTO COPY.CARRIER.2
      END
      READ TEMP.REC FROM F.CARRIERS, DST.CARRIER.ID ELSE
         CALL ELINE(DST.CARRIER.ID:' is an invalid Carrier Number. Try Again.')
         GOTO COPY.CARRIER.2
      END
      READ TEMP.REC FROM F.AUDIT,DST.CARRIER.ID THEN
         CALL ELINE('Carrier ':DST.CARRIER.ID:' is ALREADY SETUP in Online Audit! Can not copy!')
         GOTO COPY.CARRIER.2
      END
      CRT @(0,22):'Copying Carrier ID: ':SRC.CARRIER.ID:' to Carrier ID: ':DST.CARRIER.ID:@(-4)
      CRT @(0,23):'(FB.AUDIT,':SRC.CARRIER.ID:'->':DST.CARRIER.ID:')':@(-4):
      STMT = 'SELECT FB.AUDIT,':CLIENT.ID:' WITH CARRIER# = "':SRC.CARRIER.ID:'" AND EQUIP NE ""'
      EXECUTE STMT CAPTURING OUTPUT
      DONE=0
      LOOP
         READNEXT AUDIT.ID ELSE DONE=1
      UNTIL DONE = 1 DO
         READ T.AUDIT.REC FROM F.AUDIT,AUDIT.ID THEN
            DNAME = DST.CARRIER.ID
            IF FIELD(AUDIT.ID,'*',2) # '' THEN
               DNAME:= '*':FIELD(AUDIT.ID,'*',2)
            END
            CRT @(0,23):'(FB.AUDIT,':AUDIT.ID:'->':DNAME:')':@(-4):
            OWEN.REC=T.AUDIT.REC ; GOSUB OWENS.ARRAY.CHECK
            WRITE T.AUDIT.REC ON F.AUDIT,DNAME
         END ELSE
            CALL ELINE('Unable to copy carrier ':SRC.CARRIER.ID:' to ':DST.CARRIER.ID)
            RETURN
         END
      REPEAT
      STMT = 'SELECT FB.AUDIT.ZIPS,':CLIENT.ID:' WITH CARRIER# = "':SRC.CARRIER.ID:'" AND EQUIP NE ""'
      EXECUTE STMT CAPTURING OUTPUT
      DONE=0
      LOOP
         READNEXT REC.NAME ELSE DONE=1
      UNTIL DONE = 1 DO
         READ TZIP.REC FROM F.AUDIT.ZIPS,REC.NAME THEN
            DNAME = DST.CARRIER.ID:'*'
            DNAME:= FIELD(REC.NAME,'*',2):'*'
            DNAME:= FIELD(REC.NAME,'*',3):'*'
            DNAME:= FIELD(REC.NAME,'*',4):'*'
            DNAME:= FIELD(REC.NAME,'*',5)
            IF FIELD(REC.NAME,'*',6) # '' THEN
               DNAME:= '*':FIELD(REC.NAME,'*',6)
            END
            CRT @(0,23):'(FB.AUDIT.ZIPS,':REC.NAME:'->':DNAME:')':@(-4):
            WRITE TZIP.REC ON F.AUDIT.ZIPS,DNAME
         END ELSE
            CALL ELINE("ERROR - Unable to read ':REC.NAME:' from FB.AUDIT.ZIPS")
            RETURN
         END
      REPEAT

      CRT @(0,23):'(Copy Complete.)':@(-4):
      SLEEP 1
      CRT @(0,22):@(-4)
      RETURN

***********************************************************************
DEL.CARRIER:***
***********************************************************************
      HELP = "Enter Carrier Number to DELETE [L]=List [X]-Back"
      CRT @(0,22):'Delete Carrier : 00000':@(-4)
      MASK = CARRIER.ID'R%5'
      Q=''
      CALL GEN.IN(17,22,MASK,'',Q,0,15,'','',2,17,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI=''
            CRT @(24,4):'        '
            RETURN
         CASE QI="00000"
            CRT @(24,4):'        '
            RETURN
         CASE QI='X' OR QI='EX'
            CRT @(0,22):@(-4):
            RETURN
         CASE QI = 'L'
            EXECUTE 'SORT FB.AUDIT,':CLIENT.ID:' WITH EQUIP GT "" BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
            CALL ELINE('')
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            GOTO DEL.CARRIER
         CASE NUM(QI)
            SRC.CARRIER.ID=Q'R%5'
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            GOTO DEL.CARRIER
      END CASE

      YN.MSG = CHAR(7):'Are you sure you want to DELETE carrier ':SRC.CARRIER.ID:'? '
      YN.MASK = 'N '
      GOSUB ASK.Y.OR.N
      IF YN.ANSWER # 'Y' THEN GOTO DEL.CARRIER
      YN.MSG = CHAR(7):'This will DELETE ALL SETUPS for carrier ':SRC.CARRIER.ID:'. Are you sure? '
      YN.MASK = 'N '
      GOSUB ASK.Y.OR.N
      IF YN.ANSWER # 'Y' THEN GOTO DEL.CARRIER
      READ TEMP.REC FROM F.CARRIERS, SRC.CARRIER.ID ELSE
         CALL ELINE(SRC.CARRIER.ID:' is an invalid Carrier Number. Try Again.')
         GOTO DEL.CARRIER
      END
      T.SETUP.EQUIP.TYPES = ''
      NUM.AVAL = DCOUNT(AVAL.EQUIP.TYPES<1>,@VM)
      FOR X = 1 TO NUM.AVAL
         T.AUDIT.ID = SRC.CARRIER.ID:'*':AVAL.EQUIP.TYPES<1,X>
         READV T.EQUIP.STATUS FROM F.AUDIT,T.AUDIT.ID,15 THEN
            T.SETUP.EQUIP.TYPES<1,-1> = AVAL.EQUIP.TYPES<1,X>
         END
      NEXT X
      NUM.SEL = DCOUNT(T.SETUP.EQUIP.TYPES<1>,@VM)
      IF NUM.SEL = 0 THEN
         CALL ELINE('Carrier ':SRC.CARRIER.ID:' is not setup in Online Audit!')
         GO DEL.CARRIER
      END
      STMT = 'SELECT FB.AUDIT,':CLIENT.ID:' WITH CARRIER# ="':SRC.CARRIER.ID:'" AND EQUIP NE ""'
      EXECUTE STMT CAPTURING OUTPUT
      NUM.ITEM = @SELECTED
      IF NUM.ITEM GT 0 ELSE
         CALL ELINE('NO ITEMS TO DELETE - PLEASE TRY AGAIN')
         GO DEL.CARRIER
      END
      DONE = 0
      LOOP
         READNEXT AUDIT.ID ELSE DONE = 1
      UNTIL DONE = 1
         DELETE F.AUDIT,AUDIT.ID
      REPEAT
      STMT = 'SELECT FB.AUDIT.ZIPS,':CLIENT.ID:' WITH CARRIER# ="':SRC.CARRIER.ID:'" AND EQUIP NE ""'
      EXECUTE STMT CAPTURING OUTPUT
      NUM.ITEM = @SELECTED
      IF NUM.ITEM GT 0 ELSE
         RETURN
      END
      DONE = 0
      LOOP
         READNEXT AUDIT.ZIP.ID ELSE DONE = 1
      UNTIL DONE = 1
         DELETE F.AUDIT.ZIPS,AUDIT.ZIP.ID
      REPEAT
      RETURN


*----------------------------------------------------------------------
* Equipment Routines
*----------------------------------------------------------------------
***********************************************************************
ENTER.EQUIP.TYPE:***
***********************************************************************
      GOSUB INIT.SCREEN
      GOSUB DRAW.BOX.SCREEN
      CRT @(3, 4):'   Equipment Types'
      CRT @(3, 5):'    Entry Options'
      CRT @(3, 6):'====================='
      CRT @(1, 8):'1) Select Eqiupment Type'
      CRT @(1, 9):'2) Add a new Equipment Type'
      CRT @(1,10):'3) Delete a Equipment Type'
      CRT @(1,11):'4) Copy Type to New Type'
      PAGE.NUM = 1
      T.HEADING = 'Equipment Types'
      T.AUDIT.REC = TL.AUDIT.REC
      GOSUB LIST.EQUIP.SETUP.TYPES
      NEW.EQUIP.TYPE = ''

      CRT @(0,13):' Enter Option :    '
      HELP = 'OPTIONS:'
      IF PAGE.NUM < NUM.PAGES THEN HELP:= ' [F]wd Page'
      IF PAGE.NUM > 1 THEN HELP:= ' [B]ack Page'
      HELP:=' [X]=Back [EX]it Program'
      MASK = ' '

      CALL GEN.IN(16,13,MASK,'',Q,0,7,'','',1,16,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.EQUIP.TYPE
         CASE QI = ''AND EQUIP.TYPE # ''
            IF NEW.EQUIP.TYPE # EQUIP.TYPE THEN
               DATA.CHANGED = TRUE
               EQUIP.TYPE = NEW.EQUIP.TYPE
               EQUIP.DESC = NEW.EQUIP.DESC
            END
            RETURN
         CASE NUM(QI)
            BEGIN CASE
               CASE QI = 1
                  GOSUB SEL.EQUIP
                  IF EQUIP.TYPE # '' THEN RETURN
               CASE QI = 2
                  GOSUB ADD.EQUIP
               CASE QI = 3
                  GOSUB DEL.EQUIP
            END CASE
      END CASE
      IF EQUIP.TYPE = '' THEN GO ENTER.EQUIP.TYPE
      RETURN

SEL.EQUIP:***
      IF NUM.TYPES < 1 THEN
         CALL ELINE('No Equipment Types available to select from - Add an Equipment Type first.')
         RETURN
      END
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'  Equipment Type  '
      CRT @(3, 5):'     Selection'
      CRT @(3, 6):'===================='
      CRT @(0, 8):' Please Choose an Equipment'
      CRT @(0, 9):' Type to switch to.'
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS: [X]=Back [EX]it Program"
      MASK = 'X '
      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = ''
            RETURN
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.EQUIP.TYPE
         CASE QI = 'X'
            BACK.FLAG = TRUE
            CRT @(0,22):@(-3)
            CRT @(0,21):@(-4):
            RETURN
         CASE NUM(QI)
            SEL = QI'R%2'
            IF SEL < 1 OR SEL > NUM.TYPES THEN
               CALL ELINE('Selection out of range.  1-':NUM.TYPES:' only.')
               RETURN
            END ELSE
               NEW.EQUIP.TYPE = SETUP.EQUIP.TYPES<1,SEL>
               LOCATE NEW.EQUIP.TYPE IN AVAL.EQUIP.TYPES<1> SETTING X THEN
                  NEW.EQUIP.DESC = AVAL.EQUIP.TYPES<2,X>
               END ELSE
                  NEW.EQUIP.DESC = 'Unknown Equipment Type'
               END
            END
      END CASE
      IF NEW.EQUIP.TYPE = '' THEN RETURN
      IF NEW.EQUIP.TYPE # EQUIP.TYPE THEN
         EQUIP.TYPE = NEW.EQUIP.TYPE
         EQUIP.DESC = NEW.EQUIP.DESC
         NEW.EQUIP = TRUE
      END
      RETURN

***********************************************************************
ADD.EQUIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):'Adding New Equipment Type'
      CRT @(2, 5):'  ##   Equipment Type   '
      CRT @(2, 6):'-------------------------'
      NEW.EQUIP = NUM.TYPES+1
      CRT @(9, 7):NEW.EQUIP'R%2':STR(' ',10)
      HELP = "OPTIONS"
      NUM.AVAL.TYPES = DCOUNT(AVAL.EQUIP.TYPES<1>,@VM)
      FOR X = 1 TO NUM.AVAL.TYPES
         HELP := ' ':X:'-':AVAL.EQUIP.TYPES<2,X>
      NEXT X
      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(15,7,MASK,'',Q,0,3,'','',1,15,7,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ADD.EQUIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            SEL = QI'R%2'
            IF SEL < 1 OR SEL > NUM.AVAL.TYPES THEN
               CALL ELINE('Invalid Type, Please try again.')
               GO ADD.EQUIP
            END ELSE
               NEW.EQUIP.TYPE = AVAL.EQUIP.TYPES<1,SEL>
               NEW.EQUIP.DESC = AVAL.EQUIP.TYPES<1,SEL>
               T.AUDIT.ID = CARRIER.ID:'*':NEW.EQUIP.TYPE
               READ T.AUDIT.REC FROM F.AUDIT,T.AUDIT.ID THEN
                  CALL ELINE('That type already exists, please try again')
                  GO ADD.EQUIP
               END ELSE
                  TL.AUDIT.REC = ''
                  TL.AUDIT.REC<FBA.TYPE> = TLALL
                  TL.AUDIT.REC<FBA.EQUIP.TYPE> = NEW.EQUIP.TYPE
                  TL.AUDIT.REC<FBA.EQUIP.STATUS> = FBA.DISABLE
                  OWEN.REC=TL.AUDIT.REC ; GOSUB OWENS.ARRAY.CHECK
                  WRITE TL.AUDIT.REC ON F.AUDIT,T.AUDIT.ID
               END
            END
      END CASE
      RETURN

***********************************************************************
DEL.EQUIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):'     Equipment Type'
      CRT @(2, 5):'         Removal'
      CRT @(2, 6):'-------------------------'
      CRT @(2, 8):'Please Choose the Equipment'
      CRT @(2, 9):'type to DELETE.'
      CRT @(2,11):'Enter Option: '
      NUM.AVAL.TYPES = DCOUNT(AVAL.EQUIP.TYPES<1>,@VM)

      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(16,11,MASK,'',Q,0,2,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO DEL.EQUIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            SEL = QI'R%2'
            IF SEL < 1 OR SEL > NUM.TYPES THEN
               CALL ELINE('Invalid Selection, Please try again.')
               GO DEL.EQUIP
            END ELSE
               YN.MSG = 'DELETE EQUIPMENT # ':SEL:'. :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting Equipment Type... Please wait...':@(-4):
                  T.SEL.EQUIP = SETUP.EQUIP.TYPES<1,SEL>        ; * Selected Equip
                  T.AUDIT.ID = CARRIER.ID:'*':T.SEL.EQUIP
                  DELETE F.AUDIT,T.AUDIT.ID
                  STMT = 'SELECT FB.AUDIT.ZIPS,':CLIENT.ID:' WITH EQUIP ="':T.SEL.EQUIP:'"'
                  EXECUTE STMT CAPTURING OUTPUT
                  NUM.ITEM = @SELECTED
                  IF NUM.ITEM # 0 THEN
                     DONE = 0
                     LOOP
                        READNEXT AUDIT.ZIP.ID ELSE DONE = 1
                     UNTIL DONE = 1
                        DELETE F.AUDIT.ZIPS,AUDIT.ZIP.ID
                     REPEAT
                  END
                  GOSUB LIST.EQUIP.SETUP.TYPES
                  NEW.EQUIP.TYPE = SETUP.EQUIP.TYPES<1>
                  LOCATE NEW.EQUIP.TYPE IN AVAL.EQUIP.TYPES<1> SETTING X THEN
                     NEW.EQUIP.DESC = AVAL.EQUIP.TYPES<2,X>
                  END ELSE
                     NEW.EQUIP.DESC = 'Unknown Equipment Type'
                  END
                  DATA.CHANGED = TRUE
               END
            END
      END CASE
      RETURN

***********************************************************************
COPY.EQUIP:***
***********************************************************************
      HELP = "Enter Equipment Type to copy:  [L]=List [X]-Back"
      CRT @(0,22):'Copy Equip Type: # to Equip Type: #':@(-4)
      MASK = EQUIP.TYPE'R%5'
      NUM.AVAL.TYPES = DCOUNT(AVAL.EQUIP.TYPES<1>,@VM)
      FOR X = 1 TO NUM.AVAL.TYPES
         HELP := ' ':X:'-':AVAL.EQUIP.TYPES<2,X>
      NEXT X
      HELP := " [X]=Back [EX]it Program"
      Q=''
      CALL GEN.IN(17,22,MASK,'',Q,0,15,'','',2,17,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI='' GOTO COPY.EQUIP
         CASE QI='X' OR QI='EX'
            BACK.FLAG = TRUE
            CRT @(0,22):@(-4):
            RETURN
         CASE NUM(QI)
            SRC.EQUIP.TYPE=AVAL.EQUIP.TYPES<2,Q>
         CASE 1
            CALL ELINE('Invalid selection, please try again')
            GO COPY.EQUIP
      END CASE

      LOCATE SRC.EQUIP.TYPE IN AVAL.EQUIP.TYPES<1> SETTING X THEN
         NEW.EQUIP.DESC = AVAL.EQUIP.TYPES<2,X>
      END ELSE
         CALL ELINE('Invalid Equipment type, please try again')
         GO COPY.EQUIP
      END
      T.SETUP.EQUIP.TYPES = ''
      T.AUDIT.ID = CARRIER.ID:'*':SRC.EQUIP.TYPE
      READV T.EQUIP.STATUS FROM F.AUDIT,T.AUDIT.ID,15 ELSE
         CALL ELINE('Equipment type not setup, please try again.')
         GO COPY.EQUIP
      END
***********************************************************************
COPY.EQUIP.2:
***********************************************************************
      HELP = "Enter Destination Equipment Type.   [X]-Back"
      CRT @(0,22):'Copy Equipment: ':SRC.EQUIP.TYPE:' to Equipment: ':@(-4)
      MASK = EQUIP.TYPE
      Q=''
      CALL GEN.IN(38,22,MASK,'',Q,0,15,'','',2,38,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK ; Q=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI='' GOTO COPY.EQUIP
         CASE QI='X'
            BACK.FLAG = TRUE
            GOTO COPY.EQUIP
         CASE NUM(QI)
            DST.EQUIP.TYPE=Q
         CASE 1
            CALL ELINE('Invalid selection, please try again')
            GO COPY.EQUIP.2
      END CASE
      IF DST.EQUIP.TYPE = SRC.EQUIP.TYPE THEN
         CALL ELINE('Can not copy carrier ':SRC.EQUIP.TYPE:' to ':DST.EQUIP.TYPE:'! Try again.')
         GOTO COPY.EQUIP.2
      END
      LOCATE SRC.EQUIP.TYPE IN AVAL.EQUIP.TYPES<1> SETTING X THEN
         NEW.EQUIP.DESC = AVAL.EQUIP.TYPES<2,X>
      END ELSE
         CALL ELINE('Invalid Equipment type, please try again')
         GO COPY.EQUIP
      END
      T.AUDIT.ID = CARRIER.ID:'*':DST.EQUIP.TYPE
      READ TEMP.REC FROM F.AUDIT,T.AUDIT.ID THEN
         CALL ELINE('Carrier ':DST.EQUIP.TYPE:' is ALREADY SETUP in Online Audit! Can not copy!')
         GOTO COPY.EQUIP.2
      END
      CRT @(0,22):'Copying EQUIP TYPE: ':SRC.EQUIP.TYPE:' to EQUIP TYPE: ':DST.EQUIP.TYPE:@(-4)
      CRT @(0,23):'(FB.AUDIT,':SRC.EQUIP.TYPE:'->':DST.EQUIP.TYPE:')':@(-4):
      STMT = 'SELECT FB.AUDIT,':CLIENT.ID:' WITH CARRIER# = "':CARRIER.ID :'"AND EQUIP.TYPE = ':SRC.EQUIP.TYPE
      EXECUTE STMT CAPTURING OUTPUT
      DONE=0
      LOOP
         READNEXT AUDIT.ID ELSE DONE=1
      UNTIL DONE = 1 DO
         READ T.AUDIT.REC FROM F.AUDIT,AUDIT.ID THEN
            DNAME = CARRIER.ID:'*':DST.EQUIP.TYPE
            CRT @(0,23):'(FB.AUDIT,':AUDIT.ID:'->':DNAME:')':@(-4):
            OWEN.REC=T.AUDIT.REC ; GOSUB OWENS.ARRAY.CHECK
            WRITE T.AUDIT.REC ON F.AUDIT,DNAME
         END ELSE
            CALL ELINE('Unable to copy equipment type ':SRC.EQUIP.TYPE:' to ':DST.EQUIP.TYPE)
            RETURN
         END
      REPEAT
      STMT = 'SELECT FB.AUDIT.ZIPS,':CLIENT.ID:' WITH CARRIER# = "':CARRIER.ID:'"AND EQUIP = ':SRC.EQUIP.TYPE
      EXECUTE STMT CAPTURING OUTPUT
      DONE=0
      LOOP
         READNEXT REC.NAME ELSE DONE=1
      UNTIL DONE = 1 DO
         READ TZIP.REC FROM F.AUDIT.ZIPS,REC.NAME THEN
            DNAME = DST.EQUIP.TYPE:'*'
            DNAME:= FIELD(REC.NAME,'*',2):'*'
            DNAME:= FIELD(REC.NAME,'*',3):'*'
            DNAME:= FIELD(REC.NAME,'*',4):'*'
            DNAME:= FIELD(REC.NAME,'*',5)
            IF FIELD(REC.NAME,'*',6) # '' THEN
               DNAME:= '*':FIELD(REC.NAME,'*',6)
            END
            CRT @(0,23):'(FB.AUDIT.ZIPS,':REC.NAME:'->':DNAME:')':@(-4):
            WRITE TZIP.REC ON F.AUDIT.ZIPS,DNAME
         END ELSE
            CALL ELINE("ERROR - Unable to read ':REC.NAME:' from FB.AUDIT.ZIPS")
            RETURN
         END
      REPEAT

      CRT @(0,23):'(Copy Complete.)':@(-4):
      SLEEP 1
      CRT @(0,22):@(-4)
      RETURN


*----------------------------------------------------------------------
* Zip Routines
*----------------------------------------------------------------------
***********************************************************************
ENTER.ROUTE.ZIP:***
***********************************************************************
      GOSUB INIT.SCREEN
      GOSUB DRAW.BOX.SCREEN
      CRT @(3, 4):'Routing Zip Maintenance'
      CRT @(3, 5):'    Entry Options'
      CRT @(3, 6):'====================='
      CRT @(1, 8):'1) Select Routing Zip'
      CRT @(1, 9):'2) Add a new Routing Zip'
      CRT @(1,10):'3) Delete a Routing Zip'
      CRT @(1,11):'4) Toggle Enable/Disable Zip'
      CRT @(1,12):'5) Copy Route Zip to New Zip'
      T.AUDIT.REC = TL.AUDIT.REC
      OLD.ROUTE.ZIP = ROUTE.ZIP
      KEEP.CRITERIA = ''
      GOSUB ZIP.STRIPPER
      T.HEADING = 'ROUTING ZIPS'
      PAGE.NUM = 1
      NUM.ZIPS = DCOUNT(T.AUDIT.REC<FBA.ROUTE.ZIP>, @VM)
      GOSUB LIST.ZIPS

      CRT @(0,14):' Enter Option :    '
      HELP = 'OPTIONS:'
      IF PAGE.NUM < NUM.PAGES THEN HELP:= ' [F]wd Page'
      IF PAGE.NUM > 1 THEN HELP:= ' [B]ack Page'
      HELP:=' [X]=Back [EX]it Program'
      MASK = ' '
      CALL GEN.IN(16,14,MASK,'',Q,0,7,'','',1,16,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.ROUTE.ZIP
         CASE QI = ''
            RETURN
         CASE QI MATCHES "5N"
            ROUTE.ZIP = QI
            DATA.CHANGED = TRUE
         CASE NUM(QI)
            BEGIN CASE
               CASE QI = 1
                  GOSUB SEL.ZIP
                  IF NEW.ROUTE.ZIP # OLD.ROUTE.ZIP THEN DATA.CHANGED = TRUE
                  IF NEW.ROUTE.ZIP # '' THEN RETURN
               CASE QI = 2 GOSUB ADD.ZIP
               CASE QI = 3
                  GOSUB DEL.ZIP
               CASE QI = 4
                  GOSUB TOGGLE.ZIP
            END CASE
      END CASE
      GO ENTER.ROUTE.ZIP
      RETURN

***********************************************************************
SEL.ZIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'    Routing Zip  '
      CRT @(3, 5):'     Selection'
      CRT @(3, 6):'===================='
      CRT @(0, 8):' Please Choose a Routing Zip'
      CRT @(0, 9):' Number to switch to.'
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS: [X]=Back [EX]it Program"
      MASK = '-----'
      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.ROUTE.ZIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF NUM.SEL < 1 OR NUM.SEL > N.ZIPS THEN
               CALL ELINE('Selection out of range.  1-':N.ZIPS:' only.')
               GO ENTER.ROUTE.ZIP
            END ELSE
               ROUTE.ZIP = TL.AUDIT.REC<FBA.ROUTE.ZIP,NUM.SEL>
            END
      END CASE
      LOCATE ROUTE.ZIP IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING ROUTE.ZIP.POS ELSE ROUTE.ZIP.POS = 0
      ROUTE.ZIP.ENABLED = TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,ROUTE.ZIP.POS>
      RETURN

***********************************************************************
ADD.ZIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):' Adding New Routing Zip'
      CRT @(2, 5):'  ##   Routing Zip   '
      CRT @(2, 6):'-------------------------'
      NEW.ZIP = NUM.ZIPS + 1
      CRT @(9, 7):NEW.ZIP'R%2':STR(' ',10)
      HELP = "OPTIONS"
      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(15,7,MASK,'',Q,0,6,'','',1,15,7,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ADD.ZIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE LEN(QI)=5 AND QI MATCH '5N' ; NULL

         CASE LEN(QI)=6 AND QI MATCH('1A1N1A1N1A1N') ; NULL

         CASE QI='ALL'
            IF NUM.ZIPS THEN
               CALL ELINE('Routing Zips are already on file.  You can not add "ALL".  Delete Zips first.')
               GOTO ADD.ZIP
            END
         CASE QI='OTHER'
            LOCATE 'ALL' IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING WHERE THEN
               CALL ELINE('The Zip Code entry "ALL" already exists!  You can not add "OTHER" with "ALL"')
               GOTO ADD.ZIP
            END
         CASE 1
            CALL ELINE('Must be NNNNN for USA, ANANAN for Canadian, "ALL" or "OTHER"')
      END CASE
      IF QI # 'ALL' AND QI # 'OTHER' THEN
         CRT @(0,22):'Checking Zip Code with PCMILER - Please wait.':@(-4):
         CRT @(0,23):@(-4):
         VIN='BOTH'
         VIN<2>=CH.NUM
         VIN<3>=Q:@VM:71135
         VIN<4>=PCMILLER.READ.FILE          ; * Skip File Read ..... Look in PCMILER
         VIN<8>=CLIENT.ID                   ; * JMK02
         VIN<9>=CARRIER.ID                  ; * JMK02
         CALL PCMILER.BETA(VIN,VOUT,F.PCIN,F.PCOUT,F.MILEAGE)
         MILEAGE=VOUT<1>
         MSG=VOUT<2>'L#5'
         IF OCONV(MSG,'MCU') = 'ERROR' THEN
            CALL ELINE('PCMILER Reports that zip ':Q:' is an unknown Zip Code.  Please check it')
            GOTO ADD.ZIP
         END
      END ELSE
         Q = QI
      END
      LOCATE Q IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING WHERE THEN
         IF TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP,WHERE>='' THEN
            T = 'Base'
         END ELSE
            T = 'Subst.'
         END
         CALL ELINE('Zip ':Q:' already is a ':T:' zip. Please enter a different Zip.')
         GOTO ADD.ZIP
      END
      NEW.ROUTE.ZIP=Q
      TL.AUDIT.REC<FBA.ROUTE.ZIP,-1> = Q
      LOCATE Q IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING WHERE THEN
         TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,WHERE> = FBA.DISABLE
         ROUTE.ZIP.ENABLED = TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,WHERE>
         TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP,WHERE> = ''
         TL.AUDIT.REC<FBA.BEG.EFF.DATE,WHERE> = ''
         TL.AUDIT.REC<FBA.END.EFF.DATE,WHERE> = ''
         TL.AUDIT.REC<FBA.EFF.DATE.STATUS,WHERE> = ''
      END
      IF NEW.ROUTE.ZIP # ROUTE.ZIP THEN DATA.CHANGED = TRUE
      NUM.ZIPS = DCOUNT(TL.AUDIT.REC<FBA.ROUTE.ZIP>, @VM)
      CRT @(0,22):@(-4)
      LOCATE ROUTE.ZIP IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING ROUTE.ZIP.POS ELSE ROUTE.ZIP.POS = 0
      ROUTE.ZIP.ENABLED = TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,ROUTE.ZIP.POS>
      ROUTE.ZIP = NEW.ROUTE.ZIP
      RETURN

***********************************************************************
DEL.ZIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):'        Route Zip '
      CRT @(2, 5):'         Removal'
      CRT @(2, 6):'-------------------------'
      CRT @(2, 8):'Please Choose the Route Zip'
      CRT @(2, 9):'type to DELETE.'
      CRT @(2,11):'Enter Option: '
      NUM.ZIPS = DCOUNT(TL.AUDIT.REC<FBA.ROUTE.ZIP>,@VM)
      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(16,11,MASK,'',Q,0,2,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO DEL.ZIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            SEL = QI'R%2'
            IF SEL < 1 OR SEL > NUM.ZIPS THEN
               CALL ELINE('Invalid Zip, Please try again.')
               GO DEL.ZIP
            END ELSE
               YN.MSG = 'DELETE ROUTE ZIP # ':SEL:'. :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting Route Zip... Please wait...':@(-4):
                  T.ROUTE.ZIP = TL.AUDIT.REC<FBA.ROUTE.ZIP,SEL>           ; * Selected Zip
                  T.SEL.ZIP = T.AUDIT.REC<FBA.ROUTE.ZIP,NUM.SEL>          ; * Selected Zip
                  BASE.ZIP = T.SEL.ZIP
                  T.ZIP.POS=1
                  LOOP
                     LOCATE BASE.ZIP IN TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP>,T.ZIP.POS SETTING T.ZIP.POS THEN
                        GOSUB REMOVE.ZIP
                     END ELSE
                        T.ZIP.POS=-1
                     END
                  WHILE (T.ZIP.POS # -1)
                  REPEAT
                  LOCATE BASE.ZIP IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING T.ZIP.POS ELSE
                     CALL ELINE('UNABLE TO LOCATE THE BASE ZIP IN DELETE.ROUTE.ZIP')
                  END
                  T.NUM.DATES = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE,T.ZIP.POS>, @SVM)
                  FOR T.X = 1 TO T.NUM.DATES
                     DEL.ZIP = BASE.ZIP
                     DEL.CARRIER.ID = CARRIER.ID
                     DEL.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE,T.ZIP.POS,T.X>
                     DEL.IO='I'
                     DEL.EQUIP=EQUIP.TYPE
                     GOSUB REMOVE.AUDIT.TABLE
                     DEL.ZIP = BASE.ZIP
                     DEL.CARRIER.ID = CARRIER.ID
                     DEL.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE,T.ZIP.POS,T.X>
                     DEL.IO='O'
                     DEL.EQUIP=EQUIP.TYPE
                     GOSUB REMOVE.AUDIT.TABLE
                  NEXT T.X
               END
            END
            DATA.CHANGED = TRUE
      END CASE
      RETURN

***********************************************************************
TOGGLE.ZIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'    Routing Zip  '
      CRT @(3, 5):'      Toggle'
      CRT @(3, 6):'===================='
      CRT @(1, 8):'Please Choose a Routing'
      CRT @(1, 9):'Zip Num to TOGGLE the'
      CRT @(1,10):'Enable/Disable flag.'
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [X]=Back [EX]it Program"
      MASK = 'X '
      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO DEL.ZIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF NUM.SEL < 1 OR NUM.SEL GT NUM.ZIPS THEN
               CALL ELINE('INVALID ENTRY')
               GO TOGGLE.ZIP
            END
            IF TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,NUM.SEL> = FBA.ENABLE THEN
               TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,NUM.SEL> = FBA.DISABLE
            END ELSE
               TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,NUM.SEL> = FBA.ENABLE
            END
      END CASE
      RETURN

***********************************************************************
ENTER.SUB.ZIP:***
***********************************************************************
      GOSUB INIT.SCREEN
      GOSUB DRAW.BOX.SCREEN
      CRT @(2, 4):'Subst. Zip Maintenance'
      CRT @(2, 5):'    Entry Options'
      CRT @(2, 6):'======================'
      CRT @(1, 8):'1) Add a new Subst. Zip'
      CRT @(1, 9):'2) Delete a Subst. Zip'
      KEEP.CRITERIA = ROUTE.ZIP
      T.AUDIT.REC = TL.AUDIT.REC
      GOSUB ZIP.STRIPPER
      T.HEADING = 'SUBSTITUTE ZIPS'
      PAGE.NUM = 1
      NUM.ZIPS = DCOUNT(T.AUDIT.REC<FBA.ROUTE.ZIP>, @VM)
      GOSUB LIST.ZIPS
      CRT @(0,14):' Enter Option :    '
      HELP = 'OPTIONS:'
      IF PAGE.NUM < NUM.PAGES THEN HELP:= ' [F]wd Page'
      IF PAGE.NUM > 1 THEN HELP:= ' [B]ack Page'
      HELP:=' [X]=Back [EX]it Program'
      MASK = ' '
      CALL GEN.IN(16,14,MASK,'',Q,0,7,'','',1,16,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.SUB.ZIP
         CASE '' OR QI='X'
            GOSUB BUILD.SUB.ZIPS
            RETURN
         CASE QI MATCHES "5N"
            NEW.ROUTE.ZIP = QI
         CASE NUM(QI)
            BEGIN CASE
               CASE QI = 1
                  GOSUB ADD.SUB.ZIP

               CASE QI = 2
                  GOSUB DEL.SUB.ZIP

               CASE 1
                  GO ENTER.SUB.ZIP
            END CASE
      END CASE
      IF ROUTE.ZIP = '' THEN GO ENTER.SUB.ZIP
      RETURN

***********************************************************************
ADD.SUB.ZIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):' Adding New Subst Zip'
      CRT @(2, 5):'  ##   Subst Zip   '
      CRT @(2, 6):'-------------------------'
      NEW.ZIP = NUM.ZIPS + 1
      CRT @(9, 7):NEW.ZIP'R%2':STR(' ',10)
      HELP = "OPTIONS"
      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(15,7,MASK,'',Q,0,6,'','',1,15,7,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ADD.SUB.ZIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE LEN(QI)=5 AND QI MATCH '5N' ; NULL

         CASE LEN(QI)=6 AND QI MATCH('1A1N1A1N1A1N') ; NULL

         CASE 1
            CALL ELINE('Must be NNNNN for USA, ANANAN for Canadian, "ALL" or "OTHER"')
      END CASE

      CRT @(0,22):'Checking Zip Code with PCMILER - Please wait.':@(-4):
      CRT @(0,23):@(-4):
      VIN='BOTH'
      VIN<2>=CH.NUM
      VIN<3>=Q:@VM:71135
      VIN<4>=PCMILLER.READ.FILE             ; * Skip File Read ..... Look in PCMILER
      VIN<8>=CLIENT.ID                      ; * JMK02
      VIN<9>=CARRIER.ID                     ; * JMK02
      CALL PCMILER.BETA(VIN,VOUT,F.PCIN,F.PCOUT,F.MILEAGE)
      MILEAGE=VOUT<1>
      MSG=VOUT<2>'L#5'
      IF OCONV(MSG,'MCU') = 'ERROR' THEN
         CALL ELINE('PCMILER Reports that zip ':Q:' is an unknown Zip Code.  Please check it')
         GOTO ADD.ZIP
      END
      LOCATE Q IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING WHERE THEN
         IF TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP,WHERE>='' THEN
            T = 'Base'
         END ELSE
            T = 'Subst.'
         END
         CALL ELINE('Zip ':Q:' already is a ':T:' zip. Please enter a different Zip.')
         GOTO ADD.ZIP
      END
      NEW.SUB.ZIP=Q
      TL.AUDIT.REC<FBA.ROUTE.ZIP,-1> = NEW.SUB.ZIP    ; * New Sub Zip
      LOCATE NEW.SUB.ZIP IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING WHERE THEN
         TL.AUDIT.REC<FBA.BEG.EFF.DATE,WHERE> = ''
         TL.AUDIT.REC<FBA.END.EFF.DATE,WHERE> = ''
         TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,WHERE> = ''
         TL.AUDIT.REC<FBA.EFF.DATE.STATUS,WHERE> = ''
         TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP,WHERE> = ROUTE.ZIP     ; * Pointer to Real Zip
      END
      NUM.ZIPS = DCOUNT(TL.AUDIT.REC<FBA.ROUTE.ZIP>, @VM)
      CRT @(0,22):@(-4)
      SUB.ROUTE.ZIP = NEW.SUB.ZIP
      DATA.CHANGED = TRUE
      RETURN
***********************************************************************
DEL.SUB.ZIP:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):'        Route Zip '
      CRT @(2, 5):'         Removal'
      CRT @(2, 6):'-------------------------'
      CRT @(2, 8):'Please Choose the Route Zip'
      CRT @(2, 9):'type to DELETE.'
      CRT @(2,11):'Enter Option: '
      NUM.ZIPS = DCOUNT(TL.AUDIT.REC<FBA.ROUTE.ZIP>,@VM)
      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(16,11,MASK,'',Q,0,2,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO DEL.SUB.ZIP
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            SEL = QI'R%2'
            IF SEL < 1 OR SEL > NUM.ZIPS THEN
               CALL ELINE('Invalid Zip, Please try again.')
               GO DEL.SUB.ZIP
            END ELSE
               YN.MSG = 'DELETE ROUTE ZIP # ':SEL:'. :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting Route Zip... Please wait...':@(-4):
                  T.ROUTE.ZIP = TL.AUDIT.REC<FBA.ROUTE.ZIP,SEL>           ; * Selected Zip
*
* Remove the Route Zips
*
                  LOCATE T.ROUTE.ZIP IN TL.AUDIT.REC<14> SETTING POS THEN
                     TL.AUDIT.REC = DELETE(TL.AUDIT.REC,14,POS,0)
                  END
               END
            END
      END CASE
      RETURN


*----------------------------------------------------------------------
* Effective Date Routines
*----------------------------------------------------------------------
***********************************************************************
ENTER.EFF.DATE:***
***********************************************************************
      GOSUB INIT.SCREEN
      GOSUB DRAW.BOX.SCREEN
      CRT @(3, 4):'Effective Date Range'
      CRT @(3, 5):'   Entry Options'
      CRT @(3, 6):'===================='
      CRT @(1, 8):'1) Select Date Range'
      CRT @(1, 9):'2) Add Date Range'
*     CRT @(1,10):'3) Delete Date Range'
*     CRT @(1,11):'4) Edit Eff.Date Range'
*     CRT @(1,12):'5) Toggle Enable/Disable'
*     CRT @(1,13):'6) Copy Eff. Dates'
      T.AUDIT.REC = TL.AUDIT.REC
      GOSUB LIST.DATES
*
* Init. return value varables
*
      OLD.BEGIN.DATE = BEG.EFF.DATE
      OLD.CLOSE.DATE = END.EFF.DATE

      NEW.BEG.EFF.DATE = 0                  ; * If Beg.Eff.Date was chosen these will
      NEW.END.EFF.DATE = 0                  ; * contain a non-zero value

      BACK.FLAG=FALSE
      DATE.CHANGED = FALSE
      SAVE.EFF.DATE = TRUE
      PAGE.NUM = 1
      N.DATES = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS>, @SVM)
      NUM.PAGES = INT(N.DATES/MAX.ROWS)

      CRT @(0,14):' Enter Option :    '
      IF PAGE.NUM < NUM.PAGES THEN HELP:= ' [F]wd Page'
      IF PAGE.NUM > 1 THEN HELP:= ' [B]ack Page'
      HELP:=' [X]=Back [EX]it Program'
      MASK = ' '
      CALL GEN.IN(16,14,MASK,'',Q,0,7,'','',1,16,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.SUB.ZIP
*         CASE ''
*            RETURN
         CASE QI = 'X'
            BEG.EFF.DATE = OLD.BEGIN.DATE
            END.EFF.DATE = OLD.CLOSE.DATE

            BACK.FLAG = TRUE
            RETURN
         CASE QI MATCHES "5N"
            NEW.ROUTE.ZIP = QI
         CASE NUM(QI)
            BEGIN CASE
               CASE QI = 1
                  GOSUB SEL.DATE
               CASE QI = 2
                  GOSUB ADD.DATES
               CASE QI = 3
                  CALL ELINE('DELETING')
               CASE QI = 4
                  GOSUB EDIT.DATES
               CASE 1
                  CALL ELINE('Invalid Option')
            END CASE
      END CASE
      IF NEW.BEG.EFF.DATE # OLD.BEGIN.DATE THEN NEW.DATE = TRUE
      RETURN


***********************************************************************
SEL.DATE:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'  Effective Date  '
      CRT @(3, 5):'     Selection'
      CRT @(3, 6):'===================='
      CRT @(0, 8):' Please Choose an Effective'
      CRT @(0, 9):' Date to switch to.'
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS: [X]=Back [EX]it Program"
      MASK = '-----'
      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.EFF.DATE
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF NUM.SEL < 1 OR NUM.SEL > N.DATES THEN
               CALL ELINE('Selection out of range.  1-':N.ZIPS:' only.')
               RETURN
            END ELSE
               NEW.BEG.EFF.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL>
               NEW.END.EFF.DATE = TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL>
            END
      END CASE
      LOCATE NEW.BEG.EFF.DATE IN TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS> SETTING EFF.DATE.POS ELSE EFF.DATE.POS = 0
      EFF.DATE.ENABLED = TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,EFF.DATE.POS>
      DATA.CHANGED = TRUE
      RETURN

***********************************************************************
ADD.DATES:***
***********************************************************************
      CALL FB.PRINT.CENT(30,30+49,3,'~~  ADD DATE RANGE  ~~')
      TABLE.NUM = 0
      TABLE.BACK = 0
      NEW.TABLE = 1
      IF BEG.EFF.DATE # '' THEN
         NUM.TABLES = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS>, @SVM)
      END ELSE
         NUM.TABLES = 0
      END
      OPEN.DATE = ''
      CLOSE.OLD.DATE = ''
      IF NUM.TABLES > 0 THEN
         Y = 1
         LOOP
         WHILE Y<=NUM.TABLES DO
            IF TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,Y> = '' THEN TABLE.NUM = Y         ; * Found Open
            Y+=1
         REPEAT

         IF TABLE.NUM > 0 THEN
AD.0:
            CRT @(43, 9):'   Close Prior Table'
            CRT @(43,10):'##  BEG DATE - END DATE'
            CRT @(43,11):'-----------------------'
            CRT @(43,12):TABLE.NUM'R%2':'  ':TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,TABLE.NUM>'D2/':' - '
AD.1:
            MASK = 'MM/DD/YY'
            CRT @(0,22):"Enter a Closing Date for these Rates.":@(-4)
            IF TABLE.BACK THEN
               HELP ="OPTIONS: [T]oday [H]elp [X]=Abort,Don't change [EX]it Program"
            END ELSE
               HELP ="OPTIONS: [T]oday [H]elp [X]=Exit Back [EX]it Program"
            END
            CALL GEN.IN(58,12,MASK,'DATE',Q,1,8,'','',2,-8,12,0,QI,HELP,0,23)
            QI = OCONV(QI,'MCU')
            BEGIN CASE
               CASE QI = 'EX'
                  GOSUB ASK.ABOUT.QUITTING
                  GO ADD.DATES
               CASE QI = 'T'
                  Q = DATE()
               CASE QI = 'X'
                  RETURN
               CASE QI = ''
                  CALL ELINE('Invalid Option. Valid options are "T", "X", RETURN and a date formatted MM/DD/YY.')
                  GOTO AD.1
            END CASE

            BEGIN.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, TABLE.NUM>
            CLOSE.OLD.DATE = TRIM(Q)
            CRT @(58,12):CLOSE.OLD.DATE'D2/'

            IF CLOSE.OLD.DATE < BEGIN.DATE THEN
               CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
               GOTO AD.1
            END

            FOR T = 1 TO NUM.TABLES
               IF T # TABLE.NUM THEN
                  CHECK = 0
                  IF CLOSE.OLD.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE <= TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
                  IF CHECK=2 THEN
                     CALL ELINE("Closing Date resides within a prior date range.  Try again.")
                     GOTO AD.1
                  END

                  CHECK = 0
                  IF BEGIN.DATE < TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE > TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
                  IF CHECK=3 THEN
                     CALL ELINE("Closing Date includes a prior date range.  Try again.")
                     GOTO AD.1
                  END
               END
            NEXT
         END ELSE
*
* An open table was not found... Get the closing date
* of previous table to avoid over lap on new opening table.
*
            CLOSE.OLD.DATE = TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NUM.TABLES>
         END
      END

* Add New Table - OPEN DATE
AD.11:
      TABLE.BACK = 0
      CRT @(43, 9):'    Adding New Table'
      CRT @(43,10):'##  BEG DATE - END DATE'
      CRT @(43,11):'-----------------------'
      IF NUM.TABLES > 0 THEN
         TEMP = TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,NUM.TABLES>'D2/'
         TEMP:= ' - ':TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NUM.TABLES>'D2/'
      END ELSE
         TEMP = 'No prior tables'
      END
      NEW.TABLE = NUM.TABLES+1
      CRT @(43,12):NUM.TABLES'R%2':'  ':TEMP
      CRT @(43,13):NEW.TABLE'R%2':STR(' ',23)

AD.2:
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter the Opening Date for the New Rates. ":@(-4)
      HELP = "OPTIONS: [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(47,13,MASK,'DATE',Q,1,8,'','',2,-8,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            RETURN
         CASE QI = 'T'
            Q = DATE()
         CASE QI = 'X'
            IF TABLE.NUM > 0 THEN
               TABLE.BACK = 1
               GOTO AD.0
            END ELSE
               GOTO AD.EXIT
            END
         CASE QI = ''
            CALL ELINE('Invalid Option. Valid options are "T", "X", RETURN and a date formatted MM/DD/YY.')
            GOTO AD.2
      END CASE

      OPEN.DATE = TRIM(Q)
      CRT @(47,13):OPEN.DATE'D2/':' - '

*
* Does the Starting date begin on our "Just Closed" prior date field?
*
      IF (TABLE.NUM > 0) AND OPEN.DATE <= CLOSE.OLD.DATE AND OPEN.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,TABLE.NUM> THEN
         T.ERROR=TRUE
      END ELSE
         T.ERROR = FALSE
      END

*
* Check the rest of the dates, unless we already have an error...
*
      FOR T = 1 TO NUM.TABLES UNTIL T.ERROR
         T.FAIL = 0
         IF OPEN.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN T.FAIL=1
         IF OPEN.DATE <= TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, T> THEN T.FAIL+=1
         IF T.FAIL = 2 THEN T.ERROR = TRUE
         IF OPEN.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN T.ERROR=TRUE
      NEXT

      IF T.ERROR THEN
         CALL ELINE("Invalid Date - The Opening date resides within a prior date range.")
         GOTO AD.2
      END

AD.3:
      CRT @(58,15):STR(' ',10)
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter a Closing Date for the New Rates.":@(-4)
      HELP = "OPTIONS: ''-Leave Open [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(58,13,MASK,'DATE',Q,0,8,'','',2,-8,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            RETURN
         CASE QI = 'T'
            Q = DATE()
         CASE QI = 'X'
            GOTO AD.11
         CASE QI = ''
            Q = ''
      END CASE

      CLOSE.DATE = Q
      CRT @(58,13):CLOSE.DATE'D2/'

      IF CLOSE.DATE # '' THEN
         IF CLOSE.DATE < OPEN.DATE THEN
            CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
            GOTO AD.3
         END
      END ELSE
         FOR T = 1 TO NUM.TABLES
            IF OPEN.DATE <= TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN
               CALL ELINE("Closing Date resides within a prior date range.  Try again.")
               GOTO AD.3
            END
         NEXT
      END

      FOR T = 1 TO NUM.TABLES
         CHECK = 0
         IF CLOSE.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK = 1
         IF CLOSE.DATE <= TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
         IF CHECK=2 THEN
            CALL ELINE("Closing Date resides within a prior date range.  Try again.")
            GOTO AD.3
         END

         CHECK = 0
         IF OPEN.DATE < TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK = 1
         IF CLOSE.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
         IF CLOSE.DATE > TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
         IF CHECK=3 THEN
            CALL ELINE("Closing Date includes a prior date range.  Try again.")
            GOTO AD.3
         END
      NEXT

      IF TABLE.NUM > 0 THEN
         TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,TABLE.NUM> = CLOSE.OLD.DATE
      END

      LOCATE OPEN.DATE IN TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS> BY 'AR' SETTING NEW.TABLE ELSE
         INS OPEN.DATE BEFORE TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,NEW.TABLE>
         IF CLOSE.DATE='' THEN CLOSE.DATE='OPEN'
***********************************************************************
* Insert the word OPEN if no close date is assign to keep the sub value
* correct. I then delete the word OPEN
***********************************************************************
         INS CLOSE.DATE BEFORE TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NEW.TABLE>
         IF CLOSE.DATE='OPEN' THEN
            CLOSE.DATE=''
            TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS>=CHANGE(TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS>,'OPEN','')
         END
         INS FBA.DISABLE BEFORE TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,NEW.TABLE>
      END
      NEW.BEG.EFF.DATE = OPEN.DATE
      NEW.END.EFF.DATE = CLOSE.DATE
      EFF.DATE.STATUS = TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,NEW.TABLE>
      DATE.CHANGED = TRUE

      NUM.TABLES = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS>, @SVM)
      CHANGES.MADE = 1
      CRT @(0,22):@(-4)
      CRT @(46,21):'[ Press Enter ]'
      HELP='Press the ENTER key to continue.'
      CALL GEN.IN(60,21,'','',Q,0,1,'','',1,60,21,0,QI,HELP,0,23)

AD.EXIT:
*
* COMMON EXIT POINT -
*
      CRT @(0,22):@(-4)

      RETURN

***********************************************************************
EDIT.DATES:***
***********************************************************************
      NUM.TABLES = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS>, @SVM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         RETURN
      END
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
EED.1:
      CRT @(3, 4):' Effective Date'
      CRT @(3, 5):'     Editing    '
      CRT @(3, 6):'===================='
      CRT @(1, 8):'Please Choose the Effective'
      CRT @(1, 9):'Date Range to edit.'
EED.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]elp [X]=Back [EX]it Program"
      MASK = 'X '
      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GOTO EED.2
         CASE QI = 'X' OR QI = ''
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO EED.2
            END ELSE
               GOSUB EDIT.EFF.DATES
               IF NOT(BACK.FLAG) THEN
                  SRC.BEG.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, NUM.SEL>
                  DST.BEG.DATE = BEGIN.DATE
                  IF SRC.BEG.DATE#DST.BEG.DATE THEN
                     GOSUB RENAME.INBOUND.REC
                     GOSUB RENAME.OUTBOUND.REC
                  END
                  IF BEGIN.DATE#TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL> THEN
                     DEL TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL>
                     DEL TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL>
                     TEMP=TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,NUM.SEL>
                     DEL TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,NUM.SEL>
                     LOCATE BEGIN.DATE IN TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS> BY 'AR' SETTING NEW.TABLE ELSE
                        INS BEGIN.DATE BEFORE TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,NEW.TABLE>
                        IF CLOSE.DATE='' THEN CLOSE.DATE='OPEN'
***********************************************************************
* Insert the word OPEN if no close date is assign to keep the sub value
* correct. I then delete the word OPEN
***********************************************************************
                        INS CLOSE.DATE BEFORE TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NEW.TABLE>
                        IF CLOSE.DATE='OPEN' THEN
                           CLOSE.DATE=''
                           TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS>=CHANGE(TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS>,'OPEN','')
                        END
                        INS TEMP BEFORE TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,NEW.TABLE>
                     END
                  END ELSE
                     TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL>=CLOSE.DATE
                  END
                  TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, NUM.SEL> = BEGIN.DATE
                  TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, NUM.SEL> = CLOSE.DATE
                  IF BEG.EFF.DATE = OLD.BEGIN.DATE THEN
                     BEG.EFF.DATE = BEGIN.DATE
                     END.EFF.DATE = CLOSE.DATE
                  END
               END
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO EED.2
      END CASE
      RETURN

***********************************************************************
LIST.DATES:***
***********************************************************************
      CALL FB.PRINT.CENT(30,30+49,3,'~~ EFFECTIVE DATES ON FILE ~~')
      CRT @(31,4):' ## F BEG DATE/END DATE  ## F BEG DATE/END DATE':
      NUM.TABLES = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS>, @SVM)
      IF NUM.TABLES > 0 THEN
         POS = 1
         Y.POS = 6
         X.POS = 32
         EXIT.LD = FALSE
         LOOP
            TEMP = POS'R%2':' '
            IF TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,POS> = FBA.DISABLE THEN
               TEMP:='D '
            END ELSE
               TEMP:='E '
            END
            TEMP:= TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,POS>'D2/':'-'        ; * Beg Eff Date
            TEMP:= TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,POS>'D2/'  ; * End Eff Date
            CRT @(X.POS,Y.POS):TEMP
            BEGIN CASE
               CASE POS = NUM.TABLES
                  EXIT.LD = TRUE
               CASE Y.POS = 20 AND X.POS = 56
                  EXIT.LD = TRUE
               CASE Y.POS = 20
                  POS+=1                    ; * Move to next entry
                  Y.POS=6                   ; * Reset to top of Col #2
                  X.POS=56                  ; * Set XPosition of screen for col 2
               CASE 1
                  POS+=1
                  Y.POS+=1
            END CASE
         WHILE NOT(EXIT.LD)
         REPEAT

         IF NUM.TABLES > 30 THEN CALL FB.PRINT.CENT(30,79,21,REVON:'* Unable to display all entries *':REVOFF)
      END ELSE
         CALL FB.PRINT.CENT(31,79,12,'* No Date Ranges Entered *')
      END
      RETURN

***********************************************************************
EDIT.EFF.DATES:***
***********************************************************************
      CALL FB.DRAW.BOX(0,3,30,18,' ','')    ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')     ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')       ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  EDIT BEGINNING DATE  ~~')
      OLD.BEGIN.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL>
      OLD.CLOSE.DATE = TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,NUM.SEL>
      BEGIN.DATE = ''
      CLOSE.DATE = ''
      CRT @(43, 9):' Begining Date Editing'
      CRT @(43,10):'##  BEG DATE - END DATE'
      CRT @(43,11):'-----------------------'
      CRT @(43,12):NUM.SEL'R%2':'  ':OLD.BEGIN.DATE'D2/':' - ':OLD.CLOSE.DATE'D2/'

EBCD.1:
      MASK = OLD.BEGIN.DATE'D2/'
      CRT @(0,22):"Enter the Beginning Date for these Rates.":@(-4)
      HELP ="OPTIONS: [T]oday [X]=Back [EX]it Program"
      CALL GEN.IN(47,12,MASK,'DATE',Q,0,8,'','',2,47,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GOTO EBCD.1
*
* Todays date
*
         CASE QI = 'T'
            Q = DATE()
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN

         CASE QI = ''
            Q = OLD.BEGIN.DATE
      END CASE

      BEGIN.DATE = TRIM(Q)
      CRT @(47,12):BEGIN.DATE'D2/'

      IF OLD.BEGIN.DATE # BEGIN.DATE THEN
         FOR T = 1 TO NUM.TABLES
            IF T # NUM.SEL THEN             ; * Skip entry currently editing...
               CHECK = 0
               IF BEGIN.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,T> THEN CHECK+=1
               IF BEGIN.DATE <= TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,T> THEN CHECK+=1
               IF CHECK=2 THEN
                  CALL ELINE("Beginning Date resides within a prior date range.  Try again.")
                  BEGIN.DATE = OLD.BEGIN.DATE
                  GOTO EBCD.1
               END
            END
         NEXT
      END
EBCD.2:

EBCD.3:
      MASK = OLD.CLOSE.DATE'D2/'
      CRT @(0,22):"Enter the Ending Date for these Rates.":@(-4)
      HELP ="OPTIONS: [T]oday [SPACE] to clear Ending Date [X]=Back [EX]it Program"
      CALL GEN.IN(58,12,MASK,'DATE',Q,0,8,'','',2,58,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            GOTO EBCD.1
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GOTO EBCD.3

*
* Todays date
*
         CASE QI = 'T'
            Q = DATE()
         CASE QI = 'X'
            RETURN

         CASE QI = '' AND OLD.CLOSE.DATE
            Q = OLD.CLOSE.DATE

      END CASE

      IF TRIM(Q)='' THEN
         Q=''
         CRT @(58,12):SPACE(8)
         FOR T = 1 TO NUM.TABLES
            IF T #NUM.SEL THEN
               IF BEGIN.DATE <= TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,T> THEN
                  CALL ELINE('Date found between the eff. dates')
                  GOTO EBCD.3
               END
            END
         NEXT T
      END
      IF Q THEN
         CLOSE.DATE = TRIM(Q)
         CRT @(58,12):CLOSE.DATE'D2/'

         IF CLOSE.DATE < BEGIN.DATE THEN
            CALL ELINE("Invalid Date - The Ending date can't be before the Beginning date!")
            GOTO EBCD.3
         END

         IF NOT(BACK.FLAG) THEN
            FOR T = 1 TO NUM.TABLES
               IF T # NUM.SEL THEN
                  CHECK = 0
                  IF CLOSE.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK = 1
                  IF CLOSE.DATE <= TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK +=1
                  IF CHECK=2 THEN
                     CALL ELINE("Ending Date resides within a prior date range.  Try again.")
                     CLOSE.DATE = OLD.CLOSE.DATE
                     GOTO EBCD.3
                  END

                  CHECK = 0
                  IF BEGIN.DATE < TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK= 1
                  IF CLOSE.DATE => TL.AUDIT.REC<FBA.BEG.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK+=1
                  IF CLOSE.DATE > TL.AUDIT.REC<FBA.END.EFF.DATE, ROUTE.ZIP.POS, T> THEN CHECK+=1
                  IF CHECK=3 THEN
                     CALL ELINE("Ending Date includes a prior date range.  Try again.")
                     CLOSE.DATE = OLD.CLOSE.DATE
                     GOTO EBCD.3
                  END
               END
            NEXT
         END
      END
      RETURN

***********************************************************************
ENTER.SHIPPING.POINTS:***
***********************************************************************
      DATA.CHANGED = FALSE
      ORIG.AZIPS.REC = AZIPS.REC
      GOSUB INIT.SCREEN
      CRT @(25,0):CLIENT.ID'L#5':' ':CL.NAME'L#20'
      CRT @(25,1):CARRIER.ID'L#5':' ':CARRIER.NAME'L#20'
*
* Setup the Zip/State Tables and Flags...
*
      GOSUB EXTRACT.AUDIT.ZIPS
      GOSUB SETUP.AUDIT.ZIPS
      GOSUB DISPLAY.STATES
      UNDO.STATE=ALL.ZIPS

ENTER.SHIPPING.POINT.1:***
      CRT @(0,22):'Enter Option :':@(-4)
      HELP = "[E]nter [C]hange [B]ottom [P]revious [T]op []Next"
      IF UNDO.STATE#ALL.ZIPS THEN
         HELP:=" [U]ndo command"
      END
      PART.STATE=0
      MASK = ''

      CALL GEN.IN(14,22,MASK,'',Q,0,6,'','',2,14,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GOTO ENTER.SHIPPING.POINT.1

         CASE QI = 'U' AND UNDO.STATE#ALL.ZIPS
            ALL.ZIPS=UNDO.STATE
            START.POS=0
            STOP.POS=0
            GOSUB GET.ZIP.FILE

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOSUB BUILD.AUDIT.ZIPS
            DATA.CHANGED = TRUE
            RETURN

         CASE QI = 'T'
            IF DSP.NUM.LINES > 0 THEN
               DSP.PAGE = 1
            END ELSE
               CALL ELINE('*** Top ***')
            END
            GOSUB DISPLAY.STATES

         CASE QI = ''
            IF DSP.PAGE GE NUM.PAGES ELSE
               DSP.PAGE = DSP.PAGE+1
            END
            GOSUB DISPLAY.STATES

         CASE QI = '-' OR QI='P'
            IF DSP.PAGE > 1 THEN
               DSP.PAGE = DSP.PAGE-1
            END
            GOSUB DISPLAY.STATES

         CASE QI = 'B'
            DSP.PAGE = NUM.PAGES
            GOSUB DISPLAY.STATES

         CASE QI = 'E'
            UNDO.STATE=ALL.ZIPS
ENTER.STATE:
            GOSUB GET.STATE.RANGE
            IF BACK.FLAG THEN
               BACK.FLAG=FALSE
               GOTO ENTER.SHIPPING.POINT.1
            END
            STATE.NUM=START.POS
            LOOP
               GOSUB EDIT.STATES
               IF STATE.NUM+1 <= STOP.POS THEN
                  STATE.NUM+=1
               END ELSE
                  GOTO ENTER.STATE
               END
            WHILE STATE.NUM <= STOP.POS
            REPEAT
            GOTO ENTER.STATE

         CASE QI='C'
            REVERSE.CODE=0
            BACK.FLAG=FALSE
            UNDO.STATE=ALL.ZIPS
CHANGE.STATE:***
            GOSUB GET.CHANGE.INFO
            UNDO.ZIP=''
            IF BACK.FLAG THEN
               GOTO ENTER.SHIPPING.POINT.1
            END
CHANGE.STATE.RANGE:***
            GOSUB GET.STATE.RANGE
            IF BACK.FLAG THEN
               BACK.FLAG=FALSE
               GO ENTER.SHIPPING.POINT.1
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO CHANGE.STATE.RANGE

         CASE QI='R'
            REVERSE.CODE=1
            BACK.FLAG=FALSE
            UNDO.STATE=ALL.ZIPS
REVERSE.STATE:***
            GOSUB GET.CHANGE.INFO
            UNDO.ZIP=''
            IF BACK.FLAG THEN
               GOTO ENTER.SHIPPING.POINT.1
            END
REVERSE.STATE.RANGE:***
            GOSUB GET.STATE.RANGE
            IF BACK.FLAG THEN
               BACK.FLAG=FALSE
               GOTO REVERSE.STATE
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO REVERSE.STATE.RANGE

         CASE NUM(QI)
            STATE.NUM = QI'R#3'
            IF STATE.NUM < 1 OR STATE.NUM > NUM.STATES THEN
               CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.STATES)
            END ELSE
               UNDO.STATE=ALL.ZIPS
               GOSUB EDIT.STATES
            END

         CASE 1
*
* Attempt to locate string entered as a state ID
*
            LOCATE QI IN STATE.ZIP.REC<1> SETTING WHERE THEN
               STATE.NUM = WHERE'R#3'
               IF STATE.NUM < 1 OR STATE.NUM > NUM.STATES THEN
                  CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.STATES)
               END ELSE
                  UNDO.STATE=ALL.ZIPS
                  GOSUB EDIT.STATES
               END
            END ELSE
               CALL ELINE('Invalid response. Try again.')
            END
      END CASE
      GO ENTER.SHIPPING.POINT.1

      RETURN

*----------------------------------------------------------------------
*Mileage Routines
*----------------------------------------------------------------------
***********************************************************************
ENTER.MILEAGE.INFO:***
***********************************************************************
      GOSUB INIT.SCREEN
      GOSUB DRAW.BOX.SCREEN
      READ AVAL.MILEAGE.BASE FROM F.TABLES,"MILEAGE.BASE" ELSE AVAL.MILEAGE.BASE = ''
      READ AVAL.MILEAGE.MODIFIER FROM F.TABLES,"MILEAGE.MODIFIER" ELSE AVAL.MILEAGE.MODIFIER = ''
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')
      DISP.HEAD1 = '~ TL Mileage Information On File ~'
      CALL FB.PRINT.CENT(31,79,3,DISP.HEAD1)

      IF TL.AUDIT.REC<FBA.MILEAGE.BASE> = '' THEN
         CALL FB.PRINT.CENT(26,79,13,'** Nothing on File **')
      END ELSE
         CRT @(36,9) : '1) Mileage Base      : ': TL.AUDIT.REC<FBA.MILEAGE.BASE>
         CRT @(36,11): '2) Mileage Modifier  : ': TL.AUDIT.REC<FBA.MILEAGE.MODIFIER>
         CRT @(36,13): '3) Mileage Tolerance : %': TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,1>'L26#6'
         CRT @(36,14): '   Miles:            : ': TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,2>'L26#6'
      END

      CRT @(3, 4):'Mileage Base Maintanance'
      CRT @(3, 5):'    Entry Options'
      CRT @(3, 6):'====================='
      CRT @(1, 8):'1) Set to Defaults'
      CRT @(1, 9):'2) Edit current settings'
      CRT @(0,14):' Enter Option :    '
      HELP = 'OPTIONS:'
      HELP:=' [X]=Back [EX]it Program'
      MASK = ' '

      CALL GEN.IN(16,14,MASK,'',Q,0,7,'','',1,16,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            BACK.FLAG = 1
            GO ENTER.CARRIER
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.MILEAGE.INFO
         CASE QI = ''
            RETURN
         CASE NUM(QI)
            BEGIN CASE
               CASE QI = 1
                  CRT @(36,7) : REVON:'The mileage info will be changed to :':REVOFF
                  CRT @(36,9) : '1) Mileage Base      : ':DEFAULT.BASE
                  CRT @(36,11): '2) Mileage Modifier  : ':DEFAULT.MODIFIER
                  CRT @(36,13): '3) Mileage Tolerance : %':DEFAULT.TOLERANCE<1,1>'L26#6'
                  CRT @(36,14): '   Miles:            : ':DEFAULT.TOLERANCE<1,2>'L26#6'
                  CALL FB.DRAW.BOX(0,3,30,18,' ','')
                  CRT @(0, 7):" Enter 'Y' to accept these"
                  CRT @(0, 8):" setting or 'X' back to"
                  CRT @(0, 9):' save current settings.'
                  CRT @(0,11):' Enter Option :   '
                  HELP = "OPTIONS: [X]=Back [EX]it Program"
                  MASK = 'X '
                  CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
                  IF QI='' THEN QI=MASK
                  QI = TRIM(OCONV(QI,'MCU'))
                  BEGIN CASE
                     CASE QI = 'Y'
                        TL.AUDIT.REC<FBA.MILEAGE.BASE> = DEFAULT.BASE
                        TL.AUDIT.REC<FBA.MILEAGE.MODIFIER > = DEFAULT.MODIFIER
                        TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,1> = DEFAULT.TOLERANCE<1,1>
                        TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,2> = DEFAULT.TOLERANCE<1,2>
                        GO ENTER.MILEAGE.INFO
                     CASE QI = 'EX'
                        GOSUB ASK.ABOUT.QUITTING
                        GO ENTER.MILEAGE.INFO
                     CASE QI = 'X' or QI = ''
                        BACK.FLAG = TRUE
                        GO ENTER.MILEAGE.INFO
                  END CASE
               CASE QI = 2
                  GOSUB EDIT.MILEAGE.INFO
            END CASE
      END CASE
      GO ENTER.MILEAGE.INFO
      RETURN

***********************************************************************
EDIT.MILEAGE.INFO:***
***********************************************************************
ENTER.MILEAGE.BASE:
      MASK = TL.AUDIT.REC<FBA.MILEAGE.BASE>
      CRT @(0,22):"Enter a mileage base:":@(-4)
      NUM.AVAL.BASE = DCOUNT(AVAL.MILEAGE.BASE<1>,@VM)
      B.DISPLAY = ''
      ROW = 16
      FOR X = 1 TO NUM.AVAL.BASE
         B.DISPLAY := ' ':X:'-':AVAL.MILEAGE.BASE<2,X>
         IF LEN(B.DISPLAY) GT 30 OR X = NUM.AVAL.BASE THEN
            CRT @(32,ROW):B.DISPLAY'L#40'
            B.DISPLAY = ''
            ROW = ROW + 1
         END
      NEXT X
      FOR X = ROW TO 20
         CRT @(32,X):SPACES(40)
      NEXT X
      CALL GEN.IN(59,9,MASK,'',Q,0,8,'','',2,59,9,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ENTER.MILEAGE.BASE
         CASE QI = 'X'
            BACK.FLAG = TRUE
            GO ENTER.MILEAGE.INFO
         CASE QI=''
         CASE NUM(QI)
            SEL = QI
            IF QI LT 1 OR QI GT NUM.AVAL.BASE THEN
               CALL ELINE('Invalid option, please try again.')
               GOTO ENTER.MILEAGE.BASE
            END
            TL.AUDIT.REC<FBA.MILEAGE.BASE> = AVAL.MILEAGE.BASE<1,SEL>
         CASE 1
            CALL ELINE('Invalid option, valid options are RETURN, #, "X" and "EX".  Try Again.')
            GOTO ENTER.MILEAGE.BASE
      END CASE
      CRT @(59,9):TL.AUDIT.REC<FBA.MILEAGE.BASE>

ENTER.MILEAGE.MODIFIER:
      MASK = MILEAGE.MODIFIER
      CRT @(0,22):"Enter a mileage modifier:":@(-4)
      NUM.AVAL.MODIFIER = DCOUNT(AVAL.MILEAGE.MODIFIER<1>,@VM)
      C.DISPLAY = ''
      ROW = 16
      FOR X = 1 TO NUM.AVAL.MODIFIER
         C.DISPLAY := ' ':X:'-':AVAL.MILEAGE.MODIFIER<2,X>
         IF LEN(C.DISPLAY) GT 30 OR X = NUM.AVAL.MODIFIER THEN
            CRT @(32,ROW):C.DISPLAY'L#40'
            C.DISPLAY = ''
            ROW = ROW + 1
         END
      NEXT X
      FOR X = ROW TO 20
         CRT @(32,X):SPACES(40)
      NEXT X
      CALL GEN.IN(59,11,MASK,'',Q,0,8,'','',2,59,11,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ENTER.MILEAGE.MODIFIER
         CASE QI = 'X'
            BACK.FLAG = TRUE
            GO ENTER.MILEAGE.BASE
         CASE QI=''
         CASE NUM(QI)
            SEL = QI
            IF QI LT 1 OR QI GT NUM.AVAL.MODIFIER THEN
               CALL ELINE('Invalid option, please try again.')
               GOTO ENTER.MILEAGE.MODIFIER
            END
            TL.AUDIT.REC<FBA.MILEAGE.MODIFIER>= AVAL.MILEAGE.MODIFIER<1,SEL>
         CASE 1
            CALL ELINE('Invalid option, valid options  are #, "X" and "EX" , RETURN.  Try Again.')
            GOTO ENTER.MILEAGE.MODIFIER
      END CASE
      CRT @(59,11):TL.AUDIT.REC<FBA.MILEAGE.MODIFIER>

ENTER.MILEAGE.TOLERANCE:
      MASK = TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,1>'L26#6'
      CRT @(0,22):"Enter a mileage tolerance percentage :":@(-4)
      CALL GEN.IN(59,13,MASK,'AMT2',Q,0,6,'','',2,59,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ENTER.MILEAGE.TOLERANCE
         CASE QI = 'X'
            BACK.FLAG = TRUE
            GO ENTER.MILEAGE.MODIFIER
         CASE QI=''
         CASE NUM(QI)
            TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,1> = QI
         CASE 1
            CALL ELINE('Invalid option, valid options are RETURN, #, "X" and "EX".  Try Again.')
            GOTO ENTER.MILEAGE.TOLERANCE
      END CASE
      CRT @(59,13):TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,1>'R26%6'

ENTER.MILEAGE.TOLERANCE2:
      MASK = TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,2>'L26#6'
      CRT @(0,22):"Enter a mileage tolerance miles: ":@(-4)
      CALL GEN.IN(59,14,MASK,'',Q,0,6,'','',2,59,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ENTER.MILEAGE.TOLERANCE2
         CASE QI = 'X'
            BACK.FLAG = TRUE
            GO ENTER.MILEAGE.TOLERANCE
         CASE QI=''
         CASE NUM(QI)
            TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,2> = QI
         CASE 1
            CALL ELINE('Invalid option, valid options are RETURN, #, "X" and "EX".  Try Again.')
            GOTO ENTER.MILEAGE.TOLERANCE
      END CASE
      CRT @(59,14):TL.AUDIT.REC<FBA.MILEAGE.TOLERANCE,2>'R26%6'
      RETURN

* NPR02 Start changes
*----------------------------------------------------------------------
* Enter a Management fee
*----------------------------------------------------------------------
ENTER.MGMT.FEE:***

      MGMT.FEE = TL.AUDIT.REC<FBA.MGMT.FEE>

      HELP="Management Fee"
      MASK=MGMT.FEE'R26#8'
      CALL GEN.IN(24,19,MASK,'AMT2',Q,0,8,'','',8,24,19,0,QI,HELP,0,23)

      Q = OCONV(Q,'MCU')
      IF Q='' THEN Q=MGMT.FEE
      Q=TRIM(Q)

      BEGIN CASE
         CASE QI='X'
            BACK.FLAG = TRUE
            CRT @(24,19):MGMT.FEE'R26#8'
            RETURN
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.MGMT.FEE
            END
*         CASE QI = ''
*            MGMT.FEE = ''
         CASE NUM(QI)
            MGMT.FEE = Q
         CASE QI=''
      END CASE

      IF MGMT.FEE='' THEN
         CRT @(24,19):MGMT.FEE'R#8'
      END ELSE
         CRT @(24,19):MGMT.FEE'R26#8'
      END

      RETURN

* NPR02 End changes

*=======================================================================
*                GENERIC ROUTINES
*=======================================================================

***********************************************************************
ZIP.STRIPPER:***
*                 Removes Zips from T.AUDIT.REC.  Keeps only a selected
*                criteria of zips.
*
* INPUT  : T.AUDIT.REC<> - Record to remove zips from.
*          KEEP.CRITERIA - The Criteria in FBA.BASE.ROUTE.ZIP to keep
*                          in T.AUDIT.REC<>
*
* OUTPUT : A BUTCHERED T.AUDIT.REC<>
*
* SEE ALSO: LIST.SUB.ZIPS, LIST.ROUTE.ZIPS
***********************************************************************
      N.ZIPS = DCOUNT(T.AUDIT.REC<FBA.ROUTE.ZIP>, @VM)
      FOR T.ZIP.POS = 1 TO N.ZIPS
         IF T.AUDIT.REC<FBA.BASE.ROUTE.ZIP,T.ZIP.POS> # KEEP.CRITERIA THEN
            T.AUDIT.REC<FBA.BASE.ROUTE.ZIP,T.ZIP.POS> = 'EATME'
         END
      NEXT T.ZIP.POS
      T.ZIP.POS=1
      LOOP
         LOCATE 'EATME' IN T.AUDIT.REC<FBA.BASE.ROUTE.ZIP>,T.ZIP.POS SETTING T.ZIP.POS THEN
            DEL T.AUDIT.REC<FBA.BEG.EFF.DATE,T.ZIP.POS>         ; * 2
            DEL T.AUDIT.REC<FBA.END.EFF.DATE,T.ZIP.POS>         ; * 3
            DEL T.AUDIT.REC<FBA.ROUTE.ZIP,T.ZIP.POS>  ; * 8
            DEL T.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,T.ZIP.POS>     ; * 9
            DEL T.AUDIT.REC<FBA.EFF.DATE.STATUS,T.ZIP.POS>      ; * 10
            DEL T.AUDIT.REC<FBA.BASE.ROUTE.ZIP,T.ZIP.POS>       ; * 12
         END ELSE
            T.ZIP.POS=-1
         END
      WHILE (T.ZIP.POS # -1)
      REPEAT
      RETURN

*----------------------------------------------------------------------
* LIST.ZIPS
*----------------------------------------------------------------------
LIST.ZIPS:
*
      LZ.ROW.NUM=1
      N.ZIPS = DCOUNT(T.AUDIT.REC<FBA.ROUTE.ZIP>, @VM)
      NUM.PAGES = INT(N.ZIPS/MAX.ROWS)
      IF NUM.PAGES < (N.ZIPS/MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN
         IF NUM.PAGES = 0 THEN NUM.PAGES = 1
         PAGE.NUM = 1
      END
      T=' ~~                         PAGE # ':PAGE.NUM'R#2':' OF ':NUM.PAGES'R#2':' ~~ '
      T.LEN = LEN(T.HEADING)
      T.OFF = (19-T.LEN)/2
      T[7+T.OFF,T.LEN] = T.HEADING
      CRT @(31,22):T:
      T = '  ##   ZIP   '
      IF INDEX(T.HEADING,'SUBS',1) THEN
         T:= ' '                            ; * subs
         T.ZIPS.MSG = 'Substitution'
      END ELSE
         T:= 'F'                            ; * bases
         T.ZIPS.MSG = 'Routing'
      END
      T:='  CITY, STATE '
      CRT @(31,4):T:
      IF N.ZIPS < 1 THEN
         CALL FB.PRINT.CENT(30,79,11,'** No ':T.ZIPS.MSG:' Zips On File **')
         RETURN
      END
      LZ.POS = (PAGE.NUM-1)*MAX.ROWS
      LZ.ROW = START.ROW
      EXIT.LZ = FALSE
      LOOP
         LZ.POS+=1
         ZIP = T.AUDIT.REC<FBA.ROUTE.ZIP,LZ.POS>
         TEMP = '  ':LZ.POS'R%2':'  ':ZIP'L#6'
         T.ZIP = T.AUDIT.REC<FBA.BASE.ROUTE.ZIP,LZ.POS>

         BEGIN CASE
            CASE T.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,LZ.POS> = FBA.DISABLE
               TEMP:=' D'
            CASE T.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,LZ.POS> = FBA.ENABLE
               TEMP:=' E'
            CASE 1
               TEMP:='  '
         END CASE

         IF ZIP # 'ALL' AND ZIP # 'OTHER' THEN
            CALL FB.READ.ZIP(ZIP, DEST.CITY, DEST.STATE)
            IF DEST.CITY # '' THEN TEMP:= '  (':DEST.CITY:', ':DEST.STATE:')'
         END
         TEMP = TEMP'L#47'

         CRT @(31,LZ.ROW):TEMP
         BEGIN CASE
            CASE LZ.POS = N.ZIPS
               EXIT.LZ = TRUE

            CASE LZ.ROW.NUM = MAX.ROWS
               EXIT.LZ = TRUE
               IF LZ.POS < N.ZIPS THEN
                  TEMP = REVON:'* Continued on next page *':REVOFF
               END ELSE
                  TEMP = REVON:'* End of ':T.ZIPS.MSG:' Zips *':REVOFF
               END
               CALL FB.PRINT.CENT(30,79,21,TEMP)

            CASE 1
               LZ.ROW+=1
               LZ.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.LZ)
      REPEAT

      RETURN

*----------------------------------------------------------------------
LIST.EQUIP.SETUP.TYPES:
*----------------------------------------------------------------------
      SETUP.EQUIP.TYPES = ''
      NUM.AVAL = DCOUNT(AVAL.EQUIP.TYPES<1>,@VM)
      FOR X = 1 TO NUM.AVAL
         T.AUDIT.ID = CARRIER.ID:'*':AVAL.EQUIP.TYPES<1,X>
         READV T.EQUIP.STATUS FROM F.AUDIT,T.AUDIT.ID,15 THEN
            SETUP.EQUIP.TYPES<1,-1> = AVAL.EQUIP.TYPES<1,X>
         END
      NEXT X
      NUM.TYPES = DCOUNT(SETUP.EQUIP.TYPES<1>,@VM)

      LE.ROW.NUM=1
      NUM.PAGES = INT(NUM.TYPES/MAX.ROWS)
      IF NUM.PAGES < (NUM.TYPES/MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN
         IF NUM.PAGES = 0 THEN NUM.PAGES = 1
         PAGE.NUM = 1
      END
      T=' ~~                         PAGE # ':PAGE.NUM'R#2':' OF ':NUM.PAGES'R#2':' ~~ '
      T.LEN = LEN(T.HEADING)
      T.OFF = (19-T.LEN)/2
      T[7+T.OFF,T.LEN] = T.HEADING
      CRT @(31,3):T:
      T = '  ##   F   Equipment Types'

      CRT @(31,4):T:
      IF NUM.TYPES < 1 THEN
         CALL FB.PRINT.CENT(30,79,11,'** No Equipment Types On File **')
         RETURN
      END
      LE.POS = (PAGE.NUM-1)*MAX.ROWS
      LE.ROW = START.ROW
      EXIT.LE = FALSE
      LOOP
         LE.POS+=1

         E.TYPE = SETUP.EQUIP.TYPES<1,LE.POS>
         T.AUDIT.ID = CARRIER.ID:'*':E.TYPE
         READ T.AUDIT.REC FROM F.AUDIT,T.AUDIT.ID ELSE T.AUDIT.REC = ''
         TEMP = '  ':LE.POS'R%2':'  '
         BEGIN CASE
            CASE T.AUDIT.REC<FBA.EQUIP.STATUS> = FBA.DISABLE
               TEMP:=' D'
            CASE T.AUDIT.REC<FBA.EQUIP.STATUS> = FBA.ENABLE
               TEMP:=' E'
            CASE 1
               TEMP:='  '
         END CASE
         LOCATE E.TYPE IN AVAL.EQUIP.TYPES<1> SETTING X THEN
            E.DESC = AVAL.EQUIP.TYPES<2,X>
         END ELSE
            E.DESC = 'Unknown Equipment Type'
         END

         TEMP := '  ':E.DESC'L#15'
         CRT @(31,LE.ROW):TEMP
         BEGIN CASE
            CASE LE.POS = NUM.TYPES
               EXIT.LE = TRUE
            CASE LE.ROW.NUM = MAX.ROWS
               EXIT.LE = TRUE
               IF LE.POS < NUM.TYPES THEN
                  TEMP = REVON:'* Continued on next page *':REVOFF
               END ELSE
                  TEMP = REVON:'* End of Equipment Types *':REVOFF
               END
               CALL FB.PRINT.CENT(30,79,21,TEMP)

            CASE 1
               LE.ROW+=1
               LE.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.LE)
      REPEAT
      RETURN

*----------------------------------------------------------------------
* BUILD.AUDIT.ZIPS - Consolidates all the zip audit flags to be stored
*                    to disk.
* INPUT:  ALL.ZIPS
* OUTPUT: AZIPS.REC<2> - (MV) Start Zip
*         AZIPS.REC<3> - (MV) End Zip
* NOTES:  This is used to update the AZIPS.REC that will be copied to
*         AZIPS.IN.REC or AZIPS.OUT.REC.
*----------------------------------------------------------------------
BUILD.AUDIT.ZIPS:

      AZIPS.REC<2>=''                       ; * Storage for Beg
      AZIPS.REC<3>=''                       ; * Storage for End
      AZIPS.REC<4>=''                       ; * Storage for Y/N Flag
      AZIPS.REC<9>=''                       ; * Storage for Contract Amt
      AZIPS.REC<10>=''                      ; * Storage for Benchmark Amt
      AZIPS.REC<11>=''                      ; * Storage for Contract Mininum
      AZIPS.REC<12>=''                      ; * Storage for Benchmark Mininum

      MIXED.FLAG = FALSE
      MIXED.CONTR = FALSE
      EMPTY.CONTR = ''
      LAST.FLAG = ALL.ZIPS<1,1>
      LAST.CONTR = ALL.ZIPS<2,1>
      LAST.BENCH = ALL.ZIPS<3,1>
      LAST.CONTR.MIN = ALL.ZIPS<4,1>
      LAST.BENCH.MIN = ALL.ZIPS<5,1>
      LAST.BEG = 1
      LAST.END = 1
      FOR ZIP.NUM = 2 TO 1000
         T =(ALL.ZIPS<1,ZIP.NUM> # LAST.FLAG)
         T+=(ALL.ZIPS<2,ZIP.NUM> # LAST.CONTR)
         T+=(ALL.ZIPS<3,ZIP.NUM> # LAST.BENCH)
         T+=(ALL.ZIPS<4,ZIP.NUM> # LAST.CONTR.MIN)
         T+=(ALL.ZIPS<5,ZIP.NUM> # LAST.BENCH.MIN)
         IF T>0 THEN
*
* Change in flag OR table - store data and update LAST.xxxx variables.
*
            IF LAST.CONTR # '' THEN
*
* Store entries into Temp storage
*
               AZIPS.REC<2,-1> = LAST.BEG'R%3'
               AZIPS.REC<3,-1> = LAST.END'R%3'
               AZIPS.REC<4,-1> = LAST.FLAG
               AZIPS.REC<9,-1> = LAST.CONTR
               AZIPS.REC<10,-1> = LAST.BENCH
               AZIPS.REC<11,-1> = LAST.CONTR.MIN
               AZIPS.REC<12,-1> = LAST.BENCH.MIN
            END
            LAST.FLAG = ALL.ZIPS<1,ZIP.NUM>
            LAST.CONTR = ALL.ZIPS<2,ZIP.NUM>
            LAST.BENCH = ALL.ZIPS<3,ZIP.NUM>
            LAST.CONTR.MIN = ALL.ZIPS<4,ZIP.NUM>
            LAST.BENCH.MIN = ALL.ZIPS<5,ZIP.NUM>
            LAST.BEG = ZIP.NUM
            LAST.END = ZIP.NUM
         END ELSE
            LAST.END = ZIP.NUM              ; * Move end marker to curr. position.
         END
      NEXT
      RETURN

*----------------------------------------------------------------------
* BUILD.ZIP.DISPLAY -  BUILDS a pretty display of zip numbers and ranges..
*
* INPUT: T.AZIPS.REC (AZIPS.IN.REC OR AZIPS.OUT.REC)
*
* OUTPUT: TEMP - A String showing zip ranges in a displayable string
*                EXAMPLE OUTPUT: 100-200, 205, 206, 300-500, 505-507"
*
* NOTE: Zip ranges that only contain 2 zips are handled differently,
*       a comma is used instead of a dash on the display.
*
*       Watch out for the length of TEMP.  If MAY exceed the len of your
*----------------------------------------------------------------------
BUILD.ZIP.DISPLAY:

      ZIP.DISPLAY=''
      TEMP=''
      FOR AUDIT.NUM = 1 TO NUM.AUDITS
         IF TEMP THEN TEMP:=', '
         IF T.AZIPS.REC<2,AUDIT.NUM>=T.AZIPS.REC<3,AUDIT.NUM> THEN
            TEMP:= T.AZIPS.REC<2,AUDIT.NUM>'R%3'
         END ELSE
            IF AZIPS.REC<2,AUDIT.NUM>+1 = AZIPS.REC<3,AUDIT.NUM> THEN
               TEMP:= T.AZIPS.REC<2,AUDIT.NUM>'R%3':', ':T.AZIPS.REC<3,AUDIT.NUM>'R%3'
            END ELSE
               TEMP:= T.AZIPS.REC<2,AUDIT.NUM>'R%3':'-':T.AZIPS.REC<3,AUDIT.NUM>'R%3'
            END
         END
         ZIP.DISPLAY = TEMP
      NEXT AUDIT.NUM

      RETURN


*---------------------------------------------------------------------
GET.ZIP.FILE:***
*---------------------------------------------------------------------
      ZIP.FILE.CHANGE=0
      IF START.POS=0 AND STOP.POS=0 ELSE
         IF PART.STATE=1 THEN
            FOR ZIP.NUM=START.POS TO STOP.POS
               IF SA.FLAG # '' THEN ALL.ZIPS<1,ZIP.NUM>=SA.FLAG ; ZIP.FILE.CHANGE = 1
               IF SA.CONTR # '' THEN ALL.ZIPS<2,ZIP.NUM>=SA.CONTR ; ZIP.FILE.CHANGE = 1
               IF SA.BENCH # '' THEN ALL.ZIPS<3,ZIP.NUM>=SA.BENCH ; ZIP.FILE.CHANGE = 1
               IF SA.CONTRMIN # '' THEN ALL.ZIPS<4,ZIP.NUM>=SA.CONTRMIN ; ZIP.FILE.CHANGE = 1
               IF SA.BENCHMIN # '' THEN ALL.ZIPS<5,ZIP.NUM>=SA.BENCHMIN ; ZIP.FILE.CHANGE = 1
            NEXT ZIP.NUM
         END ELSE
            FOR STATE.NUM = START.POS TO STOP.POS
               FOR ZIP.NUM = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
                  IF SA.FLAG # '' THEN ALL.ZIPS<1,ZIP.NUM>=SA.FLAG ; ZIP.FILE.CHANGE = 1
                  IF SA.CONTR # '' THEN ALL.ZIPS<2,ZIP.NUM>=SA.CONTR ; ZIP.FILE.CHANGE = 1
                  IF SA.BENCH # '' THEN ALL.ZIPS<3,ZIP.NUM>=SA.BENCH ; ZIP.FILE.CHANGE = 1
                  IF SA.CONTRMIN # '' THEN ALL.ZIPS<4,ZIP.NUM>=SA.CONTRMIN ; ZIP.FILE.CHANGE = 1
                  IF SA.BENCHMIN # '' THEN ALL.ZIPS<5,ZIP.NUM>=SA.BENCHMIN ; ZIP.FILE.CHANGE = 1
               NEXT ZIP.NUM
            NEXT STATE.NUM
         END
         IF NOT(ZIP.FILE.CHANGE) THEN
            CALL ELINE('No Change Was Made')
            RETURN
         END
      END
      IF PART.STATE=1 THEN
         GOSUB DISPLAY.STATE.ZIPS
      END ELSE
         GOSUB SETUP.AUDIT.ZIPS
         GOSUB DISPLAY.STATES
      END
      RETURN

*----------------------------------------------------------------------
GET.STATE.RANGE:
*----------------------------------------------------------------------
      HELP = "[E]ntire sheet, # for single entry, #-# for a range, state code."
      IF UNDO.ZIP#'' THEN
         HELP:=' [U]ndo'
      END
      CRT @(0,22):'Enter State Number/Range or Code: ':@(-4)

      MASK = '     '
      CALL GEN.IN(34,22,MASK,'',Q,0,5,'','',2,34,22,1,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=TRIM(MASK)

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO GET.STATE.RANGE

         CASE QI = 'X' OR QI=''
            BACK.FLAG = TRUE
            BACK.FLAG = TRUE
            RETURN

         CASE QI = 'U'
            IF UNDO.ZIP='' THEN
               CALL ELINE('Invalid function')
               GOTO GET.STATE.RANGE
            END
            ALL.ZIPS=UNDO.ZIP
            START.POS=0
            STOP.POS=0
            UNDO.ZIP=''

         CASE QI = 'E'
            START.POS=1
            STOP.POS=NUM.STATES

         CASE INDEX(QI,'-',1)
            START.POS=FIELD(QI,'-',1)
            STOP.POS=FIELD(QI,'-',2)
            IF START.POS < 1 OR START.POS > NUM.STATES THEN
               CALL ELINE("Invalid Beginning STATE number entered, try again.")
               GOTO GET.STATE.RANGE
            END
            IF STOP.POS < 1 OR STOP.POS > NUM.STATES THEN
               CALL ELINE("Invalid Ending STATE number entered, try again.")
               GOTO GET.STATE.RANGE
            END
            IF START.POS > STOP.POS THEN
               CALL ELINE("Invalid Beginning STATE number must be less than Ending STATE number")
               GOTO GET.STATE.RANGE
            END

         CASE NUM(QI)
            STATE.NUM = QI'R#3'
            IF STATE.NUM < 1 OR STATE.NUM > NUM.STATES THEN
               CALL ELINE("Invalid STATE number entered, try again.")
               GOTO GET.STATE.RANGE
            END ELSE
*
* Start editing Zips...
*
               START.POS=STATE.NUM
               STOP.POS=STATE.NUM

            END

         CASE 1
            LOCATE QI IN STATE.ZIP.REC<1> SETTING WHERE THEN
               STATE.NUM = WHERE'R#3'
               IF STATE.NUM < 1 OR STATE.NUM > NUM.STATES THEN
                  CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.STATES)
                  GOTO GET.STATE.RANGE
               END ELSE
                  START.POS=STATE.NUM
                  STOP.POS=STATE.NUM
               END
            END ELSE
               CALL ELINE('Invalid response. Try again.')
               GOTO GET.STATE.RANGE
            END
      END CASE

      RETURN

*----------------------------------------------------------------------
EDIT.STATES:
*----------------------------------------------------------------------
      TEMP = STATE.NUM'R#2':') '            ; * Line Number
      TEMP:= STATE.ZIP.REC<1,STATE.NUM>:' '           ; * State ID Code
      TEMP:= STATE.ZIP.REC<2,STATE.NUM>'R%3':'-'      ; * State Low Zip
      TEMP:= STATE.ZIP.REC<3,STATE.NUM>'R%3':' '      ; * State High Zip
      ROW = 5+REM(STATE.NUM,13)
      IF ROW = 5 THEN ROW = 18
      CRT @(0,ROW):TEMP

ES.1:
      YN.FLAG = STATE.ZIP.REC<4,STATE.NUM>
      HELP = "[Y]es Include [N]o Don't Include State [*]=Partial Zips [X]=Back [EX]it"
      MASK = YN.FLAG:' '

ES.2:
      CRT @(0,22):"Select an option:":@(-4)
      CALL GEN.IN(15,ROW,MASK,'',Q,0,2,'','',2,15,ROW,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI = '' THEN QI=TRIM(MASK)
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ES.2

         CASE QI = 'X'
            BACK.FLAG = TRUE

         CASE QI=''

         CASE QI='.'
            GO EDIT.STATES
         CASE QI= 'Y' OR QI='N' OR QI='1' OR QI='0'


            IF QI='1' THEN QI='Y'
            IF QI='0' THEN QI='N'
            YN.FLAG = QI'L#1'
            STATE.ZIP.REC<4,STATE.NUM>=YN.FLAG

            STATE.ZIP.REC<9,STATE.NUM>=''   ; * CLEAR 'BLANK' FLAG

            FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
               ALL.ZIPS<1,T> = YN.FLAG
            NEXT T

         CASE QI='*'
            GOSUB EDIT.STATE.ZIPS
            GOSUB SETUP.STATE.AUDIT.ZIPS
            GOSUB DISPLAY.STATES
            IF BACK.FLAG THEN RETURN
            GOTO ES.1

         CASE 1
            CALL ELINE('Invalid option, valid options are "Y", "N", "*", "X" and "EX". Try Again.')
            GOTO ES.2
      END CASE
*
* Display the Y or N flag - Colorize It!
*
      IF YN.FLAG= 'N' THEN TEMP=BLU.ON ELSE TEMP=''
      TEMP:=YN.FLAG
      IF YN.FLAG= 'N' THEN TEMP:=TERM.NORM
      CRT @(15,ROW):TEMP


ES.3:
      CONTR = STATE.ZIP.REC<5,STATE.NUM>
      IF CONTR # '' THEN
         MASK = CONTR'R26(#8)'
      END ELSE
         MASK = ''
      END
      HELP=" [X]=Back [EX]it"

ES.4:
      CRT @(0,22):"Enter a contract per mile amount:":@(-4)
      CALL GEN.IN(17,ROW,MASK,'AMT2',Q,0,8,'','',2,17,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ES.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ES.1

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
                     ALL.ZIPS<2,T> = ''
                  NEXT T
                  CONTR=''
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ES.3
            END CASE
         CASE NUM(QI)
            CONTR=Q

         CASE 1
*            CALL ELINE('Invalid option, valid options are #, "*", "X" and "EX".  Try Again.')
            CALL ELINE('Invalid option, valid options are RETURN, SPACE, #, "X" and "EX".  Try Again.')
            GOTO ES.4
      END CASE
      STATE.ZIP.REC<5,STATE.NUM> = CONTR
      FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
         ALL.ZIPS<2,T> = CONTR
      NEXT T

      IF CONTR='' THEN
         CRT @(17,ROW):CONTR'R#8'
      END ELSE
         CRT @(17,ROW):CONTR'R26#8'
      END

ES.5:
      BENCH = STATE.ZIP.REC<6,STATE.NUM>
      IF BENCH # '' THEN
         MASK = BENCH'R26(#8)'
      END ELSE
         MASK = ''
      END
      HELP=" [X]=Back [EX]it"
ES.6:
      CRT @(0,22):"Enter a benchmark per mile amount:":@(-4)
      CALL GEN.IN(27,ROW,MASK,'AMT2',Q,0,8,'','',2,27,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ES.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ES.3

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
                     ALL.ZIPS<3,T> = ''
                  NEXT T
                  BENCH = ''
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ES.5
            END CASE

         CASE NUM(QI)
            BENCH=Q

         CASE 1
*            CALL ELINE('Invalid option, valid options are #, "X" and "EX".  Try Again.')
            CALL ELINE('Invalid option, valid options are RETURN, SPACE, #, "X" and "EX".  Try Again.')
            GOTO ES.6
      END CASE
      STATE.ZIP.REC<6,STATE.NUM> = BENCH
      FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
         ALL.ZIPS<3,T> = BENCH
      NEXT T
      IF BENCH='' THEN
         CRT @(27,ROW):BENCH'R#8'
      END ELSE
         CRT @(27,ROW):BENCH'R26#8'
      END

ES.7:
      CONTR.MIN = STATE.ZIP.REC<7,STATE.NUM>
      IF CONTR.MIN # '' THEN
         MASK = CONTR.MIN'R26(#8)'
      END ELSE
         MASK = ''
      END
      HELP=" [X]=Back [EX]it"
ES.8:
      CRT @(0,22):"Enter a contract mininmum amount:":@(-4)
      CALL GEN.IN(37,ROW,MASK,'AMT2',Q,0,8,'','',2,37,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ES.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ES.5

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
                     ALL.ZIPS<4,T> = ''
                  NEXT T
                  CONTR.MIN = ''
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ES.7
            END CASE

         CASE NUM(QI)
            CONTR.MIN=Q

         CASE 1
*            CALL ELINE('Invalid option, valid options are #, "X" and "EX".  Try Again.')
            CALL ELINE('Invalid option, valid options are RETURN, SPACE, #, "X" and "EX".  Try Again.')
            GOTO ES.8
      END CASE
      IF CONTR.MIN#'' AND STATE.ZIP.REC<5,STATE.NUM>='' THEN
         CALL ELINE('Cannot enter a contract minimum without a contract amount')
         GOTO ES.8
      END
      STATE.ZIP.REC<7,STATE.NUM> = CONTR.MIN
      FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
         ALL.ZIPS<4,T> = CONTR.MIN
      NEXT T
      IF CONTR.MIN='' THEN
         CRT @(37,ROW):CONTR.MIN'R#8'
      END ELSE
         CRT @(37,ROW):CONTR.MIN'R26#8'
      END

ES.9:
      BENCH.MIN = STATE.ZIP.REC<8,STATE.NUM>
      IF BENCH.MIN # '' THEN
         MASK = BENCH.MIN'R26(#8)'
      END ELSE
         MASK = ''
      END
      HELP=" [X]=Back [EX]it"
ES.10:
      CRT @(0,22):"Enter a benchmark mininmum amount:":@(-4)
      CALL GEN.IN(47,ROW,MASK,'AMT2',Q,0,8,'','',2,47,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ES.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ES.7

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
                     ALL.ZIPS<6,T> = ''
                  NEXT T
                  BENCH.MIN = ''
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ES.7
            END CASE

         CASE NUM(QI)
            BENCH.MIN=Q

         CASE 1
*            CALL ELINE('Invalid option, valid options are #, "X" and "EX".  Try Again.')
            CALL ELINE('Invalid option, valid options are RETURN, SPACE, #, "X" and "EX".  Try Again.')
            GOTO ES.9
      END CASE
      STATE.ZIP.REC<8,STATE.NUM> = BENCH.MIN
      FOR T = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
         ALL.ZIPS<5,T> = BENCH.MIN
      NEXT T
      IF BENCH.MIN='' THEN
         CRT @(47,ROW):BENCH.MIN'R#8'
      END ELSE
         CRT @(47,ROW):BENCH.MIN'R26#8'
      END

      RETURN

*---------------------------------------------------------------------
* GET.CHANGE.INFO
*
* RETURNS:  SA.FLAG     - New Flag
*           SA.CONTR    - New Contract
*           SA.BENCH    - New Benchmark
*           SA.CONTRMIN - New Contract Min
*           SA.BENCHMIN - New Bench Min
*           BACK.FLAG  - User Does not want to set up tables
*           EXIT.IT  - User wants to exit program
*
*----------------------------------------------------------------------
GET.CHANGE.INFO:***
      CRT @(0,19):STR('-',79)
      IF REVERSE.CODE THEN
         CRT @(36,19):"REVERSE"
      END ELSE
         CRT @(36,19):"CHANGE TO-"
      END
      CRT @(0,20):"Flag:    Contr:           Bench:          ContrMin:          BenchMin:         "
      SA.FLAG=''
      SA.CONTR=''
      SA.BENCH=''
      SA.CONTRMIN=''
      SA.BENCHMIN=''
ENTER.FLAG:***
      HELP='Enter Flag. [Y]es, [N]o, [*]=ALL'
      MASK=SA.FLAG'L#2'
      CALL GEN.IN(6,20,MASK,'',Q,0,2,'','',2,6,20,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      QI=TRIM(QI)
      IF QI='1' THEN QI='Y'
      IF QI='0' THEN QI='N'
      BEGIN CASE
         CASE QI='X' OR QI=''
            BACK.FLAG = TRUE
            BACK.FLAG=TRUE
            IF PART.STATE THEN
               CRT @(0,19):SPACE(30):'+':STR('-',47):'+'
            END ELSE
               CRT @(0,19):SPACE(80)
            END
            CRT @(0,20):SPACE(80)
            RETURN

         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.FLAG
            END
         CASE QI='Y' OR QI='N' OR QI='*'
         CASE 1
            CALL ELINE('Invalid Entry. Please try again.')
            GOTO ENTER.FLAG
      END CASE
      SA.FLAG=QI
      CRT @(6,20):SA.FLAG'L#2'

ENTER.CONTR:***

      HELP="Enter New Contract Amount."
      MASK=SA.CONTR'R26#8'
      CALL GEN.IN(16,20,MASK,'AMT2',Q,0,8,'','',8,16,20,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      QI=TRIM(QI)
      BEGIN CASE
         CASE QI='X'
            BACK.FLAG = TRUE
            CRT @(16,20):SA.CONTR'R26#8'
            GOTO ENTER.FLAG
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.CONTR
            END
         CASE QI = ''
            SA.CONTR = ''
         CASE NUM(QI)
            SA.CONTR = Q
         CASE QI=''
      END CASE
      IF SA.CONTR='' THEN
         CRT @(16,20):SA.CONTR'R#8'
      END ELSE
         CRT @(16,20):SA.CONTR'R26#8'
      END
ENTER.BENCH:***
      HELP="Enter New Benchmark Amount."
      MASK=SA.BENCH'R26#8'
      CALL GEN.IN(33,20,MASK,'AMT2',Q,0,8,'','',8,33,20,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      QI=TRIM(QI)
      BEGIN CASE
         CASE QI='X'
            BACK.FLAG = TRUE
            CRT @(33,20):SA.BENCH'R26#8'
            GOTO ENTER.CONTR
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.BENCH
            END
         CASE QI = ''
            SA.BENCH = ''
         CASE NUM(QI)
            SA.BENCH = Q
         CASE QI=''
      END CASE
      IF SA.BENCH='' THEN
         CRT @(33,20):SA.BENCH'R#8'
      END ELSE
         CRT @(33,20):SA.BENCH'R26#8'
      END
ENTER.CONTRMIN:***
      HELP="Enter New Contract Mininum Amount."
      MASK=SA.CONTRMIN'R26#8'
      CALL GEN.IN(52,20,MASK,'AMT2',Q,0,8,'','',8,52,20,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      QI=TRIM(QI)
      BEGIN CASE
         CASE QI='X'
            BACK.FLAG = TRUE
            CRT @(52,20):SA.CONTRMIN'R26#8'
            GOTO ENTER.BENCH
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.BENCH
            END
         CASE QI = ''
            SA.CONTRMIN = ''
         CASE NUM(QI)
            SA.CONTRMIN = Q
         CASE QI=''
      END CASE
      IF SA.CONTRMIN#'' AND SA.CONTR='' THEN
         CALL ELINE('Cannot enter a contract minimum without a contract')
         GOTO ENTER.CONTRMIN
      END
      IF SA.CONTRMIN='' THEN
         CRT @(52,20):SA.CONTRMIN'R#8'
      END ELSE
         CRT @(52,20):SA.CONTRMIN'R26#8'
      END

ENTER.BENCHMIN:***
      HELP="Enter New Benchmark Mininum Amount."
      MASK=SA.BENCHMIN'R26#8'
      CALL GEN.IN(71,20,MASK,'AMT2',Q,0,8,'','',8,71,20,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      QI=TRIM(QI)
      BEGIN CASE
         CASE QI='X'
            BACK.FLAG = TRUE
            CRT @(71,20):SA.BENCHMIN'R26#8'
            GOTO ENTER.CONTRMIN
         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO ENTER.BENCHMIN
            END
         CASE QI = ''
            SA.BENCHMIN = ''

         CASE NUM(QI)
            SA.BENCHMIN = Q
         CASE QI=''
      END CASE
      IF SA.BENCHMIN='' THEN
         CRT @(71,20):SA.BENCHMIN'R#8'
      END ELSE
         CRT @(71,20):SA.BENCHMIN'R26#8'
      END
      RETURN

*----------------------------------------------------------------------
EDIT.STATE.ZIPS:***
*----------------------------------------------------------------------
      PAGE.NUM = 1

      GOSUB INIT.SCREEN
      CRT @(25,0):CLIENT.ID'L#5':' ':CL.NAME'L#20'
      CRT @(25,1):CARRIER.ID'L#5':' ':CARRIER.NAME'L#20'

ESZ.1.0:
      GOSUB DISPLAY.STATE.ZIPS

ESZ.2.0:
      CRT @(0,6):TABLE.HEADING[1,25]
      CRT @(0,8):TABLE.HEADING[51,8]
      CRT @(0,10):TABLE.HEADING[63,18]
      CRT @(0,22):'Enter Option :    ':@(-4)
      PART.STATE=1
      HELP = "[E]nter [C]hange [R]everse ''=Next pg [T]op [B]ack [X]=Exit"
      IF UNDO.STATE#ALL.ZIPS THEN
         HELP = "[E]nter [C]hang [R]ev [U]ndo ''=Nxt pg [T]op [B]ack [X]=Exit"
      END
      MASK = '-'

      CALL GEN.IN(16,22,MASK,'',Q,0,7,'','',2,16,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ESZ.1.0

         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN

         CASE QI=''
            PAGE.NUM = PAGE.NUM + 1
            GO ESZ.1.0

         CASE QI = 'U' AND UNDO.STATE#ALL.ZIPS
            ALL.ZIPS=UNDO.STATE
            START.POS=0
            STOP.POS=0
            GOSUB GET.ZIP.FILE
            GOTO ESZ.2.0

         CASE QI = 'E'
            BACK.FLAG=FALSE
            UNDO.STATE=ALL.ZIPS
ENTER.STATE.ZIP:***
            GOSUB GET.ZIP.RANGE
            IF BACK.FLAG THEN GOTO ESZ.2.0
            ZIP.NUM=START.POS
            LOOP
               GOSUB EDIT.STATE.ZIP
               IF NOT(BACK.FLAG) THEN
                  IF ZIP.NUM+1 <= STOP.POS THEN
                     ZIP.NUM+=1
                  END ELSE
                     GOTO ENTER.STATE.ZIP
                  END
               END ELSE
                  BACK.FLAG=FALSE
                  GOTO ENTER.STATE.ZIP
               END
            WHILE NOT(BACK.FLAG)
            REPEAT
            GOTO ENTER.STATE.ZIP

         CASE QI='C'
            REVERSE.CODE=0
            BACK.FLAG=FALSE
            UNDO.STATE=ALL.ZIPS
CHANGE.STATE.ZIP:***
            GOSUB GET.CHANGE.INFO
            IF BACK.FLAG THEN
               GOTO ESZ.2.0
            END
CHANGE.STATE.ZIP.RANGE:***
            GOSUB GET.ZIP.RANGE
            IF BACK.FLAG THEN
               BACK.FLAG=FALSE
               GOTO ESZ.2.0
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO CHANGE.STATE.ZIP.RANGE

         CASE QI='R'
            REVERSE.CODE=1
            BACK.FLAG=FALSE
            UNDO.STATE=ALL.ZIPS
REVERSE.STATE.ZIP:***
            GOSUB GET.CHANGE.INFO
            IF BACK.FLAG THEN
               GOTO ESZ.2.0
            END
REVERSE.STATE.ZIP.RANGE:***
            GOSUB GET.ZIP.RANGE
            IF BACK.FLAG THEN
               BACK.FLAG=FALSE
               GOTO REVERSE.STATE.ZIP
            END
            UNDO.ZIP=ALL.ZIPS
            GOSUB GET.ZIP.FILE
            GOTO REVERSE.STATE.ZIP.RANGE

         CASE NUM(QI) AND ((STATE.ZIP.REC<2,STATE.NUM> < 5 AND LEN(QI)=3) OR (QI>5))
            ZIP.NUM = QI'R%3'
            IF ZIP.NUM < STATE.ZIP.REC<2,STATE.NUM> OR ZIP.NUM > STATE.ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid zip number entered, try again.")
            END ELSE
               UNDO.STATE=ALL.ZIPS
               GOSUB EDIT.STATE.ZIP
            END
            GOTO ESZ.2.0

         CASE QI=''
            PAGE.NUM+=1
            GOSUB DISPLAY.STATE.ZIPS
            GOTO ESZ.1.0

         CASE QI='T'
            IF PAGE.NUM # 1 THEN
               PAGE.NUM=1
               GOSUB DISPLAY.STATE.ZIPS
            END
            GOTO ESZ.2.0

         CASE QI='B' OR QI='-'
            IF PAGE.NUM > 1 THEN
               PAGE.NUM-=1
               GOSUB DISPLAY.STATE.ZIPS
            END
            GOTO ESZ.2.0

         CASE QI='R'
            GOTO ESZ.1.0

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO ESZ.1.0
      END CASE
      PART.STATE=0
      GOSUB SETUP.STATE.AUDIT.ZIPS

*----------------------------------------------------------------------
EDIT.STATE.ZIP:
*----------------------------------------------------------------------
      ROW = 5+REM(ZIP.NUM-STATE.ZIP.REC<2,STATE.NUM>+1,13)
      IF ROW = 5 THEN ROW = 18

ESZ.1:
      YN.FLAG = ALL.ZIPS<1,ZIP.NUM>
      HELP = "[Y]es Include [N]o Don't Include Zip [X]=Back [EX]it"
      MASK = YN.FLAG:' '

ESZ.2:
      CRT @(0,22):"Select an option:":@(-4)
      CALL GEN.IN(35,ROW,MASK,'',Q,0,2,'','',2,35,ROW,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ESZ.2

         CASE QI = 'X'
            BACK.FLAG = TRUE
            BACK.FLAG = TRUE
            RETURN

         CASE QI=''

         CASE QI= 'Y' OR QI='N' OR QI='1' OR QI='0'
            IF QI='1' THEN QI='Y'
            IF QI='0' THEN QI='N'
            YN.FLAG = QI'L#1'
            ALL.ZIPS<1,ZIP.NUM>=YN.FLAG

         CASE 1
            CALL ELINE('Invalid option, valid options are "Y", "N", RETURN, "X" and "EX". Try Again.')
            GOTO ESZ.2
      END CASE
*
* Display the Y or N flag - Colorize It!
*
      IF YN.FLAG= 'N' THEN TEMP=BLU.ON ELSE TEMP=''
      TEMP:=YN.FLAG
      IF YN.FLAG= 'N' THEN TEMP:=TERM.NORM
      CRT @(35,ROW):TEMP

ESZ.3:
      CONTR = ALL.ZIPS<2,ZIP.NUM>
      IF CONTR # '' THEN
         MASK = CONTR'R26(#8)'
      END ELSE
         MASK = ''
      END

ESZ.4:
      CRT @(0,22):"Enter a contract per mile amount:":@(-4)
      CALL GEN.IN(38,ROW,MASK,'AMT2',Q,0,8,'','',2,38,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ESZ.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ESZ.1

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  ALL.ZIPS<2,ZIP.NUM>=''
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ESZ.3
            END CASE

         CASE NUM(QI)
            CONTR=Q

         CASE 1
*            CALL ELINE('Invalid option, valid options are #, "*", "X" and "EX".  Try Again.')
            CALL ELINE('Invalid option, valid options are RETURN, SPACE, #, "X" and "EX".  Try Again.')
            GOTO ESZ.4
      END CASE
      ALL.ZIPS<2,ZIP.NUM>=CONTR
      IF CONTR='' THEN
         CRT @(38,ROW):CONTR'R#8'
      END ELSE
         CRT @(38,ROW):CONTR'R26#8'
      END

ESZ.5:
      BENCH = ALL.ZIPS<3,ZIP.NUM>
      IF BENCH # '' THEN
         MASK = BENCH'R26(#8)'
      END ELSE
         MASK = ''
      END
ESZ.6:
      CRT @(0,22):"Enter a benchmark per mile amount:":@(-4)
      CALL GEN.IN(48,ROW,MASK,'AMT2',Q,0,8,'','',2,48,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ESZ.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ESZ.3

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  ALL.ZIPS<3,ZIP.NUM>=YN.FLAG
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ESZ.5
            END CASE

         CASE NUM(QI)
            BENCH=Q

         CASE 1
            CALL ELINE('Invalid option, valid options are RETURN, SPACE, #, "X" and "EX".  Try Again.')
            GOTO ESZ.6
      END CASE
      ALL.ZIPS<3,ZIP.NUM>=BENCH
      IF BENCH='' THEN
         CRT @(48,ROW):BENCH'R#8'
      END ELSE
         CRT @(48,ROW):BENCH'R26#8'
      END

ESZ.7:
      CONTR.MIN = ALL.ZIPS<4,ZIP.NUM>
      IF CONTR.MIN # '' THEN
         MASK = CONTR.MIN'R26(#8)'
      END ELSE
         MASK = ''
      END
ESZ.8:
      CRT @(0,22):"Enter a contract mininmum amount:":@(-4)
      CALL GEN.IN(58,ROW,MASK,'AMT2',Q,0,8,'','',2,58,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ESZ.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ESZ.5

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  ALL.ZIPS<3,ZIP.NUM>=YN.FLAG
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ESZ.7
            END CASE

         CASE NUM(QI)
            CONTR.MIN=Q

         CASE 1
            CALL ELINE('Invalid option, valid options are #, RETURN, SPACE, "X" and "EX".  Try Again.')
            GOTO ESZ.8
      END CASE
      IF CONTR.MIN#'' AND ALL.ZIPS<2,ZIP.NUM>='' THEN
         CALL ELINE('Cannot enter a contract minimum without a contract amount')
         GOTO ESZ.7
      END
      ALL.ZIPS<4,ZIP.NUM>=CONTR.MIN
      IF CONTR.MIN='' THEN
         CRT @(58,ROW):CONTR.MIN'R#8'
      END ELSE
         CRT @(58,ROW):CONTR.MIN'R26(#8)'
      END

ESZ.9:
      BENCH.MIN = ALL.ZIPS<5,ZIP.NUM>
      IF BENCH.MIN # '' THEN
         MASK = BENCH.MIN'R26(#8)'
      END ELSE
         MASK = ''
      END
ESZ.10:
      CRT @(0,22):"Enter a benchmark mininmum amount:":@(-4)
      CALL GEN.IN(68,ROW,MASK,'AMT2',Q,0,8,'','',2,68,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ESZ.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO ESZ.7

         CASE QI=''

         CASE QI=' '
            BEGIN CASE
               CASE YN.FLAG = 'N'
                  ALL.ZIPS<5,ZIP.NUM>=YN.FLAG
               CASE YN.FLAG = 'Y'
                  CALL ELINE('You cant clear a contract amount with a state marked "Y" - It must be "N" first!')
                  GOTO ESZ.7
            END CASE

         CASE NUM(QI)
            BENCH.MIN=Q

         CASE 1
            CALL ELINE('Invalid option, valid options are #, RETURN, "X" and "EX".  Try Again.')
            GOTO ESZ.9
      END CASE
      ALL.ZIPS<5,ZIP.NUM>=BENCH.MIN
      IF BENCH.MIN='' THEN
         CRT @(68,ROW):BENCH.MIN'R#8'
      END ELSE
         CRT @(68,ROW):BENCH.MIN'R26#8'
      END

      RETURN

*----------------------------------------------------------------------
* GET.ZIP.RANGE
*----------------------------------------------------------------------
GET.ZIP.RANGE:
      HELP = "OPTIONS: [E]ntire sheet, # for single entry, #-# for a range, zip code."
      IF UNDO.ZIP#'' THEN
         HELP:=' [U]ndo'
      END
      CRT @(0,22):'Enter Zip Number/Range or Code: ':@(-4)

      MASK = '       '
      CALL GEN.IN(34,22,MASK,'',Q,0,7,'','',2,34,22,1,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=TRIM(MASK)

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO GET.STATE.RANGE
         CASE QI = 'X' OR QI=''
            BACK.FLAG = TRUE
            RETURN

         CASE QI = 'U'
            IF UNDO.ZIP='' THEN
               CALL ELINE('Invalid function')
               GOTO GET.STATE.RANGE
            END
            ALL.ZIPS=UNDO.ZIP
            START.POS=0
            STOP.POS=0
            UNDO.ZIP=''
         CASE QI = 'E'
            START.POS=STATE.ZIP.REC<2,STATE.NUM>
            STOP.POS=STATE.ZIP.REC<3,STATE.NUM>
*
* Range Selection
*
         CASE INDEX(QI,'-',1)
            START.POS=FIELD(QI,'-',1)
            STOP.POS=FIELD(QI,'-',2)
            IF START.POS < STATE.ZIP.REC<2,STATE.NUM> OR START.POS > STATE.ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid Beginning ZIP number entered, try again.")
               GOTO GET.ZIP.RANGE
            END
            IF STOP.POS < STATE.ZIP.REC<2,STATE.NUM> OR STOP.POS > STATE.ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid Ending ZIP number entered, try again.")
               GOTO GET.ZIP.RANGE
            END
            IF START.POS > STOP.POS THEN
               CALL ELINE("Invalid Beginning ZIP number must be less than Ending ZIP number")
               GOTO GET.ZIP.RANGE
            END
*
* Individual Selection
*
         CASE NUM(QI)
            ZIP.NUM = QI'R#3'
            IF ZIP.NUM < STATE.ZIP.REC<2,STATE.NUM> OR ZIP.NUM > STATE.ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid ZIP number entered, try again.")
               GOTO GET.ZIP.RANGE
            END ELSE
*
* Start editing Zips...
*
               START.POS=ZIP.NUM
               STOP.POS=ZIP.NUM

            END

*
* Idiot ENTER...
*
         CASE 1
            CALL ELINE('Invalid response. Try again.')
            GOTO GET.ZIP.RANGE
      END CASE

      RETURN




*----------------------------------------------------------------------
DISPLAY.STATES:
*----------------------------------------------------------------------
      CALL FB.DRAW.BOX(0,2,79,20,' ','--- --- ')      ; * Full box image + header

*
* Display Heading
*
      NUM.PAGES = INT(NUM.STATES/PAGE.SIZE)+1
      IF TABLE.HEADING # '' THEN CALL FB.PRINT.CENT(0,79,3,TABLE.HEADING)
      TEMP='##  ST LOW-HGH F     Contr     Bench    Ctr Min    Bch Min'
      CRT @(0,4):TEMP
      TEMP=STR('=',LEN(TEMP)):'  '
      CRT @(0,5):TEMP
      CRT @(0,20):FOOTER'L#78'
      STR.OUT = '(Page ':DSP.PAGE'R#1':' of ':NUM.PAGES:')'
      CRT @(78-LEN(STR.OUT),20):STR.OUT

      Y = 0
      LAST.Y = 0
      STATE = (DSP.PAGE-1)*PAGE.SIZE+1

      LOOP
      UNTIL (Y=>PAGE.SIZE)
         BEGIN CASE
            CASE STATE > DSP.NUM.LINES
               DESC=''
               PAGE=1

            CASE STATE.ZIP.REC<2,STATE>=''
               DESC= STATE'R#2':') '
               STATE+=1
               IF LAST.Y = 0 THEN LAST.Y = Y+1

            CASE 1
               DESC= STATE'R#2':') '
               DESC:= STATE.ZIP.REC<1,STATE>:' '
               DESC:= STATE.ZIP.REC<2,STATE>:'-'
               DESC:= STATE.ZIP.REC<3,STATE>:' '
               TEMP = ''
               T = STATE.ZIP.REC<4,STATE>'L#1'        ; * Y/N Flag
               IF T = 'N' THEN TEMP:=BLU.ON
               TEMP:= T
               IF T = 'N' THEN TEMP:=TERM.NORM
               TEMP:=' '
               IF T # '*' THEN
                  DESC:= TEMP
                  IF STATE.ZIP.REC<5,STATE>='' THEN
                     DESC:= STATE.ZIP.REC<5,STATE>'R#8':'  '
                  END ELSE
                     DESC:= STATE.ZIP.REC<5,STATE>'R26#8':'  '
                  END
                  IF STATE.ZIP.REC<6,STATE>='' THEN
                     DESC:= STATE.ZIP.REC<6,STATE>'R#8':'  '
                  END ELSE
                     DESC:= STATE.ZIP.REC<6,STATE>'R26#8':'  '
                  END
                  IF STATE.ZIP.REC<7,STATE>='' THEN
                     DESC:= STATE.ZIP.REC<7,STATE>'R#8':'  '
                  END ELSE
                     DESC:= STATE.ZIP.REC<7,STATE>'R26#8':'  '
                  END
                  IF STATE.ZIP.REC<8,STATE>='' THEN
                     DESC:= STATE.ZIP.REC<8,STATE>'R#8'
                  END ELSE
                     DESC:= STATE.ZIP.REC<8,STATE>'R26#8'
                  END
               END ELSE
                  DESC:= TEMP
               END
               STATE+=1
         END CASE

         Y+=1                               ; * Inc Y screen position
         CRT @(0,START.Y+Y):DESC:@(-4)      ; * Draw screen line
      REPEAT

      RETURN

*----------------------------------------------------------------------
* DISPLAY.STATE.ZIPS
*----------------------------------------------------------------------
DISPLAY.STATE.ZIPS:

      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')
      S.ZIP = STATE.ZIP.REC<2,STATE.NUM>    ; * State Low Zip
      E.ZIP = STATE.ZIP.REC<3,STATE.NUM>    ; * State High Zip
      N.ZIPS = E.ZIP-S.ZIP+1
      NUM.PAGES = INT(N.ZIPS/PAGE.SIZE)+1
      IF NUM.PAGES < 1 THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN PAGE.NUM = 1
      TEMP=' ~~ STATE: ':STATE.ZIP.REC<1,STATE.NUM>:'               '
      TEMP:='PAGE # ':PAGE.NUM'R#2':' OF ':NUM.PAGES'R#2':' ~~ '
      CRT @(31,3):TEMP:
      TEMP='ZIP F     Contr    Bench    Ctr Min  Bench Min'
      CRT @(31,4):TEMP
      Y = 0
      LAST.Y = 0
      ZIP = S.ZIP + (PAGE.NUM-1)*PAGE.SIZE

      LOOP
      UNTIL (Y=>PAGE.SIZE)
         BEGIN CASE
            CASE ZIP > E.ZIP
               DESC=''
               PAGE=1

            CASE ALL.ZIPS<1,ZIP>=''
               DESC= ZIP'R%3'
               TEMP = ' '
               T = ALL.ZIPS<1,ZIP>'L#1'     ; * Y/N Flag
               IF T = 'N' THEN TEMP:=BLU.ON
               TEMP:= T
               IF T = 'N' THEN TEMP:=TERM.NORM
               TEMP:=' '
               DESC:= TEMP:' '
               DESC:= 0'R26#8':'  '
               DESC:= 0'R26#8':'  '
               DESC:= 0'R26#8':'  '
               DESC:= 0'R26#8'
               ZIP+=1

            CASE 1
               DESC= ZIP'R%3'
               TEMP = ' '
               T = ALL.ZIPS<1,ZIP>'L#1'     ; * Y/N Flag
               IF T = 'N' THEN TEMP:=BLU.ON
               TEMP:= T
               IF T = 'N' THEN TEMP:=TERM.NORM
               TEMP:=' '
               DESC:= TEMP:' '
               IF ALL.ZIPS<2,ZIP>='' THEN
                  DESC:= ALL.ZIPS<2,ZIP>'R#8':'  '
               END ELSE
                  DESC:= ALL.ZIPS<2,ZIP>'R26#8':'  '
               END
               IF ALL.ZIPS<3,ZIP>='' THEN
                  DESC:= ALL.ZIPS<3,ZIP>'R#8':'  '
               END ELSE
                  DESC:= ALL.ZIPS<3,ZIP>'R26#8':'  '
               END
               IF ALL.ZIPS<4,ZIP>='' THEN
                  DESC:= ALL.ZIPS<4,ZIP>'R#8':'  '
               END ELSE
                  DESC:= ALL.ZIPS<4,ZIP>'R26#8':'  '
               END
               IF ALL.ZIPS<5,ZIP>='' THEN
                  DESC:= ALL.ZIPS<5,ZIP>'R#8'
               END ELSE
                  DESC:= ALL.ZIPS<5,ZIP>'R26#8'
               END
               ZIP+=1
         END CASE

         Y+=1                               ; * Inc Y screen position
         CRT @(31,START.Y+Y):DESC           ; * Draw screen line
      REPEAT

      RETURN



*----------------------------------------------------------------------
* EXTRACT.AUDIT.ZIPS - This Builds ALL.ZIPS from AZIPS.REC
*
* INPUT : AZIPS.REC<2> - (MV) Start Zip
*         AZIPS.REC<3> - (MV) End Zip
*         AZIPS.REC<4> - (MV) Y/N Flag
*         AZIPS.REC<9> - (MV) Contract
*         AZIPS.REC<10>- (MV) Benchmark
*         AZIPS.REC<11>- (MV) Contract Min
*         AZIPS.REC<12>- (MV) Benchmark Min
*
* OUTPUT: ALL.ZIPS<X,1-999> - Direct Access to Zip 1-999 to alter Included
*                             or exculded or table number
*         ALL.ZIPS<1> - (MV) Y/N Flag
*         ALL.ZIPS<2> - (MV) Contract
*         ALL.ZIPS<3> - (MV) Benchmark
*         ALL.ZIPS<4> - (MV) Contract Min
*         ALL.ZIPS<5> - (MV) Benchmark Min
*
* NOTES:  Initalize AZIPS.REC with AZIPS.IN.REC or AZIPS.OUT.REC and call
*         this routine to build the ALL.ZIPS array for processing.
*
*----------------------------------------------------------------------
EXTRACT.AUDIT.ZIPS:
      ALL.ZIPS = 0
      FOR ZIP.NUM = 1 TO 999                ; * 999+1 = LAST MARKER
         ALL.ZIPS<1,ZIP.NUM> = FALSE
         ALL.ZIPS<2,ZIP.NUM> = ''
         ALL.ZIPS<3,ZIP.NUM> = ''
         ALL.ZIPS<4,ZIP.NUM> = ''
         ALL.ZIPS<5,ZIP.NUM> = ''
      NEXT ZIP.NUM
      ALL.ZIPS<1,1000> = ''
      ALL.ZIPS<2,1000> = ''
      ALL.ZIPS<3,1000> = ''
      ALL.ZIPS<4,1000> = ''
      ALL.ZIPS<5,1000> = ''

      FOR X = 1 TO NUM.STATES
         FOR Y = STATE.ZIP.REC<2,X> TO STATE.ZIP.REC<3,X>
            ALL.ZIPS<1,Y> = 'N'
            ALL.ZIPS<2,Y> = ''
            ALL.ZIPS<3,Y> = ''
            ALL.ZIPS<4,Y> = ''
            ALL.ZIPS<5,Y> = ''
         NEXT Y
      NEXT X
      NUM.AUDITS = DCOUNT(AZIPS.REC<2>, @VM)
      FOR AUDIT.NUM = 1 TO NUM.AUDITS
         FOR ZIP.NUM = AZIPS.REC<2,AUDIT.NUM> TO AZIPS.REC<3,AUDIT.NUM>
            IF ALL.ZIPS<1,ZIP.NUM> # FALSE THEN
               ALL.ZIPS<1,ZIP.NUM> = AZIPS.REC<4,AUDIT.NUM>
               ALL.ZIPS<2,ZIP.NUM> = AZIPS.REC<9,AUDIT.NUM>
               ALL.ZIPS<3,ZIP.NUM> = AZIPS.REC<10,AUDIT.NUM>
               ALL.ZIPS<4,ZIP.NUM> = AZIPS.REC<11,AUDIT.NUM>
               ALL.ZIPS<5,ZIP.NUM> = AZIPS.REC<12,AUDIT.NUM>
            END
         NEXT ZIP.NUM
      NEXT AUDIT.NUM
      RETURN

*----------------------------------------------------------------------
* SETUP.AUDIT.ZIPS - Builds the Zips record grouped by state.  This
*                    record (STATE.ZIP.REC) is mainly used for display
*                    purposes only.
*
* INPUT: ALL.ZIPS        - Array of all 3 digit zips (atribute value
*                          is ZIP Code)
*        STATE.ZIP.REC   - The arranged record 3.ZIPS from ZIPS.CODES.
*
* OUTPUT:
*        STATE.ZIP.REC<1> = (MV) STATE CODE
*        STATE.ZIP.REC<2> = (MV) LOW ZIP CODE VALUE
*        STATE.ZIP.REC<3> = (MV) HIGH ZIP CODE VALUE
*        STATE.ZIP.REC<4> = # = Table number used for entire state.
*                           * = Mixed Contract Numbers, Or partial
*                               selection for state.
*                          '' = Nothing selected for this state.
*        STATE.ZIP.REC<5> = Contract Amt
*        STATE.ZIP.REC<6> = Benchmark Amt
*        STATE.ZIP.REC<7> = Contract Minimum
*        STATE.ZIP.REC<8> = Benchmark Minimum
*        STATE.ZIP.REC<9> = ' ' = Includes a NULL table number for this state
*                           ''  = All tables are the same
*
*----------------------------------------------------------------------
SETUP.AUDIT.ZIPS:
*
* Process all states.
*
      FOR STATE.NUM = 1 TO NUM.STATES
SETUP.STATE.AUDIT.ZIPS:
         MIXED.FLAG = FALSE
         MIXED.CONTR = FALSE
         EMPTY.CONTR = FALSE
         LAST.CONTR = ALL.ZIPS<2,STATE.ZIP.REC<2,STATE.NUM>>
         LAST.BENCH = ALL.ZIPS<3,STATE.ZIP.REC<2,STATE.NUM>>
         LAST.CONTR.MIN = ALL.ZIPS<4,STATE.ZIP.REC<2,STATE.NUM>>
         LAST.BENCH.MIN = ALL.ZIPS<5,STATE.ZIP.REC<2,STATE.NUM>>
         LAST.YN.FLAG = ''                  ; * Must USE NULL,
         STATE.ZIP.REC<8,STATE.NUM>=''

         FOR Y = STATE.ZIP.REC<2,STATE.NUM> TO STATE.ZIP.REC<3,STATE.NUM>
            IF ALL.ZIPS<1,Y> # '' THEN
               IF LAST.YN.FLAG='' THEN
                  LAST.YN.FLAG = ALL.ZIPS<1,Y>
               END ELSE
                  IF LAST.YN.FLAG # ALL.ZIPS<1,Y> THEN MIXED.FLAG=TRUE
               END
               IF ALL.ZIPS<2,Y> = '' THEN EMPTY.CONTR = TRUE
               IF LAST.CONTR # ALL.ZIPS<2,Y> THEN MIXED.CONTR=TRUE
            END ELSE
               ALL.ZIPS<1,Y> = 'N'
               CALL ELINE('CALL PROGRAMMING!')
               CALL ELINE('NON FATAL PROBLEM - SETUP.STATE.AUDIT.ZIPS HAD A STATE ZIP ':Y:' WHICH WAS NULL!')
            END
         NEXT Y

         IF MIXED.FLAG THEN LAST.YN.FLAG = PARTIAL
*NPR01         IF MIXED.CONTR THEN LAST.CONTR = PARTIAL
         IF EMPTY.CONTR THEN STATE.ZIP.REC<8,STATE.NUM>=' '

         BEGIN CASE
            CASE LAST.YN.FLAG # ''
               STATE.ZIP.REC<4,STATE.NUM> = LAST.YN.FLAG
               STATE.ZIP.REC<5,STATE.NUM> = LAST.CONTR
               STATE.ZIP.REC<6,STATE.NUM> = LAST.BENCH
               STATE.ZIP.REC<7,STATE.NUM> = LAST.CONTR.MIN
               STATE.ZIP.REC<8,STATE.NUM> = LAST.BENCH.MIN

            CASE 1
               STATE.ZIP.REC<4,STATE.NUM> = 'N'
               STATE.ZIP.REC<5,STATE.NUM> = ''
               STATE.ZIP.REC<6,STATE.NUM> = ''
               STATE.ZIP.REC<7,STATE.NUM> = ''
               STATE.ZIP.REC<8,STATE.NUM> = ''

         END CASE
      NEXT STATE.NUM
      RETURN

*----------------------------------------------------------------------
UPDATE.SAVE.INFO:***
*----------------------------------------------------------------------
      IF USER.NAME='DAVID' THEN CALL ELINE('PRESS BREAK')
      TL.AUDIT.REC<FBA.TYPE> = TLALL
      IF CARRIER.ENABLED = '' THEN CARRIER.ENABLED = FBA.DISABLE
      TL.AUDIT.REC<FBA.CARRIER.STATUS> = CARRIER.ENABLED
      IF EQUIP.TYPE.ENABLED = '' THEN EQUIP.TYPE.ENABLED = FBA.DISABLE
      TL.AUDIT.REC<FBA.EQUIP.STATUS> = EQUIP.TYPE.ENABLED
      IF EFF.DATE.ENABLED = '' THEN EFF.DATE.ENABLED = FBA.DISABLE
      TL.AUDIT.REC<FBA.EFF.DATE.STATUS,EFF.DATE.POS> = EFF.DATE.ENABLED
      IF ROUTE.ZIP.ENABLED = '' THEN ROUTE.ZIP.ENABLED = FBA.DISABLE
      TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,ROUTE.ZIP.POS> = ROUTE.ZIP.ENABLED
      TL.AUDIT.REC<FBA.MGMT.FEE> = MGMT.FEE                                   ;*NPR02
      OWEN.REC=TL.AUDIT.REC ; GOSUB OWENS.ARRAY.CHECK
      WRITE TL.AUDIT.REC ON F.AUDIT,TL.AUDIT.ID
      IF WRITE.DATA AND AZIPS.IN.REC<1> # '' THEN
         T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':BEG.EFF.DATE:'*':FBA.T.TLALL:'*I':'*':EQUIP.TYPE
         IF IN.ZIP.ENABLED = '' THEN IN.ZIP.ENABLED = FBA.DISABLE
         AZIPS.IN.REC<1> = IN.ZIP.ENABLED
         IF ORG.AZIPS.IN.REC#AZIPS.IN.REC THEN
            AZIPS.IN.REC<6,-1>=USER.NAME
            AZIPS.IN.REC<7,-1>=DATE()
            AZIPS.IN.REC<8,-1>=TIME()'R0'
            WRITE AZIPS.IN.REC ON F.AUDIT.ZIPS,T.NAME
            ORG.AZIPS.IN.REC = AZIPS.IN.REC           ; * Update 'Changed' compare record
         END
      END
      IF WRITE.DATA AND AZIPS.OUT.REC<1> # '' THEN
         T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':BEG.EFF.DATE:'*':FBA.T.TLALL:'*O':'*':EQUIP.TYPE
         IF OUT.ZIP.ENABLED = '' THEN OUT.ZIP.ENABLED = FBA.DISABLE
         AZIPS.OUT.REC<1> = OUT.ZIP.ENABLED
         IF ORG.AZIPS.OUT.REC#AZIPS.OUT.REC THEN
            AZIPS.OUT.REC<6,-1>=USER.NAME
            AZIPS.OUT.REC<7,-1>=DATE()
            AZIPS.OUT.REC<8,-1>=TIME()'R0'
            WRITE AZIPS.OUT.REC ON F.AUDIT.ZIPS,T.NAME
            ORG.AZIPS.OUT.REC = AZIPS.OUT.REC         ; * Update 'Changed' compare record
         END
      END
      RETURN

*----------------------------------------------------------------------
ENTER.ACC.CHRGS:***
*----------------------------------------------------------------------

      GOSUB INIT.SCREEN
      GOSUB DRAW.BOX.SCREEN
      CRT @(2, 7):' Accessorial Charges '
      CRT @(2, 8):'     Maintenance '
      CRT @(2, 9):'====================='
      CRT @(1,10):'1) Add a Charge Code'
      CRT @(1,11):'2) Delete a Charge Code'
      CRT @(1,12):'3) Edit a Chrge Code Amt'

      CRT @(0,22):@(-4)
      PAGE.NUM = 1
      T.AUDIT.REC = TL.AUDIT.REC
      T.HEADING = 'Accessorial Charges'
      GOSUB LIST.ACC.CHRGS
      CRT @(0,14):' Enter Option :    '
      HELP = 'OPTIONS:'
      IF PAGE.NUM < NUM.PAGES THEN HELP:= ' [F]wd Page'
      IF PAGE.NUM > 1 THEN HELP:= ' [B]ack Page'
      HELP:=' [X]=Back [EX]it Program'
      MASK = ' '
      CALL GEN.IN(16,14,MASK,'',Q,0,7,'','',1,16,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            RETURN
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ENTER.ACC.CHRGS
         CASE QI = ''
            RETURN
         CASE NUM(QI)
            BEGIN CASE
               CASE QI = 1
                  GOSUB ADD.ACC.CHRG
               CASE QI = 2
                  GOSUB DEL.ACC.CHRG
               CASE QI = 3
                  GOSUB EDIT.ACC.CHRG
            END CASE
      END CASE
      IF NEW.ACC.CHRG # ACC.CHRG THEN
         READ TL.AUDIT.REC FROM F.AUDIT,TL.AUDIT.ID ELSE
            CALL ELINE('Can not locate ':NEW.ACC.CHRG.DESC:' setup please add')
            GO ENTER.ACC.CHRGS
         END
         ORIG.TL.AUDIT.REC = TL.AUDIT.REC
         DATA.CHANGED = TRUE
      END
      ACC.CHRG = NEW.ACC.CHRG
      GO ENTER.ACC.CHRGS
      RETURN

ADD.ACC.CHRG:***
      GOSUB LIST.ACC.CODES
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):'Adding New Access Charges'
      CRT @(2, 5):' ##   Accessorial Charge '
      CRT @(2, 6):'-------------------------'
      NEW.CHRG = NUM.CODES+1
      CRT @(9, 7):NEW.CHRG'R%2':STR(' ',10)
      HELP = "OPTIONS"
      NUM.AVAL.CODES = DCOUNT(AVAL.ACC.CHRG<1>,@VM)
      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(15,7,MASK,'',Q,0,3,'','',1,15,7,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO ADD.ACC.CHRG
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE QI='F'
            IF PAGE.NUM<NUM.PAGES THEN
               PAGE.NUM+=1
               GOSUB LIST.ACC.CODES
            END
            GOTO ADD.ACC.CHRG
         CASE QI='B'
            IF PAGE.NUM>1 THEN
               PAGE.NUM-=1
               GOSUB LIST.ACC.CODES
            END
            GOTO ADD.ACC.CHRG
         CASE NUM(QI)
            SEL = QI'R%2'
            IF SEL < 1 OR SEL > NUM.AVAL.CODES THEN
               CALL ELINE('Invalid Type, Please try again.')
               GO ADD.ACC.CHRG
            END ELSE
               NEW.ACC.CHRG = AVAL.ACC.CHRG<1,SEL>
               NEW.ACC.CHRG.DESC = AVAL.ACC.CHRG<2,SEL>
               LOCATE NEW.ACC.CHRG IN TL.AUDIT.REC<FBA.ACC.CHRG> SETTING POS THEN
                  CALL ELINE('That type already exists, please try again')
                  GO ADD.ACC.CHRG
               END ELSE
                  TL.AUDIT.REC<FBA.TYPE> = TLALL
                  TL.AUDIT.REC<FBA.ACC.CHRG,-1> = NEW.ACC.CHRG
               END
               GOSUB INIT.SCREEN
               GOSUB DRAW.BOX.SCREEN

               CRT @(0,22):@(-4)
               PAGE.NUM = 1
               T.HEADING = 'Accessorial Charges'
               GOSUB LIST.ACC.CHRGS
               EDIT.SEL = NEW.CHRG
               GOSUB EDIT.ACC.AMOUNTS
               OWEN.REC=TL.AUDIT.REC
               GOSUB OWENS.ARRAY.CHECK
               WRITE TL.AUDIT.REC ON F.AUDIT,TL.AUDIT.ID
            END
      END CASE
      RETURN

DEL.ACC.CHRG:
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):'     Accessorial Charge'
      CRT @(2, 5):'         Removal'
      CRT @(2, 6):'-------------------------'
      CRT @(2, 8):'Please Choose the Acc.'
      CRT @(2, 9):'charge to DELETE.'
      CRT @(2,11):'Enter Option: '
      NUM.AVAL.CODES = DCOUNT(AVAL.ACC.CHRG<1>,@VM)

      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(16,11,MASK,'',Q,0,2,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO DEL.ACC.CHRG
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            SEL = QI'R%2'
            IF SEL < 1 OR SEL > NUM.AVAL.CODES THEN
               CALL ELINE('Invalid Type, Please try again.')
               GO ADD.ACC.CHRG
            END ELSE
               YN.MSG = 'DELETE ACC.CHRGMENT # ':SEL:'. :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting ACC.CHRGment Type... Please wait...':@(-4):
                  T.SEL.ACC.CHRG = TL.AUDIT.REC<FBA.ACC.CHRG,SEL>         ; * Selected Zip
*
* Remove the ACC.CHRGment Type
*
                  LOCATE T.SEL.ACC.CHRG IN TL.AUDIT.REC<FBA.ACC.CHRG> SETTING POS THEN
                     TL.AUDIT.REC = DELETE(TL.AUDIT.REC,FBA.ACC.CHRG,POS,0)
                  END
               END
            END
      END CASE
      RETURN


EDIT.ACC.CHRG:
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):'     Accessorial Charge'
      CRT @(2, 5):'           Edit'
      CRT @(2, 6):'---------------------------'
      CRT @(2, 8):'Please Choose the Acc.'
      CRT @(2, 9):'charge to EDIT.'
      CRT @(2,11):'Enter Option: '
      NUM.AVAL.CODES = DCOUNT(AVAL.ACC.CHRG<1>,@VM)

      HELP := " [X]=Back [EX]it Program"
      MASK = 'X'
      CALL GEN.IN(16,11,MASK,'',Q,0,2,'','',1,16,11,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GO DEL.ACC.CHRG
         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN
         CASE NUM(QI)
            SEL = QI'R%2'
            TEMP = STATE.NUM'R#2':') '      ; * Line Number
            TEMP:= STATE.ZIP.REC<1,STATE.NUM>:' '     ; * State ID Code
            TEMP:= STATE.ZIP.REC<2,STATE.NUM>'R%3':'-'          ; * State Low Zip
            TEMP:= STATE.ZIP.REC<3,STATE.NUM>'R%3':' '          ; * State High Zip
            EDIT.SEL = SEL
            GOSUB EDIT.ACC.AMOUNTS
      END CASE
      RETURN
*----------------------------------------------------------------------
LIST.ACC.CHRGS:***
*----------------------------------------------------------------------
      AC.ROW.NUM=1
      NUM.CODES = DCOUNT(TL.AUDIT.REC<FBA.ACC.CHRG>, @VM)
      NUM.PAGES = INT(NUM.CODES/MAX.ROWS)
      IF NUM.PAGES < (NUM.CODES/MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN
         IF NUM.PAGES = 0 THEN NUM.PAGES = 1
         PAGE.NUM = 1
      END
      T=' ~~                         PAGE # ':PAGE.NUM'R#2':' OF ':NUM.PAGES'R#2':' ~~ '
      T.LEN = LEN(T.HEADING)
      T.OFF = (19-T.LEN)/2
      T[7+T.OFF,T.LEN] = T.HEADING
      CRT @(31,3):T:
      T = ' ##   CODE DESCRIPTION         Contr    Bench'

      CRT @(31,4):T:
      IF NUM.CODES < 1 THEN
         CALL FB.PRINT.CENT(30,79,11,'** No Accessorial Charges On File **')
         RETURN
      END
      AC.POS = (PAGE.NUM-1)*MAX.ROWS
      AC.ROW = START.ROW
      EXIT.AC = FALSE
      LOOP
         AC.POS+=1
         A.TYPE = TL.AUDIT.REC<FBA.ACC.CHRG,AC.POS>
         TEMP = ' ':AC.POS'R%2':' ':A.TYPE'L#5'
         LOCATE A.TYPE IN AVAL.ACC.CHRG<1> SETTING X THEN
            A.DESC = AVAL.ACC.CHRG<2,X>
         END ELSE
            A.DESC = 'Unknown Accessorial Charge'
         END
         A.CONTR = TL.AUDIT.REC<FBA.ACC.CHRG.CONTR,AC.POS>
         A.BENCH = TL.AUDIT.REC<FBA.ACC.CHRG.BENCH,AC.POS>

         TEMP := ' ':A.DESC'L#18'
         TEMP := ' ':A.CONTR'R26(#8)':' ':A.BENCH'R26(#8)'
         CRT @(31,AC.ROW):TEMP
         BEGIN CASE
            CASE AC.POS = NUM.CODES
               EXIT.AC = TRUE

            CASE AC.ROW.NUM = MAX.ROWS
               EXIT.AC = TRUE
               IF AC.POS < NUM.CODES THEN
                  TEMP = REVON:'* Continued on next page *':REVOFF
               END ELSE
                  TEMP = REVON:'* End of Accessorial Charges *':REVOFF
               END
               CALL FB.PRINT.CENT(30,79,21,TEMP)

            CASE 1
               AC.ROW+=1
               AC.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.AC)
      REPEAT

      RETURN


*----------------------------------------------------------------------
* LIST.ACC.CODES
*----------------------------------------------------------------------
LIST.ACC.CODES:
      GOSUB INIT.SCREEN
      GOSUB DRAW.BOX.SCREEN
      ACC.ROW.NUM=1
      N.LINES = DCOUNT(AVAL.ACC.CHRG<1>, @VM)
      NUM.PAGES = INT(N.LINES/MAX.ROWS)
      IF NUM.PAGES < (N.LINES/MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN
         IF NUM.PAGES = 0 THEN NUM.PAGES = 1
         PAGE.NUM = 1
      END
      DISP.HEAD1 = '~ TL Carrier Charge Codes On File: Page ':PAGE.NUM:' of ':NUM.PAGES:' ~'
      DISP.HEAD2 = ' ## CODE DESCRIPTION                  '

*
* Display Heading Box
*
      CALL FB.PRINT.CENT(31,79,3,DISP.HEAD1)
      CRT @(31,4):DISP.HEAD2

      IF N.LINES < 1 THEN
         CALL FB.PRINT.CENT(26,79,13,'** Nothing on File **')
         BACK.FLAG = TRUE
         RETURN
      END

      ACC.POS = (PAGE.NUM-1)*MAX.ROWS
      ACC.ROW = START.ROW
      EXIT.ACC = FALSE

      LOOP
         ACC.POS+=1
         TEMP = ACC.POS'R%2'

         CODE = AVAL.ACC.CHRG<1,ACC.POS>
         TEMP:= ' ':CODE'L#4'

         DESC = AVAL.ACC.CHRG<2,ACC.POS>
         TEMP:= ' ':DESC'L#27'
         CRT @(32,ACC.ROW):TEMP:

         BEGIN CASE
            CASE ACC.ROW.NUM = MAX.ROWS AND ACC.POS < N.LINES
               EXIT.ACC = TRUE
               TEMP = REVON:'* [F]wd 1 Page'
               IF PAGE.NUM > 1 THEN TEMP:= ' [B]ack 1 Page'
               TEMP:=' *':REVOFF
               CALL FB.PRINT.CENT(26, 79, 21, TEMP)

            CASE ACC.POS >= N.LINES
               EXIT.ACC = TRUE
               TEMP = REVON:'* End of Listing'
               IF PAGE.NUM # 1 THEN TEMP:=' - [B]ack 1 Page'
               TEMP:=' *':REVOFF
               CALL FB.PRINT.CENT(26, 79, 21, TEMP)
            CASE 1
               ACC.ROW+=1
               ACC.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.ACC)
      REPEAT

      RETURN


EDIT.ACC.AMOUNTS:***

ENTER.CONTR.AMT:

      ROW = 5+REM(EDIT.SEL,13)
      IF ROW = 5 THEN ROW = 18
      CONTR = TL.AUDIT.REC<FBA.ACC.CHRG.CONTR,EDIT.SEL>

      IF CONTR # '' THEN
         MASK = CONTR'R26(#8)'
      END ELSE
         MASK = ''
      END


      CRT @(0,22):"Enter a accesorial contract amount:":@(-4)
      CALL GEN.IN(60,ROW,MASK,'AMT2',Q,0,8,'','',2,60,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EDIT.ACC.AMOUNTS
         CASE QI = 'ASK'
            CONTR = 'ASK'

         CASE QI = 'X'
            BACK.FLAG = TRUE
            RETURN

         CASE QI=''

         CASE NUM(QI)
            CONTR=Q

         CASE 1
            CALL ELINE('Invalid option, valid options are #, RETURN, "X" and "EX".  Try Again.')
            GOTO ENTER.CONTR.AMT
      END CASE

      TL.AUDIT.REC<FBA.ACC.CHRG.CONTR,EDIT.SEL> = CONTR
      CRT @(60,ROW):CONTR'R26(#8)'
      IF CONTR = 'ASK' THEN
         BENCH = 'ASK'
         TL.AUDIT.REC<FBA.ACC.CHRG.BENCH,EDIT.SEL> = BENCH
         RETURN
      END

ENTER.BENCH.AMT:

      BENCH = TL.AUDIT.REC<FBA.ACC.CHRG.BENCH,EDIT.SEL>
      IF BENCH # '' THEN
         MASK = BENCH'R26(#8)'
      END ELSE
         MASK = ''
      END

      CRT @(0,22):"Enter a accesorial benchmark amount:":@(-4)
      CALL GEN.IN(69,ROW,MASK,'AMT2',Q,0,8,'','',2,69,ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ENTER.BENCH.AMT

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GO ENTER.BENCH.AMT

         CASE QI=''

         CASE NUM(QI)
            BENCH=Q

         CASE 1
            CALL ELINE('Invalid option, valid options are #, RETURN , "X" and "EX".  Try Again.')
            GOTO ENTER.BENCH.AMT
      END CASE
      TL.AUDIT.REC<FBA.ACC.CHRG.BENCH,EDIT.SEL> = BENCH

      CRT @(69,ROW):BENCH'R26(#8)'
      RETURN

*----------------------------------------------------------------------
BUILD.SUB.ZIPS:
*
* INPUT : BASE.ZIP - Base Routing Zip
*
* OUTPUT: T.SUB.ZIPS - Multi Atribute Dynamic Array Containing Substute
*                      Zips For The Base Routing Zips
*         T.NUM.SUBS - Number of sub zips contained in SUB.ZIPS
*----------------------------------------------------------------------

      T.SUB.ZIPS = ''
      BASE.ZIP = ROUTE.ZIP

      WHERE=1
      LOOP
         LOCATE BASE.ZIP IN TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP>,WHERE SETTING WHERE THEN
            T.ZIP = TL.AUDIT.REC<FBA.ROUTE.ZIP,WHERE>
            T.SUB.ZIPS<-1>=T.ZIP
            WHERE+=1
         END ELSE
            WHERE = -1
         END
      WHILE (WHERE # -1)
      REPEAT

      T.NUM.SUBS = DCOUNT(T.SUB.ZIPS , @AM)

      RETURN

*----------------------------------------------------------------------
* Basic Routines in alphabetic order
*----------------------------------------------------------------------
***********************************************************************
ASK.ABOUT.QUITTING:***
***********************************************************************
      CHANGED = (ORG.AZIPS.IN.REC # AZIPS.IN.REC)
      CHANGED+= (ORG.AZIPS.OUT.REC # AZIPS.OUT.REC)
      CHANGED+= (ORG.TL.AUDIT.REC # TL.AUDIT.REC)
      IF CHANGED THEN
         YN.MSG = 'Exit Program and Loose any changes? '
         YN.MASK = 'N '
         GOSUB ASK.Y.OR.N
         EXIT.IT = (YN.ANSWER = 'Y')
      END ELSE
         EXIT.IT = TRUE
      END
      IF EXIT.IT THEN STOP
      RETURN

***********************************************************************
ASK.Y.OR.N:***
***********************************************************************
      YN.ANSWER = ''
Y.OR.N:
      HELP = CHAR(7):"Entry Options: [Y]-Yes [N]-No [X]-Back"
      CRT @(0,22):YN.MSG:@(-4):
      MASK = YN.MASK'L#1'
      Q=''
      CALL GEN.IN(LEN(YN.MSG),22,MASK,'',Q,0,1,'','',2,LEN(YN.MSG),22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
* Q & D Translation
      BEGIN CASE
         CASE QI = ''
            QI=MASK
         CASE QI = '1'
            QI='Y'
         CASE QI = '0'
            QI='N'
      END CASE
* Conditions.
      BEGIN CASE
         CASE QI = 'Y'
         CASE QI = 'N'
         CASE QI = 'X'
            BACK.FLAG = TRUE
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO Y.OR.N
      END CASE
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      YN.ANSWER = QI
      RETURN

************************************************************************
DISPLAY.DATA:***
************************************************************************
      CRT @(24,3): CLIENT.INFO'L#40'
      CRT @(24,4): CARRIER.INFO'L#40'
      CRT @(24,5): EQUIP.TYPE'L#4':'- ': EQUIP.DESC'L#30'
      CRT @(24,6): ROUTE.ZIP'L#40'
      TEMP = CHANGE(T.SUB.ZIPS,@AM,', ')
      CRT @(24,7): TEMP'L#40'
      IF END.EFF.DATE = 0 THEN END.EFF.DATE = ''
      IF BEG.EFF.DATE = 0 THEN BEG.EFF.DATE = ''
      IF BEG.EFF.DATE # '' THEN
         IF END.EFF.DATE='' THEN
            TEMP = '(No Ending Date Set)'
         END ELSE
            TEMP = END.EFF.DATE'D2/'
         END
         TEMP = BEG.EFF.DATE'D2/':' TO : ':TEMP
      END ELSE
         TEMP = REVON:'(Effective Date Range not setup)':REVOFF
      END
      CRT @(24, 8):TEMP

      CRT @(24,11): IN.ZIP.DISPLAY'L#40'
      CRT @(24,12): OUT.ZIP.DISPLAY'L#40'
      CRT @(24,14): TL.AUDIT.REC<FBA.MILEAGE.BASE>

      CRT @(24,17): PPT.STR
      CRT @(24,18): ACC.CHRG.DESC
      IF MGMT.FEE='' THEN                ;* NPR02
         CRT @(24,19):MGMT.FEE'R#8'      ;* NPR02
      END ELSE                           ;* NPR02
         CRT @(24,19):MGMT.FEE'R26#8'    ;* NPR02
      END                                ;* NPR02

      IF CLIENT.ENABLED = FBA.ENABLE THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,3):TEMP
      IF CARRIER.ENABLED = FBA.ENABLE THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,4):TEMP
      IF EQUIP.TYPE.ENABLED = FBA.ENABLE THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,5):TEMP
      IF ROUTE.ZIP.ENABLED = FBA.ENABLE THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,6):TEMP
      IF EFF.DATE.ENABLED = FBA.ENABLE THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,8):TEMP
      IF IN.ZIP.ENABLED = FBA.ENABLE THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,11):TEMP
      IF OUT.ZIP.ENABLED = FBA.ENABLE THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,12):TEMP
      RETURN

************************************************************************
DISPLAY.SCREEN:***
************************************************************************
      GOSUB INIT.SCREEN
      CRT @(0,3): '1)  Client            : '
      CRT @(65,3): '13) [        ]'
      CRT @(0,4): '2)  Carrier           : '
      CRT @(65,4): '14) [        ]'
      CRT @(0,5): '3)  Equipment Types   : '
      CRT @(65,5): '15) [        ]'
      CRT @(0,6): '4)  Routing Zip       : '
      CRT @(65,6): '16) [        ]'
      CRT @(0,7): '5)  Subst. Zips       : '
      CRT @(0,8): '6)  Effective Dates   :             TO:'
      CRT @(65,8): '17) [        ]'
      CRT @(0,10): '    Shipping Points'
      CRT @(0,11): '7)  Inbound           : '
      CRT @(65,11):'18) [        ]'
      CRT @(0,12): '8)  Outbound          : '
      CRT @(65,12):'19) [        ]'
      CRT @(0,14): '9)  Mileage Base      : '

      CRT @(0,17): '10) Pt to Pt Rates    : '
      CRT @(0,18): '11) Assessorial Chrgs : '
      CRT @(0,19): '12) Management Fee    : '

      RETURN

************************************************************************
DRAW.BOX.SCREEN:***
************************************************************************
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      RETURN

***********************************************************************
GET.STATE.ZIP.INFO:***
***********************************************************************
      OPEN '','ZIPS.CODES' TO F.ZIPS THEN
         READ STATE.ZIP.REC FROM F.ZIPS,'3.DIGIT' THEN
            NUM.STATES = DCOUNT(STATE.ZIP.REC<1>, @VM)
            FOR X = 1 TO NUM.STATES
               IF STATE.ZIP.REC<2,X> = 0 THEN
                  DEL STATE.ZIP.REC<1,X>
                  DEL STATE.ZIP.REC<2,X>
                  DEL STATE.ZIP.REC<3,X>
               END
            NEXT X
            INVALID.STATE=''
            INVALID.STATE<1>='AK'
            INVALID.STATE<2>='GV'
            INVALID.STATE<3>='HI'
            INVALID.STATE<4>='CD'
            INVALID.STATE<5>='MX'
            INVALID.STATE<6>='EX'
            INVALID.STATE<7>='IM'
            NUM.OF.INVALID.STATE=DCOUNT(INVALID.STATE,@AM)
            FOR I = 1 TO NUM.OF.INVALID.STATE
               LOCATE INVALID.STATE<I> IN STATE.ZIP.REC<1> SETTING X THEN
                  DEL STATE.ZIP.REC<1,X>
                  DEL STATE.ZIP.REC<2,X>
                  DEL STATE.ZIP.REC<3,X>
               END
            NEXT I
            NUM.STATES = DCOUNT(STATE.ZIP.REC<1>, @VM)
         END ELSE
            CALL OPEN.ABORT("READ ZIPS.CODES",PROG.NAME)
         END
      END ELSE
         CALL OPEN.ABORT("ZIPS.CODES",PROG.NAME)
      END
      RETURN


***********************************************************************
INIT.VARIABLES:***
***********************************************************************
      PROMPT'' ; PROG.NAME='FB.TL.SETUP' ; PROG.DESC='NEW TL Audit Setup'
      PACK.NAME='TL Audit Setup' ; CO.NAME='AFS Logistics, LLC'
      PORT.NUM = SYSTEM(19)
      UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.TL.SETUP' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/23/2010
      CALL GET.USER(USER.NAME)
      ERR.MSG = '' ; WIDTH = 80
      CLIENT.NAME='' ; CLIENT.ID=0 ; NEW.CLIENT.ID=0 ; CLIENT.ENABLED = FBA.DISABLE
      MAT CLIENT.REC = '' ; DIM TCLIENT.REC(CLIENT.REC.SIZE) ; MAT TCLIENT.REC = ''
      CARRIER.NAME='' ; CARRIER.ID=0 ; CARRIER.CITY='' ; CARRIER.STATE='' ; CARRIER.REC=''
      ROUTE.ZIP='' ; NUM.STATES = 0 ; DATA.CHANGED = FALSE ; BACK.FLAG = FALSE
      SETUP.EQUIP.TYPES = ''
      NEW.CLIENT = FALSE ; NEW.CARRIER = FALSE ; NEW.EQUIP = FALSE
      NEW.CHRG = FALSE ; CARRIER.ENABLED = FBA.DISABLE ; NEW.DATE = FALSE
      DEL.CARRIER.ID = '' ; DEL.ZIP = '' ; DEL.DATE = '' ; DEL.IO = '' ; DEL.EQUIP=''
      AZIPS.REC = ''                        ; * General Work variable for Inbound and Outbound zips
      PACK.ZIPS = ''                        ; * Pack Zip ranges by state.  Only used for Reports..
      AZIPS.IN.REC = ''                     ; * Inbound Audit Zip Reocrd from FB.AUDIT.ZIPS
      ORG.AZIPS.IN.REC = ''                 ; * Inbound Audit Zip Reocrd from FB.AUDIT.ZIPS
      AZIPS.OUT.REC = ''                    ; * Outbound Audit Zip Record from FB.AUDIT.ZIPS
      ORG.AZIPS.OUT.REC = ''                ; * Outbound Audit Zip Record from FB.AUDIT.ZIPS
      ALL.ZIPS = ''                         ; * Temp Storage for Consolidated Zips
      SUB.ZIPS = ''                         ; * Array of Sub Zips for ROUTE.ZIP
      TL.AUDIT.REC = ''                     ; * Carrier Audit Rec from FB.AUDIT
      ORG.TL.AUDIT.REC = ''                 ; * Carrier Audit Rec from FB.AUDIT
      YN.ANSWER=''
      DEFAULT.TOLERANCE = '' ; DEFAULT.TOLERANCE<1,1> = 100 ; DEFAULT.TOLERANCE<1,2> = 0
      DEFAULT.BASE = 'PMC10' ; DEFAULT.MODIFIER = 'SHORT'
      NUM.OPTIONS = 19 ; PAGE.SIZE = 13 ; START.Y = 5 ; DSP.PAGE = 1 ; WIDTH = 80
      ROW.NUM=1 ; MAX.ROWS=13 ; START.ROW=6 ; CTR = INT(WIDTH/2)
      BACK.FLAG = FALSE ; EXIT.IT = FALSE ; BOTH.FLAG=0 ; REVERSE.CODE=0
      UNDO.ZIP='' ; UNDO.STATE='' ; ZIP.DISPLAY=''
      NEW.CARRIER.ID = 0 ; NEW.CLIENT.ID = 0 ; NEW.ROUTE.ZIP = 0 ; NEW.BEG.EFF.DATE = 0
      NEW.EQUIP.TYPE='' ; NEW.END.EFF.DATE = 0 ; BEG.EFF.DATE = '' ; END.EFF.DATE = ''
      CLIENT.INFO = '' ; CARRIER.INFO = '' ; ROUTE.ZIP = '' ; T.SUB.ZIPS = ''
      EFFECTIVE.DATE = '' ; EQUIP.TYPE = '' ; EQUIP.DESC = ''
      IN.ZIP.DISPLAY = '' ; OUT.ZIP.DISPLAY = ''
      MILEAGE.BASE = '' ; MILEAGE.MODIFIER = '' ; MILEAGE.TOLERANCE = ''
      PT.TO.PT = '' ; PPT.STR = ''; ACC.CHRG = '' ; ACC.CHRG.DESC='' ; MGMT.FEE = '' ;* NPR02
      EFF.DATE.ENABLED = FBA.DISABLE ; EQUIP.TYPE.ENABLED = FBA.DISABLE
      ROUTE.ZIP.ENABLED = FBA.DISABLE
      IN.ZIP.ENABLED = FBA.DISABLE ; OUT.ZIP.ENABLED = FBA.DISABLE
      STATE.NUM = 0 ; SRC.CARRIER.ID=0 ; DST.CARRIER.ID=0 ;
      KEEP.CRITERIA = '' ; OLD.ROUTE.ZIP=''
      RETURN

************************************************************************
INIT.SCREEN:***
************************************************************************
      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('-',79) ;
      CRT @(0,21):STR('-',79) ;
      RETURN

************************************************************************
LOAD.VARIABLES:***
************************************************************************
      IF NEW.CARRIER OR NEW.EQUIP THEN
         IF NEW.CARRIER AND NOT(NEW.EQUIP) ELSE EQUIP.TYPE = TL.AUDIT.REC<FBA.EQUIP.TYPE,1>
         TL.AUDIT.ID = CARRIER.ID:'*':EQUIP.TYPE
         READ TL.AUDIT.REC FROM F.AUDIT,TL.AUDIT.ID ELSE
            CALL ELINE('Can not locate ':NEW.EQUIP.DESC:' setup please add')
            GO START.SEL
         END
         ROUTE.ZIP = TL.AUDIT.REC<FBA.ROUTE.ZIP,1>
         EFF.DATE.POS = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE,1>,@SVM)
      END
      LOCATE EQUIP.TYPE IN AVAL.EQUIP.TYPES<1> SETTING X THEN
         EQUIP.DESC = AVAL.EQUIP.TYPES<2,X>
      END ELSE
         EQUIP.DESC = 'Unknown Equipment Type'
      END
      LOCATE ROUTE.ZIP IN TL.AUDIT.REC<FBA.ROUTE.ZIP> SETTING ROUTE.ZIP.POS ELSE ROUTE.ZIP.POS = 1
      EQUIP.TYPE.ENABLED = TL.AUDIT.REC<FBA.EQUIP.STATUS>
      IF EQUIP.TYPE.ENABLED = '' THEN EQUIP.TYPE.ENABLED = FBA.DISABLE

      IF NEW.DATE ELSE
         EFF.DATE.POS = DCOUNT(TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS>,@SVM)
         BEG.EFF.DATE = TL.AUDIT.REC<FBA.BEG.EFF.DATE,ROUTE.ZIP.POS,EFF.DATE.POS>
         END.EFF.DATE = TL.AUDIT.REC<FBA.END.EFF.DATE,ROUTE.ZIP.POS,EFF.DATE.POS>
      END

      IF ROUTE.ZIP # '' THEN GOSUB BUILD.SUB.ZIPS

      T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':BEG.EFF.DATE:'*':FBA.T.TLALL:'*I':'*':EQUIP.TYPE
      READ AZIPS.IN.REC FROM F.AUDIT.ZIPS,T.NAME THEN
         ORG.AZIPS.IN.REC = AZIPS.IN.REC    ; * SAVE ORGINAL OFF
         IF AZIPS.IN.REC<5>='' AND AZIPS.IN.REC<1,1> # '' THEN
            AZIPS.IN.REC<5> = AZIPS.IN.REC<4>
            T.COUNT = DCOUNT(AZIPS.IN.REC<4>,@VM)
            FOR T = 1 TO T.COUNT
               AZIPS.IN.REC<4,T> = 'Y'
            NEXT
         END
      END ELSE
         AZIPS.IN.REC = ''
      END
      T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':BEG.EFF.DATE:'*':FBA.T.TLALL:'*O':'*':EQUIP.TYPE
      READ AZIPS.OUT.REC FROM F.AUDIT.ZIPS,T.NAME THEN
         ORG.AZIPS.OUT.REC = AZIPS.OUT.REC  ; * SAVE ORGINAL OFF
         IF AZIPS.OUT.REC<5>='' AND AZIPS.OUT.REC<1,1> # '' THEN
            AZIPS.OUT.REC<5> = AZIPS.OUT.REC<4>
            T.COUNT = DCOUNT(AZIPS.OUT.REC<4>,@VM)
            FOR T = 1 TO T.COUNT
               AZIPS.OUT.REC<4,T> = 'Y'
            NEXT
         END
      END ELSE
         AZIPS.OUT.REC = ''
      END
      ROUTE.ZIP.ENABLED = TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,ROUTE.ZIP.POS>
      IF ROUTE.ZIP.ENABLED = '' THEN ROUTE.ZIP.ENABLED = FBA.DISABLE
      NUM.AUDITS = DCOUNT(AZIPS.IN.REC<2>, @VM)
      BEGIN CASE
         CASE AZIPS.IN.REC = ''
            TEMP = '(Inbound Shipping Not Setup)'

         CASE NUM.AUDITS GT 0
            T.AZIPS.REC=AZIPS.IN.REC
            GOSUB BUILD.ZIP.DISPLAY
            IF LEN(TEMP) > 52 THEN TEMP=TEMP'L#46':'<more>'

         CASE 1
            TEMP = REVON:'(No Shipping Points Entered)':REVOFF
      END CASE
      IN.ZIP.DISPLAY = TEMP
      IF AZIPS.IN.REC<1> = FBA.ENABLE THEN
         IN.ZIP.ENABLED = FBA.ENABLE
      END ELSE
         IN.ZIP.ENABLED = FBA.DISABLE
      END
      NUM.AUDITS = DCOUNT(AZIPS.OUT.REC<2>, @VM)
      BEGIN CASE
         CASE AZIPS.OUT.REC = ''
            TEMP = '(Outbound Shipping Not Setup)'

         CASE NUM.AUDITS GT 0
            T.AZIPS.REC=AZIPS.OUT.REC
            GOSUB BUILD.ZIP.DISPLAY
            IF LEN(TEMP) > 52 THEN TEMP=TEMP'L#46':'<more>'
         CASE 1
            TEMP = REVON:'(No Shipping Points Entered)':REVOFF
      END CASE
      OUT.ZIP.DISPLAY = TEMP
      IF AZIPS.OUT.REC<1> = FBA.ENABLE THEN
         OUT.ZIP.ENABLED = FBA.ENABLE
      END ELSE
         OUT.ZIP.ENABLED = FBA.DISABLE
      END


      EFF.DATE.ENABLED = TL.AUDIT.REC<FBA.EFF.DATE.STATUS,ROUTE.ZIP.POS,EFF.DATE.POS>
      IF EFF.DATE.ENABLED = '' THEN EFF.DATE.ENABLED = FBA.DISABLE
      SUB.ZIPS = TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP,ROUTE.ZIP.POS>
      IF TL.AUDIT.REC<FBA.ACC.CHRG> = '' OR ACC.CHRG = 1 THEN
         TEMP = REVON:'(No Accessorial Charges Entered)':REVOFF
         ACC.CHRG.DESC = TEMP
      END ELSE
         ACC.CHRG.DESC = '(See Accessorial Charge Setup)'
      END

      STMT = 'SELECT FB.AUDIT.PP,':CLIENT.ID
      STMT := ' WITH CARRIER# = ':CARRIER.ID'R%5':' AND EQUIP2 = ':EQUIP.TYPE:' SAMPLE 1'

      EXECUTE STMT CAPTURING OUTPUT
      IF @SELECTED LE 0 THEN
         PPT.STR = '(No Point to Point rates Entered)'
      END ELSE
         PPT.STR = '(See Point to Point Charge Setup)'
      END

      MGMT.FEE = TL.AUDIT.REC<FBA.MGMT.FEE>  ;* NPR02

      RETURN

***********************************************************************
RENAME.INBOUND.REC:****
* NOTES: USED FOR THE CHANGING OF EFFECTIVE DATES -
* PARAMETERS: SRC.BEG.DATE - Source Beginning Date
*             DST.BEG.DATE - Destination Beginning Date
***********************************************************************
      T.NAME1 = CARRIER.ID:'*':ROUTE.ZIP:'*':SRC.BEG.DATE:'*':FBA.T.LTLALL:'*I':'*':EQUIP.TYPE
      READ T.REC FROM F.AUDIT.ZIPS,T.NAME1 THEN
         DELETE F.AUDIT.ZIPS,T.NAME1
         T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':DST.BEG.DATE:'*':FBA.T.LTLALL:'*I':'*':EQUIP.TYPE
         WRITE AZIPS.IN.REC ON F.AUDIT.ZIPS,T.NAME
         ORG.AZIPS.IN.REC = AZIPS.IN.REC    ; * Update 'Changed' compare record
      END

      RETURN

***********************************************************************
RENAME.OUTBOUND.REC:***
* NOTES: USED FOR THE CHANGING OF EFFECTIVE DATES -
* PARAMETERS: SRC.BEG.DATE - Source Beginning Date
*             DST.BEG.DATE - Destination Beginning Date
***********************************************************************
      T.NAME1 = CARRIER.ID:'*':ROUTE.ZIP:'*':SRC.BEG.DATE:'*':FBA.T.LTLALL:'*O':'*':EQUIP.TYPE
      READ T.REC FROM F.AUDIT.ZIPS,T.NAME1 THEN
         DELETE F.AUDIT.ZIPS,T.NAME1
         T.NAME = CARRIER.ID:'*':ROUTE.ZIP:'*':DST.BEG.DATE:'*':FBA.T.LTLALL:'*O':'*':EQUIP.TYPE
         WRITE AZIPS.OUT.REC ON F.AUDIT.ZIPS,T.NAME
         ORG.AZIPS.OUT.REC = AZIPS.OUT.REC  ; * Update 'Changed' compare record
      END
      RETURN

***********************************************************************
REMOVE.AUDIT.TABLE:***
***********************************************************************
      BEGIN CASE
         CASE DEL.CARRIER.ID = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.CARRIER.ID')
            RETURN
         CASE DEL.ZIP = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.ZIP')
            RETURN
         CASE DEL.DATE = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.DATE')
            RETURN
         CASE DEL.IO = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.IO')
            RETURN
         CASE DEL.EQUIP = ''
            CALL ELINE('REMOVE.AUDIT.ZIP - NO DEL.EQUIP')
            RETURN
         CASE 1
            REC.NAME = DEL.CARRIER.ID
            REC.NAME :='*':DEL.ZIP:'*':DEL.DATE:'*TLALL*':DEL.IO:'*':EQUIP.TYPE
            DELETE F.AUDIT.ZIPS, REC.NAME
      END CASE
      DEL.CARRIER.ID =''
      DEL.ZIP = ''
      DEL.DATE=''
      DEL.IO=''
      DEL.EQUIP=''
      RETURN

***********************************************************************
REMOVE.ZIP:***
***********************************************************************
      DEL TL.AUDIT.REC<FBA.BEG.EFF.DATE,T.ZIP.POS>    ; * 2
      DEL TL.AUDIT.REC<FBA.END.EFF.DATE,T.ZIP.POS>    ; * 3
      DEL TL.AUDIT.REC<FBA.ROUTE.ZIP,T.ZIP.POS>       ; * 8
      DEL TL.AUDIT.REC<FBA.ROUTE.ZIP.STATUS,T.ZIP.POS>          ; * 9
      DEL TL.AUDIT.REC<FBA.EFF.DATE.STATUS,T.ZIP.POS>           ; * 10
      DEL TL.AUDIT.REC<FBA.BASE.ROUTE.ZIP,T.ZIP.POS>  ; * 12
      RETURN






*----------------------------------------------------------------------
* Point to Point Routines
*----------------------------------------------------------------------
***********************************************************************
ENTER.POINT.TO.POINTS:***
***********************************************************************

* DEBUG
*
      STMT = 'SELECT FB.AUDIT.PP,':CLIENT.ID
*NPR99      STMT := ' WITH CARRIER# = ':CARRIER.ID'R%5':' AND EQUIP = ':EQUIP.TYPE
      STMT := ' WITH CARRIER# = ':CARRIER.ID'R%5':' AND EQUIP2 = ':EQUIP.TYPE
      EXECUTE STMT CAPTURING OUTPUT
      NUM.POINTS = @SELECTED
      PAGE = 1
      HDR.CNT = 0

      SEL2 = 1

      PP.HEADER = ''   ;* NPR99
      PP.DETAIL = ''   ;* NPR99

      IF NUM.POINTS GT 0 ELSE
         GO EPP.1
      END
      LOOP
         DONE=0
         READNEXT PT.TO.PT.ID ELSE DONE = 1
      UNTIL DONE=1 DO

         HDR.CNT += 1

         ORIG.ZIP = FIELD(PT.TO.PT.ID,'*',2)
         READ OZIP.REC FROM F.ZIPS, ORIG.ZIP ELSE OZIP.REC = ''
         ORIG.CITY = OZIP.REC<1>
         ORIG.ST = OZIP.REC<2>

         DEST.ZIP = FIELD(PT.TO.PT.ID,'*',3)
         READ DZIP.REC FROM F.ZIPS, DEST.ZIP ELSE DZIP.REC = ''
         DEST.CITY = DZIP.REC<1>
         DEST.ST   = DZIP.REC<2>

         READ PP.REC FROM F.AUDIT.PP,PT.TO.PT.ID ELSE PP.REC = ''
         N.VALS = DCOUNT(PP.REC<1>,@VM)

         TEMP.HDR = ''

         PP.ENABLED    = PP.REC<5>

         TEMP.HDR<1,1> = ORIG.ZIP
         TEMP.HDR<1,2> = ORIG.ST
         TEMP.HDR<1,3> = ORIG.CITY
         TEMP.HDR<1,4> = DEST.ZIP
         TEMP.HDR<1,5> = DEST.ST
         TEMP.HDR<1,6> = DEST.CITY
         TEMP.HDR<1,7> = PP.ENABLED
         TEMP.HDR<1,8> = N.VALS
         TEMP.HDR<1,9> = PT.TO.PT.ID

         PP.HEADER<HDR.CNT> = TEMP.HDR

         TEMP.DET = ''
         FOR IV = 1 TO N.VALS
            BEG.EFF.DATE  = PP.REC<1,IV>
            END.EFF.DATE  = PP.REC<2,IV>
            CONTR         = PP.REC<3,IV>
            BENCH         = PP.REC<4,IV>
            TEMP.DET<1,IV,1> = ORIG.ZIP
            TEMP.DET<1,IV,2> = DEST.ZIP
            TEMP.DET<1,IV,3> = BEG.EFF.DATE
            TEMP.DET<1,IV,4> = END.EFF.DATE
            TEMP.DET<1,IV,5> = CONTR
            TEMP.DET<1,IV,6> = BENCH
         NEXT IV
         PP.DETAIL<HDR.CNT> = TEMP.DET

      REPEAT

EPP.1:***

      GOSUB DISPLAY.PP.INFO.1
      CRT @(0,22):'Enter Option :':@(-4)
      HELP="Enter line # to edit, [X]-Back [EX]it."
      MASK = ''

      CALL GEN.IN(14,22,MASK,'',Q,0,6,'','',2,14,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GOTO ENTER.SHIPPING.POINT.1
         CASE QI = 'X'
            BACK.FLAG = 1
            RETURN
         CASE NUM(QI)
            SEL=QI
            IF SEL LT START ! SEL GT STOP+1 THEN
               CALL ELINE('Invalid selection.')
               GOTO EPP.1
            END

*            IF PP.HEADER = ''  THEN
*               CALL ELINE('No data found.')
*               GOTO EPP.1
*            END

            GOSUB EDIT.PP.INFO.1

            YN.MSG = 'Update Point to point rates ? '
            YN.MASK = 'N'
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'Y' THEN
               PAGE2 = 1
               GOSUB DISPLAY.PP.INFO.2
               GOSUB EDIT.PP.INFO.2
               GOSUB UPDATE.PP.INFO.2
               GOTO EPP.1
            END

         CASE 1
            CALL ELINE('Invalid Selection.')
      END CASE

      GOTO EPP.1

      RETURN

EDIT.PP.INFO.1:***

      GOSUB DISPLAY.PP.INFO.1
      NUM.LINES = DCOUNT(PP.HEADER<1>,@VM)
      IF NUM.LINES GT 0 ELSE
         GO EPPI.1
      END

****&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
EPPI.1:*** Enter Originaion Zip for Point to Point rates

      ORIG.ZIP = PP.HEADER<SEL,1>
      HELP = "Enter Origination zip  [X]=Back [EX]it"
      MASK = ORIG.ZIP

EPPI.2:

      ROW=5+REM(SEL,13)
      IF ROW=5 THEN ROW=18

      CRT @(0,22):"Enter Origination zip : ":@(-4)
      CALL GEN.IN(3,ROW,MASK,'',Q,0,'','','','0',3,ROW,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI = '' THEN QI=TRIM(MASK)
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EPPI.2

         CASE QI = 'X'
            BACK.FLAG = TRUE

         CASE QI NE ""
            ORIG.ZIP = QI
            READ OZIP.REC FROM F.ZIPS, ORIG.ZIP ELSE
               CALL ELINE('Invalid Zip')
               GOTO EPPI.2
            END
            ORIG.CITY = OZIP.REC<1>
            ORIG.ST   = OZIP.REC<2>
            ORIG.CITY.STR = ORIG.CITY[1,20]:',':ORIG.ST 'L#2'
            TEMP = ORIG.ZIP[1,5] 'R#5' :'  ':ORIG.CITY.STR[1,24] 'L#24'
            PP.HEADER<SEL,1> = QI
            PP.HEADER<SEL,2> = ORIG.ST
            PP.HEADER<SEL,3> = ORIG.CITY

         CASE 1
            CALL ELINE('Invalid option, Enter valid zip, "X" or "EX"')
            GOTO EPPI.2
      END CASE

      CRT @(3,ROW):TEMP

EPPI.3:* Enter Destination Zip for Point to Point rates

      DEST.ZIP = PP.HEADER<SEL,4>
      HELP = "Enter Destination zip  [X]=Back [EX]it"
      MASK = DEST.ZIP

EPPI.4:

      ROW1=5+REM(SEL,13)
      IF ROW1=5 THEN ROW1=18

      CRT @(0,22):"Enter Destination zip : ":@(-4)
      CALL GEN.IN(39,ROW1,MASK,'',Q,0,'','','','0',39,ROW1,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI = '' THEN QI=TRIM(MASK)
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EPPI.2

         CASE QI = 'X'
            BACK.FLAG = TRUE

         CASE QI NE ""
            DEST.ZIP = QI
            READ DZIP.REC FROM F.ZIPS, DEST.ZIP ELSE
               CALL ELINE('Invalid Zip')
               GOTO EPPI.2
            END
            DEST.CITY = DZIP.REC<1>
            DEST.ST   = DZIP.REC<2>
            DEST.CITY.STR = DEST.CITY[1,20]:',':DEST.ST 'L#2'
            TEMP = DEST.ZIP[1,5] 'R#5' :'  ':DEST.CITY.STR[1,24] 'L#24'
            PP.HEADER<SEL,4> = QI
            PP.HEADER<SEL,5> = DEST.ST
            PP.HEADER<SEL,6> = DEST.CITY
         CASE 1
            CALL ELINE('Invalid option, Enter valid zip, "X" or "EX"')
            GOTO EPPI.2
      END CASE

*
      CRT @(39,ROW1):TEMP


EPPI.5:*** Set Point to Point to Enabled or Disabled

      PP.ENABLED = PP.HEADER<SEL,7>
      HELP = "[E]nable [D]isable [X]=Back [EX]it"
      MASK =  PP.ENABLED

EPPI.6:

      CRT @(0,22):"Select an option:":@(-4)
      CALL GEN.IN(72,ROW1,MASK,'',Q,0,'','','',0,72,ROW1,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI = '' THEN QI=TRIM(PP.ENABLED)

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EPPI.6

         CASE QI = 'X'
            BACK.FLAG = TRUE

         CASE QI= 'E' OR QI='D'
            PP.ENABLED = QI
            PP.HEADER<SEL,7> = PP.ENABLED
            IF PP.ENABLED = 'D' THEN TEMP = 'DISABLED'
            IF PP.ENABLED = 'E' THEN TEMP = 'ENABLED'
         CASE 1
            CALL ELINE('Invalid option, valid options are "E", "D", "X" and "EX". Try Again.')

            GOTO EPPI.6
      END CASE

      CRT @(72,ROW1):TEMP "R#8"

****&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

      RETURN

      EDIT.PP.INFO.2 :


***&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&_______________________________________________________________________________

      GOSUB DISPLAY.PP.INFO.2
      CRT @(0,22):'Enter Option :':@(-4)
      HELP="Enter line # to edit, [X]-Back [EX]it."
      MASK = ''

      CALL GEN.IN(14,22,MASK,'',Q,0,6,'','',2,14,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            GOTO ENTER.SHIPPING.POINT.1
         CASE QI = 'X'
            BACK.FLAG = 1
            RETURN
         CASE NUM(QI)
            SEL2 = QI
            IF SEL2 LT START ! SEL2 GT STOP+1 THEN
               CALL ELINE('Invalid selection.')
               GOTO EDIT.PP.INFO.2
            END

            PP.DETAIL2 = PP.DETAIL<SEL,SEL2,3>

            IF PP.DETAIL2 = ''  THEN
               IF SEL2 GT 1 THEN
                  LAST.LINE = PP.DETAIL<SEL,SEL2-1,3>
                  IF LAST.LINE = '' THEN
                     CALL ELINE('No data found.')
                     GOTO EDIT.PP.INFO.2
                  END
               END
            END
            GOSUB EPP2.3
            GOTO EDIT.PP.INFO.2
         CASE 1
            CALL ELINE('No data found.')
            GOTO EDIT.PP.INFO.2
      END CASE

      RETURN

*
***&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&_______________________________________________________________________________
*


EPP2.3:

      PP.BEG.EFF.DATE = PP.DETAIL<SEL,SEL2,3>
      PP.BD.HOLD      = PP.BEG.EFF.DATE

      IF PP.BEG.EFF.DATE = '' THEN MASK = 'MM/DD/YY' ELSE MASK = PP.BEG.EFF.DATE 'D2/'

      ROW2 = 7+REM(SEL2,13)
      IF ROW2 = 7 THEN ROW2 = 18

      CRT @(0,22):"Enter the Opening Date for the New Rates. ":@(-4)
      HELP = "OPTIONS: [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(6,ROW2,MASK,'DATE',Q,0,8,'','',0,-8,ROW2,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            RETURN
         CASE QI = 'T'
            Q = DATE()
         CASE QI = 'X'
            BACK.FLAG = 1
            RETURN
         CASE QI = ''
            IF PP.BEG.EFF.DATE = '' THEN
               Q = DATE()
            END ELSE
               Q = PP.BEG.EFF.DATE
            END
         CASE 1
            IF ICONV(QI,'D2/') NE '' THEN
               NULL
            END ELSE
               CALL ELINE('Invalid Option. Valid options are "T", "X", RETURN and a date formatted MM/DD/YY.')
               GOTO EPP2.3
            END
      END CASE

      PP.BEG.EFF.DATE = Q
      PP.DETAIL<SEL,SEL2,3> = PP.BEG.EFF.DATE

      CRT @(6,ROW2):PP.BEG.EFF.DATE 'D2/'

EPP2.4:

      PP.END.EFF.DATE = PP.DETAIL<SEL,SEL2,4>
      PP.ED.HOLD      = PP.END.EFF.DATE

      IF PP.END.EFF.DATE = '' THEN MASK = 'MM/DD/YY' ELSE MASK = PP.END.EFF.DATE 'D2/'

      CRT @(0,22):"Enter a Closing Date for the New Rates.":@(-4)
      HELP = "OPTIONS: ' '-Leave Open [T]oday [H]elp [X]=Back [EX]it Program"
      CALL GEN.IN(18,ROW2,MASK,'DATE',Q,0,8,'','',0,-8,ROW2,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            RETURN
         CASE QI = 'T'
            Q = DATE()
         CASE QI = 'X'
            GOTO EPP2.3
         CASE QI = ''
            IF PP.BEG.EFF.DATE = '' THEN
               CALL ELINE('Invalid Option. Valid options are "T", "X" amd a date formatted MM/DD/YY.')
               GOTO EPP2.4
            END ELSE
               IF PP.END.EFF.DATE = '' THEN
                  Q = DATE()
               END ELSE
                  Q = PP.END.EFF.DATE
               END
            END
         CASE QI = ' '
            IF PP.BEG.EFF.DATE = '' THEN
               CALL ELINE('Opening and Closing dates may not both be blank')
               GOTO EPP2.4
            END ELSE
               PP.END.EFF.DATE = ''
               Q = ''
            END
      END CASE

      PP.END.EFF.DATE = Q

      PP.DETAIL<SEL,SEL2,4> = PP.END.EFF.DATE

      IF PP.END.EFF.DATE = '' THEN
         CRT @(18,ROW2):SPACE(8)
      END ELSE
         CRT @(18,ROW2):PP.END.EFF.DATE 'D2/'
      END

* Check date range for validity

      UPD.DATES = 1

      IF PP.BD.HOLD = PP.BEG.EFF.DATE AND PP.ED.HOLD = PP.END.EFF.DATE THEN
         NULL   ;* No change form before.
      END ELSE
         IF PP.END.EFF.DATE = '' THEN
            IF PP.BEG.EFF.DATE = '' THEN
               CALL ELINE("Both Begin and End effective dates may not be blank")
               GOTO EPP2.4
            END ELSE
               PP.NEXT.ED = PP.DETAIL<SEL,SEL2,4>
               IF PP.NEXT.ED NE '' THEN
                  CALL ELINE("Only the last End effective dates may be blank")
                  GOTO EPP2.4
               END
            END
         END ELSE
            IF PP.END.EFF.DATE LE PP.BEG.EFF.DATE THEN
               CALL ELINE("End Effective date may not be earlier than Begin date")
               GOTO EPP2.4
            END
         END
      END

      IF UPD.DATES THEN
         PP.DETAIL<SEL,SEL2,3> = PP.BEG.EFF.DATE
         PP.DETAIL<SEL,SEL2,4> = PP.END.EFF.DATE
      END

EPP2.5:

      PP2.CONTR = PP.DETAIL<SEL,SEL2,5>
      IF PP2.CONTR # '' THEN
         MASK = PP2.CONTR'R26(#8)'
      END ELSE
         MASK = ''
      END
      HELP=" [X]=Back [EX]it"

EPP2.6:

      CRT @(0,22):"Enter a contract per mile amount:":@(-4)
      CALL GEN.IN(30,ROW2,MASK,'AMT2',Q,0,8,'','',2,30,ROW2,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EPP2.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO EPP2.4
         CASE QI=''

         CASE NUM(QI)
            PP2.CONTR=Q

         CASE 1
            CALL ELINE('Invalid option, valid options are RETURN, "X" and "EX".  Try Again.')
            GOTO EPP2.6
      END CASE

      PP.DETAIL<SEL,SEL2,5> = PP2.CONTR

      IF PP2.CONTR='' THEN
         CRT @(30,ROW2):PP2.CONTR'R#8'
      END ELSE
         CRT @(30,ROW2):PP2.CONTR'R26#8'
      END

EPP2.7:

      PP2.BENCH = PP.DETAIL<SEL,SEL2,6>

      IF PP2.BENCH # '' THEN
         MASK = PP2.BENCH'R26(#8)'
      END ELSE
         MASK = ''
      END
      HELP=" [X]=Back [EX]it"

EPP2.8:

      CRT @(0,22):"Enter a benchmark per mile amount:":@(-4)
      CALL GEN.IN(42,ROW2,MASK,'AMT2',Q,0,8,'','',2,42,ROW2,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO EPP2.4

         CASE QI = 'X'
            BACK.FLAG = TRUE
            GOTO EPP2.5

         CASE QI=''

         CASE NUM(QI)
            PP2.BENCH=Q

         CASE 1
            CALL ELINE('Invalid option, valid options are RETURN, "X" and "EX".  Try Again.')
            GOTO EPP2.8
      END CASE

      PP.DETAIL<SEL,SEL2,6> = PP2.BENCH

      PP.DETAIL<SEL,SEL2,1> = PP.HEADER<SEL,1>   ;* Orig Zip Pt to Pt
      PP.DETAIL<SEL,SEL2,2> = PP.HEADER<SEL,4>   ;* Orig Zip Pt to Pt

      IF PP2.BENCH='' THEN
         CRT @(42,ROW2):PP2.BENCH'R#8'
      END ELSE
         CRT @(42,ROW2):PP2.BENCH'R26#8'
      END


EPP2.EXIT:

      RETURN

**************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd

DISPLAY.PP.INFO.1:***

      CRT @(25,0):CLIENT.ID'L#5':' ':CL.NAME'L#20'
      CRT @(25,1):CARRIER.ID'L#5':' ':CARRIER.NAME'L#20'
      TABLE.HEADING =' Valid Point to Point Shipments '

      CALL FB.DRAW.BOX(0,2,79,20,' ','--- --- ')      ; * Full box image + header
*
* Display Heading
*
      NUM.POINTS1 = DCOUNT(PP.HEADER,@AM)
      NUM.PAGES = INT(NUM.POINTS1/PAGE.SIZE)+1
      IF TABLE.HEADING # '' THEN CALL FB.PRINT.CENT(0,79,3,TABLE.HEADING)
      STR.OUT = '(Page ':DSP.PAGE'R#1':' of ':NUM.PAGES:')'
      CRT @(78-LEN(STR.OUT),20):STR.OUT

      TEMP = "##":' ':'Origination' 'L#31' :SPACE(2):'|':SPACE(2)
      TEMP := 'Destination' 'L#31' : SPACE(3)   ;* NPR99
      TEMP := 'Status'

      CRT @(0,4):TEMP
      TEMP=STR('=',LEN(TEMP)):'    '
      CRT @(0,5):TEMP

      START=(PAGE*13)-12

      IF START GT 108 THEN
         START=1
         PAGE=1
      END
      STOP=START+12

* CRT @(0,22):;DEBUG

      FOR I=START TO STOP STEP 1
         ROW=5+REM(I,13)
         IF ROW=5 THEN ROW=18
         IF PP.HEADER<I> = '' THEN
            PRINT @(0,ROW): I"R#2"
         END ELSE
            ORIG.ZIP  = PP.HEADER<I,1>
            ORIG.ST   = PP.HEADER<I,2>
            ORIG.CITY = PP.HEADER<I,3>

            DEST.ZIP  = PP.HEADER<I,4>
            DEST.ST   = PP.HEADER<I,5>
            DEST.CITY = PP.HEADER<I,6>
            PP.ENABLED = PP.HEADER<I,7>

            ORIG.CITY.STR = ORIG.CITY[1,20]:',':ORIG.ST 'L#2'
            DEST.CITY.STR = DEST.CITY[1,20]:',':DEST.ST 'L#2'
            TEMP = I "R#2":' ':ORIG.ZIP[1,5] 'R#5' :'  ':ORIG.CITY.STR[1,24] 'L#24'
            TEMP := SPACE(2):'|':SPACE(2) : DEST.ZIP[1,5] 'R#5' :'  ':DEST.CITY.STR[1,24] 'L#24'

            IF PP.ENABLED = 'E' THEN
               TEMP:= '  ':'ENABLED'
            END ELSE
               TEMP:= ' ':'DISABLED'
            END
            PRINT @(0,ROW): TEMP
         END
      NEXT I
      RETURN

DISPLAY.PP.INFO.2:***

      GOSUB INIT.SCREEN
      CRT @(25,0):CLIENT.ID 'L#5':' ':CL.NAME'L#20'
      CRT @(25,1):CARRIER.ID 'L#5':' ':CARRIER.NAME'L#20'

      D.ORIG.ZIP = PP.DETAIL<SEL,SEL2,1>
      D.DEST.ZIP = PP.DETAIL<SEL,SEL2,2>

      READ D.OZIP.REC FROM F.ZIPS, D.ORIG.ZIP ELSE D.OZIP.REC = ''
      D.ORIG.CITY = D.OZIP.REC<1>
      D.ORIG.ST   = D.OZIP.REC<2>

      READ D.DZIP.REC FROM F.ZIPS, D.DEST.ZIP ELSE D.DZIP.REC = ''
      D.DEST.CITY = D.DZIP.REC<1>
      D.DEST.ST   = D.DZIP.REC<2>

      D.ORIG.STR = D.ORIG.ZIP:' - ' : D.ORIG.CITY:', ':D.ORIG.ST
      D.DEST.STR = D.DEST.ZIP:' - ' : D.DEST.CITY:', ':D.DEST.ST

*      TABLE.HEADING ='Details for : ': PP.INFO.2 'L#60'

      CALL FB.DRAW.BOX(0,2,79,20,' ','--- --- ')      ; * Full box image + header

      NUM.DATES = DCOUNT(PP.DETAIL<SEL>,@VM)

*
* Display Heading
*
      NUM.PAGES2 = INT(NUM.DATES/PAGE.SIZE)+1

*      IF TABLE.HEADING # '' THEN CALL FB.PRINT.CENT(0,79,3,TABLE.HEADING)

      CRT @(0,3) : "Origination : ":D.ORIG.STR
      CRT @(0,4) : "Destination : ":D.DEST.STR

      STR.OUT = '(Page ':DSP.PAGE'R#1':' of ':NUM.PAGES2:')'
      CRT @(78-LEN(STR.OUT),20):STR.OUT
      TEMP="##   From Date     To Date    Contract       Bench"
      CRT @(0,6):TEMP
      TEMP=STR('=',LEN(TEMP)):'    '
      CRT @(0,7):TEMP

* CRT @(0,22) :  ; DEBUG

      START2 = (PAGE2*13)-12

      IF START2 GT 108 THEN
         START2 = 1
         PAGE2  = 1
      END

      STOP2 = START2 + 12

      FOR I = START2 TO STOP2 STEP 1
         ROW2=7+REM(I,13)
         IF ROW2=7 THEN ROW2=18
         D.DONE = PP.DETAIL<SEL,I>
         IF D.DONE = '' THEN D.DONE = 1 ELSE D.DONE = 0
         IF D.DONE THEN
            CRT @(0,ROW2): I "R#2"
         END ELSE
            BEG.EFF.DATE = PP.DETAIL<SEL,I,3>
            END.EFF.DATE = PP.DETAIL<SEL,I,4>
            CONTR = PP.DETAIL<SEL,I,5>
            BENCH = PP.DETAIL<SEL,I,6>

            TEMP = I "R#2" : SPACE(4)
            IF BEG.EFF.DATE = '' THEN
               TEMP := SPACES(12)
            END ELSE
               TEMP := BEG.EFF.DATE'D2/' : SPACE(4)
            END

            IF END.EFF.DATE = '' THEN
               TEMP := SPACES(12)
            END ELSE
               TEMP := END.EFF.DATE 'D2/' : SPACE(4)
            END
            TEMP := CONTR 'R26#8': SPACE(4) : BENCH 'R26#8':' '

            CRT @(0,ROW2): TEMP
         END
      NEXT I

      RETURN

UPDATE.PP.INFO.2:***

      N.SVM = DCOUNT(PP.DETAIL<SEL,SEL2>,@SVM)

      FOR SVV = 1 TO N.SVM
         P.ORIG.ZIP      = PP.DETAIL<SEL,SEL2,1>
         P.DEST.ZIP      = PP.DETAIL<SEL,SEL2,2>
         P.BEG.EFF.DATE  = PP.DETAIL<SEL,SEL2,3>
         P.END.EFF.DATE  = PP.DETAIL<SEL,SEL2,4>
         P.CONTR         = PP.DETAIL<SEL,SEL2,5>
         P.BENCH         = PP.DETAIL<SEL,SEL2,6>

         ID.PP = CARRIER.ID:"*":P.ORIG.ZIP:"*":P.DEST.ZIP:"*":EQUIP.TYPE
         READ PPREC FROM F.AUDIT.PP, ID.PP ELSE PPREC = ''

         PPREC<1,SEL2> = P.BEG.EFF.DATE
         PPREC<2,SEL2> = P.END.EFF.DATE
         PPREC<3,SEL2> = P.CONTR
         PPREC<4,SEL2> = P.BENCH
         PPREC<5>      = "E"   ;* Enabled

         IF SEL2 NE "" THEN
            WRITE PPREC ON F.AUDIT.PP, ID.PP
         END ELSE
            CRT "SEL2  = >>":SEL2:"<< ?? - CALL A PROGRAMMER QUICK " ; DEBUG
            STOP
         END

      NEXT VV


      RETURN


OWENS.ARRAY.CHECK:****
**** Trap for the Null Array Thing *****

      IF OWEN.REC<1>='TLALL' THEN
         IF OWEN.REC<2>='' AND OWEN.REC<8>='' AND OWEN.REC<9>='DISABLE' THEN
            IF OWEN.REC<10>='DISABLE' AND OWEN.REC<15>='DISABLE' THEN
*DFOWEN:          CRT @(0,23):CHAR(7):"Caught the NULL thing... Call Owen or David now!":
*DF               INPUT NUL:
*DF               IF NUL#'OWENORDAVID' THEN GO OWEN
            END
         END
      END
      RETURN
