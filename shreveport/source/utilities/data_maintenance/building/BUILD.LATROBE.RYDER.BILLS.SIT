* PROGRAM: BUILD.LATROBE.RYDER.BILLS.SIT
*
* AUTHOR: N.C.G. Pratt
* DATE  : January 2011
*
* DESCRIPTION:  Routine to build Freight Bill records for Latrobe Steel (Client 01329) for 'Carrier' Ryder.
*
* TAB delimited File layout as of 01/26/2011  with sample row
*
*      Column Header                            - Sample Data
*      ----------------------------------------   ----------------------------------------------
*  1 - record_counter                           -             "No Data"
*  2 - carrier_name                             - Ryder
*  3 - trans_code                               - 9
*  4 - trans_mode                               - Dedicated
*  5 - bill_date                                - 06-Nov-10
*  6 - invoice_number                           - 448200918
*  7 - manifest                                 - 101106001
*  8 - stop_number                              - 0
*  9 - direction                                - O
* 10 - origin_name                              - LATROBE SPECIALTY STEEL
* 11 - origin_zip                               - 15650
* 12 - origin_city                              - LATROBE
* 13 - origin_state                             - PA
* 14 - destination_name                         - LATROBE SPECIALTY STEEL
* 15 - destination_zip                          - 15650
* 16 - destination_city                         - LATROBE
* 17 - destination_state                        - PA
* 18 - loadedmiles                              - 505
* 19 - emptymiles                               - 505
* 20 - runningmiles                             - 0
* 21 - charge_desc                              - Empty_Mile|Loaded_Miles|
* 22 - charge_detail                            - 356.5300|356.5300|
* 23 - actual_charge                            - 0
* 24 - fixed_allocation                         - 0
* 25 - total_charge                             - 0
* 26 - manifest_charge                          - 994.08
* 27 - bill_of_lading                           -
* 28 - weight_pickup                            - 0
* 29 - weight_deliver                           - 0
* 30 - weight_total                             - 0
* 31 - process_date                             - 31-Oct-10
*
********************************************************************************************************
*
* NPR01 051911 - Added Origination and destination zips from BOL data supplied by Latrobe to User fields

$INCLUDE FILE.DEFS INC_ADDS60.CODES

PROG.NAME = "BUILD.LATROBE.RYDER.BILLS.SIT"

      CARRIER.ID = "09059"               ; * Ryder Integrated Logistic , PA   ;* Confirm

***      CLIENT.ID  = "01329"
***      CLIENT.ID  = "09997"                ; * For testing

      CALL CHANNEL(CH.NUM)
      CALL GET.USER(USER)

      RESTRICT.ACCESS = 1

      IF RESTRICT.ACCESS THEN
         BEGIN CASE
*
* Authorized Users
*
            CASE USER = 'OWEN'
            CASE USER = 'DAVID'
            CASE USER = 'MKERBOW'
            CASE USER = 'NPRATT'
            CASE USER = 'MYRA'
            CASE USER = 'MARY'
**            CASE USER = 'JDARWIN'
**            CASE USER = 'LCORKERN'
**            CASE USER = 'AHERBEL'
*
* Restrict all others
*
            CASE 1
               CALL ELINE('Access Denied! See Owen for Access')
               CHAIN "G"
         END CASE
      END

GET.CLIENT :

      CRT @(-1)
      CRT @(0,0) : PROG.NAME 

      CRT @(0,21):"Create [T]est bills or [R]eal bills"
      HELP="EX=Exit. [T]est bills on client 09997 or [R]eal bills for client 01329"
      CALL GEN.IN(0,22,'Enter selection please. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'
            CALL ELINE("Process Aborted")
            STOP
         CASE QI='T'
            CLIENT.ID = "09997"
         CASE QI='R'
            CLIENT.ID = "01329"
         CASE 1
            CALL ELINE('Invalid entry. [EX], or [T] or [R].')
            GOTO GET.CLIENT
      END CASE
      CRT @(0,21):@(-3):

      OPEN '','BILLDATA.':USER TO F.BILLDATA ELSE
         CALL ELINE("Cant open BILLDATA.NPRATT file")
         STOP
      END

      OPEN '','FTP.RYDER' TO F.FTP.RYDER ELSE
         CALL ELINE("Cant open file FTP.RYDER")
         STOP
      END

      OPEN '','FTP.RYDER.HISTORY' TO F.FTP.RYDER.HISTORY ELSE
         CALL ELINE("Cant open file FTP.RYDER.HISTORY")
         STOP
      END

***      OPEN '','FTP.':CLIENT.ID TO F.FTP ELSE                ;* FTP.01329
***         CALL ELINE("Cant open file FTP.":CLIENT.ID)
***         STOP
***      END

      OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.HIST ELSE
         CALL ELINE("Cannot open FB.BILLS.HIST for client ":CLIENT.ID)
         STOP
      END

      OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
         CALL ELINE("ERROR - Cannot open FB.BILLS for client ":CLIENT.ID)
         STOP
      END

      OPEN '','FB.BOL.CRX,':CLIENT.ID TO F.BOL.CRX ELSE
         CALL ELINE("ERROR - Cannot open FB.BOL.CRX for client ":CLIENT.ID)
         STOP
      END

      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL ELINE("ERROR - Cannot open CLIENTS file")
         STOP
      END

      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL ELINE("ERROR - Cannot open CARRIERS file")
         STOP
      END

      OPEN '','FB.BILLS.CRX' TO F.CRX ELSE
         CALL ELINE("ERROR - Cannot open FB.BILLS.CRX file")
         STOP
      END

      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL ELINE("ERROR - Cannot open FB.TABLES file")
         STOP
      END

      OPEN '','FBWORK':CH.NUM TO F.WORK ELSE
         CALL ELINE("ERROR - Cannot open FBWORK":CH.NUM)
         STOP
      END

      CLEARFILE F.WORK

      READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
         CALL ELINE("ERROR - Client ":CLIENT.ID:" not on file.")
         STOP
      END
      CLIENT.DAYS=CLIENT.REC<186>

*---- Get carrier data

      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE
         CALL ELINE("ERROR - Carrier ":CARRIER.ID:" not on file.")
         STOP
      END

      CARRIER.DAYS=CARRIER.REC<23>
      CARRIER.DAYS.OVERRIDE=CARRIER.REC<94>
      CARRIER.MODE=CARRIER.REC<44>
      CARRIER.MODE.WGT=CARRIER.REC<70>
      CARRIER.MODE.BY.WGT=CARRIER.REC<71>
      CARRIER.SCAC=CARRIER.REC<12>

***      ID.FILE = "ROUTEEXTRACT_448200_20100919_20100925.TXT"   ;* Hard coded for testing purposes

      ID.INV = "DSP4330B.PDF"            ; * Ryders summary weekly invoice which used to be sent to Latrobe has the same name every week - need to rename it.
                                         ; * We use it to check totals against the ROUTEEXTRACT file Ryder supply (The file used here to create bills).

***      W.SEN = \SSELECT FTP.RYDER WITH @ID = "ROUTEEXTRACT_448200_20110320_20110326.txt]"\

      W.SEN = \SSELECT FTP.RYDER WITH @ID = "ROUTEEXTRACT_448200_]" AND WITH @ID = "[.txt"\

      EXECUTE W.SEN CAPTURING OUTPUT

      N.FILES = @SELECTED
      IF N.FILES LE 0 THEN
         CALL ELINE("No files found to process")
         STOP
      END

      EOF = "N"
      CRT @(-1)

      LOOP
         READNEXT ID.FILE ELSE EOF = "Y"
      UNTIL EOF = "Y" DO
         ID.TAB = "RYDER*LATROBE*LOG"
         READ TAB.REC FROM F.TABLES, ID.TAB ELSE TAB.REC = ""
         TPOS = ""
         PROCESS.FILE = 1
         LOCATE ID.FILE IN TAB.REC<1> SETTING TPOS THEN
            W.WHO  = TAB.REC<2,TPOS>
            W.WHEN = TAB.REC<3,TPOS>
            W.TEST.RUN = TAB.REC<5,TPOS>
            IF W.TEST.RUN = "TESTRUN" THEN
               NULL
            END ELSE
               PROCESS.FILE = 0
               CALL ELINE("File ":ID.FILE : " was processed by " : W.WHO : " on " : OCONV(W.WHEN,"D2/") : " Skipping!")
            END
         END
         IF PROCESS.FILE THEN
            GOSUB PROCESS.FILE
         END
      REPEAT

      CALL ELINE("Done")

*
      STOP

PROCESS.FILE:

      READ INP.REC FROM F.FTP.RYDER, ID.FILE ELSE
         CALL ELINE("CANT Read file ":ID.FILE)
         RETURN
      END

      NEW.INP.REC = INP.REC

      IF INDEX(INP.REC<1>,"record",1) THEN
         HDG.LINE = NEW.INP.REC<1>

      END ELSE
         HDG.LINE = ""
      END

      CONVERT "=" TO "" IN NEW.INP.REC
      CONVERT \"\ TO \\ IN NEW.INP.REC

      FROM.DATE = FIELD(ID.FILE,"_",3)
      TO.DATE = FIELD(ID.FILE,"_",4)

      W.FROM.YR = FROM.DATE[1,4]
      W.FROM.MTH = FROM.DATE[5,2]
      W.FROM.DAY = FROM.DATE[7,2]

      O.NEW.FROM.DATE = W.FROM.MTH:"/":W.FROM.DAY:"/":W.FROM.YR
      I.NEW.FROM.DATE = ICONV(O.NEW.FROM.DATE,"D4/")

      W.TO.YR = TO.DATE[1,4]
      W.TO.MTH = TO.DATE[5,2]
      W.TO.DAY = TO.DATE[7,2]

      O.NEW.TO.DATE = W.TO.MTH:"/":W.TO.DAY:"/":W.TO.YR
      I.NEW.TO.DATE = ICONV(O.NEW.TO.DATE,"D4/")

*** Check for correct file before processing

CHECK.FILE :

      CRT @(-1)
      CRT @(0,0) : PROG.NAME 

      CRT @(10,10) : "Client    " : CLIENT.ID : " " : CLIENT.REC<2>

      CRT @(10,12) : "File name " : ID.FILE

      CRT @(10,14) : "For the period " : O.NEW.FROM.DATE : " to " : O.NEW.TO.DATE

*      CRT @(10,15) : I.NEW.FROM.DATE
*
*      CRT @(10,17) : O.NEW.TO.DATE
*      CRT @(10,18) : I.NEW.TO.DATE

      CRT @(0,21):"[YES] this is the correct file to process for client # ":CLIENT.ID

      HELP="EX=Exit. [YES]=Continue."
      CALL GEN.IN(0,22,'Enter selection please. ---','',Q,0,3,'','',0,-3,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'
            CALL ELINE("Process Aborted")
            STOP
         CASE QI='YES'
            NULL
         CASE 1
            CALL ELINE('Invalid entry. [EX], or [YES].')
            GOTO CHECK.FILE
      END CASE
      CRT @(0,21):@(-3):

*** Copy Ryder PDF Invoice to Uniquely named file

      IF CLIENT.ID  = "01329" THEN
         ID.INV.NEW = "INV_" : W.TO.MTH:W.TO.DAY:W.TO.YR : ".pdf"

         TO.FILE = "(FTP.RYDER.HISTORY " : ID.INV.NEW
         DATA TO.FILE
         EXECUTE \COPY FTP.RYDER \ : ID.INV CAPTURING OUTPUT

         IF INDEX(OUTPUT,"not COPIED",1) OR INDEX(OUTPUT,"not found",1) THEN
            CRT ; CRT OUTPUT ; CRT ; CRT
            CRT "Weekly Invoice " : ID.INV : " not copied to " : ID.INV.NEW
            CRT ; CRT
            CRT @(0,22) : "Continue Y/N" :
            INPUT RESP
            IF RESP NE "Y" THEN
               CALL ELINE("Process Aborted")
               STOP
            END
         END ELSE
            DELETE F.FTP.RYDER, ID.INV
         END
      END

      N.LINES = DCOUNT(NEW.INP.REC,@AM)
      FOR IL = 1 TO N.LINES
         W.LINE = NEW.INP.REC<IL>
         CONVERT \"\ TO \\ IN W.LINE

         TESTING = 0
         IF TESTING THEN
            CRT @(-1)
            CRT W.LINE
            ND = DCOUNT(W.LINE,CHAR(9))
            FOR XX = 1 TO ND
               IF HDG.LINE NE "" THEN
                  CRT XX "R#3" : " - " : FIELD(HDG.LINE,CHAR(9),XX) "L#40" : " - " : FIELD(W.LINE,CHAR(9),XX)
               END ELSE
                  CRT XX "R#3" : " - " : FIELD(W.LINE,CHAR(9),XX)
               END
            NEXT XX
**    DEBUG
         END

         CONVERT CHAR(9) TO @VM IN W.LINE

         PCNT = 1
         W.RECORD.COUNTER = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1

         IF W.RECORD.COUNTER NE "" THEN GOTO NEXT.LINE       ; * Skip heading if present

         W.CARRIER.NAME = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.TRANS.CODER = TRIM(FIELD(W.LINE,@VM,PCNT)) ; PCNT +=1

         IF NOT(NUM(W.TRANS.CODER)) THEN GOTO NEXT.LINE      ; * Skip heading if present

         W.TRANS.MODE = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.BILL.DATE = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.INVOICE.NO = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.MANIFEST.NO = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.STOP.NUMBER = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1

         W.DATE = W.BILL.DATE ; GOSUB CONVERT.DATE ; W.BILL.DATE = I.DATE

         W.IN.OUT = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.ORIG.NAME = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.ORIG.ZIP = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.ORIG.CITY = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.ORIG.STATE = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.DEST.NAME = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.DEST.ZIP = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.DEST.CITY = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.DEST.STATE = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1

         W.LOADED.MILES = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.EMPTY.MILES = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.RUNNING.MILES = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1

         W.CHARGE.DESC = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.CHARGE.DETAIL = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1

         S.ACTUAL.CHG = ICONV(FIELD(W.LINE,@VM,PCNT),"MR2") ; PCNT +=1
         S.FIXED.ALLOC = ICONV(FIELD(W.LINE,@VM,PCNT),"MR2") ; PCNT +=1
         S.TOTAL.CHARGE = ICONV(FIELD(W.LINE,@VM,PCNT),"MR2") ; PCNT +=1
         S.MANIFEST.CHARGE = ICONV(FIELD(W.LINE,@VM,PCNT),"MR2") ; PCNT +=1

         W.BOL = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1

         W.WEIGHT.PICKUP = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.WEIGHT.DELIVER = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.WEIGHT.TOTAL = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1
         W.PROCESS.DT.RYDER = FIELD(W.LINE,@VM,PCNT) ; PCNT +=1

         W.ACTUAL.CHG = S.TOTAL.CHARGE   ; * Confirm ?????
         W.CARRIER.CHG = S.TOTAL.CHARGE  ; * Confirm ?????

         W.DATE = W.PROCESS.DT.RYDER ; GOSUB CONVERT.DATE ; W.PROCESS.DT.RYDER = I.DATE

         W.ORIG.ZIP = FIELD(W.ORIG.ZIP,"-",1)
         CONVERT " " TO "" IN W.ORIG.ZIP
         IF NUM(W.ORIG.ZIP) THEN W.ORIG.ZIP = W.ORIG.ZIP "R%5"

         W.DEST.ZIP = FIELD(W.DEST.ZIP,"-",1)
         CONVERT " " TO "" IN W.DEST.ZIP
         IF NUM(W.DEST.ZIP) THEN W.DEST.ZIP = W.DEST.ZIP "R%5"


         IF CARRIER.DAYS.OVERRIDE#'Y' THEN
            IF CLIENT.DAYS#'' AND NUM(CLIENT.DAYS) THEN
               DUE.DATE=BILL.DATE+CLIENT.DAYS
            END
*ZZ            IF CLIENT.DAYS='C' THEN
*ZZ               CCDAYS.ID=CLIENT.ID'R%5':'*':CARRIER.ID'R%5'
*ZZ               READ CCDAYS.REC FROM F.CCDAYS,CCDAYS.ID THEN
*ZZ                  CCDAYS=CCDAYS.REC<1>
*ZZ                  DUE.DATE=BILL.DATE+CCDAYS
*ZZ               END
*ZZ            END
         END

         TESTING = 0
         IF TESTING THEN
            CRT @(-1)
            CRT W.LINE
            ND = DCOUNT(W.LINE,@VM)
            FOR XX = 1 TO ND
               IF HDG.LINE NE "" THEN
                  CRT XX "R#3" : " - " : FIELD(HDG.LINE,@VM,XX) "L#40" : " - " : FIELD(W.LINE,@VM,XX)
               END ELSE
                  CRT XX "R#3" : " - " : FIELD(W.LINE,@VM,XX)
               END
            NEXT XX
**            DEBUG
         END

         IF W.MANIFEST.NO NE "999999999" THEN
            W.INV.SUFFIX = W.INVOICE.NO[5,5] "R%5"
            GOSUB BUILD.WORK.FILE
         END ELSE
            IF INDEX(W.LINE,"Totals",1) THEN
               GTOT.LOADED.MILES = FIELD(W.LINE,@VM,18)
               GTOT.EMPTY.MILES = FIELD(W.LINE,@VM,19)
               GTOT.RUNNING.MILES = FIELD(W.LINE,@VM,20)

               GTOT.ACTUAL.CHG = ICONV(FIELD(W.LINE,@VM,23),"MR2")
               GTOT.FIXED.ALLOC = ICONV(FIELD(W.LINE,@VM,24),"MR2")
               GTOT.TOTAL.CHARGE = ICONV(FIELD(W.LINE,@VM,25),"MR2")
               GTOT.MANIFEST.CHARGE = ICONV(FIELD(W.LINE,@VM,26),"MR2")

               GTOT.WEIGHT.PICKUP = FIELD(W.LINE,@VM,28)
               GTOT.WEIGHT.DELIVER = FIELD(W.LINE,@VM,29)
               GTOT.WEIGHT.TOTAL = FIELD(W.LINE,@VM,30)
            END
         END
NEXT.LINE:
      NEXT IL

      CALL ELINE("<cr> to Create Freight Bills.")

      GOSUB CREATE.BILLS

      CALL ELINE("Done Creating Freight Bills.")

      ERROR.MSG  = ""

*QQ      IF GTOT.LOADED.MILES NE BTOT.LOADED.MILES THEN
*QQ         MSG = "Loaded mile totals on input file do not match Bill totals. CHECK!!!"
*QQ         CALL ELINE(MSG)
*QQ      END

*QQ      IF GTOT.EMPTY.MILES NE BTOT.EMPTY.MILES THEN
*QQ         MSG = "Empty mile totals on input file do not match Bill totals. CHECK!!!"
*QQ         CALL ELINE(MSG)
*QQ      END

*QQ      IF GTOT.RUNNING.MILES NE BTOT.RUNNING.MILES THEN
*QQ         MSG = "Running mile totals on input file do not match Bill totals. CHECK!!!"
*QQ         CALL ELINE(MSG)
*QQ      END

*QQ      IF GTOT.ACTUAL.CHG NE BTOT.ACTUAL.CHG THEN
*QQ         MSG = "Actual Charge totals on input file do not match Bill totals. CHECK!!!"
*QQ         CALL ELINE(MSG)
*QQ      END

*QQ      IF GTOT.FIXED.ALLOC NE BTOT.FIXED.ALLOC THEN
*QQ         MSG = "Fixed Allocation totals on input file do not match Bill totals. CHECK!!!"
*QQ         CALL ELINE(MSG)
*QQ      END

      IF GTOT.TOTAL.CHARGE NE BTOT.TOTAL.CHARGE THEN
         ERROR.MSG<-1> = "Total charges on file " : OCONV(GTOT.TOTAL.CHARGE,'MR2,') : " do not match Bill total " : OCONV(BTOT.TOTAL.CHARGE,'MR2,')
*         CALL ELINE(MSG)
      END

*QQ      IF GTOT.MANIFEST.CHARGE NE BTOT.MANIFEST.CHARGE THEN
*QQ         MSG = "Manifest Charge totals on file do not match Bill totals. CHECK!!!"
*QQ         CALL ELINE(MSG)
*QQ      END

      IF GTOT.WEIGHT.PICKUP NE GTOT.WEIGHT.DELIVER THEN
         ERROR.MSG<-1> = "Input file total weight descrepancy :  Picked up " : OCONV(GTOT.WEIGHT.PICKUP,'MR0,') : ", delivered " : OCONV(GTOT.WEIGHT.DELIVER,'MR0,')
*         CALL ELINE(MSG)
      END

      IF GTOT.WEIGHT.DELIVER NE BTOT.WEIGHT.DELIVER THEN
         ERROR.MSG<-1> = "Delivered Weight total on file " : OCONV(GTOT.WEIGHT.DELIVER,'MR0,') : " does not match Bill total " : OCONV(BTOT.WEIGHT.DELIVER,'MR0,')
*         CALL ELINE(MSG)
      END

      IF ERROR.MSG NE "" THEN
         ID.TAB.ERR = "RYDER*LATROBE*LOG*" : DATE()
         READ TAB.ERRS FROM F.TABLES, ID.TAB.ERR ELSE TAB.ERRS = ""
         TAB.ERRS<-1> = OCONV(DATE(),"D2/") : " " : OCONV(TIME(),"MTS") : " Client " : CLIENT.ID
         CRT @(-1)
         CRT @(0,0) : PROG.NAME 

         CRT @(10,10) : "Client    " : CLIENT.ID : " " : CLIENT.REC<2>

         CRT @(10,12) : "File name " : ID.FILE

         CRT @(10,14) : "For the period " : O.NEW.FROM.DATE : " to " : O.NEW.TO.DATE

         N.ERRS = DCOUNT(ERROR.MSG,@AM)
         FOR II = 1 TO N.ERRS
            CRT @(0,II+15) : II "R%2" : " " : ERROR.MSG<II>
            TAB.ERRS<-1> = ERROR.MSG<II>
         NEXT II       
         CALL ELINE("Report errors to IT")

         WRITE TAB.ERRS ON F.TABLES, ID.TAB.ERR
      END ELSE
         IF CLIENT.ID = "01329" THEN
            WRITE INP.REC TO F.FTP.RYDER.HISTORY, ID.FILE
            DELETE F.FTP.RYDER, ID.FILE
            CALL ELINE("Done. File " : ID.FILE : " moved to history directory")
         END
      END

      ID.TAB = "RYDER*LATROBE*LOG"
      READ TAB.REC FROM F.TABLES, ID.TAB ELSE TAB.REC = ""
      NXT = DCOUNT(TAB.REC<1>,@VM) + 1
      TAB.REC<1,NXT> = ID.FILE
      TAB.REC<2,NXT> = USER
      TAB.REC<3,NXT> = DATE()
      TAB.REC<4,NXT> = TIME()
      IF CLIENT.ID = "01329" THEN
         TAB.REC<5,NXT> = "LIVERUN"
      END ELSE
         TAB.REC<5,NXT> = "TESTRUN"
      END
      IF ERROR.MSG NE "" THEN
         TAB.REC<6,NXT> = "ERRORS"
      END ELSE
         TAB.REC<6,NXT> = "SUCCESS"
      END
      WRITE TAB.REC ON F.TABLES, ID.TAB

***      CALL ELINE("Done ")

      RETURN

CREATE.BILLS:

      EOF    = "N"
      BL.CNT = 0
      CNT    = 0

      LOADED.MILES         = 0

      BTOT.LOADED.MILES    = 0
      BTOT.EMPTY.MILES     = 0
      BTOT.RUNNING.MILES   = 0

      BTOT.ACTUAL.CHG      = 0
      BTOT.FIXED.ALLOC     = 0
      BTOT.TOTAL.CHARGE    = 0
      BTOT.MANIFEST.CHARGE = 0

      BTOT.WEIGHT.PICKUP   = 0
      BTOT.WEIGHT.DELIVER  = 0
      ROUNDING.TOTAL       = 0                 ; * Adjust last bill so totals match detail

      W.STMT = \SSELECT FBWORK\ : CH.NUM : \ WITH @ID NE "[*]"\
      EXECUTE W.STMT CAPTURING OUTPUT
      N.ITEMS = @SELECTED

      IF N.ITEMS LT 1 THEN
         CALL ELINE("No items found ")
         RETURN
      END

      LOOP
         READNEXT ID.MAN.WORK ELSE EOF = "Y"
      UNTIL EOF = "Y" DO
         CNT += 1
         BL.CNT += 1
***         CRT @(0,22) : CNT

         READ WORK.MAN.REC FROM F.WORK , ID.MAN.WORK THEN
            MAN.WEIGHT.MILES = 0
            NBL = DCOUNT(WORK.MAN.REC<35>,@VM)
            FOR BLX = 1 TO NBL
               W.MAN.MILES    = WORK.MAN.REC<38,BLX>
               W.MAN.WEIGHT   = WORK.MAN.REC<39,BLX>
               W.MAN.WEIGHT.MILES = W.MAN.MILES * W.MAN.WEIGHT
               MAN.WEIGHT.MILES += W.MAN.WEIGHT.MILES
            NEXT BLX

            MAN.TOT.CHARGE = WORK.MAN.REC<24>
            W.INVOICE.NO = WORK.MAN.REC<8,1>

            FOR BOL.POS = 1 TO NBL
               B.BOL.NO = FIELD(WORK.MAN.REC<35,BOL.POS>,"*",1)
               B.DELIVER.WEIGHT = WORK.MAN.REC<37,BOL.POS>
               B.MILES          = WORK.MAN.REC<38,BOL.POS>
               B.WEIGHT.MILES   = B.DELIVER.WEIGHT * B.MILES
               B.FACTOR         = (B.WEIGHT.MILES / MAN.WEIGHT.MILES) / 100
               B.CARRIER.CHG    = ICONV(MAN.TOT.CHARGE*B.FACTOR,"MR2")

               ID.WORK          = ID.MAN.WORK : "*" : B.BOL.NO

               READ WORK.REC FROM F.WORK, ID.WORK THEN
                  W.INV.SUFFIX = W.INVOICE.NO[5,5] "R%5"
                  PRO.NO = W.INV.SUFFIX : "-" : ID.MAN.WORK
                  IF BOL.POS GT 1 THEN
                     PRO.NO := "/" : BOL.POS-1
                  END
                  VERSION = "0"
                  PRO.ID = CARRIER.ID : "*" : PRO.NO : "*" : VERSION
                  OLD.PRO.REC = ""
                  GOSUB WRITE.PRO.INFO
               END
            NEXT NBL
         END

      REPEAT

      RETURN

BUILD.WORK.FILE:

*START MANIFEST SUMMARY WORK RECORD - First line of Manifest related lines

      WORK.MAN.REC = ""

      IF W.MANIFEST.NO NE "" AND W.STOP.NUMBER = "0" THEN
         ID.MAN.WORK = W.MANIFEST.NO
         READ WORK.MAN.REC FROM F.WORK, ID.MAN.WORK ELSE
            WORK.MAN.REC = ""

            VAL.NO = DCOUNT(WORK.MAN.REC<2>,@VM) + 1

*** IF USER = "NPRATT" THEN CRT IL "R#3" : "  ":ID.MAN.WORK : " VM =  " : VAL.NO  ; DEBUG
********************************************************Source Col - Description

            WORK.MAN.REC<1 ,VAL.NO> = W.RECORD.COUNTER       ; *  1 - record_counter (No Data)
            WORK.MAN.REC<2 ,VAL.NO> = W.CARRIER.NAME         ; *  2 - carrier_name
            WORK.MAN.REC<3 ,VAL.NO> = W.TRANS.CODER          ; *  3 - trans_code
            WORK.MAN.REC<4 ,VAL.NO> = W.TRANS.MODE           ; *  4 - trans_mode
            WORK.MAN.REC<5 ,VAL.NO> = W.BILL.DATE            ; *  5 - bill_date
            WORK.MAN.REC<6 ,VAL.NO> = W.MANIFEST.NO          ; *  7 - manifest No.
            WORK.MAN.REC<7 ,VAL.NO> = W.STOP.NUMBER          ; *  8 - stop_number
            WORK.MAN.REC<8 ,VAL.NO> = W.INVOICE.NO           ; *  6 - invoice_number
            WORK.MAN.REC<9 ,VAL.NO> = W.IN.OUT               ; *  9 - direction
            WORK.MAN.REC<10,VAL.NO> = W.ORIG.NAME            ; * 10 - origin_name
            WORK.MAN.REC<11,VAL.NO> = W.ORIG.ZIP             ; * 11 - origin_zip
            WORK.MAN.REC<12,VAL.NO> = W.ORIG.CITY            ; * 12 - origin_city
            WORK.MAN.REC<13,VAL.NO> = W.ORIG.STATE           ; * 13 - origin_state
            WORK.MAN.REC<14,VAL.NO> = W.DEST.NAME            ; * 14 - destination_name
            WORK.MAN.REC<15,VAL.NO> = W.DEST.ZIP             ; * 15 - destination_zip
            WORK.MAN.REC<16,VAL.NO> = W.DEST.CITY            ; * 16 - destination_city
            WORK.MAN.REC<17,VAL.NO> = W.DEST.STATE           ; * 17 - destination_state

            WORK.MAN.REC<18,VAL.NO> = W.WEIGHT.PICKUP        ; * 28 - weight_pickup
            WORK.MAN.REC<19,VAL.NO> = W.WEIGHT.DELIVER       ; * 29 - weight_deliver
***            WORK.MAN.REC<20,VAL.NO> = W.WEIGHT.TOTAL         ; * 30 - weight_total
            WORK.MAN.REC<20,VAL.NO> = W.WEIGHT.DELIVER       ; * 30 - weight_total

            WORK.MAN.REC<21,VAL.NO> = S.ACTUAL.CHG           ; * 23 - actual_charge
            WORK.MAN.REC<22,VAL.NO> = S.FIXED.ALLOC          ; * 24 - fixed_allocation
            WORK.MAN.REC<23,VAL.NO> = S.TOTAL.CHARGE         ; * 25 - total_charge
            WORK.MAN.REC<24,VAL.NO> = S.MANIFEST.CHARGE      ; * 26 - manifest_charge
            WORK.MAN.REC<25,VAL.NO> = W.BOL                  ; * 27 - bill_of_lading
            WORK.MAN.REC<26,VAL.NO> = W.LOADED.MILES         ; * 18 - loadedmiles
            WORK.MAN.REC<27,VAL.NO> = W.EMPTY.MILES          ; * 19 - emptymiles
            WORK.MAN.REC<28,VAL.NO> = W.RUNNING.MILES        ; * 20 - runningmiles
            WORK.MAN.REC<29,VAL.NO> = W.CHARGE.DESC          ; * 21 - charge_desc
            WORK.MAN.REC<30,VAL.NO> = W.CHARGE.DETAIL        ; * 22 - charge_detail
            WORK.MAN.REC<31,VAL.NO> = W.PROCESS.DT.RYDER     ; * 31 - process_date
            WRITE WORK.MAN.REC ON F.WORK, ID.MAN.WORK
         END
      END

      WORK.REC = ""

      IF W.CARRIER.NAME NE "" THEN
         IF W.BOL NE "" THEN
            ID.WORK = W.MANIFEST.NO : "*" : W.BOL
         END
         READ WORK.REC FROM F.WORK, ID.WORK ELSE WORK.REC = ""
      END ELSE
***         CRT @(0,22):" Missing Carrier name - Probably total line " : ; DEBUG
         CALL ELINE("Missing Carrier name - Probably total line ")
         RETURN
      END

      VAL.NO = DCOUNT(WORK.REC<2>,@VM) + 1

*** CRT IL "R#3" : "  ":ID.WORK : " VM =  " : VAL.NO  ; DEBUG
********************************************************Source Col - Description

      WORK.REC<1 ,VAL.NO> = W.RECORD.COUNTER       ; *  1 - record_counter (No Data)
      WORK.REC<2 ,VAL.NO> = W.CARRIER.NAME         ; *  2 - carrier_name
      WORK.REC<3 ,VAL.NO> = W.TRANS.CODER          ; *  3 - trans_code
      WORK.REC<4 ,VAL.NO> = W.TRANS.MODE           ; *  4 - trans_mode
      WORK.REC<5 ,VAL.NO> = W.BILL.DATE            ; *  5 - bill_date
      WORK.REC<6 ,VAL.NO> = W.MANIFEST.NO          ; *  7 - manifest No.
      WORK.REC<7 ,VAL.NO> = W.STOP.NUMBER          ; *  8 - stop_number
      WORK.REC<8 ,VAL.NO> = W.INVOICE.NO           ; *  6 - invoice_number
      WORK.REC<9 ,VAL.NO> = W.IN.OUT               ; *  9 - direction
      WORK.REC<10,VAL.NO> = W.ORIG.NAME            ; * 10 - origin_name
      WORK.REC<11,VAL.NO> = W.ORIG.ZIP             ; * 11 - origin_zip
      WORK.REC<12,VAL.NO> = W.ORIG.CITY            ; * 12 - origin_city
      WORK.REC<13,VAL.NO> = W.ORIG.STATE           ; * 13 - origin_state
      WORK.REC<14,VAL.NO> = W.DEST.NAME            ; * 14 - destination_name
      WORK.REC<15,VAL.NO> = W.DEST.ZIP             ; * 15 - destination_zip
      WORK.REC<16,VAL.NO> = W.DEST.CITY            ; * 16 - destination_city
      WORK.REC<17,VAL.NO> = W.DEST.STATE           ; * 17 - destination_state

      WORK.REC<18,VAL.NO> = W.WEIGHT.PICKUP        ; * 28 - weight_pickup
      WORK.REC<19,VAL.NO> = W.WEIGHT.DELIVER       ; * 29 - weight_deliver
      WORK.REC<20,VAL.NO> = W.WEIGHT.TOTAL         ; * 30 - weight_total

      WORK.REC<21,VAL.NO> = S.ACTUAL.CHG           ; * 23 - actual_charge
      WORK.REC<22,VAL.NO> = S.FIXED.ALLOC          ; * 24 - fixed_allocation
      WORK.REC<23,VAL.NO> = S.TOTAL.CHARGE         ; * 25 - total_charge
      WORK.REC<24,VAL.NO> = S.MANIFEST.CHARGE      ; * 26 - manifest_charge
      WORK.REC<25,VAL.NO> = W.BOL                  ; * 27 - bill_of_lading
      WORK.REC<26,VAL.NO> = W.LOADED.MILES         ; * 18 - loadedmiles
      WORK.REC<27,VAL.NO> = W.EMPTY.MILES          ; * 19 - emptymiles
      WORK.REC<28,VAL.NO> = W.RUNNING.MILES        ; * 20 - runningmiles
      WORK.REC<29,VAL.NO> = W.CHARGE.DESC          ; * 21 - charge_desc
      WORK.REC<30,VAL.NO> = W.CHARGE.DETAIL        ; * 22 - charge_detail
      WORK.REC<31,VAL.NO> = W.PROCESS.DT.RYDER     ; * 31 - process_date

      N.VV = DCOUNT(WORK.REC<28>,@VM)
      IF N.VV GT 2 THEN
         ST.MILES = WORK.REC<28,N.VV-1>
      END ELSE
         ST.MILES = WORK.REC<28,1>
      END

      IF ST.MILES = "" THEN ST.MILES = 0

      BOL.MILES = W.RUNNING.MILES - ST.MILES
      WORK.REC<32,VAL.NO> = BOL.MILES              ; * Miles for the BOL in question

      IF W.WEIGHT.PICKUP GT "0" THEN
         WORK.REC<40,VAL.NO> = W.ORIG.ZIP
         WORK.REC<41,VAL.NO> = W.ORIG.CITY
         WORK.REC<42,VAL.NO> = W.ORIG.STATE
      END

      IF W.WEIGHT.DELIVER GT "0" THEN
         WORK.REC<43,VAL.NO> = W.DEST.ZIP
         WORK.REC<44,VAL.NO> = W.DEST.CITY
         WORK.REC<45,VAL.NO> = W.DEST.STATE
      END

      WRITE WORK.REC ON F.WORK, ID.WORK

*** CRT " W.MANIFEST.NO = " : W.MANIFEST.NO : "  W.STOP.NUMBER = " : W.STOP.NUMBER ; DEBUG
      IF W.MANIFEST.NO NE "" AND W.STOP.NUMBER > "0" THEN
         ID.MAN.WORK = W.MANIFEST.NO
         READ WORK.MAN.REC FROM F.WORK, ID.MAN.WORK THEN
            WORK.MAN.REC<18> += W.WEIGHT.PICKUP       ; * 28 - weight_pickup
            WORK.MAN.REC<19> += W.WEIGHT.DELIVER      ; * 29 - weight_deliver
            WORK.MAN.REC<20> += W.WEIGHT.DELIVER      ; * Use delivered weight as well

            IF W.BOL[1,1] = "L" OR W.BOL[1,1] = "l" THEN
               SEARCH.STR = W.BOL:"*":W.WEIGHT.DELIVER
            END ELSE
               SEARCH.STR = W.BOL
            END

            IF W.WEIGHT.DELIVER GT "0" THEN
               LOCATE SEARCH.STR IN WORK.MAN.REC<35> SETTING BPOS THEN
                  WORK.MAN.REC<36,BPOS> += W.WEIGHT.PICKUP       ; * 28 - weight_pickup
                  WORK.MAN.REC<37,BPOS> += W.WEIGHT.DELIVER      ; * 29 - weight_deliver
                  WORK.MAN.REC<38,BPOS>  = BOL.MILES
*QQ                  WORK.MAN.REC<39,BPOS>  = W.WEIGHT.DELIVER
                  WORK.MAN.REC<39,BPOS>  += W.WEIGHT.DELIVER
               END ELSE
                  WORK.MAN.REC<35,-1> = SEARCH.STR
                  WORK.MAN.REC<36,-1> = W.WEIGHT.PICKUP       ; * 28 - weight_pickup
                  WORK.MAN.REC<37,-1> = W.WEIGHT.DELIVER      ; * 29 - weight_deliver
                  WORK.MAN.REC<38,-1> = BOL.MILES
                  WORK.MAN.REC<39,-1> = W.WEIGHT.DELIVER
               END
            END

            WRITE WORK.MAN.REC ON F.WORK, ID.MAN.WORK
         END
      END

*END MANIFEST SUMMARY WORK RECORD

      RETURN

*----
* WRITE.PRO.INFO
*----
WRITE.PRO.INFO:***
*

      IF B.CARRIER.CHG = "0" THEN GOTO SKIP.WRITE

      LAST.VAL = DCOUNT(WORK.REC<1>,@VM)

*****************************************************Source Col - Description
***IF USER = "NPRATT" THEN DEBUG

      BILL.DATE             = WORK.REC<5,1>          ; *  5 - bill_date
      STOP.NUMBERS          = WORK.REC<7>            ; *  8 - stop_number
      INVOICE.NO            = WORK.REC<8,1>          ; *  6 - invoice_number
      IN.OUT.STR            = WORK.REC<9>            ; *  9 - direction
      BOL.STR               = WORK.REC<25>           ; * 27 - bill_of_lading
      IN.OUT = "O"                                   ; *  Assume all outbound ????

***      ORIG.NAME          = WORK.REC<10,1>            ; * 10 - origin_name
***      ORIG.ZIP              = WORK.REC<11,1>         ; * 11 - origin_zip
***      ORIG.CITY             = WORK.REC<12,1>         ; * 12 - origin_city
***      ORIG.STATE            = WORK.REC<13,1>         ; * 13 - origin_state

      ORIG.NAME             = WORK.REC<14,1>
      ORIG.ZIP              = WORK.REC<15,1>
      ORIG.CITY             = WORK.REC<16,1>
      ORIG.STATE            = WORK.REC<17,1>

      BOL.STR               = WORK.REC<25>           ; * 27 - bill_of_lading
      NXB = DCOUNT(BOL.STR,@VM)
      DEST.POS = 1
      FOR XX = 2 TO NXB
         DBOL = BOL.STR<1,XX>
         IF DBOL = BOL.STR<1,1> THEN DEST.POS += 1
      NEXT XX

      DEST.NAME             = WORK.REC<14,DEST.POS>
      DEST.ZIP              = WORK.REC<15,DEST.POS>
      DEST.CITY             = WORK.REC<16,DEST.POS>
      DEST.STATE            = WORK.REC<17,DEST.POS>

***      DEST.NAME             = WORK.REC<14,LAST.VAL>
***      DEST.ZIP              = WORK.REC<15,LAST.VAL>
***      DEST.CITY             = WORK.REC<16,LAST.VAL>
***      DEST.STATE            = WORK.REC<17,LAST.VAL>

      ACTUAL.CHG.STR        = WORK.REC<21>           ; * 23 - actual_charge
      FIXED.ALLOC.STR       = WORK.REC<22>           ; * 24 - fixed_allocation
      TOTAL.CHARGE.STR      = WORK.REC<23>           ; * 25 - total_charge
      MANIFEST.CHARGE.STR   = WORK.REC<24>           ; * 26 - manifest_charge
      BOL.STR               = WORK.REC<25>           ; * 27 - bill_of_lading

      LOADED.MILES.STR      = WORK.REC<26>           ; * 18 - loadedmiles
      EMPTY.MILES.STR       = WORK.REC<27>           ; * 19 - emptymiles
      RUNNING.MILES.STR     = WORK.REC<28>           ; * 20 - runningmiles

      CHARGE.DESC.STR       = WORK.REC<29>           ; * 21 - charge_desc
      CHARGE.DETAIL.STR     = WORK.REC<30>           ; * 22 - charge_detail

      RYDER.PROCESS.DT      = WORK.REC<31,1>         ; * 31 - process_date

      BOLS = ""

      WEIGHT.STR       = ""
      MILE.STR         = ""
      MILE.WT.STR      = ""
      COST.PER.BOL.STR = ""

      BILL.STATUS = '1'                  ; * Nothing to check bills against except weekly summary invoice from Ryder and the input file
      VERIFIED = "O"                     ; * Confirm ?????
      EXP.CODE = ""

      DUE.DATE     = BILL.DATE
      PMT.DUE.DATE = DUE.DATE

      ROUNDING.TOTAL += B.CARRIER.CHG

      IF N.ITEMS = BL.CNT AND BOL.POS = NBL THEN
         IF ROUNDING.TOTAL NE GTOT.TOTAL.CHARGE THEN
            ROUND.AMT = GTOT.TOTAL.CHARGE - ROUNDING.TOTAL
            IF ABS(ROUND.AMT) LE "50" THEN                        ;* Rounding up to 50c
               B.CARRIER.CHG += ROUND.AMT
            END
         END
      END

      BTOT.TOTAL.CHARGE += B.CARRIER.CHG
      BTOT.LOADED.MILES += B.MILES
      BTOT.WEIGHT.DELIVER += B.DELIVER.WEIGHT

      ZIP.ARR = ""
*      ORIG.ZIPS = WORK.REC<11>
*      START.ZIP = ORIG.ZIPS<1,1>
*      ORIG.CITIES = WORK.REC<12>
*      ORIG.STATES = WORK.REC<13>

*      DEST.ZIPS = WORK.REC<15>
*      DEST.CITIES = WORK.REC<16>
*      DEST.STATES = WORK.REC<17>

      RUNNING.MILES.STR = WORK.REC<28>

***      EXP.CODE = "331502"
      EXP.CODE = "35150000"
      IF ORIG.ZIP = "15650" AND DEST.ZIP = "16323" THEN
         EXP.CODE = "35500000"                                ;* Origin Latrobe , Destination Franklin
      END

      T.DATE=DATE()
      T.TIME=TIME()

      M.BOL.REC = ''

      IF B.BOL.NO[1,1] = "L" OR B.BOL.NO[1,1] = "l" THEN
         NULL
      END ELSE
         READ M.BOL.REC FROM F.BOL.CRX, B.BOL.NO THEN
*IF USER = "NPRATT" THEN
*   CRT ; CRT B.BOL.NO : " ORIG.ZIP  " : M.BOL.REC<15> : "  " : ORIG.ZIP : " ... " :
*   CRT " DEST.ZIP " : M.BOL.REC<21> : "  " : DEST.ZIP : " ... " ; INPUT QQ
*END
***         M.BOL.REC<47> = PRO.ID
***         M.BOL.REC<48> = DATE()
***         WRITE M.BOL.REC ON F.BOL.CRX, ID.BOL
         END ELSE
***            CRT B.BOL.NO
         END
      END
*
      PRO.REC = ''

      PRO.REC<1> = BILL.DATE
      PRO.REC<2> = IN.OUT
      PRO.REC<3> = ORIG.ZIP
      PRO.REC<4> = DEST.ZIP

      PRO.REC<5> = EXP.CODE
      PRO.REC<6> = B.DELIVER.WEIGHT
      PRO.REC<7> = B.CARRIER.CHG
      PRO.REC<8> = B.CARRIER.CHG

      PRO.REC<9> = "4"

      PRO.REC<10> = 0                    ; * Discount Variance
      PRO.REC<11> = 0                    ; * Overcharge Variance
      PRO.REC<12> = 0                    ; * Consulting Variance


      PRO.REC<16> = B.BOL.NO

*ZZ      PRO.REC<17> = VC.ID

      PRO.REC<19> = B.MILES
      PRO.REC<20> = CARRIER.ID
      PRO.REC<21> = "6"                  ; * Carrier mode = 6 Truckload

*ZZ      PRO.REC<22> = MISROUTE.ARRAY<1>
*ZZ      PRO.REC<23> = MISROUTE.ARRAY<2>

      PRO.REC<24> = "0"                  ; * DISC.PERC
      PRO.REC<25> = ORIG.STATE
      PRO.REC<26> = DEST.STATE
      PRO.REC<27> = ORIG.CITY
      PRO.REC<28> = DEST.CITY

      PRO.REC<30> = DATE()               ; * Entry Date
      PRO.REC<31> = EXP.CODE
      PRO.REC<33> = B.CARRIER.CHG          ; * ??

      PRO.REC<34> = 0                    ; * BD Discount Variance
      PRO.REC<35> = 0                    ; * BD Overcharge Variance
      PRO.REC<36> = 0                    ; * BD Commission Variance

      PRO.REC<38> = DUE.DATE

***      IF CLIENT.ID  = "09997" OR CLIENT.ID  = "99999" THEN
      PRO.REC<39> = "O"                  ; * Forced VERIFIED to O
***      END

      PRO.REC<47> = "Y"                  ; * APRVD.CARRIER
      PRO.REC<45> = VERIFIED

***      PRO.REC<53> = "AUTO_LOAD"
***      PRO.REC<54> = "AUTO_VER"

      PRO.REC<53> = USER
      PRO.REC<54> = USER

      PRO.REC<68> = BILL.STATUS

      IF DATE() LE CLIENT.REC<82> THEN
         NEW.BILL.DATE=CLIENT.REC<82>+1
      END ELSE
         NEW.BILL.DATE=DATE()
      END

      PRO.REC<84,-1>=USER                ; * Update Each Time bill is Filed
      PRO.REC<85,-1>=T.TIME              ; * Update Each Time bill is Filed
      PRO.REC<86,-1>=DATE()              ; * Update Each Time bill is Filed

      PRO.REC<88> = CLIENT.ID:"*":PRO.ID           ; * This technically not a normal EDI bill

      PRO.REC<119> = 0                   ; * Flat rate

      IF CHARGE.DESC.STR #'' THEN
*** IF USER = "NPRATT" THEN DEBUG
         DTL.CHRG.CODES = 'FRT'
         DTL.CHRG.AMTS = '0'
         MISC.REASON = ''
         FRT.AMT = B.CARRIER.CHG
         MISC.AMT = 0

         FOR VL = 1 TO LAST.VAL
            CHARGE.DETAIL.STRX = TRIM(CHARGE.DETAIL.STR<1,VL>)
            CHARGE.DESC.STRX = TRIM(CHARGE.DESC.STR<1,VL>)
            MANIFEST.CHARGE.STRX = TRIM(MANIFEST.CHARGE.STR<1,VL>)
            IF CHARGE.DESC.STRX NE "" AND MANIFEST.CHARGE.STRX GT "0" THEN
               CONVERT "|" TO @VM IN CHARGE.DETAIL.STRX
               CONVERT "|" TO @VM IN CHARGE.DESC.STRX
               N.CHG = DCOUNT(CHARGE.DESC.STRX,@VM)
               FOR CG = 1 TO N.CHG
                  DET.CNT = DCOUNT(DTL.CHRG.CODES,@VM) + 1
                  CHG.AMT = CHARGE.DETAIL.STRX<1,CG> * B.FACTOR
                  CHG.DESC = CHARGE.DESC.STRX<1,CG>
                  IF CHG.AMT = "" OR CHG.AMT = "0" THEN
                     NULL
                  END ELSE
                     CHG.AMT = ICONV(CHG.AMT,"MR2")
                     DTL.CHRG.CODES<1,DET.CNT> = "MISC"
                     DTL.CHRG.AMTS<1,DET.CNT> = CHG.AMT
                     MISC.REASON<1,DET.CNT> = CHG.DESC
                     FRT.AMT = FRT.AMT - CHG.AMT
                     MISC.AMT = MISC.AMT + CHG.AMT
                  END
               NEXT CG
            END
         NEXT VL

         TST.AMT = FRT.AMT + MISC.AMT

         IF B.CARRIER.CHG = TST.AMT THEN
            DTL.CHRG.AMTS<1,1> = FRT.AMT
            PRO.REC<151> = DTL.CHRG.CODES : @VM : "FSC"
            PRO.REC<152> = DTL.CHRG.AMTS : @VM : "0"         ; * Fuel built into charges.
            PRO.REC<153> = "FRT"
            PRO.REC<157> = FRT.AMT
            PRO.REC<159> = "MISC"        ; * All sundry charges lumped into misc - see MISC.REASON for detail
            PRO.REC<163> = MISC.AMT
            PRO.REC<164> = 0
            PRO.REC<218> = MISC.REASON
            DTL.OUT=''
            FRT.ARRAY=''
            MIS.ARRAY=''
            GOSUB RECALC.FB.DETAILS
         END ELSE
            IF USER = "NPRATT" THEN
               CRT @(-1)
               DIFF = TST.AMT - B.CARRIER.CHG
               CRT "FRT.AMT     = " : FRT.AMT "R#7"
               CRT "MISC.AMT    = " : MISC.AMT "R#7"
               CRT
               CRT "TST.AMT     = " : TST.AMT "R#7"
               CRT "B.CARRIER.CHG = " : B.CARRIER.CHG "R#7"
               CRT
               CRT "DIFF        = " : DIFF "R#7"
               DEBUG
            END
         END
      END

      PRO.REC<238> = PMT.DUE.DATE

*ZZ      VAR.CODE = ''
*ZZ      IF VARIANCE = 0 THEN VAR.ARR = ''
*ZZ      IF VAR.ARR<1>'R0' # 0 ! VAR.ARR<4>'R0' NE 0 THEN
*ZZ         VAR.CODE = VAR.CODE:'D'
*ZZ      END
*ZZ      IF VAR.ARR<2>'R0' # 0 ! VAR.ARR<5>'R0' NE 0 THEN
*ZZ         VAR.CODE = VAR.CODE:'O'
*ZZ      END
*ZZ      IF VAR.ARR<3>'R0' # 0 ! VAR.ARR<6>'R0' NE 0 THEN
*ZZ         VAR.CODE = VAR.CODE:'C'
*ZZ      END
*ZZ      PRO.REC<29> = VAR.CODE

*ZZ      READV E.DATE FROM F.HIST, OLD.PRO.ID, 30 THEN
*ZZ         PRO.REC<30> = E.DATE
*ZZ      END
*ZZ      IF VERSION > 0 THEN PRO.REC<30>=''           ; * Set to Null on Dups

*ZZ      IF OLD.PRO.REC<66>='N' AND OLD.PRO.REC<39> = 'R' AND PRO.REC<39> # 'R' THEN PRO.REC<30>=''     ; * JIM - NEVERPAYS

*ZZ            IF PRO.REC<30>='' THEN PRO.REC<30>=NEW.BILL.DATE

*ZZ            IF PRO.REC<39>#'R' AND OLD.PRO.REC<37>='' THEN
*ZZ               IF PRO.REC<30> LE CLIENT.REC<82> THEN PRO.REC<30>=NEW.BILL.DATE
*ZZ            END

*ZZ      PRO.REC<34> = 0-VAR.ARR<4>
*ZZ      PRO.REC<35> = 0-VAR.ARR<5>
*ZZ      PRO.REC<36> = 0-VAR.ARR<6>
*ZZ      IF USER.TYPE='A' THEN
*ZZ         IF REJECT.FLAG THEN
*ZZ            PRO.REC<39>=REJECT.FLAG
*ZZ         END ELSE
*ZZ            PRO.REC<39>=OLD.PRO.REC<39>
*ZZ            PRO.REC<54>=OLD.PRO.REC<54>
*ZZ            PRO.REC<98>=OLD.PRO.REC<98>
*ZZ         END
*ZZ      END ELSE
*ZZ         IF AUDIT='Y' THEN
*ZZ            IF ABS(DIFFERENCE) < 2 THEN
*ZZ               PRO.REC<39>='A'           ; * Amounts Verified
*ZZ               VER.CODE='A' ; VER.TYPE='A' ; GOSUB UPDATE.VERIFY
*ZZ            END
*ZZ            VER.CODE='VD' ; VER.TYPE='A' ; GOSUB UPDATE.VERIFY
*ZZ         END
*ZZ         PRO.REC<54>=''
*ZZ      END
*ZZ      PRO.REC<40> = BANK.ID

*ZZ      FRT.ARRAY=''
*ZZ      MIS.ARRAY=''
*ZZ      DTL.OUT=''
*ZZ      BEGIN CASE
*ZZ         CASE AVOUT<40>#''
*ZZ            DTL.OUT=AVOUT
*ZZ         CASE DTL.CHRG.CODES<1,1>#'' AND INDEX(T.MODE,'TRUCKLOAD',1) GT 0
*ZZ            DTL.OUT<40>=DTL.CHRG.CODES
*ZZ            DTL.OUT<44>=DTL.CHRG.AMTS
*ZZ            DTL.OUT=''
*ZZ            IF DTL.CHRG.CODES#'' THEN
*ZZ               DTL.OUT<40>=DTL.CHRG.CODES
*ZZ               DTL.OUT<44>=DTL.CHRG.AMTS
*ZZ            END
*ZZ      END CASE

*ZZ      GOSUB RECALC.FB.DETAILS
*ZZ      PRO.REC<88> = OLD.PRO.REC<88>
*ZZ      PRO.REC<93> = MISSING.DATA

*ZZ      PRO.REC<96>=OVERRIDE.STATUS
*ZZ      IF OLA.AMT#'' THEN
*ZZ         PRO.REC<99>=OLA.AMT
*ZZ      END
*ZZ      PRO.REC<116>=OVERRIDE.FIELD
*ZZ      PRO.REC<117>=OVERRIDE.OPERATOR
*ZZ      PRO.REC<118>=OVERRIDE.INFO
*ZZ      PRO.REC<119>=FLAT.RATE

*ZZ      PRO.REC<41,1> = VAR.ARR<7>
*ZZ      PRO.REC<41,2> = VAR.ARR<8>
*ZZ      PRO.REC<41,3> = VAR.ARR<9>
*ZZ      PRO.REC<46> = MIN.CHG
*ZZ      APRVD.CARRIER = 'N'
*ZZ      IF APRVD.CARRS THEN
*ZZ         GOSUB SET.APRVD.CARR
*ZZ      END
*ZZ      PRO.REC<47> = APRVD.CARRIER
*ZZ      IF QI = 'W' THEN PRO.REC<48> = 'Y' ELSE PRO.REC<48> = ''
*ZZ      CALC = 0
*ZZ      COST.MILE = 0
*ZZ      IF LOADED.MILES+0 # 0 THEN
*ZZ         COST.MILE = OCONV(ACTUAL.CHG,'MD2')/LOADED.MILES
*ZZ         COST.MILE = ICONV( COST.MILE,'MD2' )
*ZZ      END

*ZZ      IF CL.CPM.MIN+0 > 0 THEN
*ZZ         IF COST.MILE LT CL.CPM.MIN THEN
*ZZ            COST.MILE = ''
*ZZ         END
*ZZ      END
*ZZ      PRO.REC<49> = COST.MILE'R0'

*ZZ      FOR X = 84 TO 86
*ZZ         PRO.REC<X>=OLD.PRO.REC<X>
*ZZ      NEXT X
*ZZ      IF PRO.REC<84>='' AND OLD.PRO.REC<84>#'' THEN
*ZZ         PRO.REC<84>=OLD.PRO.REC<84>
*ZZ         PRO.REC<85>=OLD.PRO.REC<85>
*ZZ         PRO.REC<86>=OLD.PRO.REC<86>
*ZZ      END


**** Start Special Ryder related 'User' fields


      PRO.REC<88>  = CLIENT.ID:"*":PRO.ID       ; * Confirm
      PRO.REC<94> = INVOICE.NO

      PRO.REC<101> = ORIG.NAME

***      PRO.REC<183> = TRANS.CODER
***      PRO.REC<184> = TRANS.MODE
***      PRO.REC<185> = STOP.NUMBERS
***      PRO.REC<186> = SUM(FIXED.ALLOC.STR)                 ; * Weekly fixed charge
***      PRO.REC<187> = SUM(ACTUAL.CHG.STR)                  ; * Weekly route charges
***      PRO.REC<188> = SUM(TOTAL.CHARGE.STR)                ; * Weekly total charges

*** IF USER = "NPRATT" THEN DEBUG

      PRO.REC<183> = M.BOL.REC<15>                        ;* Orig. Zip from BOL data supplied if available   ;* NPR01
      PRO.REC<184> = M.BOL.REC<21>                        ;* Dest. Zip from BOL data supplied if available   ;* NPR01

      PRO.REC<186> = MILE.STR
      PRO.REC<187> = WEIGHT.STR
      PRO.REC<188> = COST.PER.BOL.STR

      USFLD = 183
      NZ = DCOUNT(ZIP.ARR<1>,@VM)
      IF NZ GT 7 THEN LAST.ZIP = 7 ELSE LAST.ZIP = NZ
      FOR WZP = 5 TO LAST.ZIP
         PRO.REC<USFLD> = ZIP.ARR<1,WZP>
         USFLD += 1
      NEXT STP

      BTOT.ACTUAL.CHG += SUM(ACTUAL.CHG.STR)
      BTOT.FIXED.ALLOC += SUM(FIXED.ALLOC.STR)

**** End Special Ryder related 'User' fields

*ZZ      IF QV.VALID THEN
*ZZ         PRO.REC<54>=USER
*ZZ         PRO.REC<84,-1>=USER
*ZZ         PRO.REC<85,-1>=T.TIME
*ZZ         PRO.REC<86,-1>=DATE()
*ZZ      END

*ZZ      PRO.REC<51> = VAR.REC<1>
*ZZ      PRO.REC<52> = VAR.REC<2>
*ZZ      PRO.REC<56> = VAR.REC<3>
*ZZ      IF PRO.REC<53> = '' THEN PRO.REC<53> = USER
*ZZ      PRO.REC<55> = LEN(PRO.REC)-LEN(USER)
*ZZ      PRO.REC<57> = AIR.PIECES
*ZZ      PRO.REC<58> = CLASS<2>
*ZZ      PRO.REC<59> = REJECT.REASONS<1>
*ZZ      PRO.REC<60> = REJECT.REASONS<2>
*ZZ      PRO.REC<61> = REJECT.REASONS<3>
*ZZ      PRO.REC<62> = REJECT.REASONS<4>
*ZZ      PRO.REC<64,1>=MAILING.ADDR<1>
*ZZ      PRO.REC<64,2>=MAILING.ADDR<2>
*ZZ      PRO.REC<64,3>=MAILING.ADDR<3>
*ZZ      PRO.REC<64,4>=MAILING.ADDR<4>
*ZZ      PRO.REC<66> = REJ.TYPE

*ZZ      CARRIER.MODE.WGT = CARRIER.REC<70>
*ZZ      CARRIER.MODE.BY.WGT = CARRIER.REC<71>
*ZZ      LOCATE WEIGHT.TOTAL IN CARRIER.MODE.WGT<1> BY "AR" SETTING POS ELSE NULL
*ZZ      T.MODE.BY.WGT = OCONV(CARRIER.MODE.BY.WGT<1,POS>,'MCU')
*ZZ      LTL.CAR=T.MODE.BY.WGT=1
*ZZ      TL.CAR=T.MODE.BY.WGT=6
*ZZ      AIR.CAR=T.MODE.BY.WGT=12
*ZZ      PRO.REC<21> = T.MODE.BY.WGT

*ZZ      IF PRO.REC<21>#'1' AND PRO.REC<21>#'6' THEN PRO.REC<19>=''
*ZZ      IF PRO[LEN(PRO)-1,2]='AD' THEN PRO.REC<19>=''
*ZZ      IF PRO[LEN(PRO)-1,2]='BD' THEN PRO.REC<19>=''
*ZZ      PRO.REC<65> = SERVICE.LEVEL
*ZZ      PRO.REC<106> = DIM.WEIGHT
*ZZ      PRO.REC<107> = AIR.CHRG.CODES
*ZZ      PRO.REC<108> = AIR.CHRG.AMTS
*ZZ      PRO.REC<207> = INTL.CHRG.CODES
*ZZ      PRO.REC<208> = INTL.CHRG.AMTS
*ZZ      IF VC.OVERRIDE='Y' THEN
*ZZ         PRO.REC<189>=MISROUTE.AMOUNT
*ZZ         PRO.REC<190>=MISROUTE.CARRIER
*ZZ         PRO.REC<191>=13513
*ZZ         PRO.REC<192>='NEVER'
*ZZ         PRO.REC<193>='On file when reason system started'
*ZZ         PRO.REC<194>='Logistics Dept'
*ZZ         PRO.REC<195>=13513
*ZZ         PRO.REC<196>=46800
*ZZ      END ELSE
*ZZ         PRO.REC<63> = MISROUTE.AMOUNT
*ZZ         PRO.REC<69> = MISROUTE.CARRIER
*ZZ         PRO.REC<189>=MISROUTE.AMOUNT
*ZZ         PRO.REC<190>=MISROUTE.CARRIER
*ZZ      END

*ZZ      IF DAUDIT<13>='Y' THEN
*ZZ         PRO.REC<197>='Y'
*ZZ      END ELSE
*ZZ         PRO.REC<197>='N'
*ZZ      END

      IF VERSION GT 0 THEN PRO.REC<39> = 'O'

*ZZ      PRO.REC<90> = VC.CODE
*ZZ      PRO.REC<91> = CC
*ZZ      PRO.REC<100>= VC.ID                ; * Item ID for Cust.Vend
*ZZ      PRO.REC<101>= CUST.VEND.ADDR<1>    ; * Name
*ZZ      PRO.REC<102>= CUST.VEND.ADDR<2>    ; * Address1
*ZZ      PRO.REC<102,2>= CUST.VEND.ADDR<3>  ; * Address2
*ZZ      PRO.REC<103>= CUST.VEND.ADDR<5>    ; * City
*ZZ      PRO.REC<104>= CUST.VEND.ADDR<6>    ; * State
*ZZ      PRO.REC<105>= CUST.VEND.ADDR<4>    ; * Zip
*ZZ      IF USER.TYPE='A' THEN
*ZZ         IF PRO.REC<97>='' THEN
*ZZ            IF OLD.CLASS # CLASSES THEN
*ZZ               PRO.REC<97>=OLD.CLASS
*ZZ            END
*ZZ         END
*ZZ      END

***               DTL.CHRG.CODES = CVOUT<3>
***               DTL.CHRG.AMTS = CVOUT<4>
***               MISC.REASON = CVOUT<6>    ; * JMK157

*ZZ      PRO.REC<74> = CLASSES
*ZZ      PRO.REC<75> = WEIGHTS
*ZZ      PRO.REC<110>= AUDITOR.VIEWED       ; * 1=OLA Auditor viewed, 0=OLA, ''=Manual bill.

*ZZ      MISC.CHG.POS=DCOUNT(CLASSES<1>,@VM)          ; * Find out how many
*ZZ      FOR MISC.CHG.CNT=1 TO MISC.CHG.POS
*ZZ         PRO.REC<70,MISC.CHG.CNT>='FRT'
*ZZ      NEXT MISC.CHG.CNT
*ZZ      IF MISC.CHG.CODES#'' THEN
*ZZ         PRO.REC<70,MISC.CHG.POS+1>=MISC.CHG.CODES
*ZZ         PRO.REC<77,MISC.CHG.POS+1>=CONTR.MISC.CHG.AMTS
*ZZ         PRO.REC<79,MISC.CHG.POS+1>=BENCH.MISC.CHG.AMTS
*ZZ      END



*ZZ      PRO.REC<123>=ADDRESS.CORRECTION.CHARGE
*ZZ      PRO.REC<143>=LCC.AMOUNT
*ZZ      PRO.REC<145>=LCC.ARRAY<1>
*ZZ      PRO.REC<146>=LCC.ARRAY<2>
*ZZ      PRO.REC<147>=LCC.CARRIER
*ZZ      PRO.REC<148>=UPS.FEE.CHARGE
*ZZ      PRO.REC<150>=TL.BILL.MILES
*ZZ      IF AIR.CHRG.CODES#'' THEN
*ZZ         PRO.REC<151>=AIR.CHRG.CODES
*ZZ         PRO.REC<152>=AIR.CHRG.AMTS
*ZZ         FRT.ARRAY=''
*ZZ         MIS.ARRAY=''
*ZZ         GOSUB RECALC.FB.DETAILS
*ZZ      END

*ZZ      IF INTL.CHRG.CODES#'' THEN
*ZZ         PRO.REC<151>=INTL.CHRG.CODES
*ZZ         PRO.REC<152>=INTL.CHRG.AMTS
*ZZ         FRT.ARRAY=''
*ZZ         MIS.ARRAY=''
*ZZ         GOSUB RECALC.FB.DETAILS
*ZZ      END

*ZZ      IF DTL.CHRG.CODES #'' THEN
*ZZ         PRO.REC<151>=DTL.CHRG.CODES
*ZZ         PRO.REC<152>=DTL.CHRG.AMTS
*ZZ         PRO.REC<218>=MISC.REASON
*ZZ         FRT.ARRAY=''
*ZZ         MIS.ARRAY=''
*ZZ         GOSUB RECALC.FB.DETAILS
*ZZ      END

*ZZ      IF FRT.ARRAY<1>='' THEN
*ZZ         IF AIR.CHRG.CODES#'' THEN
*ZZ            DTL.OUT<40>=AIR.CHRG.CODES
*ZZ            DTL.OUT<44>=AIR.CHRG.AMTS
*ZZ            GOSUB RECALC.FB.DETAILS
*ZZ         END

*ZZ         IF INTL.CHRG.CODES#'' THEN
*ZZ            DTL.OUT<40>=INTL.CHRG.CODES
*ZZ            DTL.OUT<44>=INTL.CHRG.AMTS
*ZZ            GOSUB RECALC.FB.DETAILS
*ZZ         END

*ZZ         IF DTL.CHRG.CODES#'' THEN
*ZZ            DTL.OUT<40>=DTL.CHRG.CODES
*ZZ            DTL.OUT<44>=DTL.CHRG.AMTS
*ZZ            GOSUB RECALC.FB.DETAILS
*ZZ         END
*ZZ      END
*ZZ      FOR ATT=1 TO 6
*ZZ         PRO.REC<152+ATT>=FRT.ARRAY<ATT>
*ZZ         PRO.REC<158+ATT>=MIS.ARRAY<ATT>
*ZZ      NEXT ATT
*ZZ      PRO.REC<166>=DISC.DESC
*ZZ      FOR UATT=1 TO 6
*ZZ         PRO.REC<182+UATT>=UFLDS<UATT>
*ZZ      NEXT UATT

*ZZ      PRO.REC<199>=CONTR.FSC.PARMS
*ZZ      PRO.REC<200>=BENCH.FSC.PARMS
*ZZ      PRO.REC<201>=AFS.FSC.PARMS
*ZZ      PRO.REC<202>=MISROUTE.ARRAY<3>

*ZZ      IF CARR.FSC='Y' OR CARR.FSC='C' THEN
*ZZ         PRO.REC<204>=BENCH.FSC.PARMS<1,7>-AFS.FSC.PARMS<1,7>
*ZZ      END
*ZZ      PRO.REC<205>=BOL.DIST

*ZZ      PRO.REC<213>=FB.NOTE
*ZZ      PRO.REC<217>=VAR.ARR<10>
*ZZ      PRO.REC<217>=VAR.ARR<11>
*ZZ      PRO.REC<218>=MISC.REASON
*ZZ      PRO.REC<220>=TRANSIT.TIME
*ZZ      IF LCC.ARRAY<24>#'' THEN
*ZZ         PRO.REC<221>=LCC.ARRAY<24>
*ZZ      END ELSE
*ZZ         PRO.REC<221>=MISROUTE.ARRAY<5>
*ZZ      END

*ZZ      PRO.REC<224>=LCC.ARRAY<7>

*ZZ      IF ORIG.ZIP = "99999" THEN
*ZZ         ORIG.COUNTRY.CD = COUNTRY.LIST<1,1>
*ZZ      END ELSE
*ZZ         ORIG.COUNTRY.CD = "US"
*ZZ      END

      ORIG.COUNTRY.CD = "US"
      IF LEN(ORIG.ZIP) = "6" AND ORIG.ZIP MATCH ('1A1N1A1N1A1N') THEN ORIG.COUNTRY.CD = "CA"         ; * Canada
      PRO.REC<222>=ORIG.COUNTRY.CD

*ZZ      IF DEST.ZIP = "99999" THEN
*ZZ         DEST.COUNTRY.CD = COUNTRY.LIST<2,1>
*ZZ      END ELSE
*ZZ         DEST.COUNTRY.CD = "US"
*ZZ      END

      DEST.COUNTRY.CD = "US"
      IF LEN(DEST.ZIP) = "6" AND DEST.ZIP MATCH ('1A1N1A1N1A1N') THEN DEST.COUNTRY.CD = "CA"         ; * Canada
      PRO.REC<223>=DEST.COUNTRY.CD

*ZZ      IF VC.OVERRIDE="Y" AND LCC.OVR.AMOUNT+0#0 THEN
*ZZ         PRO.REC<227>=LCC.OVR.AMOUNT
*ZZ         PRO.REC<228>=LCC.OVR.CARRIER
*ZZ         PRO.REC<229>=13513
*ZZ         PRO.REC<230>='NEVER'
*ZZ         PRO.REC<231>='On file when reason system started'
*ZZ         PRO.REC<232>='Logistics Dept'
*ZZ         PRO.REC<233>=13513
*ZZ         PRO.REC<234>=46800
*ZZ      END

*ZZ      PRO.REC<235>=HANDLING.UNITS

*ZZ      IF CHANGE.FLAG THEN
*ZZ         WRITE OLD.PRO.ID:@FM:USER:@FM:PRO.ID:@FM:OLD.PRO.REC<8> ON F.DEL.BILLS, DATE():'*':T.TIME
*ZZ         DELETE F.BILLS,OLD.PRO.ID
*ZZ         DELETE F.HIST,OLD.PRO.ID
*ZZ         DELETE F.CRX,OLD.PRO.ID
*ZZ         DELETE F.OPEN,CLIENT.ID:'*':OLD.PRO.ID
*ZZ         DELETE F.PRE.OPEN,CLIENT.ID:'*':OLD.PRO.ID
*ZZ      END

*ZZ      IF PRO.REC<37> = '' ! VERSION GT 0 THEN
*ZZ         IF CLIENT.ID # '00000' THEN WRITE PRO.REC ON F.BILLS,PRO.ID
*ZZ      END

      WRITE PRO.REC ON F.BILLS,PRO.ID
      WRITE PRO.REC ON F.HIST,PRO.ID

*** IF USER = "NPRATT" THEN CRT @(0,22):' WRITTEN BILL ' : PRO.ID ; DEBUG

      CRX.REC = ''
      CRX.REC<1> = CLIENT.ID
      CRX.REC<2> = BILL.DATE
      CRX.REC<7> = PRO.REC<7>
      CRX.REC<8> = PRO.REC<8>
      CRX.REC<10> = PRO.REC<10>
      CRX.REC<11> = PRO.REC<11>
      CRX.REC<12> = PRO.REC<12>
      CRX.REC<30> = PRO.REC<30>
      CRX.REC<37> = PRO.REC<37>
      CRX.REC<39> = PRO.REC<39>
      CRX.REC<41> = PRO.REC<41>
      CRX.REC<53> = PRO.REC<53>
      CRX.REC<54> = PRO.REC<54>
      CRX.REC<55> = PRO.REC<55>
      CRX.REC<63> = PRO.REC<63>
      IF CLIENT.ID = "01329" THEN
         WRITE CRX.REC ON F.CRX,PRO.ID
      END

SKIP.WRITE :

      RETURN

RECALC.FB.DETAILS:*

      NVAL=DCOUNT(DTL.OUT<40>,@VM)
      FOR VAL=1 TO NVAL
         TRAN.TYPE=DTL.OUT<40,VAL>
         BEGIN CASE
            CASE TRAN.TYPE='FRT' OR TRAN.TYPE = 1 OR TRAN.TYPE = 2
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1
               FOR ATT=1 TO 6
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>
               NEXT ATT
            CASE TRAN.TYPE='MIN'
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1
               FOR ATT=1 TO 6
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>
               NEXT ATT
            CASE TRAN.TYPE='DEF'
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1
               FOR ATT=1 TO 6
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>
               NEXT ATT
            CASE TRAN.TYPE='BASE'
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1
               FOR ATT=1 TO 6
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>
               NEXT ATT
            CASE 1
               LOCATE(TRAN.TYPE,MIS.ARRAY,1;MPOS) THEN
                  FOR ATT=5 TO 6
                     IF NUM(DTL.OUT<39+ATT,VAL>) THEN
                        MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0
                     END
                  NEXT ATT
               END ELSE
                  NXT.VAL=DCOUNT(MIS.ARRAY<1>,@VM)+1
                  FOR ATT=1 TO 4
                     MIS.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>
                  NEXT ATT
                  FOR ATT=5 TO 6
                     IF NUM(DTL.OUT<39+ATT,VAL>) THEN
                        MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0
                     END
                  NEXT ATT
               END
         END CASE
      NEXT VAL
      RETURN

CONVERT.DATE:
*
** Date received as  25-Sep-10

      I.DATE = ''
*** CALL DATE.IN(W.DATE,I.DATE,0)

      W.FROM.YR = FIELD(W.DATE,'-',3)
      W.FROM.MTH = FIELD(W.DATE,'-',2)
      W.FROM.DAY = FIELD(W.DATE,'-',1)

      O.DATE = W.FROM.MTH:"/":W.FROM.DAY:"/":W.FROM.YR
      I.DATE = ICONV(O.DATE,"D4/")

      IF I.DATE = '' THEN I.DATE = DATE()          ; * Confirm
*
      RETURN
