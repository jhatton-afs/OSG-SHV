***********************************************************************
* Program name : OCR.BATCH.RPT
* Author       : Nicole Hennick
* Date written : 12-03-2021
* Library      : FBBP
* COPYRIGHT (C) 2019 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* REPORT OF IMAGES ON A BATCH
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 06:59:06 on 02/23/2021.
*
* Start modification history
* 12/03/21 : NKH00 : ACCU-1502 New Program
* End modification history
*
************************************************************************
*
* Initialize variables
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE UDO.H
      DIM BILLS(300)
      MAT BILLS = ""
      PROMPT ''
      CALL GET.USER.NEW(USER.NAME,CH.NUM)
      DELIM = CHAR(9)            
      KEYER = "BATCH"
      TIMEOUT = 3000
      PROG.NAME='OCR.BATCH.RPT'
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       
      SERVER.NAME=SVR.VOUT<1>                      
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'OCR.BATCH.RPT' ; UPL.VOUT = ''
      ***    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
      OPEN 'CONTROL' TO FILE.CNTL ELSE
         CALL ELINE('UNABLE TO OPEN CONTROL FILE')
         RETURN
      END
      OPEN 'OCR.LOG' TO F.OCR ELSE
         CALL ELINE('UNABLE TO OPEN OCR.LOG FILE')
         RETURN
      END
      OPEN 'OCR.TRACE' TO F.TRACE ELSE
         CALL ELINE('UNABLE TO OPEN OCR.LOG FILE')
         RETURN
      END
      FILE.ID = "OCR.BATCH.RPT.XLS"
      OPENSEQ 'BILLDATA.':USER.NAME, FILE.ID TO OUTSEQ.FILE ELSE
         CREATE OUTSEQ.FILE ELSE
         END
      END
      
      WEOFSEQ OUTSEQ.FILE      
      
****EXECUTE "CLEAR-FILE DATA OCR.TRACE" CAPTURING JUNK

      READ XMLPARAMS FROM FILE.CNTL,"OCR.BATCH.RPT" THEN
         URL = XMLPARAMS<1>
         SERVER = XMLPARAMS<2>
         LOGGING = XMLPARAMS<4>          ; * Y/N
         LOGFILE = XMLPARAMS<5>
         EMAIL.RECIP = XMLPARAMS<6>
         TEST.FLG = XMLPARAMS<7>
      END ELSE
****         URL = 'https://imagingws.afs.net/images/list?clientFolder=':CLIENT.ID:'&imageKey=':IMAGE.NO
         LOGFILE="OCR.BATCH.RPT"
         LOGGING = "N"
         EMAIL.RECIP = 'nhennick@afs.net'
         TEST.FLG = @FALSE
      END

      IF LOGGING = "Y" OR LOGGING = 1 THEN
         LOGGING = @TRUE
      END ELSE
         LOGGING = @FALSE
      END
      IF LOGGING THEN
         STAT = PROTOCOLLOGGING(LOGFILE, "ON", 10)
      END
      EMAIL.OUT=''
      EMAIL.OUT<1,-1>='HelpDesk@afs.net'
      EMAIL.OUT<2,-1>= EMAIL.RECIP
      EMAIL.OUT<4>='FBBP_OCR.BATCH.RPT@afs.net'
      EMAIL.OUT<5>='Error while trying to access OCR.BATCH.RPT Web-Service .'
      EOJ=0
      LOOP
      UNTIL EOJ DO
         CRT @(-1)
         CRT @(5,2):"OCR BATCH REPORT"
         CRT @(-1)
         CRT @(5,2):"OCR CLIENT IMAGE SEARCH"
         CRT@(10,10):"Enter Client or (E)nd ": ; INPUT CLIENT.ID
         CLIENT.ID = OCONV(CLIENT.ID,"MCU")
         IF CLIENT.ID[1,1] = "E" OR CLIENT.ID[1,1]="e" THEN
            EOJ=1
            CONTINUE
         END
         CLIENT.ID = CLIENT.ID"R%5"         
         CRT @(10,12):"Enter Batch or (E)nd ": ; INPUT BATCH.NUM
         IF BATCH.NUM[1,1] = "E" OR BATCH.NUM[1,1]="e" THEN
            EOJ=1
            CONTINUE
         END
         BATCH.NUM = UPCASE(BATCH.NUM)

         IF SERVER.NAME = 'AFS' THEN                       
            URL = 'http://imagingws.afs.net/images/list?clientFolder=':CLIENT.ID:'&underReview=null&excludeImported=true&limit=15000'
         END ELSE                      
            URL = 'http://imagingws.qa.afs.net/images/list?clientFolder=':CLIENT.ID:'&underReview=null&excludeImported=true&limit=15000'
         END                           

         GOSUB SEND.REST.REQUEST
         GOSUB PARSE.RESULTS
         STATUS = 0
         RESP.CNT=1
         RESP = ''
         VOUT=''
         CRT@(0,23):"RETURN TO CONTINUE ": ; INPUT RESPONSE
      REPEAT

9999:* THE END
      IF LOGGING THEN
         LOG.RET = PROTOCOLLOGGING(LOGFILE,"OFF",10)
      END
      RETURN
      STOP

***********************************************************************
SEND.REST.REQUEST:
***********************************************************************
      METHOD="GET"
      STAT = SETHTTPDEFAULT("VERSION", "1.1")
      STAT = CREATESECURITYCONTEXT(CTX, "TLSv1.2")
      STAT = CREATESECUREREQUEST(URL, METHOD, RESTGET,CTX)
      STAT = SETREQUESTHEADER(RESTGET, "Content-Type", "application/json;charset=utf-8")
      STAT = SUBMITREQUEST(RESTGET, 60000, "", HEADER, RESTDATA, HTTPSTATUS)

      RETURN
************************************************************************
PARSE.RESULTS:
************************************************************************
      GOSUB BUILD.HEADER
      UDOHANDLE = ""
      RESP = ''
      RESP.CNT = 1
      STATUS =UDORead(RESTDATA, UDOFORMAT_JSON, UDOHANDLE )
      ST = UDOArrayGetSize(UDOHANDLE, ITEM_SIZE) ; IF ST NE UDO_SUCCESS THEN
         ITEM_SIZE = 0
      END
      FOR I = 1 TO ITEM_SIZE
         TEMP.ARRAY = ''
         ST = UDOArrayGetItem(UDOHANDLE, I, result_udo, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         ST = UDOGetProperty(result_udo, "imageKey", IMAGE.NO, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN IMAGE.NO = ""
         ST = UDOGetProperty(result_udo, "imagePath", IMAGE.PATH, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         BATCH.NO = FIELD(IMAGE.PATH,"\",9)        ; * GRB02
         BATCH.NO = FIELD(BATCH.NO,"_",1)          ; * GRB02
         IF UDOTYPE = UDO_NULL THEN IMAGE.PATH = ""
         ST = UDOGetProperty(result_udo, "clientKey", CLIENTKEY, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CLIENTKEY = ""
         ST = UDOGetProperty(result_udo, "field2", PRONUM, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN PRONUM = ""
         ST = UDOGetProperty(result_udo, "clientFolder", CLIENTFOLDER, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         IF UDOTYPE = UDO_NULL THEN CLIENTFOLDER = ""
         IF BATCH.NUM = BATCH.NO THEN
*            CRT "BATCH: ":BATCH.NO:"  IMAGE NO: ":IMAGE.NO:"  PRO: ":PRONUM
            GOSUB WRITE.DTL
         END

      NEXT I

      CLOSESEQ OUTSEQ.FILE
      CALL ELINE("File ":FILE.ID:" may be found in your own U: drive directory")      
      
      RETURN

******************************************************
BUILD.HEADER:
******************************************************
      HDR =''
      HDR = 'OCR Batch Report ':CLIENT.ID
      WRITESEQ HDR TO OUTSEQ.FILE ELSE NULL
      HDR = 'Batch No':DELIM:'Image No':DELIM:'Pro'
      WRITESEQ HDR TO OUTSEQ.FILE ELSE NULL

      RETURN
      
*********************************************************************
WRITE.DTL:
*********************************************************************
      DTL = ''                     
      DTL = BATCH.NO:DELIM:IMAGE.NO:DELIM:PRONUM
      WRITESEQ DTL TO OUTSEQ.FILE ELSE NULL      
      
      RETURN
      
****************************************************
ERR.HANDLER:
*****************************************************

      ERRCODE = "" ; ERRMSG = ""
      S = UDOGetLastError(ERRCODE, ERRMSG)
      ERROR = "UDO ERROR: (":ERRCODE:") ":ERRMSG
      VOUT<1> =ERROR

      RETURN

************************************************************************
REPORT.INTERNAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()

      EMAIL.OUT<6, -1> = 'URL = ':URL
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'BATCH = ':BATCH.NUM
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'ERROR = ':ERROR
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '

      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
****      VOUT<1> = "ERROR"
      VOUT<1> = 0
      RETURN
************************************************************************
REPORT.FATAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()
      EMAIL.OUT<1>=EMAIL.RECIP
*      EMAIL.OUT<1,-1> = 'gbino@afs.net'
      EMAIL.OUT<1,-1> = 'dfriend@afs.net'
      EMAIL.OUT<1,-1> = 'nmeddaugh@afs.net'
      FATAL.ERROR.SUBJ = 'REST REQUEST ERROR'
      EMAIL.OUT<5>=FATAL.ERROR.SUBJ
      EMAIL.OUT<6,-1> = 'URL = ':URL
      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)
      IDATE=DATE()
      ITIME=TIME()
      TIME.BLOCK=INT(ITIME/600)
      *  VOUT<1> = "ERROR"
      RETURN
   END
