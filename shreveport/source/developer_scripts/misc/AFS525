      SUBROUTINE AFS525(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT, F.TABLES)
******************************************************************************
*  PROGRAM   : AFS525
*  PURPOSE   : To calculate the AFS LTL rates for shipments in/out Canada
*  PROGRAMMER: Mike Kerbow
*  PARAMETERS:
*      DIN  - Data Sent In to Be Processed
*      DOUT - Data Returned that was processed (Answers)
*  NOTE:
*    o This only supports Mode BOTH!
*    o This only supports AFS525 - Not AFS525!
*
*    o YOU BETTER PFILE THIS PROGRAM TO VIEW THE LINES OR USE A
*      FULL SCREEN EDITOR WITH > 80 COLUMNS
******************************************************************************
* COPYRIGHT (C) 1998 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED
*       ----------------------------------------------------
*  This program is sole property of AFS Logistics, LLC (AUTOMATED
*  FREIGHT SYSTEMS) and may not be used, copied, or modified without
*  the express written consent of Brian Barker of AFS Logistics, LLC.
******************************************************************************
      $INCLUDE PROG.ADMIN INC_OPTIONS
      PROG.NAME='AFS525'
      UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'AFS525' ; UPL.VOUT = ''                    ;* NPR_UPL 04/22/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/22/2010
      RATED.BILLS = ''
      STOP.NOW=0

      MISSING.ZIP=0
      BILL.COUNT=1
      CALL GET.USER(USER)
      IF USER='MKERBOW' THEN DEBUG
      MODE=VIN<1>
      MAX.DISC.WEIGHT=VIN<2>
      CALL CHANNEL(CH.NUM)
      VOUT=''
      CRLF=CHAR(13):CHAR(10)
      OPEN 'AFS525ZB.106' TO F.AFS525ZB ELSE       ; * Zip Basing File
         ERRLINE = 'UNABLE TO OPEN AFS525ZB.106'
         GOTO 9995
      END
      OPEN 'AFS525ZC.106' TO F.AFS525ZC ELSE       ; * Rate Basis File
         ERRLINE = 'UNABLE TO OPEN AFS525FC.106'
         GOTO 9995
      END
      OPEN 'AFS525BR.106' TO F.AFS525BR ELSE       ; * Base Rates File
         ER.NEWRLINE = 'UNABLE TO OPEN AFS525BR.106'
         GOTO 9995
      END
      OPEN 'AFS525FC.106' TO F.AFS525FC ELSE       ; * Class Factors File
         ER.NEWRLINE = 'UNABLE TO OPEN AFS525FC.106'
         GOTO 9995
      END
      OPEN 'RATE.INDEX.NEW' TO F.RATE.INDEX ELSE
         ERRLINE = 'UNABLE TO OPEN RATE.INDEX.NEW'
         GOTO 9995
      END
*
* Initialize variables
*
*NPR01
      L.IN    = PROG.NAME                 ;*NPR01
      L.IN<2> = ""                        ;*NPR01
      L.IN<3> = ""                        ;*NPR01
      L.OUT = ""                          ;*NPR01
      CALL UPD.PROCESS.LOG(L.IN,L.OUT)    ;*NPR01
*NPR01
      PROMPT ''
*     USER=OCONV(@LOGNAME,'MCU')
      CALL GET.USER(USER)
      ALL.BILLS=''
      CLASSES=''
      CLASSES< 2> = '500' ; CLASSES< 3> = '400' ; CLASSES< 4> = '300'
      CLASSES< 5> = '250' ; CLASSES< 6> = '200' ; CLASSES< 7> = '175'
      CLASSES< 8> = '150' ; CLASSES< 9> = '125' ; CLASSES<10> = '110'
      CLASSES<11> = '100' ; CLASSES<12> = '92.5' ; CLASSES<13> = '85'
      CLASSES<14> = '77.5' ; CLASSES<15> = '70' ; CLASSES<16> = '65'
      CLASSES<17> = '60' ; CLASSES<18> = '55' ; CLASSES<19> = '50'
      WEIGHTS=''
      WEIGHTS<1,1>='L5C' ; WEIGHTS<2,1>=1
      WEIGHTS<1,2>='5C ' ; WEIGHTS<2,2>=500
      WEIGHTS<1,3>='1M ' ; WEIGHTS<2,3>=1000
      WEIGHTS<1,4>='2M ' ; WEIGHTS<2,4>=2000
      WEIGHTS<1,5>='5M ' ; WEIGHTS<2,5>=5000
      WEIGHTS<1,6>='10M' ; WEIGHTS<2,6>=10000
      WEIGHTS<1,7>='20M' ; WEIGHTS<2,7>=20000
      WEIGHTS<1,8>='30M' ; WEIGHTS<2,8>=30000
      WEIGHTS<1,9>='40M' ; WEIGHTS<2,9>=40000
*=================================================
      SUB.ZIP=''
*
* Start changes for NPR02
*
      READ ZIP.SUBST.ARRAY FROM F.TABLES, 'ZIP.SUBSTITUTIONS' THEN
         SUB.ZIP=ZIP.SUBST.ARRAY         ; * JMK02
         GOTO 20  ;* Skip hard coded changes
      END
*
* End changes for NPR02
*
*=================================================
*
20 * NPR02   - ***** IT IS NO LONGER NECESSARY TO HARD CODE THE ZIP SUBSTITUTUIONS
*            - ***** SEE FB.1.11.19 FOR MAINT OF TABLE USED - WAYNE PARDUE AND SYDNEY BIRD CAN DO THEIR OWN NOW
*
      OWEN=(USER='OWEN')                 ; *  <--- THIS IS FASTER THAN "IF" STATEMENTS...
*    OWEN=0
      JIM=(USER='JIM')

*    IF OWEN THEN
*       OPEN 'TEMP' TO TEMP ELSE ABORT
*       WRITE DIN ON TEMP,'DIN'
*       CRT @(0,23):"Writting TEMP DIN":
*    END
*
* CHECK THE PASSED MODE
*
      BEGIN CASE
         CASE MODE='READ' OR MODE='SEND'
            CALL ELINE('CALL PROGRAMMING - AFS525() WAS SENT A "':MODE:'" WERE ONLY "BOTH" IS ACCEPTED')
         CASE MODE='BOTH' ; NULL
         CASE 1
            CALL ELINE("Mode '":MODE:"' in MWB is wrong... Call programming")
      END CASE
* Build Record to submit
*
* FORMAT OF DATA BEING PASSED TO RATER
*  BODY<ATTR>
*    bill#, 1       - ORGIN ZIP
*    bill#, 2       - DEST ZIP
*    bill#, 3       - DISCOUNTS
*    bill#, 4,line# - CLASS FOR LINE # ITEM
*    bill#, 5,line# - WEIGHT FOR LINE # ITEM
* bill# ranges from 1 to number of bills
* line# ranges from 1 to number of line items on that bill.
*
      BODY=''
      BILLS=DCOUNT(DIN,@AM)
      FOR BC = 1 TO BILLS
         S.BILL=''
         BILL=DIN<BC>
         BILL.WEIGHT=SUM(BILL<1,5>)
         BILL<1,10>=BC                   ; * Attribute of DIN that this bill comes from
         BILL<1,12>='N'                  ; * Don't Perform the Weight * Rate Extension
         ALL.BILLS<-1>=BILL
         PRO=BILL<1,1>
         ORIG.ZIP=BILL<1,2>
         LOCATE ORIG.ZIP IN SUB.ZIP<1> SETTING POS THEN
            ORIG.ZIP=SUB.ZIP<2,POS>
         END
         DEST.ZIP=BILL<1,3>
         LOCATE DEST.ZIP IN SUB.ZIP<1> SETTING POS THEN
            DEST.ZIP=SUB.ZIP<2,POS>
         END
         TARIFF=BILL<1,7>
         IF TARIFF#'AFS52502' THEN
            CALL ELINE('Wrong Tariff ':TARIFF:'. This supports AFS525 only.')
            ERRLINE='Wrong Tariff ':TARIFF:'. This supports AFS525 only.'
            GO 9995
         END
         LINE=''
         LINE<1,1> = ORIG.ZIP
         LINE<1,2> = DEST.ZIP
         LINE<1,3> = 0'L%88'             ; * Discounts
         LINE.ITEMS=DCOUNT(BILL<1,5>,@SVM)
         FOR X = 1 TO LINE.ITEMS
            CURR.CLASS=BILL<1,4,X>
            IF CURR.CLASS=92 THEN CURR.CLASS=92.5
            IF CURR.CLASS=77 THEN CURR.CLASS=77.5
            LINE<1,4,X> = CURR.CLASS     ; * CLASS
            WEIGHT=BILL<1,5,X>
            LINE<1,5,X> = WEIGHT
         NEXT X
         S.BILL<-1>=LINE
         FOR X=1 TO DCOUNT(S.BILL<1,5>,@SVM)
            TOTAL.WEIGHT=0
            TOTAL.WEIGHT+=S.BILL<1,5,X>

         NEXT X
         GOSUB RATER
         IF FAILURE THEN
            BILL.TYPE = 'NOTRATED'
            R.BILL=''
            R.BILL<1,10>='NOTRATED DUE TO ':ERRLINE
         END
         BODY<-1>=R.BILL
         BILL.COUNT=BILL.COUNT+1
      NEXT BC
      DOUT=''
      DOUT.LINE=''                       ; * Line to Be added to DOUT
      PREV.DIN.ATT=''
      IF USER='KEITH' THEN CRT @(0,23):"STOP NOW -RATED BILLS": ; INPUT NUL
      FOR BC = 1 TO BILLS
         BILL=ALL.BILLS<BC>
         CHK.TOTAL=0
         PRO=BILL<1,1>
         FACTOR=ALL.BILLS<BC,9>
         DIN.ATT=ALL.BILLS<BC,10>
         DIN.VAL=ALL.BILLS<BC,11>
         IF DIN.ATT # PREV.DIN.ATT THEN
            IF PREV.DIN.ATT='' ELSE
               DOUT<-1>=DOUT.LINE
               DOUT.LINE=''
            END
            PREV.DIN.ATT=DIN.ATT
         END
         FACTOR.TOTAL.CHARGE=0
         IF FACTOR="" THEN FACTOR="1000000"

         LINE.OUT=RATED.BILLS<BC>
         T.NUM.LINES = DCOUNT(LINE.OUT<1,2>,@SVM)
         BILL.TYPE = TRIM(LINE.OUT<1,1>)
         IF BILL.TYPE = '' THEN BILL.TYPE = 'ACTUAL'


         IF BILL.TYPE='DEFICIT' THEN
            IF ALL.BILLS<BC,12>='Y' THEN
               BILL.TYPE='ACTUAL'
            END
         END
         IF USER='KEITH' THEN CRT @(0,23):"STOP NOW - LINE.OUT LOOP": ; INPUT NUL
         IF BILL.TYPE='MINIMUM' ELSE
            LINE.ITEMS=T.NUM.LINES
            TOTAL.WEIGHT=0
            FOR X = 1 TO LINE.ITEMS
               WEIGHT=LINE.OUT<1,2,X>    ; * WEIGHT
               RATE=LINE.OUT<1,3,X>      ; * RATE
               CHARGE=LINE.OUT<1,4,X>    ; * CHARGE
               IF FACTOR='' AND ALL.BILLS<BC,12>="N" THEN
                  DOUT.LINE<1,1,X>=RATE
                  DOUT.LINE<1,2,X>=CHARGE
               END ELSE
                  FACTOR.RATE=OCONV(RATE*FACTOR/1000000,'MR0')
                  IF ALL.BILLS<BC,12>='N' THEN DIN.VAL=X     ; * Set to line Counter
                  DOUT.LINE<1,1,DIN.VAL>=FACTOR.RATE
                  FACTOR.CHARGE=OCONV(DIN<DIN.ATT,5,DIN.VAL>*FACTOR.RATE/100,'MR0')
                  DOUT.LINE<1,2,DIN.VAL>=FACTOR.CHARGE
                  FACTOR.TOTAL.CHARGE+=FACTOR.CHARGE
                  TOTAL.WEIGHT+=DIN<DIN.ATT,5,DIN.VAL>+0     ; * Billed Weight
               END
            NEXT X
         END

         IF ALL.BILLS<BC,12>='Y' THEN
            DOUT.LINE<1,4>+=TOTAL.WEIGHT+0         ; * Billed Weight
         END ELSE
            DOUT.LINE<1,4>=LINE.OUT<1,8>           ; * Billed Weight
         END

         TOTAL.CHARGE = LINE.OUT<1,7>    ; * sub-TOTAL Charge No-Discnt
         TOTAL.CHARGE=OCONV(TOTAL.CHARGE,'MR0')
         IF TOTAL.CHARGE+0=0 AND BILL.TYPE='' THEN
            BILL.TYPE = 'NOTRATED'
         END

         DOUT.LINE<1,3>=BILL.TYPE
         IF BILL.TYPE='MINIMUM' THEN
            IF FACTOR="1000000" ELSE
               FACTOR.TOTAL.CHARGE=OCONV(TOTAL.CHARGE*FACTOR/1000000,'MR0')
            END
         END

         IF FACTOR="1000000" AND ALL.BILLS<BC,12>='N' THEN
            BILL.CHARGE = TOTAL.CHARGE
         END ELSE
            BILL.CHARGE = FACTOR.TOTAL.CHARGE
         END

         DOUT.LINE<1,5>+=BILL.CHARGE

         IF BILL.TYPE='DEFICIT' THEN
*
* Deal with DEFICIT type of bills
*

            DEF.WEIGHT=OCONV(LINE.OUT<1,9>,'MR0')  ; * Deficit Weight
            DOUT.LINE<1,6>=LINE.OUT<1,12>          ; * Deficit Class
            DOUT.LINE<1,7>=DEF.WEIGHT
            DEF.RATE = OCONV(LINE.OUT<1,10>,'MR0')           ; * Deficit Rate
            DEF.CHARGE = LINE.OUT<1,11>  ; * Deficit Charge
            IF FACTOR="1000000" THEN
               DOUT.LINE<1,8> = DEF.RATE
               DOUT.LINE<1,9> = DEF.CHARGE
            END ELSE
               FACTOR.DEF.RATE = OCONV(DEF.RATE*FACTOR/1000000,'MR0')
               FACTOR.DEF.CHARGE = OCONV(FACTOR.DEF.RATE*DEF.WEIGHT/100,'MR0')

* ??? Shouldn't FACTOR.DEF.CHARGE equal DEF.CHARGE ??? - JR - NOT CHECKED.

               DOUT.LINE<1,5>+= FACTOR.DEF.CHARGE
               DOUT.LINE<1,8> = FACTOR.DEF.RATE
               DOUT.LINE<1,9> = FACTOR.DEF.CHARGE
            END
*ADDED BY KD

            DOUT.LINE<1,4>+=DOUT.LINE<1,7>
         END


      NEXT BC
      IF USER='KEITH' THEN CRT @(0,23):"DOUT LINE SET - STOP NOW": ; INPUT NUL
      DOUT<-1>=DOUT.LINE
      GO 9999
*--------------------------------------------------------------------------
*
*--------------------------------------------------------------------------
9995: *** Error - Problem with data

      CALL ELINE(ERRLINE)
      VOUT<1>='ERROR'

*--------------------------------------------------------------------------
*
*--------------------------------------------------------------------------
9999: *** Exit Program


      RETURN


*-------------------------------------------------------------------------
* RATER - A Rating Patch that takes the BODY of an output WAD file
*         and rates it using the PICK version of the rate tables and
*         returns (global variable) WAD.OUT
*
* EXPECTED INPUT VARIABLES:
*
*   BODY - Source Information to rate the current batch of invoices
*          BODY<bill#, 1>        - ORGIN ZIP
*          BODY<bill#, 2>        - DEST ZIP
*          BODY<bill#, 3>        - DISCOUNTS
*          BODY<bill#, 4, line#> - CLASS FOR LINE # ITEM
*          BODY<bill#, 5, line#> - WEIGHT FOR LINE # ITEM
*       bill# ranges from 1 to number of bills
*       line# ranges from 1 to number of line items on that bill.
*
*
* RETURNS:  ** VARIABLES THAT ARE OF INTEREST TO YOU **
*   RATED.BILLS<bill#, 1, line#>   ;* DESCRIPTION ("LINE x", "MINIMUM", "DEFICIT")
*   RATED.BILLS<bill#, 2, line#>   ;* WEIGHT GRP
*   RATED.BILLS<bill#, 3, line#>   ;* RATE
*   RATED.BILLS<bill#, 4, line#>   ;* CHARGE
*   RATED.BILLS<bill#, 5, line#>   ;* CLASS
*   RATED.BILLS<bill#, 6, line#>   ;* WEIGHT
*   RATED.BILLS<bill#, 7>          ;* TOTAL CHARGE FOR ALL LINE ITEMS
*   RATED.BILLS<bill#, 8>          ;* TOTAL WEIGHT FOR ALL LINE ITEMS (NOT INCLUDING DEFWT)
*   RATED.BILLS<bill#, 9>          ;* DEF WEIGHT IF ANY
*
*
*-------------------------------------------------------------------------
RATER:
      FAILURE = 0
*
* PROCESS BILL
*
      T.NUM.BILLS = DCOUNT(S.BILL,@AM)   ; * COUNT # BILLS
      FOR T.BILL = 1 TO T.NUM.BILLS
*
* Build rate table for this bills Orgin and Dest zip code.
*
         ORIG.ZIP = S.BILL<T.BILL,1>     ; * ORGIN ZIP
         DEST.ZIP = S.BILL<T.BILL,2>     ; * DEST ZIP
         GOSUB BUILD.RATE.TABLE

         IF USER='KEITH' THEN CRT @(0,23):"STOP NOW: RATE.TABLE": ; INPUT NUL
         IF RATE.TABLE = '' THEN
            FAILURE = 1
            RETURN
         END
*
* Addup weights on Current Bill
*
         LOOKUP.WT=SUM(S.BILL<T.BILL,5>)           ; * TOTAL WEIGHTS
         GOSUB LOOKUP.WEIGHT.GROUP
         IF LOOKUP.WT.GRP ='' THEN
            FAILURE = 1
            RETURN
         END


         HIGHER.WT.GRP.POS = LOOKUP.WT.GRP.POS
         HIGHER.WT.GRP.POS += (LOOKUP.WT.GRP.POS<9)
         HIGHER.WT.GRP = WEIGHTS<1,HIGHER.WT.GRP.POS>
         HIGHER.WT.DEF = WEIGHTS<2,HIGHER.WT.GRP.POS>-LOOKUP.WT

* LOW - Actual Rated bill
*  LOW.BILL<1,1,T.LINE>   ;* DESCRIPTION ("LINE x" or "MINIMUM")
*  LOW.BILL<1,2,T.LINE>   ;* WEIGHT GRP
*  LOW.BILL<1,3,T.LINE>   ;* RATE
*  LOW.BILL<1,4,T.LINE>   ;* CHARGE
*  LOW.BILL<1,5,T.LINE>   ;* CLASS
*  LOW.BILL<1,6,T.LINE>   ;* WEIGHT
*  LOW.BILL<1,7>          ;* TOTAL CHARGE FOR AL LINE ITEMS
*  LOW.BILL<1,8>          ;* TOTAL WEIGHT FOR ALL LINE ITEMS
*
*
* HIGH - Higher Weight Group Rated Bill
*  HIGH.BILL<1,1,T.LINE>  ;* DESCRIPTION
*  HIGH.BILL<1,2,T.LINE>  ;* WEIGHT GRP
*  HIGH.BILL<1,3,T.LINE>  ;* RATE
*  HIGH.BILL<1,4,T.LINE>  ;* CHARGE
*  HIGH.BILL<1,5,T.LINE>  ;* CLASS
*  HIGH.BILL<1,6,T.LINE>  ;* WEIGHT
*  HIGH.BILL<1,7>         ;* TOTAL CHARGE FOR ALL LINE ITEMS
*  HIGH.BILL<1,8>         ;* TOTAL WEIGHT FOR ALL LINE ITEMS
*  HIGH.BILL<1,9>         ;* DEF WEIGHT IF ANY
*  HIGH.BILL<1,10>        ;* DEF RATE
*  HIGH.BILL<1,11>        ;* DEF CHARGE
*  HIGH.BILL<1,12>        ;* DEF CLASS
*

*
* Lookup Rates for each line item
*
         ACTUAL.TOTAL = 0
         RATED.TOTAL = 0
         LOW.CL = 9000                   ; * INIT LOW.CLASS TO SOME BULL SHIT VALUE
         LOW.BILL=''
         HIGH.BILL=''
         ACTUAL.WEIGHT = 0
         RATED.WEIGHT = 0

         T.NUM.LINES = DCOUNT(S.BILL<T.BILL,4>,@SVM)         ; * COUNT LINE ITEMS
         FOR T.LINE = 1 TO T.NUM.LINES
            CL = S.BILL<T.BILL,4,T.LINE>           ; * CLASS
            BEGIN CASE
               CASE CL=92 ; CL=92.5      ; * CORRECT 92 CLASS
               CASE CL=77 ; CL=77.5      ; * CORRECT 77 CLASS
            END CASE
            IF CL < LOW.CL THEN LOW.CL = CL        ; * FIND LOWEST CLASS
            ACTUAL.WT = S.BILL<T.BILL,5,T.LINE>+0  ; * REAL WEIGHT OF LINE

            LOW.BILL<1,2,T.LINE> = LOOKUP.WT.GRP   ; * WEIGHT GROUP
            LOW.BILL<1,5,T.LINE> = CL    ; * CLASS
            LOW.BILL<1,6,T.LINE> = ACTUAL.WT       ; * WEIGHT
            ACTUAL.WEIGHT += ACTUAL.WT

            HIGH.BILL<1,2,T.LINE> = HIGHER.WT.GRP  ; * WEIGHT GROUP
            HIGH.BILL<1,5,T.LINE> = CL   ; * CLASS
            HIGH.BILL<1,6,T.LINE> = ACTUAL.WT      ; * WEIGHT
            RATED.WEIGHT += ACTUAL.WT

            LOCATE CL IN CLASSES SETTING CL.POS ELSE
               ERRLINE = 'AFS525 -  Unable to determine CLASS with "':CL:'"'
               FAILURE = 1
               RETURN
            END

            LOOKUP.RATE = OCONV(RATE.TABLE<CL.POS, LOOKUP.WT.GRP.POS>+0,'MR0')
            LOW.BILL<1,3,T.LINE> = LOOKUP.RATE     ; * ACTUAL RATE
            T = OCONV(LOOKUP.RATE*ACTUAL.WT/100,'MR0')+0     ; * ACTUAL CHARGE
            LOW.BILL<1,4,T.LINE> = T     ; * ACTUAL CHARGE
            ACTUAL.TOTAL+=T              ; * ACTUAL CHARGE

            LOOKUP.HIGHER.RATE = OCONV(RATE.TABLE<CL.POS, HIGHER.WT.GRP.POS>+0,'MR0')
            HIGH.BILL<1,3,T.LINE> = LOOKUP.HIGHER.RATE       ; * HIGHER RATE
            T = OCONV(LOOKUP.HIGHER.RATE*ACTUAL.WT/100,'MR0')+0
            HIGH.BILL<1,4,T.LINE> = T    ; * HIGHER CHARGE
            RATED.TOTAL+=T               ; * HIGHER CHARGE
         NEXT T.LINE

*
* ADD ANY DEFICIT WEIGHTS TO OUR HIGHER GROUP FOR THIS BILL
*
         IF HIGHER.WT.DEF > 0 THEN
            LOCATE LOW.CL IN CLASSES SETTING LOW.CL.POS ELSE
               ERRLINE = 'AFS525 -  Unable to determine CLASS with "':LOW.CL:'"'
               FAILURE = 1
               RETURN
            END
            HIGH.BILL<1,1> = 'DEFICIT'
            HIGH.BILL<1,9> = HIGHER.WT.DEF         ; * WEIGHT DEF
            LOOKUP.HIGHER.RATE = RATE.TABLE<LOW.CL.POS,HIGHER.WT.GRP.POS>+0
            HIGH.BILL<1,10> = LOOKUP.HIGHER.RATE   ; * RATE
            T = OCONV(LOOKUP.HIGHER.RATE*HIGHER.WT.DEF/100,'MR0')+0
            HIGH.BILL<1,11> = T          ; * CHARGE
            HIGH.BILL<1,12> = LOW.CL     ; * LOWEST CLASS
            RATED.TOTAL += T             ; * CHARGE
         END

*
* CHECK FOR MINS - This will only effect the total of ACTUAL RATE
*

         IF RATE.TABLE.MIN<1,LOOKUP.WT.GRP.POS>='' THEN
            RATE.TABLE.MIN<1,LOOKUP.WT.GRP.POS>=MIN.CHARGE
         END
         IF RATE.TABLE.MIN<1,LOOKUP.WT.GRP.POS> > ACTUAL.TOTAL THEN
            ACTUAL.TOTAL = RATE.TABLE.MIN<1,LOOKUP.WT.GRP.POS>         ; * CHARGE = MIN CHARGE
            LOW.BILL<1,1> = 'MINIMUM'    ; * DESCRIPTION
            LOW.BILL<1,2,T.LINE> = ''    ; * WEIGHT GRP
            LOW.BILL<1,3,T.LINE> = ''    ; * RATE
            LOW.BILL<1,4,T.LINE> = 0     ; * CHARGE
            LOW.BILL<1,5,T.LINE> = ''    ; * CLASS
            LOW.BILL<1,6,T.LINE> = 0     ; * WEIGHT DEF
         END

*
* EVALUATE WHICH IS CHEAPER (ACTUAL OR HIGHER)
*
         LOW.BILL<1,7> = ACTUAL.TOTAL
         LOW.BILL<1,8> = ACTUAL.WEIGHT
         HIGH.BILL<1,7> = RATED.TOTAL
         HIGH.BILL<1,8> = RATED.WEIGHT

         IF ACTUAL.TOTAL < RATED.TOTAL THEN
            R.BILL=LOW.BILL
            RATED.BILLS<-1>=LOW.BILL     ; * STORE ACTUAL BILL
         END ELSE
            IF HIGH.BILL<1,7> < MIN.CHARGE<1,1> THEN
               R.BILL=LOW.BILL
               RATED.BILLS<-1>=LOW.BILL  ; * STORE HIGHER WT BILL
            END ELSE
               R.BILL=HIGH.BILL
               RATED.BILLS<-1>=HIGH.BILL           ; * STORE HIGHER WT BILL
            END
         END

      NEXT

      RETURN



*-------------------------------------------------------------------------
* LOOKUP.WEIGHT.GROUP - Looks up the weight group for a given weight.
*
* INPUT:
*    LOOKUP.WT - Weight in pounds(Lbs) to lookup.
*
* RETURNS:
*    LOOKUP.WT.GRP - Weight Group (L5C,5C,1M,2M,5M,10M,20M,30M, & 40M)
*    LOOKUP.WT.GRP.POS - Position in WEIGHTS<> - Should also be the same
*                        position for all Rate Records.  Add 1 to get to
*                        the next weight group (as long as POS < 9 or
*                        Weight Group is not 40M)
*
* NOTES:
*    IF LOOKUP.WT.GRP='' OR LOOKUP.WT.GRP.POS='' THEN ERROR
*
*-------------------------------------------------------------------------
LOOKUP.WEIGHT.GROUP:

      LOOKUP.WT.GRP = ''                 ; * CLEAR 'RETURN' VALUES
      LOOKUP.WT.GRP.POS = ''             ; * CLEAR 'RETURN' VALUES

*
* FIREWALL CODE
*
      IF LOOKUP.WT = '' OR LOOKUP.WT < 0 THEN
         ERRLINE = 'AFS525 - Unable to determine weight group with a weight of "':LOOKUP.WT:'"'
         FAILURE = 1
         RETURN
      END

*
* LOOKUP WEIGHT GROUP - Note - This returns when weight is found!
*
* This loop needs to be changed to a 'LOCATE'
*
      FOR LWG.LOOP = 9 TO 1 STEP -1
*
* Loop backwards thought the WEIGHTS (High Lbs to Low Lbs)
* comparing the weights to the weight passed.  If the passed
* is greater or equal to the current position then that is
* the ACTUAL weight group.  Return the POS in the WEIGHTS array
* and the 'text string' for the weight group (L5C-40M).
*
         IF LOOKUP.WT >= WEIGHTS<2,LWG.LOOP> THEN
            LOOKUP.WT.GRP = WEIGHTS<1,LWG.LOOP>
            LOOKUP.WT.GRP.POS = LWG.LOOP
            RETURN
         END
      NEXT

*
* Only gets this far on an error!
*
      ERRLINE = 'AFS525 - UNABLE TO DETERMINE WEIGHT GROUP FOR WEIGHT "':LOOKUP.WT:'"'
      FAILURE = 1

      RETURN



*-------------------------------------------------------------------------
* BUILD.RATE.TABLE
*
* INPUT VARIABLES:
*   ORIG.ZIP - Origin Zip Code
*   DEST.ZIP - Destination ZIP Code
*
* RETURNS:  ** VARIABLES THAT ARE OF INTEREST TO YOU **
*
*   RATE.TABLE        - Table of Rates according to weight and class for the
*                       Orgin and Dest zips.
*   RATE.TABLE.MIN    - Min Charges for this shipment
*   RATE.BASIS.NUMBER - Rate basis number (Should match AFS525 PC version!)
*
* NOTES:
*   o IF RATE.TABLE = "" THEN "COULD NOT COMPUTE!ERROR"
*
*-------------------------------------------------------------------------
BUILD.RATE.TABLE:

      RATE.TABLE = ""                    ; * RETURN VALUE FOR BUILT RATING TABLE
      EXPANDED.RATE=''
      RATE.TABLE.MIN = ''                ; * Min charge for this rate table

*
* LOOKUP THE ORGIN ZIPCODE IN THE ZIP BASING FILE
*
      BASING.ZIP = ORIG.ZIP
      GOSUB LOOKUP.BASING.ZIP
      IF BASING.INDEX='' THEN
         FAILURE = 1
         RETURN
      END
      ORIG.BASING.INDEX = BASING.INDEX
      ORIG.BASING.COL.A.FACTOR = COL.A.FACTOR
      ORIG.BASING.COL.B.FACTOR = COL.B.FACTOR
      ORIG.BASING.ADJ.NUMBER = ADJ.NUM

*
* LOOKUP THE DEST ZIPCODE IN THE ZIP BASING FILE
*
      BASING.ZIP = DEST.ZIP
      GOSUB LOOKUP.BASING.ZIP
      IF BASING.INDEX='' THEN
         FAILURE = 1
         RETURN
      END
      DEST.BASING.INDEX = BASING.INDEX
      DEST.BASING.COL.A.FACTOR = COL.A.FACTOR
      DEST.BASING.COL.B.FACTOR = COL.B.FACTOR
      DEST.BASING.ADJ.NUMBER = ADJ.NUM

*
* BUILD AN INDEX
*
      IF DEST.BASING.INDEX < ORIG.BASING.INDEX THEN
         BASIS.INDEX = DEST.BASING.INDEX:'*':ORIG.BASING.INDEX
      END ELSE
         BASIS.INDEX = ORIG.BASING.INDEX:'*':DEST.BASING.INDEX
      END

*
* LOOKUP THE RATE.BASIS
*
      READ RATE.BASIS.NUMBER FROM F.AFS525RB,BASIS.INDEX ELSE
         ERRLINE = 'AFS525 - COULD NOT READ RATE.BASIS'
         FAILURE = 1
         RETURN
      END

      RATE.BASIS.NUMBER = RATE.BASIS.NUMBER<1>     ; * JUST IN CASE SOMEONE ADDS TO THIS FILE!

*
* STEP #4,5,6
*

      BEGIN CASE
         CASE RATE.BASIS.NUMBER < 5000
            RATE.SCALE = RATE.BASIS.NUMBER'L#3'
            RATE.BASIS.NUMBER = RATE.BASIS.NUMBER'R#3'

         CASE RATE.BASIS.NUMBER >= 7000 AND RATE.BASIS.NUMBER <= 7999
            RATE.BASIS.NUMBER+= ORIG.BASING.COL.A.FACTOR
            RATE.BASIS.NUMBER+= DEST.BASING.COL.A.FACTOR

         CASE RATE.BASIS.NUMBER >= 10000 AND RATE.BASIS.NUMBER <= 49999
            RATE.BASIS.NUMBER+= ORIG.BASING.COL.B.FACTOR
            RATE.BASIS.NUMBER+= DEST.BASING.COL.B.FACTOR
      END CASE

*
* STEP 7
*
      BASE.RATES.REC=''
      MIN.CHARGE=''
      BASE.RATE=''


      IF RATE.BASIS.NUMBER < 220000 THEN
*
* STEP 7.A
*
* READ INDEX TO LOCATE THE INDEX OR THE NEXT LARGES INDEX
*
         READ BASE.RATES.REC FROM F.RATE.INDEX,"AFS525BR" ELSE
            ERRLINE = 'AFS525 - UNABLE TO READ AFS525BR'
            RETURN
         END
*
* LOCATE THE RATE.BASIS.NUMBER OR THE NEXT LARGEST.
*
         LOCATE RATE.BASIS.NUMBER IN BASE.RATES.REC<1> BY "AR" SETTING WHERE ELSE
            IF BASE.RATES.REC<1,WHERE> < RATE.BASIS.NUMBER THEN WHERE+=1
            RATE.BASIS.NUMBER = BASE.RATES.REC<1,WHERE>
         END

*
* STEP 7.A.1
*
         TMIN.CHARGE=''
         TMIN.CHARGE<1> = BASE.RATES.REC<2,WHERE>  ; * Minimum Charge 1
         TMIN.CHARGE<2> = BASE.RATES.REC<3,WHERE>  ; * Minimum Charge 2
         TMIN.CHARGE<3> = BASE.RATES.REC<4,WHERE>  ; * Minimum Charge 3
         TMIN.CHARGE<4> = BASE.RATES.REC<5,WHERE>  ; * Minimum Charge 4

*
* Build a 'grid' of BASE RATES WITH THE WEIGHTS IN ATTR 1
* AND THE RATES IN ATTR2
*
* THE NEXT 'GRID' WILL BUILD CLASS FACTORS FOR EACH WEIGHT CORRESPONDING
* TO BASE.RATE ATTR 1
*
         BASE.RATE<1,1> = 'L5C' ; BASE.RATE<2,1> = BASE.RATES.REC< 6,WHERE>
         BASE.RATE<1,2> = '5C' ; BASE.RATE<2,2> = BASE.RATES.REC< 7,WHERE>
         BASE.RATE<1,3> = '1M' ; BASE.RATE<2,3> = BASE.RATES.REC< 8,WHERE>
         BASE.RATE<1,4> = '2M' ; BASE.RATE<2,4> = BASE.RATES.REC< 9,WHERE>
         BASE.RATE<1,5> = '5M' ; BASE.RATE<2,5> = BASE.RATES.REC<10,WHERE>
         BASE.RATE<1,6> = '10M' ; BASE.RATE<2,6> = BASE.RATES.REC<11,WHERE>
         BASE.RATE<1,7> = '20M'          ; * These will be set to equal 10M
         BASE.RATE<1,8> = '30M'          ; * These will be set to equal 10M
         BASE.RATE<1,9> = '40M'          ; * These will be set to equal 10M

*
* STEP 7.A.2
*
         READ CLASS.FACTORS.REC FROM F.RATE.INDEX,"AFS525CF" ELSE
            ERRLINE = 'AFS525 - UNABLE TO READ AFS525CF'
            FAILURE = 1
            RETURN
         END
         LOCATE RATE.BASIS.NUMBER IN CLASS.FACTORS.REC<1> BY "AR" SETTING WHERE ELSE
            IF CLASS.FACTORS.REC<1,WHERE> < RATE.BASIS.NUMBER THEN WHERE+=1
         END
*
* STEP 7.A.2
*
* BUILD THE GRID FOR THE CLASS FACTORS
* MAKE SURE EACH WEIGHT GROUP CORRESPONDS TO BASE.RATE<1> WEIGHT GROUP.
*
* NOTE: THE NEXT 2 LOOPS CAN BE OPTOMIZED TO LOOP ONLY ONCE AND
* DO THE SAME WITHOUT USING CLASS.FACTORS<>
*
* THIS LOOP ALSO SKIPS WEIGHTS - 20M (7), 30M (8), 40M (9)
*
         CLASS.FACTORS = ''
         FOR T.X = 1 TO 6
            WEIGHT.GROUP = TRIM(CLASS.FACTORS.REC<2,WHERE,T.X>)
            LOCATE WEIGHT.GROUP IN BASE.RATE<1> SETTING POS ELSE
               ERRLINE = 'AFS525 - UNABLE TO LOCATE WEIGHT.GROUP "':WEIGHT.GROUP:'" IN BASE.RATES.REC'
               FAILURE = 1
            END
            CLASS.FACTORS< 1,POS> = WEIGHT.GROUP   ; * Weight Group
            FOR T.Y = 2 TO 19
               CFACT = CLASS.FACTORS.REC<T.Y+1, WHERE,T.X>   ; * IF ZERO USE PRIOR
               IF CFACT = 0 THEN
*
* IF ZERO THEN USE PRIOR - MAKE SURE THERE IS A PRIOR.
*
                  IF POS > 1 THEN CFACT = CLASS.FACTORS<T.Y, POS-1>
               END
               CLASS.FACTORS<T.Y, POS> = CFACT
            NEXT T.Y
         NEXT
         CLASS.FACTORS.REC=''            ; * FREE RECORD MEMORY

*
* DO WEIGHTS L5C - 10M
*
         EXPANDED.RATE=""
         FOR MUL.WEIGHT = 1 TO 6
            TVAL = BASE.RATE<2, MUL.WEIGHT>
*
* LOOP THOUGHT THE CLASSES
*
            EXPANDED.RATE<1,MUL.WEIGHT> = BASE.RATE<1, MUL.WEIGHT>
            FOR MUL.CLASS = 2 TO 19
               CLASS.VAL = CLASS.FACTORS<MUL.CLASS,MUL.WEIGHT>
               EXPANDED.RATE<MUL.CLASS,MUL.WEIGHT> = INT((CLASS.VAL*TVAL/10000)+0.5)
            NEXT MUL.CLASS
         NEXT MUL.WEIGHT

*
* DO WEIGHTS 20M - 40M (SET EQUAL TO 10M)
*
         EXPANDED.RATE<1,7> = BASE.RATE<1,7>       ; * 20M LABEL
         EXPANDED.RATE<1,8> = BASE.RATE<1,8>       ; * 30M LABEL
         EXPANDED.RATE<1,9> = BASE.RATE<1,9>       ; * 40M LABEL

         FOR MUL.CLASS = 2 TO 19         ; * DO ALL CLASSES
            TVAL = EXPANDED.RATE<MUL.CLASS,6>      ; * 10M RATE
            EXPANDED.RATE<MUL.CLASS,7> = TVAL      ; * 20M
            EXPANDED.RATE<MUL.CLASS,8> = TVAL      ; * 30M
            EXPANDED.RATE<MUL.CLASS,9> = TVAL      ; * 40M
         NEXT MUL.CLASS

         MIN.CHARGE = TMIN.CHARGE<1>

      END ELSE
*
* STEP 7.B
*
         READ EXPANDED.RATE FROM F.RATE.INDEX,"AFS525ER" ELSE
            ERRLINE = 'AFS525 - UNABLE TO READ RATE.INDEX,AFS525ER'
            FAILURE = 1
            RETURN
         END
         LOCATE RATE.BASIS.NUMBER IN EXPANDED.RATE<1> BY "AR" SETTING WHERE ELSE
            IF EXPANDED.RATE<1,WHERE> < RATE.BASIS.NUMBER THEN WHERE+=1
            RATE.BASIS.NUMBER = EXPANDED.RATE<1,WHERE>
         END
         READ EXPANDED.RATE FROM F.AFS525ER,RATE.BASIS.NUMBER ELSE
            ERRLINE = 'AFS525 - UNABLE TO READ AFS525ER,':RATE.BASIS.NUMBER
            FAILURE = 1
            RETURN
         END

         TMIN.CHARGE=''
         TMIN.CHARGE<1> = EXPANDED.RATE<2>         ; * MIN CHARGE 1
         TMIN.CHARGE<2> = EXPANDED.RATE<3>         ; * MIN CHARGE 2
         TMIN.CHARGE<3> = EXPANDED.RATE<4>         ; * MIN CHARGE 3
         TMIN.CHARGE<4> = EXPANDED.RATE<5>         ; * MIN CHARGE 4
         MIN.CHARGE = TMIN.CHARGE<1>

         DEL EXPANDED.RATE<1>            ; * KILL LINE 1
         DEL EXPANDED.RATE<1>            ; * KILL LINE 2
         DEL EXPANDED.RATE<1>            ; * KILL LINE 3
         DEL EXPANDED.RATE<1>            ; * KILL LINE 4
         DEL EXPANDED.RATE<1>            ; * KILL LINE 5
      END

*
* Minimum Charge Computing..
*
* STEP 8
      IF USER='KEITH' THEN CRT @(0,23):"STOP NOW - RATE TABLE": ; INPUT NUL
*
      BEGIN CASE
*
* STEP 8.A         (RATE.BASIS 10000 - 49999)
*
         CASE RATE.BASIS.NUMBER >= 10000 AND RATE.BASIS.NUMBER <= 49999
            IF DEST.BASING.COL.B.FACTOR > 0 OR ORIG.BASING.COL.B.FACTOR > 0 THEN
               MIN.CHARGE = TMIN.CHARGE<1>
               IF TMIN.CHARGE<2> > MIN.CHARGE THEN MIN.CHARGE = TMIN.CHARGE<2>
            END

            IF ORIG.ZIP[1,3]=>'497' AND ORIG.ZIP[1,3]=<'499' THEN
               IF TMIN.CHARGE<3> > MIN.CHARGE THEN MIN.CHARGE = TMIN.CHARGE<3>
            END
*
* STEP 9         (RATE.BASIS < 5000)
*
         CASE RATE.BASIS.NUMBER < 5000
            READ MIN.CHARGE.REC FROM F.RATE.INDEX,"AFS525MC" ELSE
               ERRLINE = 'AFS525 - UNABLE TO READ AFS525MC'
               FAILURE = 1
               RETURN
            END
            LOCATE RATE.BASIS.NUMBER IN MIN.CHARGE.REC<1> BY "AR" SETTING WHERE ELSE
               ERRLINE = 'AFS525 - COULD NOT FIND RATE.BASIS.NUMBER IN MIN.CHARGE.REC'
            END
            LOCATE TOTAL.WEIGHT IN MIN.CHARGE.REC<2,WHERE> BY "AR" SETTING POS ELSE
            END
            MIN.CHARGE = MIN.CHARGE.REC<2+RATE.SCALE,WHERE,POS>

*
* STEP 10        (RATE.BASIS 6000 - 159999)
*
         CASE RATE.BASIS.NUMBER >= 60000 AND RATE.BASIS.NUMBER <= 159999
*
* STEP 11
*
            READ ADJ.REC FROM F.RATE.INDEX,"AFS525AE" ELSE
               ERRLINE = 'AFS525 - UNABLE TO READ AFS525AE FROM RATE.INDEX'
               FAILURE = 1
               RETURN
            END
            ADJ.NUM = ORIG.BASING.ADJ.NUMBER
            GOSUB ADD.ADJ.REC
            IF FAILURE THEN RETURN
            ADJ.NUM = DEST.BASING.ADJ.NUMBER
            GOSUB ADD.ADJ.REC
            IF FAILURE THEN RETURN
            ADJ.REC=""

            PREF = DEST.ZIP[1,3]
            IF PREF => 100 AND PREF <= 119 OR PREF => 200 AND PREF <= 205 OR PREF => 320 AND PREF <= 349 THEN
*
* Increase the rates by 12% as stated in step 10.
*
               FOR POS = 1 TO 9
                  FOR T.Y = 2 TO 19
                     EXPANDED.RATE<T.Y,POS> = OCONV(EXPANDED.RATE<T.Y,POS> * 1.12,'MR0')
                  NEXT T.Y
               NEXT POS
               TMIN.CHARGE<1> = TMIN.CHARGE<1> * 1.12        ; * Min Charge 1
               TMIN.CHARGE<2> = TMIN.CHARGE<2> * 1.12        ; * Min Charge 2
               TMIN.CHARGE<3> = TMIN.CHARGE<3> * 1.12        ; * Min Charge 3
               TMIN.CHARGE<4> = TMIN.CHARGE<4> * 1.12        ; * Min Charge 4

               MIN.CHARGE = TMIN.CHARGE<1>
            END

      END CASE

      RATE.TABLE = EXPANDED.RATE
      RATE.TABLE.MIN = MIN.CHARGE

      RETURN


*-------------------------------------------------------------------------
* LOOKUP.BASING.ZIP
*
* INPUT:
*   BASING.ZIP - Zipcode to return Basing Information.
*
* RETURNS:
*   BASING.INDEX
*   COL.A.FACTOR
*   COL.B.FACTOR
*   ADJ.NUM
*
* NOTE:
*   Function sets FAILURE on error.
*-------------------------------------------------------------------------
LOOKUP.BASING.ZIP:

      BASING.INDEX=''
      COL.A.FACTOR = ''
      COL.B.FACTOR = ''
      ADJ.NUM = ''

      ZIP.KEY = BASING.ZIP'L#3'
      ZIP.INDEX = BASING.ZIP'R#2'

      READ BASING.REC FROM F.AFS525ZB,ZIP.KEY ELSE
         ERRLINE = 'AFS525 - Unable to read AFS525ZB,':ZIP.KEY
         FAILURE = 1
         MISSING.ZIP=1
         RETURN
      END

      IF BASING.REC<2,1>='' THEN
         BASING.REC<2>=BASING.REC<1>
      END
      LOCATE ZIP.INDEX IN BASING.REC<1> BY "AR" SETTING WHERE ELSE
         WHERE = WHERE - 1
         IF ZIP.INDEX < BASING.REC<1,WHERE> OR ZIP.INDEX > BASING.REC<2,WHERE> THEN
            ERRLINE = 'AFS525 - No ratings for this zip'
            FAILURE = 1
            RETURN
         END
      END

      BASING.INDEX = BASING.REC<3,WHERE>
      COL.A.FACTOR = BASING.REC<4,WHERE>
      COL.B.FACTOR = BASING.REC<5,WHERE>
      ADJ.NUM = BASING.REC<6,WHERE>

      RETURN


*-------------------------------------------------------------------------
* ADD.ADJ.REC - Add Expanded Adjustments Record
*
*-------------------------------------------------------------------------
ADD.ADJ.REC:

      IF ADJ.NUM = 0 THEN RETURN
      LOOK.ADJ.NUM=ADJ.NUM'R%6'
      LOCATE LOOK.ADJ.NUM IN ADJ.REC<1> SETTING WHERE ELSE
         ERRLINE = 'AFS525 - UNABLE TO LOCATE ADJ.NUMBER IN ADJ.REC'
         FAILURE = 1
         RETURN
      END

      NUM.WEIGHTS = DCOUNT(ADJ.REC<3,WHERE>,@SVM)

      FOR AAX = 1 TO NUM.WEIGHTS
         WEIGHT.GROUP = ADJ.REC<3,WHERE,AAX>
         LOOK.WEIGHT.GROUP=TRIM(WEIGHT.GROUP)
         LOCATE LOOK.WEIGHT.GROUP IN EXPANDED.RATE<1> SETTING POS ELSE
            ERRLINE = 'AFS525 - UNABLE TO LOCATE WEIGHT.GROUP IN EXPANDED.RATE'
            FAILURE = 1
            RETURN
         END
         FOR AAY = 2 TO 19
            TVAL = ADJ.REC<AAY+2, WHERE, AAX>
            EXPANDED.RATE<AAY, POS> += TVAL
         NEXT AAY

      NEXT AAX

      TMIN.CHARGE<1> += ADJ.REC<2,WHERE,1>         ; * Min Charge 1
      TMIN.CHARGE<2> += ADJ.REC<2,WHERE,1>         ; * Min Charge 2
      TMIN.CHARGE<3> += ADJ.REC<2,WHERE,1>         ; * Min Charge 3
      TMIN.CHARGE<4> += ADJ.REC<2,WHERE,1>         ; * Min Charge 4
      RETURN
