      SUBROUTINE FB.MONITOR.YTD.VALUES(VIN,VOUT,CLIENT.YTD,F.TABLES,F.BILLS.YTD)
*
* PROGRAM TO MONITOR YTD FIGURES AGAINST A SET LIMIT
*
* FREIGHT BILL PACKAGE
*
      $INCLUDE PROG.ADMIN INC_OPTIONS

      UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.MONITOR.YTD.VALUES' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                      ;* NPR_UPL 04/23/2010

      SLSCODE.OPENED = 1
      OPEN '','AR.SALES.CODE.1000.1' TO F.AR.SALES.CODE ELSE SLSCODE.OPENED = 0

      YTD.HIST.OPENED = 1
      OPEN '','FB.BILLS.YTD,HISTORY' TO F.BILLS.YTD.HIST ELSE YTD.HIST.OPENED = 0   ;* NPR1
*
      CALL GET.USER.NEW(USER,CH.NUM)
    ,
      PROMPT ''
      VOUT = ''
      TODAY = DATE()

      CLIENT            = VIN<1>
      CLIENT.NAME       = VIN<2>
      SERV.SLSMAN.EMAIL = VIN<3>
      ACCT.MGR.EMAIL    = VIN<4>
      FISCAL.YEAR       = VIN<5>
      BEG.DATE          = VIN<6>         ; * Process from date
      END.DATE          = VIN<7>         ; * Process TO date
      CLIENT2.DESC      = VIN<9>         ; * Additional Client Name

      FISCAL.MTH = FIELD(FISCAL.YEAR,".",1)
      FISCAL.DAY = FIELD(FISCAL.YEAR,".",2)
      THIS.YEAR = OCONV(DATE(),"DY4")
      LAST.YEAR = THIS.YEAR - 1

      YTD.HIST.REC  = ""
      YTD.HIST.REC2 = ""

      IF FISCAL.MTH NE "01" THEN
         ID.HIST = CLIENT:".":LAST.YEAR
      END

      CLIENT.ID2        = ""
      CLIENT.YTD2       = ""

      CMP.VALUE     = "0"
      CMP.VALUE.ALL = "0"

      FND.ARRAY = ''

**** Check against ALL codes if CAP set up for ALL codes.

      ID.TAB = "COMM_CAP*":CLIENT
      READ CAP.REC FROM F.TABLES, ID.TAB ELSE RETURN

      CAP.VALUE            = CAP.REC<1>
      EFFECTIVE.FROM       = CAP.REC<2>
      EFFECTIVE.TO         = CAP.REC<3>
      CONTRACT.DT          = CAP.REC<4>
      CLIENT.ID2           = CAP.REC<5>
      MONITOR.SLS.CODES    = CAP.REC<6>

      ACC.SALES.CODES      = CAP.REC<10>  ;* MV Sales Codes with accumulated quantities and amount since effective START DATE
      ACC.SC.QTYS          = CAP.REC<11>  ;* MV accumulated quantities per Sales code since effective START DATE
      ACC.SC.AMOUNTS       = CAP.REC<12>  ;* MV accumulated amounts per Sales code since effective START DATE

      ACC.GROUP.CODES      = CAP.REC<14>  ;* MV Groups Codes with accumulated quantities and amount since effective START DATE
      ACC.GRP.QTYS         = CAP.REC<15>  ;* MV accumulated quantities per Group code since effective START DATE
      ACC.GRP.AMOUNTS      = CAP.REC<16>  ;* MV accumulated amounts per Group code since effective START DATE

      ID.TAB = "COMM_CAP*":CLIENT.ID2
      READ CAP.REC2 FROM F.TABLES, ID.TAB ELSE CAP.REC2 = ""
      CAP.VALUE2            = CAP.REC2<1>
      EFFECTIVE.FROM2       = CAP.REC2<2>
      EFFECTIVE.TO2         = CAP.REC2<3>
      CONTRACT.DT2          = CAP.REC2<4>
      CLIENT.ID22           = CAP.REC2<5>
      MONITOR.SLS.CODES2    = CAP.REC2<6>

      ACC.SALES.CODES2      = CAP.REC2<10>  ;* MV Sales Codes with accumulated quantities and amount since effective START DATE
      ACC.SC.QTYS2          = CAP.REC2<11>  ;* MV accumulated quantities per Sales code since effective START DATE
      ACC.SC.AMOUNTS2       = CAP.REC2<12>  ;* MV accumulated amounts per Sales code since effective START DATE

      ACC.GROUP.CODES2      = CAP.REC2<14>  ;* MV Groups Codes with accumulated quantities and amount since effective START DATE
      ACC.GRP.QTYS2         = CAP.REC2<15>  ;* MV accumulated quantities per Group code since effective START DATE
      ACC.GRP.AMOUNTS2      = CAP.REC2<16>  ;* MV accumulated amounts per Group code since effective START DATE

*
*** Check whether monitoring is still in force
*
      IN.FORCE1 = "0"  ; IN.FORCE2 = "1"

      IF EFFECTIVE.FROM EQ "" THEN
         CALL ELINE("Commission CAP Effective date FROM is null - Needs fixing")
         RETURN
      END
      IF EFFECTIVE.TO = "" THEN
         CALL ELINE("Commission CAP Effective date TO is null - Needs fixing")
         RETURN
      END

      IF EFFECTIVE.FROM <= END.DATE AND END.DATE <= EFFECTIVE.TO THEN IN.FORCE1 = "1"

      IF CLIENT.ID2 NE "" THEN
         IN.FORCE2 = "0"
         IF EFFECTIVE.FROM2 EQ "" THEN
            CALL ELINE("Comm. CAP Effective date FROM is null for related client ":CLIENT.ID2:" - Needs fixing")
            RETURN
         END
         IF EFFECTIVE.TO2 = "" THEN
            CALL ELINE("Comm. CAP Effective date TO is null for related client ":CLIENT.ID2:" - Needs fixing")
            RETURN
         END

         IF EFFECTIVE.FROM2 <= END.DATE AND END.DATE <= EFFECTIVE.TO2 THEN IN.FORCE2 = "1"

         IF IN.FORCE1 * IN.FORCE2 = 0 THEN
            IF IN.FORCE1 AND NOT(IN.FORCE2) THEN
               CALL ELINE("CAP for client ":CLIENT:" in force but not for related client " : CLIENT.ID2 : " - FIX!")
            END
            IF NOT(IN.FORCE1) AND IN.FORCE2 THEN
               CALL ELINE("CAP for client ":CLIENT.ID2:" in force but not for related client " : CLIENT : " - FIX!")
            END
            RETURN
         END
      END

      IN.FORCE = IN.FORCE1 * IN.FORCE2

      VOUT<10> = IN.FORCE

      IF NOT(IN.FORCE) THEN RETURN

      ALL.FLAG = 0

      N.CDS = DCOUNT(MONITOR.SLS.CODES,@VM)
      FOR CD = 1 TO N.CDS
         W.SLSCODE = MONITOR.SLS.CODES<1,CD>
         IF W.SLSCODE = "ALL" THEN
            ALL.FLAG = 1
         END
      NEXT CD


      IF NOT(ALL.FLAG) THEN
         GOSUB SETUP.SALES.CODE.ARRAY
      END

      IF ACC.SALES.CODES NE "" THEN                                                    ;* Use accumulated values on FB.TABLES record.
         CMP.ARRAY    = ACC.SALES.CODES    ;* MV Sales code with accumulated values
         CMP.ARRAY<2> = ACC.SC.QTYS        ;* MV Qty per Sales code
         CMP.ARRAY<3> = ACC.SC.AMOUNTS     ;* MV Amount per Sales code
         IF ACC.SALES.CODES2 NE "" THEN
            N.CD2 = DCOUNT(ACC.SALES.CODES2,@VM)
            FOR CD2 = 1 TO N.CD2
               Y.SLSCODE = ACC.SALES.CODES2<1,CD2>
               Y.SLSQTY  = ACC.SC.QTYS2<1,CD2>
               Y.SLSVAL  = ACC.SC.AMOUNTS<1,CD2>
               LOCATE Y.SLSCODE IN CMP.ARRAY<1> BY 'AR' SETTING Y.POS THEN
                  CMP.ARRAY<2,Y.POS> += Y.SLSQTY
                  CMP.ARRAY<3,Y.POS> += Y.SLSVAL
               END ELSE
                  INS Y.SLSCODE BEFORE CMP.ARRAY<1,Y.POS>
                  INS Y.SLSQTY BEFORE CMP.ARRAY<2,Y.POS>
                  INS Y.SLSVAL BEFORE CMP.ARRAY<3,Y.POS>
               END
            NEXT CD2
         END
      END ELSE
         CMP.ARRAY    = CLIENT.YTD<79>    ;* MV Sales code with accumulated values
         CMP.ARRAY<2> = CLIENT.YTD<80>    ;* MV Qty per Sales code
         CMP.ARRAY<3> = CLIENT.YTD<81>    ;* MV Amount per Sales code
         CLIENT.YTD2 = ""
         READ CLIENT.YTD2 FROM F.BILLS.YTD , CLIENT.ID2 THEN
            N.CD2 = DCOUNT(CLIENT.YTD2<79>,@VM)
            FOR CD2 = 1 TO N.CD2
               Y.SLSCODE = CLIENT.YTD2<79,CD2>
               Y.SLSQTY  = CLIENT.YTD2<80,CD2>
               Y.SLSVAL  = CLIENT.YTD2<81,CD2>
               LOCATE Y.SLSCODE IN CMP.ARRAY<1> BY 'AR' SETTING Y.POS THEN
                  CMP.ARRAY<2,Y.POS> += Y.SLSQTY
                  CMP.ARRAY<3,Y.POS> += Y.SLSVAL
               END ELSE
                  INS Y.SLSCODE BEFORE CMP.ARRAY<1,Y.POS>
                  INS Y.SLSQTY BEFORE CMP.ARRAY<2,Y.POS>
                  INS Y.SLSVAL BEFORE CMP.ARRAY<3,Y.POS>
               END
            NEXT CD2
         END
      END

      CAP.EXCEEDED = 0

      IF ALL.FLAG THEN
         CMP.VALUE.ALL = SUM(CLIENT.YTD<81>)   ;* ALL sales codes - add all YTD Amounts
         IF CLIENT.YTD2 NE "" THEN
            CMP.VALUE.ALL += SUM(CLIENT.YTD2<81>)
         END

         VOUT = "ALL"
         VOUT<3> = CAP.VALUE
         VOUT<4> = CMP.VALUE.ALL

         IF NUM(CMP.VALUE.ALL) AND CMP.VALUE.ALL GE CAP.VALUE THEN
            CAP.EXCEEDED = 1
         END
      END ELSE
         GOSUB CHECK.CODES   ;* Check Individual codes

         VOUT    = FND.ARRAY<1>
         VOUT<2> = FND.ARRAY<2>
         VOUT<3> = CAP.VALUE
         VOUT<4> = CMP.VALUE

         IF NUM(CMP.VALUE) AND CMP.VALUE GE CAP.VALUE THEN
            CAP.EXCEEDED = 1
         END
      END

      IF CAP.EXCEEDED THEN GOSUB SEND.ALERT  ;* Send Alert if Total Amount for all Sales codes have exceeded CAP set for ALL
*

      RETURN

****************************************************
CHECK.CODES: *
*****************************************************
**** Check Sales codes to Accumulate and compare against CAP Value.
*
*
      YTD.SALES.CODES = CMP.ARRAY<1>   ;* MV list of Sales codes with related Accumulated values.
      YTD.SALES.VALS  = CMP.ARRAY<3>   ;* MV list of Accumulated values per Sales codes
      CMP.VALUE = 0

*
** Accumulate total to compare to CAP Value
*
      N.CODES = DCOUNT(CODES.TO.ACCUM<1>,@VM)
      FOR IC = 1 TO N.CODES
         X.SLSCODE   = CODES.TO.ACCUM<1,IC>
         LOCATE X.SLSCODE IN YTD.SALES.CODES<1> SETTING CMP.POS THEN

            X.CMP.VALUE = YTD.SALES.VALS<1,CMP.POS> + 0
            CMP.VALUE += X.CMP.VALUE
            FND.ARRAY<1,-1> = X.SLSCODE
            FND.ARRAY<2,-1> = X.CMP.VALUE
         END
      NEXT IC

      RETURN
****************************************************
SETUP.SALES.CODE.ARRAY: *
****************************************************
      CODES.TO.ACCUM = ""       ;* List of Sales Codes to take into account when accumulating values to compare Cap against.
      GROUPS         = ""       ;* MV list of available Sales code groups.
      CODES.LIST     = ""       ;* MV list of sales codes per Group - Attribute number corresponds to value of Group code in GROUPS array.
*
      EXECUTE \SSELECT AR.SALES.CODE.1000.1 BY 8\ CAPTURING OUTPUT

      EOF = "N"
      LOOP
         READNEXT ID.SLSCODE ELSE EOF = "Y"
      UNTIL EOF = "Y" DO
         READ SLSCODE.REC FROM F.AR.SALES.CODE, ID.SLSCODE THEN
            GROUP.CODE = SLSCODE.REC<8>
            IF GROUP.CODE = "" THEN GROUP.CODE = "ZZ"

            LOCATE GROUP.CODE IN GROUPS<1> BY 'AR' SETTING GR.POS THEN
               NULL
            END ELSE
               INS GROUP.CODE BEFORE GROUPS<1,GR.POS>
            END

            LOCATE ID.SLSCODE IN CODES.LIST<GR.POS> BY 'AR' SETTING SLC.POS THEN
               NULL
            END ELSE
               INS ID.SLSCODE BEFORE CODES.LIST<GR.POS,SLC.POS>
            END
         END
      REPEAT

      N.GROUPS = DCOUNT(GROUPS<1>,@VM)

      N.CODES  = DCOUNT(MONITOR.SLS.CODES,@VM)
      FOR CD = 1 TO N.CODES
         W.CODE = MONITOR.SLS.CODES<1,CD>   ;* May actually be a Sales Group Code
         LOCATE W.CODE IN GROUPS<1> BY 'AR' SETTING GR.POS THEN
            N.CD2  = DCOUNT(CODES.LIST<GR.POS>,@VM)
            FOR CD2 = 1 TO N.CD2
               W.SLSCODE2 = CODES.LIST<GR.POS,CD2>
               LOCATE W.SLSCODE2 IN CODES.TO.ACCUM<1> BY 'AR' SETTING AC.POS THEN
                  NULL
               END ELSE
                  INS W.SLSCODE2 BEFORE CODES.TO.ACCUM<1,AC.POS>
               END
            NEXT CD2
         END ELSE
            W.SLSCODE = W.CODE
            LOCATE W.SLSCODE IN CODES.TO.ACCUM<1> BY 'AR' SETTING AC.POS THEN
               NULL
            END ELSE
               INS W.SLSCODE BEFORE CODES.TO.ACCUM<1,AC.POS>
            END
         END
      NEXT CD

      RETURN

****************************************************
SEND.ALERT: **** Send an email alert that the CAP has been exceeded.
*****************************************************
      VIN=''

      SUBJ = "Client ":CLIENT:" - ":CLIENT.NAME:" has exceeded the commission notification level/s"

      MSG.TEXT = "On ":OCONV(TODAY,"D2/"):", Client ":CLIENT:" - ":CLIENT.NAME:" exceeded the commission notification level/s as follows: "
      MSG.TEXT<1,-1> = " "

      IF VOUT<1,1> = "ALL" AND DCOUNT(VOUT<1>,@VM) = 1 THEN
         CAP.VALUE = OCONV(VOUT<3>,"MR2,")
         CMP.VALUE = OCONV(VOUT<4>,"MR2,")
         MSG.TEXT<1,-1> = "All Sales Codes have accumulated $ ":CMP.VALUE:" and the notification level is set at $ " :  CAP.VALUE : "."
      END ELSE
         N.VALS = DCOUNT(VOUT<1>,@VM)
         FOR IV = 1 TO N.VALS
            CODE     = VOUT<1,IV>
            CODE.VALUE = VOUT<2,IV>
            READV CODE.DESC FROM F.AR.SALES.CODE, CODE, 10 ELSE CODE.DESC = "Desc. Not on File"
            CAP.VALUE = VOUT<3,IV>
            CMP.VALUE = VOUT<4,IV>
            MSG.TEXT<1,-1> = CODE "R#5" :\ - \:CODE.DESC[1,35] "L#35" :\ Accumulated Amount is $ \:OCONV(CODE.VALUE,'MR2,') "R#12"
         NEXT IV

         TOT.CAP.VALUE = SUM(VOUT<3>)
         TOT.CMP.VALUE = SUM(VOUT<4>)

         MSG.TEXT<1,-1> = " "
         MSG.TEXT<1,-1> = " "
         MSG.TEXT<1,-1> = \Selected Sales Code/s have accumulated a total value of $ \ : OCONV(TOT.CMP.VALUE,'MR2,') 'R#12' : \ and the notification level is set at $ \ : OCONV(TOT.CAP.VALUE,'MR2,') 'R#12'  : \.\
      END

      MSG.TEXT<1,-1> = " "

      MSG.TEXT<1,-1> = "Monitoring in effect from ":OCONV(EFFECTIVE.FROM,"D2/"):" thru " : OCONV(EFFECTIVE.TO,"D2/")
      MSG.TEXT<1,-1> = " "

      IF CLIENT.ID2 NE "" THEN
         MSG.TEXT<1,-1> = " "
         MSG.TEXT<1,-1> = " "
         W.STRING = "* Additional Client taken into consideration is ":CLIENT.ID2:" - ":CLIENT2.DESC:" *"
         MSG.TEXT<1,-1> = STR("*",LEN(W.STRING))
         MSG.TEXT<1,-1> = W.STRING
         MSG.TEXT<1,-1> = " "
         MSG.TEXT<1,-1> = "Monitoring in effect from ":OCONV(EFFECTIVE.FROM2,"D2/"):" thru " : OCONV(EFFECTIVE.TO2,"D2/")
         MSG.TEXT<1,-1> = " "
         MSG.TEXT<1,-1> = STR("*",LEN(W.STRING))
         MSG.TEXT<1,-1> = " "
      END
      MSG.TEXT<1,-1> = " "
      MSG.TEXT<1,-1> = " "
      MSG.TEXT<1,-1> = " "
      MSG.TEXT<1,-1> = "Message generated by program FB.MONITOR.YTD.VALUES during processing of clients bills"
      MSG.TEXT<1,-1> = " "

      TEXT = MSG.TEXT

      VIN=''

      VIN<1,-1>= 'mary@afs.net'

      IF ACCT.MGR.EMAIL NE "" THEN
         VIN<1,-1> = ACCT.MGR.EMAIL
      END

      IF SERV.SLSMAN.EMAIL NE '' THEN
         VIN<1,-1> = SERV.SLSMAN.EMAIL
      END

      VIN<2,-1>='brianp@afs.net'
      VIN<4>='AFS_CAP_NOTIFY@afs.net'
      VIN<5>=SUBJ
      VIN<6>=TEXT
      CALL SENDMAIL(VIN,MVOUT)
*
      RETURN
