****************************************************
* Program name : CONVERT.UPS.EBILL
* Author       : unknown
* Date written : 06-02-2008
* Library      : FBBP
* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* Convert UPS Ebills
*
* Last updated by afs (AFSLOGISTICS\gbino) at 13:32:36 on 03/02/2023.
*
* Start modification history
* 050208 - JMK01 - C081163 - Ebill automatic PDF files ; needs to happen at different point in process
* 060908 - JMK02 - Change to alert when UPS Freight is combined with parcel
* 031609 - JMK03 - Change to allow for new UPS filename formats
* 042409 - JMK04 - Add package type to converted file
* 060109 - JMK05 - C081661 - Large Package Surcharge Commission
* 061409 - JMK06 - ADD "Y' TO FRT LINE INSTEAD OF ACC LINE
* 070109 - JMK07 - C090828 - Add option to client maintenance for Break out UPS Accessorials for Commissions
* 080709 - JMK08 - C090998 - UPS Exception Report - Re-Bill Charges
* 110209 - JMK09 - C091313 - needs help with coding for Airgas Great Lakes
* 111709 - JMK10 - Change format for UPS Exception Report - Re-bill Charges
* 020110 - JMK11 - ADD EMAIL ALERTS TO LET MARY AND MYRA KNOW WHEN CONVERTED
* 030910 - JMK12 - Updated Coding for Airgas Great Lakes (01418)
* 031810 - JMK13 - Updated Coding for Rexel (01706)
* 041310 - JMK14 - ADD EXPENSE CODING FOR REESE II (01019)
* 041810 - JMK15 - ADD LINE ITEM EXPENSE CODING FOR NATIONAL WELDERS 01675
* 071210 - JMK16 - ADD LINE ITEM EXPENSE CODING FOR AIRGAS SAFETY 01773
* 080910 - JMK17 - ADD LINE ITEM EXPENSE CODING FOR DOUGLAS/QUICKUT 01357
* 081810 - JMK18 - ADD LINE ITEM EXPENSE CODING FOR NIBCO 30028
* 082910 - JMK19 - ADJUST REF FIELD FOR REESE II
* 031811 - JMK20 - ADD LINE ITEM EXPENSE CODING FOR WABTEC 01977
* 042611 - NPR01 - T110379 - Modified Signature on email (Removed ? seperator).
* 082611 - JMK21 - PROJECT 72 - UPS E-BILL CONVERSION / MODIFY FOR LARGE PACKAGE SURCHARGE NOTATION
* 090911 - JMK22 - R111155 - Alcon GL coding needs to be copied over from 15 & 1075 to carrier #41
* 101011 - JMK23 - ADJUSTMENTS TO THE GL CODING FOR NIBCO BASED ON MEETING
* 101211 - JMK24 - ADD REFERENCE FIELDS 3, 4 AND 5 TO CONVERTED FILE
* 110711 - JMK25 - SORT EBILLS BY PROCESS DAY OF WEEK
* 121311 - JMK26 - SysAid#928 - UPS Coding for SVP
* 011912 - JMK27 - SysAid#928 - UPS Coding for SVP - Revision 1
* 021512 - JMK28 - SysAid#928 - UPS Coding for SVP - Revision 2 - Canadian
* 022912 - JMK29 - USE REFERENCE FIELD 1 IF MATCHES EXPENSE CODE FILE FOR ALCON 10356
* 032012 - JMK30 - ADJUST ALCON EXPENSE CODES BY AIR OR LEVEL
* 050312 - JMK31 - SysAid#2587 - Copying wrong reference numbers for UPS Ebill
* 080612 - JMK32 - SysAid#3445 - Converted Ebill/Due Date
* 121712 - JMK33 - Client 02131 - Expense code by line item
* 011613 - JMK34 - RELOCATE THE UPS PLAN FIELD FROM 7 TO 14
* 092613 - JMK35 - SHV/SLC INTEGRATION
* 101013 - JMK36 - Reverse JMK35
* 111913 - JMK37 - SysAid#7560 - SVP Worldwide Coding
* 012714 - JMK38 - Returned Payment Fee setup
* 022414 - JMK39 - Airgas SAP Adjustments
* 031114 - JMK40 - Capture CPP in field 15 instead of 14
* 032614 - JMK41 - Fine Tune PDF check
* 033114 - JMK42 - Airgas SAP Adjustments
* 042714 - JMK43 - Add Mary McKay to the Import emails and include pdf attachment.
* 051914 - JMK44 - Handle returned checks
* 052214 - JMK45 - Add Elisa Mertin to the Import emails and include pdf attachment.
* 052714 - JMK46 - Split up Alcon (7106AF) like Airgas Safety (0261CP) and move to Wednesday
* 060314 - JMK47 - Adjust filename and location for the SCS pdf attachments
* 062314 - JMK48 - SysAid#19268 - coding not correct
* 072214 - JMK49 - Expand "Plant Number" field from JMK39 to 6 characters when needed
* 082914 - DRF01 - SysAid 11640 - Line item coding for UPS for client
*                  05166
* 100114 - JMK50 - EXPENSE CODE ADJUSTMENTS FOR AIRGAS SAFETY PARCEL
* 012015 - JMK51 - CHECK FOR PREVIOUS EXISTENCE (DUPLICATES)
* 022615 - DRF02 - SysAid 15591 - Gave Laura Metz in the emails that went to Elisa.
* 041615 - JMK52 - Perform Airgas Parcel check using the Airgas Parent company
* 120215 - DRF03 - SysAid 21013 Add Expense code line item
* 021216 - GRB01 - SysAid 21157 Write SCODE conversion errors to CONVERT.ERR file
* 021516 - DRF04 - SysAid 22264 Put the INCO on the last column of the ebill for Airgas
* 051016 - DRF05 - SysAid 24383 Add expense codes for client 01639
* 060916 - GRB02 - SysAid split hello fresh file
* 102516 - GRB03 - Change address
* 050218 - DRF06 - Ticket 12148 - Added special expense code for account A63A63
* 083018 - GRB04 - AACU-75 - Unzip pdf files for lippert
* 083018 - GRB05 - AACU-75 - Add pdf email by division
* 052321 - DRF05 - ACCR-1067 - Modify expense code for 01825 so if
*                  shipper number is 1630V6 and receiver name and
*                  receiver company name are not null the expense code
*                  is set to 600
* 030223 - GRB06 - ACCU-2041 donot put airgas and cavenders CP file in BILLDATA.EBILL.HOLD
************************************************************
      CMND=@SENTENCE
      IF FIELD(CMND,' ',2)='BATCH' OR FIELD(CMND,' ',3) = 'BATCH' THEN
         AUTO=1
      END ELSE
         AUTO=0
      END

      PROG.NAME='CONVERT.UPS.EBILL'
      PROG.DESC='UPS EBILL CONVERSION'
      PACK.NAME='FREIGHT BILLING'
      EQU TB TO CHAR(9)
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'CONVERT.UPS.EBILL' ; UPL.VOUT = ''        ; * NPR_UPL 04/22/2010
      ****    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/22/2010
      CALL GET.USER(USER)
      * Begin GRB01
      VIN1=""
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "S"
      CALL PROGTRACK(VIN1,VOUT1)
      * End GRB01
      TESTING=0
      IF TESTING AND AUTO=0 THEN
         CALL ELINE('This processing is in testing mode.  See Mike to change.')
         STOP
      END
      AFS.IS.ADDRESS = 'helpdesk@afs.net'          ; * JMK01
      AFS.PARCEL.ADDRESS = 'parcel@afs.net'        ; * JMK01   GRB03
      CARRIER.ID='00041'                 ; * JMK01
      DIVISION.ID.CODES.00918=''
      FLAG.0261CP=''
      SHIP.LIST.0261CP=''
      FLAG.0679FY =''
      SHIP.LIST.0679FY = ''

      ERR.ARRAY=''                       ; * JMK51
      UPD.DATA=1
      DOW=OCONV(DATE(),'DW')
      * Begin GRB04
      OPEN '','BILLDATA.EBILL.TEMP' TO F.EBILL.TEMP ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL.TEMP',PROG.NAME)
      END
      * End GRB04
      OPEN '','BILLDATA.EBILL' TO F.EBILL ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL',PROG.NAME)
      END
      OPEN '','BILLDATA.EBILL.HIST' TO F.EBILL.HIST ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL.HIST',PROG.NAME)
      END
      OPEN '','BILLDATA.EBILL.DATA' TO F.EBILL.DATA ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL.DATA',PROG.NAME)
      END
      OPEN '','BILLDATA.EBILL.DATA.IMPORT' TO F.EBILL.DATA.IMPORT ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL.DATA.IMPORT',PROG.NAME)
      END
      OPEN '','BILLDATA.EBILL.HOLD' TO F.EBILL.HOLD ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL.HOLD',PROG.NAME)
      END
      OPEN '','BILLDATA.':USER TO F.BILLDATA.USER ELSE       ; * JMK01
         CALL OPEN.ABORT('BILLDATA.':USER,PROG.NAME)         ; * JMK01
      END                                ; * JMK01
      OPEN '','EBILL.CONVERT' TO F.EBILL.CONVERT ELSE
         CALL OPEN.ABORT('EBILL.CONVERT',PROG.NAME)
      END
      OPEN '','EDI.CAR.ACNT.XREF' TO F.EDI.CAR.ACNT.XREF ELSE
         CALL OPEN.ABORT('EDI.CAR.ACNT.XREF',PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','CLIENTS' TO F.CLIENTS ELSE          ; * JMK01
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)      ; * JMK01
      END                                ; * JMK01
      OPEN '','CARRIERS' TO F.CARRIERS ELSE        ; * JMK01
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)     ; * JMK01
      END                                ; * JMK01
      OPEN '','FTP.01349.REPORTS' TO F.FTP.01349.RPTS ELSE
         CALL OPEN.ABORT('FTP.01349.REPORTS',PROG.NAME)
      END
      OPEN '','UPS.BM' TO F.UPS.BM ELSE
         CALL OPEN.ABORT('UPS.BM',PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS ELSE
         CALL OPEN.ABORT('ZIPS.CODES',PROG.NAME)
      END
      OPEN '','AIRGAS.LOC.ZIP' TO F.AIRGAS.LOC.ZIP ELSE      ; * JMK39
         CALL OPEN.ABORT('AIRGAS.LOC.ZIP',PROG.NAME)         ; * JMK39
      END                                ; * JMK39
      OPEN '','AIRGAS.PO' TO F.AIRGAS.PO ELSE      ; * DRF04
         CALL OPEN.ABORT('AIRGAS.PO',PROG.NAME)    ; * DRF04
      END                                ; * DRF04
      OPEN '','ZIP.DIV.XREF,01706' TO F.ZIP.DIV.XREF ELSE    ; * DRF06
         CALL OPEN.ABORT('ZIP.DIV.XREF,01706',PROG.NAME)     ; * DRF06
      END                                ; * DRF06
      OPEN '','BILLDATA.EBILL.PDF' TO F.EBILL.PDF ELSE       ; * JMK41
         CALL OPEN.ABORT('BILLDATA.EBILL.PDF',PROG.NAME)     ; * JMK41
      END                                ; * JMK41
      OPEN 'CONVERT.ERR' TO F.CERROR ELSE          ; * GRB01
         CALL OPEN.ABORT('CONVERT.ERR',PROG.NAME)  ; * GRB01
      END                                ; * GRB01
      OPEN '','BILLDATA.EBILL.TEMP' TO F.EBILL.TEMP ELSE     ; * JMK41
         CALL OPEN.ABORT('BILLDATA.EBILL.TEMP',PROG.NAME)    ; * JMK41
      END
      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID THEN
         CARRIER.NAME=CARRIER.REC<1>
         CARRIER.CITY=CARRIER.REC<3>
         CARRIER.STATE=CARRIER.REC<4>
         CARRIER.MODE=CARRIER.REC<44>
      END
      READ SVP.STORE.REC FROM F.TABLES,'SVP.STORE.LIST' ELSE SVP.STORE.REC=''    ; * JMK27
      IF AUTO THEN
         ACK='Y'
      END ELSE
10:      CALL AFS.SCR.HEAD('','','',PROG.NAME,PROG.DESC,PACK.NAME,"AFS Logistics, LLC",TIME.DATE,1)
50:      HELP='Enter N to stop. EX=Exit.'
         CALL GEN.IN(0,22,'Do you want to continue? Y ','',ACK,0,2,'','',1,-2,22,0,QI,HELP,0,23)
         ACK=OCONV(ACK,'MCU')
         IF ACK='N' THEN STOP
         IF ACK='EX' THEN STOP
         IF ACK='' ! ACK='Y' ELSE GOTO 50
      END

55:   *

      ***** CRT "start SELECT ":OCONV(TIME(),"MTHS")
      STMT='SSELECT BILLDATA.EBILL BY UPS.DOW WITH @ID EQ "[-]" AND WITH @ID EQ "P]""A]" AND WITH @ID = "[.csv" OR WITH @ID = "Invoice_]" AND WITH @ID = "[.csv" OR WITH @ID = "Invoice_]" AND WITH @ID = "[.Csv"'           ; * JMK03 ; * JMK25

      EXECUTE STMT CAPTURING RESULTS
      IF @SELECTED > 0 THEN
         IF AUTO=0 THEN
            CRT @(0,0):@(-1):
            CRT @(-1)
         END
         NUM.ITMS=@SELECTED
         TYPE='CSV'
         CONVERT.LIST=''
         UNCONVERT.LIST=''
         EOF=0
         CNT=0
         LOOP
            READNEXT EBILL.ID ELSE EOF=1
         UNTIL EOF DO
            CNT+=1
            IF AUTO=0 THEN
               CRT @(0,16):'Processing ':EBILL.ID:'...':@(-4):
**********               CALL PROG.BAR(18,CNT,NUM.ITMS,'')
            END
            * validatiion checks first
            ** GO CHECK ebill data on file first
            GOSUB CHECK.FILE.ALREADY.PROCESSED
            IF SKIP.FLAG THEN
               CONTINUE
            END
            ******
            ** GO CHECK valid file type
            GOSUB CHECK.FILE.ALREADY.PROCESSED2
            IF SKIP.FLAG THEN
               CONTINUE
            END
            ******
            ** GO CHECK ebill hist
            GOSUB CHECK.FILE.ALREADY.PROCESSED3
            IF SKIP.FLAG THEN
               CONTINUE
            END
            IF EBILL.ID[1,1]#'A' AND EBILL.ID[1,1]#'P' AND EBILL.ID[1,1]#'I' THEN CONTINUE

****SPLIT.FILE:
            IF INDEX(EBILL.ID,'0261CP',1) THEN     ; * airgas
               FLAG.0261CP=EBILL.ID
               OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                  CRT "CANNOT OPEN BILLDATA.EBILL"
               END
               ****   OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.ID TO OUTSEQ.FILE ELSE     ; * GRB06
               ****     CREATE OUTSEQ.FILE ELSE
               ****    END
               ****END
               OPENSEQ 'BILLDATA.EBILL.DATA', EBILL.ID TO OUTSEQ.FILE2 ELSE
                  CREATE OUTSEQ.FILE2 ELSE
                  	 GO SKIP.EBILL
                  END
               END
               INSEQ.DONE = 0
               LOOP
               UNTIL INSEQ.DONE DO
                  READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE = 1
                  ****  WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL             ; * GRB06
                  WRITESEQ EBILL.REC ON OUTSEQ.FILE2 ELSE NULL
               REPEAT
               **** CLOSESEQ OUTSEQ.FILE              ; * GRB06
               CLOSESEQ OUTSEQ.FILE2
               CLOSESEQ INSEQ.FILE
      ***         DELETE F.EBILL,EBILL.ID       ; * GRB06
               CONTINUE
            END
            IF INDEX(EBILL.ID,'0679FY',1) THEN     ; * CAVENDERS   ; * GRB02
               FLAG.0679FY=EBILL.ID
               OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                  CRT "CANNOT OPEN BILLDATA.EBILL"
                  GO SKIP.EBILL
               END
               ****    OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.ID TO OUTSEQ.FILE ELSE      ; * GRB06
               ****      CREATE OUTSEQ.FILE ELSE
               ****    END
               ****  END
               OPENSEQ 'BILLDATA.EBILL.DATA', EBILL.ID TO OUTSEQ.FILE2 ELSE
                  CREATE OUTSEQ.FILE2 ELSE
                     GO SKIP.EBILL
                  END
               END
               INSEQ.DONE = 0
               LOOP
                  READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE = 1
               UNTIL INSEQ.DONE DO
                  WRITESEQ EBILL.REC ON OUTSEQ.FILE2 ELSE NULL
                  ****   WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL        ; * GRB06
               REPEAT
               CLOSESEQ OUTSEQ.FILE2
               CLOSESEQ INSEQ.FILE
               ****  CLOSESEQ OUTSEQ.FILE                  ; * GRB06
*****               DELETE F.EBILL,EBILL.ID        ; * GRB06
               CONTINUE
            END

            IF INDEX(EBILL.ID,'1298RU',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'1298SI',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'5R3F30',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'5R3E60',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'5R3F10',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'41E314',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'WA6931',1) THEN
               ****  DEBUG
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'1297GL',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END
            IF INDEX(EBILL.ID,'624A5A',1) THEN
               GOSUB PUT.IN.HOLD
               CONTINUE
            END

            OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
               CRT "CANNOT OPEN BILLDATA.EBILL"
               GO SKIP.EBILL
            END
            INSEQ.DONE = 0
            ATT = 0
            HUN.ARRAY=''
            HUN.LIST=''
            ERR.ARRAY=''
            TRK.ARRAY=''
            SHP.ARRAY=''
            MV.REC=''
            HUN.PKG=''
            LAST.SHIPPER=''
            PREV.SHIPPER=''
            PREV.TERM=''
            LAST.DIVISION.ID=''
            CLIENT.LIST=''
            SHIP.DIR.ARRAY=''
            SHIP.INV.ARRAY=''            ; * JMK47
            UPS.FNAME=EBILL.ID[1,1]      ; * JMK03
            ***** CRT "start MAIN  ":OCONV(TIME(),"MTHS")
            LOOP
               READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE = 1   ; * read file A
            UNTIL INSEQ.DONE DO
               IF EBILL.REC = "" THEN CONTINUE
               **       READ EBILL.REC FROM F.EBILL,EBILL.ID THEN
               ***        EBILL.ORG=EBILL.REC
               **
               PHASE=1
               NATT=DCOUNT(EBILL.REC,@AM)
               ARS.PHASE=0
               TOT.INCENTIVE.AMT=0
               TOT.NET.AMT=0
               ****     FOR ATT=1 TO NATT
               ATT+=1
               IF AUTO=0 THEN
**********                     CALL PROG.BAR(20,ATT,NATT,'')
               END
               IN=''
               OUT=EBILL.REC
               CALL CONVERT.STRING(IN,OUT,TYPE)
               MV.REC<-1>=IN
               SHIPPER=IN<1,3>
               TRACK.NO=IN<1,21>
               IF IN<1,35>='ADJ' AND IN<1,36>='OCG' THEN
                  TRACK.NO=IN<1,14>
               END
               CCAT.CD=IN<1,35>
               IF CCAT.CD='RTN' THEN
                  RTN=1
               END ELSE
                  RTN=0
               END
               MV.LINE=IN
               GOSUB GET.TCODE
               HUN.FLG=0
               HUN.VALID=1
               IF TCODE.REC<1>='ADC' THEN HUN.VALID=0
               IF TCODE.REC<1>='ADJ' THEN HUN.VALID=0
               IF TCODE.REC<1>='GSR' THEN HUN.VALID=0
               IF TCODE.REC<1>='SCC' THEN HUN.VALID=0
               IF TCODE.REC<1>='VOD' THEN HUN.VALID=0
               ****     TEST.LINE=OCONV(EBILL.REC<ATT>,'MCU')
               TEST.LINE=OCONV(MV.LINE,'MCU')
               IF MV.LINE<1,35>='SHP' THEN
                  IF INDEX(TEST.LINE,'HUNDREDWEIGHT',1) THEN
                     IF HUN.VALID THEN HUN.FLG=1
                  END
                  IF MV.LINE<1,14>#'' AND HUN.VALID THEN
                     LOCATE (SHIPPER:'*':MV.LINE<1,14>) IN HUN.ARRAY<1> BY 'AL' SETTING HPOS THEN
                        IF PRV.MV.LINE<1,14>=MV.LINE<1,14> THEN
                           HUN.FLG=1
                        END
                     END
                  END
               END
               UPS.AMT=ICONV(IN<1,53>,'MD2')
               IF IN<1,36>='ARS' THEN ARS.PHASE=1
               TOT.INCENTIVE.AMT+=ICONV(IN<1,52>,'MR2')
               TOT.NET.AMT+=ICONV(IN<1,53>,'MR2')
               *****     NEXT ATT
            REPEAT
            NATT = ATT
            ***** CRT "END MAIN ":OCONV(TIME(),"MTHS")
*
* START LOOKING FOR AND ADJUSTING THE "ARS" LINES
*
            IF ARS.PHASE THEN
               FOR ATT=1 TO NATT
                  IF AUTO=0 THEN
**********                        CALL PROG.BAR(20,ATT,NATT,'')
                  END
                  MV.LINE=MV.REC<ATT>
                  NXT.MV.LINE=MV.REC<ATT+1>
                  IF MV.LINE<1,36>='ARS' THEN
                     IF MV.LINE<1,44>='FRT' AND NXT.MV.LINE<1,44>='FSC' THEN
                        ARSFRT=MV.LINE
                        DEL MV.REC<ATT>
                        NATT-=1
                        ARSFSC=NXT.MV.LINE
                        DEL MV.REC<ATT>
                        NATT-=1
                        ARSLINES=ARSFRT<1,19>
                        ARSFRT<1,53>=(ARSFRT<1,53>/ARSLINES)'R24'
                        ARSFSC<1,49>=(ARSFSC<1,49>/ARSLINES)'R24'
                        ARSFSC<1,53>=(ARSFSC<1,53>/ARSLINES)'R24'
                        FOR ARSTIME=1 TO ARSLINES
                           ARSLINE=MV.REC<ATT>
                           DEL MV.REC<ATT>
                           NATT-=1
                           ARSFRT<1,14>=ARSLINE<1,14>
                           ARSFRT<1,21>=ARSLINE<1,21>
                           ARSFSC<1,14>=ARSLINE<1,14>
                           ARSFSC<1,21>=ARSLINE<1,21>
                           INS ARSFRT BEFORE MV.REC<ATT>
                           ATT+=1
                           NATT+=1
                           INS ARSLINE BEFORE MV.REC<ATT>
                           ATT+=1
                           NATT+=1
                           INS ARSFSC BEFORE MV.REC<ATT>
                           ATT+=1
                           NATT+=1
                        NEXT ARSTIME
                        ATT-=1
                     END
                  END
               NEXT ATT
            END
*********
            SHIPPER.LIST=''              ; * JMK01
            REBILL.FLG=0
            SHIPPER.ERROR=0
            ***** CRT "start MAIN 2 ":OCONV(TIME(),"MTHS")
            FOR ATT=1 TO NATT
               PRV.MV.LINE=''
               IF ATT>1 THEN PRV.MV.LINE=MV.LINE
               MV.LINE=MV.REC<ATT>
               NXT.MV.LINE=MV.REC<ATT+1>
               NXT2.MV.LINE=MV.REC<ATT+2>
               COUNTRY=MV.LINE<1,4>
               IF COUNTRY='US' THEN
                  SHIPPER=MV.LINE<1,3>[5,6]
                  FILE.DATE=MV.LINE<1,5>           ; * JMK01
                  XREF.ID='00041*':SHIPPER
                  IF SHIPPER='500426' THEN
                     XREF.ID='12810*':SHIPPER
                  END
                  READ XREF.REC FROM F.EDI.CAR.ACNT.XREF,XREF.ID THEN
                     XREF.ORG=XREF.REC
                     XREF.REC<15>=CUST.ID'R#6'     ; * JMK34 ; * JMK40
                     DIVISION.ID=XREF.REC<2>
                     IF XREF.REC#XREF.ORG THEN
                        WRITE XREF.REC ON F.EDI.CAR.ACNT.XREF,XREF.ID
                     END
                     LOCATE SHIPPER:FILE.DATE IN SHIPPER.LIST<5> BY 'AL' SETTING POS ELSE  ; * JMK01
                        INS SHIPPER BEFORE SHIPPER.LIST<1,POS>         ; * JMK01
                        INS XREF.REC<1> BEFORE SHIPPER.LIST<2,POS>     ; * AFS Client ID ; * JMK01
                        INS XREF.REC<2> BEFORE SHIPPER.LIST<3,POS>     ; * AFS DIVISION ID ; * JMK01
                        INS FILE.DATE BEFORE SHIPPER.LIST<4,POS>       ; * Date of invoice ; * JMK01
                        INS SHIPPER:FILE.DATE BEFORE SHIPPER.LIST<5,POS>         ; * New ID ; * JMK01
                     END                 ; * JMK01
                  END ELSE
                     IF SHIPPER#LAST.SHIPPER AND HIST.REC="" THEN
                        ERROR=EBILL.ID:' for plan ':CUST.ID:' and shipper number ':SHIPPER:' has not been setup as valid E-Bill.'
                        ERR.ARRAY<1,-1>=ERROR
                        LAST.SHIPPER=SHIPPER
                        LAST.DIVISION.ID=DIVISION.ID
                        SHIPPER.ERROR=1
                     END
                     XREF.REC='NOT FOUND'
                  END
                  AFS.CLIENT=XREF.REC<1>
                  LOCATE AFS.CLIENT IN CLIENT.LIST SETTING POS ELSE CLIENT.LIST<-1>=AFS.CLIENT
                  SHIP.DIR=MV.LINE<1,7>
                  LOCATE SHIP.DIR IN SHIP.DIR.ARRAY<1> SETTING SDPOS ELSE
                     SHIP.DIR.ARRAY<1,-1>=SHIP.DIR
                  END
                  IF MV.LINE<1,8>='25' OR MV.LINE<1,8>='26' THEN       ; * JMK02
                     ERROR=EBILL.ID:' for plan ':CUST.ID:' and shipper number ':SHIPPER:' has UPS Freight combined in the same E-Bill.'      ; * JMK02
                     ERR.ARRAY<1,-1>=ERROR         ; * JMK02
                  END                    ; * JMK02
                  GOSUB GET.TCODE
                  GOSUB GET.BCODE
                  SCODE.REC=''
                  VCODE.REC=''
                  IF MV.LINE<1,36>='VOID' THEN
                     GOSUB GET.VCODE
                  END ELSE
                     GOSUB GET.SCODE
                  END
                  HUN.FLG=0
                  HUN.VALID=1
                  IF TCODE.REC<1>='ADC' THEN HUN.VALID=0
                  IF TCODE.REC<1>='ADJ' THEN HUN.VALID=0
                  IF TCODE.REC<1>='GSR' THEN HUN.VALID=0
                  IF TCODE.REC<1>='SCC' THEN HUN.VALID=0
                  IF TCODE.REC<1>='VOD' THEN HUN.VALID=0
                  ******  TEST.LINE=OCONV(EBILL.REC<ATT>,'MCU')
                  TEST.LINE=OCONV(MV.REC<ATT>,'MCU')
                  IF MV.LINE<1,35>='SHP' THEN
                     IF INDEX(TEST.LINE,'HUNDREDWEIGHT',1) THEN
                        IF HUN.VALID THEN HUN.FLG=1
                     END
                     IF MV.LINE<1,14>#'' AND HUN.VALID THEN
                        LOCATE (SHIPPER:'*':MV.LINE<1,14>) IN HUN.ARRAY<1> BY 'AL' SETTING HPOS THEN
                           IF PRV.MV.LINE<1,14>=MV.LINE<1,14> THEN
                              HUN.FLG=1
                           END
                        END
                     END
                  END
                  IF HUN.FLG THEN
                     HUN.NO=MV.LINE<1,14>
                     LOCATE (SHIPPER:'*':HUN.NO) IN HUN.ARRAY<1> BY 'AL' SETTING HPOS ELSE
                        INS (SHIPPER:'*':HUN.NO) BEFORE HUN.ARRAY<1,HPOS>
                        HUN.LIST=HUN.ARRAY<1>
                        FOR INS.ATT=2 TO 6
                           INS 0 BEFORE HUN.ARRAY<INS.ATT,HPOS>
                        NEXT INS.ATT
                        FOR INS.ATT=7 TO 25
                           INS '' BEFORE HUN.ARRAY<INS.ATT,HPOS>
                        NEXT INS.ATT
                        FOR INS.ATT=26 TO 55
                           INS 0 BEFORE HUN.ARRAY<INS.ATT,HPOS>
                        NEXT INS.ATT
                     END
                     HUN.ARRAY<2,HPOS>+=MV.LINE<1,19>
                     HUN.ARRAY<3,HPOS>+=MV.LINE<1,29>
                     HUN.ARRAY<4,HPOS>+=MV.LINE<1,27>
                     HUN.ARRAY<5,HPOS>+=MV.LINE<1,53>
                     HUN.ARRAY<6,HPOS>+=MV.LINE<1,52>
                     VCODE.REC=''
                     SCODE.REC=''
                     IF MV.LINE<1,36>='VOID' THEN
                        GOSUB GET.VCODE
                     END ELSE
                        GOSUB GET.SCODE
                     END
                     IF SCODE.REC<2>+0#0 THEN
                        HUN.ATT=SCODE.REC<2>-32
                        HUN.ARRAY<HUN.ATT,HPOS>='Y'
                        HUN.ARRAY<HUN.ATT+19,HPOS>+=MV.LINE<1,53>
                     END
                     IF MV.LINE<1,45>='LPS' THEN   ; * JMK21
                        HUN.ATT=42-32    ; * JMK21
                        HUN.ARRAY<HUN.ATT,HPOS>='L'          ; * JMK21
                        HUN.ARRAY<HUN.ATT+19,HPOS>+=MV.LINE<1,53>      ; * JMK21
                     END                 ; * JMK21
                     IF MV.LINE<1,35>='SHP' AND MV.LINE<1,44>='FRT' THEN
                        HUN.ARRAY<51,HPOS>+=MV.LINE<1,52>+MV.LINE<1,53>
                        HUN.ARRAY<52,HPOS>+=MV.LINE<1,52>
                     END
                     IF MV.LINE<1,35>='SHP' AND MV.LINE<1,45>='RES' THEN
                        HUN.ARRAY<53,HPOS>+=MV.LINE<1,53>
                     END
                     IF MV.LINE<1,35>='SHP' AND MV.LINE<1,44>='FSC' THEN
                        HUN.ARRAY<54,HPOS>+=MV.LINE<1,53>
                        HUN.ARRAY<55,HPOS>+=MV.LINE<1,52>
                     END
                  END
               END ELSE                  ; * international bill
                  MONEY=0
                  IF MV.LINE<1,52>+0#0 THEN MONEY=1
                  IF MV.LINE<1,53>+0#0 THEN MONEY=1
                  IF MONEY THEN
                     ERROR=EBILL.ID:' appears to be an Import Bill.  Please print this bill and process through Freight Payment.'
                     ERR.ARRAY<1,-1>=ERROR
                     UPS.IMP=1
                     EMAIL.OUT=''
                     IF TESTING THEN
                     END ELSE
                        EMAIL.OUT<1,-1>='MMckay@afs.net'     ; * JMK43
                        EMAIL.OUT<2,-1>='EMertin@afs.net'    ; * JMK45
                        EMAIL.OUT<2,-1>='LMetz@afs.net'      ; * DRF02
                     END
                     EMAIL.OUT<4>='EbillConversion@afs.net'
                     EMAIL.OUT<5>=EBILL.ID:' UPS Import Bill->AFS Please Print to FP'
                     EMAIL.OUT<6>=EBILL.ID:' experienced conversion problems from the UPS format to the AFS format.'
                     EMAIL.OUT<6>:='  These problems are listed below.'
                     EMAIL.OUT<6,-1>=' '
                     EMAIL.OUT<6,-1>=ERR.ARRAY
                     IF TESTING THEN
                        EMAIL.OUT<6,-1>=' '
                        EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"
                     END
                     PDF.FILENAME = CHANGE(EBILL.ID,'csv','zip')       ; * JMK43
                     READ TEST FROM F.EBILL.PDF,PDF.FILENAME ELSE      ; * JMK43
                        NSHIPPER=DCOUNT(SHIPPER.LIST<1>,@VM)           ; * JMK43
                        IF NSHIPPER>1 OR SHIPPER.LIST<1>='E78E75' THEN           ; * JMK43
                           PDF.FILENAME = CHANGE(PDF.FILENAME,'0000','')         ; * JMK03
                        END              ; * JMK43
                     END                 ; * JMK43
                     READ TEST FROM F.EBILL.PDF,PDF.FILENAME THEN      ; * JMK43
                        EMAIL.OUT<11,-1>="e:\Ardent\public\billdata\E-BILL hist\pdf files\":PDF.FILENAME       ; * JMK43
*****                           ATTACH.STR ="e:\Ardent\public\billdata\E-BILL hist\pdf files\":PDF.FILENAME
*****                           ATTACH.STR = QUOTE(ATTACH.STR)
*****                           EMAIL.OUT<11,-1> = ATTACH.STR
                     END                 ; * JMK43
                     CALL SENDMAIL(EMAIL.OUT,RESULTS)
                     CLOSESEQ INSEQ.FILE
**** move file from e-bill to import directory
                     OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                        CRT "CANNOT OPEN BILLDATA.EBILL"
                        GO SKIP.EBILL
                     END
                     OPENSEQ 'BILLDATA.EBILL.DATA.IMPORT', EBILL.ID TO OUTSEQ.FILE ELSE
                        CREATE OUTSEQ.FILE ELSE
                           GO SKIP.EBILL
                        END
                     END
                     INSEQ.DONE1 = 0
                     LOOP
                     UNTIL INSEQ.DONE1 DO
                        READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
                        WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL
                     REPEAT
                     CLOSESEQ OUTSEQ.FILE
                     CLOSESEQ INSEQ.FILE
                     DELETE F.EBILL,EBILL.ID

                     ****     READ EBILL.REC1 FROM F.EBILL,EBILL.ID THEN
                     ****        WRITE EBILL.REC1 ON F.EBILL.DATA.IMPORT,EBILL.ID
                     ****        DELETE F.EBILL,EBILL.ID
                     ****     END
                     UNCONVERT.LIST<1,-1>=EBILL.ID:' was an import bill, not converted and resides in the E-BILL DATA IMPORT FILES folder.'
                     GO SKIP.EBILL
                  END
               END
            NEXT ATT
            ***** CRT "END MAIN 2 ":OCONV(TIME(),"MTHS")
            UPS.IMP=0
            LOCATE "I" IN SHIP.DIR.ARRAY<1> SETTING IPOS THEN
               ERROR=EBILL.ID:' appears to be an Import Bill.  Please print this bill and process through Freight Payment.'
               ERR.ARRAY<1,-1>=ERROR
               UPS.IMP=1
               EMAIL.OUT=''
               IF TESTING THEN
                  EMAIL.OUT<1,-1>='nmeddaugh@afs.net'
               END ELSE
                  EMAIL.OUT<1,-1>='MMckay@afs.net'           ; * JMK43
                  EMAIL.OUT<2,-1>='EMertin@afs.net'          ; * JMK45
                  EMAIL.OUT<2,-1>='LMetz@afs.net'  ; * DRF02
               END
               EMAIL.OUT<4>='EbillConversion@afs.net'
               EMAIL.OUT<5>=EBILL.ID:' UPS Import Bill->AFS Please Print to FP'
               EMAIL.OUT<6>=EBILL.ID:' experienced conversion problems from the UPS format to the AFS format.'
               EMAIL.OUT<6>:='  These problems are listed below.'
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>=ERR.ARRAY
               IF TESTING THEN
                  EMAIL.OUT<6,-1>=' '
                  EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"
               END
               PDF.FILENAME = CHANGE(EBILL.ID,'csv','zip')   ; * JMK43
               READ TEST FROM F.EBILL.PDF,PDF.FILENAME ELSE  ; * JMK43
                  NSHIPPER=DCOUNT(SHIPPER.LIST<1>,@VM)       ; * JMK43
                  IF NSHIPPER>1 OR SHIPPER.LIST<1>='E78E75' THEN       ; * JMK43
                     PDF.FILENAME = CHANGE(PDF.FILENAME,'0000','')     ; * JMK03
                  END                    ; * JMK43
               END                       ; * JMK43
               READ TEST FROM F.EBILL.PDF,PDF.FILENAME THEN  ; * JMK43
                  EMAIL.OUT<11,-1>="e:\Ardent\public\billdata\E-BILL hist\pdf files\":PDF.FILENAME   ; * JMK43
****                     ATTACH.STR ="e:\Ardent\public\billdata\E-BILL hist\pdf files\":PDF.FILENAME
****                     ATTACH.STR = QUOTE(ATTACH.STR)
****                     EMAIL.OUT<11,-1> = ATTACH.STR
               END                       ; * JMK43
               CALL SENDMAIL(EMAIL.OUT,RESULTS)
               CLOSESEQ INSEQ.FILE
**** move file from e-bill to import directory

               OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                  CRT "CANNOT OPEN BILLDATA.EBILL"
                  GO SKIP.EBILL
               END
               OPENSEQ 'BILLDATA.EBILL.DATA.IMPORT', EBILL.ID TO OUTSEQ.FILE ELSE
                  CREATE OUTSEQ.FILE ELSE
                     GO SKIP.EBILL
                  END
               END
               INSEQ.DONE1 = 0
               LOOP
               UNTIL INSEQ.DONE1 DO
                  READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
                  WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL
               REPEAT
               CLOSESEQ OUTSEQ.FILE
               CLOSESEQ INSEQ.FILE
               DELETE F.EBILL,EBILL.ID
               UNCONVERT.LIST<1,-1>=EBILL.ID:' was an import bill, not converted and resides in the E-BILL DATA IMPORT FILES folder.'
               GO SKIP.EBILL
            END
            GOSUB BLOCK.CLIENTS
            REBILL.ARRAY=''              ; * JMK08
            REBILL.AMT=0                 ; * JMK08
            IF ERR.ARRAY#'' AND UPS.IMP=0 THEN
               EMAIL.OUT=''
               IF TESTING THEN
               END ELSE
                  EMAIL.OUT<1,-1>='ups.ebills@afs.net'
                  EMAIL.OUT<1,-1>='parcel@afs.net'
               END
               EMAIL.OUT<4>='EbillConversion@afs.net'
               IF SHIPPER.ERROR THEN
                  EMAIL.OUT<5>=EBILL.ID:' UPS->AFS E-Bill Shipper Conversion Problems'
               END ELSE
                  EMAIL.OUT<5>=EBILL.ID:' UPS->AFS E-Bill Conversion Problems'
               END
               EMAIL.OUT<6>=EBILL.ID:' experienced conversion problems from the UPS format to the AFS format.'
               EMAIL.OUT<6>:='  These problems are listed below.  Please review, update the conversion parameters'
               EMAIL.OUT<6>:=' and advise when these can be re-converted.'
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>='Incentive Amt (Excel AZ)=':TOT.INCENTIVE.AMT'R26#12'
               EMAIL.OUT<6,-1>='Net Amt       (Excel BA)=':TOT.NET.AMT'R26#12'
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>=ERR.ARRAY
               IF TESTING THEN
                  EMAIL.OUT<6,-1>=' '
                  EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"
               END
               CALL SENDMAIL(EMAIL.OUT,RESULTS)

               CLOSESEQ INSEQ.FILE
               ******************************
               **** move file from e-bill to hold directory
               OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                  CRT "CANNOT OPEN BILLDATA.EBILL"
                  GO SKIP.EBILL
               END
               OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.ID TO OUTSEQ.FILE ELSE
                  CREATE OUTSEQ.FILE ELSE
                     GO SKIP.EBILL
                  END
               END
               INSEQ.DONE1 = 0
               LOOP
               UNTIL INSEQ.DONE1 DO
                  READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
                  WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL
               REPEAT
               CLOSESEQ OUTSEQ.FILE
               CLOSESEQ INSEQ.FILE
               DELETE F.EBILL,EBILL.ID

               UNCONVERT.LIST<1,-1>=EBILL.ID:' was un-successfully converted and resides in the E-BILL HOLD folder pending review.'
               IF TESTING THEN
                  ERR.TXT=ERR.ARRAY
                  ERR.TXT=CHANGE(ERR.TXT,@VM,@AM)
                  WRITE ERR.TXT ON F.EBILL.HOLD,EBILL.ID:'_ERROR.TXT'
               END
            END ELSE
               ***** CRT "start PHASE 2 ":OCONV(TIME(),"MTHS")
               PHASE=2
               AFS.REC=''
               AFS.LINE=''
               AFS.MV.LINE=''            ; * JMK06
               AFS.ACC.ARRAY=''          ; * JMK05
               HUN.ACC.ARRAY=''          ; * JMK05
               LAST.HUN.NO=''
               LAST.SHIPPER='START'
               LAST.DIVISION.ID='START'
               LAST.TRACK.NO='START'
               LAST.RTN=0
               TRACK.FRT=0
               REBILL.FLG=1              ; * JMK08
               REBILL.ARRAY=''           ; * JMK08
               REBILL.AMT=0              ; * JMK08
               FOR ATT=1 TO NATT
                  IF AUTO=0 THEN
**********                        CALL PROG.BAR(22,ATT,NATT,'')
                  END
                  HUN.NO=''
                  HUN.LINE=''
                  HUN.FLG=0
                  PRV.MV.LINE=''
                  IF ATT>1 THEN PRV.MV.LINE=MV.LINE
                  MV.LINE=MV.REC<ATT>
                  NXT.MV.LINE=MV.REC<ATT+1>
                  ****     TEST.LINE=OCONV(EBILL.REC<ATT>,'MCU')
                  TEST.LINE=OCONV(MV.REC<ATT>,'MCU')
                  SHIPPER=MV.LINE<1,3>[5,6]
                  IF LAST.SHIPPER='START' THEN LAST.SHIPPER=SHIPPER
                  COUNTRY=MV.LINE<1,4>
                  IF COUNTRY#'US' THEN
                     MONEY=0
                     IF MV.LINE<1,52>+0#0 THEN MONEY=1
                     IF MV.LINE<1,53>+0#0 THEN MONEY=1
                     IF MONEY THEN
                        ERROR=EBILL.ID:'-Line ':ATT:', Country Code Error with invoiced amounts.  Advise UPS to bill these separately.'
                        ERR.ARRAY<1,-1>=ERROR
                     END ELSE
                        GO SKIP.ATT
                     END
                  END
                  IF MV.LINE<1,44>='INF' THEN GO SKIP.ATT
                  TRACK.NO=TRIM(MV.LINE<1,21>)
                  IF TRIM(MV.LINE<1,35>)='ADJ' AND TRIM(MV.LINE<1,36>)='OCG' THEN
                     TRACK.NO=TRIM(MV.LINE<1,14>)
                  END
                  IF LAST.TRACK.NO='START' THEN LAST.TRACK.NO=TRACK.NO
                  CCAT.CD=MV.LINE<1,35>
                  IF CCAT.CD='RTN' THEN
                     RTN=1
                  END ELSE
                     RTN=0
                  END
                  CHG.CLS.CD=TRIM(MV.LINE<1,44>)
                  SCODE.REC=''
                  VCODE.REC=''
                  IF MV.LINE<1,36>='VOID' THEN
                     VCODE.REC=''        ; * JMK05
                     GOSUB GET.VCODE
                  END ELSE
                     SCODE.REC=''        ; * JMK05
                     GOSUB GET.SCODE
                  END
                  TCODE.REC=''           ; * JMK05
                  GOSUB GET.TCODE
                  HUN.VALID=1
                  IF TCODE.REC<1>='ADC' THEN HUN.VALID=0
                  IF TCODE.REC<1>='ADJ' THEN HUN.VALID=0
                  IF TCODE.REC<1>='GSR' THEN HUN.VALID=0
                  IF TCODE.REC<1>='SCC' THEN HUN.VALID=0
                  IF TCODE.REC<1>='VOD' THEN HUN.VALID=0
                  IF MV.LINE<1,14>#'' AND MV.LINE<1,35>='SHP' AND HUN.VALID THEN
                     LOCATE (SHIPPER:'*':MV.LINE<1,14>) IN HUN.LIST<1> BY 'AL' SETTING HPOS THEN
                        IF PRV.MV.LINE<1,14>=MV.LINE<1,14> OR MV.LINE<1,35>='SHP' THEN
                           HUN.FLG=1
                        END
                     END
                  END
                  XREF.ID='00041*':SHIPPER         ; * JMK07
                  IF SHIPPER='500426' THEN         ; * JMK07
                     XREF.ID='12810*':SHIPPER      ; * JMK07
                  END                    ; * JMK07
                  ACC.DTL=0              ; * JMK07
                  READ XREF.REC FROM F.EDI.CAR.ACNT.XREF,XREF.ID ELSE XREF.REC=''          ; * JMK07
                  CLIENT.ID=XREF.REC<1>
                  DIVISION.ID=XREF.REC<2>
                  IF LAST.DIVISION.ID='START' THEN LAST.DIVISION.ID=DIVISION.ID
                  READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID THEN ACC.DTL=CLIENT.REC<243>="Y"          ; * JMK07
                  IF MV.LINE<1,35>='RTN' THEN
                     RTN=1
                  END ELSE
                     RTN=0
                  END
                  EXPENSE.LINE=0         ; * JMK09
                  IF CLIENT.ID='01019' THEN EXPENSE.LINE=1   ; * JMK14
                  IF CLIENT.ID='01357' THEN EXPENSE.LINE=1   ; * JMK17
                  IF CLIENT.ID='01581' THEN EXPENSE.LINE=1   ; * JMK09
                  IF CLIENT.ID='01639' THEN EXPENSE.LINE=1   ; * DRF05
                  IF CLIENT.ID='01675' THEN EXPENSE.LINE=1   ; * JMK15
                  IF CLIENT.ID='01706' THEN EXPENSE.LINE=1   ; * JMK13
                  IF CLIENT.ID='01825' THEN EXPENSE.LINE=1   ; * JMK09
                  IF CLIENT.ID='01826' THEN EXPENSE.LINE=1   ; * JMK09
                  IF CLIENT.ID='02025' THEN EXPENSE.LINE=1   ; * DRF03

                  BEGIN CASE             ; * JMK39
                     CASE AFS.CLIENT='05016'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05026'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05027'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05028'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05029'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05030'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05031'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05032'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05033'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05034'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05035'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05036'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05037'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05038'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05039'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05040'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05041'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05042'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05043'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05044'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05045'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05046'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05047'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05048'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05049'       ; * JMK39
                        EXPENSE.LINE=1   ; * JMK39
                        AIRGAS=1         ; * JMK39
                     CASE AFS.CLIENT='05166'       ; * DRF01
                        EXPENSE.LINE=1   ; * DRF01
                        AIRGAS=1         ; * DRF01
                     CASE AFS.CLIENT='05549'       ; * DRFZZ
                        EXPENSE.LINE=1   ; * DRFZZ
                        AIRGAS=1         ; * DRFZZ
                     CASE AFS.CLIENT='05626'       ; * DRFZZ
                        EXPENSE.LINE=1   ; * DRFZZ
                        AIRGAS=1         ; * DRFZZ
                     CASE AFS.CLIENT='05787'       ; * DRFZZ
                        EXPENSE.LINE=1   ; * DRFZZ
                        AIRGAS=1         ; * DRFZZ
                     CASE CLIENT.REC<147>='87774'  ; * JMK52
                        EXPENSE.LINE=1   ; * JMK52
                        AIRGAS=1         ; * JMK52
                     CASE 1 ; AIRGAS=0   ; * JMK39
                  END CASE               ; * JMK39
                  TRAN.DT=MV.LINE<1,12>[6,2]:MV.LINE<1,12>[9,2]:MV.LINE<1,12>[1,4]
                  TRK.ID=MV.LINE<1,3>[5,6]:'*':TRACK.NO
                  IF HUN.FLG THEN
                     TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,14>
                  END
                  LOCATE TRK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRKPOS ELSE
                     INS TRK.ID BEFORE TRK.ARRAY<1,TRKPOS>
                     INS 0 BEFORE TRK.ARRAY<2,TRKPOS>
                     INS 0 BEFORE TRK.ARRAY<3,TRKPOS>
                     INS '' BEFORE TRK.ARRAY<4,TRKPOS>
                     INS '' BEFORE TRK.ARRAY<5,TRKPOS>
                  END
                  TRK.ARRAY<2,TRKPOS>+=ICONV(MV.LINE<1,53>,'MD2')
                  LOCATE SHIPPER IN SHP.ARRAY<1> BY 'AL' SETTING SHPPOS ELSE
                     INS SHIPPER BEFORE SHP.ARRAY<1,SHPPOS>
                     INS 0 BEFORE SHP.ARRAY<2,SHPPOS>
                     INS 0 BEFORE SHP.ARRAY<3,SHPPOS>
                  END
                  SHP.ARRAY<2,SHPPOS>+=ICONV(MV.LINE<1,53>,'MD2')
                  IF SCODE.REC<5>#'' AND ACC.DTL=1 THEN      ; * JMK05
                     BENCH.PER=''
                     GOSUB GET.BENCH.PER
                     IF BENCH.PER='' THEN
                        ERROR=EBILL.ID:' appears to have a ':SCODE.REC<5>:' without a percent.'
                        ERR.ARRAY<1,-1>=ERROR
                     END
                     IF BENCH.PER#'10000' THEN
                        IF HUN.FLG THEN  ; * JMK05
                           HUN.ACC.ARRAY<-1>=MV.LINE         ; * JMK05
                        END ELSE         ; * JMK05
                           AFS.ACC.ARRAY<-1>=MV.LINE         ; * JMK05
                        END              ; * JMK05
                        GOTO SKIP.ATT    ; * JMK05
                     END
                  END                    ; * JMK05
                  ROLLUP=1
                  IF SHIPPER#LAST.SHIPPER THEN
                     ROLLUP=0
                     IF REBILL.ARRAY#'' THEN       ; * JMK08
                        REBILL.SHIPPER=REBILL.ARRAY<1,3>[5,6]
                        REBILL.XREF.ID='00041*':REBILL.SHIPPER
                        IF REBILL.SHIPPER='500426' THEN
                           REBILL.XREF.ID='12810*':REBILL.SHIPPER
                        END
                        READ REBILL.XREF.REC FROM F.EDI.CAR.ACNT.XREF,REBILL.XREF.ID ELSE REBILL.XREF.REC=''
                        REBILL.CLIENT.ID=REBILL.XREF.REC<1>
                        READ REBILL.CLIENT.REC FROM F.CLIENTS,REBILL.CLIENT.ID ELSE REBILL.CLIENT.REC='' ; REBILL.CLIENT.REC<2>='**Unknown**'
                        EMAIL.OUT=''     ; * JMK08
                        EMAIL.OUT<1,-1>='JDarwin@afs.net'    ; * JMK08
                        EMAIL.OUT<1,-1>='BPBarker@afs.net'   ; * JMK08
                        EMAIL.OUT<2,-1>='DFriend@afs.net'    ; * JMK08
                        EMAIL.OUT<4>='EbillConversion@afs.net'         ; * JMK08
                        EMAIL.OUT<5>='Re-Bill Charges for Client ':REBILL.CLIENT.ID:' - ':REBILL.CLIENT.REC<2>           ; * JMK08
* Email body
                        EMAIL.OUT<6,-1>=\<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">\          ; * JMK08
                        EMAIL.OUT<6,-1>=\<HTML LANG="EN-US">\          ; * JMK08
                        EMAIL.OUT<6,-1>=\<STYLE>\  ; * JMK08
                        EMAIL.OUT<6,-1>=\<!--\     ; * JMK08
                        EMAIL.OUT<6,-1>=\TABLE { font-size : x-small}\           ; * JMK08
                        EMAIL.OUT<6,-1>=\-->\      ; * JMK08
                        EMAIL.OUT<6,-1>=\</STYLE>\           ; * JMK08
                        EMAIL.OUT<6,-1>=\<HEAD>\   ; * JMK08
                        EMAIL.OUT<6,-1>=\</HEAD>\  ; * JMK08
                        EMAIL.OUT<6,-1>=\<BODY>\   ; * JMK08
                        EMAIL.OUT<6,-1>=\<TABLE BORDER="2" WIDTH="75%">\         ; * JMK08
                        EMAIL.OUT<6,-1>=\   <CAPTION>\       ; * JMK08
                        EMAIL.OUT<6,-1>=\      <B><BIG>\:REBILL.AMT'R26,$':\ in Re-Bill Charges</BIG></B>\     ; * JMK08
                        EMAIL.OUT<6,-1>=\   </CAPTION>\      ; * JMK08
                        EMAIL.OUT<6,-1>=\ <TR>\    ; * JMK08 ; * JMK10
                        EMAIL.OUT<6,-1>=\  <TH>Shipper Number</TH>\    ; * JMK08 ; * JMK10
                        EMAIL.OUT<6,-1>=\  <TH>Service Description</TH>\         ; * JMK08 ; * JMK10
                        EMAIL.OUT<6,-1>=\  <TH>Re-Bill Amount</TH>\    ; * JMK08 ; * JMK10
                        EMAIL.OUT<6,-1>=\  <TH>Explanation 1</TH>\     ; * JMK08 ; * JMK10
                        EMAIL.OUT<6,-1>=\  <TH>Explanation 2</TH>\     ; * JMK08 ; * JMK10
                        EMAIL.OUT<6,-1>=\  <TH>Explanation 3</TH>\     ; * JMK08 ; * JMK10
                        EMAIL.OUT<6,-1>=\ </TR>\   ; * JMK08 ; * JMK10
                        REBILL.NATT=DCOUNT(REBILL.ARRAY,@AM)           ; * JMK08
                        FOR REBILL.ATT = 1 TO REBILL.NATT    ; * JMK08
                           REBILL.LINE=REBILL.ARRAY<REBILL.ATT>        ; * JMK08
                           EMAIL.OUT<6,-1>=\ <TR>\           ; * JMK08 ; * JMK10
                           EMAIL.OUT<6,-1>=\  <TD>\:REBILL.LINE<1,3>:\</TD>\     ; * JMK08 ; * JMK10
                           EMAIL.OUT<6,-1>=\  <TD>\:REBILL.LINE<1,46>:\</TD>\    ; * JMK08 ; * JMK10
                           EMAIL.OUT<6,-1>=\  <TD ALIGN="RIGHT">\:REBILL.LINE<1,53>:\</TD>\          ; * JMK08 ; * JMK10
                           EMAIL.OUT<6,-1>=\  <TD>\:REBILL.LINE<1,175>:\</TD>\   ; * JMK08 ; * JMK10
                           EMAIL.OUT<6,-1>=\  <TD>\:REBILL.LINE<1,176>:\</TD>\   ; * JMK08 ; * JMK10
                           EMAIL.OUT<6,-1>=\  <TD>\:REBILL.LINE<1,177>:\</TD>\   ; * JMK08 ; * JMK10
                           EMAIL.OUT<6,-1>=\ </TR>\          ; * JMK08 ; * JMK10
                        NEXT REBILL.ATT  ; * JMK08
                        IF REBILL.NATT>1 THEN      ; * JMK08
                           EMAIL.OUT<6,-1>=\ <TR>\           ; * JMK08
                           EMAIL.OUT<6,-1>=\  <TD><B>Total Re-Bill Amount</B></TD>\        ; * JMK08
                           EMAIL.OUT<6,-1>=\  <TD></TD>\     ; * JMK08
                           EMAIL.OUT<6,-1>=\  <TD></TD>\     ; * JMK08
                           EMAIL.OUT<6,-1>=\  <TD ALIGN="RIGHT"><B>\:REBILL.AMT'R26,$':\</B></TD>\   ; * JMK08
                           EMAIL.OUT<6,-1>=\ </TR>\          ; * JMK08
                        END              ; * JMK08
                        EMAIL.OUT<6,-1>=\</TABLE>\           ; * JMK08
                        EMAIL.OUT<7>=1   ; * JMK08
                        EMAIL.OUT<8>='HTML'        ; * JMK08
                        VIN=EMAIL.OUT    ; * JMK08
                        VOUT=''          ; * JMK08
                        CALL SENDMAIL(VIN,VOUT)    ; * JMK08
                        REBILL.ARRAY=''  ; * JMK08
                        REBILL.AMT=0     ; * JMK08
                     END                 ; * JMK08
                  END
                  IF TRACK.NO#LAST.TRACK.NO OR RTN#LAST.RTN THEN
                     IF TRACK.NO='' AND HUN.FLG THEN
                        NULL
                     END ELSE
                        ROLLUP=0
                     END
                  END
                  IF OCONV(TRIM(SCODE.REC<1>),'MCL')#'(roll-up)' THEN
                     IF SCODE.ID#"SCODE*ACC*SED*Export Declaration Fee" THEN
                        IF TRACK.NO#'' AND LAST.TRACK.NO#'' AND TRACK.NO=LAST.TRACK.NO AND RTN=LAST.RTN THEN
                           NULL
                        END ELSE
                           ROLLUP=0
                        END
                     END
                  END
                  IF AFS.LINE='' THEN ROLLUP=0
                  IF ROLLUP THEN
                     AFS.LINE<1,12>+=MV.LINE<1,19>
                     BEGIN CASE
                        CASE MV.LINE<1,31>='LTR'
                        CASE 1
                           AFS.LINE<1,14>+=MV.LINE<1,27>
                     END CASE
                     IF HUN.FLG=0 THEN
                        AFS.LINE<1,37>+=MV.LINE<1,53>
                        AFS.LINE<1,38>+=MV.LINE<1,52>
                        IF SCODE.REC<2>+0#0 THEN
                           AFS.LINE<1,SCODE.REC<2>>='Y'
                           AFS.LINE<1,SCODE.REC<2>+25>+=MV.LINE<1,53>
                        END
                        IF MV.LINE<1,45>='LPS' THEN          ; * JMK21
                           AFS.LINE<1,42>='L'      ; * JMK21
                           AFS.LINE<1,67>+=MV.LINE<1,53>     ; * JMK21
                        END              ; * JMK21
                        IF MV.LINE<1,35>='SHP' AND MV.LINE<1,44>='FRT' THEN
                           AFS.LINE<1,83>+=MV.LINE<1,52>+MV.LINE<1,53>
                           AFS.LINE<1,84>+=MV.LINE<1,52>
                        END
                        IF MV.LINE<1,35>='SHP' AND MV.LINE<1,45>='RES' THEN
                           AFS.LINE<1,85>+=MV.LINE<1,53>
                        END
                        IF MV.LINE<1,35>='SHP' AND MV.LINE<1,44>='FSC' THEN
                           AFS.LINE<1,86>+=MV.LINE<1,53>
                           AFS.LINE<1,87>+=MV.LINE<1,52>
                        END
                        AFS.LINE<1,88>=MV.LINE<1,31>         ; * JMK04
                     END
                  END ELSE
                     IF AFS.LINE#'' THEN
                        IF AFS.LINE<1,21>='(roll-up)' THEN
                           ERROR=EBILL.ID:'-Line ':ATT:', Service Description ':SCODE.ID:' did not roll up correctly.(':MV.LINE<1,21>:')'
                           ERR.ARRAY<1,-1>=ERROR
                        END
                        IF AFS.LINE<1,20>='RTS' THEN
                           AFS.RTN=1
                        END ELSE
                           AFS.RTN=0
                        END
                        TRAN.DT=AFS.LINE<1,23>
                        TRK.ID=AFS.LINE<1,3>[5,6]:'*':AFS.LINE<1,7>
                        IF HUN.FLG THEN
                           TRK.ID=AFS.LINE<1,3>[5,6]:'*':HUN.NO
                        END
                        LOCATE TRK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRKPOS ELSE
                           INS TRK.ID BEFORE TRK.ARRAY<1,TRKPOS>
                           INS 0 BEFORE TRK.ARRAY<2,TRKPOS>
                           INS 0 BEFORE TRK.ARRAY<3,TRKPOS>
                           INS '' BEFORE TRK.ARRAY<4,TRKPOS>
                           INS '' BEFORE TRK.ARRAY<5,TRKPOS>
                        END
                        TRK.ARRAY<3,TRKPOS>+=ICONV(AFS.LINE<1,37>,'MD2')
                        LOCATE AFS.LINE<1,3>[5,6] IN SHP.ARRAY<1> BY 'AL' SETTING SHPPOS ELSE
                           INS AFS.LINE<1,3>[5,6] BEFORE SHP.ARRAY<1,SHPPOS>
                           INS 0 BEFORE SHP.ARRAY<2,SHPPOS>
                           INS 0 BEFORE SHP.ARRAY<3,SHPPOS>
                        END
                        SHP.ARRAY<3,SHPPOS>+=ICONV(AFS.LINE<1,37>,'MD2')
*
* GET EXPENSE CODE FOE LINE ITEMS
*
*DFCALL ELINE(SHIPPER)
                        IF EXPENSE.LINE THEN       ; * JMK09
                           EBILL=AFS.LINE
                           GOSUB CALL.GET.EXPENSE
                           IF EXPENSE.CODE#'' THEN
                              AFS.LINE<1,89>=EXPENSE.CODE
                           END
                        END
                        AFS.MV.LINE=AFS.LINE       ; * JMK05
                        IF HIST.REC<1>='HIST' THEN
                           AFS.LINE=CHANGE(AFS.LINE,@VM,TB)
                        END ELSE
                           IN=AFS.LINE
                           OUT=''
                           CALL CONVERT.STRING(IN,OUT,TYPE)
                           AFS.LINE=OUT
                        END
                        AFS.REC<-1>=AFS.LINE
                        IF AFS.ACC.ARRAY#'' THEN   ; * JMK05
                           AFS.FRT.ATT=DCOUNT(AFS.REC,@AM)   ; * JMK06
                           AFS.FRT.LINE=AFS.MV.LINE          ; * JMK06
                           HOLD.LINE=MV.LINE       ; * JMK05
                           NATT1=DCOUNT(AFS.ACC.ARRAY,@AM)   ; * JMK05
                           FOR ATT1=1 TO NATT1     ; * JMK05
                              ACC.LINE=AFS.MV.LINE           ; * JMK05
                              MV.LINE=AFS.ACC.ARRAY<ATT1>    ; * JMK05
                              FOR VAL1=12 TO 16    ; * JMK05
                                 ACC.LINE<1,VAL1>=''         ; * JMK05
                              NEXT VAL1  ; * JMK05
                              FOR VAL1=83 TO 88    ; * JMK05
                                 ACC.LINE<1,VAL1>=''         ; * JMK05
                              NEXT VAL1  ; * JMK05
                              ACC.LINE<1,19>=MV.LINE<1,34>   ; * JMK05
                              TCODE.REC=''         ; * JMK05
                              GOSUB GET.TCODE      ; * JMK05
                              ACC.LINE<1,20>=TRIM(TCODE.REC<1>'L#3')   ; * JMK05
                              IF MV.LINE<1,36>='VOID' THEN   ; * JMK05
                                 VCODE.REC=''      ; * JMK05
                                 GOSUB GET.VCODE   ; * JMK05
                                 IF VCODE.REC#'' THEN        ; * JMK05
                                    ACC.LINE<1,21>=TRIM(VCODE.REC<1>'L#24')      ; * JMK05
                                 END     ; * JMK05
                              END ELSE   ; * JMK05
                                 SCODE.REC=''      ; * JMK05
                                 GOSUB GET.SCODE   ; * JMK05
                                 ACC.LINE<1,21>=TRIM(SCODE.REC<5>'L#24')         ; * JMK05
                                 IF SCODE.REC<2>+0#0 THEN    ; * JMK05
                                    AFS.FRT.LINE<1,SCODE.REC<2>>='Y'   ; * JMK06
                                 END     ; * JMK05
                                 IF MV.LINE<1,45>='LPS' THEN           ; * JMK21
                                    AFS.FRT.LINE<1,42>='L'   ; * JMK21
                                    AFS.FRT.LINE<1,67>=+MV.LINE<1,53>  ; * JMK21
                                 END     ; * JMK21
                                 IF HIST.REC<1>='HIST' THEN  ; * JMK06
                                    AFS.REC<AFS.FRT.ATT>=CHANGE(AFS.FRT.LINE,@VM,TB)       ; * JMK06
                                 END ELSE          ; * JMK06
                                    IN=AFS.FRT.LINE          ; * JMK06
                                    OUT=''         ; * JMK06
                                    CALL CONVERT.STRING(IN,OUT,TYPE)   ; * JMK06
                                    AFS.REC<AFS.FRT.ATT>=OUT           ; * JMK06
                                 END
                              END        ; * JMK05
                              ACC.LINE<1,37>=MV.LINE<1,53>   ; * JMK05
                              ACC.LINE<1,38>=MV.LINE<1,52>   ; * JMK05
                              ACC.LINE<1,63>=MV.LINE<1,63>   ; * JMK32
                              ACC.LINE<1,88>='ACC'           ; * JMK05
                              IF MV.LINE<1,20>='RTN' THEN    ; * JMK05
                                 ACC.RTN=1         ; * JMK05
                              END ELSE   ; * JMK05
                                 ACC.RTN=0         ; * JMK05
                              END        ; * JMK05
                              TRAN.DT=MV.LINE<1,12>[6,2]:MV.LINE<1,12>[9,2]:MV.LINE<1,12>[1,4]
                              TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,21>
                              IF TRIM(MV.LINE<1,35>)='ADJ' AND TRIM(MV.LINE<1,36>)='OCG' THEN
                                 TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,14>
                              END
                              IF HUN.FLG THEN
                                 TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,14>
                              END
                              LOCATE TRK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRKPOS ELSE    ; * JMK05
                                 INS TRK.ID BEFORE TRK.ARRAY<1,TRKPOS>           ; * JMK05
                                 INS 0 BEFORE TRK.ARRAY<2,TRKPOS>      ; * JMK05
                                 INS 0 BEFORE TRK.ARRAY<3,TRKPOS>      ; * JMK05
                                 INS '' BEFORE TRK.ARRAY<4,TRKPOS>
                                 INS '' BEFORE TRK.ARRAY<5,TRKPOS>
                              END        ; * JMK05
                              TRK.ARRAY<3,TRKPOS>+=ICONV(ACC.LINE<1,37>,'MD2')   ; * JMK05
                              LOCATE ACC.LINE<1,3>[5,6] IN SHP.ARRAY<1> BY 'AL' SETTING SHPPOS ELSE  ; * JMK05
                                 INS ACC.LINE<1,3>[5,6] BEFORE SHP.ARRAY<1,SHPPOS>         ; * JMK05
                                 INS 0 BEFORE SHP.ARRAY<2,SHPPOS>      ; * JMK05
                                 INS 0 BEFORE SHP.ARRAY<3,SHPPOS>      ; * JMK05
                              END        ; * JMK05
                              SHP.ARRAY<3,SHPPOS>+=ICONV(ACC.LINE<1,37>,'MD2')   ; * JMK05
*
* GET EXPENSE CODE FOE LINE ITEMS
*
                              IF EXPENSE.LINE THEN           ; * JMK09
                                 EBILL=ACC.LINE
                                 GOSUB CALL.GET.EXPENSE
                                 IF EXPENSE.CODE#'' THEN
                                    ACC.LINE<1,89>=EXPENSE.CODE
                                 END
                              END
                              IF HIST.REC<1>='HIST' THEN     ; * JMK05
                                 ACC.LINE=CHANGE(ACC.LINE,@VM,TB)      ; * JMK05
                              END ELSE   ; * JMK05
                                 IN=ACC.LINE       ; * JMK05
                                 OUT=''  ; * JMK05
                                 CALL CONVERT.STRING(IN,OUT,TYPE)      ; * JMK05
                                 ACC.LINE=OUT      ; * JMK05
                              END        ; * JMK05
                              AFS.REC<-1>=ACC.LINE           ; * JMK05
                           NEXT ATT1     ; * JMK05
                           AFS.ACC.ARRAY=''        ; * JMK05
                           MV.LINE=HOLD.LINE       ; * JMK05
                        END              ; * JMK05
                        AFS.LINE=''
                        AFS.MV.LINE=''   ; * JMK06
                     END
                     IF HUN.FLG THEN
                        HUN.NO=MV.LINE<1,14>
                        IF HUN.VALID THEN
                           LOCATE (SHIPPER:'*':HUN.NO) IN HUN.ARRAY<1> BY 'AL' SETTING HPOS THEN
                              GOSUB LOAD.HUN.LINE
                              IF HUN.LINE#'' THEN
*
* GET EXPENSE CODE FOE LINE ITEMS
*
                                 IF EXPENSE.LINE THEN        ; * JMK09
                                    EBILL=HUN.LINE
                                    GOSUB CALL.GET.EXPENSE
                                    IF EXPENSE.CODE#'' THEN
                                       HUN.LINE<1,89>=EXPENSE.CODE
                                    END
                                 END
                                 IF HIST.REC<1>='HIST' THEN
                                    HUN.LINE=CHANGE(HUN.LINE,@VM,TB)
                                 END ELSE
                                    IN=HUN.LINE
                                    OUT=''
                                    CALL CONVERT.STRING(IN,OUT,TYPE)
                                    HUN.LINE=OUT
                                 END
                                 AFS.REC<-1>=HUN.LINE
                              END
                              FOR HATT=1 TO 55
                                 DEL HUN.ARRAY<HATT,HPOS>
                              NEXT HATT
                           END
                        END
                     END
                     IF SHIPPER#LAST.SHIPPER THEN
                        LAST.SHIPPER=SHIPPER
                        LAST.DIVISION.ID=DIVISION.ID
                     END
                     IF TRACK.NO#LAST.TRACK.NO THEN
                        LAST.TRACK.NO=TRACK.NO
                     END
                     IF RTN#LAST.RTN THEN
                        LAST.RTN=RTN
                     END
                     AFS.LINE=''
                     AFS.LINE<1, 1>=TRIM(MV.LINE<1, 1>'L#1')
                     AFS.LINE<1, 2>=TRIM(MV.LINE<1, 2>'L#10')
                     AFS.LINE<1, 3>=TRIM(MV.LINE<1, 3>'L#10')
                     AFS.LINE<1, 4>=TRIM(MV.LINE<1, 6>'R#15')
                     AFS.LINE<1, 5>=MV.LINE<1, 5>[6,2]:MV.LINE<1, 5>[9,2]:MV.LINE<1, 5>[1,4]
                     AFS.LINE<1, 6>=TRIM(MV.LINE<1,11>'L#11')
                     AFS.LINE<1, 7>=TRIM(MV.LINE<1,21>'L#26')
                     AFS.LINE<1, 8>=TRIM(MV.LINE<1,13>'L#9')
                     ********************
                     MV.LINE<1,22> = CHANGE(MV.LINE<1,22>,'P.O','')
                     MV.LINE<1,22> = CHANGE(MV.LINE<1,22>,'PO-','')
                     MV.LINE<1,22>= CHANGE(MV.LINE<1,22>,'PO','')
                     MV.LINE<1,22>= CHANGE(MV.LINE<1,22>,'#','')

                     MV.LINE<1,16> = CHANGE(MV.LINE<1,16>,'P.O','')
                     MV.LINE<1,16> = CHANGE(MV.LINE<1,16>,'PO-','')
                     MV.LINE<1,16>= CHANGE(MV.LINE<1,16>,'PO','')
                     MV.LINE<1,16>= CHANGE(MV.LINE<1,16>,'#','')

                     IF MV.LINE<1,16> = "" THEN
                        AFS.LINE<1,9>=TRIM(MV.LINE<1,22>'L#23')
                        IF MV.LINE<1,10> = "" THEN
                           AFS.LINE<1,10>=TRIM(MV.LINE<1,23>'L#23')
                        END
                     END ELSE
                        AFS.LINE<1,9>=TRIM(MV.LINE<1,16>'L#23')
                     END
                     MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'PO-','')
                     MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'PO','')
                     MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'P.O','')
                     MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'#','')
                     AFS.LINE<1,10>=TRIM(MV.LINE<1,17>'L#23')
                     IF TRIM(AFS.LINE<1,10>) NE 10 THEN
                        IF (LEN(MV.LINE<1,17>) LT 10 AND LEN(TRIM(MV.LINE<1,22>))) EQ 10 THEN
                           AFS.LINE<1,10>=TRIM(MV.LINE<1,22>'L#23')
                        END
                     END
                     IF MV.LINE<1,38>='01' THEN
                        AFS.LINE<1,11>=MV.LINE<1,39>
                     END
                     IF MV.LINE<1,41>='01' THEN
                        AFS.LINE<1,11>=MV.LINE<1,42>
                     END
                     AFS.LINE<1,12>=TRIM(MV.LINE<1,19>'L#8')
                     BEGIN CASE
                        CASE MV.LINE<1,31>='LTR'
                           AFS.LINE<1,13>='LTR'
                           AFS.LINE<1,14>=''
                        CASE 1
                           AFS.LINE<1,13>=TRIM(MV.LINE<1,29>'L#5')
                           AFS.LINE<1,14>=TRIM(MV.LINE<1,27>'L#5')
                     END CASE
                     AFS.LINE<1,15>=MV.LINE<1,28>  ; * MV.LINE<1,30>
                     BEGIN CASE
                        CASE MV.LINE<1,32>='2'
                           AFS.LINE<1,16>='Y'
                        CASE MV.LINE<1,32>='5'
                           AFS.LINE<1,17>='Y'
                        CASE MV.LINE<1,32>='7'
                           AFS.LINE<1,16>='Y'
                        CASE MV.LINE<1,32>='9'
                           AFS.LINE<1,16>='Y'
                        CASE MV.LINE<1,32>='10'
                           AFS.LINE<1,16>='Y'
                        CASE MV.LINE<1,32>='11'
                           AFS.LINE<1,16>='Y'
                        CASE MV.LINE<1,32>='13'
                           AFS.LINE<1,18>='Y'
                        CASE MV.LINE<1,32>='21'
                           AFS.LINE<1,17>='Y'
                           AFS.LINE<1,18>='Y'
                        CASE 1
                           AFS.LINE<1,16>=''
                           AFS.LINE<1,17>=''
                           AFS.LINE<1,18>=''
                     END CASE
                     AFS.LINE<1,19>=MV.LINE<1,34>
                     TCODE.REC=''        ; * JMK05
                     GOSUB GET.TCODE
                     AFS.LINE<1,20>=TRIM(TCODE.REC<1>'L#3')
                     IF MV.LINE<1,36>='VOID' THEN
                        VCODE.REC=''     ; * JMK05
                        GOSUB GET.VCODE
                        IF VCODE.REC#'' THEN
                           AFS.LINE<1,21>=TRIM(VCODE.REC<1>'L#24')
                        END
                     END ELSE
                        SCODE.REC=''     ; * JMK05
                        GOSUB GET.SCODE
                        AFS.LINE<1,21>=TRIM(SCODE.REC<1>'L#24')
                        IF SCODE.REC<3>#'' THEN
                           AFS.LINE<1,20>=TRIM(FIELD(SCODE.REC<3>,':',2)'L#24')
                        END
                     END
                     BCODE.REC=''        ; * JMK05
                     GOSUB GET.BCODE
                     AFS.LINE<1,22>=BCODE.REC<1>
                     IF TCODE.REC<2>#'' THEN
                        AFS.LINE<1,22>=TCODE.REC<2>
                     END
                     IF SCODE.ID="SCODE*ACC*SED*Export Declaration Fee" THEN
                        AFS.LINE<1,22>=''
                     END
                     AFS.LINE<1,23>=MV.LINE<1,12>[6,2]:MV.LINE<1,12>[9,2]:MV.LINE<1,12>[1,4]
                     AFS.LINE<1,24>=TRIM(MV.LINE<1,67>)
                     AFS.LINE<1,25>=TRIM(MV.LINE<1,68>)
                     AFS.LINE<1,26>=TRIM(MV.LINE<1,69>:' ':MV.LINE<1,70>)        ; * TRIM(MV.LINE<1,69>:' ':MV.LINE<1,70>)
                     AFS.LINE<1,27>=TRIM(MV.LINE<1,71>)
                     AFS.LINE<1,28>=MV.LINE<1,72>
                     AFS.LINE<1,29>=TRIM(MV.LINE<1,73>)
                     AFS.LINE<1,30>=TRIM(MV.LINE<1,75>)
                     AFS.LINE<1,31>=TRIM(MV.LINE<1,76>)
                     AFS.LINE<1,32>=TRIM(MV.LINE<1,77>:' ':MV.LINE<1,78>)        ; * TRIM(MV.LINE<1,77>:' ':MV.LINE<1,78>)
                     AFS.LINE<1,33>=TRIM(MV.LINE<1,79>)
                     AFS.LINE<1,34>=MV.LINE<1,80>
                     ZIP.TEST=TRIM(MV.LINE<1,81>)
                     BEGIN CASE
                        CASE NUM(ZIP.TEST)
                           AFS.LINE<1,35>=TRIM(MV.LINE<1,81>'L#5')
                        CASE 1
                           AFS.LINE<1,35>=TRIM(MV.LINE<1,81>'L#6')
                     END CASE
                     AFS.LINE<1,36>=MV.LINE<1,82>
                     IF HUN.FLG THEN
                        AFS.LINE<1,37>=0
                        AFS.LINE<1,38>=0
                        FOR HUN.VAL=39 TO 57
                           AFS.LINE<1,HUN.VAL>=''
                        NEXT HUN.VAL
                        FOR HUN.VAL=64 TO 88
                           AFS.LINE<1,HUN.VAL>=''
                        NEXT HUN.VAL
                     END ELSE
                        AFS.LINE<1,37>=MV.LINE<1,53>
                        AFS.LINE<1,38>=MV.LINE<1,52>
                        IF SCODE.REC<2>+0#0 THEN
                           AFS.LINE<1,SCODE.REC<2>>='Y'
                           AFS.LINE<1,SCODE.REC<2>+25>+=MV.LINE<1,53>
                        END
                        IF MV.LINE<1,45>='LPS' THEN          ; * JMK21
                           AFS.LINE<1,42>='L'      ; * JMK21
                           AFS.LINE<1,67>+=MV.LINE<1,53>     ; * JMK21
                        END              ; * JMK21
                        IF MV.LINE<1,35>='SHP' AND MV.LINE<1,44>='FRT' THEN
                           AFS.LINE<1,83>=MV.LINE<1,52>+MV.LINE<1,53>
                           AFS.LINE<1,84>=MV.LINE<1,52>
                        END
                        IF MV.LINE<1,35>='SHP' AND MV.LINE<1,45>='RES' THEN
                           AFS.LINE<1,85>=MV.LINE<1,53>
                        END
                        IF MV.LINE<1,35>='SHP' AND MV.LINE<1,44>='FSC' THEN
                           AFS.LINE<1,86>=MV.LINE<1,53>
                           AFS.LINE<1,87>=MV.LINE<1,52>
                        END
                        AFS.LINE<1,88>=MV.LINE<31>           ; * JMK04
                     END
                     IF MV.LINE<1,176>='' AND MV.LINE<1,33>#'' THEN
                        MV.LINE<1,176>=MV.LINE<1,33>
                     END
                     IF HUN.FLG THEN
                        IF MV.LINE<1,177>='' AND MV.LINE<1,14>#'' THEN
                           MV.LINE<1,177>=MV.LINE<1,14>
                        END
                     END
                     IF MV.LINE<1,175>='UNAUTHORIZED CBS PACKAGE CHRG' THEN
                        AFS.LINE<1,58>=TRIM(MV.LINE<1,176>)
                        AFS.LINE<1,59>=TRIM(MV.LINE<1,177>)
                        AFS.LINE<1,60>=TRIM(MV.LINE<1,178>)
                        AFS.LINE<1,61>=TRIM(MV.LINE<1,179>)
                        AFS.LINE<1,62>=TRIM(MV.LINE<1,181>)
                     END ELSE
                        AFS.LINE<1,58>=TRIM(MV.LINE<1,175>)
                        AFS.LINE<1,59>=TRIM(MV.LINE<1,176>)
                        AFS.LINE<1,60>=TRIM(MV.LINE<1,177>)
                        AFS.LINE<1,61>=TRIM(MV.LINE<1,178>)
                        AFS.LINE<1,62>=TRIM(MV.LINE<1,179>)
                     END
                     IF AFS.LINE<1,20>='RTS' THEN
                        AFS.LINE<1,62>='UNDELIVERABLE'
                     END
                     IF AFS.LINE<1,22>='4' THEN
                        AFS.LINE<1,62>='CHARGEBACK'
                     END
                     AFS.LINE<1,63>=MV.LINE<1,63>[6,2]:MV.LINE<1,63>[9,2]:MV.LINE<1,63>[1,4]         ; * JMK32

                     AFS.LINE<1,95>=TRIM(MV.LINE<1,24>'L#23')          ; * JMK24 ; * JMK31
                     AFS.LINE<1,96>=TRIM(MV.LINE<1,25>'L#23')          ; * JMK24 ; * JMK31
                     AFS.LINE<1,97>=TRIM(MV.LINE<1,26>'L#23')          ; * JMK24 ; * JMK31
                     IF AIRGAS THEN      ; * JMK39
                        BEGIN CASE       ; * JMK49
                           CASE DIVISION.ID='FHQ03'          ; * JMK49
                              AG.DIV.ID='SFHQ03'   ; * JMK49
                           CASE DIVISION.ID='F1701'          ; * JMK49
                              AG.DIV.ID='SF1701'   ; * JMK49
                           CASE 1        ; * JMK49
                              AG.DIV.ID=DIVISION.ID          ; * JMK39
                        END CASE         ; * JMK49
                        IF AG.DIV.ID[1,1]='0' THEN           ; * JMK39
                           AG.DIV.ID=AG.DIV.ID[2,5]          ; * JMK39
                        END              ; * JMK39
                        IF AG.DIV.ID[1,1]='0' THEN           ; * JMK39
                           AG.DIV.ID=AG.DIV.ID[2,4]          ; * JMK39
                        END              ; * JMK39
                        IF AG.DIV.ID[1,1]='0' THEN           ; * JMK39
                           AG.DIV.ID=AG.DIV.ID[2,3]          ; * JMK39
                        END              ; * JMK39
                        AFS.LINE<1,98>=AG.DIV.ID   ; * JMK39 - Plant Number
                        IF AFS.LINE<1,37>>=0.00 THEN         ; * JMK39
                           AFS.LINE<1,99>='40'     ; * JMK39 - Posting Key
                        END              ; * JMK39
                        IF AFS.LINE<1,37><0.00 THEN          ; * JMK39
                           AFS.LINE<1,99>='50'     ; * JMK39 - Posting Key
                        END              ; * JMK39
                        REF1=AFS.LINE<1,9>         ; * JMK39
                        REF2=AFS.LINE<1,10>        ; * JMK39
                        REF3=AFS.LINE<1,95>        ; * JMK39
                        REF4=AFS.LINE<1,96>        ; * JMK39
                        REF5=AFS.LINE<1,97>        ; * JMK39
                        REF6=TRIM(MV.LINE<1,23>'L#23')
                        IF CLIENT.ID='05046' THEN  ; * JMK48
                           AOSS.DIV.ID=''          ; * JMK48
                           PST.POS=INDEX(REF1,'PST',1)       ; * JMK48
                           IF PST.POS=5 THEN       ; * JMK48
                              AOSS.DIV.ID=REF1[1,3]+0        ; * JMK48
                           END           ; * JMK48
                           IO.POS=INDEX(REF1,'I/O',1)        ; * JMK48
                           IF IO.POS=5 THEN        ; * JMK48
                              AOSS.DIV.ID=REF1[1,3]+0        ; * JMK48
                           END           ; * JMK48
                           CUST.POS=INDEX(REF1,'CUST',1)     ; * JMK48
                           IF CUST.POS=5 THEN      ; * JMK48
                              AOSS.DIV.ID=REF1[1,3]+0        ; * JMK48
                           END           ; * JMK48
                           PO.POS=INDEX(REF1,'PO',1)         ; * JMK48
                           IF PO.POS=5 THEN        ; * JMK48
                              AOSS.DIV.ID=REF1[1,3]+0        ; * JMK48
                           END           ; * JMK48
                           RPR.POS=INDEX(REF1,'RPR',1)       ; * JMK48
                           IF RPR.POS=5 THEN       ; * JMK48
                              AOSS.DIV.ID=REF1[1,3]+0        ; * JMK48
                           END           ; * JMK48
                           IF AOSS.DIV.ID#'' THEN  ; * JMK48
                              AFS.LINE<1,98>=AOSS.DIV.ID     ; * JMK48
                           END           ; * JMK48
                        END              ; * JMK48
                        PO.STATUS=''     ; * JMK39
                        BEGIN CASE
                           CASE REF1 MATCHES "10N"           ; * JMK39
                              PO.STATUS=' '        ; * JMK39
                              IF REF1[1,1]='5' OR REF1[1,1]='4' THEN   ; * JMK39
                                 PO.STATUS='Y'     ; * JMK39
                              END        ; * JMK39
                           CASE REF2 MATCHES "10N"           ; * JMK39
                              PO.STATUS=' '        ; * JMK39
                              IF REF2[1,1]='5' OR REF2[1,1]='4' THEN   ; * JMK39
                                 PO.STATUS='Y'     ; * JMK39
                              END        ; * JMK39
                           CASE REF3 MATCHES "10N"           ; * JMK39
                              PO.STATUS=' '        ; * JMK39
                              IF REF3[1,1]='5' OR REF3[1,1]='4' THEN   ; * JMK39
                                 PO.STATUS='Y'     ; * JMK39
                              END        ; * JMK39
                           CASE REF4 MATCHES "10N"           ; * JMK39
                              PO.STATUS=' '        ; * JMK39
                              IF REF4[1,1]='5' OR REF4[1,1]='4' THEN   ; * JMK39
                                 PO.STATUS='Y'     ; * JMK39
                              END        ; * JMK39
                           CASE REF5 MATCHES "10N"           ; * JMK39
                              PO.STATUS=' '        ; * JMK39
                              IF REF5[1,1]='5' OR REF5[1,1]='4' THEN   ; * JMK39
                                 PO.STATUS='Y'     ; * JMK39
                              END        ; * JMK39
                           CASE REF6 MATCHES "10N"           ; * JMK39
                              PO.STATUS=' '        ; * JMK39
                              IF REF6[1,1]='5' OR REF6[1,1]='4' THEN   ; * JMK39
                                 PO.STATUS='Y'     ; * JMK39
                              END        ; * JMK39
                        END CASE         ; * JMK39
                        AFS.LINE<1,100>=PO.STATUS  ; * JMK39
                        IF REF2#'' THEN  ; * DRF04
                           TEST.REF2=CHANGE(REF2,'PO','')    ; * DRF04
                           TEST.REF2=CHANGE(TEST.REF2,'#','')          ; * DRF04
                           TEST.REF2=TRIM(TEST.REF2)         ; * DRF04
                           READ AIRGAS.PO.REC FROM F.AIRGAS.PO,TEST.REF2 ELSE AIRGAS.PO.REC=''       ; * DRF04
                           IF AIRGAS.PO.REC<5>#'' THEN       ; * DRF04
                              AFS.LINE<1,101>=AIRGAS.PO.REC<5>         ; * DRF04
                           END           ; * DRF04
                        END              ; * DRF04
                     END                 ; * JMK39
                  END
SKIP.ATT:         *

               NEXT ATT
               IF @TTY # "phantom" THEN
                  CRT "END PHASE 2 ":OCONV(TIME(),"MTHS")
               END
               IF AFS.LINE#'' THEN
                  IF AFS.LINE<1,21>='(roll-up)' THEN
                     ERROR=EBILL.ID:'-Line ':ATT:', Service Description ':SCODE.ID:' did not roll up correctly.(':MV.LINE<1,21>:')'
                     ERR.ARRAY<1,-1>=ERROR
                  END
                  IF AFS.LINE<1,20>='RTS' THEN
                     AFS.RTN=1
                  END ELSE
                     AFS.RTN=0
                  END
                  TRAN.DT=AFS.LINE<1,23>
                  TRK.ID=AFS.LINE<1,3>[5,6]:'*':AFS.LINE<1,7>
                  IF HUN.FLG THEN
                     TRK.ID=AFS.LINE<1,3>[5,6]:'*':HUN.NO
                  END
                  LOCATE TRK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRKPOS ELSE
                     INS TRK.ID BEFORE TRK.ARRAY<1,TRKPOS>
                     INS 0 BEFORE TRK.ARRAY<2,TRKPOS>
                     INS 0 BEFORE TRK.ARRAY<3,TRKPOS>
                     INS '' BEFORE TRK.ARRAY<4,TRKPOS>
                     INS '' BEFORE TRK.ARRAY<5,TRKPOS>
                  END
                  TRK.ARRAY<3,TRKPOS>+=ICONV(AFS.LINE<1,37>,'MD2')
                  LOCATE AFS.LINE<1,3>[5,6] IN SHP.ARRAY<1> BY 'AL' SETTING SHPPOS ELSE
                     INS AFS.LINE<1,3>[5,6] BEFORE SHP.ARRAY<1,SHPPOS>
                     INS 0 BEFORE SHP.ARRAY<2,SHPPOS>
                     INS 0 BEFORE SHP.ARRAY<3,SHPPOS>
                  END
                  SHP.ARRAY<3,SHPPOS>+=ICONV(AFS.LINE<1,37>,'MD2')
*
* GET EXPENSE CODE FOE LINE ITEMS
*
                  IF EXPENSE.LINE THEN   ; * JMK09
                     EBILL=AFS.LINE
                     GOSUB CALL.GET.EXPENSE
                     IF EXPENSE.CODE#'' THEN
                        AFS.LINE<1,89>=EXPENSE.CODE
                     END
                  END
                  AFS.MV.LINE=AFS.LINE   ; * JMK05
                  IF HIST.REC<1>='HIST' THEN
                     AFS.LINE=CHANGE(AFS.LINE,@VM,TB)
                  END ELSE
                     IN=AFS.LINE
                     OUT=''
                     CALL CONVERT.STRING(IN,OUT,TYPE)
                     AFS.LINE=OUT
                  END
                  AFS.REC<-1>=AFS.LINE
                  IF HUN.ACC.ARRAY#'' AND HUN.FLG=0 THEN     ; * JMK05
                     AFS.FRT.ATT=DCOUNT(AFS.REC,@AM)         ; * JMK06
                     AFS.FRT.LINE=AFS.MV.LINE      ; * JMK06
                     HOLD.LINE=MV.LINE   ; * JMK05
                     NATT1=DCOUNT(HUN.ACC.ARRAY,@AM)         ; * JMK05
                     FOR ATT1=1 TO NATT1           ; * JMK05
                        ACC.LINE=AFS.MV.LINE       ; * JMK05
                        MV.LINE=HUN.ACC.ARRAY<ATT1>          ; * JMK05
                        FOR VAL1=12 TO 16          ; * JMK05
                           ACC.LINE<1,VAL1>=''     ; * JMK05
                        NEXT VAL1        ; * JMK05
                        FOR VAL1=83 TO 88          ; * JMK05
                           ACC.LINE<1,VAL1>=''     ; * JMK05
                        NEXT VAL1        ; * JMK05
                        ACC.LINE<1,19>=MV.LINE<1,34>         ; * JMK05
                        TCODE.REC=''     ; * JMK05
                        GOSUB GET.TCODE  ; * JMK05
                        ACC.LINE<1,20>=TRIM(TCODE.REC<1>'L#3')         ; * JMK05
                        IF MV.LINE<1,36>='VOID' THEN         ; * JMK05
                           VCODE.REC=''  ; * JMK05
                           GOSUB GET.VCODE         ; * JMK05
                           IF VCODE.REC#'' THEN    ; * JMK05
                              ACC.LINE<1,21>=TRIM(VCODE.REC<1>'L#24')  ; * JMK05
                           END           ; * JMK05
                        END ELSE         ; * JMK05
                           SCODE.REC=''  ; * JMK05
                           GOSUB GET.SCODE         ; * JMK05
                           ACC.LINE<1,21>=TRIM(SCODE.REC<5>'L#24')     ; * JMK05
                           IF SCODE.REC<2>+0#0 THEN          ; * JMK05

                              AFS.FRT.LINE<1,SCODE.REC<2>>='Y'         ; * JMK06
                              AFS.FRT.LINE<1,SCODE.REC<2>+25>+=MV.LINE<1,53>     ; * JMK06
                           END           ; * JMK05
                           IF MV.LINE<1,45>='LPS' THEN       ; * JMK21
                              AFS.FRT.LINE<1,42>='L'         ; * JMK21
                              AFS.FRT.LINE<1,67>+=MV.LINE<1,53>        ; * JMK21
                           END           ; * JMK21
                           IF HIST.REC<1>='HIST' THEN        ; * JMK06
                              AFS.REC<AFS.FRT.ATT>=CHANGE(AFS.FRT.LINE,@VM,TB)   ; * JMK06
                           END ELSE      ; * JMK06
                              IN=AFS.FRT.LINE      ; * JMK06
                              OUT=''     ; * JMK06
                              CALL CONVERT.STRING(IN,OUT,TYPE)         ; * JMK06
                              AFS.REC<AFS.FRT.ATT>=OUT       ; * JMK06
                           END
                        END              ; * JMK05
                        ACC.LINE<1,37>=0           ; * JMK05
                        ACC.LINE<1,38>=0           ; * JMK05
                        ACC.LINE<1,63>=MV.LINE<1,63>[6,2]:MV.LINE<1,63>[9,2]:MV.LINE<1,63>[1,4]      ; * JMK32
                        ACC.LINE<1,88>='ACC'       ; * JMK05
                        IF MV.LINE<1,35>='RTN' THEN          ; * JMK05
                           ACC.RTN=1     ; * JMK05
                        END ELSE         ; * JMK05
                           ACC.RTN=0     ; * JMK05
                        END              ; * JMK05
                        TRAN.DT=MV.LINE<1,12>[6,2]:MV.LINE<1,12>[9,2]:MV.LINE<1,12>[1,4]
                        TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,21>
                        IF TRIM(MV.LINE<1,35>)='ADJ' AND TRIM(MV.LINE<1,36>)='OCG' THEN
                           TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,14>
                        END
                        IF HUN.FLG THEN
                           TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,14>
                        END
                        LOCATE TRK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRKPOS ELSE          ; * JMK05
                           INS TRK.ID BEFORE TRK.ARRAY<1,TRKPOS>       ; * JMK05
                           INS 0 BEFORE TRK.ARRAY<2,TRKPOS>  ; * JMK05
                           INS 0 BEFORE TRK.ARRAY<3,TRKPOS>  ; * JMK05
                           INS '' BEFORE TRK.ARRAY<4,TRKPOS>
                           INS '' BEFORE TRK.ARRAY<5,TRKPOS>
                        END              ; * JMK05
                        TRK.ARRAY<3,TRKPOS>+=ICONV(ACC.LINE<1,37>,'MD2')         ; * JMK05
                        LOCATE ACC.LINE<1,3>[5,6] IN SHP.ARRAY<1> BY 'AL' SETTING SHPPOS ELSE        ; * JMK05
                           INS ACC.LINE<1,3>[5,6] BEFORE SHP.ARRAY<1,SHPPOS>     ; * JMK05
                           INS 0 BEFORE SHP.ARRAY<2,SHPPOS>  ; * JMK05
                           INS 0 BEFORE SHP.ARRAY<3,SHPPOS>  ; * JMK05
                        END              ; * JMK05
                        SHP.ARRAY<3,SHPPOS>+=ICONV(ACC.LINE<1,37>,'MD2')         ; * JMK05
*
* GET EXPENSE CODE FOE LINE ITEMS
*
                        IF EXPENSE.LINE THEN       ; * JMK09
                           EBILL=ACC.LINE
                           GOSUB CALL.GET.EXPENSE
                           IF EXPENSE.CODE#'' THEN
                              ACC.LINE<1,89>=EXPENSE.CODE
                           END
                        END
                        IF HIST.REC<1>='HIST' THEN           ; * JMK05
                           ACC.LINE=CHANGE(ACC.LINE,@VM,TB)  ; * JMK05
                        END ELSE         ; * JMK05
                           IN=ACC.LINE   ; * JMK05
                           OUT=''        ; * JMK05
                           CALL CONVERT.STRING(IN,OUT,TYPE)  ; * JMK05
                           ACC.LINE=OUT  ; * JMK05
                        END              ; * JMK05
                        AFS.REC<-1>=ACC.LINE       ; * JMK05
                     NEXT ATT1           ; * JMK05
                     HUN.ACC.ARRAY=''    ; * JMK05
                     MV.LINE=HOLD.LINE   ; * JMK05
                  END                    ; * JMK05
                  IF AFS.ACC.ARRAY#'' THEN         ; * JMK05
                     AFS.FRT.ATT=DCOUNT(AFS.REC,@AM)         ; * JMK06
                     AFS.FRT.LINE=AFS.MV.LINE      ; * JMK06
                     HOLD.LINE=MV.LINE   ; * JMK05
                     NATT1=DCOUNT(AFS.ACC.ARRAY,@AM)         ; * JMK05
                     FOR ATT1=1 TO NATT1           ; * JMK05
                        ACC.LINE=AFS.MV.LINE       ; * JMK05
                        MV.LINE=AFS.ACC.ARRAY<ATT1>          ; * JMK05
                        FOR VAL1=12 TO 16          ; * JMK05
                           ACC.LINE<1,VAL1>=''     ; * JMK05
                        NEXT VAL1        ; * JMK05
                        FOR VAL1=83 TO 88          ; * JMK05
                           ACC.LINE<1,VAL1>=''     ; * JMK05
                        NEXT VAL1        ; * JMK05
                        ACC.LINE<1,19>=MV.LINE<1,34>         ; * JMK05
                        TCODE.REC=''     ; * JMK05
                        GOSUB GET.TCODE  ; * JMK05
                        ACC.LINE<1,20>=TRIM(TCODE.REC<1>'L#3')         ; * JMK05
                        IF MV.LINE<1,36>='VOID' THEN         ; * JMK05
                           VCODE.REC=''  ; * JMK05
                           GOSUB GET.VCODE         ; * JMK05
                           IF VCODE.REC#'' THEN    ; * JMK05
                              ACC.LINE<1,21>=TRIM(VCODE.REC<1>'L#24')  ; * JMK05
                           END           ; * JMK05
                        END ELSE         ; * JMK05
                           SCODE.REC=''  ; * JMK05
                           GOSUB GET.SCODE         ; * JMK05
                           ACC.LINE<1,21>=TRIM(SCODE.REC<5>'L#24')     ; * JMK05
                           IF SCODE.REC<2>+0#0 THEN          ; * JMK05

                              AFS.FRT.LINE<1,SCODE.REC<2>>='Y'         ; * JMK06
                              AFS.FRT.LINE<1,SCODE.REC<2>+25>+=MV.LINE<1,53>     ; * JMK06
                           END           ; * JMK05
                           IF MV.LINE<1,45>='LPS' THEN       ; * JMK21
                              AFS.FRT.LINE<1,42>='L'         ; * JMK21
                              AFS.FRT.LINE<1,67>+=MV.LINE<1,53>        ; * JMK21
                           END           ; * JMK21
                           IF HIST.REC<1>='HIST' THEN        ; * JMK06
                              AFS.REC<AFS.FRT.ATT>=CHANGE(AFS.FRT.LINE,@VM,TB)   ; * JMK06
                           END ELSE      ; * JMK06
                              IN=AFS.FRT.LINE      ; * JMK06
                              OUT=''     ; * JMK06
                              CALL CONVERT.STRING(IN,OUT,TYPE)         ; * JMK06
                              AFS.REC<AFS.FRT.ATT>=OUT       ; * JMK06
                           END
                        END              ; * JMK05
                        ACC.LINE<1,37>=MV.LINE<1,53>         ; * JMK05
                        ACC.LINE<1,63>=MV.LINE<1,63>[6,2]:MV.LINE<1,63>[9,2]:MV.LINE<1,63>[1,4]      ; * JMK32
                        ACC.LINE<1,38>=MV.LINE<1,52>         ; * JMK05
                        ACC.LINE<1,88>='ACC'       ; * JMK05
                        ACC.LINE<1,95>=TRIM(MV.LINE<1,24>'L#23')       ; * JMK24 ; * JMK31
                        ACC.LINE<1,96>=TRIM(MV.LINE<1,25>'L#23')       ; * JMK24 ; * JMK31
                        ACC.LINE<1,97>=TRIM(MV.LINE<1,26>'L#23')       ; * JMK24 ; * JMK31
                        IF AIRGAS THEN   ; * JMK39
                           BEGIN CASE    ; * JMK49
                              CASE DIVISION.ID='FHQ03'       ; * JMK49
                                 AG.DIV.ID='SFHQ03'          ; * JMK49
                              CASE DIVISION.ID='F1701'       ; * JMK49
                                 AG.DIV.ID='SF1701'          ; * JMK49
                              CASE 1     ; * JMK49
                                 AG.DIV.ID=DIVISION.ID       ; * JMK39
                           END CASE      ; * JMK49
                           IF AG.DIV.ID[1,1]='0' THEN        ; * JMK39
                              AG.DIV.ID=AG.DIV.ID[2,5]       ; * JMK39
                           END           ; * JMK39
                           IF AG.DIV.ID[1,1]='0' THEN        ; * JMK39
                              AG.DIV.ID=AG.DIV.ID[2,4]       ; * JMK39
                           END           ; * JMK39
                           IF AG.DIV.ID[1,1]='0' THEN        ; * JMK39
                              AG.DIV.ID=AG.DIV.ID[2,3]       ; * JMK39
                           END           ; * JMK39
                           ACC.LINE<1,98>=AG.DIV.ID          ; * JMK39 - Plant Number
                           IF ACC.LINE<1,37>>0.00 THEN       ; * JMK39
                              ACC.LINE<1,99>='40'  ; * JMK39 - Posting Key
                           END           ; * JMK39
                           IF ACC.LINE<1,37><0.00 THEN       ; * JMK39
                              ACC.LINE<1,99>='50'  ; * JMK39 - Posting Key
                           END           ; * JMK39
                           REF1=ACC.LINE<1,9>      ; * JMK39
                           REF2=ACC.LINE<1,10>     ; * JMK39
                           REF3=ACC.LINE<1,95>     ; * JMK39
                           REF4=ACC.LINE<1,96>     ; * JMK39
                           REF5=ACC.LINE<1,97>     ; * JMK39
                           REF6=TRIM(MV.LINE<1,23>'L#23')
                           PO.STATUS=''  ; * JMK39
                           BEGIN CASE
                              CASE REF1 MATCHES "10N"        ; * JMK39
                                 PO.STATUS=' '     ; * JMK39
                                 IF REF1[1,1]='5' OR REF1[1,1]='4' THEN          ; * JMK39
                                    PO.STATUS='Y'  ; * JMK39
                                 END     ; * JMK39
                              CASE REF2 MATCHES "10N"        ; * JMK39
                                 PO.STATUS=' '     ; * JMK39
                                 IF REF2[1,1]='5' OR REF2[1,1]='4' THEN          ; * JMK39
                                    PO.STATUS='Y'  ; * JMK39
                                 END     ; * JMK39
                              CASE REF3 MATCHES "10N"        ; * JMK39
                                 PO.STATUS=' '     ; * JMK39
                                 IF REF3[1,1]='5' OR REF3[1,1]='4' THEN          ; * JMK39
                                    PO.STATUS='Y'  ; * JMK39
                                 END     ; * JMK39
                              CASE REF4 MATCHES "10N"        ; * JMK39
                                 PO.STATUS=' '     ; * JMK39
                                 IF REF4[1,1]='5' OR REF4[1,1]='4' THEN          ; * JMK39
                                    PO.STATUS='Y'  ; * JMK39
                                 END     ; * JMK39
                              CASE REF5 MATCHES "10N"        ; * JMK39
                                 PO.STATUS=' '     ; * JMK39
                                 IF REF5[1,1]='5' OR REF5[1,1]='4' THEN          ; * JMK39
                                    PO.STATUS='Y'  ; * JMK39
                                 END     ; * JMK39
                              CASE REF6 MATCHES "10N"        ; * JMK39
                                 PO.STATUS=' '     ; * JMK39
                                 IF REF6[1,1]='5' OR REF6[1,1]='4' THEN          ; * JMK39
                                    PO.STATUS='Y'  ; * JMK39
                                 END     ; * JMK39
                           END CASE      ; * JMK39
                           ACC.LINE<1,100>=PO.STATUS         ; * JMK39
                           IF REF2#'' THEN         ; * DRF04
                              TEST.REF2=CHANGE(REF2,'PO','')           ; * DRF04
                              TEST.REF2=CHANGE(TEST.REF2,'#','')       ; * DRF04
                              TEST.REF2=TRIM(TEST.REF2)      ; * DRF04
                              READ AIRGAS.PO.REC FROM F.AIRGAS.PO,TEST.REF2 ELSE AIRGAS.PO.REC=''    ; * DRF04
                              IF AIRGAS.PO.REC<5>#'' THEN    ; * DRF04
                                 ACC.LINE<1,101>=AIRGAS.PO.REC<5>      ; * DRF04
                              END        ; * DRF04
                           END           ; * DRF04
                        END              ; * JMK39
                        IF MV.LINE<1,35>='RTN' THEN          ; * JMK05
                           ACC.RTN=1     ; * JMK05
                        END ELSE         ; * JMK05
                           ACC.RTN=0     ; * JMK05
                        END              ; * JMK05
                        TRAN.DT=MV.LINE<1,12>[6,2]:MV.LINE<1,12>[9,2]:MV.LINE<1,12>[1,4]
                        TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,21>
                        IF TRIM(MV.LINE<1,35>)='ADJ' AND TRIM(MV.LINE<1,36>)='OCG' THEN
                           TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,14>
                        END
                        IF HUN.FLG THEN
                           TRK.ID=MV.LINE<1,3>[5,6]:'*':MV.LINE<1,14>
                        END
                        LOCATE TRK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRKPOS ELSE          ; * JMK05
                           INS TRK.ID BEFORE TRK.ARRAY<1,TRKPOS>       ; * JMK05
                           INS 0 BEFORE TRK.ARRAY<2,TRKPOS>  ; * JMK05
                           INS 0 BEFORE TRK.ARRAY<3,TRKPOS>  ; * JMK05
                           INS '' BEFORE TRK.ARRAY<4,TRKPOS>
                           INS '' BEFORE TRK.ARRAY<5,TRKPOS>
                        END              ; * JMK05
                        TRK.ARRAY<3,TRKPOS>+=ICONV(ACC.LINE<1,37>,'MD2')         ; * JMK05
                        LOCATE ACC.LINE<1,3>[5,6] IN SHP.ARRAY<1> BY 'AL' SETTING SHPPOS ELSE        ; * JMK05
                           INS ACC.LINE<1,3>[5,6] BEFORE SHP.ARRAY<1,SHPPOS>     ; * JMK05
                           INS 0 BEFORE SHP.ARRAY<2,SHPPOS>  ; * JMK05
                           INS 0 BEFORE SHP.ARRAY<3,SHPPOS>  ; * JMK05
                        END              ; * JMK05
                        SHP.ARRAY<3,SHPPOS>+=ICONV(ACC.LINE<1,37>,'MD2')         ; * JMK05
*
* GET EXPENSE CODE FOE LINE ITEMS
*
*
                        IF EXPENSE.LINE THEN       ; * JMK09
                           EBILL=ACC.LINE
                           GOSUB CALL.GET.EXPENSE
                           IF EXPENSE.CODE#'' THEN
                              ACC.LINE<1,89>=EXPENSE.CODE
                           END
                        END
                        IF HIST.REC<1>='HIST' THEN           ; * JMK05
                           ACC.LINE=CHANGE(ACC.LINE,@VM,TB)  ; * JMK05
                        END ELSE         ; * JMK05
                           IN=ACC.LINE   ; * JMK05
                           OUT=''        ; * JMK05
                           CALL CONVERT.STRING(IN,OUT,TYPE)  ; * JMK05
                           ACC.LINE=OUT  ; * JMK05
                        END              ; * JMK05
                        AFS.REC<-1>=ACC.LINE       ; * JMK05
                     NEXT ATT1           ; * JMK05
                     AFS.ACC.ARRAY=''    ; * JMK05
                     MV.LINE=HOLD.LINE   ; * JMK05
                  END                    ; * JMK05
                  AFS.LINE=''
                  AFS.MV.LINE=''         ; * JMK06
               END

               UPS.TRK.AMT=SUM(TRK.ARRAY<2>)
               AFS.TRK.AMT=SUM(TRK.ARRAY<3>)
****GO GB1
               IF AFS.TRK.AMT#UPS.TRK.AMT THEN
                  ERROR=AFS.ID:' did not balance to the UPS E-Bill file ':EBILL.ID:' with details below.'
                  ERR.ARRAY<1,-1>=ERROR
                  ERR.ARRAY<1,-1>=' '
                  TRK.NVAL=DCOUNT(TRK.ARRAY<1>,@VM)
                  ERR.ARRAY<1,-1>='Shipper # ''L#10 ':'Tracking # ''L#20 ':'UPS Amount''L#12 ':'AFS Amount''L#12'
                  FOR TRK.VAL=1 TO TRK.NVAL
                     TRK.ID=TRK.ARRAY<1,TRK.VAL>
                     UPS.AMT=TRK.ARRAY<2,TRK.VAL>
                     AFS.AMT=TRK.ARRAY<3,TRK.VAL>
                     IF UPS.AMT#AFS.AMT THEN
                        ERR.ARRAY<1,-1>=FIELD(TRK.ID,'*',1)'L#10 ':FIELD(TRK.ID,'*',2)'L#20 ':UPS.AMT'R26,#12 ':AFS.AMT'R26,#12'
                     END
                  NEXT TRK.VAL
                  IF TESTING THEN
                     EXP.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'-TRK.XLS'
                     NEW.TRK.ARRAY=''
                     NVAL=DCOUNT(TRK.ARRAY<1>,@VM)
                     FOR VAL=1 TO NVAL
                        NEW.TRK.ARRAY<VAL,1>=TRK.ARRAY<1,VAL>
                        NEW.TRK.ARRAY<VAL,2>=TRK.ARRAY<2,VAL>
                        NEW.TRK.ARRAY<VAL,3>=TRK.ARRAY<3,VAL>
                     NEXT VAL
                     EXP.REC=CHANGE(NEW.TRK.ARRAY,@VM,TB)
                     WRITE EXP.REC ON F.EBILL.HOLD,EXP.ID
                     EXP.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'-SHP.XLS'
                     NEW.SHP.ARRAY=''
                     NVAL=DCOUNT(SHP.ARRAY<1>,@VM)
                     FOR VAL=1 TO NVAL
                        NEW.SHP.ARRAY<VAL,1>=SHP.ARRAY<1,VAL>
                        NEW.SHP.ARRAY<VAL,2>=SHP.ARRAY<2,VAL>
                        NEW.SHP.ARRAY<VAL,3>=SHP.ARRAY<3,VAL>
                     NEXT VAL
                     EXP.REC=CHANGE(NEW.SHP.ARRAY,@VM,TB)
                     WRITE EXP.REC ON F.EBILL.HOLD,EXP.ID
                  END
               END
****GB1:
               IF ERR.ARRAY#'' THEN
                  EMAIL.OUT=''
                  IF TESTING THEN
                  END ELSE
                     EMAIL.OUT<1,-1>='ups.ebills@afs.net'
                  END
                  EMAIL.OUT<4>='EbillConversion@afs.net'
                  EMAIL.OUT<5>=EBILL.ID:' UPS->AFS E-Bill Conversion Problems'
                  EMAIL.OUT<6>=EBILL.ID:' experienced conversion problems from the UPS format to the AFS format.'
                  EMAIL.OUT<6>:='  These problems are listed below.  Please review, update the conversion parameters'
                  EMAIL.OUT<6>:=' and advise when these can be re-converted.'
                  EMAIL.OUT<6,-1>=' '
                  EMAIL.OUT<6,-1>='Incentive Amt (Excel AZ)=':TOT.INCENTIVE.AMT'R26#12'
                  EMAIL.OUT<6,-1>='Net Amt       (Excel BA)=':TOT.NET.AMT'R26#12'
                  EMAIL.OUT<6,-1>=' '
                  EMAIL.OUT<6,-1>=ERR.ARRAY
                  IF TESTING THEN
                     EMAIL.OUT<6,-1>=' '
                     EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"
                  END
                  CALL SENDMAIL(EMAIL.OUT,RESULTS)
                  AFS.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'.csv'

                  CLOSESEQ INSEQ.FILE
                  OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                     CRT "CANNOT OPEN BILLDATA.EBILL ":INSEQ.FILE
***               DEBUG
                     GO SKIP.EBILL
                  END
                  OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.ID TO OUTSEQ.FILE ELSE
                     CREATE OUTSEQ.FILE ELSE
                        GO SKIP.EBILL
                     END
                  END
                  INSEQ.DONE1 = 0
                  LOOP
                  UNTIL INSEQ.DONE1 DO
                     READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
                     WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL
                  REPEAT
                  CLOSESEQ OUTSEQ.FILE
                  CLOSESEQ INSEQ.FILE
                  DELETE F.EBILL,EBILL.ID
                  ****
                  REC.CNT = DCOUNT(AFS.REC,@AM)
                  OPENSEQ 'BILLDATA.EBILL.HOLD', AFS.ID TO OUTSEQ.FILE ELSE
                     CREATE OUTSEQ.FILE ELSE
                        CRT "CANNOT OPEN BILLDATA.EBILL.HOLD"
                        GO SKIP.EBILL
                     END
                  END
                  FOR JJ = 1 TO REC.CNT
                     WRITESEQ AFS.REC<JJ> ON OUTSEQ.FILE ELSE NULL
                  NEXT JJ

                  UNCONVERT.LIST<1,-1>=EBILL.ID:' was un-successfully converted and resides in the E-BILL HOLD folder pending review.'
                  IF TESTING THEN
                     ERR.TXT=ERR.ARRAY
                     ERR.TXT=CHANGE(ERR.TXT,@VM,@AM)
                     WRITE ERR.TXT ON F.EBILL.HOLD,EBILL.ID:'_ERROR.TXT'
                  END
               END ELSE                  ; *******************************************************************************************
                  IF SHIP.LIST.0261CP#'' AND SHIP.LIST.0679FY # '' THEN UPD.DATA=0
****            IF SHIP.LIST.0679FY #'' THEN UPD.DATA=0          ; * GRB01
                  BEGIN CASE
                     CASE HIST.REC<1>='HIST'
                        AFS.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'.XLS'
                        ******                   write to hist file
                        REC.CNT = DCOUNT(AFS.REC,@AM)
                        OPENSEQ 'BILLDATA.EBILL.HIST', AFS.ID TO OUTSEQ.FILE ELSE
                           CREATE OUTSEQ.FILE ELSE
                              CRT "CANNOT OPEN BILLDATA.EBILL.HIST"
                              GO SKIP.EBILL
                           END
                        END
                        FOR JJ = 1 TO REC.CNT
                           WRITESEQ AFS.REC<JJ> ON OUTSEQ.FILE ELSE NULL
                        NEXT JJ
                        CLOSESEQ OUTSEQ.FILE
                        CONVERT.LIST<-1>=EBILL.ID:' was converted to the AFS file ':AFS.ID:' and resides in the E-BILL HIST folder'
                     CASE UPS.IMP=1
                        CONVERT.LIST<1,-1>=EBILL.ID:' was an import file and resides in the E-BILL DATA folder'
                     CASE 1
                        AFS.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'.csv'
                        ***     write to ebill file
                        REC.CNT = DCOUNT(AFS.REC,@AM)
                        OPENSEQ 'BILLDATA.EBILL', AFS.ID TO OUTSEQ.FILE ELSE
                           CREATE OUTSEQ.FILE ELSE
                              CRT "CANNOT OPEN BILLDATA.EBILL ":OUTSEQ.FILE
***                        DEBUG
                              GO SKIP.EBILL
                           END
                        END
                        FOR JJ = 1 TO REC.CNT
                           WRITESEQ AFS.REC<JJ> ON OUTSEQ.FILE ELSE NULL
                        NEXT JJ
                        CLOSESEQ OUTSEQ.FILE
                        IF UPD.DATA THEN
                           CONVERT.LIST<1,-1>=EBILL.ID:' was successfully converted to the AFS file ':AFS.ID:' and resides in the E-BILL folder'
                        END
                  END CASE
                  IF UPD.DATA THEN
                     ***** CRT
                     ***** CRT OCONV(TIME(),"MTHS"):"  ":EBILL.ID
                     CLOSESEQ INSEQ.FILE
                     * write to ebill data file
                     OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                        CRT "CANNOT OPEN BILLDATA.EBILL ":INSEQ.FILE
***                  DEBUG
                        GO SKIP.EBILL
                     END
                     OPENSEQ 'BILLDATA.EBILL.DATA', EBILL.ID TO OUTSEQ.FILE ELSE
                        CREATE OUTSEQ.FILE ELSE
                           GO SKIP.EBILL
                        END
                     END
                     INSEQ.DONE = 0
                     LOOP
                     UNTIL INSEQ.DONE DO
                        READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE = 1
                        WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL
                     REPEAT
                     CLOSESEQ OUTSEQ.FILE
                  END
                  CLOSESEQ INSEQ.FILE
                  CLOSESEQ OUTSEQ.FILE
                  DELETE F.EBILL,EBILL.ID

                  IF CUST.ID='P00000932HZ' OR CUST.ID='I00000932HZ' THEN
                     WRITE AFS.REC ON F.FTP.01349.RPTS,AFS.ID
                  END
                  GOSUB UNBLOCK.CLIENTS
                  GOSUB EMAIL.PDFS       ; * JMK01
               END
            END
SKIP.EBILL:*
            ***   END
            ***      REPEAT                 ; * READSEQ
            CLOSESEQ INSEQ.FILE
*****             CRT "**** END FILE ":OCONV(TIME(),"MTHS")
         REPEAT                          ; * MAIN FILE LOOP


         *************************************************************************
         IF FLAG.0261CP#'' THEN          ; * airgas
            EBILL.ID=FLAG.0261CP
            EBILL.DT=FIELD(EBILL.ID,'_',3)
            EBILL.DT=FIELD(EBILL.DT,'.',1)
            SPLIT.DT='20':EBILL.DT[5,2]:EBILL.DT[1,4]
            SHIP.DT=EBILL.DT[1,2]:'_':EBILL.DT[3,2]:'_20':EBILL.DT[5,2]
            FLAG.0261CP=''
            SHIP.LIST.0261CP=''
            OLD.SHIPPER=''
            SHIP.REC=''
            CLOSESEQ INSEQ.FILE
              OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE       ; * GRB06
         **   OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.ID TO INSEQ.FILE ELSE
               CRT "*******************************CANNOT OPEN EBILL HOLD ":EBILL.ID
               GO SKIP.EBILL
            END
            INSEQ.DONE = 0
            LOOP
               READSEQ EBILL.LINE FROM INSEQ.FILE ELSE INSEQ.DONE = 1
            UNTIL INSEQ.DONE DO
               IF EBILL.LINE = '' THEN CONTINUE
               SHIPPER=FIELD(EBILL.LINE,',',3)
               IF SHIPPER # OLD.SHIPPER THEN
                  IF OLD.SHIPPER # '' THEN
                     CLOSESEQ OUTSEQ.FILE
                  END
                  SHIP.ID='A':SHIPPER:'-':SPLIT.DT:'.csv'
                  OPENSEQ 'BILLDATA.EBILL', SHIP.ID TO OUTSEQ.FILE ELSE
                     CREATE OUTSEQ.FILE ELSE
                     END
                  END
                  OLD.SHIPPER=SHIPPER
                  SHIP.ID='A':SHIPPER:'-':SPLIT.DT:'.csv'
                  CNV.SHIP.ID=SHIPPER:'_':SHIP.DT:'.csv'
                  NXT.VAL=DCOUNT(SHIP.LIST.0261CP<1>,@VM)+1
                  SHIP.LIST.0261CP<1,NXT.VAL>=SHIP.ID
                  SHIP.LIST.0261CP<2,NXT.VAL>=CNV.SHIP.ID
               END
               WRITESEQ EBILL.LINE ON OUTSEQ.FILE ELSE NULL
            REPEAT
            CLOSESEQ OUTSEQ.FILE
            CLOSESEQ INSEQ.FILE
            GO 55
         END
         IF SHIP.LIST.0261CP#'' THEN
            EBILL.DT=SHIP.LIST.0261CP<2,1>[12,2]:SHIP.LIST.0261CP<2,1>[15,2]:SHIP.LIST.0261CP<2,1>[20,2]
            SHIP.DT=SHIP.LIST.0261CP<2,1>[12,10]
            NEW.ID='00000261CP_':SHIP.DT:'.csv'    ; * openseq
            CLOSESEQ INSEQ.FILE
            OPENSEQ 'BILLDATA.EBILL', NEW.ID TO OUTSEQ.FILE ELSE
               CREATE OUTSEQ.FILE ELSE
               END
            END
            NEW.REC=''
            NVAL=DCOUNT(SHIP.LIST.0261CP<2>,@VM)
            FOR VAL=1 TO NVAL
               SHIP.ID=SHIP.LIST.0261CP<2,VAL>
               OPENSEQ 'BILLDATA.EBILL', SHIP.ID TO INSEQ.FILE ELSE
                  CRT "****************************CANNOT OPEN EBILL 0261CP ":SHIP.ID
                  GO 111
                  **    GO SKIP.EBILL
               END
               EOJSI = 0
               LOOP
                  READSEQ SHIP.REC FROM INSEQ.FILE ELSE EOJSI = 1
               UNTIL EOJSI DO
                  WRITESEQ SHIP.REC ON OUTSEQ.FILE ELSE NULL
               REPEAT
               CLOSESEQ INSEQ.FILE
               DELETE F.EBILL,SHIP.ID
111:        NEXT VAL
            CLOSESEQ OUTSEQ.FILE
            CLOSESEQ INSEQ.FILE
            CONVERT.LIST<1,-1>='Invoice_00000261CP_':EBILL.DT:'.csv was successfully converted to the AFS file ':NEW.ID:' and resides in the E-BILL folder'
            SHIP.LIST.0261CP = ''
         END
         *********************************************************************************
         IF FLAG.0679FY#'' THEN          ; * cavenders
            ***** CRT "start part 3 ":OCONV(TIME(),"MTHS")
            EBILL.ID=FLAG.0679FY
            EBILL.DT=FIELD(EBILL.ID,'_',3)
            EBILL.DT=FIELD(EBILL.DT,'.',1)
            SPLIT.DT='20':EBILL.DT[5,2]:EBILL.DT[1,4]
            SHIP.DT=EBILL.DT[1,2]:'_':EBILL.DT[3,2]:'_20':EBILL.DT[5,2]
            FLAG.0679FY=''
            SHIP.LIST.0679FY=''
            OLD.SHIPPER=''
            SHIP.REC=''
            CLOSESEQ INSEQ.FILE
            OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE         ; * GRB06
******            OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.ID TO INSEQ.FILE ELSE
               CRT " ******************** CANNOT OPEN EBILL HOLD ":EBILL.ID
               GO SKIP.EBILL
            END
            INSEQ.DONE = 0
            LOOP
               READSEQ EBILL.LINE FROM INSEQ.FILE ELSE INSEQ.DONE = 1
            UNTIL INSEQ.DONE DO
               IF EBILL.LINE = '' THEN CONTINUE
               SHIPPER=FIELD(EBILL.LINE,',',3)
               IF SHIPPER # OLD.SHIPPER THEN
                  IF OLD.SHIPPER # '' THEN
                     CLOSESEQ OUTSEQ.FILE
                  END
                  SHIP.ID='A':SHIPPER:'-':SPLIT.DT:'.csv'
                  OPENSEQ 'BILLDATA.EBILL', SHIP.ID TO OUTSEQ.FILE ELSE
                     CREATE OUTSEQ.FILE ELSE
                        GO SKIP.EBILL
                     END
                  END
                  OLD.SHIPPER=SHIPPER
                  SHIP.ID='A':SHIPPER:'-':SPLIT.DT:'.csv'
                  CNV.SHIP.ID=SHIPPER:'_':SHIP.DT:'.csv'
                  NXT.VAL=DCOUNT(SHIP.LIST.0679FY<1>,@VM)+1
                  SHIP.LIST.0679FY<1,NXT.VAL>=SHIP.ID
                  SHIP.LIST.0679FY<2,NXT.VAL>=CNV.SHIP.ID
               END
               WRITESEQ EBILL.LINE ON OUTSEQ.FILE ELSE NULL
            REPEAT
            CLOSESEQ OUTSEQ.FILE
            CLOSESEQ INSEQ.FILE
            ***** CRT "END part 3 ":OCONV(TIME(),"MTHS")
            GO 55
         END
         IF SHIP.LIST.0679FY#'' THEN
            ***** CRT "start part 4 ":OCONV(TIME(),"MTHS")
            EBILL.DT=SHIP.LIST.0679FY<2,1>[12,2]:SHIP.LIST.0679FY<2,1>[15,2]:SHIP.LIST.0679FY<2,1>[20,2]
            SHIP.DT=SHIP.LIST.0679FY<2,1>[12,10]
            NEW.ID='00000679FY_':SHIP.DT:'.csv'    ; * openseq
            OPENSEQ 'BILLDATA.EBILL', NEW.ID TO OUTSEQ.FILE ELSE
               CREATE OUTSEQ.FILE ELSE
                  GO SKIP.EBILL
               END
            END
            NEW.REC=''
            NVAL=DCOUNT(SHIP.LIST.0679FY<2>,@VM)
            FOR VAL=1 TO NVAL
               SHIP.ID=SHIP.LIST.0679FY<2,VAL>
               CLOSESEQ INSEQ.FILE
               OPENSEQ 'BILLDATA.EBILL', SHIP.ID TO INSEQ.FILE ELSE
                  CRT "*********************************CANNOT OPEN EBILL ":SHIP.ID
                  GO 222
                  *GO SKIP.EBILL
               END
               EOJSI = 0
               LOOP
                  READSEQ SHIP.REC FROM INSEQ.FILE ELSE EOJSI = 1
               UNTIL EOJSI DO
                  WRITESEQ SHIP.REC ON OUTSEQ.FILE ELSE NULL
               REPEAT
               CLOSESEQ INSEQ.FILE
               DELETE F.EBILL,SHIP.ID
222:        NEXT VAL
            CLOSESEQ OUTSEQ.FILE
            CLOSESEQ INSEQ.FILE
            CONVERT.LIST<1,-1>='Invoice_00000679FY_':EBILL.DT:'.csv was successfully converted to the AFS file ':NEW.ID:' and resides in the E-BILL folder'
            SHIP.LIST.0679FY = ''
            ***** CRT "end part 4 ":OCONV(TIME(),"MTHS")
         END
         ***************************************************************************

         IF CONVERT.LIST#'' OR UNCONVERT.LIST#'' THEN
            EMAIL.OUT=''
            PDFVIN = ''
            IF TESTING THEN

            END ELSE
               EMAIL.OUT<1,-1>='ups.ebills@afs.net'
               EMAIL.OUT<1,-1> = 'parcel@afs.net'
            END
            EMAIL.OUT<4>='EbillConversion@afs.net'
            EMAIL.OUT<5>='UPS->AFS E-Bill Conversion Results'
            EMAIL.OUT<6>='UPS->AFS E-Bill conversion was attempted on ':DCOUNT(CONVERT.LIST,@VM)+DCOUNT(UNCONVERT.LIST,@VM):' files in the UPS EBill format.'
            EMAIL.OUT<6>:='  These results are listed below with any unsuccessful conversion attempts listed first.'
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=UNCONVERT.LIST
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=CONVERT.LIST
            IF TESTING THEN
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"
            END
            CALL SENDMAIL(EMAIL.OUT,RESULTS)
         END
      END
***** CRT OCONV(TIME(),"MTHS")
* Begin GRB01
      VIN1=''
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "E"
      CALL PROGTRACK(VIN1,VOUT1)
* End GRB01
      STOP
********************************************************************************
GET.TCODE:*
********************************************************************************
      TCODE=MV.LINE<1,36>
      TCODE.ID='TCODE*':TCODE
      READ TCODE.REC FROM F.EBILL.CONVERT,TCODE.ID THEN
         IF TCODE.REC<1>='ConvertError' THEN
            LOCATE (EBILL.ID:'-':ATT) IN TCODE.REC<2> SETTING EPOS ELSE
               TCODE.REC<3,-1>=EBILL.ID:'-':ATT
            END
            WRITE TCODE.REC ON F.EBILL.CONVERT,TCODE.ID
            ERROR=EBILL.ID:'-Line ':ATT:', Transaction Code ':TCODE:' does not have a translation setup.'
            ERR.ARRAY<1,-1>=ERROR
         END
         IF TCODE='CLB' THEN
            CCODE=MV.LINE<1,45>
            BEGIN CASE
               CASE CCODE='ADS' ; TCODE.REC<1>='ASR'
               CASE CCODE='ANS' ; TCODE.REC<1>='ANS'
               CASE CCODE='COD' ; TCODE.REC<1>='COD'
               CASE CCODE='DCR' ; TCODE.REC<1>='DCR'
               CASE CCODE='DCS' ; TCODE.REC<1>='DCS'
               CASE CCODE='DNS' ; TCODE.REC<1>='DNS'
               CASE CCODE='HRS' ; TCODE.REC<1>='RES'
               CASE CCODE='SAT' ; TCODE.REC<1>='SAT'
               CASE CCODE='SPU' ; TCODE.REC<1>='SPU'
            END CASE
         END
      END ELSE
         TCODE.REC='ConvertError'
         LOCATE (EBILL.ID:'-':ATT) IN TCODE.REC<2> SETTING EPOS ELSE
            TCODE.REC<3>=EBILL.ID:'-':ATT
         END
         WRITE TCODE.REC ON F.EBILL.CONVERT,TCODE.ID
         ERROR=EBILL.ID:'-Line ':ATT:', Transaction Code ':TCODE:' does not have a translation setup.'
         ERR.ARRAY<1,-1>=ERROR
      END
      IF TCODE='RTS' AND MV.LINE<1,179>='' THEN
         MV.LINE<1,181>='UNDELIVERABLE'
      END
      RETURN
********************************************************************************
GET.BCODE:*
********************************************************************************
      BCODE=MV.LINE<1,18>
      IF TCODE='TP' AND BCODE#'T/P' THEN BCODE='T/P'
      IF TCODE='FC' AND BCODE#'F/C' THEN BCODE='F/C'
      BCODE.ID='BCODE*':BCODE:'*':TCODE
      READ BCODE.REC FROM F.EBILL.CONVERT,BCODE.ID ELSE
         BCODE.ID='BCODE*':BCODE:'*ALL'
         READ BCODE.REC FROM F.EBILL.CONVERT,BCODE.ID THEN
            IF BCODE.REC<1>='ConvertError' THEN
               LOCATE (EBILL.ID:'-':ATT) IN BCODE.REC<2> SETTING EPOS ELSE
                  BCODE.REC<3,-1>=EBILL.ID:'-'ATT
               END
               WRITE BCODE.REC ON F.EBILL.CONVERT,BCODE.ID
               ERROR=EBILL.ID:'-Line ':ATT:', Bill Option Code ':BCODE:' does not have a translation setup.'
               ERR.ARRAY<1,-1>=ERROR
            END
         END ELSE
            BCODE.REC='ConvertError'
            LOCATE (EBILL.ID:'-':ATT) IN BCODE.REC<2> SETTING EPOS ELSE
               BCODE.REC<3>=EBILL.ID:'-':ATT
            END
            WRITE BCODE.REC ON F.EBILL.CONVERT,BCODE.ID
            ERROR=EBILL.ID:'-Line ':ATT:', Bill Option Code ':BCODE:' does not have a translation setup.'
            ERR.ARRAY<1,-1>=ERROR
         END
      END
      RETURN
********************************************************************************
GET.SCODE:*
********************************************************************************
      CHG.CLS.CD=MV.LINE<1,44>
***IF MV.LINE<1,45> # 0 THEN
***   CHG.DESC.CD=MV.LINE<1,45>"R%3"
***END ELSE
      CHG.DESC.CD=MV.LINE<1,45>
***END
      CHG.DESC=MV.LINE<1,46>
      SCODE.ID='SCODE*':CHG.CLS.CD:'*':CHG.DESC.CD:'*':CHG.DESC
      READ SCODE.REC FROM F.EBILL.CONVERT,SCODE.ID THEN
         BEGIN CASE
            CASE SCODE.ID[1,37]='SCODE*MSC**Billing Adjustment for w/e'
               SCODE.REC='CREDIT ADJUSTMENTS'
            CASE SCODE.ID[1,33]='SCODE*MSC**Credit Balance for w/e'
               SCODE.REC='CREDIT ADJUSTMENTS'
            CASE SCODE.ID[1,33]='SCODE*MSC**Rebill Charge  for w/e'
               SCODE.REC='CREDIT ADJUSTMENTS'
               IF REBILL.FLG THEN
                  LOCATE MV.LINE IN REBILL.ARRAY SETTING RPOS ELSE     ; * JMK08
                     REBILL.ARRAY<-1>=MV.LINE      ; * JMK08
                     REBILL.AMT+=ICONV(MV.LINE<1,53>,'MD2')  ; * JMK08
                  END                    ; * JMK08
               END
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,53>='500.00' AND MV.LINE<1,175>[1,31]='RETURNED PAYMENT FEE - INVOICE:'      ; * JMK38
               SCODE.REC='MISCELLANEOUS ADJUSTMENT'          ; * JMK38
               IF PHASE#1 THEN           ; * JMK38
                  IF MV.LINE<1,176>='' THEN        ; * JMK38
                     MV.LINE<1,176>=MV.LINE<1,175>           ; * JMK38
                     MV.LINE<1,175>='RETURNED PAYMENT FEE'   ; * JMK38
                  END                    ; * JMK38
               END                       ; * JMK38
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,53>='30.00' AND MV.LINE<1,175>[1,31]='RETURNED PAYMENT FEE - INVOICE:'       ; * JMK44
               SCODE.REC='MISCELLANEOUS ADJUSTMENT'          ; * JMK44
               IF PHASE#1 THEN           ; * JMK44
                  IF MV.LINE<1,176>='' THEN        ; * JMK44
                     MV.LINE<1,176>=MV.LINE<1,175>           ; * JMK44
                     MV.LINE<1,175>='RETURNED PAYMENT FEE'   ; * JMK44
                  END                    ; * JMK44
               END                       ; * JMK44
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,53>='2.00' AND MV.LINE<1,175>#''
               SCODE.REC='MISCELLANEOUS ADJUSTMENT'
               IF PHASE#1 THEN
                  IF MV.LINE<1,176>='' THEN
                     MV.LINE<1,176>=MV.LINE<1,175>
                     MV.LINE<1,175>='WEEKLY PRINTER SERVICE FEE'
                  END
               END
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,36>='FPOD'
               SCODE.REC='PROOF OF DELIVERY'
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,35>='MIS' AND MV.LINE<1,36>='MISC'
               SCODE.REC='MISCELLANEOUS ADJUSTMENT'
            CASE CHG.CLS.CD='FRT' AND CHG.DESC[1,16]='ZONE ADJUSTMENT '
               SCODE.REC='CREDIT ADJUSTMENTS'
               IF PHASE#1 THEN
                  IF MV.LINE<1,176>='' THEN
                     MV.LINE<1,176>=MV.LINE<1,175>
                     MV.LINE<1,175>=CHG.DESC
                  END
               END
            CASE 1
               IF SCODE.REC<1>='ConvertError' THEN
                  LOCATE (EBILL.ID:'-':ATT) IN SCODE.REC<2> SETTING EPOS ELSE
                     SCODE.REC<3,-1>=EBILL.ID:'-':ATT
                  END
                  WRITE SCODE.REC ON F.EBILL.CONVERT,SCODE.ID
                  ERROR=EBILL.ID:'-Line ':ATT:', Service Description ':SCODE.ID:' does not have a translation setup.'
                  ERR.ARRAY<1,-1>=ERROR
****                  ERR.ID = QUOTE(SCODE.ID)
                  WRITEV "" ON F.CERROR,SCODE.ID,1           ; * GRB01
               END
         END CASE
      END ELSE
         BEGIN CASE
            CASE SCODE.ID[1,37]='SCODE*MSC**Billing Adjustment for w/e'
               SCODE.REC='CREDIT ADJUSTMENTS'
            CASE SCODE.ID[1,33]='SCODE*MSC**Credit Balance for w/e'
               SCODE.REC='CREDIT ADJUSTMENTS'
            CASE SCODE.ID[1,33]='SCODE*MSC**Rebill Charge  for w/e'
               SCODE.REC='CREDIT ADJUSTMENTS'
               IF REBILL.FLG THEN
                  LOCATE MV.LINE IN REBILL.ARRAY SETTING RPOS ELSE     ; * JMK08
                     REBILL.ARRAY<-1>=MV.LINE      ; * JMK08
                     REBILL.AMT+=ICONV(MV.LINE<1,53>,'MD2')  ; * JMK08
                  END                    ; * JMK08
               END
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,53>='2.00' AND MV.LINE<1,175>#''
               SCODE.REC='MISCELLANEOUS ADJUSTMENT'
               IF PHASE#1 THEN
                  IF MV.LINE<1,176>='' THEN
                     MV.LINE<1,176>=MV.LINE<1,175>
                     MV.LINE<1,175>='WEEKLY PRINTER SERVICE FEE'
                  END
               END
            CASE SCODE.ID='SCODE*FRT*003*ZONE ADJUSTMENT Ground'
               SCODE.REC='CREDIT ADJUSTMENTS'
               IF PHASE#1 THEN
                  IF MV.LINE<1,176>='' THEN
                     MV.LINE<1,176>=MV.LINE<1,175>
                     MV.LINE<1,175>=CHG.DESC
                  END
               END
            CASE SCODE.ID[1,10]='SCODE*INF*'
               SCODE.REC='(roll-up)'
               WRITE SCODE.REC ON F.EBILL.CONVERT,SCODE.ID
               **************************
               * let's look at these before making them a roll up. it has created issues
            CASE SCODE.ID[1,13]='SCODE*ACC*SPU'
               SCODE.REC='ConvertError'
               WRITE SCODE.REC ON F.EBILL.CONVERT,SCODE.ID
               ******************************
****            CASE SCODE.ID[1,10]='SCODE*ACC*'
****               SCODE.REC='(roll-up)'
****               WRITE SCODE.REC ON F.EBILL.CONVERT,SCODE.ID
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,36>='FPOD'
               SCODE.REC='PROOF OF DELIVERY'
            CASE SCODE.ID='SCODE*FRT**' AND MV.LINE<1,35>='MIS' AND MV.LINE<1,36>='MISC'
               SCODE.REC='MISCELLANEOUS ADJUSTMENT'
            CASE 1
               SCODE.REC='ConvertError'
               LOCATE (EBILL.ID:'-':ATT) IN SCODE.REC<2> SETTING EPOS ELSE
                  SCODE.REC<3>=EBILL.ID:'-':ATT
               END
               WRITE SCODE.REC ON F.EBILL.CONVERT,SCODE.ID
               ERROR=EBILL.ID:'-Line ':ATT:', Service Description ':SCODE.ID:' does not have a translation setup.'
               ERR.ARRAY<1,-1>=ERROR
****               ERR.ID = QUOTE(SCODE.ID)
               WRITEV "" ON F.CERROR,SCODE.ID,1    ; * GRB01
         END CASE
      END
      RETURN
********************************************************************************
GET.VCODE:*
********************************************************************************
      SRC=MV.LINE<1,37>
      VCODE.ID='VOID*':SRC
      READ VCODE.REC FROM F.EBILL.CONVERT,VCODE.ID THEN
         IF VCODE.REC<1>='ConvertError' THEN
            ERROR=EBILL.ID:'-Line ':ATT:', Void Description Code ':VCODE.ID:' does not have a translation setup.'
            ERR.ARRAY<1,-1>=ERROR
            LOCATE (EBILL.ID:'-':ATT) IN VCODE.REC<2> SETTING EPOS ELSE
               VCODE.REC<3,-1>=EBILL.ID:'-'ATT
            END
         END
      END ELSE
         VCODE.REC='ConvertError'
         LOCATE (EBILL.ID:'-':ATT) IN VCODE.REC<2> SETTING EPOS ELSE
            VCODE.REC<3>=EBILL.ID:'-':ATT
         END
         WRITE VCODE.REC ON F.EBILL.CONVERT,VCODE.ID
         ERROR=EBILL.ID:'-Line ':ATT:', Transaction Code ':VCODE.ID:' does not have a translation setup.'
         ERR.ARRAY<1,-1>=ERROR
      END
      RETURN
********************************************************************************
LOAD.HUN.LINE:*
********************************************************************************
      HUN.LINE=''
      HUN.LINE<1, 1>=TRIM(MV.LINE<1, 1>'L#1')
      HUN.LINE<1, 2>=TRIM(MV.LINE<1, 2>'L#10')
      HUN.LINE<1, 3>=TRIM(MV.LINE<1, 3>'L#10')
      HUN.LINE<1, 4>=TRIM(MV.LINE<1, 6>'R#15')
      HUN.LINE<1, 5>=MV.LINE<1, 5>[6,2]:MV.LINE<1, 5>[9,2]:MV.LINE<1, 5>[1,4]
      HUN.LINE<1, 6>=TRIM(MV.LINE<1,11>'L#11')
      HUN.LINE<1, 8>=TRIM(MV.LINE<1,13>'L#9')
      MV.LINE<1,16> = CHANGE(MV.LINE<1,16>,'PO-','')
      MV.LINE<1,16> = CHANGE(MV.LINE<1,16>,'PO','')
      MV.LINE<1,16> = CHANGE(MV.LINE<1,16>,'P.O','')
      MV.LINE<1,16> = CHANGE(MV.LINE<1,16>,'#','')

      MV.LINE<1,22> = CHANGE(MV.LINE<1,22>,'PO-','')
      MV.LINE<1,22> = CHANGE(MV.LINE<1,22>,'PO','')
      MV.LINE<1,22> = CHANGE(MV.LINE<1,22>,'P.O','')
      MV.LINE<1,22> = CHANGE(MV.LINE<1,22>,'#','')
      IF MV.LINE<1,16> = "" THEN
         HUN.LINE<1,9>=TRIM(MV.LINE<1,22>'L#23')
      END ELSE
         HUN.LINE<1,9>=TRIM(MV.LINE<1,16>'L#23')
      END
      MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'PO-','')
      MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'PO','')
      MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'P.O','')
      MV.LINE<1,17> = CHANGE(MV.LINE<1,17>,'#','')

      IF LEN(MV.LINE<1,16>) LT 10 AND LEN(MV.LINE<1,17>) LT 10 AND LEN(MV.LINE<1,22>) EQ 10 THEN
         HUN.LINE<1,10>=TRIM(MV.LINE<1,22>'L#23')
      END ELSE
         HUN.LINE<1,10>=TRIM(MV.LINE<1,17>'L#23')
      END
      HUN.LINE<1,11>=''
      HUN.LINE<1,12>=TRIM(HUN.ARRAY<2,HPOS>'L#8')
      HUN.LINE<1,13>=TRIM(HUN.ARRAY<3,HPOS>'L#5')
      HUN.LINE<1,14>=TRIM(HUN.ARRAY<4,HPOS>'L#5')
      HUN.LINE<1,15>=MV.LINE<1,28>       ; * MV.LINE<1,30>
      HUN.LINE<1,19>=MV.LINE<1,34>
      GOSUB GET.TCODE
      HUN.LINE<1,20>=TRIM(TCODE.REC<1>'L#3')
      IF MV.LINE<1,36>='VOID' THEN
         GOSUB GET.VCODE
         IF VCODE.REC#'' THEN
            HUN.LINE<1,21>=TRIM(VCODE.REC<1>'L#24')
         END
      END ELSE
         GOSUB GET.SCODE
         HUN.LINE<1,21>=TRIM(SCODE.REC<1>'L#24')
         BEGIN CASE
            CASE HUN.LINE<1,21>='NEXT DAY AIR SAVER HUNDR'
               HUN.LINE<1,21>='HUNDREDWEIGHT NEXT DAY S'
            CASE 1
               IF INDEX(HUN.LINE<1,21>,' HUNDREDWT',1) THEN
                  HUN.LINE<1,21>=CHANGE(HUN.LINE<1,21>,' HUNDREDWT','')
                  HUN.LINE<1,21>='HUNDREDWEIGHT ':HUN.LINE<1,21>
                  HUN.LINE<1,21>=TRIM(HUN.LINE<1,21>'L#24')
               END
         END CASE
      END
      GOSUB GET.BCODE
      HUN.LINE<1,22>=BCODE.REC<1>
      IF TCODE.REC<2>#'' THEN
         HUN.LINE<1,22>=TCODE.REC<2>
      END
      HUN.LINE<1,23>=MV.LINE<1,12>[6,2]:MV.LINE<1,12>[9,2]:MV.LINE<1,12>[1,4]
      HUN.LINE<1,24>=TRIM(MV.LINE<1,67>)
      HUN.LINE<1,25>=TRIM(MV.LINE<1,68>)
      HUN.LINE<1,26>=TRIM(MV.LINE<1,69>:' ':MV.LINE<1,70>)   ; * TRIM(MV.LINE<1,69>:' ':MV.LINE<1,70>)
      HUN.LINE<1,27>=TRIM(MV.LINE<1,71>)
      HUN.LINE<1,28>=MV.LINE<1,72>
      HUN.LINE<1,29>=TRIM(MV.LINE<1,73>)
      HUN.LINE<1,30>=TRIM(MV.LINE<1,75>)
      HUN.LINE<1,31>=TRIM(MV.LINE<1,76>)
      HUN.LINE<1,32>=TRIM(MV.LINE<1,77>:' ':MV.LINE<1,78>)   ; * TRIM(MV.LINE<1,77>:' ':MV.LINE<1,78>)
      HUN.LINE<1,33>=TRIM(MV.LINE<1,79>)
      HUN.LINE<1,34>=MV.LINE<1,80>
      ZIP.TEST=TRIM(MV.LINE<1,81>)
      BEGIN CASE
         CASE NUM(ZIP.TEST)
            HUN.LINE<1,35>=TRIM(MV.LINE<1,81>'L#5')
         CASE 1
            HUN.LINE<1,35>=TRIM(MV.LINE<1,81>'L#6')
      END CASE
      HUN.LINE<1,36>=MV.LINE<1,82>
      FOR XX=5 TO 25
         HUN.LINE<1,32+XX>=HUN.ARRAY<XX,HPOS>
      NEXT XX
      IF MV.LINE<1,176>='' AND MV.LINE<1,33>#'' THEN
         MV.LINE<1,176>=MV.LINE<1,33>
      END
      IF MV.LINE<1,177>='' AND MV.LINE<1,14>#'' THEN
         MV.LINE<1,177>=MV.LINE<1,14>
      END
      IF MV.LINE<1,175>='UNAUTHORIZED CBS PACKAGE CHRG' THEN
         HUN.LINE<1,58>=TRIM(MV.LINE<1,176>)
         HUN.LINE<1,59>=TRIM(MV.LINE<1,177>)
         HUN.LINE<1,60>=TRIM(MV.LINE<1,178>)
         HUN.LINE<1,61>=TRIM(MV.LINE<1,179>)
         HUN.LINE<1,62>=TRIM(MV.LINE<1,181>)
      END ELSE
         HUN.LINE<1,58>=TRIM(MV.LINE<1,175>)
         HUN.LINE<1,59>=TRIM(MV.LINE<1,176>)
         HUN.LINE<1,60>=TRIM(MV.LINE<1,177>)
         HUN.LINE<1,61>=TRIM(MV.LINE<1,178>)
         HUN.LINE<1,62>=TRIM(MV.LINE<1,179>)
      END
      IF HUN.LINE<1,20>='RTS' THEN
         HUN.LINE<1,62>='UNDELIVERABLE'
      END
      IF HUN.LINE<1,22>='4' THEN
         HUN.LINE<1,62>='CHARGEBACK'
      END
      HUN.LINE<1,63>=MV.LINE<1,63>[6,2]:MV.LINE<1,63>[9,2]:MV.LINE<1,63>[1,4]
      FOR XX=26 TO 44
         HUN.LINE<1,38+XX>=HUN.ARRAY<XX,HPOS>
      NEXT XX
      HUN.LINE<1,83>=HUN.ARRAY<51,HPOS>
      HUN.LINE<1,84>=HUN.ARRAY<52,HPOS>
      HUN.LINE<1,85>=HUN.ARRAY<53,HPOS>
      HUN.LINE<1,86>=HUN.ARRAY<54,HPOS>
      HUN.LINE<1,87>=HUN.ARRAY<55,HPOS>
      HUN.LINE<1,95>=TRIM(MV.LINE<1,24>'L#23')     ; * JMK24 ; * JMK31
      HUN.LINE<1,96>=TRIM(MV.LINE<1,25>'L#23')     ; * JMK24 ; * JMK31
      HUN.LINE<1,97>=TRIM(MV.LINE<1,26>'L#23')     ; * JMK24 ; * JMK31
      IF AIRGAS THEN                     ; * JMK39
         BEGIN CASE                      ; * JMK49
            CASE DIVISION.ID='FHQ03'     ; * JMK49
               AG.DIV.ID='SFHQ03'        ; * JMK49
            CASE DIVISION.ID='F1701'     ; * JMK49
               AG.DIV.ID='SF1701'        ; * JMK49
            CASE 1                       ; * JMK49
               AG.DIV.ID=DIVISION.ID     ; * JMK39
         END CASE                        ; * JMK49
         IF AG.DIV.ID[1,1]='0' THEN      ; * JMK39
            AG.DIV.ID=AG.DIV.ID[2,5]     ; * JMK39
         END                             ; * JMK39
         IF AG.DIV.ID[1,1]='0' THEN      ; * JMK39
            AG.DIV.ID=AG.DIV.ID[2,4]     ; * JMK39
         END                             ; * JMK39
         IF AG.DIV.ID[1,1]='0' THEN      ; * JMK39
            AG.DIV.ID=AG.DIV.ID[2,3]     ; * JMK39
         END                             ; * JMK39
         HUN.LINE<1,98>=AG.DIV.ID        ; * JMK39 - Plant Number
         IF HUN.LINE<1,37>>0.00 THEN     ; * JMK39
            HUN.LINE<1,99>='40'          ; * JMK39 - Posting Key
         END                             ; * JMK39
         IF HUN.LINE<1,37><0.00 THEN     ; * JMK39
            HUN.LINE<1,99>='50'          ; * JMK39 - Posting Key
         END                             ; * JMK39
         REF1=HUN.LINE<1,9>              ; * JMK39
         REF2=HUN.LINE<1,10>             ; * JMK39
         REF3=HUN.LINE<1,95>             ; * JMK39
         REF4=HUN.LINE<1,96>             ; * JMK39
         REF5=HUN.LINE<1,97>             ; * JMK39
         REF6=TRIM(MV.LINE<1,23>'L#23')

         PO.STATUS=''                    ; * JMK39
         BEGIN CASE
            CASE REF1 MATCHES "10N"
               PO.STATUS=' '
               IF REF1[1,1]='5' OR REF1[1,1]='4' THEN
                  PO.STATUS='Y'
               END
            CASE REF2 MATCHES "10N"
               PO.STATUS=' '
               IF REF2[1,1]='5' OR REF2[1,1]='4' THEN
                  PO.STATUS='Y'
               END
            CASE REF3 MATCHES "10N"
               PO.STATUS=' '
               IF REF3[1,1]='5' OR REF3[1,1]='4' THEN
                  PO.STATUS='Y'
               END
            CASE REF4 MATCHES "10N"
               PO.STATUS=' '
               IF REF4[1,1]='5' OR REF4[1,1]='4' THEN
                  PO.STATUS='Y'
               END
            CASE REF5 MATCHES "10N"
               PO.STATUS=' '
               IF REF5[1,1]='5' OR REF5[1,1]='4' THEN
                  PO.STATUS='Y'
               END
            CASE REF6 MATCHES "10N"
               PO.STATUS=' '
               IF REF6[1,1]='5' OR REF6[1,1]='4' THEN
                  PO.STATUS='Y'
               END
         END CASE

         HUN.LINE<1,100>=PO.STATUS       ; * JMK39

         IF REF2#'' THEN                 ; * DRF04
            TEST.REF2=CHANGE(REF2,'PO','')         ; * DRF04
            TEST.REF2=CHANGE(TEST.REF2,'#','')     ; * DRF04
            TEST.REF2=TRIM(TEST.REF2)    ; * DRF04
            READ AIRGAS.PO.REC FROM F.AIRGAS.PO,TEST.REF2 ELSE AIRGAS.PO.REC=''  ; * DRF04
            READ AIRGAS.PO.REC FROM F.AIRGAS.PO,REF2 ELSE AIRGAS.PO.REC=''       ; * DRF04
            IF AIRGAS.PO.REC<5>#'' THEN  ; * DRF04
               HUN.LINE<1,101>=AIRGAS.PO.REC<5>    ; * DRF04
            END                          ; * DRF04
         END                             ; * DRF04
      END                                ; * JMK39
      IF HUN.LINE<1,20>='RTS' THEN
         HUN.RTN=1
      END ELSE
         HUN.RTN=0
      END

      TRAN.DT=HUN.LINE<1,23>
      TRK.ID=HUN.LINE<1,3>[5,6]:'*':HUN.NO:'*':TRAN.DT:'*':HUN.RTN

      TRK.ID=HUN.LINE<1,3>[5,6]:'*':HUN.NO
      LOCATE TRK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRKPOS ELSE
         INS TRK.ID BEFORE TRK.ARRAY<1,TRKPOS>
         INS 0 BEFORE TRK.ARRAY<2,TRKPOS>
         INS 0 BEFORE TRK.ARRAY<3,TRKPOS>
         INS '' BEFORE TRK.ARRAY<4,TRKPOS>
         INS '' BEFORE TRK.ARRAY<5,TRKPOS>
      END
      TRK.ARRAY<3,TRKPOS>+=ICONV(HUN.LINE<1,37>,'MD2')
      LOCATE HUN.LINE<1,3>[5,6] IN SHP.ARRAY<1> BY 'AL' SETTING SHPPOS ELSE
         INS HUN.LINE<1,3>[5,6] BEFORE SHP.ARRAY<1,SHPPOS>
         INS 0 BEFORE SHP.ARRAY<2,SHPPOS>
         INS 0 BEFORE SHP.ARRAY<3,SHPPOS>
      END
      SHP.ARRAY<3,SHPPOS>+=ICONV(HUN.LINE<1,37>,'MD2')
      RETURN
********************************************************************************
BLOCK.CLIENTS:
********************************************************************************
      NCATT=DCOUNT(CLIENT.LIST,@AM)
      FOR CATT=1 TO NCATT
         CLIENT.ID=CLIENT.LIST<CATT>
         IF CLIENT.ID#'NOT FOUND' THEN
            TABLES.ID='NO-PROCESS*':CLIENT.ID
            READU TABLES.REC FROM F.TABLES,TABLES.ID ELSE TABLES.REC='UPS Ebill Conv Proc - See EDI Admin.'
            IF TABLES.REC<1>='UPS Ebill Conv Proc - See EDI Admin.' THEN
               TABLES.ORG=TABLES.REC
               LOCATE EBILL.ID IN TABLES.REC<2> SETTING EPOS ELSE
                  TABLES.REC<2,-1>=EBILL.ID
               END
               IF TABLES.REC#TABLES.ORG THEN
                  WRITE TABLES.REC ON F.TABLES,TABLES.ID
               END
            END
            RELEASE F.TABLES,TABLES.ID
         END
      NEXT CATT
      RETURN
********************************************************************************
UNBLOCK.CLIENTS:
********************************************************************************
      NCATT=DCOUNT(CLIENT.LIST,@AM)
      FOR CATT=1 TO NCATT
         CLIENT.ID=CLIENT.LIST<CATT>
         IF CLIENT.ID#'NOT FOUND' THEN
            TABLES.ID='NO-PROCESS*':CLIENT.ID
            READU TABLES.REC FROM F.TABLES,TABLES.ID THEN
               IF TABLES.REC<1>='UPS Ebill Conv Proc - See EDI Admin.' THEN
                  TABLES.ORG=TABLES.REC
                  LOCATE EBILL.ID IN TABLES.REC<2> SETTING EPOS THEN
                     DEL TABLES.REC<2,EPOS>
                  END
                  IF TABLES.REC#TABLES.ORG THEN
                     IF TABLES.REC<2>='' THEN
                        DELETE F.TABLES,TABLES.ID
                        IF TABLES.REC<3>#'' THEN   ; * JMK11
                           BLOCK.SUBJ='UPS Ebill has been converted.'  ; * JMK11
                           BLOCK.TEXT=TABLES.REC<3>:' previously attempted to process client # ':CLIENT.ID:' with UPS Ebill conversion issues.'        ; * JMK11
                           BLOCK.TEXT:='  The conversion issues have been resolved and the associated UPS Ebill has been converted successfully'       ; * JMK11
                           BLOCK.TEXT:=' and should be ready to process momentarily.'      ; * JMK11
                           MVIN=''       ; * JMK11
                           IF TESTING THEN

                           END ELSE
                              MVIN<1,-1>='MMckay@afs.net'    ; * JMK11
                           END
                           MVIN<4>='CONVERT.UPS.EBILL@afs.net'         ; * JMK11
                           MVIN<5>=BLOCK.SUBJ      ; * JMK11
                           MVIN<6>=BLOCK.TEXT      ; * JMK11
                           CALL SENDMAIL(MVIN,MVOUT)         ; * JMK11
                        END              ; * JMK11
                     END ELSE
                        WRITE TABLES.REC ON F.TABLES,TABLES.ID
                     END
                  END
               END
            END
            RELEASE F.TABLES,TABLES.ID
         END
      NEXT CATT
      RETURN
********************************************************************************
EMAIL.PDFS:
********************************************************************************
*** Email UPS files to clients who need them

      CLIENT.ID = CLIENT.LIST<1>
      TEST.STR = 'PEB'
*** Verify email data
      READ CLIENT.REC FROM F.CLIENTS, CLIENT.ID ELSE
*** Email self; client ID not found in CLIENTS file
         PDFVIN = ''
         IF TESTING THEN

         END ELSE
            PDFVIN<1> = AFS.PARCEL.ADDRESS
            PDFVIN<1,-1> = 'pick@afs.net'
         END
         PDFVIN<4> = PROG.NAME:'@afs.net'
         PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
         PDFVIN<6> = 'Could not read record for client number ':CLIENT.ID
         IF TESTING THEN
            PDFVIN<6,-1>=' '
            PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
         END
         PDFVOUT=''
         CALL SENDMAIL(PDFVIN,PDFVOUT)
         GOTO END.PDFS
      END
      FILE.FLAG = CLIENT.REC<251>
      IF FILE.FLAG = '' THEN RETURN
      IF INDEX(TEST.STR,FILE.FLAG,1) < 1 THEN
***  Email self; client has invalid file flag value
         PDFVIN = ''
         IF TESTING THEN

         END ELSE
            PDFVIN<1> = AFS.PARCEL.ADDRESS
            PDFVIN<1,-1> = 'pick@afs.net'
         END
         PDFVIN<4> = PROG.NAME:'@afs.net'
         PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
         PDFVIN<6> = 'Client record ':CLIENT.ID:' has an invalid file flag value of ':FILE.FLAG
         IF TESTING THEN
            PDFVIN<6,-1>=' '
            PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
         END
         PDFVOUT=''
         CALL SENDMAIL(PDFVIN,PDFVOUT)
         GOTO END.PDFS
      END
*  Begin GRB05
      ACCT = FIELD(AFS.ID,'_',1)[5,6]
      IF CLIENT.ID = 01826 THEN
         XREF.ID = '00041*':ACCT
         READ XREF.REC FROM F.EDI.CAR.ACNT.XREF,XREF.ID THEN
            DIVISION.ID=XREF.REC<2>
            OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV.CODES ELSE
               TO.ADDR = CLIENT.REC<252>
            END
            READ DIV.CODES FROM F.DIV.CODES,DIVISION.ID THEN
               TO.ADDR = DIV.CODES<48>
            END
            IF TRIM(TO.ADDR)= "" THEN
               TO.ADDR = CLIENT.REC<252>
            END
         END
      END ELSE
         TO.ADDR = CLIENT.REC<252>
      END

* End GRB05
      IF TO.ADDR = '' THEN
*** Email self; no primary email address on record
         PDFVIN = ''
         IF TESTING THEN

         END ELSE
            PDFVIN<1> = AFS.PARCEL.ADDRESS
            PDFVIN<1,-1> = 'pick@afs.net'
         END
         PDFVIN<4> = PROG.NAME:'@afs.net'
         PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
         STR = 'Client number ':CLIENT.ID:' has a file flag value of ':FILE.FLAG
         STR := ', but no email addresses on record.'
         PDFVIN<6> = STR
         IF TESTING THEN
            PDFVIN<6,-1>=' '
            PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
         END
         PDFVOUT=''
         CALL SENDMAIL(PDFVIN,PDFVOUT)
         GOTO END.PDFS
      END
*** Set names and locations for files to be emailed
      IF FILE.FLAG = 'P' OR FILE.FLAG = 'B' THEN
*** Set PDF file name
         ACCT = FIELD(AFS.ID,'_',1)[5,6]
         DATE1 = FIELD(OCONV(AFS.ID,'G1_3'),'.',1)
         MM = FIELD(DATE1,'_',1)
         DD = FIELD(DATE1,'_',2)
         YY = FIELD(DATE1,'_',3)
         DATE2 = YY:MM:DD
         TEMP.DATE = MM:'/':DD:'/':YY[3,2]
         DI = ICONV(TEMP.DATE,'D')
         XREF.ID = '00041*':ACCT

         BEGIN CASE                      ; * JMK03
            CASE EBILL.ID[1,1]='A'       ; * JMK03
               JD = OCONV(DI,'DJ')       ; * JMK03
               TEST.VAL = MOD(JD,7)      ; * JMK03
               IF TEST.VAL = 0 THEN      ; * JMK03
                  WEEK = JD / 7          ; * JMK03
               END ELSE                  ; * JMK03
                  WEEK = INT(JD/7) + 1   ; * JMK03
               END                       ; * JMK03
               PDF.FILENAME = 'A000000':ACCT:WEEK'R%2':YY[4,1]:'-':DATE2:'-1-pdf.zip'      ; * JMK03
            CASE EBILL.ID[1,1]='P'       ; * JMK03
               PDF.FILENAME = 'P0000':ACCT:'-':DATE2:'-1-pdf.zip'      ; * JMK03
            CASE EBILL.ID[1,1]='I'       ; * JMK03
               PDF.FILENAME = CHANGE(EBILL.ID,'csv','zip')   ; * JMK03
               READ TEST FROM F.EBILL.PDF,PDF.FILENAME ELSE  ; * JMK41
                  NSHIPPER=DCOUNT(SHIPPER.LIST<1>,@VM)
                  IF NSHIPPER>1 OR SHIPPER.LIST<1>='E78E75' THEN
                     PDF.FILENAME = CHANGE(PDF.FILENAME,'0000','')     ; * JMK03
                  END
               END                       ; * JMK41
         END CASE                        ; * JMK03
*** Copy pdf file to user's billdata folder
         STMT = 'DOS /c copy "e:\Ardent\public\billdata\E-BILL hist\pdf files\':PDF.FILENAME:'"'

*Begin GRB04
         IF CLIENT.ID = '01826' THEN
            STMT := ' e:\Ardent\public\billdata\e-bill\temp\':PDF.FILENAME
         END ELSE
            STMT := ' e:\Ardent\public\billdata\':USER:'\':PDF.FILENAME
         END
* GRB04
         EXECUTE STMT CAPTURING MSG
         MSTR = TRIM(MSG<1>)
         MSTR = FIELD(MSTR,' ',3)
         IF MSTR # 'copied.' THEN
*** Email self; could not copy pdf file to user's billdata folder
            PDFVIN = ''
            IF TESTING THEN

            END ELSE
               PDFVIN<1> = AFS.PARCEL.ADDRESS
               PDFVIN<1,-1> = 'pick@afs.net'
            END
            PDFVIN<4> = PROG.NAME:'@afs.net'
            PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
            STR = ''
            STR = 'Client number ':CLIENT.ID
            STR<1,-1> = 'Could not copy pdf file ':PDF.FILENAME:' to ':USER:"'s billdata folder."
            PDFVIN<6> = STR
            IF TESTING THEN
               PDFVIN<6,-1>=' '
               PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
            END
            PDFVOUT=''
            ********     CALL SENDMAIL(PDFVIN,PDFVOUT)
            GOTO END.PDFS
         END
      END
      IF FILE.FLAG = 'E' OR FILE.FLAG = 'B' THEN
*** Move ebill file to user's billdata folder
         READ REC FROM F.EBILL, AFS.ID ELSE
*** Email self; could not read ebill record
            PDFVIN = ''
            IF TESTING THEN

            END ELSE
               PDFVIN<1> = 'parcel@afs.net'
               PDFVIN<1,-1> = 'pick@afs.net'
            END
            PDFVIN<4> = PROG.NAME:'@afs.net'
            PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
            STR = ''
            STR = 'Client number ':CLIENT.ID
            STR<1,-1> = 'Could not copy ebill file ':AFS.ID:' from the ebill-billdata-hist folder.'
            PDFVIN<6> = STR
            IF TESTING THEN
               PDFVIN<6,-1>=' '
               PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
            END
            PDFVOUT=''
            CALL SENDMAIL(PDFVIN,PDFVOUT)
            GOTO END.PDFS
         END
************************

         WRITE REC TO F.BILLDATA.USER, AFS.ID ELSE
*** Email self; could not write ebill record to user's billdata folder
            PDFVIN = ''
            IF TESTING THEN

            END ELSE
               PDFVIN<1> = AFS.PARCEL.ADDRESS
               PDFVIN<1,-1> = 'pick@afs.net'
            END
            PDFVIN<4> = PROG.NAME:'@afs.net'
            PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
            STR = ''
            STR = 'Client number ':CLIENT.ID
            STR<1,-1> = 'Could not write ebill file ':AFS.ID:' to ':USER:"'s billdata folder."
            PDFVIN<6> = STR
            IF TESTING THEN
               PDFVIN<6,-1>=' '
               PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
            END
            PDFVOUT=''
            CALL SENDMAIL(PDFVIN,PDFVOUT)
            GOTO END.PDFS
         END
      END
***
*** Create body of email
***
      BODY = ''
      BODY<1,-1> = ' '
      BODY<1,-1> = 'Please let us know if you have any questions.'
      BODY<1,-1> = ' '
      BODY<1,-1> = 'Thanks,'
      BODY<1,-1> = 'AFS Customer Service'          ; * GRB03
      BODY<1,-1> = ' '
      BODY<1,-1> = 'PO BOX 18170 Shreveport, LA  71138'      ; * GRB03
      BODY<1,-1> = 'Phone  : 866-533-2111 option 2'          ; * GRB03
      BODY<1,-1> = 'Fax    : 318-841-9228'         ; *NPR01
      BODY<1,-1> = 'E-Mail : cs@afs.net'           ; * GRB03
      BODY<1,-1> = 'Web    : www.AFS.net'
      BODY<1,-1> = ' '
*** Finish it up!
      PDFVIN = ''
      IF TESTING THEN

      END ELSE
         PDFVIN<1> = TO.ADDR
         PDFVIN<2> = CLIENT.REC<253>
         PDFVIN<2,-1> = AFS.PARCEL.ADDRESS
      END
      PDFVIN<4> = 'cs@afs.net'
      PDFVIN<5> = 'UPS E-bill data from AFS'
      PDFVIN<6> = BODY
      IF TESTING THEN
         PDFVIN<6,-1>=' '
         PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
      END
      PDFVIN<11> = ''
      IF FILE.FLAG = 'P' OR FILE.FLAG = 'B' THEN
* * Begin GRB04
*****DEBUG
         IF CLIENT.ID = '01826' THEN
            PDFVIN<2,-1> = 'nmeddaugh@afs.net'

            FROM.FOLDER = 'e:\Ardent\public\billdata\e-bill\temp'
            FROM.FOLDER = QUOTE(FROM.FOLDER)
            STMT = 'dos /c e:\7-zip\7z x -r ' :FROM.FOLDER
            STMT = STMT:"-oE:\ARDENT\PUBLIC\billdata\e-bill\temp"
            EXECUTE STMT CAPTURING STUFF RETURNING JUNK
            DELETE F.EBILL.TEMP,PDF.FILENAME
            FILE.DT = FIELD(EBILL.ID,'_',3)
            CONVERT ".csv" TO "" IN FILE.DT
            EXECUTE 'SELECT BILLDATA.EBILL.TEMP =  "[' : ACCT : ']" AND = "[' : FILE.DT : ']"' RTNLIST GBTEMP
            READNEXT PDF.FILENAME1 FROM GBTEMP ELSE NULL
            PDFVIN<11,-1> = 'e:\Ardent\public\billdata\E-BILL\TEMP\':PDF.FILENAME1
            * End GRB04
         END ELSE
            PDFVIN<11,-1> = 'e:\Ardent\public\billdata\':USER:'\':PDF.FILENAME
         END
         BODY<1,-1> = 'Note : ':PDF.FILENAME
      END
      IF FILE.FLAG = 'E' OR FILE.FLAG = 'B' THEN
         PDFVIN<11,-1> = 'e:\Ardent\public\billdata\':USER:'\':AFS.ID
         BODY<1,-1> = 'Note : ':AFS.ID
      END
      PDFVOUT=''
      CALL SENDMAIL(PDFVIN,PDFVOUT)
***
*** Remove files from user's billdata location
***
      IF FILE.FLAG = 'P' OR FILE.FLAG = 'B' THEN
         IF CLIENT.ID = '01826' THEN
            DELETE F.EBILL.TEMP,PDF.FILENAME1
         END ELSE
            DELETE F.BILLDATA.USER, PDF.FILENAME ELSE
***  Email self; temporary pdf file not deleted from user's billdata folder
               PDFVIN = ''
               IF TESTING THEN

               END ELSE
                  PDFVIN<1> = AFS.PARCEL.ADDRESS
                  PDFVIN<1,-1> = 'pick@afs.net'
               END
               PDFVIN<4> = PROG.NAME:'@afs.net'
               PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
               MSG = 'The program ':PROG.NAME:' was not able to delete ':PDF.FILENAME
               MSG := ' from BILLDATA.':USER:'.'
               PDFVIN<6> = MSG
               IF TESTING THEN
                  PDFVIN<6,-1>=' '
                  PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
               END
               PDFVOUT=''
               CALL SENDMAIL(PDFVIN,PDFVOUT)
               GOTO END.PDFS
            END
         END
         IF FILE.FLAG = 'E' OR FILE.FLAG = 'B' THEN
            DELETE F.BILLDATA.USER, AFS.ID ELSE
***  Email self; temporary ebill file not deleted from user's billdata folder
               PDFVIN = ''
               IF TESTING THEN

               END ELSE
                  PDFVIN<1> = AFS.PARCEL.ADDRESS
               END
               PDFVIN<4> = PROG.NAME:'@afs.net'
               PDFVIN<5> = PROG.NAME:' Error for UPS E-Bill file ':EBILL.ID
               MSG = 'The program ':PROG.NAME:' was not able to delete ':AFS.ID
               MSG := ' from BILLDATA.':USER:'.'
               PDFVIN<6> = MSG
               IF TESTING THEN
                  PDFVIN<6,-1>=' '
                  PDFVIN<6,-1>="Don't forget to remove the testing flag!!!!!!"
               END
               PDFVOUT=''
               CALL SENDMAIL(PDFVIN,PDFVOUT)
               GOTO END.PDFS
            END
         END
END.PDFS:*
         RETURN                          ; * END JMK01
********************************************************************************
GET.BENCH.PER:***
********************************************************************************
         C.TERM=BCODE.REC<1>
         IF TCODE.REC<2>#'' THEN C.TERM=TCODE.REC<2>
         BEGIN CASE
            CASE C.TERM='1' OR C.TERM='4'
               B.IOT='O'
            CASE C.TERM='2'
               B.IOT='I'
            CASE C.TERM='3'
               B.IOT='T'
            CASE C.TERM=''
               B.IOT='O'
         END CASE
         IF NOT(PREV.SHIPPER=SHIPPER AND PREV.TERM=C.TERM) THEN
            DBENCH.ARR=''
            READ DARR FROM F.UPS.BM,AFS.CLIENT THEN
               DBENCH.ARR=DARR
            END
            BENCH.ID=AFS.CLIENT:'-':B.IOT
            READ DARR FROM F.UPS.BM,BENCH.ID THEN
               DBENCH.ARR=DARR
            END
            BENCH.ID=AFS.CLIENT:'*':SHIPPER
            READ DARR FROM F.UPS.BM,BENCH.ID THEN
               DBENCH.ARR=DARR
            END
            BENCH.ID=AFS.CLIENT:'-':B.IOT:'*':SHIPPER
            READ DARR FROM F.UPS.BM,BENCH.ID THEN
               DBENCH.ARR=DARR
            END
            PREV.SHIPPER=SHIPPER
            PREV.TERM=C.TERM
         END
         IF DBENCH.ARR='' THEN
            ERROR=EBILL.ID:' appears be missing the benchmarks.'
            ERR.ARRAY<1,-1>=ERROR
         END ELSE
            LOCATE SCODE.REC<5> IN DBENCH.ARR<1> SETTING BENCH.POS THEN
               IF MV.LINE<1,31>='LTR' THEN
                  BENCH.PER=DBENCH.ARR<3,BENCH.POS>
               END ELSE
                  BENCH.PER=DBENCH.ARR<2,BENCH.POS>
               END
            END ELSE
               ERROR=EBILL.ID:' appears have a code ':SCODE.REC<5>:' which does not have a benchmark.'
               ERR.ARRAY<1,-1>=ERROR
            END
         END
         RETURN

********************************************************************************
CALL.GET.EXPENSE:***
********************************************************************************
         SHIPPER.NUMBER=LAST.SHIPPER
         BILL.DATE=EBILL<1,5>
         TRK.NO=EBILL<1,7>               ; * JMK39
         TRACK.ID=SHIPPER.NUMBER:'*':TRK.NO        ; * JMK39
         PRO.NUMBER=SHIPPER.NUMBER[1,3]:'-':SHIPPER.NUMBER[4,3]:FILE.DATE[6,2]:FILE.DATE[9,2]:FILE.DATE[3,2]
         BEGIN CASE
            CASE EBILL<1,22>='1' OR EBILL<1,22>='4'
               IOT='O'
               IF EBILL<1,20>='RTS' THEN IOT='I'   ; * JMK39
               IF EBILL<1,20>='ARS' THEN IOT='I'   ; * JMK39
               IF TRK.NO#'' THEN         ; * JMK39
                  LOCATE TRACK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRACKPOS THEN  ; * JMK39
                     IF TRK.ARRAY<4,TRACKPOS>='' THEN        ; * JMK39
                        TRK.ARRAY<4,TRACKPOS>=IOT  ; * JMK39
                     END                 ; * JMK39
                  END                    ; * JMK39
               END                       ; * JMK39
            CASE EBILL<1,22>='2'
               IOT='I'
               IF TRK.NO#'' THEN         ; * JMK39
                  LOCATE TRACK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRACKPOS THEN  ; * JMK39
                     IF TRK.ARRAY<4,TRACKPOS>='' THEN        ; * JMK39
                        TRK.ARRAY<4,TRACKPOS>=IOT  ; * JMK39
                     END                 ; * JMK39
                  END                    ; * JMK39
               END                       ; * JMK39
            CASE EBILL<1,22>='3'
               IOT='T'
               IF TRK.NO#'' THEN         ; * JMK39
                  LOCATE TRACK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRACKPOS THEN  ; * JMK39
                     IF TRK.ARRAY<4,TRACKPOS>='' THEN        ; * JMK39
                        TRK.ARRAY<4,TRACKPOS>=IOT  ; * JMK39
                     END                 ; * JMK39
                  END                    ; * JMK39
               END                       ; * JMK39
            CASE EBILL<1,22>=''
               IF TRK.NO#'' THEN         ; * JMK39
                  LOCATE TRACK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRACKPOS THEN  ; * JMK39
                     IF TRK.ARRAY<4,TRACKPOS>#'' THEN
                        IOT=TRK.ARRAY<4,TRACKPOS>  ; * JMK39
                     END ELSE            ; * JMK39
                        IOT='O'          ; * JMK39
                        IF EBILL<1,20>='RTS' THEN IOT='I'    ; * JMK39
                        IF EBILL<1,20>='ARS' THEN IOT='I'    ; * JMK39
                     END                 ; * JMK39
                  END                    ; * JMK39
               END ELSE                  ; * JMK39
                  IOT='O'
                  IF EBILL<1,20>='RTS' THEN IOT='I'          ; * JMK39
                  IF EBILL<1,20>='ARS' THEN IOT='I'          ; * JMK39
               END                       ; * JMK39
         END CASE
         BILL.REC=''
         OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV THEN
            READ DIV.REC FROM F.DIV,LAST.DIVISION.ID ELSE
               DIV.REC=''
            END
         END ELSE
            DIV.REC=''
         END
         DIV.NAME=TRIM(OCONV(DIV.REC<11>,'MCU'))   ; * JMK42
         DIV.CNAME=""                    ; * JMK42
         DIV.ADDR=TRIM(OCONV(DIV.REC<14>,'MCU'))   ; * JMK42
         DIV.CITY=TRIM(OCONV(DIV.REC<16>,'MCU'))   ; * JMK42
         DIV.ST=TRIM(OCONV(DIV.REC<17>,'MCU'))     ; * JMK42
         DIV.ZIP=TRIM(OCONV(DIV.REC<1>,'MCU'))     ; * JMK42
         IF DIV.ZIP#'' AND NUM(DIV.ZIP) AND LEN(DIV.ZIP)>5 THEN
            DIV.ZIP=DIV.ZIP[1,5]
         END
         OPEN '','VEND.CUST,':CLIENT.ID TO F.CUST THEN
            READ CUST.REC FROM F.CUST,BILL.REC<17> ELSE
               CUST.REC=''
            END
         END ELSE
            CUST.REC=''
         END
         OPEN '','EXPENSE.CODES,':CLIENT.ID TO F.EXP THEN
            IF TRK.NO#'' THEN            ; * JMK39
               LOCATE TRACK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRACKPOS THEN     ; * JMK39
                  IF TRK.ARRAY<5,TRACKPOS>#'' THEN           ; * JMK39
                     EXPENSE.CODE=TRK.ARRAY<5,TRACKPOS>      ; * JMK39
                     RETURN              ; * JMK39
                  END                    ; * JMK39
               END                       ; * JMK39
            END                          ; * JMK39
            READ ACCT.REC FROM F.EDI.CAR.ACNT.XREF,'00041*':SHIPPER.NUMBER ELSE ACCT.REC=''          ; * JMK42
            ACCT.CNAME=TRIM(OCONV(ACCT.REC<7>,'MCU'))        ; * JMK42
            ACCT.ADDR=TRIM(OCONV(ACCT.REC<8>,'MCU'))         ; * JMK42
            ACCT.CITY=TRIM(OCONV(ACCT.REC<9>,'MCU'))         ; * JMK42
            ACCT.ST=TRIM(OCONV(ACCT.REC<10>,'MCU'))          ; * JMK42
            ACCT.ZIP=TRIM(OCONV(ACCT.REC<11>,'MCU'))         ; * JMK42
            IF ACCT.ZIP#'' AND NUM(ACCT.ZIP) AND LEN(ACCT.ZIP)>5 THEN
               ACCT.ZIP=ACCT.ZIP[1,5]
            END

            SEND.NAME=TRIM(OCONV(EBILL<1,24>,'MCU'))         ; * JMK42
            SEND.CNAME=TRIM(OCONV(EBILL<1,25>,'MCU'))        ; * JMK42
            SEND.ADDR=TRIM(OCONV(EBILL<1,26>,'MCU'))         ; * JMK42
            SEND.CITY=TRIM(OCONV(EBILL<1,27>,'MCU'))         ; * JMK42
            SEND.ST=TRIM(OCONV(EBILL<1,28>,'MCU'))           ; * JMK42
            SEND.ZIP=TRIM(OCONV(EBILL<1,29>,'MCU'))          ; * JMK42
            IF SEND.ZIP#'' AND NUM(SEND.ZIP) AND LEN(SEND.ZIP)>5 THEN
               SEND.ZIP=SEND.ZIP[1,5]
            END
            IF IOT='O' THEN              ; * JMK42
               FILL.SEND=1               ; * JMK42
               IF SEND.CNAME#'' THEN FILL.SEND=0   ; * JMK42
               IF SEND.ADDR#'' THEN FILL.SEND=0    ; * JMK42
               IF SEND.CITY#'' THEN FILL.SEND=0    ; * JMK42
               IF SEND.ST#'' THEN FILL.SEND=0      ; * JMK42
               IF SEND.ZIP#'' THEN FILL.SEND=0     ; * JMK42
               IF FILL.SEND THEN         ; * JMK42
                  SEND.CNAME=ACCT.CNAME  ; * JMK42
                  SEND.ADDR=ACCT.ADDR    ; * JMK42
                  SEND.CITY=ACCT.CITY    ; * JMK42
                  SEND.ST=ACCT.ST        ; * JMK42
                  SEND.ZIP=ACCT.ZIP      ; * JMK42
               END                       ; * JMK42
               FILL.SEND=1               ; * JMK42
               IF SEND.CNAME#'' THEN FILL.SEND=0   ; * JMK42
               IF SEND.ADDR#'' THEN FILL.SEND=0    ; * JMK42
               IF SEND.CITY#'' THEN FILL.SEND=0    ; * JMK42
               IF SEND.ST#'' THEN FILL.SEND=0      ; * JMK42
               IF SEND.ZIP#'' THEN FILL.SEND=0     ; * JMK42
               IF FILL.SEND THEN         ; * JMK42
                  SEND.CNAME=DIV.NAME    ; * JMK42
                  SEND.ADDR=DIV.ADDR     ; * JMK42
                  SEND.CITY=DIV.CITY     ; * JMK42
                  SEND.ST=DIV.ST         ; * JMK42
                  SEND.ZIP=DIV.ZIP       ; * JMK42
               END                       ; * JMK42
            END                          ; * JMK42
            RECV.NAME=TRIM(OCONV(EBILL<1,30>,'MCU'))         ; * JMK42
            RECV.CNAME=TRIM(OCONV(EBILL<1,31>,'MCU'))        ; * JMK42
            RECV.ADDR=TRIM(OCONV(EBILL<1,32>,'MCU'))         ; * JMK42
            RECV.CITY=TRIM(OCONV(EBILL<1,33>,'MCU'))         ; * JMK42
            RECV.ST=TRIM(OCONV(EBILL<1,34>,'MCU'))           ; * JMK42
            RECV.ZIP=TRIM(OCONV(EBILL<1,35>,'MCU'))          ; * JMK42
            IF RECV.ZIP#'' AND NUM(RECV.ZIP) AND LEN(RECV.ZIP)>5 THEN
               RECV.ZIP=RECV.ZIP[1,5]
            END
            IF IOT='I' THEN              ; * JMK42
               FILL.RECV=1               ; * JMK42
               IF RECV.CNAME#'' THEN FILL.RECV=0   ; * JMK42
               IF RECV.ADDR#'' THEN FILL.RECV=0    ; * JMK42
               IF RECV.CITY#'' THEN FILL.RECV=0    ; * JMK42
               IF RECV.ST#'' THEN FILL.RECV=0      ; * JMK42
               IF RECV.ZIP#'' THEN FILL.RECV=0     ; * JMK42
               IF FILL.RECV THEN         ; * JMK42
                  RECV.CNAME=ACCT.CNAME  ; * JMK42
                  RECV.ADDR=ACCT.ADDR    ; * JMK42
                  RECV.CITY=ACCT.CITY    ; * JMK42
                  RECV.ST=ACCT.ST        ; * JMK42
                  RECV.ZIP=ACCT.ZIP      ; * JMK42
               END                       ; * JMK42
               FILL.RECV=1               ; * JMK42
               IF RECV.CNAME#'' THEN FILL.RECV=0   ; * JMK42
               IF RECV.ADDR#'' THEN FILL.RECV=0    ; * JMK42
               IF RECV.CITY#'' THEN FILL.RECV=0    ; * JMK42
               IF RECV.ST#'' THEN FILL.RECV=0      ; * JMK42
               IF RECV.ZIP#'' THEN FILL.RECV=0     ; * JMK42
               IF FILL.RECV THEN         ; * JMK42
                  RECV.CNAME=DIV.NAME    ; * JMK42
                  RECV.ADDR=DIV.ADDR     ; * JMK42
                  RECV.CITY=DIV.CITY     ; * JMK42
                  RECV.ST=DIV.ST         ; * JMK42
                  RECV.ZIP=DIV.ZIP       ; * JMK42
               END                       ; * JMK42
            END                          ; * JMK42

            BILL.REC=''
            BILL.REC<1>=EBILL<1,23>      ; * BILL.DATE
            BILL.REC<2>=IOT
            BILL.REC<3>='99999'          ; * ORIG ZIP
            IF TRIM(EBILL<1,29>)#'' THEN
               OZIP=EBILL<1,29>[1,5]
               BILL.REC<3>=SEND.ZIP      ; * JMK42
               READV OCNTRY FROM F.ZIPS,OZIP,3 THEN
                  BILL.REC<222>=OCNTRY
               END
            END
            BILL.REC<4>='99999'          ; * DEST ZIP
            IF TRIM(EBILL<1,35>)#'' THEN
               DZIP=EBILL<1,35>[1,5]
               BILL.REC<4>=RECV.ZIP      ; * JMK42
               READV DCNTRY FROM F.ZIPS,DZIP,3 THEN
                  BILL.REC<223>=DCNTRY
               END
            END
            TEMP.DIVISION.ID=LAST.DIVISION.ID      ; * DRF06
            IF SHIPPER.NUMBER='A63A63' THEN        ; * DRF06
*DFCALL ELINE('01706 - CHECK')
               CONSIGNEE.ZIP=AFS.LINE<1,35>
               READ DZIP.DIV.XREF FROM F.ZIP.DIV.XREF,CONSIGNEE.ZIP THEN
                  NUM.OF.ZIPS = DCOUNT(DZIP.DIV.XREF<1>,@VM)
                  IF NUM.OF.ZIPS=1 THEN
                     LAST.DIVISION.ID=DZIP.DIV.XREF<1,1>
                  END ELSE
                     FOUND=0
                     FOR I = 1 TO NUM.OF.ZIPS
                        IF INDEX(AFS.LINE<1,30>,DZIP.DIV.XREF<1,I>[2,4],1) THEN
                           LAST.DIVISION.ID=DZIP.DIV.XREF<1,I>
                           FOUND=1
                        END
                        IF INDEX(AFS.LINE<1,31>,DZIP.DIV.XREF<1,I>[2,4],1) THEN
                           LAST.DIVISION.ID=DZIP.DIV.XREF<1,I>
                           FOUND=1
                        END
                     NEXT I
                     IF FOUND=0 THEN
                        LAST.DIVISION.ID=DZIP.DIV.XREF<1,1>
                     END
                  END
               END ELSE
                  LAST.DIVISION.ID='00001'
               END
            END                          ; * DRF06
            BILL.REC<9>=LAST.DIVISION.ID           ; * DIV
            BILL.REC<25>='ZZ'            ; * ORIG ST
            IF TRIM(EBILL<1,28>)#'' THEN

               BILL.REC<25>=SEND.ST      ; * JMK42
            END
            BILL.REC<26>='ZZ'            ; * DEST ST
            IF TRIM(EBILL<1,34>)#'' THEN

               BILL.REC<26>=RECV.ST      ; * JMK42
            END
            BILL.REC<27>=SEND.CITY
            BILL.REC<119>=''             ; * FLAT RATE FLAG
            EXPENSE.VIN=''
            BEGIN CASE
               CASE IOT='I'
                  EXPENSE.VIN<1>=SEND.CNAME        ; * JMK42
                  IF EXPENSE.VIN<1>='' THEN        ; * JMK42
                     EXPENSE.VIN<1>=SEND.NAME      ; * JMK42
                  END                    ; * JMK42
               CASE IOT='O' OR IOT='T'
                  EXPENSE.VIN<1>=RECV.CNAME        ; * JMK42
                  IF EXPENSE.VIN<1>='' THEN        ; * JMK42
                     EXPENSE.VIN<1>=RECV.NAME      ; * JMK42
                  END                    ; * JMK42
               CASE 1
                  EXPENSE.VIN<1>=EBILL<1,25>
            END CASE
            EXPENSE.VIN<2>=EBILL<1,37>
            EXPENSE.VIN<3>=0
            EXPENSE.VIN<4>=1
            EXPENSE.VIN<5>=PRO.NUMBER
            BEGIN CASE
               CASE AIRGAS               ; * JMK39
                  IF EBILL.REC<1,22>='2' THEN      ; * JMK50
                     BILL.REC<2>='I'     ; * JMK50
                  END                    ; * JMK50
                  IF EBILL.REC<1,22>='3' THEN      ; * JMK50
                     BILL.REC<2>='I'     ; * JMK50
                  END                    ; * JMK50
                  IF EBILL.REC<1,22>='4' THEN      ; * JMK50
                     BILL.REC<2>='I'     ; * JMK50
                  END                    ; * JMK50
                  OZIP=BILL.REC<3>       ; * JMK39
                  READV OREF FROM F.AIRGAS.LOC.ZIP,OZIP,2 ELSE OREF=''           ; * JMK39
                  DZIP=BILL.REC<4>       ; * JMK39
                  READV DREF FROM F.AIRGAS.LOC.ZIP,DZIP,2 ELSE DREF=''           ; * JMK39
                  EXPENSE.VIN<6>=EBILL<1,21>       ; * JMK39 - SERVICE DESCRIPTION
                  EXPENSE.VIN<7>=OREF    ; * JMK39
                  EXPENSE.VIN<8>=DREF    ; * JMK39
                  EXPENSE.VIN<9>=EBILL<1,88>       ; * JMK39 - PKG TYPE
                  EXPENSE.VIN<10>=OCONV(EBILL<1,9>,'MCU')    ; * JMK39 - REFERENCE 1
                  EXPENSE.VIN<11>=OCONV(EBILL<1,10>,'MCU')   ; * JMK39 - REFERENCE 2
                  EXPENSE.VIN<12>=OCONV(EBILL<1,95>,'MCU')   ; * JMK39 - REFERENCE 3
                  EXPENSE.VIN<13>=OCONV(EBILL<1,96>,'MCU')   ; * JMK39 - REFERENCE 4
                  EXPENSE.VIN<14>=OCONV(EBILL<1,97>,'MCU')   ; * JMK39 - REFERENCE 5
                  EXPENSE.VIN<15>=RECV.ADDR        ; * JMK39 - RECEIVER STREET ADDRESS
                  EXPENSE.VIN<16>=SEND.ADDR        ; * JMK39 - SHIPPER STREET ADDRESS
                  EXPENSE.VIN<17>=EBILL<1,20>      ; * JMK39 - Transaction Code
               CASE 1
                  EXPENSE.VIN<6>=EBILL<1,21>
            END CASE
            CALL NEW.GET.EXPENSE(EXPENSE.VIN,CLIENT.ID,CARRIER.ID,BILL.REC,F.EXP,EXPENSE.VOUT)
            IF EXPENSE.VOUT<1>#'' THEN
               EXPENSE.CODE=EXPENSE.VOUT<1>
               IF CLIENT.ID='01706' THEN
                  EXP.VIN=CLIENT.ID
                  EXP.VIN<14>='TRANSLATE'
                  EXP.VIN<15>=EXPENSE.CODE
                  CALL GET.EXPENSE(EXP.VIN,EXP.VOUT)
                  EXPENSE.CODE=EXP.VOUT<1>
                  IF SHIPPER.NUMBER='A63A63' THEN
                     BILL.REC<9>=TEMP.DIVISION.ID
                     LAST.DIVISION.ID=TEMP.DIVISION.ID
                  END
               END
               IF CLIENT.ID='01825' THEN           ; *DRF05
                  IF SHIPPER.NUMBER='1630V6' THEN  ; *DRF05
                     IF RECV.NAME#'' AND RECV.CNAME#'' THEN  ; *DRF05
                        EXPENSE.CODE='00600'       ; *DRF05
                     END                 ; *DRF05
                  END                    ; *DRF05
               END                       ; *DRF05
               IF TRK.NO#'' THEN         ; * JMK39
                  LOCATE TRACK.ID IN TRK.ARRAY<1> BY 'AL' SETTING TRACKPOS THEN  ; * JMK39
                     IF TRK.ARRAY<5,TRACKPOS>='' THEN        ; * JMK39
                        TRK.ARRAY<5,TRACKPOS>=EXPENSE.CODE   ; * JMK39
                     END                 ; * JMK39
                  END                    ; * JMK39
               END                       ; * JMK39
               RETURN
            END

         END
         VIN=''
         VIN<1>=CLIENT.ID                ; * Client
         VIN<2>=LAST.DIVISION.ID         ; * DIVISION.ID
         VIN<3>=DIV.REC<8>               ; *
         VIN<31>=DIV.REC<45>
         VIN<4>=CARRIER.ID               ; * Carrier
         VIN<5>=CARRIER.NAME             ; * Name of carrier
         VIN<6>=CARRIER.MODE             ; * Transportation mode
         VIN<7>=IOT
         BEGIN CASE
            CASE CLIENT.ID='00866'
               VIN<8>='D'                ; * Consignee code
               VIN<9>='Great Plains MFG'           ; * Consignee description
               VIN<22>='04266'           ; * Customer/Vendor ID
            CASE CLIENT.ID='01283'
               VIN<8>=''                 ; * Consignee code
               VIN<9>='SRI'              ; * Consignee description
               VIN<22>=''                ; * Customer/Vendor ID
            CASE 1
               VIN<8>=''                 ; * Consignee code
               VIN<9>=''                 ; * Consignee description
               VIN<22>=''                ; * Customer/Vendor ID
         END CASE
         VIN<10>='99999'                 ; * UPS always uses a zip of 99999
         IF TRIM(EBILL<1,29>)#'' THEN    ; * JMK39
            OZIP=EBILL<1,29>[1,5]        ; * JMK39
            VIN<10>=EBILL<1,29>[1,5]     ; * JMK39
         END                             ; * JMK39
         VIN<11>='ZZ'                    ; * UPS always uses a state of ZZ
         IF TRIM(EBILL<1,28>)#'' THEN    ; * JMK39
            VIN<13>=TRIM(EBILL<1,28>)    ; * JMK39
         END                             ; * JMK39
         VIN<12>='99999'                 ; * UPS always uses a zip of 99999
         IF TRIM(EBILL<1,35>)#'' THEN    ; * JMK39
            DZIP=EBILL<1,35>[1,5]        ; * JMK39
            VIN<12>=EBILL<1,35>[1,5]     ; * JMK39
         END                             ; * JMK39
         VIN<13>='ZZ'                    ; * UPS always uses a state of ZZ
         IF TRIM(EBILL<1,34>)#'' THEN    ; * JMK39
            VIN<13>=TRIM(EBILL<1,34>)    ; * JMK39
         END                             ; * JMK39
         VIN<14>='DEFAULT'               ; * GET.EXPENSE internal operation mode
         VIN<15>=''                      ; * Default expense code
         VIN<16>=0                       ; * Back flag - Is this an input variable?
         VIN<17>=''                      ; * Used for EDI
         VIN<18>=''                      ; * Bill of Lading number - leave blank according to Myra
         VIN<19>= BILL.DATE              ; * Bill date
         IF CARRIER.ID='00015' THEN
            VIN<20>=EBILL<1,4>           ; * Invoice number
         END ELSE
            VIN<20>=''                   ; * All other carriers get null
         END
         VIN<21>=DIV.REC<11>
         VIN<23>=PRO.NUMBER              ; * Pro number
         IF CLIENT.ID='00392' THEN
            VIN<14>='EDI'
         END
         VOUT=''
         CALL GET.EXPENSE(VIN,VOUT)
         EXPENSE.CODE=VOUT<1>
         MULTI.CODE=VOUT<8>
         MULTI.PERCENT=VOUT<9>
         IF CLIENT.ID='00883' THEN       ; * Pollock Paper
            EXPENSE.CODE=LAST.DIVISION.ID[4,2]:'7777777'
         END
         IF CLIENT.ID='00984' THEN       ; * Orscheln
            EXPENSE.CODE='60571'
         END
         IF CLIENT.ID='01000' THEN       ; * Qualico
            EXPENSE.CODE='60571'
         END
         IF CLIENT.ID='01057' THEN       ; *  H & K Dallas
            EXPENSE.CODE='1322'
         END
         IF CLIENT.ID='00919' THEN       ; * Miracle Recreation - Monett
            EXPENSE.CODE='71000-000-6100'
         END
         IF CLIENT.ID='01019' THEN       ; * JMK14
            EXP.LOCATION=OCONV(EBILL<1,10>,'MCU')  ; * JMK14
            BEGIN CASE                   ; * JMK14
               CASE EXP.LOCATION='DALLAS'          ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-01'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-01'        ; * JMK14
                  END                    ; * JMK14
               CASE EXP.LOCATION='EL PASO'         ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-02'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-02'        ; * JMK14
                  END                    ; * JMK14
               CASE EXP.LOCATION='HOUSTON'         ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-03'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-03'        ; * JMK14
                  END                    ; * JMK14
               CASE EXP.LOCATION='SAN ANTONIO'     ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-04'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-04'        ; * JMK14
                  END                    ; * JMK14
               CASE EXP.LOCATION='GEORGIA'         ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-05'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-05'        ; * JMK14
                  END                    ; * JMK14
               CASE EXP.LOCATION='LOUISIANA'       ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-06'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-06'        ; * JMK14
                  END                    ; * JMK14
               CASE EXP.LOCATION='OKLAHOMA'        ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-07'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-07'        ; * JMK14
                  END                    ; * JMK14
               CASE 1                    ; * JMK14
                  IF IOT='I' THEN        ; * JMK14
                     EXPENSE.CODE='5100-':LAST.DIVISION.ID'R%2'        ; * JMK14
                  END ELSE               ; * JMK14
                     EXPENSE.CODE='5120-':LAST.DIVISION.ID'R%2'        ; * JMK14
                  END                    ; * JMK14
            END CASE                     ; * JMK14
         END                             ; * JMK14

         IF CLIENT.ID='01511' AND SHIPPER.NUMBER='56472W' THEN
            EXPENSE.CODE='01-00-01-6210000'
         END
         IF CLIENT.ID='00978' THEN       ; * Enpro/Garlock Palmyra
            EXPENSE.CODE='MLD'
         END

         IF CLIENT.ID='01777' THEN       ; * Stemco Kaiser
            REF1=EBILL<1,9>
            REF2=EBILL<1,10>
            BEGIN CASE
               CASE IOT='I'
                  EXPENSE.CODE='510-000'
               CASE REF1='FWS'
                  EXPENSE.CODE='652-000'
               CASE REF1='FPP'
                  EXPENSE.CODE='501-400'
               CASE REF1='FPA'
                  EXPENSE.CODE='501-300'
               CASE 1
                  EXPENSE.CODE='999-999'
            END CASE
         END
         IF CLIENT.ID='01675' AND EXPENSE.CODE='' THEN       ; * JMK15
            BEGIN CASE                   ; * JMK15
               CASE IOT='I'              ; * JMK15
                  EXPENSE.CODE='5150022'           ; * JMK15
               CASE IOT='O' OR IOT='T'   ; * JMK15
                  EXPENSE.CODE='5150023'           ; * JMK15
            END CASE                     ; * JMK15
         END                             ; * JMK15

         IF CLIENT.ID='01357' THEN       ; * JMK17
            CLIENT.REF=EBILL<1,11>       ; * JMK17
            IF CLIENT.REF='' THEN CLIENT.REF=EBILL<1,10>     ; * JMK17
            IF CLIENT.REF[1,3]='PO#' THEN CLIENT.REF=EBILL<1,10>       ; * JMK17
            CLIENT.REF=OCONV(CLIENT.REF,'MCU')     ; * JMK17
            IF CLIENT.REF[1,4]='BOL#' THEN CLIENT.REF=CLIENT.REF[5,999]          ; * JMK17
            IF CLIENT.REF[1,5]='BOL# ' THEN CLIENT.REF=CLIENT.REF[6,999]         ; * JMK17
            IF CLIENT.REF[1,6]='BOL # ' THEN CLIENT.REF=CLIENT.REF[7,999]        ; * JMK17
            CLIENT.REF=TRIM(CLIENT.REF)  ; * JMK17
            BEGIN CASE                   ; * JMK17
               CASE LAST.DIVISION.ID='00001'       ; * JMK17
                  BEGIN CASE             ; * JMK17
                     CASE CLIENT.REF[1,2]='KB'     ; * JMK17
                        EXPENSE.CODE='6203-KB'     ; * JMK17
                     CASE CLIENT.REF[1,2]='OR'     ; * JMK17
                        EXPENSE.CODE='6203-OR'     ; * JMK17
                     CASE CLIENT.REF[1,2]='RV'     ; * JMK17
                        EXPENSE.CODE='6203-RV'     ; * JMK17
                     CASE 1              ; * JMK17
                        EXPENSE.CODE='6203-UN'     ; * JMK17
                  END CASE               ; * JMK17
               CASE LAST.DIVISION.ID='00002'       ; * JMK17
                  BEGIN CASE             ; * JMK17
                     CASE CLIENT.REF[1,2]='AA'     ; * JMK17
                        EXPENSE.CODE='6203-AA'     ; * JMK17
                     CASE CLIENT.REF[1,2]='GQ'     ; * JMK17
                        EXPENSE.CODE='6203-GQ'     ; * JMK17
                     CASE CLIENT.REF[1,2]='GH'     ; * JMK17
                        EXPENSE.CODE='6203-GH'     ; * JMK17
                     CASE CLIENT.REF[1,2]='PC'     ; * JMK17
                        EXPENSE.CODE='6203-PC'     ; * JMK17
                     CASE CLIENT.REF[1,2]='AS'     ; * JMK17
                        EXPENSE.CODE='6203-AS'     ; * JMK17
                     CASE CLIENT.REF[1,2]='AM'     ; * JMK17
                        EXPENSE.CODE='6203-AM'     ; * JMK17
                     CASE CLIENT.REF[1,2]='SA'     ; * JMK17
                        EXPENSE.CODE='6203-SA'     ; * JMK17
                     CASE CLIENT.REF[1,2]='EN'     ; * JMK17
                        EXPENSE.CODE='6203-EN'     ; * JMK17
                     CASE 1              ; * JMK17
                        EXPENSE.CODE='6203-UN'     ; * JMK17
                  END CASE               ; * JMK17
            END CASE                     ; * JMK17
EOE.01357:*                              ; * JMK17
         END                             ; * JMK17
         IF CLIENT.ID='01639' THEN       ; * JMK17
            EXP.CITY=EBILL<1,27>         ; * JMK17
            BEGIN CASE
               CASE OCONV(EXP.CITY,'MCU')='LYNCHBURG'
                  EXPENSE.CODE='60100-250'
               CASE OCONV(EXP.CITY,'MCU')='DALLAS'
                  EXPENSE.CODE='60100-280'
               CASE OCONV(EXP.CITY,'MCU')='WINTER HAVEN'
                  EXPENSE.CODE='60100-260'
               CASE OCONV(EXP.CITY,'MCU')='PHOENIX'
                  EXPENSE.CODE='60100-270'
               CASE OCONV(EXP.CITY,'MCU')='JANESVILLE'
                  EXPENSE.CODE='60100-377'
               CASE 1
                  EXPENSE.CODE='60100-250'
            END CASE                     ; * JMK17
         END                             ; * JMK17

         IF CLIENT.ID='01826' AND EXPENSE.CODE='' THEN
            BEGIN CASE
               CASE SHIPPER.NUMBER='Y83Y22' AND (IOT='O' OR IOT='T')
                  EXPENSE.CODE='500275-25'
               CASE EBILL<1,88>='LTR'
                  EXPENSE.CODE='500750-552'
               CASE IOT='O' OR IOT='T'
                  EXPENSE.CODE='500275-551'
               CASE IOT='I'
                  EXPENSE.CODE='120000-RAW'
            END CASE
         END
         IF CLIENT.ID='01706' THEN
            DIVISION.ID.HOLD=DIVISION.ID
            DIVISION.ID=LAST.DIVISION.ID
            GOSUB COMPUTE.01706.EXP.CODE
            DIVISION.ID=DIVISION.ID.HOLD
         END
         DTAB=''
         IF MULTI.CODE#'' THEN
            DTAB<1>=MULTI.CODE
            ACTUAL.CHG=EBILL<1,37>
            CODE.COUNTER=DCOUNT(DTAB<1>,@VM)
            CODE.ACC = 0
            FOR XX = 1 TO CODE.COUNTER-1
               DTAB<3,XX> = OCONV(ACTUAL.CHG*MULTI.PERCENT<1,XX>/10000,'MR0')
               CODE.ACC = CODE.ACC + DTAB<3,XX>
            NEXT XX
            DTAB<3,CODE.COUNTER>=ACTUAL.CHG-CODE.ACC
            CHANGE.EXP=0
         END

         RETURN
*
*********************************************************************************
COMPUTE.01706.EXP.CODE:
********************************************************************************
*DFIF USER='DAVID' THEN CALL ELINE('01706 - CHECK')
         TEMP.DIVISION.ID=DIVISION.ID    ; * DRF06
         IF SHIPPER.NUMBER='A63A63' THEN           ; * DRF06
*DFCALL ELINE('01706 - CHECK')
            CONSIGNEE.ZIP=AFS.LINE<1,35>
            READ DZIP.DIV.XREF FROM F.ZIP.DIV.XREF,CONSIGNEE.ZIP THEN
               NUM.OF.ZIPS = DCOUNT(DZIP.DIV.XREF<1>,@VM)
               IF NUM.OF.ZIPS=1 THEN
                  DIVISION.ID=DZIP.DIV.XREF<1,1>
               END ELSE
                  FOUND=0
                  FOR I = 1 TO NUM.OF.ZIPS
                     IF INDEX(AFS.LINE<1,30>,DZIP.DIV.XREF<I>[2,4],1) THEN
                        DIVISION.ID=DZIP.DIV.XREF<1,I>
                        FOUND=1
                     END
                     IF INDEX(AFS.LINE<1,31>,DZIP.DIV.XREF<I>[2,4],1) THEN
                        DIVISION.ID=DZIP.DIV.XREF<1,I>
                        FOUND=1
                     END
                  NEXT I
                  IF FOUND=0 THEN
                     DIVISION.ID=DZIP.DIV.XREF<1,1>
                  END
               END
            END
         END                             ; * DRF06
         READV DIV.REGION FROM F.DIV,DIVISION.ID,45 ELSE DIV.REGION=''
         EXPENSE.CODE=''
         BEGIN CASE
            CASE DIV.REGION='DCNT'
               BEGIN CASE
                  CASE DIVISION.ID='00365' OR DIVISION.ID='01002' OR DIVISION.ID='01022' OR DIVISION.ID='01035' OR DIVISION.ID='01204' OR DIVISION.ID='02021' OR DIVISION.ID='02030' OR DIVISION.ID='02033' OR DIVISION.ID='02301' OR DIVISION.ID='02302' OR DIVISION.ID='02303' OR DIVISION.ID='02305' OR DIVISION.ID='02306' OR DIVISION.ID='02312' OR DIVISION.ID='02313' OR DIVISION.ID='02318' OR DIVISION.ID='02403' OR DIVISION.ID='02406' OR DIVISION.ID='02413'OR DIVISION.ID='02440' OR DIVISION.ID='02441' OR DIVISION.ID='02442' OR DIVISION.ID='02443' OR DIVISION.ID='02446' OR DIVISION.ID='02452' OR DIVISION.ID='02470' OR DIVISION.ID='02471' OR DIVISION.ID='02475' OR DIVISION.ID='02490' OR DIVISION.ID='02500' OR DIVISION.ID='02501' OR DIVISION.ID='02502' OR DIVISION.ID='02505' OR DIVISION.ID='02510' OR DIVISION.ID='02511' OR DIVISION.ID='02512' OR DIVISION.ID='02514' OR DIVISION.ID='02518' OR DIVISION.ID='02520' OR DIVISION.ID='02530' OR DIVISION.ID='02534' OR DIVISION.ID='02536' OR DIVISION.ID='02540' OR DIVISION.ID='02542' OR DIVISION.ID='02543' OR DIVISION.ID='02548' OR DIVISION.ID='02550' OR DIVISION.ID='02555' OR DIVISION.ID='02559' OR DIVISION.ID='02599' OR DIVISION.ID='02560' OR DIVISION.ID='02565' OR DIVISION.ID='02566' OR DIVISION.ID='02569' OR DIVISION.ID='02570' OR DIVISION.ID='02572' OR DIVISION.ID='02573' OR DIVISION.ID='02575' OR DIVISION.ID='02582' OR DIVISION.ID='02585' OR DIVISION.ID='02586' OR DIVISION.ID='02587' OR DIVISION.ID='02588' OR DIVISION.ID='02677' OR DIVISION.ID='02842' OR DIVISION.ID='02881' OR DIVISION.ID='02882' OR DIVISION.ID='02883' OR DIVISION.ID='02999'
                     BEGIN CASE
                        CASE IOT='I'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE IOT='O'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                        CASE IOT='T'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                           IF DIVISION.ID='02677' THEN
                              EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732600'
                           END
                     END CASE
                  CASE DIVISION.ID='00311' OR DIVISION.ID='00351' OR DIVISION.ID='00353' OR DIVISION.ID='00367' OR DIVISION.ID='00411' OR DIVISION.ID='00511' OR DIVISION.ID='01003' OR DIVISION.ID='01004' OR DIVISION.ID='01006' OR DIVISION.ID='01010' OR DIVISION.ID='01012' OR DIVISION.ID='01013' OR DIVISION.ID='01014' OR DIVISION.ID='01019' OR DIVISION.ID='01020' OR DIVISION.ID='01023' OR DIVISION.ID='01025' OR DIVISION.ID='01026' OR DIVISION.ID='01027' OR DIVISION.ID='01029'OR DIVISION.ID='01030' OR DIVISION.ID='01031' OR DIVISION.ID='01032' OR DIVISION.ID='01034' OR DIVISION.ID='01042' OR DIVISION.ID='01043' OR DIVISION.ID='01044' OR DIVISION.ID='01045' OR DIVISION.ID='01052' OR DIVISION.ID='01053' OR DIVISION.ID='01054' OR DIVISION.ID='01055' OR DIVISION.ID='01056' OR DIVISION.ID='01057' OR DIVISION.ID='01058' OR DIVISION.ID='01059' OR DIVISION.ID='01060' OR DIVISION.ID='01062' OR DIVISION.ID='01063' OR DIVISION.ID='01064' OR DIVISION.ID='01065' OR DIVISION.ID='01068' OR DIVISION.ID='01070' OR DIVISION.ID='01071' OR DIVISION.ID='01073' OR DIVISION.ID='01075' OR DIVISION.ID='01076' OR DIVISION.ID='01077' OR DIVISION.ID='01078' OR DIVISION.ID='01079' OR DIVISION.ID='01081' OR DIVISION.ID='01082' OR DIVISION.ID='01090' OR DIVISION.ID='01091' OR DIVISION.ID='01098' OR DIVISION.ID='01421' OR DIVISION.ID='01446' OR DIVISION.ID='01483' OR DIVISION.ID='02354' OR DIVISION.ID='02355' OR DIVISION.ID='02472' OR DIVISION.ID='02491' OR DIVISION.ID='03703'
                     BEGIN CASE
                        CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0311'
                           EXPENSE.CODE='0311.021.732800'
                        CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0351'
                           EXPENSE.CODE='0351.021.732800'
                        CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0353'
                           EXPENSE.CODE='0353.021.732800'
                        CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0411'
                           EXPENSE.CODE='0411.021.732800'
                        CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='1098'
                           EXPENSE.CODE='1098.021.732800'
                        CASE EBILL<1,3>='053EW4'
                           CHECK.TEMP = EBILL<1,9>[1,4]
                           CHECK.TEMP='0':CHECK.TEMP
                           LOCATE CHECK.TEMP IN DIVISION.ID.CODES.00918<1> BY 'AR' SETTING POS THEN
                              EXPENSE.CODE=EBILL<1,9>[1,4]:'.021.732550'
                           END ELSE
                              EXPENSE.CODE='99999'
                           END
                        CASE DIVISION.ID='01070'
                           EXPENSE.CODE='1070.021.132400'
                        CASE IOT='O' AND TRIM(OCONV(EBILL<1,76>,'MCU'))[1,5]='REXEL'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                           IF EBILL<1,35>[1,5]='39305' THEN
                              EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                           END
                        CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                           IF EBILL<1,35>[1,5]='39305' THEN
                              EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                           END
                        CASE IOT='I'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                           BEGIN CASE
                              CASE DIVISION.ID='01020'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02355'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02470'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02471'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02472'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02475'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02490'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02491'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='01009'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='01012'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='01023'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='01025'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='01026'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='01029'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02485'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02481'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02482'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02483'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                              CASE DIVISION.ID='02484'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                           END CASE
                        CASE IOT='O'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                        CASE IOT='T'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                           BEGIN CASE
                              CASE DIVISION.ID='01020'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02355'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02470'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02471'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02472'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02475'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02490'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02491'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='01009'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='01012'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='01023'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='01025'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='01026'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='01029'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02485'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02481'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02482'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02483'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                              CASE DIVISION.ID='02484'
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                           END CASE
                     END CASE
                  CASE DIVISION.ID='03210' OR DIVISION.ID='03212' OR DIVISION.ID='03213' OR DIVISION.ID='03214' OR DIVISION.ID='03216' OR DIVISION.ID='03221' OR DIVISION.ID='03222' OR DIVISION.ID='03223' OR DIVISION.ID='03224' OR DIVISION.ID='03225' OR DIVISION.ID='03227' OR DIVISION.ID='03251' OR DIVISION.ID='03252' OR DIVISION.ID='03253' OR DIVISION.ID='03255' OR DIVISION.ID='03256' OR DIVISION.ID='03257' OR DIVISION.ID='03258' OR DIVISION.ID='03260' OR DIVISION.ID='03261' OR DIVISION.ID='03286' OR DIVISION.ID='03275'
                     BEGIN CASE
                        CASE (IOT='O' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL') OR (IOT='T' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL')
                           BEGIN CASE
                              CASE EBILL<1,35>[1,5]='80010' OR EBILL<1,35>[1,5]='80011'
                                 DIVISION.ID='03225'
                              CASE EBILL<1,35>[1,5]='80027'
                                 IF OCONV(EBILL<1,32>,'MCU')[1,5]='280 S' THEN
                                    DIVISION.ID='03216'
                                 END ELSE
                                    IF OCONV(EBILL<1,32>,'MCU')[1,5]='320 N' THEN
                                       DIVISION.ID='03275'
                                    END ELSE
                                       FAILURE=1
                                    END
                                 END
                              CASE EBILL<1,35>[1,5]='80104' OR EBILL<1,35>[1,5]='80109'
                                 DIVISION.ID='03222'
                              CASE EBILL<1,35>[1,5]='80204'
                                 DIVISION.ID='03210'
                              CASE EBILL<1,35>[1,5]='80488' OR EBILL<1,35>[1,5]='80487'
                                 DIVISION.ID='03257'
                              CASE EBILL<1,35>[1,5]='80498'
                                 DIVISION.ID='03258'
                              CASE EBILL<1,35>[1,5]='80501' OR EBILL<1,35>[1,5]='80301'
                                 IF OCONV(EBILL<1,32>,'MCU')[1,4]='11 S' THEN
                                    DIVISION.ID='03252'
                                 END ELSE
                                    IF OCONV(EBILL<1,32>,'MCU')[1,6]='3095 S' THEN
                                       DIVISION.ID='03253'
                                    END ELSE
                                       FAILURE=1
                                    END
                                 END
                              CASE EBILL<1,35>[1,5]='80524'
                                 DIVISION.ID='03214'
                              CASE EBILL<1,35>[1,5]='80525'
                                 DIVISION.ID='03256'
                              CASE EBILL<1,35>[1,5]='80537'
                                 IF OCONV(EBILL<1,32>,'MCU')[1,5]='312 N' THEN
                                    DIVISION.ID='03251'
                                 END ELSE
                                    IF OCONV(EBILL<1,32>,'MCU')[1,5]='320 N' THEN
                                       DIVISION.ID='03275'
                                    END ELSE
                                       FAILURE=1
                                    END
                                 END
                              CASE EBILL<1,35>[1,5]='80631'
                                 DIVISION.ID='03255'
                              CASE EBILL<1,35>[1,5]='80915'
                                 IF OCONV(TRIM(EBILL<1,32>),'MCU')[1,6]='6125 O' THEN
                                    DIVISION.ID='03224'
                                 END ELSE
                                    IF OCONV(EBILL<1,32>,'MCU')[1,6]='6005 O' THEN
                                       DIVISION.ID='03260'
                                    END ELSE
                                       IF OCONV(EBILL<1,32>,'MCU')[1,6]='1450 V' THEN
                                          DIVISION.ID='03224'
                                       END ELSE
                                          FAILURE=1
                                       END
                                    END
                                 END
                              CASE EBILL<1,35>[1,5]='81003'
                                 IF OCONV(TRIM(EBILL<1,32>),'MCU')[1,5]='230 S' OR OCONV(TRIM(EBILL<1,32>),'MCU')[1,5]='231 S' THEN
                                    DIVISION.ID='03223'
                                 END ELSE
                                    IF OCONV(EBILL<1,32>,'MCU')[1,5]='117 E' THEN
                                       DIVISION.ID='03261'
                                    END ELSE
                                       FAILURE=1
                                    END
                                 END
                              CASE EBILL<1,35>[1,5]='81006'
                                 DIVISION.ID='03223'
                              CASE EBILL<1,35>[1,5]='81007'
                                 DIVISION.ID='03261'
                              CASE EBILL<1,35>[1,5]='81212'
                                 DIVISION.ID='03221'
                              CASE EBILL<1,35>[1,5]='81501' OR EBILL<1,35>[1,5]='81505'
                                 DIVISION.ID='03213'
                              CASE EBILL<1,35>[1,5]='82070'
                                 DIVISION.ID='03227'
                              CASE EBILL<1,35>[1,5]='82601'
                                 DIVISION.ID='03212'
                              CASE 1
                                 EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                           END CASE
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                        CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                        CASE IOT='I'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                        CASE IOT='O'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                        CASE IOT='T'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                     END CASE
               END CASE
            CASE DIV.REGION='DSEA'
               BEGIN CASE
                  CASE IOT='O' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                     IF EBILL<1,35>[1,5]='39305' THEN
                        EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                     END
                  CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                     IF EBILL<1,35>[1,5]='39305' THEN
                        EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                     END
                  CASE IOT='I'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                     BEGIN CASE
                        CASE DIVISION.ID='01103'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01109'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01111'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01112'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01120'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01121'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01123'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01124'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01127'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01128'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01130'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01130'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01143'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01145'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01170'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01166'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01178'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01508'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01583'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                     END CASE
                  CASE IOT='O'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                  CASE IOT='T'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                     BEGIN CASE
                        CASE DIVISION.ID='01103'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01109'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01111'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01112'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01120'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01121'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01123'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01124'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01127'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01128'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01130'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01130'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01143'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01145'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01170'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01166'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01178'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01508'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01583'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                     END CASE
               END CASE
            CASE DIV.REGION='DWST'
               BEGIN CASE
                  CASE IOT='I'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                  CASE IOT='O'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                  CASE IOT='T'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
               END CASE
            CASE DIV.REGION='DNAD'
               BEGIN CASE
                  CASE IOT='O' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                  CASE IOT='O'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                  CASE IOT='T'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
               END CASE
            CASE DIV.REGION='DNWE'
               BEGIN CASE
                  CASE IOT='O' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                  CASE IOT='O'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                  CASE IOT='T'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550650'
               END CASE
            CASE DIV.REGION='DMTN'
               BEGIN CASE
                  CASE (IOT='O' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL') OR (IOT='T' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL')
                     BEGIN CASE
                        CASE EBILL<1,35>[1,5]='80010' OR EBILL<1,35>[1,5]='80011'
                           DIVISION.ID='03225'
                        CASE EBILL<1,35>[1,5]='80027'
                           IF OCONV(EBILL<1,32>,'MCU')[1,5]='280 S' THEN
                              DIVISION.ID='03216'
                           END ELSE
                              IF OCONV(EBILL<1,32>,'MCU')[1,5]='320 N' THEN
                                 DIVISION.ID='03275'
                              END ELSE
                                 FAILURE=1
                              END
                           END
                        CASE EBILL<1,35>[1,5]='80104' OR EBILL<1,35>[1,5]='80109'
                           DIVISION.ID='03222'
                        CASE EBILL<1,35>[1,5]='80204'
                           DIVISION.ID='03210'
                        CASE EBILL<1,35>[1,5]='80488' OR EBILL<1,35>[1,5]='80487'
                           DIVISION.ID='03257'
                        CASE EBILL<1,35>[1,5]='80498'
                           DIVISION.ID='03258'
                        CASE EBILL<1,35>[1,5]='80501' OR EBILL<1,35>[1,5]='80301'
                           IF OCONV(EBILL<1,32>,'MCU')[1,4]='11 S' THEN
                              DIVISION.ID='03252'
                           END ELSE
                              IF OCONV(EBILL<1,32>,'MCU')[1,6]='3095 S' THEN
                                 DIVISION.ID='03253'
                              END ELSE
                                 FAILURE=1
                              END
                           END
                        CASE EBILL<1,35>[1,5]='80524'
                           DIVISION.ID='03214'
                        CASE EBILL<1,35>[1,5]='80525'
                           DIVISION.ID='03256'
                        CASE EBILL<1,35>[1,5]='80537'
                           IF OCONV(EBILL<1,32>,'MCU')[1,5]='312 N' THEN
                              DIVISION.ID='03251'
                           END ELSE
                              IF OCONV(EBILL<1,32>,'MCU')[1,5]='320 N' THEN
                                 DIVISION.ID='03275'
                              END ELSE
                                 FAILURE=1
                              END
                           END
                        CASE EBILL<1,35>[1,5]='80631'
                           DIVISION.ID='03255'
                        CASE EBILL<1,35>[1,5]='80915'
                           IF OCONV(TRIM(EBILL<1,32>),'MCU')[1,6]='6125 O' THEN
                              DIVISION.ID='03224'
                           END ELSE
                              IF OCONV(EBILL<1,32>,'MCU')[1,6]='6005 O' THEN
                                 DIVISION.ID='03260'
                              END ELSE
                                 FAILURE=1
                              END
                           END
                        CASE EBILL<1,35>[1,5]='81003'
                           IF OCONV(TRIM(EBILL<1,32>),'MCU')[1,5]='230 S' OR OCONV(TRIM(EBILL<1,32>),'MCU')[1,5]='231 S' THEN
                              DIVISION.ID='03223'
                           END ELSE
                              IF OCONV(EBILL<1,32>,'MCU')[1,5]='117 E' THEN
                                 DIVISION.ID='03261'
                              END ELSE
                                 FAILURE=1
                              END
                           END
                        CASE EBILL<1,35>[1,5]='81006'
                           DIVISION.ID='03223'
                        CASE EBILL<1,35>[1,5]='81007'
                           DIVISION.ID='03261'
                        CASE EBILL<1,35>[1,5]='81212'
                           DIVISION.ID='03221'
                        CASE EBILL<1,35>[1,5]='81501' OR EBILL<1,35>[1,5]='81505'
                           DIVISION.ID='03213'
                        CASE EBILL<1,35>[1,5]='82070'
                           DIVISION.ID='03227'
                        CASE EBILL<1,35>[1,5]='82601'
                           DIVISION.ID='03212'
                        CASE 1
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                     END CASE
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                  CASE IOT='O'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                  CASE IOT='T'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
               END CASE
            CASE DIV.REGION='DSTH'
               BEGIN CASE
                  CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0311'
                     EXPENSE.CODE='0311.021.732800'
                  CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0351'
                     EXPENSE.CODE='0351.021.732800'
                  CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0353'
                     EXPENSE.CODE='0353.021.732800'
                  CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='0411'
                     EXPENSE.CODE='0411.021.732800'
                  CASE EBILL<1,3>='053EW4' AND EBILL<1,9>[1,4]='1098'
                     EXPENSE.CODE='1098.021.732800'
                  CASE EBILL<1,3>='053EW4'
                     CHECK.TEMP = EBILL<1,9>[1,4]
                     CHECK.TEMP='0':CHECK.TEMP
                     LOCATE CHECK.TEMP IN DIVISION.ID.CODES.00918<1> BY 'AR' SETTING POS THEN
                        EXPENSE.CODE=EBILL<1,9>[1,4]:'.021.732550'
                     END ELSE
                        EXPENSE.CODE='99999'
                     END
                  CASE DIVISION.ID='01070'
                     EXPENSE.CODE='1070.021.132400'
                  CASE IOT='O' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                     IF EBILL<1,35>[1,5]='39305' THEN
                        EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                     END
                  CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                     IF EBILL<1,35>[1,5]='39305' THEN
                        EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                     END
                  CASE IOT='I'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                     BEGIN CASE
                        CASE DIVISION.ID='01020'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02355'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02470'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02471'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02472'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02475'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02490'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02491'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01009'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01012'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01023'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01025'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01026'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='01029'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02485'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02481'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02482'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02483'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                        CASE DIVISION.ID='02484'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                     END CASE
                  CASE IOT='O'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                  CASE IOT='T'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                     BEGIN CASE
                        CASE DIVISION.ID='01020'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02355'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02470'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02471'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02472'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02475'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02490'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02491'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01009'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01012'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01023'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01025'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01026'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='01029'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02485'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02481'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02482'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02483'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                        CASE DIVISION.ID='02484'
                           EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                     END CASE
               END CASE
            CASE DIV.REGION='CORP'
               BEGIN CASE
                  CASE 1
                     EXPENSE.CODE='0810.040.742600'
               END CASE
            CASE DIV.REGION='RH'
               EXPENSE.CODE='0600.040.742600'
            CASE DIV.REGION='DNEA'
               BEGIN CASE
                  CASE IOT='I'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'
                     CODE.EXP=0
                     IF DIVISION.ID='04003' THEN CODE.EXP=1
                     IF DIVISION.ID='04004' THEN CODE.EXP=1
                     IF DIVISION.ID='04005' THEN CODE.EXP=1
                     IF DIVISION.ID='04006' THEN CODE.EXP=1
                     IF DIVISION.ID='04007' THEN CODE.EXP=1
                     IF DIVISION.ID='04009' THEN CODE.EXP=1
                     IF DIVISION.ID='04012' THEN CODE.EXP=1
                     IF DIVISION.ID='04013' THEN CODE.EXP=1
                     IF DIVISION.ID='04017' THEN CODE.EXP=1
                     IF DIVISION.ID='04020' THEN CODE.EXP=1
                     IF DIVISION.ID='04021' THEN CODE.EXP=1
                     IF DIVISION.ID='04023' THEN CODE.EXP=1
                     IF DIVISION.ID='04026' THEN CODE.EXP=1
                     IF DIVISION.ID='04027' THEN CODE.EXP=1
                     IF DIVISION.ID='04028' THEN CODE.EXP=1
                     IF DIVISION.ID='04033' THEN CODE.EXP=1
                     IF DIVISION.ID='04035' THEN CODE.EXP=1
                     IF CODE.EXP THEN
                        EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550650'
                     END
                  CASE IOT='O'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'
                     CODE.EXP=0
                     IF DIVISION.ID='04001' THEN CODE.EXP=1
                     IF DIVISION.ID='04002' THEN CODE.EXP=1
                     IF DIVISION.ID='04003' THEN CODE.EXP=1
                     IF DIVISION.ID='04004' THEN CODE.EXP=1
                     IF DIVISION.ID='04005' THEN CODE.EXP=1
                     IF DIVISION.ID='04006' THEN CODE.EXP=1
                     IF DIVISION.ID='04007' THEN CODE.EXP=1
                     IF DIVISION.ID='04008' THEN CODE.EXP=1
                     IF DIVISION.ID='04009' THEN CODE.EXP=1
                     IF DIVISION.ID='04012' THEN CODE.EXP=1
                     IF DIVISION.ID='04013' THEN CODE.EXP=1
                     IF DIVISION.ID='04014' THEN CODE.EXP=1
                     IF DIVISION.ID='04015' THEN CODE.EXP=1
                     IF DIVISION.ID='04016' THEN CODE.EXP=1
                     IF DIVISION.ID='04017' THEN CODE.EXP=1
                     IF DIVISION.ID='04018' THEN CODE.EXP=1
                     IF DIVISION.ID='04020' THEN CODE.EXP=1
                     IF DIVISION.ID='04021' THEN CODE.EXP=1
                     IF DIVISION.ID='04023' THEN CODE.EXP=1
                     IF DIVISION.ID='04024' THEN CODE.EXP=1
                     IF DIVISION.ID='04026' THEN CODE.EXP=1
                     IF DIVISION.ID='04027' THEN CODE.EXP=1
                     IF DIVISION.ID='04028' THEN CODE.EXP=1
                     IF DIVISION.ID='04030' THEN CODE.EXP=1
                     IF DIVISION.ID='04032' THEN CODE.EXP=1
                     IF DIVISION.ID='04033' THEN CODE.EXP=1
                     IF DIVISION.ID='04034' THEN CODE.EXP=1
                     IF DIVISION.ID='04035' THEN CODE.EXP=1
                     IF DIVISION.ID='04042' THEN CODE.EXP=1
                     IF DIVISION.ID='04043' THEN CODE.EXP=1
                     IF CODE.EXP THEN
                        EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550650'
                     END
                  CASE IOT='T'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'
                     CODE.EXP=0
                     IF DIVISION.ID='04003' THEN CODE.EXP=1
                     IF DIVISION.ID='04004' THEN CODE.EXP=1
                     IF DIVISION.ID='04005' THEN CODE.EXP=1
                     IF DIVISION.ID='04006' THEN CODE.EXP=1
                     IF DIVISION.ID='04007' THEN CODE.EXP=1
                     IF DIVISION.ID='04009' THEN CODE.EXP=1
                     IF DIVISION.ID='04012' THEN CODE.EXP=1
                     IF DIVISION.ID='04013' THEN CODE.EXP=1
                     IF DIVISION.ID='04017' THEN CODE.EXP=1
                     IF DIVISION.ID='04020' THEN CODE.EXP=1
                     IF DIVISION.ID='04021' THEN CODE.EXP=1
                     IF DIVISION.ID='04023' THEN CODE.EXP=1
                     IF DIVISION.ID='04026' THEN CODE.EXP=1
                     IF DIVISION.ID='04027' THEN CODE.EXP=1
                     IF DIVISION.ID='04028' THEN CODE.EXP=1
                     IF DIVISION.ID='04033' THEN CODE.EXP=1
                     IF DIVISION.ID='04035' THEN CODE.EXP=1
                     IF CODE.EXP THEN
                        EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550650'
                     END
               END CASE
            CASE DIV.REGION='DECT' OR DIV.REGION='DFLA' OR DIV.REGION='DMID'OR DIV.REGION='DSCE' OR DIV.REGION='DWTC'    ; * NPR05
               BEGIN CASE                ; * NPR05
                  CASE CARRIER.MODE=4 OR CARRIER.MODE=11     ; * NPR05
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732600'       ; * NPR05
                  CASE IOT='O' AND TRIM(OCONV(EBILL<1,31>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I' AND TRIM(OCONV(EBILL<1,25>,'MCU'))[1,5]='REXEL'
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732700'
                  CASE IOT='I' AND CARRIER.ID='00041'        ; * NPR05
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'       ; * NPR05
                  CASE IOT='O' AND CARRIER.ID='00041'        ; * NPR05
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'       ; * NPR05
                  CASE IOT='T' AND CARRIER.ID='00041'        ; * NPR05
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'       ; * NPR05
                  CASE IOT='I'           ; * NPR05
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.000.550600'       ; * NPR05
                  CASE IOT='O'           ; * NPR05
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732550'       ; * NPR05
                  CASE IOT='T'           ; * NPR05
                     EXPENSE.CODE=DIVISION.ID[2,4]:'.021.732650'       ; * NPR05
               END CASE                  ; * NPR05
            CASE 1
               FAILURE = 1
         END CASE
         EXP.VIN=CLIENT.ID
         EXP.VIN<14>='TRANSLATE'
         EXP.VIN<15>=EXPENSE.CODE
         CALL GET.EXPENSE(EXP.VIN,EXP.VOUT)
         EXPENSE.CODE=EXP.VOUT<1>
         DIVISION.ID=TEMP.DIVISION.ID
         RETURN

********************************************************************************
PUT.IN.HOLD:
********************************************************************************

         OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
            CRT "CANNOT OPEN BILLDATA.EBILL"
            GO SKIP.EBILL
         END
         OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.ID TO OUTSEQ.FILE ELSE
            CREATE OUTSEQ.FILE ELSE
               GO SKIP.EBILL
            END
         END
         OPENSEQ 'BILLDATA.EBILL.DATA', EBILL.ID TO OUTSEQ.FILE2 ELSE
            CREATE OUTSEQ.FILE2 ELSE
               GO SKIP.EBILL
            END
         END
         INSEQ.DONE1 = 0
         LOOP
         UNTIL INSEQ.DONE1 DO
            READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
            WRITESEQ EBILL.REC ON OUTSEQ.FILE ELSE NULL
            WRITESEQ EBILL.REC ON OUTSEQ.FILE2 ELSE NULL
         REPEAT
         CLOSESEQ OUTSEQ.FILE
         CLOSESEQ OUTSEQ.FILE2
         CLOSESEQ INSEQ.FILE
DEBUG
         DELETE F.EBILL,EBILL.ID

         RETURN
********************************************************************************
CHECK.FILE.ALREADY.PROCESSED:
*********************************************************************************
         SKIP.FLAG = 0
         READ EBILL.DATA.REC FROM F.EBILL.DATA,EBILL.ID THEN           ; * JMK51
            ERROR=EBILL.ID:' appears to be in the E-Bill Data directory as ':EBILL.ID:'.'  ; * JMK51
            ERR.ARRAY<1,-1>=ERROR        ; * JMK51
            EMAIL.OUT=''                 ; * JMK51
            IF TESTING THEN              ; * JMK51

            END ELSE                     ; * JMK51
               EMAIL.OUT<1> = 'pick@afs.net'
               EMAIL.OUT<1,-1>='ups.ebills@afs.net'          ; * JMK51
            END                          ; * JMK51
            EMAIL.OUT<4>='EbillConversion@afs.net'           ; * JMK51
            EMAIL.OUT<5>=EBILL.ID:' UPS->AFS E-Bill Conversion Problems'         ; * JMK51
            EMAIL.OUT<6>=EBILL.ID:' experienced conversion problems from the UPS format to the AFS format.'    ; * JMK51
            EMAIL.OUT<6,-1>=' '          ; * JMK51
            EMAIL.OUT<6,-1>=ERROR        ; * JMK51
            IF TESTING THEN              ; * JMK51
               EMAIL.OUT<6,-1>=' '       ; * JMK51
               EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"   ; * JMK51
            END                          ; * JMK51
            CALL SENDMAIL(EMAIL.OUT,RESULTS)       ; * JMK51
            DELETE F.EBILL,EBILL.ID      ; * JMK51
            UNCONVERT.LIST<1,-1>=EBILL.ID:' has already been converted and resides in the E-BILL DATA folder.'           ; * JMK51
            SKIP.FLAG = 1
         END

         IF INDEX(EBILL.ID,'00128FX',1) THEN
****SKIP.FLAG = 1
         END
         RETURN
*******************************************************************************
CHECK.FILE.ALREADY.PROCESSED2:
*******************************************************************************
         SKIP.FLAG = 0
         IF EBILL.ID[1,8]='Invoice_' THEN          ; * JMK03
            CUST.ID='I':FIELD(EBILL.ID,'_',2)      ; * JMK03
            BEGIN CASE
               CASE LEN(CUST.ID)=16
                  CUST.ID='I':CUST.ID[4,10]
            END CASE
            CUST.DT=FIELD(EBILL.ID,'_',3)          ; * JMK03
            CUST.DT='20':CUST.DT[5,2]:CUST.DT[1,4]           ; * JMK03
            UPS.FTYPE=FIELD(EBILL.ID,'_',4)        ; * JMK03
         END ELSE                        ; * JMK03
            CUST.ID=FIELD(EBILL.ID,'-',1)
            CUST.DT=FIELD(EBILL.ID,'-',2)
            UPS.FTYPE=FIELD(EBILL.ID,'-',3)
         END                             ; * JMK03
         IF UPS.FTYPE#'' THEN
            ERROR=EBILL.ID:' appears to be an invalid file to convert.'
            ERR.ARRAY<1,-1>=ERROR
            EMAIL.OUT=''
            IF TESTING THEN

            END ELSE
               EMAIL.OUT<1> = 'pick@afs.net'
            END
            EMAIL.OUT<4>='EbillConversion@afs.net'
            EMAIL.OUT<5>=EBILL.ID:' UPS->AFS E-Bill Conversion Problems'
            EMAIL.OUT<6>=EBILL.ID:' experienced conversion problems from the UPS format to the AFS format.'
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=ERROR
            IF TESTING THEN
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"
            END
            CALL SENDMAIL(EMAIL.OUT,RESULTS)
            IF SHIP.LIST.0261CP#'' AND SHIP.LIST.0679FY THEN UPD.DATA=0

            IF UPD.DATA THEN
               OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                  CRT "CANNOT OPEN BILLDATA.EBILL"
                  GO SKIP.EBILL
               END
               OPENSEQ 'BILLDATA.EBILL.DATA', EBILL.ID TO OUTSEQ.FILE2 ELSE
                  CREATE OUTSEQ.FILE2 ELSE
                     GO SKIP.EBILL
                  END
               END
               INSEQ.DONE1 = 0
               LOOP
               UNTIL INSEQ.DONE1 DO
                  READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
                  WRITESEQ EBILL.REC ON OUTSEQ.FILE2 ELSE NULL
               REPEAT
               CLOSESEQ OUTSEQ.FILE2
               CLOSESEQ INSEQ.FILE
            END
            DELETE F.EBILL,EBILL.ID
            SKIP.FLAG = 1
         END

         RETURN
*******************************************************************************
CHECK.FILE.ALREADY.PROCESSED3:
*******************************************************************************
         SKIP.FLAG = 0
* CHECK HIST
         HIST.ID="PLAN*":CUST.ID[2,9999]
         READ HIST.REC FROM F.EBILL.CONVERT,HIST.ID ELSE HIST.REC=''
         BEGIN CASE
            CASE HIST.REC<1>='HIST'
               AFS.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'.XLS'
            CASE 1
               AFS.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'.csv'
         END CASE
         AFS.HIST.ID=CUST.ID[2,9999]:'_':CUST.DT[5,2]:'_':CUST.DT[7,2]:'_':CUST.DT[1,4]:'.XLS'
         IF TESTING=0 THEN
            READ TEST FROM F.EBILL.HIST,AFS.HIST.ID THEN
               ERROR=EBILL.ID:' appears to be in the E-Bill Hist directory as ':AFS.HIST.ID:'.'
               ERR.ARRAY<1,-1>=ERROR
               EMAIL.OUT=''
               IF TESTING THEN

               END ELSE
                  EMAIL.OUT<1> = 'pick@afs.net'
                  EMAIL.OUT<1,-1>='ups.ebills@afs.net'
               END
               EMAIL.OUT<4>='EbillConversion@afs.net'
               EMAIL.OUT<5>=EBILL.ID:' UPS->AFS E-Bill Conversion Problems'
               EMAIL.OUT<6>=EBILL.ID:' experienced conversion problems from the UPS format to the AFS format.'
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>=ERROR
               IF TESTING THEN
                  EMAIL.OUT<6,-1>=' '
                  EMAIL.OUT<6,-1>="Don't forget to remove the testing flag!!!!!!"
               END
               CALL SENDMAIL(EMAIL.OUT,RESULTS)
               ** IF SHIP.LIST.0261CP #'' THEN UPD.DATA=0

               **  IF SHIP.LIST.0679FY #'' THEN UPD.DATA=0         ; * GRB01

               IF SHIP.LIST.0261CP#'' AND SHIP.LIST.0679FY # '' THEN UPD.DATA=0
               IF UPD.DATA THEN
                  OPENSEQ 'BILLDATA.EBILL', EBILL.ID TO INSEQ.FILE ELSE
                     CRT "CANNOT OPEN BILLDATA.EBILL"
                     GO SKIP.EBILL
                  END
                  OPENSEQ 'BILLDATA.EBILL.DATA', EBILL.ID TO OUTSEQ.FILE2 ELSE
                     CREATE OUTSEQ.FILE2 ELSE
                        GO SKIP.EBILL
                     END
                  END
                  INSEQ.DONE1 = 0
                  LOOP
                  UNTIL INSEQ.DONE1 DO
                     READSEQ EBILL.REC FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
                     WRITESEQ EBILL.REC ON OUTSEQ.FILE2 ELSE NULL
                  REPEAT
                  CLOSESEQ OUTSEQ.FILE2
                  CLOSESEQ INSEQ.FILE
               END
               DELETE F.EBILL,EBILL.ID
               UNCONVERT.LIST<1,-1>=EBILL.ID:' has already been converted and resides in the E-BILL DATA folder.'
               SKIP.FLAG = 1
            END
         END

         RETURN
      END
