      SUBROUTINE MMRATER.SUB(VIN,VOUT,CLIENT.REC,CONTR.ARRAY,BENCH.ARRAY)
********************************************************************
* PROGRAM: MMRATER.SUB
* PURPOSE: TO RETURN RATES DEFINED IN THE MM RATING SYSTEM
*
      $INCLUDE UNIVERSE.INCLUDE XML.H
* Turn on logging
*     RESULT=protocolLogging("MMRATES.log","ON",10)
*     CRT "Logging started = ":RESULT
****
****
*     URL = "http://66.18.103.83/AFSWebService/Service.asmx?wsdl" ; * JMK01
*     URL = "http://beta.afs.net/AFS.IGL.WebService/Service.asmx?wsdl" ; * JMK01
*     URL = "http://devweb.afslogistics.com/AFS.IGL.WebService/Service.asmx?wsdl" ; * JMK01
*     URL = "http://192.168.1.9:8081/AFSRateWS/Service.asmx?wsdl" ; * JMK01  ; * RLM01
      URL = "http://devweb:22467/AFSWebService/Service.asmx?wsdl"; * RLM01
      SoapAction = "http://tempuri.org/RateShipmentXMLRate"
      Timeout = 30000
      RETURN.STATUS='true'
      RETURN.MESASGE=''
      CALL CHANNEL(CH.NUM)
      CALL GET.USER(USER)
      TESTING=0
      IF USER='MKERBOW' THEN DEBUG
      OPEN '','&XML&' TO F.XML ELSE
         RETURN.STATUS='false'
         RETURN.MESSAGE='ERROR IN PICK - CANNOT OPEN &XML& FILE'
         GO 9999
      END
      OPEN '','MMRESP' TO F.MMRESP ELSE
         RETURN.STATUS='false'
         RETURN.MESSAGE='ERROR IN PICK - CANNOT OPEN MMRESP FILE'
         GO 9999
      END
      READ MMRATE.TMP FROM F.XML,'MMRATE.XML' ELSE
         CALL ELINE('MMRATE.XML NOT ON FILE')
         STOP
      END
      READ MMLTL.TMP FROM F.XML,'MMLTL.XML' ELSE
         CALL ELINE('MMLTL.XML NOT ON FILE')
         STOP
      END
      READ MMACC.TMP FROM F.XML,'MMACC.XML' ELSE
         CALL ELINE('MMACC.XML NOT ON FILE')
         STOP
      END
      CLIENT.ID=VIN<1>
      BENCH.PROFILE=CLIENT.ID:'_B'
      CONTR.PROFILE=CLIENT.ID:'_C'
      CARRIER.ID=VIN<2>
      SHIP.DATE=VIN<3>
      IOT=VIN<4>
      ORIG.ZIP=VIN<5>
      ORIG.COUNTRY=VIN<6>
      DEST.ZIP=VIN<7>
      DEST.COUNTRY=VIN<8>
      CLASSES=VIN<9>
      WEIGHTS=VIN<10>
      TTL.WT=SUM(WEIGHTS<1>)
      ACC.CODES=VIN<11>
      USER.NAME=VIN<12>
      USER.PWD=VIN<13>
      QUOTE.PCT=VIN<14>
      MARKUP.PCT=VIN<15>
      LOGISTICS=VIN<16>
      IF TESTING THEN
         CLIENT.ID='AFS1'
         BENCH.PROFILE='01349_B'
         CONTR.PROFILE='01349_C'
         BENCH.PROFILE='00735_B'
         CONTR.PROFILE='00735_C'
         ORIG.ZIP='75201'
         ORIG.COUNTRY='USA'
         DEST.ZIP='60605'
         DEST.COUNTRY='USA'
         TTL.WT='1000'
         SHIP.DATE='06/08/2010'
         CLASSES='50'
         WEIGHTS='1000'
         ACC.CODES=''
      END
      BEGIN CASE
         CASE ORIG.COUNTRY#'USA' OR DEST.COUNTRY#'USA'
            INTL='true'
         CASE 1
            INTL='false'
      END CASE
*
      BENCHRES.XML.ID=USER:'_':CH.NUM:'_':CLIENT.ID:'_B_RES.XML'
      CONTRRES.XML.ID=USER:'_':CH.NUM:'_':CLIENT.ID:'_C_RES.XML'
      BENCHREQ.XML.ID=USER:'_':CH.NUM:'_':CLIENT.ID:'_B_REQ.XML'
      CONTRREQ.XML.ID=USER:'_':CH.NUM:'_':CLIENT.ID:'_C_REQ.XML'
      MMRESP.EXT="./&XML&/MMRESP.EXT"
      BENCH.XML="./&XML&/":BENCHRES.XML.ID
      CONTR.XML="./&XML&/":CONTRRES.XML.ID
*
* BUILD THE LTLBEO SEGMENTS FIRST
*
      LTL.BEO=''
      NVAL=DCOUNT(CLASSES,@VM)
      FOR VAL=1 TO NVAL
         CLASS=CLASSES<1,VAL>
         WEIGHT=WEIGHTS<1,VAL>
         IF CLASS#'' OR WEIGHT#'' THEN
            LTLTMP=MMLTL.TMP
            LTLTMP=CHANGE(LTLTMP,'~RATE.CLASS~',CLASS)
            LTLTMP=CHANGE(LTLTMP,'~RATE.WT~',WEIGHT)
            IF LTL.BEO='' THEN
               LTL.BEO=LTLTMP
            END ELSE
               LTL.BEO<-1>=LTLTMP
            END
         END
      NEXT VAL
      IF LTL.BEO='' THEN
         LTL.BEO=MMLTL.TMP
         LTL.BEO=CHANGE(LTL.BEO,'~RATE.CLASS~','')
         LTL.BEO=CHANGE(LTL.BEO,'~RATE.WT~','')
      END
*
* BUILD THE ACCBEO SEGMENTS SECOND
*
      ACC.BEO=''
      NVAL=DCOUNT(ACC.CODES,@VM)
      FOR VAL=1 TO NVAL
         ACC.CODE=ACC.CODES<1,VAL>
         IF ACC.CODE#'' THEN
            ACCTMP=MMACC.TMP
            ACCTMP=CHANGE(ACCTMP,'~ACC.CODE~',ACC.CODE)
            IF ACC.BEO='' THEN
               ACC.BEO=ACCTMP
            END ELSE
               ACC.BEO<-1>=ACCTMP
            END
         END
      NEXT VAL
      IF ACC.BEO='' THEN
         ACC.BEO=MMACC.TMP
         ACC.BEO=CHANGE(ACC.BEO,'~ACC.CODE~','')
      END
      IF LOGISTICS THEN
*
* BUILD THE BENCHBEO SEGMENT THIRD
*
         BENCH.BEO=MMRATE.TMP
*        BENCH.BEO=CHANGE(BENCH.BEO,'~CLIENT.ID~',CLIENT.ID)
         BENCH.BEO=CHANGE(BENCH.BEO,'~CLIENT.ID~','AFS1')
         BENCH.BEO=CHANGE(BENCH.BEO,'~PROFILE.ID~',BENCH.PROFILE)
         BENCH.BEO=CHANGE(BENCH.BEO,'~ORIG.ZIP~',ORIG.ZIP)
         BENCH.BEO=CHANGE(BENCH.BEO,'~ORIG.COUNTRY~',ORIG.COUNTRY)
         BENCH.BEO=CHANGE(BENCH.BEO,'~DEST.ZIP~',DEST.ZIP)
         BENCH.BEO=CHANGE(BENCH.BEO,'~DEST.COUNTRY~',DEST.COUNTRY)
         BENCH.BEO=CHANGE(BENCH.BEO,'~TTL.WT~',TTL.WT)
         BENCH.BEO=CHANGE(BENCH.BEO,'~INTL~',INTL)
         BENCH.BEO=CHANGE(BENCH.BEO,'~SHIP.DATE~',SHIP.DATE'D4/')
         BENCH.BEO=CHANGE(BENCH.BEO,'~LTLXML~',LTL.BEO)
         BENCH.BEO=CHANGE(BENCH.BEO,'~ACCXML~',ACC.BEO)

         NEW.BEO=''
         NATT=DCOUNT(BENCH.BEO,@AM)
         FOR ATT=1 TO NATT
            NEW.BEO:=TRIM(BENCH.BEO<ATT>)
         NEXT ATT

         BENCH.BEO=NEW.BEO
         BENCH.BEO=CHANGE(BENCH.BEO,'<','&lt;')
         BENCH.BEO=CHANGE(BENCH.BEO,'>','&gt;')
         BENCH.REQ=''
         BENCH.REQ:='<?xml version="1.0" encoding="utf-8"?>'
         BENCH.REQ:='<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'
         BENCH.REQ:='<soap:Body>'
         BENCH.REQ:='<RateShipmentXMLRate xmlns="http://tempuri.org/">'
         BENCH.REQ:='<inputXML>':BENCH.BEO:'</inputXML>'
         BENCH.REQ:='</RateShipmentXMLRate>'
         BENCH.REQ:='</soap:Body>'
         BENCH.REQ:='</soap:Envelope>'
         WRITE BENCH.REQ ON F.XML,'BENCHREQ.XML'
         USER.BENCH.REQ=BENCH.REQ
         USER.BENCH.REQ=CHANGE(USER.BENCH.REQ,'&lt;','<')
         USER.BENCH.REQ=CHANGE(USER.BENCH.REQ,'&gt;','>')
         WRITE USER.BENCH.REQ ON F.XML,BENCHREQ.XML.ID
* Create the Request
         Ret = SoapCreateRequest(URL , SoapAction , SoapReq)
         IF Ret <> 0 THEN
            STOP "Error in SoapCreateRequest: " : Ret
         END
* Submit the Request
         SETREQUEST.STATUS = soapSetRequestContent(SoapReq, BENCH.REQ, 1)
* PRINT "Request Content Status = ":SETREQUEST.STATUS
         Ret = SoapSubmitRequest(SoapReq, Timeout, BENCH.HDR, BENCH.RESP, BENCH.STATUS)
         IF Ret <> 0 THEN
            CRT "Error in SoapSubmitRequest: " : Ret
            STATUS=getSocketErrorMessage(Ret, errMsg)
            CRT errMsg
            STOP
         END

         BENCH.RESP=CHANGE(BENCH.RESP,"&lt;","<")
         BENCH.RESP=CHANGE(BENCH.RESP,"&gt;",">")
         BENCH.RESP:=CHAR(10)
         VAL.STR=INDEX(BENCH.RESP,'<RateBEO ',1)
         IF VAL.STR THEN
            BENCH.RESP=BENCH.RESP[VAL.STR,9999999]
         END
         VAL.STR=INDEX(BENCH.RESP,'</RateBEO>',1)
         IF VAL.STR THEN
            BENCH.RESP=BENCH.RESP[1,VAL.STR+9]
         END
*        BENCH.RESP=CHANGE(BENCH.RESP,"amp;","")
         WRITE BENCH.RESP ON F.XML,BENCHRES.XML.ID
*
* PROCESS XML STRING
*
********************************************
***** PREPARE XML DOCUMENT FOR READING *****
*     PrepareXML(XML_FILE,XML_HANDLE)      *
********************************************
         STATUS = PrepareXML(BENCH.XML,BENCH.XML.HANDLE)
         IF STATUS = XML.ERROR THEN
            STATUS=XMLERROR(ERRMSG)
************
***ERROR
************
            RETURN.STATUS = 'false'
            RETURN.MESSAGE = 'ERROR IN PICK - Unable to prepare the XML document ': BENCH.XML :' for reading. ':ERRMSG
            GO 9999
         END

********************************************
***** OPEN XML DOCUMENT *****
*OpenXMLData(XML_HANDLE,XML_DATA_EXTRACTION_RULE,XML_DATA_HANDLE)
********************************************
         STATUS = OpenXMLData(BENCH.XML.HANDLE,MMRESP.EXT,BENCH.XML.DATA.HANDLE)

         IF STATUS = XML.ERROR THEN
            STATUS=XMLERROR(ERRMSG)
************
***ERROR
************
            RETURN.STATUS = 'false'
            RETURN.MESSAGE = 'ERROR IN PICK - Unable to open the XML document ': BENCH.XML :' with OpenXMLData function. ':ERRMSG
            GO 9999
         END

         IF STATUS = XML.INVALID.HANDLE THEN
************
***ERROR
************
            RETURN.STATUS = 'false'
            RETURN.MESSAGE = 'ERROR IN PICK - Invalid parameter passed to OpenXMLData function.'
            GO 9999
         END

********************************************
***** READ XML DOCUMENT *****
*ReadXMLData(XML_DATA_HANDLE,REC)
********************************************
         BENCH.ARRAY=''
         ERROR.MSG=''
         EOF=0
         LOOP
            STATUS = ReadXMLData(BENCH.XML.DATA.HANDLE,BENCH.ARRAY)
            IF STATUS=XML.EOF THEN
               STATUS = CloseXMLData(BENCH.XML.DATA.HANDLE)
               STATUS = ReleaseXML(BENCH.XML.HANDLE)
               RETURN.STATUS = 'true'
               RETURN.MESSAGE = 'Data successfully read into UniVerse. ERRORS: ':XMLError(errmsg)
               EOF=1
            END
         UNTIL EOF DO
            IF STATUS=XML.ERROR THEN
               RETURN.STATUS = 'false'
               RETURN.MESSAGE = 'ERROR IN PICK - Unable to read the XML document ': BENCH.XML :' with ReadXMLData function.'
               GO 9999
            END ELSE
*           WRITE CARRIER.XML.ARRAY ON F.XML,'JMK'; * JMKXXX
            END
         REPEAT
         NATT=DCOUNT(BENCH.ARRAY,@AM)
         FOR ATT=1 TO NATT
            NVAL=DCOUNT(BENCH.ARRAY<ATT>,@VM)
            FOR VAL=1 TO NVAL
               NSVAL=DCOUNT(BENCH.ARRAY<ATT,VAL>,@SVM)
               FOR SVAL=1 TO NSVAL
                  BENCH.ARRAY<ATT,VAL,SVAL>=TRIM(BENCH.ARRAY<ATT,VAL,SVAL>)
               NEXT SVAL
            NEXT VAL
         NEXT ATT
         WRITE BENCH.ARRAY ON F.MMRESP,BENCHRES.XML.ID
      END

*
* BUILD THE CONTRBEO SEGMENT FOURTH
*
      CONTR.BEO=MMRATE.TMP
*     CONTR.BEO=CHANGE(CONTR.BEO,'~CLIENT.ID~',CLIENT.ID)
      CONTR.BEO=CHANGE(CONTR.BEO,'~CLIENT.ID~','AFS1')
      CONTR.BEO=CHANGE(CONTR.BEO,'~PROFILE.ID~',CONTR.PROFILE)
      CONTR.BEO=CHANGE(CONTR.BEO,'~ORIG.ZIP~',ORIG.ZIP)
      CONTR.BEO=CHANGE(CONTR.BEO,'~ORIG.COUNTRY~',ORIG.COUNTRY)
      CONTR.BEO=CHANGE(CONTR.BEO,'~DEST.ZIP~',DEST.ZIP)
      CONTR.BEO=CHANGE(CONTR.BEO,'~DEST.COUNTRY~',DEST.COUNTRY)
      CONTR.BEO=CHANGE(CONTR.BEO,'~TTL.WT~',TTL.WT)
      CONTR.BEO=CHANGE(CONTR.BEO,'~INTL~',INTL)
      CONTR.BEO=CHANGE(CONTR.BEO,'~SHIP.DATE~',SHIP.DATE'D4/')
      CONTR.BEO=CHANGE(CONTR.BEO,'~LTLXML~',LTL.BEO)
      CONTR.BEO=CHANGE(CONTR.BEO,'~ACCXML~',ACC.BEO)

      NEW.BEO=''
      NATT=DCOUNT(CONTR.BEO,@AM)
      FOR ATT=1 TO NATT
         NEW.BEO:=TRIM(CONTR.BEO<ATT>)
      NEXT ATT
      CONTR.BEO=NEW.BEO
*
      CONTR.BEO=CHANGE(CONTR.BEO,'<','&lt;')
      CONTR.BEO=CHANGE(CONTR.BEO,'>','&gt;')
      CONTR.REQ=''
      CONTR.REQ:='<?xml version="1.0" encoding="utf-8"?>'
      CONTR.REQ:='<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'
      CONTR.REQ:='<soap:Body>'
      CONTR.REQ:='<RateShipmentXMLRate xmlns="http://tempuri.org/">'
      CONTR.REQ:='<inputXML>':CONTR.BEO:'</inputXML>'
      CONTR.REQ:='</RateShipmentXMLRate>'
      CONTR.REQ:='</soap:Body>'
      CONTR.REQ:='</soap:Envelope>'
      WRITE CONTR.REQ ON F.XML,'CONTRREQ.XML'
      USER.CONTR.REQ=CONTR.REQ
      USER.CONTR.REQ=CHANGE(USER.CONTR.REQ,'&lt;','<')
      USER.CONTR.REQ=CHANGE(USER.CONTR.REQ,'&gt;','>')
      WRITE USER.CONTR.REQ ON F.XML,CONTRREQ.XML.ID
*
*
* Create the Request
      Ret = SoapCreateRequest(URL , SoapAction , SoapReq)
      IF Ret <> 0 THEN
         STOP "Error in SoapCreateRequest: " : Ret
      END
* Submit the Request
      SETREQUEST.STATUS = soapSetRequestContent(SoapReq, CONTR.REQ, 1)
* PRINT "Request Content Status = ":SETREQUEST.STATUS
      Ret = SoapSubmitRequest(SoapReq, Timeout, CONTR.HDR, CONTR.RESP, CONTR.STATUS)
      IF Ret <> 0 THEN
         CRT "Error in SoapSubmitRequest: " : Ret
         STATUS=getSocketErrorMessage(Ret, errMsg)
         CRT errMsg
         STOP
      END
      CONTR.RESP=CHANGE(CONTR.RESP,"&lt;","<")
      CONTR.RESP=CHANGE(CONTR.RESP,"&gt;",">")
      CONTR.RESP:=CHAR(10)
      VAL.STR=INDEX(CONTR.RESP,'<RateBEO ',1)
      IF VAL.STR THEN
         CONTR.RESP=CONTR.RESP[VAL.STR,9999999]
      END
      VAL.STR=INDEX(CONTR.RESP,'</RateBEO>',1)
      IF VAL.STR THEN
         CONTR.RESP=CONTR.RESP[1,VAL.STR+9]
      END
*     CONTR.RESP=CHANGE(CONTR.RESP,"amp;","")
      WRITE CONTR.RESP ON F.XML,CONTRRES.XML.ID

*
* PROCESS XML STRING
*
********************************************
***** PREPARE XML DOCUMENT FOR READING *****
*     PrepareXML(XML_FILE,XML_HANDLE)      *
********************************************
      STATUS = PrepareXML(CONTR.XML,CONTR.XML.HANDLE)
      IF STATUS = XML.ERROR THEN
         STATUS=XMLERROR(ERRMSG)
************
***ERROR
************
         RETURN.STATUS = 'false'
         RETURN.MESSAGE = 'ERROR IN PICK - Unable to prepare the XML document ': CONTR.XML :' for reading. ':ERRMSG
         GO 9999
      END

********************************************
***** OPEN XML DOCUMENT *****
*OpenXMLData(XML_HANDLE,XML_DATA_EXTRACTION_RULE,XML_DATA_HANDLE)
********************************************
      STATUS = OpenXMLData(CONTR.XML.HANDLE,MMRESP.EXT,CONTR.XML.DATA.HANDLE)

      IF STATUS = XML.ERROR THEN
         STATUS=XMLERROR(ERRMSG)
************
***ERROR
************
         RETURN.STATUS = 'false'
         RETURN.MESSAGE = 'ERROR IN PICK - Unable to open the XML document ': CONTR.XML :' with OpenXMLData function. ':ERRMSG
         GO 9999
      END

      IF STATUS = XML.INVALID.HANDLE THEN
************
***ERROR
************
         RETURN.STATUS = 'false'
         RETURN.MESSAGE = 'ERROR IN PICK - Invalid parameter passed to OpenXMLData function.'
         GO 9999
      END

********************************************
***** READ XML DOCUMENT *****
*ReadXMLData(XML_DATA_HANDLE,REC)
********************************************
      CONTR.ARRAY=''
      ERROR.MSG=''
      EOF=0
      LOOP
         STATUS = ReadXMLData(CONTR.XML.DATA.HANDLE,CONTR.ARRAY)
         IF STATUS=XML.EOF THEN
            STATUS = CloseXMLData(CONTR.XML.DATA.HANDLE)
            STATUS = ReleaseXML(CONTR.XML.HANDLE)
            RETURN.STATUS = 'true'
            RETURN.MESSAGE = 'Data successfully read into UniVerse. ERRORS: ':XMLError(errmsg)
            EOF=1
         END
      UNTIL EOF DO
         IF STATUS=XML.ERROR THEN
            RETURN.STATUS = 'false'
            RETURN.MESSAGE = 'ERROR IN PICK - Unable to read the XML document ': CONTR.XML :' with ReadXMLData function.'
            GO 9999
         END ELSE
*           WRITE CARRIER.XML.ARRAY ON F.XML,'JMK'; * JMKXXX
         END
      REPEAT
      NATT=DCOUNT(CONTR.ARRAY,@AM)
      FOR ATT=1 TO NATT
         NVAL=DCOUNT(CONTR.ARRAY<ATT>,@VM)
         FOR VAL=1 TO NVAL
            NSVAL=DCOUNT(CONTR.ARRAY<ATT,VAL>,@SVM)
            FOR SVAL=1 TO NSVAL
               CONTR.ARRAY<ATT,VAL,SVAL>=TRIM(CONTR.ARRAY<ATT,VAL,SVAL>)
            NEXT SVAL
         NEXT VAL
      NEXT ATT
      WRITE CONTR.ARRAY ON F.MMRESP,CONTRRES.XML.ID
      GO 9000
1000: * EXTRACT CARRIER INFORMATION FROM XML ARRAY
      CARRIER.XML.ARRAY=CHANGE(CARRIER.XML.ARRAY,'Null','')  ; * JMK02
      CARRIER.XML.ARRAY=CHANGE(CARRIER.XML.ARRAY,'NULL','')  ; * JMK02
1500: * PERFORM ANY DATA MANIPULATION AS NEEDED
      RETURN
9000: * CALCULATE ALL CHARGES AND ADD TO CARRIER.EST.ARRAY
*      DELETE F.MMRESP,BENCHRES.XML.ID
*      DELETE F.MMRESP,CONTRRES.XML.ID
9999: *
      VOUT=''
      IF RETURN.STATUS='false' THEN
         VOUT<1>=RETURN.MESSAGE
      END ELSE
         VOUT<2>='Y'
      END
      RETURN
      End
