      *======================================================================
      * SUBROUTINE : FB.NOTES         - Freight Bill Note Editor Screen
      *
      * PROGRAMMER : Jim T. Row
      *
      * PICK COMPILER INFORMATION
      * ~~~~~~~~~~~~~~~~~~~~~~~~~
      *  ~PICK-FILE: FBBP
      *  ~PICK-RECORD: FB.11.14
      *  ~COMPILE-REC: YES
      *  ~AUTO-ANSWER: YES
      *  ~RUN-REC: YES
      *
      *======================================================================
      *    COPYRIGHT (C) 1996 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED
      *       ----------------------------------------------------
      *  This program is sole property of AFS Logistics, LLC (AUTOMATED
      *  FREIGHT SYSTEMS) and may not be used, copied, or modified without
      *  the express written consent of Brian Barker of AFS Logistics, LLC.
      *======================================================================

$INCLUDE PROG.ADMIN INC_OPTIONS
*
* Modifications
* 080312 - RLM01 - Sysaid #3073 - Replace former employees' email addresses with those of current employees
*

      *
      * Equates
      *
      EQU TRUE TO 1
      EQU FALSE TO 0

      EQU REV.ON TO CHAR(14)
      EQU REV.OFF TO CHAR(15)
      EQU PAGE.SIZE TO 16
      EQU FB.NOTES.NAME TO 'FB.NOTES'    ; * Record name

      EQU MESSAGE.FLAG TO '!!'
      EQU BREAK.CHAR TO '~'

      EQU RESTRICT.ACCESS TO TRUE

      *
      * Initialize GENERAL APPLICATION variables
      *
      PROMPT''
      PROG.NAME = 'FB.11.14'
      PROG.DESC = 'Freight Bill Note Editor'
      PACK.NAME = 'Freight Payment'
      CO.NAME='AFS Logistics, LLC'
       UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.11.14' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
       CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/23/2010

      PORT.NUM = SYSTEM(19)              ; * Port user is sitting on
      *    USER.NAME = OCONV(PORT.NUM,'MCU')       ;* User's Name
      CALL GET.USER(USER.NAME)
      BEGIN CASE
            *
            * Authorized users
            *
         CASE USER.NAME = 'DAVID'
         CASE USER.NAME = 'OWEN'
         CASE USER.NAME = 'BRIAN'
         CASE USER.NAME = 'MYRA'
         CASE USER.NAME = 'KRISTY'
         CASE USER.NAME = 'DONNA'
         CASE USER.NAME = 'SSMITH'  ; * ADDED MATT 1/10/07
         CASE USER.NAME = 'MKERBOW'
         CASE USER.NAME = 'KAREN'
         CASE USER.NAME = 'NPRATT'
            *
            * Restrict everyone else
            *
         CASE 1
            SUBJ="Unauthorized Program Access by ":USER.NAME
            TEXT=''
            TEXT<1,-1>=USER.NAME:' ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):' ':PROG.NAME
            TEXT<1,-1>='User ':USER.NAME:' tried to access ':PROG.DESC
            TEXT<1,-1>="(This user's name was not included in the program to allow access)"
            MVIN=''
*           MVIN<1>='oweninfo@afs.net':@VM:'SMatthews@afs.net'  ; * RLM01
*           MVIN<1>='bfranklin@afs.net':@VM:'SMatthews@afs.net'  ; * RLM01
            MVIN<1>='SMatthews@afs.net'  ; * RLM01
            MVIN<2>=''
            MVIN<4>='AFS'
            MVIN<5>=SUBJ
            MVIN<6>=TEXT
            CALL SENDMAIL(MVIN,MVOUT)

            CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application...')
            CALL FB.PRINT.CENT(1,80,14,'Access Denied! See IT for Access')
            CALL ELINE('')
            STOP
      END CASE





      DEBUG.MSG = ''

      *   IF RESTRICT.ACCESS THEN
      *      VALID.USERS = 'JIM':@AM:'DARLENE':@AM:'OWEN':@AM:'KATHY':@AM:'BRIAN':@AM:'DAVID':@AM:'MYRA'
      *      LOCATE USER.NAME IN VALID.USERS SETTING WHERE ELSE
      *         CALL ELINE('Access DENIED to this application - See Jim or Owen')
      *         RETURN
      *      END
      *   END

      WIDTH = 80
      CTR = INT(WIDTH/2)
      REVON = REV.ON
      REVOFF = REV.OFF
      SELECTED = ''
      LAST.EDIT.POS = 1
      SHOW.CODES = FALSE
      SAVE.IT = TRUE

      CUSTOM.YN.HELP=''
      EDIT.HELP.LINE = 1
      EDIT.HELP=''
      EDIT.HELP<-1> = "EDIT: [A]-Add [E]-Edit [T]-Top [H]-Help [R]-Remove [B]-Back [F]-Fwd [EX]-Exit"
      EDIT.HELP<-1> = "EDIT: [T]-Top Page [L]-Last Page [-]-Back [+]-Forwd"
      EDIT.HELP<-1> = "EDIT: [P]-Print [>] or [.]-Next Help Line [<] or [,]-Prior Help Line"
      NUM.EDIT.HLP.LINES = DCOUNT(EDIT.HELP,@AM)

      *
      * Load Freight Bill Notes
      *
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FBBP',PROG.NAME)
      END
      READ FB.NOTES FROM F.TABLES,FB.NOTES.NAME ELSE
         CALL ELINE('Could not load ':FB.NOTES.NAME:' from FBBP.')
         STOP
      END
      NUM.REJ.CODES = DCOUNT(FB.NOTES<1>, @VM)
      REJ.PAGE = 1

      GOSUB SETUP.LIST.DSP


MAIN.START:

      *---------------------
      * Initialize variables
      *---------------------

      GOSUB DSP.EDIT.SCN                 ; * Draw screen layout...
      EXIT.KEY = ''                      ; * Key use to exit "X" or "EX"
      PAGE = 1                           ; * Current Page Number

UD.1:
      *
      * Display current position
      *
      GOSUB UPDATE.DISPLAY

UD.2:
      MASK = '#'
      HELP = EDIT.HELP<EDIT.HELP.LINE>
      CRT @(0,22):'Option :':@(-4):
      CALL GEN.IN(8,22,MASK,'',Q,0,15,'','',2,8,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'
            *
            * Exit Program
            *
            EXIT.KEY=QI
            CUSTOM.YN.HELP = 'OPTIONS: [Y]-Saves and Exits [N]-Exits without saving [X]-Do not exit'
            YN.MSG = 'Do you wish to save changes before exiting?'
            YN.MASK = 'Y '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'X' THEN EXIT.KEY=''
            IF YN.ANSWER = 'N' THEN SAVE.IT = FALSE

         CASE QI='>' OR QI='.'
            *
            *  Next Help Line
            *
            IF EDIT.HELP.LINE >=NUM.EDIT.HLP.LINES THEN
               EDIT.HELP.LINE =1
            END ELSE
               EDIT.HELP.LINE+=1
            END
            GOTO UD.2

         CASE QI='<' OR QI=','
            *
            *  Prior Help Line
            *
            IF EDIT.HELP.LINE =1 THEN
               EDIT.HELP.LINE =NUM.EDIT.HLP.LINES
            END ELSE
               EDIT.HELP.LINE-=1
            END
            GOTO UD.2

         CASE QI='T' OR QI='TOP'         ; * Top Page
            *
            * Top Page
            *
            IF NUM.LINES > 0 THEN
               PAGE = 1
            END ELSE
               CALL ELINE('Top of document.')
               GOTO UD.2
            END

         CASE QI='L' OR QI='LAST'        ; * Last Page
            *
            * Last Page
            *
            IF NUM.LINES > 0 THEN
               PAGE=INT(NUM.LINES/PAGE.SIZE)
               IF REM(NUM.LINES,PAGE.SIZE) THEN PAGE+=1
            END ELSE
               CALL ELINE('Bottom of document.')
               GOTO UD.2
            END

         CASE QI='B' OR QI='-'
            *
            * Go Back 1 Page
            *
            IF PAGE > 1 THEN
               PAGE-=1
            END ELSE
               CALL ELINE('*** Top ***')
               GOTO UD.2
            END

         CASE QI='F' OR QI='+' OR QI='='
            *
            * Go forward 1 Page
            *
            IF NUM.LINES>PAGE*PAGE.SIZE THEN
               PAGE+=1
            END ELSE
               CALL ELINE('*** Bottom ***')
               GOTO UD.2
            END

         CASE QI='?' OR QI='HELP' OR QI='H'
            *
            * Help - List all Commands
            *
            CALL FB.DRAW.BOX(0,2,80,20,' ',' ')
            CRT @(19, 4):'HELP SCREEN - List of Commands'
            CRT @(3, 6):'B  - Go Back 1 Page                F  - Go Forward 1 Page'
            CRT @(3, 7):'-  - Go Back 1 Page                +  - Go Forward 1 Page'
            CRT @(3, 8):'T  - Goto Top of Table (TOP)       L  - Goto Last Page '
            CRT @(3, 9):'>  - Next Help Line                <  - Prior Help Line'
            CRT @(3,10):',  - Next Help Line                .  - Prior Help Line'
            CRT @(3,11):'A  - Add Freight Bill Note         R  - Remove Selected Lines'
            CRT @(3,12):'E  - Edit Line/Selected Lines     ### - Selects a Line'
            CRT @(3,13):'EX - Exit Program'
            CRT @(3,15):'REVON    - Turn On Reverse Display REVOFF   - Turn Off Reverse Display'
            CRT @(3,16):'SHOWCODES- Display Code            HIDECODES- Hide Code'
            CRT @(3,17):'HELP     - This help screen        P        - Prints Rej Listing'
            CALL ELINE('Viewing HELP Screen.')
            GOSUB DSP.EDIT.SCN

         CASE QI = 'DEBUG'
            *
            * INTERNAL DEBUG STUFF - For Debugging help...
            *
            CALL FB.DRAW.BOX(0,4,80,17,' ','')
            CRT @(19, 6):'DEBUG SCREEN'
            CALL ELINE('Viewing DEBUG Screen.')
            GOSUB DSP.EDIT.SCN

         CASE QI='PRINT' OR QI='P'       ; * Print Table to printer
            *
            * Print
            *
            IF NUM.LINES > 0 THEN
               YN.MSG = 'Print table to currently selected printer?'
               YN.MASK = 'Y '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  GOSUB PRINT.TABLE
               END
            END ELSE
               CALL ELINE('Nothing to print! Unable to print.')
               GOTO UD.2
            END

         CASE QI='REVON'
            *
            * Turn Reverse ON
            *
            IF REVON = '' THEN
               REVON = REV.ON
               REVOFF = REV.OFF
               CALL ELINE("Reverse Screen Highlighting is now ON!")
            END ELSE
               CALL ELINE("*** Reverse Screen Highlighting is already ON.")
            END
            GOTO UD.1

         CASE QI='A'
            *
            * Enter a rejection message
            *
            GOSUB ADD.REJ.REASON

         CASE QI='E'
            *
            * Enter a rejection message
            *
            LOCATE TRUE IN SELECTED SETTING WHERE THEN
               *
               * Verify choice with user
               *
               YN.MSG = 'Edit using the selected reasons? '
               YN.MASK = 'Y '
               GOSUB ASK.Y.OR.N
               BEGIN CASE
                  CASE YN.ANSWER = 'N'
                     EDIT.POS = 0
                     GOSUB EDIT.REJ.REASON

                  CASE YN.ANSWER = 'Y'
                     FOR T.EDIT.POS = 1 TO NUM.CODES
                        IF SELECTED<T.EDIT.POS> THEN
                           *
                           * This screen line was selected
                           * Now find the DATA line in the Display List
                           *
                           LOCATE T.EDIT.POS IN DSP.LIST<1> SETTING WHERE THEN
                              EDIT.POS = DSP.LIST<1,WHERE>
                              GOSUB EDIT.REJ.REASON
                           END
                        END
                     NEXT
                     SELECTED=''
               END CASE
            END ELSE
               EDIT.POS = 0
               GOSUB EDIT.REJ.REASON
            END

         CASE QI='SHOWCODES'
            *
            * Show Codes
            *
            SHOW.CODES =TRUE
            GOSUB SETUP.LIST.DSP

         CASE QI='HIDECODES'
            *
            * Hide Codes
            *
            SHOW.CODES =FALSE
            GOSUB SETUP.LIST.DSP
            IF PAGE > NUM.PAGES THEN PAGE = NUM.PAGES

         CASE QI='R'
            *
            * Remove Freight Bill Note/line
            *
            IF USER.NAME # 'JIM' AND USER.NAME # 'OWEN' THEN
               CALL ELINE('Access Denied!  You can NOT remove notes!  See IT for access/reasons')
            END ELSE
               GOSUB REMOVE.REJ.REASON
            END

         CASE QI # '' AND NUM(QI)
            NUM.SEL = QI
            IF NUM.SEL > 0 AND NUM.SEL <= NUM.CODES THEN
               LOCATE NUM.SEL IN DSP.LIST<1> SETTING WHERE THEN
                  SELECTED<NUM.SEL> = NOT(SELECTED<NUM.SEL>)
                  PAGE = DSP.LIST<4,WHERE>
                  GOTO UD.1
               END
            END ELSE
               CALL ELINE('Entry # "':NUM.SEL:'" is not a valid choice! Select an entry from 1 - ':NUM.CODES)
               GOTO UD.2
            END

         CASE QI='##'
            CALL ELINE("To select an item, Type the item's number at the Option prompt.")
            GOTO UD.2

         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO UD.2
      END CASE

      IF NOT (EXIT.KEY) THEN GOTO UD.1
      CRT @(-1):

      IF SAVE.IT THEN
         WRITE FB.NOTES ON F.TABLES,FB.NOTES.NAME ELSE
EXIT.IT:
            CALL ELINE('Could not SAVE ':FB.NOTES.NAME:' ON FBBP - Call Programming!')
            GOTO EXIT.IT
         END
      END


      RETURN


      *----------------------------------------------------------------------
      * REMOVE.REJ.REASON
      *----------------------------------------------------------------------
REMOVE.REJ.REASON:

      LOCATE TRUE IN SELECTED SETTING CHANGES.MADE THEN
         *
         * Verify choice with user
         *
         YN.MSG = 'Remove the selected Freight Bill Notes?'
         YN.MASK = 'Y '
         GOSUB ASK.Y.OR.N
         BEGIN CASE
            CASE YN.ANSWER = 'N'
            CASE YN.ANSWER = 'Y'
               FOR T.X = 1 TO NUM.CODES
                  IF SELECTED<T.X> THEN
                     *
                     * This screen line was selected
                     * Now find the screen line in the Display List
                     *
                     LOCATE T.X IN DSP.LIST<1> SETTING WHERE THEN
                        *
                        * Was this a "free form" entered message?
                        *
                        CODE = DSP.LIST<2,WHERE>
                        WHERE = DSP.LIST<1,WHERE>
                        FB.NOTES<1,WHERE>='DELETE ME'
                     END
                  END
               NEXT

               *
               * Remove marked Reject Reasons
               *
               LOOP
                  LOCATE 'DELETE ME' IN FB.NOTES<1> SETTING WHERE THEN
                     FOUND.ONE=TRUE
                     DEL FB.NOTES<1,WHERE>
                     DEL FB.NOTES<2,WHERE>
                  END ELSE
                     FOUND.ONE=FALSE
                  END
               WHILE (FOUND.ONE)
               REPEAT

               GOSUB SETUP.LIST.DSP
               IF PAGE > NUM.PAGES THEN PAGE = NUM.PAGES

               IF NUM.LINES=0 THEN
                  GOSUB DSP.EDIT.SCN
               END
         END CASE
      END ELSE
         CALL ELINE('No lines have been selected to remove. Try again.')
      END
      SELECTED = ''

      RETURN



      *----------------------------------------------------------------------
      * ADD.REJ.REASON
      *----------------------------------------------------------------------
ADD.REJ.REASON:

ARM.0:
      TITLE = "FREIGHT BILL NOTE ENTRY"
      STRING=''
      GOSUB REJ.ENTRY

ARM.1:
      IF DCOUNT(STRING,@AM) > 0 THEN
         YN.MSG = 'Add the entered Freight Bill Note?'
         YN.MASK = 'Y '
         GOSUB ASK.Y.OR.N
         IF YN.ANSWER = 'N' THEN GOTO ARM.EXIT
         IF YN.ANSWER = 'X' THEN GOTO ARM.0
         STR.OUT=''
         FOR X = 1 TO LINE
            IF STRING<X> # '' THEN STR.OUT:= STRING<X>:' '
         NEXT
         POS = DCOUNT(FB.NOTES<1>,@VM)+1
         *
         * Create a new code
         *
         CODE.NUM = DCOUNT(FB.NOTES<1>,@VM)+1
ARM.2:
         CODE.STR = 'AU':CODE.NUM
         LOCATE CODE.STR IN FB.NOTES<1> SETTING WHERE THEN
            CODE.NUM+=1
            GOTO ARM.2
            IF CODE.NUM > 999 THEN
ARM.3:
               CALL ELINE('Error in creating CODE NUMBER for Freight Bill Note - CALL PROGRAMMING!')
               GOTO ARM.3
            END
         END

         FB.NOTES<1,POS>=CODE.STR
         FB.NOTES<2,POS>=STR.OUT
         GOSUB SETUP.LIST.DSP
      END ELSE
         YN.MSG = 'The message is BLANK - Do you wish to try again to enter a message?'
         YN.MASK = 'Y '
         GOSUB ASK.Y.OR.N
         IF YN.ANSWER # 'N' THEN GOTO ARM.0
      END

ARM.EXIT:

      CALL FB.DRAW.BOX(0,7,80,11,' ','')

      RETURN


      *----------------------------------------------------------------------
      * EDIT.REJ.REASON
      *----------------------------------------------------------------------
EDIT.REJ.REASON:

      IF EDIT.POS = 0 THEN
         IF LAST.EDIT.POS > NUM.CODES THEN LAST.EDIT.POS = NUM.CODES
         HELP = "Entry Options:  [1]-[":NUM.CODES:"] Chooses the note to edit  [X]-Back"
         MASK = LAST.EDIT.POS:' '

         LOOP
            CRT @(0,22):'Edit Which Note:':@(-4)
            Q=''
            CALL GEN.IN(20,22,MASK,'',Q,0,4,'','',2,20,22,0,QI,HELP,1,23)
            QI = OCONV(QI,'MCU')
            BEGIN CASE
               CASE QI='X'
                  RETURN
               CASE QI=''
                  EDIT.POS = LAST.EDIT.POS
               CASE NUM(QI)
                  IF QI>0 AND QI<=NUM.CODES THEN
                     EDIT.POS = QI
                  END ELSE
                     CALL ELINE('Entry value is too large!  Try again.')
                  END
               CASE 1
                  CALL ELINE('Invalid entry.')
            END CASE
         UNTIL (EDIT.POS#0)
         REPEAT

         CRT @(0,22):@(-4):
         CRT @(0,23):@(-4):
      END

      LAST.EDIT.POS = EDIT.POS

ERR.0:
      STR.IN = FB.NOTES<2, EDIT.POS>
      LINE=1
      STRING=''
      LOOP
         STR.BREAK = 78
         GOSUB WORD.BREAK.STRING
         STRING<LINE> = STR.DONE'L#78'
         STR.IN = STR.OUT
         LINE+=1
      UNTIL (LINE>5 OR STR.OUT='')
      REPEAT

      LINE=1
      TITLE = "EDIT FREIGHT BILL NOTES"
      GOSUB REJ.ENTRY

ERR.1:
      IF DCOUNT(STRING,@AM) > 0 THEN
         YN.MSG = 'Save the entered Freight Bill Note?'
         YN.MASK = 'Y '
         GOSUB ASK.Y.OR.N
         IF YN.ANSWER = 'N' THEN GOTO ERR.EXIT
         IF YN.ANSWER = 'X' THEN GOTO ERR.0
         STR.OUT=''
         FOR X = 1 TO 5
            IF STRING<X> # '' THEN STR.OUT:= STRING<X>:' '
         NEXT
         FB.NOTES<2,EDIT.POS>=STR.OUT
         GOSUB SETUP.LIST.DSP
      END ELSE
         YN.MSG = 'This message is blank! Changes will not be saved! Do you wish to try again? '
         YN.MASK = 'Y '
         GOSUB ASK.Y.OR.N
         IF YN.ANSWER # 'N' THEN GOTO ERR.0
      END

ERR.EXIT:
      CALL FB.DRAW.BOX(0,7,80,11,' ','')
      EDIT.POS = 0

      RETURN


      *----------------------------------------------------------------------
      * REJ.ENTRY
      *----------------------------------------------------------------------
REJ.ENTRY:
      *
      * Initialize Variables
      *
      CALL FB.DRAW.BOX(0,7,80,11,' ','+=+|+=+|')
      CALL FB.DRAW.BOX(0,7,80,5,' ','+=+|+=+|')
      CALL FB.PRINT.CENT(0,78,9,TITLE)
      LINE=1
      FOR T.X=1 TO 5
         CRT @(1,11+T.X):STRING<T.X>
      NEXT

RE.0:
      HELP = "ENTRY OPTIONS: ''-Finished [B]-Back up one line [C]-Clear [X]-Exit"

RE.1:
      CRT @(0,22):'Enter a message to be attached to the bill.  Enter OPTIONS on a blank line.':@(-4):
      DONE = FALSE

      LOOP
      UNTIL (DONE)
         IF STRING<LINE>='' THEN
            MASK = '#'
         END ELSE
            MASK = STRING<LINE>
         END
         CRT @(1,11+LINE):STRING<LINE>
         CALL GEN.IN(1,11+LINE,MASK,'',Q,0,78,'','',2,1,11+LINE,0,QI,HELP,0,23)
         QI = OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='' AND STRING<LINE>#''
               CRT @(1,11+LINE):STRING<LINE>'L#78':
               IF LINE<5 THEN
                  LINE+=1
               END ELSE
                  DONE=TRUE
               END

            CASE QI='X' OR QI=''
               DONE=TRUE

            CASE QI='B'
               IF LINE>1 THEN LINE-=1

            CASE QI='C'
               YN.MSG = 'Clear the current message?'
               YN.MASK = 'Y '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN GOTO ADD.REJ.REASON

            CASE 1
               STRING<LINE>=TRIM(Q)
               CRT @(1,11+LINE):STRING<LINE>'L#78':
               IF LINE<5 THEN
                  LINE+=1
               END ELSE
                  DONE=TRUE
               END
         END CASE
      REPEAT

      RETURN







      *----------------------------------------------------------------------
      * UPDATE.DISPLAY
      *----------------------------------------------------------------------
UPDATE.DISPLAY:***

      IF NUM.LINES = 0 THEN
         CALL FB.DRAW.BOX(0,5,80,PAGE.SIZE,' ','')
         CALL FB.PRINT.CENT(0,78,13,'There are no codes on-file.')
         RETURN
      END

      STR.OUT = '(Page ':PAGE'R#1':' of ':NUM.PAGES:')'
      CRT @(78-LEN(STR.OUT),3):STR.OUT
      CRT @(0,4):STR('-',79):

      Y = 0
      LINE = (PAGE-1)*PAGE.SIZE+1

      LOOP
      UNTIL (Y=>PAGE.SIZE)
         BEGIN CASE
            CASE LINE > NUM.LINES
               *
               * Print nothing - (Actually clears line)
               *
               DESC=''

            CASE TRIM(DSP.LIST<1,LINE>) # ''
               *
               * Is this line a continuation of the prior?
               *
               IF SELECTED<DSP.LIST<1,LINE>> THEN
                  DESC = REVON:'*'
               END ELSE
                  DESC = REVOFF:' '
               END

               IF TRIM(DSP.LIST<2,LINE>) # '' THEN
                  DESC:= DSP.LIST<1,LINE>'R#3':') '          ; * No
               END ELSE
                  DESC:= '     '         ; * Yes
               END

               DESC:= DSP.LIST<3,LINE>'L#74':REVOFF
               LINE+=1

            CASE 1
               DESC=''
               LINE+=1
         END CASE

         Y+=1                            ; * Inc Y screen position
         CRT @(0,4+Y):DESC:@(-4)         ; * Draw screen line
      REPEAT

      RETURN


      *----------------------------------------------------------------------
      * SETUP.LIST.DSP
      *
      * Y = SCREEN HORIZONTAL LINE
      *
      * DSP.LIST<1,Y> - Screen displayable line number
      *                 A NULL Line Number indictates that is a wrapped text
      *                 line of the previous screen line (Y-1)
      * DSP.LIST<2,Y> -
      * DSP.LIST<3,Y> - Text to display
      *                 A NULL text to display means that this line will not
      *                 fit at the bottom of the screen.
      * DSP.LIST<4,Y> - The computed page number which this line is displayed
      *                 on.
      *----------------------------------------------------------------------
SETUP.LIST.DSP:

      LINE = 1
      Y=1
      PAGE.SIZES=''
      STRING=''
      DSP.LIST=''
      NUM.CODES = DCOUNT(FB.NOTES<1>, @VM)         ; * Count Reject Codes


      *
      * This first portion will break the rejection messages into the width
      * of the window.  This section calls the 'routine' WORD.BREAK.STRING, it
      * takes a string in STR.IN and searches for a SPACE from the maximum
      * width of the window string and goes back one char searching for a space
      * to break the line on.
      *
      LOOP
      UNTIL (LINE>NUM.CODES)
         IF STRING='' THEN
            CODE.NUM = FB.NOTES<1, LINE>
            STRING = FB.NOTES<2, LINE>
            IF SHOW.CODES THEN
               STRING:= '~(CODE :':CODE.NUM:')'
            END
            DSP.LIST<2, Y> = CODE.NUM
         END

         STR.IN = STRING
         STR.BREAK = 74
         GOSUB WORD.BREAK.STRING
         DSP.LIST<1,Y>=LINE
         DSP.LIST<3,Y>=STR.DONE'L#74'
         STRING = STR.OUT

         IF STRING = '' THEN LINE+=1
         Y+=1
      REPEAT

      *
      * This second section will insert blank lines into DSP.LIST
      * according to page size of the REJECTION WINDOW. (SEE PAGE.SIZE)
      *
      DONE=FALSE
      PAGE.PTR = PAGE.SIZE
      COUNT=0
      DSP.LIST.SIZE = DCOUNT(DSP.LIST<1>, @VM)

      LOOP
      UNTIL (DONE)
         IF PAGE.PTR+1 > DSP.LIST.SIZE THEN
            DONE=TRUE
         END ELSE
            IF DSP.LIST<2,PAGE.PTR+1> = '' THEN
               PAGE.PTR-=1
               COUNT+=1
            END ELSE
               FOR X=1 TO COUNT
                  INS ' ' BEFORE DSP.LIST<1,PAGE.PTR+1>
                  INS ' ' BEFORE DSP.LIST<2,PAGE.PTR+1>
                  INS ' ' BEFORE DSP.LIST<3,PAGE.PTR+1>
               NEXT
               PAGE.PTR+=COUNT+PAGE.SIZE
               DSP.LIST.SIZE+=COUNT
               COUNT=0
            END
         END
         IF DSP.LIST<3,PAGE.PTR> = '' THEN DONE=TRUE
      REPEAT

      *
      * This third portion will add which page number the code and message will
      * be on.  This will used for quick access to a page number for page
      * jumping when highlighting code lines.
      *
      NUM.LINES=DCOUNT(DSP.LIST<1>,@VM)
      NUM.PAGES=INT(NUM.LINES/PAGE.SIZE)
      IF REM(NUM.LINES, PAGE.SIZE) THEN NUM.PAGES+=1

      T.PAGE.NUM=1
      FOR X=1 TO NUM.LINES
         COUNT +=1
         DSP.LIST<4,X>=T.PAGE.NUM
         IF COUNT = PAGE.SIZE THEN
            T.PAGE.NUM+=1
            COUNT = 0
         END
      NEXT X

      RETURN




      *----------------------------------------------------------------------
      * WORD.BREAK.STRING
      *
      *  PASSED VALUES:
      *       STR.IN      - String to search for a space
      *       STR.BREAK   - Character position to look for a space at.
      *
      *  RETURNED VALUES:
      *       STR.IN         - The orginal string untouched
      *       STR.BREAK      - The position which the string was broken at
      *       ORG.STR.BREAK  - The orginal passed string break position
      *       STR.DONE       - The portion of the string that was extracted.
      *       STR.OUT        - The remaining portion of the string. This string
      *                        also has preceeding spaces removed.
      *
      *----------------------------------------------------------------------
WORD.BREAK.STRING:

      STR.LEN = LEN(STR.IN)
      ORG.STR.BREAK = STR.BREAK
      DONE=FALSE

      *
      * Do we have a BREAK.CHAR already in the string?
      *
      POS=INDEX(STR.IN, '~', 1)
      BEGIN CASE
            *
            * Nope.. We could not find one.
            *
         CASE POS=''

            *
            * First Character is the Break Char... Just trim it out..
            *
         CASE POS=1
            STR.IN=STR.IN[2,9999]
            STR.LEN=LEN(STR.IN)

            *
            * Yes..We found one.  Is it within range?
            *
         CASE POS >0 AND POS < STR.BREAK
            *
            * Yes.. Init our String Out (STR.DONE), Set the return break
            * position (STR.BREAK) and mark as DONE (DONE=TRUE).
            *
            STR.BREAK = POS
            STR.DONE = STR.IN[1,POS-1]
            DONE=TRUE

      END CASE

      *
      * Did we find the brake character?
      *
      IF NOT(DONE) THEN
         *
         * Nope,
         *
         * Is the passed string already short enough?
         *
         IF STR.LEN < STR.BREAK THEN
            *
            * Yes.. Init STR.DONE
            *
            STR.DONE = STR.IN
         END ELSE
            *
            * No.. We need to break it. Break on spaces.
            *
            LOOP
            UNTIL (DONE)
               IF (STR.IN[STR.BREAK,1]=' ') THEN
                  STR.DONE=STR.IN[1,STR.BREAK-1]   ; * Don't include the space
                  DONE = TRUE
               END ELSE
                  *
                  * Have not found a space yet.. Back-up 1 character and
                  * check it.
                  *
                  STR.BREAK-=1
                  *
                  * Have we failed to find a Space?
                  *
                  IF STR.BREAK < 3 THEN
                     *
                     * Yes.. Truncate string at the orginal max len.
                     *
                     STR.DONE=STR.IN[1,ORG.STR.BREAK]
                     DONE = TRUE
                  END
               END
            REPEAT
         END
      END

      *
      * Init our returning string of the remaining unused portion of the
      * orginal string.
      *
      STR.OUT = STR.IN[STR.BREAK+1,999]

      *
      * Remove the PRECEEDING SPACES on the remaining portion of the string.
      *
      DONE=FALSE
      LOOP
      UNTIL (DONE)
         IF (STR.OUT[1,1] # ' ' OR LEN(STR.OUT)=0) THEN
            DONE=TRUE
         END ELSE
            STR.OUT=STR.OUT[2,999]
         END
      REPEAT

      RETURN


      *----------------------------------------------------------------------
      * ASK.Y.OR.N
      *
      * A General Yes No prompt routine.
      *
      *----------------------------------------------------------------------
ASK.Y.OR.N:***

      YN.ANSWER = ''
      IF (CUSTOM.YN.HELP # '') THEN
         HELP=CUSTOM.YN.HELP
         CUSTOM.YN.HELP=''
      END ELSE
         HELP = CHAR(7):"Entry Options: [Y]-Yes [N]-No [X]-Back"
      END

Y.OR.N:

      CRT @(0,22):YN.MSG:@(-4)
      MASK = YN.MASK'L#1'
      Q=''
      CALL GEN.IN(LEN(YN.MSG)+1,22,MASK,'',Q,0,1,'','',2,LEN(YN.MSG)+1,22,0,QI,HELP,1,23)
      QI = OCONV(QI,'MCU')

      IF QI='' THEN QI=MASK

      BEGIN CASE
         CASE QI = '1'
            QI = 'Y'
         CASE QI = '0'
            QI = 'N'
         CASE QI = 'Y'
         CASE QI = 'N'
         CASE QI = 'X'
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO Y.OR.N
      END CASE

      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      YN.ANSWER = QI

      RETURN




      *----------------------------------------------------------------------
      * PROCEDURE:  Initialize Screen
      *----------------------------------------------------------------------
INIT.SCREEN:***

      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('-',79) ; 
      CRT @( 0,21):STR('-',79) ; 

      RETURN



      *----------------------------------------------------------------------
      * Display Edit Screen
      *----------------------------------------------------------------------
DSP.EDIT.SCN:***

      GOSUB INIT.SCREEN
      CRT @(0,3):' ###   Freight Bill Notes'
      CRT @(0,4):STR('-',79)

      RETURN



      *----------------------------------------------------------------------
      * PRINT.TABLE
      *----------------------------------------------------------------------
PRINT.TABLE:

      PRINTER ON
      PAGE 1

      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"
      *
      TITLE='Freight Bill Notes'
      L.TAB=CTR-(LEN(TITLE)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):TITLE
      *   R.TAB=(WIDTH-LEN(TEMP))-9
      *   HEAD2=TEMP:SPACE(R.TAB):"PAGE 'PL'"
      R.TAB=(WIDTH-LEN(TEMP))-20
      HEAD2=TEMP:SPACE(R.TAB):USER.NAME'L(#10 )':"PAGE 'PL'"
      *
      HEAD3 = STR('-',WIDTH-1):"'L'"
      *
      HED=HEAD1:HEAD2:HEAD3
      PAGE 0
      HEADING HED
      DONE=FALSE

      FOR LINE = 1 TO NUM.LINES
         BEGIN CASE
            CASE TRIM(DSP.LIST<3,LINE>) = ''
            CASE 1
               *
               * Is this line a continuation of the prior?
               *
               IF TRIM(DSP.LIST<2,LINE>) # '' THEN
                  PRINT
                  DESC=DSP.LIST<1,LINE>'R#3':') '  ; * No
               END ELSE
                  DESC= '     '          ; * Yes
               END

               DESC:= DSP.LIST<3,LINE>'L#74'
               PRINT DESC
         END CASE
      NEXT

      PRINTER OFF
      PRINTER CLOSE

      CALL ELINE("Table printed.")

      RETURN


      *----------------------------------------------------------------------
      * DEBUG ROUTINE
      *----------------------------------------------------------------------
DEBUG:
      *
      * Was a special debug message passed? If not, Use the default.
      *
      IF DEBUG.MSG = '' THEN DEBUG.MSG='DEBUG POINT - BREAK IT!'
      CRT @(0,0):DEBUG.MSG:
      INPUT NULL,1
      CRT @(0,0):SPACE(LEN(DEBUG.MSG)):
      DEBUG.MSG=''                       ; * Clear it to prevent reuse of special.

      RETURN
