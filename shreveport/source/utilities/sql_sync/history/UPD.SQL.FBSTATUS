******************************************************************
* Program : UPD.SQL.FBSTATUS
* Desc    : SQL PUSH OF FBSTATUS DATA
* Author  : Greg Bino
* Date    : 01/31/2018
* Copyright (c) 2016 by AFS Logistics, LLC. - All Rights Reserved
*
*
*
* Last updated by afs (AFSLOGISTICS\gbino) at 11:31:57 on 10/05/2018.
*
* Start modification history
* End modification history
*******************************************************************
$INCLUDE UNIVERSE.INCLUDE ODBC.H

      form = "T##########"
      dash = "----------"
      Expect = ""
      NULL=""
      TOT.NUM.BILLS=0
      END.DATE=DATE()
      CNT = 0
      DIM BILL.REC(60)
      MAT BILL.REC = ''
      CALL GET.USER.NEW(USER,CH.NUM)
* Begin GRB01
      VIN1=""
      VIN1<1> = "UPD.SQL.FBSTATUS"
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "S"
      CALL PROGTRACK(VIN1,VOUT1)
* End GRB01
      BEGIN CASE
         CASE USER='DAVID'
         CASE USER='SV.UVAUTO'
         CASE USER='UVTASKS'
         CASE USER = "GBINO"
         CASE 1
            CRT "YOU ARE NOT AUTHORIZED TO USE THIS PROGRAM"
            STOP
      END CASE
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01
      SQLVIN=''
      GOSUB SETUP.SQL
      GOSUB SEND.IT

      OPEN '','CLIENTS' TO F.CLIENT ELSE ABORT 201,'CLIENTS'
      OPEN '','FB.TABLES' TO F.TABLES ELSE ABORT 201,'FB.TABLES'
      OPEN '','BILLDATA.GBINO' TO F.BILLDATA ELSE ABORT 201,'BILLDATA.MKERBOW'
      OPEN '','SQL.LOG,STATUS' TO F.SQL.STATUS ELSE ABORT 201,'SQL.LOG,STATUS'
      OPEN '','FB.STATUS.UPDATE' TO F.STATUS.UPDATE ELSE ABORT 201,'FB.STATUS.UPDATE'
      OPEN '','FB.BILLS.CRX' TO F.CRX ELSE ABORT 201,'FB.BILLS.CRX'

      READ LI.CODE.REC FROM F.TABLES,'LI.CODES' ELSE LI.CODE.REC=''
      CRT @(0,0):@(-1):@(0,3):'UPD.SQL.FBSTATUS - Processing Clients for ':END.DATE'D2/':'...'

      PRV.CLIENT.ID=''
      CRT @(0,5):'Now selecting FB Status Update records by client...'
      STATUS.STMT='SSELECT FB.STATUS.UPDATE BY CLIENT#'
      EXECUTE STATUS.STMT RTNLIST STATUS.LIST CAPTURING STATUS.RESULTS
      NUM.STATUS=@SELECTED

      STATUS.EOF=0
      STATUS.CNT=0
      STATUS.PER=0
      LOOP
         READNEXT STATUS.ID FROM STATUS.LIST ELSE STATUS.EOF=1
      UNTIL STATUS.EOF DO
         STATUS.CNT+=1
         BILL.ID=FIELD(STATUS.ID,'_',2)
         READ CRX.REC FROM F.CRX,BILL.ID THEN
            CLIENT.ID=CRX.REC<1>
            IF CLIENT.ID='' THEN
               CLIENT.ID=FIELD(STATUS.ID,'_',1)
               IF CRX.REC='' THEN
                  DELETE F.STATUS.UPDATE,STATUS.ID
                  CONTINUE
               END ELSE
                  WRITEV CLIENT.ID ON F.CRX,BILL.ID,1
                  CONTINUE
               END
            END
         END ELSE
            DELETE F.STATUS.UPDATE,STATUS.ID
            CONTINUE
         END
         IF CLIENT.ID#PRV.CLIENT.ID THEN
            READV CLIENT.NAME FROM F.CLIENT,CLIENT.ID,2 THEN
               CRT @(0,8):'Now updating FB status for client ':CLIENT.ID:' ':CLIENT.NAME:'...':@(-4):
               OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILL THEN       ; * JMK02
                  EDI.FOUND=0
                  VC.FOUND=0
                  DIV.FOUND=0

                  ***      OPEN '','EDI.BILLS.HIST,':CLIENT.ID TO F.EDI THEN EDI.FOUND=1
                  ***      OPEN '','VEND.CUST,':CLIENT.ID TO F.VC THEN VC.FOUND=1
                  ***      OPEN '','DIVISION.CODE,':CLIENT.ID TO F.DIV THEN DIV.FOUND=1
                  PRV.CLIENT.ID=CLIENT.ID
               END ELSE
                  CONTINUE
               END
            END ELSE
               CONTINUE
            END
         END
         *****       CALL PROG.BAR(12,STATUS.CNT,NUM.STATUS,STATUS.PER)
         BILL.TRY=0
READBILL:*
         MATREAD BILL.REC FROM F.BILL,BILL.ID THEN
            EDI.REC=''
            IF EDI.FOUND THEN
               *****  READ EDI.REC FROM F.EDI,BILL.ID ELSE EDI.REC=''
            END
* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE
            CARRIER.ID=FIELD(BILL.ID,'*',1)
            PRO=FIELD(BILL.ID,'*',2)
            DIV.REC=''
            IF DIV.FOUND THEN
               DIV.ID=BILL.REC(9)
               *****     READ DIV.REC FROM F.DIV,DIV.ID ELSE DIV.REC=''
            END
            VC.REC=''
            IF VC.FOUND THEN
               VC.ID=BILL.REC(17)
               *****     READ VC.REC FROM F.VC,VC.ID ELSE VC.REC=''
            END
*****            SQLVIN=''
*****            SQLVIN<1>=USER
*****            SQLVIN<2>=CLIENT.ID
*****            SQLVIN<3>=BILL.ID
*****            SQLVIN<4>=END.DATE
*****            SQLVIN<5>=STATUS.CNT
*****            SQLVOUT=''
            ****  CALL UPD.SQL.FBSTATUS.SUB(SQLVIN,SQLVOUT,BILL.REC,F.SQL.STATUS)
            GOSUB PREP.DATA


            DELETE F.STATUS.UPDATE,STATUS.ID
            IF MOD(STATUS.CNT,500)=0 THEN
****               CRT @(0,22):'Sleeping...zzz...zzz...'
****               EXECUTE 'SLEEP 1'
               CRT @(0,22):@(-3):
            END
         END ELSE
            IF CLIENT.ID#'00000' THEN
               BILL.TRY+=1
               TXT='Freight Bill ':BILL.ID:' failed reading for client ':CLIENT.ID:' at ':TIME():' on ':DATE():'. Please resubmit'
               EXECUTE 'BBSEND GREGB "':TXT:'" CHECK SQL.FBSTATUS '
               WRITE TXT ON F.BILLDATA,CLIENT.ID:'_':STATUS.CNT:'-':BILL.TRY
               IF BILL.TRY<5 THEN
*****                  EXECUTE 'SLEEP 1' CAPTURING DELAY.RESULTS
                  GO SKIP.BILL
                  ****   GO READBILL
               END ELSE
                  GO SKIP.BILL
               END
            END
         END
SKIP.BILL:*
      REPEAT
*********************************************
THE.END:***
*********************************************
* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1> = 'nmeddaugh@afs.net'
            MVIN<4>='AFS_UPD.SQL.FBSTATUS.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

*     End of program
* Begin GRB01
      VIN1=''
      VIN1<1> = "UPD.SQL.FBSTATUS"
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "E"
      CALL PROGTRACK(VIN1,VOUT1)
* End GRB01
      STOP
***********************************************************************
SEND.IT:*
***********************************************************************
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
      FN = "SQLAllocStmt"
      STATUS = SQLALLOCSTMT(CONENV,UPDSHIPENV)
      GOSUB CKCONENV
*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
      OPT.STR = STR(' ?,',12)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdFreightBillStatus (":OPT.STR:")}"           ; * 17 PLACEHOLDERS

      ROWNUM = 0
      FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*
      STATUS = SQLSETPARAM(UPDSHIPENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.BILL.AMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 3, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.PAY.AMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 4, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.PAY.DATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 5, SQL.B.BASIC, SQL.VARCHAR, 1000, 0, SQL.FBS.STATUS) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 6, SQL.B.BASIC, SQL.VARCHAR, 1000, 0, SQL.FBS.NOTE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 7, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.FBS.CUTBACK.CODE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 8, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.FBS.CUTBACK.DESC) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 9, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.CUTBACK.AMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV,10, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.FBS.PRONUM) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV,11, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.ENTRY.DATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV,12, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.FBS.ENTRY.USER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV

      FN = "SQLPrepare"
      STATUS = SQLPREPARE(UPDSHIPENV, INST1)
      STMTENV=UPDSHIPENV
      ENVSRC='UPDSHIP'
      GOSUB CKSTMTENV
      RETURN
*********************************************************************
PREP.DATA:
*********************************************************************
      **PASSED FROM PX TO SUB
      ****       SQLVIN<1>=USER
      ****        SQLVIN<2>=CLIENT.ID
      *****       SQLVIN<3>=BILL.ID
      *****       SQLVIN<4>=END.DATE
      *****      SQLVIN<5>=STATUS.CNT
      *****     SQLVOUT=''

      ***  USER=VIN<1>
      ****   CLIENT.ID=VIN<2>
      ***   BILL.ID=VIN<3>
      BILL.CNT = STATUS.CNT
      DATE = END.DATE
      IF DATE='' THEN DATE=DATE()
      SEQ=FIELD(BILL.ID,'*',3)
      IF SEQ#0 THEN RETURN
      LI.CODES=''
****      LI.CODES<1>=VIN<4>
**       LI.CODES<2>=VIN<5>

      TOT.NUM.BILLS=0
      ERROR.CNT=0
10:   ERRORS=''

      UPS.EBILL=0
      PRO=FIELD(BILL.ID,'*',2)
      UPS.FDATE=ICONV(PRO[8,2]:'/':PRO[10,2]:'/':PRO[12,2],'D')
      BEGIN CASE
         CASE 1
            UPS.EBILL=(BILL.REC(53)="EBILL.IMPORT.NEW")
      END CASE
      IF UPS.EBILL THEN
         UPD.STATUS=0
      END
      CARRIER.ID=FIELD(BILL.ID,'*',1)
      PRO=FIELD(BILL.ID,'*',2)
      LPRO=LEN(PRO)
      BD=0
      AD=0
      IF PRO[LPRO-1,2]='BD' THEN BD=1
      IF PRO[LPRO-1,2]='AD' THEN AD=1
      IF BILL.REC(37)#'' THEN
         PROC.DT=BILL.REC(37)'D4/'
      END ELSE
         PROC.DT=''
      END
      SQL.FBSTATUS.ID=CLIENT.ID:'_':DATE:'_':BILL.CNT
      DATA CARRIER.ID,PRO,USER,'','AFSQV',''
      EXECUTE 'INET.FB.STATUS' CAPTURING FBS.RESULTS

      FOUND=0
      NATT=DCOUNT(FBS.RESULTS,@AM)
      FOR ATT=1 TO NATT UNTIL FOUND
         FBS.LINE=FBS.RESULTS<ATT>
         FBS.PRO=FBS.LINE<1,1>           ; * PRO
         FBS.BILL.AMT=FBS.LINE<1,2>      ; * Billed Amount
         FBS.PAID.AMT=FBS.LINE<1,3>      ; * Paid Amount
         FBS.PAY.DT=FBS.LINE<1,4>        ; * Check Date
         IF FBS.PAY.DT='' THEN
            FBS.PAID.AMT=''
         END
         FBS.STATUS=FBS.LINE<1,5>        ; * Status Details
         FBS.NOTE=FBS.LINE<1,6>          ; * Notes
         FBS.CBCODE=FBS.LINE<1,7>        ; * CUT BACK CODE
         FBS.CBDESC=FBS.LINE<1,8>        ; * CUT BACK DESC
         FBS.CBAMT=FBS.LINE<1,9>         ; * CUT BACK AMOUNT
         FBS.ENTRY.DATE=FBS.LINE<1,10>   ; * ENTRY DATE
         FBS.ENTRY.USER=FBS.LINE<1,11>   ; * ENTRY USER
         IF FBS.PRO=PRO THEN
            SQL.UNIQUEKEY=CLIENT.ID:CARRIER.ID:PRO:PROC.DT[7,4]:PROC.DT[1,2]:PROC.DT[4,2]
            SQL.FBS.BILL.AMT=FBS.BILL.AMT
            SQL.FBS.PAY.AMT=FBS.PAID.AMT
            SQL.FBS.PAY.DATE=FBS.PAY.DT
            SQL.FBS.STATUS=FBS.STATUS[1,1000]
            SQL.FBS.NOTE=FBS.NOTE[1,1000]
            SQL.FBS.PRONUM=FBS.PRO
            SQL.FBS.CUTBACK.CODE=FBS.CBCODE
            SQL.FBS.CUTBACK.DESC=FBS.CBDESC[1,100]
            SQL.FBS.CUTBACK.AMT=FBS.CBAMT
            SQL.FBS.ENTRY.DATE=FBS.ENTRY.DATE      ; * JMK02
            SQL.FBS.ENTRY.USER=FBS.ENTRY.USER      ; * JMK02

            SQL.FBSTATUS.REC=''
            SQL.FBSTATUS.REC< 1>=SQL.UNIQUEKEY
            SQL.FBSTATUS.REC< 2>=SQL.FBS.BILL.AMT
            SQL.FBSTATUS.REC< 3>=SQL.FBS.PAY.AMT
            SQL.FBSTATUS.REC< 4>=SQL.FBS.PAY.DATE
            SQL.FBSTATUS.REC< 5>=SQL.FBS.STATUS
            SQL.FBSTATUS.REC< 6>=SQL.FBS.NOTE
            SQL.FBSTATUS.REC< 7>=SQL.FBS.CUTBACK.CODE
            SQL.FBSTATUS.REC< 8>=SQL.FBS.CUTBACK.DESC
            SQL.FBSTATUS.REC< 9>=SQL.FBS.CUTBACK.AMT
            SQL.FBSTATUS.REC<10>=SQL.FBS.PRONUM
            SQL.FBSTATUS.REC<11>=SQL.FBS.ENTRY.DATE
            SQL.FBSTATUS.REC<12>=SQL.FBS.ENTRY.USER
            SQL.FBSTATUS.ID=CLIENT.ID:'_':DATE:'_':BILL.CNT


            CNT +=1
            CRT @(10,10):CNT
            FN = "SQLExecute"
            STATUS = SQLEXECUTE(UPDSHIPENV)
            STMTENV=UPDSHIPENV
            GOSUB CKSTMTENV
            FOUND=1

         END
      NEXT ATT
      RETURN
************************************************************************
SETUP.SQL:*
************************************************************************
* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLALLOCENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLALLOCCONNECT(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*

      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='PRODQV'              ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVQV'               ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
IF USER = "GBINO" THEN DEBUG
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLCONNECT(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV
      *
* Now allocate an SQL statement environment
* to be used for executing SQL statements
*
      Fn = "SQLAllocStmt"
      STATUS = SQLAllocStmt(CONENV,UPDPYMTENV)
      GOSUB CKCONENV

      RETURN

*****************************************************************
CKCONENV:
*****************************************************************
      COUNT = -1
      IF STATUS EQ -2 THEN CRT "INVALID CONNECTION HANDLE" ; RETURN TO THE.END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               CRT "Allowed error of ":STATE:" returned for func ":Fn
               GOTO 299
            END ELSE
               CRT "Status for ":Fn:" call is: ":STATUS
               CRT "SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               CRT "Error text is"
               CRT "    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            CRT "EXITING CKCONENV" ; RETURN TO THE.END
         END
      END
299:  *
      RETURN
*****************************************************************
CKSTMTENV:
*****************************************************************
      IF STATUS EQ -2 THEN
         CRT "INVALID STATEMENT HANDLE" ; RETURN TO THE.END
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               CRT "Allowed error of ":STATE:" returned for func ":Fn
               GOTO 399
            END ELSE
               CRT "Status for ":Fn:" call is: ":STATUS
               CRT "SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               CRT "Error text is"
               CRT "    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            CRT "EXITING CKSTMTENV" ; RETURN TO THE.END
         END
      END
399:  *
      RETURN
