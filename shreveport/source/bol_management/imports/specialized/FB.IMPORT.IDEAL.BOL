********************************************************************************
* Program : FB.IMPORT.IDEAL.BOL 
* Author  : James Barberousse
* Date    : February 2002
*
* Import text data from Ideal Chemical (saved as IDEAL.TXT in Myra's U
* drive) and write as inbound and outbound items in FB.BOL.CRX,01053.
*
* Copyright (c) 2002 by AFS Logistics, LLC. -- All Rights Reserved
********************************************************************************

$INCLUDE PROG.ADMIN INC_OPTIONS

*
***   Initialize general variables
*
      CALL GET.USER(USER.NAME)
      CALL CHANNEL(CH.NUM)
      PROG.NAME='FB.IMPORT.IDEAL.BOL'
      PROG.DESC='Import Ideal BOL Codes'
      PACK.NAME='Freight Payment'
      PROMPT''
       UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.IMPORT.IDEAL.BOL' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
       CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/23/2010
      MASK.CHAR='-'
      TAB=CHAR(9)
      ESC=CHAR(27)

*
***   Write screen header
*
      CALL AFS.SCR.HEAD(CO.ID,FILE.ID,'',PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('=',79)

*
***   Restrict program usage
*
      VALID.USER=1
      BEGIN CASE
         CASE USER.NAME='OWEN'
            NULL
         CASE USER.NAME='MYRA'
            NULL
         CASE USER.NAME='DAVID'
            NULL
         CASE USER.NAME='NPRATT'
            NULL
         CASE USER.NAME='J-AMES'
            NULL
         CASE 1
            VALID.USER=0
      END CASE

      IF NOT(VALID.USER) THEN
         CRT 'This is a restricted access application.'
         GOTO THE.END
      END


100:  LN='Are you ready to process BOL codes for Ideal Chemical 01053? '
      MASK='N-'
      HELP='[Y]=Yes [N]=No [EX]=Exit'
      CALL GEN.IN(0,5,LN:MASK,'',Q,0,2,'','',2,-2,5,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX' OR QI='N' OR QI=''
            GOTO THE.END
         CASE QI='Y'
            NULL
         CASE 1
            GOTO 100
      END CASE

*
***   Initialize input variables with their defaults
*
      IDEAL.IMPORT=''
      IDEAL.LAST.IMPORT=''
      IDEAL.EXPORT=''
      IDEAL.EXPENSE=''
      COUNTER=0
      COUNTER.INBOUND=0
      COUNTER.OUTBOUND=0

*
***   Open files
*
      OPEN '','BILLDATA.MYRA' TO F.BILLDATA ELSE
         CALL OPEN.ABORT('BILLDATA.MYRA',PROG.NAME)
      END
      OPEN '','EXPENSE.CODES,01053' TO F.EXPENSE ELSE
         CALL OPEN.ABORT('EXPENSE.CODES,01053',PROG.NAME)
      END
      OPEN '','FB.BOL.CRX,01053' TO F.BOL ELSE
         CALL OPEN.ABORT('FB.BOL.CRX,01053',PROG.NAME)
      END

*
***   Read in the existing Ideal Chemical text file
*
*     Format of Ideal Chemical Text file     Format of FB.BOL.CRX,01053
*     Tab-delimited with possible spaces     ITEM ID = I*PO# OR O*BOL#
*     -----------------------------------------------------------------
*     ( 1) Type (IB or OB)                   < 1> - < 3> empty                   
*     ( 2) Division                          < 5>
*     ( 3) Warehouse                         < 6>
*     ( 4) Supplier #                        < 7>
*     ( 5) Supplier Name                     < 8>                     
*     ( 6) PO #                              < 9> checked
*     ( 7) Date                              <10>
*     ( 8) General Ledger Code               < 4>
*     ( 9) BOL#                              <11> checked
*     (10) Customer #                        <12>
*     (11) Customer Name                     <13>
*     (12) Invoice #                         <14>
*     (13) Ship Via                          <15>

      READ IDEAL.IMPORT FROM F.BILLDATA,'IDEAL.TXT' ELSE
         CALL ELINE('IDEAL.TXT does not exist.')
         GOTO THE.END
      END
      IDEAL.LAST.IMPORT=IDEAL.IMPORT; * Save file for writing as "last"

*
***   Process the file
*
      IDEAL.IMPORT=CHANGE(IDEAL.IMPORT,TAB,@VM)
      NUM.ATTRIBUTES=DCOUNT(IDEAL.IMPORT,@AM)

*     Trim possible spaces off
      FOR X=1 TO NUM.ATTRIBUTES
         NUM.VALUES=DCOUNT(IDEAL.IMPORT<X>,@VM)
         FOR Y=1 TO NUM.VALUES
            IDEAL.IMPORT<X,Y>=TRIM(IDEAL.IMPORT<X,Y>)
         NEXT Y
      NEXT X

      CRT @(0,5):'Total items in import file = ':NUM.ATTRIBUTES:@(-4)
      CRT @(0,10):'Inbound          Outbound          Total Inbound / Outbound'
      CRT @(0,11):'-------          --------          ------------------------'

      ALREADY.THERE=0
      NOT.THERE=0

      LOOP WHILE IDEAL.IMPORT#''
         IF IDEAL.IMPORT<1,8>#'' THEN
            READ IDEAL.EXPENSE FROM F.EXPENSE,IDEAL.IMPORT<1,8> ELSE
               IDEAL.EXPENSE=''
               IDEAL.EXPENSE<1>=IDEAL.IMPORT<1,8>
               WRITE IDEAL.EXPENSE ON F.EXPENSE,IDEAL.IMPORT<1,8>
            END
         END
         BEGIN CASE
            CASE IDEAL.IMPORT<1,1>='IB'
               COUNTER.INBOUND+=1
               COUNTER+=1
               CRT @(0,12):COUNTER.INBOUND'R#7'
               CRT @(35,12):COUNTER'R#24'
               GOSUB BUILD.EXPORT
               ITEM.ID='I*':IDEAL.IMPORT<1,6>
               READ BOL.ITEM FROM F.BOL,ITEM.ID THEN
                  ALREADY.THERE+=1
                  IF BOL.ITEM<4>#'' THEN
                     IF BOL.ITEM<4>#IDEAL.EXPENSE<1> THEN
                        GOSUB SEND.EMAIL.WARNING
                     END
                  END ELSE
                     WRITE IDEAL.EXPORT ON F.BOL,ITEM.ID ELSE
                        CALL ELINE("Couldn't write In-Bound item: ":ITEM.ID)
                     END
                  END
               END ELSE
                  NOT.THERE+=1
                  WRITE IDEAL.EXPORT ON F.BOL,ITEM.ID ELSE
                     CALL ELINE("Couldn't write In-Bound item: ":ITEM.ID)
                  END
               END
            CASE IDEAL.IMPORT<1,1>='OB'
               COUNTER.OUTBOUND+=1
               COUNTER+=1
               CRT @(17,12):COUNTER.OUTBOUND'R#8'
               CRT @(35,12):COUNTER'R#24'
               GOSUB BUILD.EXPORT
               ITEM.ID='O*':IDEAL.IMPORT<1,9>
               READ BOL.ITEM FROM F.BOL,ITEM.ID THEN
                  ALREADY.THERE+=1
                  IF BOL.ITEM<4>#'' THEN
                     IF BOL.ITEM<4>#IDEAL.EXPENSE<1> THEN
                        GOSUB SEND.EMAIL.WARNING
                     END
                  END ELSE
                     WRITE IDEAL.EXPORT ON F.BOL,ITEM.ID ELSE
                        CALL ELINE("Couldn't write Out-Bound item: ":ITEM.ID)
                     END
                  END
               END ELSE
                  NOT.THERE+=1
                  WRITE IDEAL.EXPORT ON F.BOL,ITEM.ID ELSE
                     CALL ELINE("Couldn't write Out-Bound item: ":ITEM.ID)
                  END
               END
         END CASE
         DEL IDEAL.IMPORT<1>
      REPEAT
      
      WRITE IDEAL.LAST.IMPORT ON F.BILLDATA,'IDEAL-LAST.TXT' THEN
         WRITE IDEAL.LAST.IMPORT ON F.BILLDATA,'IDEAL-':TIMEDATE():'.TXT'
         DELETE F.BILLDATA,'IDEAL.TXT'; * Delete the original Ideal text file
      END ELSE
         CALL ELINE("Couldn't write IDEAL-LAST.TXT. Not deleting IDEAL.TXT. Call James.")
      END

      CRT @(0,15):'Items already in the file and not rewritten = ':ALREADY.THERE
      CRT @(0,17):'Items not in the file and written           = ':NOT.THERE
      CALL ELINE('')

      GOTO THE.END


BUILD.EXPORT:***
*     Build export line
      IDEAL.EXPORT=''
      IDEAL.EXPORT< 4>=IDEAL.IMPORT<1, 8>
      IDEAL.EXPORT< 5>=IDEAL.IMPORT<1, 2>
      IDEAL.EXPORT< 6>=IDEAL.IMPORT<1, 3>
      IDEAL.EXPORT< 7>=IDEAL.IMPORT<1, 4>
      IDEAL.EXPORT< 8>=IDEAL.IMPORT<1, 5>
      IDEAL.EXPORT< 9>=IDEAL.IMPORT<1, 6>
      IDEAL.EXPORT<10>=IDEAL.IMPORT<1, 7>
      IDEAL.EXPORT<11>=IDEAL.IMPORT<1, 9>
      IDEAL.EXPORT<12>=IDEAL.IMPORT<1,10>
      IDEAL.EXPORT<13>=IDEAL.IMPORT<1,11>
      IDEAL.EXPORT<14>=IDEAL.IMPORT<1,12>
      IDEAL.EXPORT<15>=IDEAL.IMPORT<1,13>
      RETURN


SEND.EMAIL.WARNING:***
*     Send an email to Owen, David, James, Myra, and Marshall warning that there is a 
*     duplicate inbound or outbound shipment with a different expense code.
      VIN=''
      VOUT=''

      VIN<1,1>='oweninfo@afs.net';                      * TO: Email addresses
      VIN<1,2>='David@afs.net'
*     VIN<1,3>='J-ames@afs.net'
*****      VIN<1,3>='Myra@afs.net'
      VIN<1,4>='Marshall@afs.net'

      VIN<2>='';                                             * CC: Email addresses      
      VIN<3>='';                                             * BCC: Email addresses
      VIN<4>='Reports@afs.net';                     * From Email address
      VIN<5,1>='Ideal Chemical 01053 ':DATE()'D4-';          * Subject of Email

      * Email body
      VIN<6,-1>='                           W A R N I N G'
      VIN<6,-1>=' '
      VIN<6,-1>='During processing of the Ideal Chemical (01053) weekly IDEAL.TXT file on ':DATE()'D4-':','
      VIN<6,-1>='a different expense code (GL code) was found for the same inbound or outbound shipment'
      VIN<6,-1>=' '
      VIN<6,-1>='Item-ID : ':ITEM.ID
      VIN<6,-1>='Expense Code already in the file :       ':BOL.ITEM<4>
      VIN<6,-1>='New expense code (not written to file) : ':IDEAL.EXPENSE<1>

      VIN<7>=1; * Auto format (add carriage returns to end of text)

      CALL SENDMAIL(VIN,VOUT)
      IF VOUT<1>='ERROR' THEN
         CALL ELINE('Email warning of differing expense code could not be sent.')
      END
      RETURN     


THE.END:***
*     End of program
      CRT @(0,23):
      END
