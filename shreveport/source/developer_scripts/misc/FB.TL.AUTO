      SUBROUTINE FB.TL.AUTO(VIN,VOUT,DAUDIT,CONTR.DFSC,BENCH.DFSC,DTARIFFS,DTARIFF.DATE.XREF,LI.CODES,F.AUDIT.TABLES,F.AUDIT.ZIPS,F.PCIN,F.PCOUT,F.TABLES)
*
 UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.TL.AUTO' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
 CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/23/2010
*
* FREIGHT BILLING PACKAGE
*
* AUTHOR:      OWEN HOLMAN
* DATE:        DECEMBER 23, 1996
* DESCRIPTION: THIS PROGRAM AUTOMATICALLY RATES SHIPMENTS
* USE:         AUDIT "MISROUTES" AND EDI BILLS
*
* THIS PROGRAM IS A PROPRIETARY PRODUCT OF AUTOMATED FREIGHT SYSTEMS
* AND MAY NOT BE USED, COPIED OR MODIFIED WITHOUT THE EXPRESS
* WRITTEN CONSENT OF SAME.
*
* 082802 - JMK01 - ADD CANADA TO AUDIT PROCESS
* 110802 - JMK02 - ADD ASSESSORIAL CWT CALCULATION
* 121302 - JMK03 - USE MISC CHG CODES ONLY ONCE
* 012103 - JMK04 - ADD MAX.LTL TO PROCESSING
* 050603 - JMK06 - ADD CALCULATION DETAILS TO OUT VARIABLE
* 060603 - JMK07 - DISABLE JMK06 PROCESSING
* 120903 - JMK08 - LETS TRY JMK06 AGAIN
* 021104 - JMK09 - ADJUST FOR CONTRACT MINIMUMS FOR FB DETAILS
* 021204 - JMK10 - ADD BENCHMARK MIN FOR BLDR FACTORY ST 01209
* 111504 - JMK11 - ADD FORCED BENCHMARK MINIMUM PARAMETERS
* 022805 - JMK12 - COLLECT THREE SETS OF FSC DATA FOR REVIEW
* 040505 - JMK13 - ADD ATK (01365) BM OVERRIDES PER AGREEMENT
* 042905 - JMK14 - ADJUST MAX WEIGHT LTL EVALUATIONS FROM GE TO GT
* 081905 - JMK15 - ADD CONS MFG (00843) BM OVERRIDES PER AGREEMENT
* 112305 - JMK16 - GET TRANSIT TIME AND DIRECT INFO FROM RATEWARE SERVER
* 120705 - JMK17 - SETUP EXCEPTIONS FOR TIME AND DIRECT INFO FROM RATEWARE
* 121305 - JMK18 - ADD TERMINAL INFO FROM CARRIER CONTACT SERVICE
* 012506 - JMK20 - ADD FLAT RATE CHARGES FOR ATK PALLETS AND OTHERS
* 013006 - JMK21 - EXPAND FLAT RATE CHARGES FOR INTRA AND INTER
* 020206 - JMK22 - TEST AFS500 ON RWS FOR FUNCTIONALITY
* 020906 - JMK23 - ADD MULTIPLE CALLS FOR RWS WHEN NETWORK CLOGS
* 021306 - JMK24 - FLAT RATE CHARGE ADJUSTMENTS FOR "0.00" PLACEHOLDERS
* 021406 - JMK25 - DISABLE THE AFS500 CALLS TO RWS AND REINSTATE AFS500 SUBROUTINE
* 030606 - JMK26 - ENABLE CALLS TO RWS AND DISABLE AFS500 SUBROUTINE
* 030806 - JMK27 - ADD ACCESSORIAL CHARGES TO RETURN INFORMATION
* 031506 - JMK28 - RE-ENABLE THE ABSOLUTE MINIMUM WITH THE JMK24 CHANGES
* 031706 - JMK29 - ADD CARRIER DATA UPDATE DATE FROM RWS TO RETURN INFORMATION
* 050106 - JMK30 - DISABLE CON-WAY AB-BA REQUIREMENT FOR THIRD PARTY
* 071306 - JMK31 - ADD AFS525 TO RATEWARE SERVER CALL
* 083106 - JMK32 - ADD OLA.CARRIER FOR SUBSTITUTION CARRIERS
* 092606 - JMK33 - PASS CLIENT TO RWS FOR WEIGHT ADJUSTMENT (01215)
* 122206 - JMK34 - T200612060011 / priority 2 / Excessive charge - CALCULATE % FOR MISC CHG
* 102407 - JMK35 - T070072 - Pozas Bros Direct Points (C200707050003)
* 120507 - JMK36 - C070955 - Add ability to use Old AFS FSC in Benchmark Calculation
* 010308 - JMK37 - T070072 - Pozas Bros Direct Points (C200707050003)
* 020108 - JMK38 - C080232 - Adding Joint Line Pricing to OLA
* 022008 - JMK39 - T080556 - Joint line rate quote
* 022108 - NPR02 - T070199 - 3RD PTY SELECT BEST TABLE BASED ON QUOTE AMT AND NOT HIGHEST TABLE #
* 022208 - JMK40 - TEMPORARY PATCH FOR ROADWAY AVINGER SERVICE OVERRIDE
* 022708 - JMK41 - C080646 - Modify inbound joint line pricing
* 030508 - JMK42 - T080590 - Rate Estimate unresponsive 4:00 - 6:30 EST.
* 031108 - JMK43 - T080590 - Rate Estimate unresponsive 4:00 - 6:30 EST.
* 041808 - NPR03 - C080766 - Adding a date effective to OLA zip code substitution screen
* 051308 - JMK44 - PASS F.TABLES FILE VARIABLE TO RWS AND RWS.SVC INSTEAD OF OPENING
* 062708 - JMK45 - INITIALIZE "ROUTE.ZIP" AND "LOOKUP.ZIP" TO AVOID VNAV NOTICE
* 071508 - JMK46 - C081534 - Special SS report for saving spread between pricing arrangements
* 080708 - NPR04 - T080691 - Added lookup on Table for setting JL related flags for specific zips
* 081108 - JMK47 - C081931 - Send an email each time an invalid zip is sent to RWS
* 090908 - JMK48 - T082074 - Joint Line issue: some information coming from wrong table
* 092908 - JMK49 - C082012 - Add Beaver Express points into web rater
* 100608 - JMK50 - T082273 - FSC Benchmarks ; Force FSC Benchmark to "C" when current fuel is not "AFS" or "AFN"
* 111208 - JMK51 - C081905 - Allow multiple discounts on BM in OLA
* 020409 - JMK52 - ADD TOTAL GROSS CHARGE WITHOUT DISCOUNT TO OUTPUT
* 022709 - DRF01 - VIN<52> is bill date and is used to calculate the FSC
* 052809 - JMK53 - C090708 - Changes to commissions for new client Freight Buddy
* 061809 - JMK54 - T090800 - JL state is turned on but still saying "cannot audit, this is a misroute, NO INBOUND JOINT LINE PRICING"
* 081310 - JMK55 - ADDITIONAL FILTER FOR JOINT LINE CONFIRMATION JL.FLAG MUST HAVE SOME CC FLAG AND NOT NULL
* 092611 - JMK56 - C111243 - AER Sales 01863 Excessive Freight Expense
* 072612 - JMK57 - SysAid#3317 - USI 25117 - Transit Times
* 022515 - JMK58 - SysAid#15482 - NON- SMC Carrier Service 1,1,11,17
* 031715 - JMK59 - SysAid#16032 - Webrater issues withe SEFL
*********************************************************************
*
      $INCLUDE PROG.ADMIN INC_OPTIONS
      $INCLUDE FILE.DEFS INC_FB.AUDIT
*
CALL ELINE("IN FB.TL.AUTO") ; RETURN
*
* Initialize variables
*
      PROMPT ''
*     DFSC=''
      FAK=1
      FSC.LOGISTICS.AMT=0
      GTOT.CONTR.AMT=0
      GTOT.BENCH.AMT=0
      READ AFSO.BENCH.DFSC FROM F.TABLES,'AFSO*FSC' ELSE AFSO.BENCH.DFSC=''      ; * JMK36
      CONTR.FSC.PARMS=''                 ; * JMK12
      BENCH.FSC.PARMS=''                 ; * JMK12
      AFSO.BENCH.FSC.PARMS=''            ; * JMK36
      AFS.FSC.PARMS=''                   ; * JMK12
      TOT.BENCH.AMT=0                    ; * JMK12
      TOT.CONTR.AMT=0                    ; * JMK12
      WHY=''
      DTL.VOUT=''                        ; * JMK06
      ZIP.VOUT=''
      TP.VOUT1 = ""                      ; * NPR02
      TP.VOUT2 = ""                      ; * NPR02
      CONTR.TARIFF.DRIVER=''
      BENCH.TARIFF.DRIVER=''
      CONTR.DOUT=''
      BENCH.DOUT=''                      ; * In case of no logistics
      NULL=''                            ; * Used for Mass Change back to CRT Command
      DTL.VOUT=''                        ; * JMK06
      SENT.TO.PC=0
      ERROR=''
      TESTING=0
      X.EX.FLAG=''
      RWS.TIMES = 0                      ; * JMK23
      OPT = VIN<1>
      IF OPT = 'I' THEN
         INQUIRE = 1
         CW.MODE = 'EDIT'
         MC.MODE = 'EDIT'
      END ELSE
         INQUIRE = 0
         CW.MODE = 'INPUT'
         MC.MODE = 'INPUT'
      END
      TRANS.MODE=''
      BILL.DATE=VIN<3>
      TRANS.MODE=VIN<4>
      PIECES=VIN<5>
      TOT.WEIGHT=VIN<6>
      AIR.MISC.CHARGE=VIN<7>             ; * Not Used -> Passed Through
      CARRIER.CHARGE=VIN<8>
      CARRIER=VIN<10>
      OLA.CARRIER=CARRIER                ; * JMK32
      IF CARRIER='13171' THEN OLA.CARRIER='01625'  ; * JMK32
      IF CARRIER='00537' THEN OLA.CARRIER='12826'  ; * JMK32
      IF CARRIER='12244' THEN OLA.CARRIER='12826'  ; * JMK32
      CK.CS=0                            ; * JMK35
*     IF CARRIER='00623' THEN CK.CS=1    ; * JMK35
*     IF CARRIER='04654' THEN CK.CS=1    ; * JMK35
      READ NSMC.LIST FROM F.TABLES,'NSMC.CARRIERS' ELSE NSMC.LIST=''   ; * JMK37
      LOCATE CARRIER IN NSMC.LIST SETTING WPOS THEN CK.CS=1  ; * JMK37
      CLIENT=VIN<11>
      IOT=VIN<12>
      ORIG.ZIP=VIN<13,1>
      ORIG.CITY=VIN<13,2>
      ORIG.STATE=VIN<13,3>
      DEST.ZIP=VIN<14,1>
      DEST.CITY=VIN<14,2>
      DEST.STATE=VIN<14,3>
      ROUTE.ZIP=''                       ; * JMK45
      LOOKUP.ZIP=''                      ; * JMK45
      CDN.ROUTE=0                        ; * JMK01
      SET.VOUT=1                         ; * NPR02
      IF NOT(NUM(ORIG.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      IF NOT(NUM(DEST.ZIP)) THEN CDN.ROUTE=1       ; * JMK01
      CL.ZIP.DEF=VIN<15>
      USER=VIN<16>
      IF USER='OWEN' THEN OWEN=1 ELSE OWEN=0
      IF NOT(TESTING) THEN OWEN=0
      MISROUTE=VIN<17>
*DF      CC=VIN<25> ; * Character Count
      CLASS.WGT=''
      CLASS.WGT<1>=VIN<18>               ; * Mv Classes
      CLASS.WGT<2>=VIN<19>               ; * Mv Weights
      IF TOT.WEIGHT+0=0 THEN             ; * Add it up from the MV Weights
         TIMES=DCOUNT(CLASS.WGT<2>,@VM)
         TOT.WEIGHT=0
         FOR X = 1 TO TIMES
            TOT.WEIGHT+=CLASS.WGT<2,X>
         NEXT X
      END
      MISC.CHG=''
      MISC.CHG<1>=VIN<21>                ; * Mv Charge Codes
      MISC.CHG<2>=VIN<22>                ; * Mv Contract  Charge Amounts
      MISC.CHG<3>=VIN<23>                ; * Mv Benchmark Charge Amounts
      ACC.ARRAY=MISC.CHG                 ; * JMK27
      NO.LOG.FSC=VIN<35>                 ; * 1=Do not Calculate/ADD FSC to Log/Bench Amt
      LOGISTICS=VIN<24>
*DF      TOT.CHARGE=VIN<25>
      MAX.LTL=VIN<46>                    ; * JMK04
      IF MAX.LTL='' THEN MAX.LTL = '15000'
      IF NOT(NUM(MAX.LTL)) THEN MAX.LTL='15000'
      IF MAX.LTL < 0 THEN MAX.LTL = '15000'
      ORIG.CARRIER=VIN<47>               ; * JMK12
      FORCE.BENCH.MIN=VIN<48>            ; * JMK11
      CARR.ONLY.FSC=VIN<49>              ; * JMK12
      CARRIER.SCAC=VIN<50>               ; * JMK16
      CARRIER.TYPE=VIN<51>               ; * JMK16
      FSC.BILL.DATE=VIN<52>  ; * DRF01
      TRANSIT.TIME=''                    ; * JMK16
      DIRECT.FLAG='1'                    ; * JMK16
      ORIG.DIR.FLG=''                    ; * JMK16
      DEST.DIR.FLG=''                    ; * JMK16
      COMB.DIR.FLG=''                    ; * JMK16
      ORIG.TERM.NAME=''                  ; * JMK18
      ORIG.TERM.CODE=''                  ; * JMK18
      ORIG.TERM.ADR1=''                  ; * JMK18
      ORIG.TERM.ADR2=''                  ; * JMK18
      ORIG.TERM.CITY=''                  ; * JMK18
      ORIG.TERM.ST=''                    ; * JMK18
      ORIG.TERM.ZIP=''                   ; * JMK18
      ORIG.TERM.PHONE=''                 ; * JMK18
      ORIG.TERM.TPHONE=''                ; * JMK18
      ORIG.TERM.FAX=''                   ; * JMK18
      ORIG.TERM.EMAIL=''                 ; * JMK18
      ORIG.TERM.CNAME=''                 ; * JMK18
      ORIG.TERM.CTITLE=''                ; * JMK18
      DEST.TERM.NAME=''                  ; * JMK18
      DEST.TERM.CODE=''                  ; * JMK18
      DEST.TERM.ADR1=''                  ; * JMK18
      DEST.TERM.ADR2=''                  ; * JMK18
      DEST.TERM.CITY=''                  ; * JMK18
      DEST.TERM.ST=''                    ; * JMK18
      DEST.TERM.ZIP=''                   ; * JMK18
      DEST.TERM.PHONE=''                 ; * JMK18
      DEST.TERM.TPHONE=''                ; * JMK18
      DEST.TERM.FAX=''                   ; * JMK18
      DEST.TERM.EMAIL=''                 ; * JMK18
      DEST.TERM.CNAME=''                 ; * JMK18
      DEST.TERM.CTITLE=''                ; * JMK18
      CARR.DATA.DATE = ''                ; * JMK29
      SOCKETHANDLE=''                    ; * JMK42
      TOT.BENCH.GROSS=''                 ; * JMK52
      TOT.CONTR.GROSS=''                 ; * JMK52
      REDRAW.SCR=0
      AUDIT='Y'
*DF      AMOUNT.TO.PAY=0
*DF      LOGISTICS.AMT=0
*DF      OVERCHARGE.AMT=0
500: * Calculate Bill
      BEGIN CASE
         CASE IOT='O'
            ROUTE.ZIP=ORIG.ZIP
            SHIP.ZIP=DEST.ZIP[1,3]
         CASE IOT='I'
            ROUTE.ZIP=DEST.ZIP
            SHIP.ZIP=ORIG.ZIP[1,3]
         CASE IOT='T'
            ROUTE.ZIP=DEST.ZIP[1,3]
            SHIP.ZIP=ORIG.ZIP[1,3]
      END CASE
*OH      BEGIN CASE
*OH         CASE CLIENT='00949'
*OH            MAX.WEIGHT=20000
*OH         CASE CLIENT='01081'
*OH            MAX.WEIGHT=19000
*OH         CASE CLIENT='01092'
*OH            MAX.WEIGHT=17000
*OH*DF         CASE CLIENT='01170'
*OH*DF            MAX.WEIGHT=20000
*OH         CASE CLIENT='10340'
*OH            MAX.WEIGHT=24000
*OH         CASE 1
*OH            MAX.WEIGHT=15000
*OH      END CASE
*DF      IF CLIENT='01081' THEN
*DF         MAX.WEIGHT=19000
*DF      END ELSE
*DF         MAX.WEIGHT=15000
*DF      END
*     IF TOT.WEIGHT GE MAX.LTL THEN      ; * JMK04 ; * JMK14
      IF TOT.WEIGHT GT MAX.LTL THEN      ; * JMK04 ; * JMK14
         ERROR="Cannot Rate! Total weight is ":MAX.LTL:" lbs or more"  ; * JMK04
*DF      IF TOT.WEIGHT GE 15000 THEN        ; * JMK04
*DF         ERROR="Cannot Rate! Total weight is 15000 lbs or more"        ; * JMK04
*     IF TOT.WEIGHT GE MAX.LTL THEN        ; * JMK04
*        ERROR="Cannot Rate! Total weight is ":MAX.LTL:" lbs or more"     ; * JMK04
         AUDIT='U'
         GO 9000
      END

*DFIF USER='DAVID' THEN CALL ELINE('PRESS BREAK JL.FLAG')
      JL.FLAG=0                          ; * JMK38
      SVC.CNT=0                          ; * JMK43
      IF CARRIER.SCAC#'' THEN            ; * JMK16
RWS.SVC.CALL: *                           ; * JMK43
         SVC.VIN=VIN                     ; * JMK16
         SVC.VIN<3>=CARRIER.SCAC         ; * JMK16
         SVC.VIN<4>=CARRIER.TYPE         ; * JMK16
         SVC.VIN<5>=ORIG.ZIP             ; * JMK16
         SVC.VIN<6>=DEST.ZIP             ; * JMK16
         SVC.DOUT=''                     ; * JMK16
*        CALL RWS.SVC(SVC.VIN,SVC.VOUT)  ; * JMK16 ; * JMK44
         CALL RWS.SVC(SVC.VIN,SVC.VOUT,F.TABLES)   ; * JMK16 ; * JMK44
* JMK42         CALL RWS.SVC(SVC.VIN,SVC.VOUT,SOCKETHANDLE)    ; * JMK16 ; * JMK42
         SVC.ERROR=SVC.VOUT<1>           ; * JMK16
         IF SVC.ERROR#'' THEN            ; * JMK43
            IF SVC.ERROR[1,3]='SCK' THEN           ; * JMK43
               SVC.CNT+=1                ; * JMK43
               IF SVC.CNT>3 THEN         ; * JMK43
                  ERROR=SVC.ERROR        ; * JMK43
                  AUDIT='U'              ; * JMK43
                  GO 9000                ; * JMK43
               END                       ; * JMK43
               GO RWS.SVC.CALL           ; * JMK43
            END                          ; * JMK43
         END                             ; * JMK43
         TRANSIT.TIME=SVC.VOUT<2>        ; * JMK16
         ORIG.DIR.FLG=SVC.VOUT<3>        ; * JMK16
         DEST.DIR.FLG=SVC.VOUT<4>        ; * JMK16
         COMB.DIR.FLG=SVC.VOUT<5>        ; * JMK16
*
* NPR04
*
         IF CARRIER.SCAC='CNWY' THEN     ; * JMK38 ; * NPR04
            ORIG.DIR.FLG='D'             ; * JMK38 ; * NPR04
            DEST.DIR.FLG='D'             ; * JMK38 ; * NPR04
            COMB.DIR.FLG='D'             ; * JMK38 ; * NPR04
         END

*NPR04         BEGIN CASE                      ; * JMK38
*NPR04            CASE CARRIER.SCAC='CNWY'     ; * JMK38
*NPR04               ORIG.DIR.FLG='D'          ; * JMK38
*NPR04               DEST.DIR.FLG='D'          ; * JMK38
*NPR04               COMB.DIR.FLG='D'          ; * JMK38
*NPR04            CASE CLIENT='01349' AND CARRIER.SCAC='RDWY' AND ORIG.ZIP='75630'  ; * JMK42
*NPR04               ORIG.DIR.FLG='D'          ; * JMK42
*NPR04               IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN           ; * JMK42
*NPR04                  COMB.DIR.FLG='D'       ; * JMK42
*NPR04               END                       ; * JMK42
*NPR04            CASE CLIENT='01349' AND CARRIER.SCAC='RDWY' AND DEST.ZIP='75630'  ; * JMK42
*NPR04               DEST.DIR.FLG='D'          ; * JMK42
*NPR04               IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN           ; * JMK42
*NPR04                  COMB.DIR.FLG='D'       ; * JMK42
*NPR04               END                       ; * JMK42
*NPR04         END CASE                        ; * JMK38
*NPR04
         ID.JL.TAB = "JL*":CLIENT:"*":CARRIER.SCAC           ; *NPR04
         READ JL.REC FROM F.TABLES, ID.JL.TAB ELSE JL.REC = ""         ; *NPR04
*
         LOCATE DEST.ZIP IN JL.REC SETTING DEST.POS THEN DEST.DIR.FLG = "D"      ; *NPR04
*
         LOCATE ORIG.ZIP IN JL.REC SETTING ORIG.POS THEN ORIG.DIR.FLG = "D"      ; *NPR04
*
         IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN       ; * JMK42    ; *NPR04
            COMB.DIR.FLG='D'             ; * JMK42    ; *NPR04
         END                             ; * JMK42    ; *NPR04
*
*NPR04
*        IF COMB.DIR.FLG#'D' THEN        ; * JMK38 ; * JMK55
*        IF COMB.DIR.FLG#'' AND COMB.DIR.FLG#'D' THEN        ; * JMK38 ; * JMK55 ; * JMK56
         IF COMB.DIR.FLG#'D' THEN        ; * JMK38 ; * JMK55 ; * JMK56
            JL.FLAG=1                    ; * JMK38
         END                             ; * JMK38
         ORIG.TERM.NAME=SVC.VOUT<6>      ; * JMK18
         ORIG.TERM.CODE=SVC.VOUT<7>      ; * JMK18
         ORIG.TERM.ADR1=SVC.VOUT<8>      ; * JMK18
         ORIG.TERM.ADR2=SVC.VOUT<9>      ; * JMK18
         ORIG.TERM.CITY=SVC.VOUT<10>     ; * JMK18
         ORIG.TERM.ST=SVC.VOUT<11>       ; * JMK18
         ORIG.TERM.ZIP=SVC.VOUT<12>      ; * JMK18
         ORIG.TERM.PHONE=SVC.VOUT<13>    ; * JMK18
         ORIG.TERM.TPHONE=SVC.VOUT<14>   ; * JMK18
         ORIG.TERM.FAX=SVC.VOUT<15>      ; * JMK18
         ORIG.TERM.EMAIL=SVC.VOUT<16>    ; * JMK18
         ORIG.TERM.CNAME=SVC.VOUT<17>    ; * JMK18
         ORIG.TERM.CTITLE=SVC.VOUT<18>   ; * JMK18
         DEST.TERM.NAME=SVC.VOUT<19>     ; * JMK18
         DEST.TERM.CODE=SVC.VOUT<20>     ; * JMK18
         DEST.TERM.ADR1=SVC.VOUT<21>     ; * JMK18
         DEST.TERM.ADR2=SVC.VOUT<22>     ; * JMK18
         DEST.TERM.CITY=SVC.VOUT<23>     ; * JMK18
         DEST.TERM.ST=SVC.VOUT<24>       ; * JMK18
         DEST.TERM.ZIP=SVC.VOUT<25>      ; * JMK18
         DEST.TERM.PHONE=SVC.VOUT<26>    ; * JMK18
         DEST.TERM.TPHONE=SVC.VOUT<27>   ; * JMK18
         DEST.TERM.FAX=SVC.VOUT<28>      ; * JMK18
         DEST.TERM.EMAIL=SVC.VOUT<29>    ; * JMK18
         DEST.TERM.CNAME=SVC.VOUT<30>    ; * JMK18
         DEST.TERM.CTITLE=SVC.VOUT<31>   ; * JMK18
         CARR.DATA.DATE=SVC.VOUT<32>     ; * JMK29
      END                                ; * JMK16
      IF CLIENT='01031' AND CARRIER='25117' THEN ; * JMK57
         TRANSIT.TIME='09'               ; * JMK57
         ORIG.DIR.FLG='D'                ; * JMK57
         DEST.DIR.FLG='D'                ; * JMK57
         COMB.DIR.FLG='D'                ; * JMK57
      END                                ; * JMK57

      IF CK.CS THEN                      ; * JMK35
         ORIG.DIR.FLG=''                 ; * JMK58
         DEST.DIR.FLG=''                 ; * JMK58
         COMB.DIR.FLG=''                 ; * JMK58
         JL.FLAG=0                       ; * JMK58
         TRANSIT.TIME=''                 ; * JMK59
         OPEN '','CARRIER.SVC' TO F.CS THEN        ; * JMK35
            CS.ID=CARRIER:'*':ORIG.ZIP   ; * JMK35
            READ CS.REC FROM F.CS,CS.ID ELSE       ; * JMK35
               CS.ID=CARRIER:'*':ORIG.ZIP[1,3]     ; * JMK35
               READ CS.REC FROM F.CS,CS.ID ELSE    ; * JMK35
                  CS.REC=''              ; * JMK35
               END                       ; * JMK35
            END                          ; * JMK35
            IF CS.REC#'' THEN            ; * JMK35
               DEST.FOUND=0              ; * JMK35
               LOCATE DEST.ZIP IN CS.REC<1> SETTING DPOS THEN          ; * JMK35
                  DEST.FOUND=1           ; * JMK35
               END ELSE                  ; * JMK35
                  LOCATE DEST.ZIP[1,3] IN CS.REC<1> SETTING DPOS THEN  ; * JMK35
                     DEST.FOUND=1        ; * JMK35
                  END                    ; * JMK35
               END                       ; * JMK35
               IF DEST.FOUND THEN        ; * JMK35
                  TRANSIT.TIME=CS.REC<3,DPOS>      ; * JMK35
                  ORIG.DIR.FLG='D'       ; * JMK35
                  DEST.DIR.FLG=CS.REC<2,DPOS>      ; * JMK35
                  COMB.DIR.FLG=''        ; * JMK35
                  IF DEST.DIR.FLG#'' THEN          ; * JMK35
                     IF ORIG.DIR.FLG='D' AND DEST.DIR.FLG='D' THEN     ; * JMK35
                        COMB.DIR.FLG='D'           ; * JMK35
                     END ELSE            ; * JMK35
                        COMB.DIR.FLG='I'           ; * JMK35
                     END                 ; * JMK35
                  END                    ; * JMK35
                  NVAL=DCOUNT(CS.REC<13>,@VM)      ; * JMK35
                  CARR.DATA.DATE=CS.REC<13,NVAL>'D4/'        ; * JMK35
*                 IF COMB.DIR.FLG='I' THEN         ; * JMK38 ; * JMK55
*                 IF COMB.DIR.FLG#'' AND COMB.DIR.FLG#'D' THEN         ; * JMK38 ; * JMK55 ; * JMK56
                  IF COMB.DIR.FLG#'D' THEN         ; * JMK38 ; * JMK55 ; * JMK56
                     JL.FLAG=1           ; * JMK38
                  END                    ; * JMK38
               END                       ; * JMK35
            END                          ; * JMK35
         END                             ; * JMK35
      END                                ; * JMK35
      IF CLIENT='01575' AND OLA.CARRIER='00198' AND COMB.DIR.FLG#'D' THEN        ; * JMK49
         BEGIN CASE                      ; * JMK49
            CASE ORIG.DIR.FLG='I' AND DEST.DIR.FLG='I'       ; * JMK49
               ERROR='OZip ':ORIG.ZIP:' and DZip ':DEST.ZIP:' are not in cvg Map for ':OLA.CARRIER   ; * JMK49
               AUDIT='U'                 ; * JMK49
               GO 9000                   ; * JMK49
            CASE ORIG.DIR.FLG='I'        ; * JMK49
               ERROR='OZip ':ORIG.ZIP:' not in cvg Map for ':OLA.CARRIER         ; * JMK49
               AUDIT='U'                 ; * JMK49
               GO 9000                   ; * JMK49
            CASE DEST.DIR.FLG='I'        ; * JMK49
               ERROR='DZip ':DEST.ZIP:' not in cvg Map for ':OLA.CARRIER         ; * JMK49
               AUDIT='U'                 ; * JMK49
               GO 9000                   ; * JMK49
            CASE 1                       ; * JMK49
               ERROR="Shipping point set to N"     ; * JMK49
               AUDIT='U'                 ; * JMK49
               GO 9000                   ; * JMK49
         END CASE                        ; * JMK49
      END                                ; * JMK49

      IF IOT='T' THEN
         OPEN 'FB.AUDIT.ZIPS,99000' TO F.TPZIPS ELSE
            ERROR="Cannot Open Audit Zips 99000 for 3rd party coverage map"
            AUDIT='U'
            GO 9000
         END
*        TABLE.ID=CARRIER:"*71101*12055*LTLALL*I" ; * JMK32
         TABLE.ID=OLA.CARRIER:"*71101*12055*LTLALL*I"        ; * JMK32
         READ DTABLES FROM F.TPZIPS,TABLE.ID ELSE
*       TABLE.ID='TP*':CARRIER
*       READ DTABLES FROM F.TABLES,TABLE.ID ELSE
*           ERROR="Carrier ":CARRIER:" TP Coverage Map not set up in 99000" ; * JMK32
            ERROR="Carrier ":OLA.CARRIER:" TP Coverage Map not set up in 99000"  ; * JMK32
            AUDIT='U'
            GO 9000
         END
         IF DTABLES<1>#'ENABLE' THEN
*           ERROR="Carrier ":CARRIER:" TP Coverage Map is set to DISABLE" ; * JMK32
            ERROR="Carrier ":OLA.CARRIER:" TP Coverage Map is set to DISABLE"    ; * JMK32
            AUDIT='U'
            GO 9000
         END
********************************************************************
         LOCATE ROUTE.ZIP IN DTABLES<2> BY 'AR' SETTING ROUTE.POS ELSE
            IF ROUTE.POS=1 THEN
               ERROR='DZip ':DEST.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
            ROUTE.POS=ROUTE.POS-1
            IF ROUTE.POS < 1 THEN
               ERROR='Serious error, ROUTE.POS is less than 1, Call Online Audit'
               AUDIT='U'
               GO 9000
            END
            IF ROUTE.ZIP > DTABLES<3,ROUTE.POS> THEN
               ERROR='DZip ':ROUTE.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
         END
         YN.ROUTE.POINT=DTABLES<4,ROUTE.POS>

         LOCATE SHIP.ZIP IN DTABLES<2> BY 'AR' SETTING SHIP.POS ELSE
            IF SHIP.POS=1 THEN
               ERROR='OZip ':ORIG.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
            SHIP.POS=SHIP.POS-1
            IF SHIP.POS < 1 THEN
               ERROR='Serious error, SHIP.POS is less than 1, Call AFS Programming'
               AUDIT='U'
               GO 9000
            END
            IF SHIP.ZIP > DTABLES<3,SHIP.POS> THEN
               ERROR='OZip ':SHIP.ZIP:' not in cvg Map for ':CARRIER
               AUDIT='U'
               GO 9000
            END
         END
         YN.SHIP.POINT=DTABLES<4,SHIP.POS>
         ERROR=''
         IF YN.ROUTE.POINT='N' THEN ERROR='Dest Zip set to N in Carrier Coverage Map '
         IF YN.SHIP.POINT='N' THEN ERROR='Orig Zip set to N in Carrier Coverage Map'
         IF ERROR#'' THEN
            AUDIT='U'
            GO 9000
         END
*AT THIS POINT YOU HAVE A VALID CARRIER
*GET THE TABLE NUMBER AND RUN THEN NUMBERS
*LOOK AT BOTH TABLES AND GET THE TABLE NUMBER THAT IS THE HIGHEST NUMBER
*IF A TABLE NUMBER IS ONE DIGIT ADD A LEADING ZERO TO INSURE THAT THE
*COMPARISON WORKS PROPERLY
********************************************************************
         LOOKUP.ZIP='OTHER'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            ERROR='Cannot Rate! OTHER is NOT setup as a Routing Zip!'
            AUDIT='U'
            GO 9000
         END
      END ELSE
         LOOKUP.ZIP='ALL'
         LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
            LOOKUP.ZIP=ROUTE.ZIP
            LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
*******************************************************************
*****    See if 1st three digits are there (Must Be Unique)
               CK.TIMES=DCOUNT(DAUDIT<FBA.ROUTE.ZIP>,@VM)
               CK.RZIP=''                ; * Put the Routing Zips Found Here
               FOR CK = 1 TO CK.TIMES
                  FIND.RT.ZIP=DAUDIT<FBA.ROUTE.ZIP,CK>
                  IF FIND.RT.ZIP[1,3]=ROUTE.ZIP[1,3] THEN
                     GUIDE.POS=CK
                     SUB.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,CK>
                     IF SUB.ZIP#'' THEN
                        LOCATE SUB.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                           ERROR="Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!"
                           AUDIT='U'
                           GO 9000
                        END
                        FIND.RT.ZIP=SUB.ZIP
                     END
                     LOCATE FIND.RT.ZIP IN CK.RZIP SETTING POS ELSE
                        CK.RZIP<-1>=FIND.RT.ZIP
                        LOOKUP.ZIP=FIND.RT.ZIP
                     END
                  END
               NEXT CK
               IF CK.RZIP='' OR CK.RZIP<2>#'' THEN
                  ERROR='Cannot Rate! ':ROUTE.ZIP:' or ALL is NOT setup as a Routing Zip!'
                  AUDIT='U'
                  GO 9000
               END
*******************************************************************
            END
            IF DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS> # '' THEN          ; ** Get BASE Routing Zip POS
               LOOKUP.ZIP=DAUDIT<FBA.BASE.ROUTE.ZIP,GUIDE.POS>
               LOCATE LOOKUP.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING GUIDE.POS ELSE
                  ERROR=("Error Ship Zip ":SHIP.ZIP:" points to Base zip ":LOOKUP.ZIP:" Which is missing!")
                  AUDIT='U'
                  GO 9000
               END
            END
         END
      END
***************************************************************
* Check to See if Routing Zip is Enabled or Disabled
***************************************************************
      IF DAUDIT<FBA.ROUTE.ZIP.STATUS,GUIDE.POS>='DISABLE' THEN
         ERROR=("Cannot Rate! Route Zip is set to DISABLE")
         AUDIT='U'
         GO 9000
      END
* Get Effective Date
      FIRST.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,1>
      LAST.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DCOUNT(DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS>,@SVM)>
      IF BILL.DATE < FIRST.DATE THEN     ; * Is bill Before Beginning Date
         ERROR=('Cannot Rate! Bill date is before 1st effective date.')
         AUDIT='U'
         GO 9000
      END
      IF LAST.DATE#'' AND (BILL.DATE > LAST.DATE) THEN
         ERROR=('Cannot Rate Bill!  Bill Date is after Last Effective Date.')
         AUDIT='U'
         GO 9000
      END
      LOCATE BILL.DATE IN DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS> BY 'AR' SETTING DT.POS ELSE
         DT.POS=DT.POS-1
         IF DT.POS < 1 THEN
            ERROR=('Serious error Contract Carrier Date POS is less than 1, Call AFS Programming')
            AUDIT='U'
            GO 9000
         END
      END
      EFF.DATE=DAUDIT<FBA.BEG.EFF.DATE,GUIDE.POS,DT.POS>
      END.DATE=DAUDIT<FBA.END.EFF.DATE,GUIDE.POS,DT.POS>
      IF END.DATE#'' AND (BILL.DATE > END.DATE) THEN
         ERROR=('Cannot Rate Bill!  Bill Date is out of range of Effective dates')
         AUDIT='U'
         GO 9000
      END
* At this point you have a good DT.POS (Effective Date Position)
***************************************************************
* Check to See if Effective Date is Enabled or Disabled
***************************************************************
      IF DAUDIT<FBA.EFF.DATE.STATUS,GUIDE.POS,DT.POS> = 'DISABLE' THEN
         ERROR=("Cannot Rate! Effective Date is set to DISABLE")
         AUDIT='U'
         GO 9000
      END

*     AUDIT.ZIPS.ID=CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":IOT ; * JMK32
      AUDIT.ZIPS.ID=OLA.CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":IOT       ; * JMK32
*     READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
*       ERROR=("Cannot Rate! Zip Table Not On File ":AUDIT.ZIPS.ID)
*       AUDIT='U'
*       GO 9000
*     END
      IF OWEN AND CARRIER = "02653" THEN CALL ELINE('Press Break for Con-Way Table Routine')

      READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
         IF 1 AND IOT = 'T' THEN
*           AUDIT.ZIPS.ID=CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":"I" ; * JMK32
            AUDIT.ZIPS.ID=OLA.CARRIER:"*":LOOKUP.ZIP:"*":EFF.DATE:"*LTLALL*":"I"           ; * JMK32
            READ DAUDIT.ZIPS FROM F.AUDIT.ZIPS,AUDIT.ZIPS.ID ELSE
               ERROR=("Cannot Rate! Zip Table Not On File ":AUDIT.ZIPS.ID)
               AUDIT='U'
               GO 9000
            END
         END ELSE
            ERROR=("Cannot Rate! Zip Table Not On File ":AUDIT.ZIPS.ID)
            AUDIT='U'
            GO 9000
         END
      END
* At this point you have a Valid DAUDIT.ZIPS record
      IF DAUDIT.ZIPS<2,1>='' THEN
         ERROR=('Cannot Rate! Shipping Points have not been setup!')
         AUDIT='U'
         GO 9000
      END
      IF SHIP.ZIP < DAUDIT.ZIPS<2,1> THEN
         ERROR=('Cannot Rate!  This bill is a misroute! (Shipping Point is < Lowest)')
         AUDIT='M'
         GO 9000
      END
      LOCATE SHIP.ZIP IN DAUDIT.ZIPS<2> BY 'AR' SETTING SHIP.POS ELSE
         SHIP.POS=SHIP.POS-1
         IF SHIP.POS < 1 THEN
            ERROR=('Serious error, SHIP.POS is less than 1, Call AFS Programming')
            GO 500
         END
         IF CLIENT='01575' AND OLA.CARRIER='00198' AND COMB.DIR.FLG='D' THEN     ; * JMK49
            IF DAUDIT.ZIPS<3,SHIP.POS> < SHIP.ZIP THEN       ; * JMK49
               DAUDIT.ZIPS<3,SHIP.POS>=SHIP.ZIP    ; * JMK49
            END                          ; * JMK49
         END                             ; * JMK49
         IF SHIP.ZIP > DAUDIT.ZIPS<3,SHIP.POS> THEN
            ERROR=('Cannot Rate!  This bill is a misroute! (Shipping Point is > Highest)')
            AUDIT='M'
            GO 9000
         END
      END
*
* NPR03
*
      LOCATE ROUTE.ZIP IN DAUDIT<FBA.ROUTE.ZIP> SETTING RSZ.POS THEN
*
* CRT @(0,20):" DAUDIT<FBA.ROUTE.ZIP> ":DAUDIT<FBA.ROUTE.ZIP>
* CRT @(0,22):"  ROUTE.ZIP - ":ROUTE.ZIP:" RSZ.POS - ":RSZ.POS ; DEBUG
         SZ.BEG.EFF.DATES = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS>
         SZ.END.EFF.DATES = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS>
*
         IF SZ.BEG.EFF.DATES = "" AND SZ.END.EFF.DATES = "" THEN
            NULL
         END ELSE
******************   Do this piece of code if any effective sub zip dates are set up.
            N.SZ.DATES = DCOUNT(SZ.BEG.EFF.DATES,@SVM)
            SUBZIP.OK = "N"
*
            LAST.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,N.SZ.DATES>
            LAST.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,N.SZ.DATES>
*
            IF LAST.END.EFF.DATE = "" AND BILL.DATE GE LAST.BEG.EFF.DATE THEN    ; * No final end eff date
               SUBZIP.OK = "Y"           ; * Open end date ok
            END ELSE
               IF BILL.DATE GE DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,1> THEN        ; * Date after first Eff date ok otherwise not
                  FOR DD = 1 TO N.SZ.DATES
                     SZ.BEG.EFF.DATE = DAUDIT<FBA.SZ.BEG.EFF.DATE,RSZ.POS,DD>
                     SZ.END.EFF.DATE = DAUDIT<FBA.SZ.END.EFF.DATE,RSZ.POS,DD>
**********************  Check if Bill Date is within any date ranges.
                     IF BILL.DATE GE SZ.BEG.EFF.DATE AND BILL.DATE LE SZ.END.EFF.DATE THEN
                        SUBZIP.OK = "Y"
                     END
                  NEXT DD
               END
            END
*
            IF SUBZIP.OK = "N" THEN
               ERROR = ('Cannot Rate! Substitution Zip ':ROUTE.ZIP:' not in effect as at ':OCONV(BILL.DATE,"D2/"))
               AUDIT='M'
               GO 9000
            END
         END
      END
*
* NPR03
*
      GOOD.SHIP.POINT=DAUDIT.ZIPS<4,SHIP.POS>
      TABLE=DAUDIT.ZIPS<5,SHIP.POS>
      IF CLIENT='01575' AND OLA.CARRIER='00198' THEN GOOD.SHIP.POINT='C'         ; * JMK49
      IF GOOD.SHIP.POINT='C' THEN        ; * JMK49
         BEGIN CASE                      ; * JMK49
            CASE COMB.DIR.FLG='D'        ; * JMK49
               GOOD.SHIP.POINT='Y'       ; * JMK49
            CASE 1                       ; * JMK49
               GOOD.SHIP.POINT='N'       ; * JMK49
         END CASE                        ; * JMK49
      END                                ; * JMK49
      IF JL.FLAG THEN                    ; * JMK38
*        LOCATE 'AAA' IN DAUDIT.ZIPS<2> BY 'AR' SETTING JL.POS THEN    ; * JMK38 ; * JMK39
*        LOCATE 'AAA' IN DAUDIT.ZIPS<2> SETTING JL.POS THEN  ; * JMK38 ; * JMK39 ; * JMK54
         LOCATE 'ZZZ' IN DAUDIT.ZIPS<2> SETTING JL.POS THEN  ; * JMK38 ; * JMK39 ; * JMK54
            IF DAUDIT.ZIPS<4,JL.POS>='Y' THEN      ; * JMK38
               JL.TABLE=DAUDIT.ZIPS<5,JL.POS>      ; * JMK38
            END ELSE                     ; * JMK38
               IF IOT='I' THEN           ; * JMK41
                  ERROR=('Cannot Rate!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')      ; * JMK41
                  AUDIT='M'              ; * JMK41
                  GO 9000                ; * JMK41
               END                       ; * JMK41
               JL.FLAG=0                 ; * JMK38
            END                          ; * JMK38
         END ELSE                        ; * JMK38
            IF IOT='I' THEN              ; * JMK41
               ERROR=('Cannot Rate!  This bill is a misroute! (No Inbound Joint Line Pricing for this Carrier)')         ; * JMK41
               AUDIT='M'                 ; * JMK41
               GO 9000                   ; * JMK41
            END                          ; * JMK41
            JL.FLAG=0                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38
* For third party that is the ORIG Table. we must find the Dest table
********************************************************************
      IF IOT='T' THEN
         IF ROUTE.ZIP < DAUDIT.ZIPS<2,1> THEN
            ERROR=('Cannot Rate! (Shipping Point is < Lowest)')
            AUDIT='U'
            GO 9000
         END
         LOCATE ROUTE.ZIP IN DAUDIT.ZIPS<2> BY 'AR' SETTING ROUTE.POS ELSE
            ROUTE.POS=ROUTE.POS-1
            IF ROUTE.POS < 1 THEN
               ERROR=('Serious error, ROUTE.POS is less than 1, Call Online Audit')
               AUDIT='U'
               GO 9000
            END
            IF ROUTE.ZIP > DAUDIT.ZIPS<3,ROUTE.POS> THEN
               ERROR=('Cannot Rate! (Shipping Point is > Highest)')
               AUDIT='M'
               GO 9000
            END
         END
         DEST.GOOD.SHIP.POINT=DAUDIT.ZIPS<4,ROUTE.POS>
         DEST.TABLE=DAUDIT.ZIPS<5,ROUTE.POS>
         GOOD.SHIP.POINT='Y'             ; * Force a Good Shipping Point
*
* Make sure both tables are two digits
* Compare the two use the HIGEST table number as the real TABLE
* Except for Con-Way 02653, Check Orig & Dest Table if they are different
* Use both tables together lowest table letter 1st ie. D & A use AD
         IF OWEN AND CARRIER = "02653" THEN CALL ELINE('Press Break for Con-Way Routine')
         BEGIN CASE
*           CASE CARRIER = '02653' AND (CLIENT='00879' OR CLIENT='00761' OR CLIENT='00963' OR CLIENT='10310' OR CLIENT='00909' OR CLIENT='00902')      ; * Dont swap table letters ; * JMK30
*              IF TABLE#DEST.TABLE THEN  ; * JMK30
*                 TABLE=TABLE:DEST.TABLE ; * JMK30
*              END                       ; * JMK30
*           CASE CARRIER = '02653'       ; * JMK30
*              IF TABLE#DEST.TABLE THEN  ; * JMK30
*                 IF TABLE<DEST.TABLE THEN       ; * JMK30
*                    TABLE=TABLE:DEST.TABLE      ; * JMK30
*                 END ELSE               ; * JMK30
*                    TABLE=DEST.TABLE:TABLE      ; * JMK30
*                 END                    ; * JMK30
*              END                       ; * JMK30
            CASE 1
*NPR02               TABLE.TEST=TABLE
*NPR02               IF LEN(TABLE.TEST)=1 THEN TABLE.TEST="0":TABLE.TEST
*NPR02               DEST.TABLE.TEST=DEST.TABLE
*NPR02               IF LEN(DEST.TABLE)=1 THEN DEST.TABLE.TEST="0":DEST.TABLE.TEST
*NPR02               IF DEST.TABLE.TEST > TABLE.TEST THEN TABLE=DEST.TABLE
         END CASE
*
*NPR02
*
         TP.WHY.TAB = ""
         TP.AMT.TAB = ""
         TP.TABLE.TAB = TABLE
         TP.TABLE.TAB<2> = DEST.TABLE
         TP.VOUT1 = ""
         TP.VOUT2 = ""
         TP.CNT = 1
*
*NPR02
*
      END
********************************************************************
*IF OWEN THEN ERROR=('NOW CHECKING MISROUTES')
* At this point you have a valid GOOD.SHIP.POINT (Y/N) and TABLE
      IF GOOD.SHIP.POINT#'Y' THEN
         IF TABLE#'' THEN
* Bill is a misroute but can be audited (have a table #)
*OK       ERROR=('Misroute! Can Audit if [OK] is entered at next prompt')
*OK      AUDIT='U'
*OK      GOSUB 8000
*OK      IF QI='OK' THEN GO 575
            AUDIT='MA'
            GO 575
         END ELSE
* Bill is a misroute but CANNOT be audited (No Table #)
            ERROR=('Cannot Rate! This bill is a misroute (Shp.Pnt=N No Table to Rate Bill)')
            AUDIT='M'
            GO 9000
         END
      END
575: ***   Skip for OK Misroutes
*
*NPR02
      IF IOT = "T" THEN
         TABLE = TP.TABLE.TAB<TP.CNT>    ; * Contains Originating and Destination Tables
      END
*NPR02
      ZIP.VIN=CARRIER
      ZIP.VIN<2>=ORIG.ZIP
      ZIP.VIN<3>=DEST.ZIP
      ZIP.VIN<4>=CLIENT
      CALL FB.CHECK.COVERAGE.ZIP(ZIP.VIN,ZIP.VOUT)
      IF ZIP.VOUT<1>='J' THEN
         IF LEN(TABLE) <2 THEN
            TABLE='J':TABLE'R%2'
         END ELSE
            TABLE='J':TABLE
         END
      END
*     AUDIT.TABLE.ID=CARRIER:"*":TABLE ; * JMK32
      AUDIT.TABLE.ID=OLA.CARRIER:"*":TABLE         ; * JMK32
      READ DAUDIT.TABLES FROM F.AUDIT.TABLES,AUDIT.TABLE.ID ELSE
         IF IOT='T' THEN
            ERROR='Cannot Rate Shipment. Table: ':AUDIT.TABLE.ID:' NOF'
         END ELSE
            ERROR=("Cannot Rate! Audit Table Not On File ":AUDIT.TABLE.ID)
         END
         AUDIT='U'
         GO 9000
      END
      IF JL.FLAG THEN                    ; * JMK38
         JL.AUDIT.TABLE.ID=OLA.CARRIER:'*':JL.TABLE          ; * JMK38
         READ JL.DAUDIT.TABLES FROM F.AUDIT.TABLES,JL.AUDIT.TABLE.ID ELSE        ; * JMK38
            JL.FLAG=0                    ; * JMK38
         END                             ; * JMK38
      END                                ; * JMK38
*ZZ     IF IOT = "T" THEN
*ZZ        IF TP.CNT EQ "2" THEN GO 1000 ; DEBUG
*ZZ     END
*******************************************************
      MISC.CHG.TIMES=DCOUNT(MISC.CHG<1>,@VM)
      FOR MISC.CHG.X=1 TO MISC.CHG.TIMES
         Q=MISC.CHG<1,MISC.CHG.X>
         IF JL.FLAG THEN                 ; * JMK48
            LOCATE Q IN JL.DAUDIT.TABLES<26> SETTING JL.POS ELSE       ; * JMK48
               IF MISROUTE THEN GO GET.NEXT.MISC.CHG         ; * Skip it... ; * JMK48
               ERROR=("Accessorial Code '":Q:"' is not valid! (Code is not in Table:  ":AUDIT.TABLE.ID:")")    ; * JMK48
               AUDIT='U'                 ; * JMK48
               GO 9000                   ; * JMK48
            END                          ; * JMK48
         END ELSE                        ; * JMK48
            LOCATE Q IN DAUDIT.TABLES<26> SETTING POS ELSE
               IF MISROUTE THEN GO GET.NEXT.MISC.CHG         ; * Skip it...
               ERROR=("Accessorial Code '":Q:"' is not valid! (Code is not in Table:  ":AUDIT.TABLE.ID:")")
               AUDIT='U'
               GO 9000
            END
         END                             ; * JMK48
         TEST.CHG=MISC.CHG               ; * JMK03
         TEST.CNT=0                      ; * JMK03
         FOUND=0                         ; * JMK03
         LOOP                            ; * JMK03
            LOCATE Q IN TEST.CHG<1> SETTING MPOS THEN        ; * JMK03
               DEL TEST.CHG<1,MPOS>      ; * JMK03
               FOUND=1                   ; * JMK03
            END ELSE                     ; * JMK03
               FOUND=0                   ; * JMK03
            END                          ; * JMK03
         WHILE FOUND DO                  ; * JMK03
            TEST.CNT=TEST.CNT+1          ; * JMK03
         REPEAT                          ; * JMK03
         IF TEST.CNT > 1 THEN            ; * JMK03
            ERROR=("Accessorial Code '":Q:"' is used more than once!")           ; * JMK03
            AUDIT='U'                    ; * JMK03
            GO 9000                      ; * JMK03
         END                             ; * JMK03
         PERCENT=0                       ; * Flag
         IF JL.FLAG THEN                 ; * JMK48
            CUR.CONTR.MISC.AMT=JL.DAUDIT.TABLES<27,JL.POS>   ; * JMK48
            CUR.BENCH.MISC.AMT=JL.DAUDIT.TABLES<28,JL.POS>   ; * JMK48
         END ELSE                        ; * JMK48
            CUR.CONTR.MISC.AMT=DAUDIT.TABLES<27,POS>
            CUR.BENCH.MISC.AMT=DAUDIT.TABLES<28,POS>
         END                             ; * JMK48
         LEN.CHG=LEN(CUR.CONTR.MISC.AMT)
         IF CUR.CONTR.MISC.AMT[LEN.CHG,1]="%" THEN PERCENT=1
         LEN.CHG=LEN(CUR.BENCH.MISC.AMT)
         IF CUR.BENCH.MISC.AMT[LEN.CHG,1]="%" THEN PERCENT=1
         IF Q='FSC' AND PERCENT=1 THEN
            CONTR.DFSC=''
            BENCH.DFSC=''
         END
         DIFF.CONTR.BENCH=0
*        IF LOGISTICS AND NOT(PERCENT) AND CUR.BENCH.MISC.AMT<CUR.CONTR.MISC.AMT THEN      ; * JMK34
         IF LOGISTICS AND CUR.BENCH.MISC.AMT<CUR.CONTR.MISC.AMT THEN   ; * JMK34
            ERROR=("Unable to Use this code":Q:" Benchmark is Less that Contract")
            AUDIT='U'
            GO 9000
         END
         IF CUR.CONTR.MISC.AMT='ASK' THEN
            IF MISC.CHG<2,MISC.CHG.X>+0 >0 THEN
               CUR.CONTR.MISC.AMT=MISC.CHG<2,MISC.CHG.X>
            END ELSE
               ERROR='Contract Amt for Code: ':Q:' is not a fixed amount... Cannot Rate!'
               AUDIT='U'
               GO 9000
            END
         END
*        IF CUR.CONTR.MISC.AMT#'ASK' AND NOT(PERCENT) THEN   ; * JMK34
         IF CUR.CONTR.MISC.AMT#'ASK' THEN          ; * JMK34
*OH      IF CUR.CONTR.MISC.AMT  < MISC.CHG<2,MISC.CHG.X> THEN
            MISC.CHG<2,MISC.CHG.X>=CUR.CONTR.MISC.AMT
*OH      END
         END
         IF CUR.BENCH.MISC.AMT='ASK' THEN
            IF MISC.CHG<3,MISC.CHG.X>+0>0 THEN
               CUR.BENCH.MISC.AMT=MISC.CHG<3,MISC.CHG.X>
            END ELSE
               ERROR='Benchmark Amt for Code: ':Q:' is not a fixed amount.... Cannot Rate!'
               AUDIT='U'
               GO 9000
            END
         END
*        IF CUR.BENCH.MISC.AMT#'ASK' AND CUR.CONTR.MISC.AMT # 'ASK' AND NOT(PERCENT) THEN  ; * JMK34
         IF CUR.BENCH.MISC.AMT#'ASK' AND CUR.CONTR.MISC.AMT # 'ASK' THEN         ; * JMK34
*OH       DIFF.CONTR.BENCH=CUR.BENCH.MISC.AMT-CUR.CONTR.MISC.AMT
*OH       MISC.CHG<3,MISC.CHG.X>=MISC.CHG<2,MISC.CHG.X>+DIFF.CONTR.BENCH
            MISC.CHG<3,MISC.CHG.X>=CUR.BENCH.MISC.AMT
         END
*OH    IF MISC.CHG<2,MISC.CHG.X> > MISC.CHG<3,MISC.CHG.X> THEN
*OH       MISC.CHG<3,MISC.CHG.X>=MISC.CHG<2,MISC.CHG.X>
*OH    END
*DF       MISC.CHG<2,MISC.CHG.X>=CUR.CONTR.MISC.AMT
*DF       MISC.CHG<3,MISC.CHG.X>=CUR.BENCH.MISC.AMT
GET.NEXT.MISC.CHG: *** Used to "Skip" Charges
      NEXT MISC.CHG.X
*******************************************************
1000: ***   Submit Information to PC Audit Routine to Determine Amounts
      CLASSES=CLASS.WGT<1>
      WEIGHTS=CLASS.WGT<2>
      CONTR.TARIFF=''
      CONTR.CLASSES=''                   ; * Sub Valued for placment into DIN
      CONTR.DISC=''                      ; * <1>-TMIN <2>-L5C <3>-O5C  All Mv per line item
      LOWEST.CONTR.CLASS=''
      LOWEST.CONTR.CLASS.DISC=''         ; ** <1>-TMIN <2>-L5C <3>-O5C from Lowest class
      BENCH.TARIFF=''
      BENCH.CLASSES=''                   ; * Sub Valued for placment into DIN
      BENCH.DISC=''                      ; * Mv for each line item (contains repeats)
      LOWEST.BENCH.CLASS=''
      LOWEST.BENCH.CLASS.DISC=''         ; * Taken from Discount on Lowest Class
      DIN=''
      DIN<1,2>=ORIG.ZIP
      DIN<1,3>=DEST.ZIP
      DETAIL.TIMES=DCOUNT(CLASSES<1>,@VM)
      IF DAUDIT.TABLES<34>='' AND DAUDIT.TABLES<35>='' THEN
         DAUDIT.TABLES<34>=50
         DAUDIT.TABLES<35>=50
      END
      IF DAUDIT.TABLES<34>#'50' THEN
         DAUDIT.TABLES<34>=50
         DAUDIT.TABLES<35>=50
      END
      FOR DET.CNT = 1 TO DETAIL.TIMES
         IF CLASSES<1,DET.CNT> < DAUDIT.TABLES<34> OR CLASSES<1,DET.CNT> > DAUDIT.TABLES<35> THEN FAK=0
         CUR.CLASS=CLASSES<1,DET.CNT>
         CUR.WEIGHT=WEIGHTS<1,DET.CNT>
         LOCATE CUR.CLASS IN DAUDIT.TABLES<1> SETTING CLASS.POS THEN
            CUR.CONTR.CLASS=DAUDIT.TABLES<2,CLASS.POS>       ; * Contract Class
            IF JL.FLAG THEN              ; * JMK48
               LOCATE CUR.CLASS IN JL.DAUDIT.TABLES<1> SETTING JL.CLASS.POS THEN           ; * JMK48
                  CUR.CONTR.CLASS=JL.DAUDIT.TABLES<2,JL.CLASS.POS>     ; * Contract Class ; * JMK48
               END                       ; * JMK48
            END                          ; * JMK48
            CONTR.CLASSES<1,1,DET.CNT>=CUR.CONTR.CLASS
            CUR.BENCH.CLASS=DAUDIT.TABLES<12,CLASS.POS>      ; * Benchmark Class
            BENCH.CLASSES<1,1,DET.CNT>=CUR.BENCH.CLASS
            CUR.CONTR.TARIFF=DAUDIT.TABLES<6,CLASS.POS>      ; * Contract Tariff
            IF JL.FLAG THEN              ; * JMK48
               CUR.CONTR.TARIFF=JL.DAUDIT.TABLES<6,JL.CLASS.POS>       ; * Contract Tariff ; * JMK48
            END                          ; * JMK48
            CUR.BENCH.TARIFF=DAUDIT.TABLES<16,CLASS.POS>     ; * Benchmark Tariff
***************************************************************
* Determine Contract Discount(s) (And Lowest Class Discount)
***************************************************************
            IF USER='NO-MKERBOW' THEN GO SKIP.DISC

*************************************

*DFIF USER='DAVID' THEN
*DF  CRT 'OWEN PRESS BREAK, NOW EXTRACTING CONTRACT DISCOUNTS':
*DF  INPUT NUL
*DFEND


*************************************
            FOR X = 1 TO 3
               CONTR.DISC<X,DET.CNT>=DAUDIT.TABLES<X+2,CLASS.POS>
            NEXT X
            IF JL.FLAG THEN              ; * JMK48
               FOR X = 1 TO 3            ; * JMK48
                  CONTR.DISC<X,DET.CNT>=JL.DAUDIT.TABLES<X+2,JL.CLASS.POS>       ; * JMK48
               NEXT X                    ; * JMK48
            END                          ; * JMK48
SKIP.DISC: *
            IF LOWEST.CONTR.CLASS='' THEN
               LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
               FOR X = 1 TO 3
                  LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
               NEXT X
            END ELSE
               IF CUR.CONTR.CLASS<LOWEST.CONTR.CLASS THEN
                  LOWEST.CONTR.CLASS=CUR.CONTR.CLASS
                  FOR X = 1 TO 3
                     LOWEST.CONTR.CLASS.DISC<X>=CONTR.DISC<X,DET.CNT>
                  NEXT X
               END
            END
***************************************************************
* Determine Benchmark Discount (And Lowest Class Discount)
***************************************************************
*           BENCH.DISC<1,DET.CNT>=DAUDIT.TABLES<15,CLASS.POS>          ; * JMK51
*           IF LOWEST.BENCH.CLASS='' THEN          ; * JMK51
*              LOWEST.BENCH.CLASS=CUR.BENCH.CLASS  ; * JMK51
*              LOWEST.BENCH.CLASS.DISC=BENCH.DISC<1,DET.CNT> ; * JMK51
*           END ELSE                     ; * JMK51
*              IF CUR.BENCH.CLASS<LOWEST.BENCH.CLASS THEN    ; * JMK51
*                 LOWEST.BENCH.CLASS=CUR.BENCH.CLASS         ; * JMK51
*                 LOWEST.BENCH.CLASS.DISC=BENCH.DISC<1,DET.CNT>        ; * JMK51
*              END                       ; * JMK51
*           END                          ; * JMK51

            FOR X = 1 TO 3               ; * JMK51
               BENCH.DISC<X,DET.CNT>=DAUDIT.TABLES<X+12,CLASS.POS>     ; * JMK51
            NEXT X                       ; * JMK51
            IF LOWEST.BENCH.CLASS='' THEN          ; * JMK51
               LOWEST.BENCH.CLASS=CUR.BENCH.CLASS  ; * JMK51
               FOR X = 1 TO 3            ; * JMK51
                  LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>     ; * JMK51
               NEXT X                    ; * JMK51
            END ELSE                     ; * JMK51
               IF CUR.BENCH.CLASS<LOWEST.BENCH.CLASS THEN    ; * JMK51
                  LOWEST.BENCH.CLASS=CUR.BENCH.CLASS         ; * JMK51
                  FOR X = 1 TO 3         ; * JMK51
                     LOWEST.BENCH.CLASS.DISC<X>=BENCH.DISC<X,DET.CNT>  ; * JMK51
                  NEXT X                 ; * JMK51
               END                       ; * JMK51
            END                          ; * JMK51

            IF DET.CNT=1 THEN
               CONTR.TARIFF=CUR.CONTR.TARIFF
               BENCH.TARIFF=CUR.BENCH.TARIFF
            END ELSE
               IF CUR.CONTR.TARIFF#CONTR.TARIFF THEN
*            Error Found a Contract Tariff that is different than the
*               first Class's Contract Tariff.... cannot handle.
                  ERROR=("101 Cls-":CUR.CLASS:" Tar-":CUR.CONTR.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  AUDIT='U'
                  GO 9000
               END
               IF LOGISTICS AND CUR.BENCH.TARIFF#BENCH.TARIFF THEN
*            Error Found a Benchmark Tariff that is different than the
*               first Class's Benchmark Tariff.... cannot handle.
                  ERROR=("102 Cls-":CUR.CLASS:" Tar-":BENCH.TARIFF:"  1st Tar-":CONTR.TARIFF)
                  AUDIT='U'
                  GO 9000
               END
            END
         END ELSE
            ERROR=("Serious Error! Class '":CUR.CLASS:"' Cannot be found in AUDIT.TABLE '":TABLE:"'")
            AUDIT='U'
            GO 9000
         END
         DIN<1,5,DET.CNT>=CUR.WEIGHT
      NEXT DET.CNT
      LOCATE CONTR.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
         CONTR.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>      ; * Send to PC Name
         IF CONTR.TARIFF.ACT.NAME='AFS500' AND CDN.ROUTE=1 THEN        ; * JMK01
            CONTR.TARIFF.ACT.NAME='AFS525'         ; * JMK01
         END                             ; * JMK01
         CONTR.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
         CONTR.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
      END ELSE
         ERROR=("103 contr.tariff ":CONTR.TARIFF:" missing from tariff eff date xref")
         AUDIT='U'
         GO 9000
      END
      LOCATE CONTR.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
         CONTR.TARIFF.DRIVER=DTARIFFS<3,POS>
*      IF OWEN AND CONTR.TARIFF.DRIVER='MWB' THEN
*         CONTR.TARIFF.DRIVER='AFS500'
*      END
*DF       IF USER='DAVID' AND CONTR.TARIFF.DRIVER='MWB' THEN
*DF          CONTR.TARIFF.DRIVER='AFS500'
*DF       END
      END ELSE
         ERROR=("106 Unable to locate Contract ":CONTR.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
         AUDIT='U'
         GO 9000
      END
      IF LOGISTICS THEN
         LOCATE BENCH.TARIFF IN DTARIFF.DATE.XREF<1> SETTING POS THEN
            BENCH.TARIFF.ACT.NAME=DTARIFF.DATE.XREF<2,POS>   ; * Send to PC Name
            IF BENCH.TARIFF.ACT.NAME='AFS500' AND CDN.ROUTE=1 THEN     ; * JMK01
               BENCH.TARIFF.ACT.NAME='AFS525'      ; * JMK01
            END                          ; * JMK01
            BENCH.TARIFF.EFF.DATE=DTARIFF.DATE.XREF<3,POS>
            BENCH.TARIFF.FACTOR=DTARIFF.DATE.XREF<5,POS>
         END ELSE
            ERROR=("103 bench.tariff ":BENCH.TARIFF:" missing from tariff eff date xref")
            AUDIT='U'
            GO 9000
         END
         LOCATE BENCH.TARIFF.ACT.NAME IN DTARIFFS<1> SETTING POS THEN
            BENCH.TARIFF.DRIVER=DTARIFFS<3,POS>
*      IF OWEN AND BENCH.TARIFF.DRIVER='MWB' THEN
*         BENCH.TARIFF.DRIVER='AFS500'
*      END
*DF       IF USER='DAVID' AND BENCH.TARIFF.DRIVER='MWB' THEN
*DF          BENCH.TARIFF.DRIVER='AFS500'
*DF       END
         END ELSE
            ERROR=("107 Unable to locate Benchmark ":BENCH.TARIFF.ACT.NAME:" in FB.TABLES TARIFFS<1>")
            AUDIT='U'
            GO 9000
         END
      END
************************************************************************
*  Get Contract Rates from CZAR or AFS95
************************************************************************
      DIN<1,4>=CONTR.CLASSES
      DIN<1,7>=CONTR.TARIFF.ACT.NAME
      DIN<1,8>=CONTR.TARIFF.EFF.DATE
      DIN<1,9>=CONTR.TARIFF.FACTOR
      VIN='BOTH'
      VIN<2>='10000'                     ; * Max Discount Weight
      VIN<3>=CLIENT                      ; * JMK33
      VIN<4>=CARRIER                     ; * JMK47
      VIN<5>='C'                         ; * JMK47
*     IF USER='MKERBOW' THEN DEBUG
      IF CONTR.TARIFF.DRIVER = BENCH.TARIFF.DRIVER THEN
* Same "Driver" used on both Contract & Benchmark Tariffs
* Send 1 time with "Both" Bills
         IF LOGISTICS THEN
            DIN<2>=DIN<1>                ; * Set 2nd Bill equal to 1st Bill
            DIN<2,4>=BENCH.CLASSES       ; * Set 2nd Bills Classes to Benchmark's
            DIN<2,7>=BENCH.TARIFF.ACT.NAME         ; * Set 2nd Bill to Correct Tariff
            DIN<2,8>=BENCH.TARIFF.EFF.DATE         ; * Set 2nd Bill's Tariff Eff Date
            DIN<2,9>=BENCH.TARIFF.FACTOR
         END
*DFIF USER='DAVID' THEN CALL ELINE('PRESS BREAK')

******************************************************************
*      IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01
*      IF CONTR.TARIFF.DRIVER='MWB' AND CDN.ROUTE=0 THEN   ; * JMK01 ; * JMK31
         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
*        CALL ELINE('Using PICK version .... AFS500')
            IF USER = 'OWENXXX' THEN
               CALL AFS500.MORE.LINES(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT)
            END ELSE
               DINNATT=DCOUNT(DIN,@AM)   ; * JMK22 ; * JMK25 ; * JMK26
               FOR DINATT=1 TO DINNATT   ; * JMK22 ; * JMK25 ; * JMK26
*                 DIN<DINATT,7>='AFS500'           ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
                  DIN<DINATT,7>=AFS.TARIFF.NAME    ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
               NEXT DINATT               ; * JMK22 ; * JMK25 ; * JMK26
*              CALL AFS500(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT)      ; * JMK22 ; * JMK25 ; * JMK26
*              CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT)         ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
               CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)          ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
* JMK42               CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,SOCKETHANDLE)           ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK42
            END
         END ELSE
*           CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT) ; * JMK31
*           CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT)  ; * JMK31 ; * JMK44
            CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)   ; * JMK31 ; * JMK44
* JMK42            CALL RWS(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,SOCKETHANDLE)    ; * JMK31 ; * JMK42
         END
*******************************************************************
*      CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT)
         CONTR.DOUT=DOUT<1>
         IF LOGISTICS THEN BENCH.DOUT=DOUT<2>
      END ELSE
* Different "Driver" used on Contract & Benchmark Tariffs
* Send each "Bill" to their respective Driver"
*      IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01
*      IF CONTR.TARIFF.DRIVER='MWB' AND CDN.ROUTE=0 THEN   ; * JMK01 ; * JMK31
         IF CONTR.TARIFF.DRIVER='MWB' THEN         ; * JMK01 ; * JMK31
            IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'       ; * JMK31
*        CALL ELINE('Using PICK version .... AFS500')
            IF USER = 'OWEN' THEN
               CALL AFS500.MORE.LINES(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT)
            END ELSE
               DINNATT=DCOUNT(DIN,@AM)   ; * JMK22 ; * JMK25 ; * JMK26
               FOR DINATT=1 TO DINNATT   ; * JMK22 ; * JMK25 ; * JMK26
*                 DIN<DINATT,7>='AFS500'           ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
                  DIN<DINATT,7>=AFS.TARIFF.NAME    ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
               NEXT DINATT               ; * JMK22 ; * JMK25 ; * JMK26
*              CALL AFS500(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT)      ; * JMK22 ; * JMK25 ; * JMK26
*              CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT)   ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
               CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)    ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
* JMK42        CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,SOCKETHANDLE)     ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK42
            END
         END ELSE
*           CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT) ; * JMK31
*           CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT)      ; * JMK31 ; * JMK44
            CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,F.TABLES)       ; * JMK31 ; * JMK44
* JMK42            CALL RWS(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT,SOCKETHANDLE)        ; * JMK31 ; * JMK42
         END
*        CALL @CONTR.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,CONTR.DOUT,F.PCIN,F.PCOUT)
         IF LOGISTICS THEN
            DIN<1,4>=BENCH.CLASSES
            DIN<1,7>=BENCH.TARIFF.ACT.NAME
            DIN<1,8>=BENCH.TARIFF.EFF.DATE
            DIN<1,9>=BENCH.TARIFF.FACTOR
            VIN='BOTH'
            VIN<2>='10000'               ; * Max Discount Weight
            VIN<3>=CLIENT                ; * JMK33
            VIN<4>=CARRIER               ; * JMK47
            VIN<5>='B'                   ; * JMK47
*        IF BENCH.TARIFF.DRIVER='MWB' THEN      ; * JMK01
*           IF BENCH.TARIFF.DRIVER='MWB' AND CDN.ROUTE=0 THEN          ; * JMK01 ; * JMK31
            IF BENCH.TARIFF.DRIVER='MWB' THEN      ; * JMK01 ; * JMK31
               IF CDN.ROUTE THEN AFS.TARIFF.NAME='AFS525' ELSE AFS.TARIFF.NAME='AFS500'    ; * JMK31
*        CALL ELINE('Using PICK version .... AFS500')
               IF USER = 'OWEN' THEN
                  CALL AFS500.MORE.LINES(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT)
               END ELSE
                  DINNATT=DCOUNT(DIN,@AM)          ; * JMK22 ; * JMK25 ; * JMK26
                  FOR DINATT=1 TO DINNATT          ; * JMK22 ; * JMK25 ; * JMK26
*                    DIN<DINATT,7>='AFS500'        ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
                     DIN<DINATT,7>=AFS.TARIFF.NAME           ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK31
                  NEXT DINATT            ; * JMK22 ; * JMK25 ; * JMK26
*                 CALL AFS500(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT)      ; * JMK22 ; * JMK25 ; * JMK26
*                 CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT); * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
                  CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)           ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK44
*JMK42                  CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,SOCKETHANDLE)  ; * JMK22 ; * JMK25 ; * JMK26 ; * JMK42
               END
            END ELSE
*              CALL @BENCH.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT) ; * JMK31
*              CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT)   ; * JMK31 ; * JMK44
               CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,F.TABLES)    ; * JMK31 ; * JMK44
* JMK42               CALL RWS(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT,SOCKETHANDLE)     ; * JMK31 ; * JMK42
            END
*        CALL @BENCH.TARIFF.DRIVER(VIN,VOUT,DIN,TDIN,BENCH.DOUT,F.PCIN,F.PCOUT)
         END
      END
      FLAT.RATE=0                        ; * JMK20
      CONTR.CHRG=''                      ; * JMK24
      BENCH.CHRG=''                      ; * JMK24
      FLAT.ROUTE='INTER'                 ; * JMK21
      IF ORIG.STATE=DEST.STATE THEN      ; * JMK21
         FLAT.ROUTE='INTRA'              ; * JMK21
      END                                ; * JMK21
      IF DAUDIT.TABLES<55>#'' THEN       ; * JMK20
         FT.NVAL=DCOUNT(DAUDIT.TABLES<55>,@VM)     ; * JMK20
         FOR FT.VAL=1 TO FT.NVAL         ; * JMK20
            BEG.WT=DAUDIT.TABLES<55,FT.VAL>        ; * JMK20
            END.WT=DAUDIT.TABLES<56,FT.VAL>        ; * JMK20
            INTRA.CONTR.CHRG=DAUDIT.TABLES<57,FT.VAL>        ; * JMK20 ; * JMK21
            INTRA.BENCH.CHRG=DAUDIT.TABLES<58,FT.VAL>        ; * JMK20 ; * JMK21
            INTER.CONTR.CHRG=DAUDIT.TABLES<59,FT.VAL>        ; * JMK21
            INTER.BENCH.CHRG=DAUDIT.TABLES<60,FT.VAL>        ; * JMK21
            IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN      ; * JMK20
               FLAT.VALID=0              ; * JMK24
               BEGIN CASE                ; * JMK24
                  CASE FLAT.ROUTE='INTER'          ; * JMK24
                     IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1         ; * JMK24
                     IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1         ; * JMK24
                  CASE FLAT.ROUTE='INTRA'          ; * JMK24
                     IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1         ; * JMK24
                     IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1         ; * JMK24
                  CASE 1                 ; * JMK24
               END CASE                  ; * JMK24
               IF FLAT.VALID THEN        ; * JMK24
                  FLAT.CONTR=0           ; * JMK24
                  FLAT.BENCH=0           ; * JMK24
                  IF FLAT.ROUTE='INTER' THEN       ; * JMK24
                     IF INTER.CONTR.CHRG+0#0 THEN  ; * JMK24
                        CONTR.CHRG=INTER.CONTR.CHRG          ; * JMK21
                        FLAT.CONTR=1     ; * JMK24
                     END                 ; * JMK24
                     IF INTER.BENCH.CHRG+0#0 THEN  ; * JMK24
                        BENCH.CHRG=INTER.BENCH.CHRG          ; * JMK21
                        FLAT.BENCH=1     ; * JMK24
                     END                 ; * JMK24
                  END                    ; * JMK24
                  IF FLAT.ROUTE='INTRA' THEN       ; * JMK21
                     IF INTRA.CONTR.CHRG+0#0 THEN  ; * JMK24
                        CONTR.CHRG=INTRA.CONTR.CHRG          ; * JMK21
                        FLAT.CONTR=1     ; * JMK24
                     END                 ; * JMK24
                     IF INTRA.BENCH.CHRG+0#0 THEN  ; * JMK24
                        BENCH.CHRG=INTRA.BENCH.CHRG          ; * JMK21
                        FLAT.BENCH=1     ; * JMK24
                     END                 ; * JMK24
                  END                    ; * JMK21
                  IF FLAT.CONTR THEN     ; * JMK24
                     CONTR.FLAT=''       ; * JMK20
                     CONTR.FLAT<1,1>=CONTR.CHRG    ; * JMK20
                     CONTR.FLAT<1,2>=CONTR.CHRG    ; * JMK20
                     CONTR.FLAT<1,3>='FLATRATE'    ; * JMK20
                     CONTR.FLAT<1,4>=TOT.WEIGHT    ; * JMK20
                     CONTR.FLAT<1,5>=CONTR.CHRG    ; * JMK20
                     CONTR.FLAT<1,6>=END.WT:' LB Flat rate'  ; * JMK20
                     CONTR.DOUT<1,3>='FLATRATE'    ; * JMK20
                     CONTR.DOUT<1,5>=CONTR.CHRG    ; * JMK20
                  END                    ; * JMK24
                  IF LOGISTICS THEN      ; * JMK20
                     IF FLAT.BENCH THEN  ; * JMK24
                        BENCH.FLAT=''    ; * JMK20
                        BENCH.FLAT<1,1>=BENCH.CHRG           ; * JMK20
                        BENCH.FLAT<1,2>=BENCH.CHRG           ; * JMK20
                        BENCH.FLAT<1,3>='FLATRATE'           ; * JMK20
                        BENCH.FLAT<1,4>=TOT.WEIGHT           ; * JMK20
                        BENCH.FLAT<1,5>=BENCH.CHRG           ; * JMK20
                        BENCH.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK20
                        BENCH.DOUT<1,3>='FLATRATE'           ; * JMK20
                        BENCH.DOUT<1,5>=BENCH.CHRG           ; * JMK20
                     END                 ; * JMK24
                  END
                  FLAT.RATE=1            ; * JMK20
               END                       ; * JMK24
            END                          ; * JMK20
         NEXT FT.VAL                     ; * JMK20
      END                                ; * JMK20
      IF JL.FLAG THEN                    ; * JMK48
         IF JL.DAUDIT.TABLES<55>#'' THEN           ; * JMK48
            FT.NVAL=DCOUNT(JL.DAUDIT.TABLES<55>,@VM)         ; * JMK48
            FOR FT.VAL=1 TO FT.NVAL      ; * JMK48
               BEG.WT=JL.DAUDIT.TABLES<55,FT.VAL>  ; * JMK48
               END.WT=JL.DAUDIT.TABLES<56,FT.VAL>  ; * JMK48
               INTRA.CONTR.CHRG=JL.DAUDIT.TABLES<57,FT.VAL>  ; * JMK48
               INTRA.BENCH.CHRG=JL.DAUDIT.TABLES<58,FT.VAL>  ; * JMK48
               INTER.CONTR.CHRG=JL.DAUDIT.TABLES<59,FT.VAL>  ; * JMK48
               INTER.BENCH.CHRG=JL.DAUDIT.TABLES<60,FT.VAL>  ; * JMK48
               IF TOT.WEIGHT >= BEG.WT AND TOT.WEIGHT <= END.WT THEN   ; * JMK48
                  FLAT.VALID=0           ; * JMK48
                  BEGIN CASE             ; * JMK48
                     CASE FLAT.ROUTE='INTER'       ; * JMK48
                        IF INTER.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                        IF INTER.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                     CASE FLAT.ROUTE='INTRA'       ; * JMK48
                        IF INTRA.CONTR.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                        IF INTRA.BENCH.CHRG+0#0 THEN FLAT.VALID=1      ; * JMK48
                     CASE 1              ; * JMK48
                  END CASE               ; * JMK48
                  IF FLAT.VALID THEN     ; * JMK48
                     FLAT.CONTR=0        ; * JMK48
                     FLAT.BENCH=0        ; * JMK48
                     IF FLAT.ROUTE='INTER' THEN    ; * JMK48
                        IF INTER.CONTR.CHRG+0#0 THEN         ; * JMK48
                           CONTR.CHRG=INTER.CONTR.CHRG       ; * JMK48
                           FLAT.CONTR=1  ; * JMK48
                        END              ; * JMK48
                        IF INTER.BENCH.CHRG+0#0 THEN         ; * JMK48
                           BENCH.CHRG=INTER.BENCH.CHRG       ; * JMK48
                           FLAT.BENCH=1  ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                     IF FLAT.ROUTE='INTRA' THEN    ; * JMK48
                        IF INTRA.CONTR.CHRG+0#0 THEN         ; * JMK48
                           CONTR.CHRG=INTRA.CONTR.CHRG       ; * JMK48
                           FLAT.CONTR=1  ; * JMK48
                        END              ; * JMK48
                        IF INTRA.BENCH.CHRG+0#0 THEN         ; * JMK48
                           BENCH.CHRG=INTRA.BENCH.CHRG       ; * JMK48
                           FLAT.BENCH=1  ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                     IF FLAT.CONTR THEN  ; * JMK48
                        CONTR.FLAT=''    ; * JMK48
                        CONTR.FLAT<1,1>=CONTR.CHRG           ; * JMK48
                        CONTR.FLAT<1,2>=CONTR.CHRG           ; * JMK48
                        CONTR.FLAT<1,3>='FLATRATE'           ; * JMK48
                        CONTR.FLAT<1,4>=TOT.WEIGHT           ; * JMK48
                        CONTR.FLAT<1,5>=CONTR.CHRG           ; * JMK48
                        CONTR.FLAT<1,6>=END.WT:' LB Flat rate'         ; * JMK48
                        CONTR.DOUT<1,3>='FLATRATE'           ; * JMK48
                        CONTR.DOUT<1,5>=CONTR.CHRG           ; * JMK48
                     END                 ; * JMK48
                     IF LOGISTICS THEN   ; * JMK48
                        IF FLAT.BENCH THEN         ; * JMK48
                           BENCH.FLAT=''           ; * JMK48
                           BENCH.FLAT<1,1>=BENCH.CHRG        ; * JMK48
                           BENCH.FLAT<1,2>=BENCH.CHRG        ; * JMK48
                           BENCH.FLAT<1,3>='FLATRATE'        ; * JMK48
                           BENCH.FLAT<1,4>=TOT.WEIGHT        ; * JMK48
                           BENCH.FLAT<1,5>=BENCH.CHRG        ; * JMK48
                           BENCH.FLAT<1,6>=END.WT:' LB Flat rate'      ; * JMK48
                           BENCH.DOUT<1,3>='FLATRATE'        ; * JMK48
                           BENCH.DOUT<1,5>=BENCH.CHRG        ; * JMK48
                        END              ; * JMK48
                     END                 ; * JMK48
                     FLAT.RATE=1         ; * JMK48
                  END                    ; * JMK48
               END                       ; * JMK48
            NEXT FT.VAL                  ; * JMK48
         END                             ; * JMK48
      END                                ; * JMK48
*DF      IF CLIENT='01365' AND TOT.WEIGHT <= '500' THEN         ; * JMK13
*DF         BEGIN CASE                      ; * JMK13
*DF            CASE ORIG.STATE='CA' AND DEST.STATE='CA'         ; * JMK13
*DF               ATK.CHG=4927              ; * JMK13
*DF            CASE ORIG.STATE = DEST.STATE           ; * JMK13
*DF               ATK.CHG=4300              ; * JMK13
*DF            CASE 1                       ; * JMK13
*DF               ATK.CHG=5950              ; * JMK13
*DF         END CASE                        ; * JMK13
*DF         BENCH.DOUT=''                   ; * JMK13
*DF         BENCH.DOUT<1,1>=ATK.CHG         ; * JMK13
*DF         BENCH.DOUT<1,2>=ATK.CHG         ; * JMK13
*DF         BENCH.DOUT<1,3>='ATKMINIMUM'    ; * JMK13
*DF         BENCH.DOUT<1,4>=TOT.WEIGHT      ; * JMK13
*DF         BENCH.DOUT<1,5>=ATK.CHG         ; * JMK13
*DF         BENCH.DISC=''                   ; * JMK13
*DF         BENCH.DISC<1,1>=0               ; * JMK13
*DF      END                                ; * JMK13
      IF CLIENT='00843' AND CARRIER='03517' THEN   ; * JMK15
         IF ORIG.STATE='KS' AND DEST.STATE='KS' AND IOT='O' THEN       ; * JMK15
            BEGIN CASE                   ; * JMK15
               CASE TOT.WEIGHT <= '300'  ; * JMK15
                  CSM.CHG=3100           ; * JMK15
               CASE TOT.WEIGHT <= '500'  ; * JMK15
                  CSM.CHG=3800           ; * JMK15
               CASE 1                    ; * JMK15
                  CSM.CHG=''             ; * JMK15
            END CASE                     ; * JMK15
            IF CSM.CHG#'' THEN           ; * JMK15
               BENCH.DOUT=''             ; * JMK15
               BENCH.DOUT<1,1>=CSM.CHG   ; * JMK15
               BENCH.DOUT<1,2>=CSM.CHG   ; * JMK15
               BENCH.DOUT<1,3>='CSMMINIMUM'        ; * JMK15
               BENCH.DOUT<1,4>=TOT.WEIGHT          ; * JMK15
               BENCH.DOUT<1,5>=CSM.CHG   ; * JMK15
               BENCH.DISC=''             ; * JMK15
               BENCH.DISC<1,1>=0         ; * JMK15
            END                          ; * JMK15
         END                             ; * JMK15
      END                                ; * JMK15
*******************************************************************
* Verify Contract Bill Type
*******************************************************************
      IF CONTR.DOUT<1,10>#'' THEN
         IF CONTR.DOUT<1,10>='0202' THEN
            ERROR=("Error Rating engine obsolete for this tariff. Cannot Rate")
         END ELSE
            ERROR=("Error Code '":CONTR.DOUT<1,10>:"' returned on Contract Rating")
         END
         AUDIT='U'
         GO 9000
      END
      IF LOGISTICS AND BENCH.DOUT<1,10>#'' THEN
         IF BENCH.DOUT<1,10>='0202' THEN
            ERROR=("Error Rating engine obsolete for this tariff. Cannot Rate")
         END ELSE
            ERROR=("Error Code '":BENCH.DOUT<1,10>:"' returned on Benchmark Rating")
         END
         AUDIT='U'
         GO 9000
      END
      CONTR.BILL.TYPE=CONTR.DOUT<1,3>
      BEGIN CASE
         CASE CONTR.BILL.TYPE='FLATRATE'           ; * JMK20
         CASE CONTR.BILL.TYPE='MINIMUM'
         CASE CONTR.BILL.TYPE='ACTUAL'
         CASE CONTR.BILL.TYPE='DEFICIT'
         CASE CONTR.BILL.TYPE='NOTRATED'
            ERROR=("Contract Side of Bill Not Rated by ":CONTR.TARIFF.ACT.NAME:" Return Bill to Audit")
            AUDIT='U'
            GOTO 9000
         CASE 1
            IF RWS.TIMES<3 THEN          ; * JMK23
               SLEEP 1                   ; * JMK23
               RWS.TIMES+=1              ; * JMK23
               GO 1000                   ; * JMK23
            END                          ; * JMK23
            ERROR=("Error 104 Improper CONTR.BILL.TYPE of '":CONTR.BILL.TYPE:"'  Call Programmer!")
            AUDIT='U'
            GO 9000                      ; * Send Again & Lock into loop
      END CASE
      IF CONTR.BILL.TYPE='DEFICIT' THEN
         DEFICIT.WEIGHT=CONTR.DOUT<1,7>
      END ELSE DEFICIT.WEIGHT=0
      DISC.WEIGHT=TOT.WEIGHT+DEFICIT.WEIGHT
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CONTR.DISC.ATT=1
      END ELSE
         IF DISC.WEIGHT < 500 THEN CONTR.DISC.ATT=2 ELSE CONTR.DISC.ATT=3
      END
*******************************************************************
* Verify Benchmark Bill Type
*******************************************************************
      BENCH.BILL.TYPE=BENCH.DOUT<1,3>
      IF LOGISTICS THEN
         BEGIN CASE
            CASE BENCH.BILL.TYPE='FLATRATE'        ; * JMK20
*DF            CASE BENCH.BILL.TYPE='ATKMINIMUM'      ; * JMK13
            CASE BENCH.BILL.TYPE='CSMMINIMUM'      ; * JMK15
            CASE BENCH.BILL.TYPE='MINIMUM'
            CASE BENCH.BILL.TYPE='ACTUAL'
            CASE BENCH.BILL.TYPE='DEFICIT'
            CASE BENCH.BILL.TYPE='NOTRATED'
               ERROR=("Benchmark Side of Bill Not Rated by ":BENCH.TARIFF.ACT.NAME:" Return Bill to Audit")
               AUDIT='U'
               GO 9000
            CASE 1
               IF RWS.TIMES<3 THEN       ; * JMK23
                  SLEEP 1                ; * JMK23
                  RWS.TIMES+=1           ; * JMK23
                  GO 1000                ; * JMK23
               END                       ; * JMK23
               ERROR=("Error 105 Improper BENCH.BILL.TYPE of '":BENCH.BILL.TYPE:"'  Call Programmer!")
               AUDIT='U'
               GO 9000                   ; * Send Again & Lock into loop
         END CASE
         IF BENCH.BILL.TYPE='DEFICIT' THEN         ; * JMK51
            BENCH.DEF.WEIGHT=BENCH.DOUT<1,7>       ; * JMK51
         END ELSE BENCH.DEF.WEIGHT=0     ; * JMK51
         BENCH.DEF.WEIGHT=0              ; * JMK51
         TOT.WEIGHT=SUM(CLASS.WGT<2>)    ; * JMK51
         BENCH.DISC.WEIGHT=TOT.WEIGHT+BENCH.DEF.WEIGHT       ; * JMK51
         BEGIN CASE                      ; * JMK51
            CASE BENCH.BILL.TYPE='MINIMUM'         ; * JMK51
               BENCH.DISC.ATT=1          ; * JMK51
            CASE BENCH.DISC.WEIGHT<500   ; * JMK51
               BENCH.DISC.ATT=2          ; * JMK51
            CASE 1                       ; * JMK51
               BENCH.DISC.ATT=3          ; * JMK51
         END CASE                        ; * JMK51
      END
*NPR02
******************************************___________________________________*******************************
      GOSUB WHY.CALCS
*
      IF IOT = "T" THEN
         TP.WHY.TAB<TP.CNT> = WHY
         GOSUB 8000
         IF TP.CNT = 1 THEN TP.VOUT1 = VOUT
         IF TP.CNT = 2 THEN TP.VOUT2 = VOUT
* CRT @(-1) ; PRINT WHY ; *ZZZ
* CRT @(0,20):@(-3):" TP.CNT  ":TP.CNT ; DEBUG  ; *ZZZ
         IF TP.CNT LT "2" THEN
            TP.CNT += 1
            GOTO 575
         END ELSE
            IF TP.AMT.TAB<1> GT TP.AMT.TAB<2> THEN
               WHY = TP.WHY.TAB<1>
               VOUT = TP.VOUT1
               SET.VOUT=0
               GO 9000
            END
         END
      END
*
      GO 9000                            ; *NPR02
*
******************************************___________________________________*******************************
*NPR02
*
WHY.CALCS:
*
      WHY=''
**** New on 06-03-02
      WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(57,01):'Rt Zip:':LOOKUP.ZIP:@(71,01):'Tbl#:':TABLE
*****
      DTL.VOUT=''                        ; * JMK06
      WHY:=@(0,02):@(-3):'Origin : ':ORIG.ZIP:' ':ORIG.CITY:', ':ORIG.STATE:NULL
      WHY:=@(0,03):'Dest   : ':DEST.ZIP:' ':DEST.CITY:', ':DEST.STATE:NULL
      BEGIN CASE
         CASE IOT='I' ; IOT.WORDS='--IB---'
         CASE IOT='O' ; IOT.WORDS='--OB---'
         CASE IOT='T' ; IOT.WORDS='--TP---'
      END CASE
      WHY:=@(0,4):IOT.WORDS
      CONTR.STRING='|':STR('-',34):'|'
      L.CONTR.STRING=LEN(CONTR.STRING)
      CONTR.WORDS="Contract-":CONTR.TARIFF
      IF CDN.ROUTE THEN CONTR.WORDS=CHANGE(CONTR.WORDS,'AFS500','AFS525')
      L.CONTR.TARIFF=LEN(CONTR.WORDS)
      CONTR.START=INT((L.CONTR.STRING-L.CONTR.TARIFF)/2)
      CONTR.STRING[CONTR.START+1,L.CONTR.TARIFF]=CONTR.WORDS
      WHY:=@(0,4):'Tbl:':TABLE:@(7,4):CONTR.STRING:NULL
      IF LOGISTICS THEN
         BENCH.STRING='|':STR('-',33):'|'
         L.BENCH.STRING=LEN(BENCH.STRING)
         BENCH.WORDS="Benchmark-":BENCH.TARIFF
         IF CDN.ROUTE THEN BENCH.WORDS=CHANGE(BENCH.WORDS,'AFS500','AFS525')
         L.BENCH.TARIFF=LEN(BENCH.WORDS)
         BENCH.START=INT((L.BENCH.STRING-L.BENCH.TARIFF)/2)
         BENCH.STRING[BENCH.START+1,L.BENCH.TARIFF]=BENCH.WORDS
         WHY:=@(45,4):BENCH.STRING:NULL
      END
      WHY:=@(00,05):"Ln":NULL
      WHY:=@(03,05):"Bil":NULL
      WHY:=@(07,05):"Ctr":NULL
      WHY:=@(12,05):"Wgt":NULL
      WHY:=@(17,05):"Rate":NULL
      WHY:=@(23,05):"Charge":NULL
      WHY:=@(30,05):"Disc":NULL
      WHY:=@(37,05):"Amount":NULL
      IF LOGISTICS THEN
         WHY:=@(45,05):"Bch":NULL
         WHY:=@(50,05):"Wgt":NULL
         WHY:=@(55,05):"Rate":NULL
         WHY:=@(61,05):"Charge":NULL
         WHY:=@(68,05):"Disc":NULL
         WHY:=@(74,05):"Amount":NULL
      END
      CONTR.TIMES=DCOUNT(CONTR.DOUT<1,1>,@SVM)
      TIMES=DETAIL.TIMES
      IF CONTR.TIMES > TIMES THEN TIMES=CONTR.TIMES
      IF LOGISTICS THEN
         BENCH.TIMES=DCOUNT(BENCH.DOUT<1,1>,@SVM)
         IF BENCH.TIMES > TIMES THEN TIMES=BENCH.TIMES
      END
      LINE=5
      TOT.CONTR.DISC=0                   ; ** Contract Discount Accumulator
      TOT.BENCH.DISC=0                   ; ** Benchmark Discount Accumulator
      TOT.CONTR.GROSS=0                  ; * JMK52
      TOT.BENCH.GROSS=0                  ; * JMK52
      FOR DET.CNT = 1 TO TIMES
         LINE=LINE+1
         WHY:=@(00,LINE):DET.CNT'R%2':NULL
         WHY:=@(02,LINE):CLASSES<1,DET.CNT>'R#4':NULL
         WHY:=@(06,LINE):CONTR.CLASSES<1,1,DET.CNT>'R#4':NULL
         WHY:=@(10,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
         WHY:=@(15,LINE):CONTR.DOUT<1,1,DET.CNT>'R26#6':NULL           ; * Contr Rate
         IF CONTR.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN           ; * Catch Zero Rates
            ERROR=("Error $0 Rate on Contr Calcs Line ":DET.CNT)
            AUDIT='U'
            GO 9000
         END
         CUR.CONTR.CHARGE=CONTR.DOUT<1,2,DET.CNT>
         TOT.CONTR.GROSS+=CUR.CONTR.CHARGE         ; * JMK52
         CUR.CONTR.DISC=CONTR.DISC<CONTR.DISC.ATT,DET.CNT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
         CUR.CONTR.AMT=CUR.CONTR.CHARGE-(CUR.CONTR.DISC.AMT/10000)
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Contr Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Contract Disc %
         WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL           ; * Amt (Chg-Disc Amt)
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='FRT'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=CONTR.CLASSES<1,1,DET.CNT>       ; * JMK06
         DTL.VOUT<3,NVAL+1>=WEIGHTS<1,DET.CNT>     ; * JMK06
         DTL.VOUT<4,NVAL+1>=CONTR.DOUT<1,1,DET.CNT>          ; * JMK06
         DTL.VOUT<5,NVAL+1>=ICONV(CUR.CONTR.AMT,'MR0')       ; * JMK06
         DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')     ; * JMK06
         IF LOGISTICS THEN
            WHY:=@(45,LINE):BENCH.CLASSES<1,1,DET.CNT>'R#3':NULL
            WHY:=@(48,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
            WHY:=@(53,LINE):BENCH.DOUT<1,1,DET.CNT>'R26#6':NULL        ; * Rate
            IF BENCH.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN        ; * Catch Zero Rates
               ERROR=("Error $0 Rate on Bmark Calcs Line ":DET.CNT)
               AUDIT='U'
               GO 9000
            END
            CUR.BENCH.CHARGE=BENCH.DOUT<1,2,DET.CNT>
            TOT.BENCH.GROSS+=CUR.BENCH.CHARGE      ; * JMK52
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Charge
*           CUR.BENCH.DISC=BENCH.DISC<1,DET.CNT>   ; * JMK51
            CUR.BENCH.DISC=BENCH.DISC<BENCH.DISC.ATT,DET.CNT>          ; * JMK51
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Bench Amount (Chg-Disc Amt)
         END
      NEXT DET.CNT
      IF CONTR.BILL.TYPE='DEFICIT' OR BENCH.BILL.TYPE='DEFICIT' THEN
         LINE=LINE+1
         IF CONTR.BILL.TYPE='DEFICIT' THEN
            CUR.CONTR.CHARGE=CONTR.DOUT<1,9>
            TOT.CONTR.GROSS+=CUR.CONTR.CHARGE      ; * JMK52
            CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
            CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
            TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
            CUR.CONTR.AMT=CUR.CONTR.CHARGE-(CUR.CONTR.DISC.AMT/10000)
            WHY:=@(3,LINE):'DEFICIT':NULL
            WHY:=@(10,LINE):CONTR.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(15,LINE):CONTR.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
            NVAL=DCOUNT(DTL.VOUT<1>,@VM)           ; * JMK06
            DTL.VOUT<1,NVAL+1>='DEF'     ; * JMK06
            DTL.VOUT<2,NVAL+1>=''        ; * JMK06
            DTL.VOUT<3,NVAL+1>=CONTR.DOUT<1,7>     ; * JMK06
            DTL.VOUT<4,NVAL+1>=CONTR.DOUT<1,8>     ; * JMK06
            DTL.VOUT<5,NVAL+1>=ICONV(CUR.CONTR.AMT,'MR0')    ; * JMK06
            DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')  ; * JMK06
         END
         IF BENCH.BILL.TYPE='DEFICIT' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,9>
            TOT.BENCH.GROSS+=CUR.BENCH.CHARGE      ; * JMK52
*           CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC ; * JMK51
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK51
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
            WHY:=@(48,LINE):BENCH.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
            WHY:=@(53,LINE):BENCH.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Deficit Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
         END
      END
      IF CONTR.BILL.TYPE='FLATRATE' OR BENCH.BILL.TYPE='FLATRATE' THEN           ; * JMK20
         LINE=LINE+1                     ; * JMK20
         IF CONTR.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.CONTR.CHARGE=CONTR.FLAT<1,5>       ; * JMK20
            TOT.CONTR.GROSS=CUR.CONTR.CHARGE       ; * JMK52
            CUR.CONTR.AMT=CONTR.FLAT<1,5>          ; * JMK20
            TOT.CONTR.DISC=0             ; * JMK20
            WHY:=@(3,LINE):CONTR.FLAT<1,6>:NULL    ; * JMK20
            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * JMK20
         END                             ; * JMK20
         IF BENCH.BILL.TYPE='FLATRATE' THEN        ; * JMK20
            CUR.BENCH.CHARGE=BENCH.FLAT<1,5>       ; * JMK20
            TOT.BENCH.GROSS=CUR.BENCH.CHARGE       ; * JMK52
            CUR.BENCH.AMT=BENCH.FLAT<1,5>          ; * JMK20
            TOT.BENCH.DISC=0             ; * JMK20
            WHY:=@(45,LINE):BENCH.FLAT<1,6>:NULL   ; * JMK24
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * JMK20
            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * JMK20
         END                             ; * JMK20
      END                                ; * JMK20
      LINE=LINE+1
      WHY:=@(0,LINE):'BILL TOTAL':NULL
      WHY:=@(10,LINE):CONTR.DOUT<1,4>'R#5':NULL    ; * Total Weight
      IF CONTR.BILL.TYPE='MINIMUM' THEN
         CUR.CONTR.CHARGE=CONTR.DOUT<1,5>
         TOT.CONTR.GROSS=CUR.CONTR.CHARGE          ; * JMK52
         CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
         TOT.CONTR.DISC=CUR.CONTR.DISC.AMT
         WHY:=@(15,LINE):"TMIN"'R#6':NULL
         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Tariff Minimum Charge
         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Disc (on Lowest Class)
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='MIN'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=CONTR.CLASSES<1,1,DET.CNT>       ; * JMK06
         DTL.VOUT<3,NVAL+1>=WEIGHTS<1,DET.CNT>     ; * JMK06
         DTL.VOUT<4,NVAL+1>='TMIN'       ; * JMK06
         DTL.VOUT<5,NVAL+1>=CUR.CONTR.CHARGE       ; * JMK06
         DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')     ; * JMK06
      END ELSE
         WHY:=@(21,LINE):CONTR.DOUT<1,5>'R26#8':NULL         ; * Total Charges
      END
      TOT.CONTR.AMT=CONTR.DOUT<1,5>-OCONV((TOT.CONTR.DISC/10000),'MR0')
      TOT.BENCH.AMT=TOT.CONTR.AMT        ; * JMK12
      WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
      IF LOGISTICS THEN
         WHY:=@(48,LINE):BENCH.DOUT<1,4>'R#5':NULL           ; * Total Weight
         IF BENCH.BILL.TYPE='MINIMUM' THEN
            CUR.BENCH.CHARGE=BENCH.DOUT<1,5>
            TOT.BENCH.GROSS=CUR.BENCH.CHARGE       ; * JMK52
*           CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC ; * JMK51
            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK51
            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
            TOT.BENCH.DISC=CUR.BENCH.DISC.AMT
            WHY:=@(53,LINE):"TMIN"'R#6':NULL
            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Tariff Minimum Charge
            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; *Disc (on Lowest Class)
         END ELSE
            WHY:=@(59,LINE):BENCH.DOUT<1,5>'R26#8':NULL      ; * Total Charges
         END
         TOT.BENCH.AMT=BENCH.DOUT<1,5>-(TOT.BENCH.DISC/10000)'R0'
         WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
      END
      IF TOT.CONTR.AMT+0=0 THEN
         ERROR=("Contract Side of Bill Not Rated, Try an adjacent zip code")
         AUDIT='U'
         GO 9000
      END
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT+0=0 THEN
            ERROR=("Benchmark Side of Bill Not Rated, Try an adjacent zip code")
            AUDIT='U'
            GO 9000
         END
      END
*******************************************************************
* Minimum Charge Logic
*******************************************************************
*     IF FLAT.RATE=1 THEN GO SKIP.MINIMUM          ; * JMK20 ; * JMK28
      IF OCONV(ORIG.STATE,'MCU')=OCONV(DEST.STATE,'MCU') THEN OFFSET=0 ELSE OFFSET=3
*IF OWEN THEN
*  CRT @(0,23):'Owen press break... Calculating the Multi Weight Min':
*  INPUT NUL:
*END
      IF TOT.WEIGHT+0=0 THEN CALL ELINE("TOT.WEIGHT is Zero Notify Programming!")
      LOCATE TOT.WEIGHT IN DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING WGT.POS ELSE NULL
      CONTR.MIN=DAUDIT.TABLES<38+OFFSET,WGT.POS>
      BENCH.MIN=DAUDIT.TABLES<39+OFFSET,WGT.POS>
      IF JL.FLAG THEN                    ; * JMK48
         LOCATE TOT.WEIGHT IN JL.DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING JL.WGT.POS ELSE NULL       ; * JMK48
         CONTR.MIN=JL.DAUDIT.TABLES<38+OFFSET,JL.WGT.POS>    ; * JMK48
      END                                ; * JMK48
*    IF ORIG.STATE=DEST.STATE THEN MIN.VAL=1 ELSE MIN.VAL=2
*    CONTR.MIN=DAUDIT.TABLES<21,MIN.VAL>
*    BENCH.MIN=DAUDIT.TABLES<22,MIN.VAL>
      CONTR.ABS.MIN=0                    ; * Contract Absolute Minimum Flag
      BENCH.ABS.MIN=0                    ; * Benchmark Absolute Minimum Flag
*     IF TOT.CONTR.AMT < CONTR.MIN THEN ; * JMK28
      IF TOT.CONTR.AMT < CONTR.MIN AND CONTR.BILL.TYPE#'FLATRATE' THEN           ; * JMK28
         FAK=1
         TOT.CONTR.AMT=CONTR.MIN
         CONTR.ABS.MIN=1
      END
      IF LOGISTICS THEN
*        IF TOT.BENCH.AMT < BENCH.MIN THEN ; * JMK28
         IF TOT.BENCH.AMT < BENCH.MIN AND BENCH.BILL.TYPE#'FLATRATE' THEN        ; * JMK28
            TOT.BENCH.AMT=BENCH.MIN
            BENCH.ABS.MIN=1
         END
         FORCED.WORD=''
         IF CONTR.ABS.MIN THEN
            BEGIN CASE
               CASE FORCE.BENCH.MIN="Y"  ; * JMK11
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK11
                  BENCH.ABS.MIN=1        ; * JMK11
                  FORCED.WORD='Forced '  ; * JMK11
               CASE NUM(FORCE.BENCH.MIN) AND TOT.WEIGHT <= FORCE.BENCH.MIN       ; * JMK11
                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK11
                  BENCH.ABS.MIN=1        ; * JMK11
                  FORCED.WORD='Forced '  ; * JMK11
            END CASE
         END
      END
      IF CONTR.ABS.MIN OR BENCH.ABS.MIN THEN
         LINE+=1
         IF CONTR.ABS.MIN THEN
            WHY:=@(3,LINE):"CONTRACT MINIMUM":NULL
            WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
            LOCATE('MIN',DTL.VOUT,1;MPOS) THEN     ; * JMK09
               DTL.VOUT<5,MPOS>=TOT.CONTR.AMT      ; * JMK09
            END                          ; * JMK09
         END
         IF BENCH.ABS.MIN THEN
            WHY:=@(45,LINE):"BENCHMARK MINIMUM":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
         END
      END

SKIP.MINIMUM: ; * JMK20

************************************************************************
* Bring Benchmark up to Contract Amount BEFORE FSC and ACC calculations
************************************************************************
      IF LOGISTICS THEN
         IF TOT.BENCH.AMT < TOT.CONTR.AMT THEN
            TOT.BENCH.AMT=TOT.CONTR.AMT
            LINE+=1
            WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
         END
      END
*******************************************************************
1225: * Fuel Surcharge Calculations
      CONTR.FSC.AMT=0
      BENCH.FSC.AMT=0
      CONTR.FSC.PARMS=''                 ; * JMK12
      BENCH.FSC.PARMS=''                 ; * JMK12
      AFS.FSC.PARMS=''                   ; * JMK12
      IF CONTR.DFSC='' OR BENCH.DFSC='' THEN GO 1275
      VIN=BILL.DATE
      IF FSC.BILL.DATE#'' THEN
         VIN=FSC.BILL.DATE
      END
*
* DRF01 - Added the above 3 lines
*
      VIN<2>=TOT.WEIGHT
*    VIN<3>=MILES ; * Dont have miles at this point
*    VIN<5>=CC
      VIN<6>=TOT.CONTR.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx and AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS
      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)
*IF OWEN THEN
*  CRT @(0,23):"FSC routine calculated FSC at ":VOUT<1>'R26':
*  INPUT NUL:
*END
* JMK12 - CAPTURE CONTRACT FSC PARAMETERS FOR LATER REVIEW
      CONTR.FSC.PARMS<1,1>=VIN<1>        ; * JMK12 - BILL DATE
      CONTR.FSC.PARMS<1,2>=VIN<2>        ; * JMK12 - WEIGHT
      CONTR.FSC.PARMS<1,3>=VIN<3>        ; * JMK12 - MILES
      CONTR.FSC.PARMS<1,4>=VIN<6>        ; * JMK12 - FREIGHT AMOUNT
      CONTR.FSC.PARMS<1,5>=VIN<7>        ; * JMK12 - ORIGIN ST
      CONTR.FSC.PARMS<1,6>=VIN<8>        ; * JMK12 - DESTINATION ST
      CONTR.FSC.PARMS<1,7>=VOUT<1>       ; * JMK12 - FSC AMT
      CONTR.FSC.PARMS<1,8>=VOUT<2>       ; * JMK12 - MIN FLG
      CONTR.FSC.PARMS<1,9>=VOUT<3>       ; * JMK12 - CALC PERC
      CONTR.FSC.PARMS<1,10>=VOUT<7>      ; * JMK12 - OVERAGE AMT
      CONTR.FSC.PARMS<1,11>=VOUT<8>      ; * JMK12 - OVERAGE STEPS
      CONTR.FSC.PARMS<1,12>=VOUT<9>      ; * JMK12 - BASE PERC
      CONTR.FSC.PARMS<1,13>=VOUT<10>     ; * JMK12 - OVERAGE PERC
      CONTR.FSC.PARMS<1,14>=VOUT<11>     ; * JMK12 - DELAY DAYS
      CONTR.FSC.PARMS<1,15>=VOUT<12>     ; * JMK12 - SHIFT DATE
      CONTR.FSC.PARMS<1,16>=VOUT<13>     ; * JMK12 - NATL FUEL PRICE
      CONTR.FSC.PARMS<1,17>=VOUT<14>     ; * JMK12 - CONV FUEL PRICE
      CONTR.FSC.PARMS<1,18>=VOUT<15>     ; * JMK12 - BEGIN EFF DATE
      CONTR.FSC.PARMS<1,19>=VOUT<16>     ; * JMK12 - FORMULA
      CONTR.FSC.PARMS<1,20>=VOUT<17>     ; * JMK12 - MODE
      CONTR.FSC.PARMS<1,21>=VOUT<18>     ; * JMK12 - BASE FUEL PRICE
      CONTR.FSC.PARMS<1,22>=VOUT<19>     ; * JMK12 - NATL INDEX NAME
      CONTR.FSC.PARMS<1,23>=VOUT<20>     ; * JMK12 - MAX SETUP PRICE
      CONTR.FSC.PARMS<1,24>=VOUT<21>     ; * JMK50 - AFS CONTRACT FSC
      CONTR.FSC.AMT=VOUT<1>
      CONTR.FSC.MIN=VOUT<2>
      CONTR.FSC.PERC=VOUT<3>
*     IF LOGISTICS THEN ; * JMK12
      VIN=BILL.DATE
      IF FSC.BILL.DATE#'' THEN
         VIN=FSC.BILL.DATE
      END
*
* DRF01 - Added the above 3 lines
*
      VIN<2>=TOT.WEIGHT
*      VIN<3>=MILES ; * Dont have miles at this point
*      VIN<5>=CC
      VIN<6>=TOT.BENCH.AMT
      VIN<7>=ORIG.STATE                  ; * Special for Xpedx and AFS
      VIN<8>=DEST.STATE                  ; * Special for AFS
      CALL CALC.FSC(VIN,VOUT,BENCH.DFSC,F.TABLES)
* JMK12 - CAPTURE CARRIER BENCHMARK FSC PARAMETERS FOR LATER REVIEW
      BENCH.FSC.PARMS<1,1>=VIN<1>        ; * JMK12 - BILL DATE
      BENCH.FSC.PARMS<1,2>=VIN<2>        ; * JMK12 - WEIGHT
      BENCH.FSC.PARMS<1,3>=VIN<3>        ; * JMK12 - MILES
      BENCH.FSC.PARMS<1,4>=VIN<6>        ; * JMK12 - FREIGHT AMOUNT
      BENCH.FSC.PARMS<1,5>=VIN<7>        ; * JMK12 - ORIGIN ST
      BENCH.FSC.PARMS<1,6>=VIN<8>        ; * JMK12 - DESTINATION ST
      BENCH.FSC.PARMS<1,7>=VOUT<1>       ; * JMK12 - FSC AMT
      BENCH.FSC.PARMS<1,8>=VOUT<2>       ; * JMK12 - MIN FLG
      BENCH.FSC.PARMS<1,9>=VOUT<3>       ; * JMK12 - CALC PERC
      BENCH.FSC.PARMS<1,10>=VOUT<7>      ; * JMK12 - OVERAGE AMT
      BENCH.FSC.PARMS<1,11>=VOUT<8>      ; * JMK12 - OVERAGE STEPS
      BENCH.FSC.PARMS<1,12>=VOUT<9>      ; * JMK12 - BASE PERC
      BENCH.FSC.PARMS<1,13>=VOUT<10>     ; * JMK12 - OVERAGE PERC
      BENCH.FSC.PARMS<1,14>=VOUT<11>     ; * JMK12 - DELAY DAYS
      BENCH.FSC.PARMS<1,15>=VOUT<12>     ; * JMK12 - SHIFT DATE
      BENCH.FSC.PARMS<1,16>=VOUT<13>     ; * JMK12 - NATL FUEL PRICE
      BENCH.FSC.PARMS<1,17>=VOUT<14>     ; * JMK12 - CONV FUEL PRICE
      BENCH.FSC.PARMS<1,18>=VOUT<15>     ; * JMK12 - BEGIN EFF DATE
      BENCH.FSC.PARMS<1,19>=VOUT<16>     ; * JMK12 - FORMULA
      BENCH.FSC.PARMS<1,20>=VOUT<17>     ; * JMK12 - MODE
      BENCH.FSC.PARMS<1,21>=VOUT<18>     ; * JMK12 - BASE FUEL PRICE
      BENCH.FSC.PARMS<1,22>=VOUT<19>     ; * JMK12 - NATL INDEX NAME
      BENCH.FSC.PARMS<1,23>=VOUT<20>     ; * JMK12 - MAX SETUP PRICE
      BENCH.FSC.PARMS<1,24>=VOUT<21>     ; * JMK50 - AFS CONTRACT FSC
* JMK36 - SETUP CALL TO CALCULATE OLD AFS BENCHMARK FSC CHARGES
      CALL CALC.FSC(VIN,VOUT,AFSO.BENCH.DFSC,F.TABLES)       ; * JMK36
* JMK36 - CAPTURE CARRIER BENCHMARK FSC PARAMETERS FOR LATER REVIEW
      AFSO.BENCH.FSC.PARMS<1,1>=VIN<1>   ; * JMK36 - BILL DATE
      AFSO.BENCH.FSC.PARMS<1,2>=VIN<2>   ; * JMK36 - WEIGHT
      AFSO.BENCH.FSC.PARMS<1,3>=VIN<3>   ; * JMK36 - MILES
      AFSO.BENCH.FSC.PARMS<1,4>=VIN<6>   ; * JMK36 - FREIGHT AMOUNT
      AFSO.BENCH.FSC.PARMS<1,5>=VIN<7>   ; * JMK36 - ORIGIN ST
      AFSO.BENCH.FSC.PARMS<1,6>=VIN<8>   ; * JMK36 - DESTINATION ST
      AFSO.BENCH.FSC.PARMS<1,7>=VOUT<1>  ; * JMK36 - FSC AMT
      AFSO.BENCH.FSC.PARMS<1,8>=VOUT<2>  ; * JMK36 - MIN FLG
      AFSO.BENCH.FSC.PARMS<1,9>=VOUT<3>  ; * JMK36 - CALC PERC
      AFSO.BENCH.FSC.PARMS<1,10>=VOUT<7>           ; * JMK36 - OVERAGE AMT
      AFSO.BENCH.FSC.PARMS<1,11>=VOUT<8>           ; * JMK36 - OVERAGE STEPS
      AFSO.BENCH.FSC.PARMS<1,12>=VOUT<9>           ; * JMK36 - BASE PERC
      AFSO.BENCH.FSC.PARMS<1,13>=VOUT<10>          ; * JMK36 - OVERAGE PERC
      AFSO.BENCH.FSC.PARMS<1,14>=VOUT<11>          ; * JMK36 - DELAY DAYS
      AFSO.BENCH.FSC.PARMS<1,15>=VOUT<12>          ; * JMK36 - SHIFT DATE
      AFSO.BENCH.FSC.PARMS<1,16>=VOUT<13>          ; * JMK36 - NATL FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,17>=VOUT<14>          ; * JMK36 - CONV FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,18>=VOUT<15>          ; * JMK36 - BEGIN EFF DATE
      AFSO.BENCH.FSC.PARMS<1,19>=VOUT<16>          ; * JMK36 - FORMULA
      AFSO.BENCH.FSC.PARMS<1,20>=VOUT<17>          ; * JMK36 - MODE
      AFSO.BENCH.FSC.PARMS<1,21>=VOUT<18>          ; * JMK36 - BASE FUEL PRICE
      AFSO.BENCH.FSC.PARMS<1,22>=VOUT<19>          ; * JMK36 - NATL INDEX NAME
      AFSO.BENCH.FSC.PARMS<1,23>=VOUT<20>          ; * JMK36 - MAX SETUP PRICE
      AFSO.BENCH.FSC.PARMS<1,24>=VOUT<21>          ; * JMK50 - AFS CONTRACT FSC
* JMK12 - SETUP CALL TO CALCULATE AFS BENCHMARK FSC CHARGES
      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)  ; * JMK12
* JMK12 - CAPTURE AFS BENCHMARK FSC PARAMETERS FOR LATER REVIEW
      AFS.FSC.PARMS<1,1>=VIN<1>          ; * JMK12 - BILL DATE
      AFS.FSC.PARMS<1,2>=VIN<2>          ; * JMK12 - WEIGHT
      AFS.FSC.PARMS<1,3>=VIN<3>          ; * JMK12 - MILES
      AFS.FSC.PARMS<1,4>=VIN<6>          ; * JMK12 - FREIGHT AMOUNT
      AFS.FSC.PARMS<1,5>=VIN<7>          ; * JMK12 - ORIGIN ST
      AFS.FSC.PARMS<1,6>=VIN<8>          ; * JMK12 - DESTINATION ST
      AFS.FSC.PARMS<1,7>=VOUT<1>         ; * JMK12 - FSC AMT
      AFS.FSC.PARMS<1,8>=VOUT<2>         ; * JMK12 - MIN FLG
      AFS.FSC.PARMS<1,9>=VOUT<3>         ; * JMK12 - CALC PERC
      AFS.FSC.PARMS<1,10>=VOUT<7>        ; * JMK12 - OVERAGE AMT
      AFS.FSC.PARMS<1,11>=VOUT<8>        ; * JMK12 - OVERAGE STEPS
      AFS.FSC.PARMS<1,12>=VOUT<9>        ; * JMK12 - BASE PERC
      AFS.FSC.PARMS<1,13>=VOUT<10>       ; * JMK12 - OVERAGE PERC
      AFS.FSC.PARMS<1,14>=VOUT<11>       ; * JMK12 - DELAY DAYS
      AFS.FSC.PARMS<1,15>=VOUT<12>       ; * JMK12 - SHIFT DATE
      AFS.FSC.PARMS<1,16>=VOUT<13>       ; * JMK12 - NATL FUEL PRICE
      AFS.FSC.PARMS<1,17>=VOUT<14>       ; * JMK12 - CONV FUEL PRICE
      AFS.FSC.PARMS<1,18>=VOUT<15>       ; * JMK12 - BEGIN EFF DATE
      AFS.FSC.PARMS<1,19>=VOUT<16>       ; * JMK12 - FORMULA
      AFS.FSC.PARMS<1,20>=VOUT<17>       ; * JMK12 - MODE
      AFS.FSC.PARMS<1,21>=VOUT<18>       ; * JMK12 - BASE FUEL PRICE
      AFS.FSC.PARMS<1,22>=VOUT<19>       ; * JMK12 - NATL INDEX NAME
      AFS.FSC.PARMS<1,23>=VOUT<20>       ; * JMK12 - MAX SETUP PRICE
      AFS.FSC.PARMS<1,24>=VOUT<21>       ; * JMK50 - AFS CONTRACT FSC
      IF LOGISTICS THEN                  ; * JMK12
*        BENCH.FSC.AMT=VOUT<1>  ; * JMK12
*        BENCH.FSC.MIN=VOUT<2>  ; * JMK12
*        BENCH.FSC.PERC=VOUT<3> ; * JMK12
         BENCH.FSC.AMT=AFS.FSC.PARMS<1,7>          ; * JMK12
         BENCH.FSC.MIN=AFS.FSC.PARMS<1,8>          ; * JMK12
         BENCH.FSC.PERC=AFS.FSC.PARMS<1,9>         ; * JMK12
*        IF CARR.ONLY.FSC='Y' THEN       ; * JMK12 ; * JMK36
         IF CARR.ONLY.FSC='Y' OR CARR.ONLY.FSC='C' THEN      ; * JMK12 ; * JMK36
            BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>     ; * JMK12
            BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>     ; * JMK12
            BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>    ; * JMK12
         END                             ; * JMK12
         IF CARR.ONLY.FSC='O' THEN       ; * JMK36
            BENCH.FSC.AMT=AFSO.BENCH.FSC.PARMS<1,7>          ; * JMK36
            BENCH.FSC.MIN=AFSO.BENCH.FSC.PARMS<1,8>          ; * JMK36
            BENCH.FSC.PERC=AFSO.BENCH.FSC.PARMS<1,9>         ; * JMK36
            IF CONTR.FSC.PARMS<1,24>[1,2]#'AF' THEN          ; * JMK50
               BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>  ; * JMK50
               BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>  ; * JMK50
               BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>           ; * JMK50
            END                          ; * JMK50
         END                             ; * JMK36
         IF NO.LOG.FSC THEN BENCH.FSC.AMT=0        ; * Set to Zero
      END
      IF CONTR.FSC.AMT+BENCH.FSC.AMT+0#0 THEN
         LINE+=1
         IF CONTR.FSC.MIN THEN
            WHY:=@(3,LINE):'Fuel Sur Charge Min':NULL
         END ELSE
            WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% Fuel Sur Charge':NULL
         END
         WHY:=@(35,LINE):CONTR.FSC.AMT'R26#8':NULL
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>='FSC'        ; * JMK06
         DTL.VOUT<2,NVAL+1>=''           ; * JMK06
         DTL.VOUT<3,NVAL+1>=''           ; * JMK06
         DTL.VOUT<4,NVAL+1>=''           ; * JMK06
         DTL.VOUT<5,NVAL+1>=CONTR.FSC.AMT          ; * JMK06
         IF LOGISTICS THEN
            BEGIN CASE
               CASE NO.LOG.FSC
                  WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'Logistics FSC = N':NULL
               CASE BENCH.FSC.MIN
                  WHY:=@(45,LINE):'Fuel Sur Charge Min':NULL
               CASE 1
                  WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% Fuel Sur Charge':NULL
            END CASE
            WHY:=@(73,LINE):BENCH.FSC.AMT'R26#7':NULL
         END
      END
*******************************************************************
1275: * Assessorial Charge Calculations
*******************************************************************
      TOT.CONTR.MISC.CHG=0
      TOT.BENCH.MISC.CHG=0
      MISC.CHG.TIMES=DCOUNT(MISC.CHG<1>,@VM)
      FOR MISC.CHG.COUNT=1 TO MISC.CHG.TIMES
         LINE=LINE+1
         CUR.MISC.CHG.CODE=MISC.CHG<1,MISC.CHG.COUNT>
         LOCATE CUR.MISC.CHG.CODE IN LI.CODES<1> SETTING POS THEN
            CUR.MISC.CHG.DESC=LI.CODES<2,POS>
         END ELSE
            CUR.MISC.CHG.DESC='Not On File'
         END
         CUR.CONTR.MISC.CHG=MISC.CHG<2,MISC.CHG.COUNT>
         IF CUR.CONTR.MISC.CHG='CWT' THEN          ; * JMK02
            LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN      ; * JMK02
               CUR.CONTR.MISC.CWT.RATE=DAUDIT.TABLES<49,MPOS> 'R26'    ; * JMK02
               CUR.CONTR.MISC.CWT.MIN=DAUDIT.TABLES<50,MPOS>           ; * JMK02
               CUR.CONTR.MISC.CWT.MAX=DAUDIT.TABLES<51,MPOS>           ; * JMK02
               CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE  ; * JMK02
               CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')
               IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN          ; * JMK02
                  IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN  ; * JMK02
                     CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN         ; * JMK02
                  END                    ; * JMK02
               END                       ; * JMK02
               IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN          ; * JMK02
                  IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN  ; * JMK02
                     CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX         ; * JMK02
                  END                    ; * JMK02
               END                       ; * JMK02
            END ELSE                     ; * JMK02
               CUR.CONTR.MISC.CHG=0      ; * JMK02
            END                          ; * JMK02
            IF JL.FLAG THEN              ; * JMK48
               LOCATE CUR.MISC.CHG.CODE IN JL.DAUDIT.TABLES<26> SETTING JL.MPOS THEN       ; * JMK48
                  CUR.CONTR.MISC.CWT.RATE=JL.DAUDIT.TABLES<49,JL.MPOS> 'R26'     ; * JMK48
                  CUR.CONTR.MISC.CWT.MIN=JL.DAUDIT.TABLES<50,JL.MPOS>  ; * JMK48
                  CUR.CONTR.MISC.CWT.MAX=JL.DAUDIT.TABLES<51,JL.MPOS>  ; * JMK48
                  CUR.CONTR.MISC.CHG=TOT.WEIGHT *CUR.CONTR.MISC.CWT.RATE         ; * JMK48
                  CUR.CONTR.MISC.CHG=OCONV(CUR.CONTR.MISC.CHG,'MR0')   ; * JMK48
                  IF CUR.CONTR.MISC.CWT.MIN+0 # 0 THEN       ; * JMK48
                     IF CUR.CONTR.MISC.CHG < CUR.CONTR.MISC.CWT.MIN THEN         ; * JMK48
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MIN      ; * JMK48
                     END                 ; * JMK48
                  END                    ; * JMK48
                  IF CUR.CONTR.MISC.CWT.MAX+0 # 0 THEN       ; * JMK48
                     IF CUR.CONTR.MISC.CHG > CUR.CONTR.MISC.CWT.MAX THEN         ; * JMK48
                        CUR.CONTR.MISC.CHG=CUR.CONTR.MISC.CWT.MAX      ; * JMK48
                     END                 ; * JMK48
                  END                    ; * JMK48
               END ELSE                  ; * JMK48
                  CUR.CONTR.MISC.CHG=0   ; * JMK48
               END                       ; * JMK48
            END                          ; * JMK48
         END ELSE                        ; * JMK02
            LEN.CHG=LEN(CUR.CONTR.MISC.CHG)
            IF CUR.CONTR.MISC.CHG[LEN.CHG,1]='%' THEN
               PERC=CUR.CONTR.MISC.CHG[1,LEN.CHG-1]
               CUR.CONTR.MISC.CHG=OCONV(TOT.CONTR.AMT*PERC/100,'MR0')
            END
         END                             ; * JMK02
         ACC.ARRAY<2,MISC.CHG.COUNT>=CUR.CONTR.MISC.CHG      ; * JMK27
         TOT.CONTR.MISC.CHG+=CUR.CONTR.MISC.CHG
         IF LOGISTICS THEN
            CUR.BENCH.MISC.CHG=MISC.CHG<3,MISC.CHG.COUNT>
            IF CUR.BENCH.MISC.CHG='CWT' THEN       ; * JMK02
               LOCATE CUR.MISC.CHG.CODE IN DAUDIT.TABLES<26> SETTING MPOS THEN   ; * JMK02
                  CUR.BENCH.MISC.CWT.RATE=DAUDIT.TABLES<52,MPOS> 'R26'           ; * JMK02
                  CUR.BENCH.MISC.CWT.MIN=DAUDIT.TABLES<53,MPOS>        ; * JMK02
                  CUR.BENCH.MISC.CWT.MAX=DAUDIT.TABLES<54,MPOS>        ; * JMK02
                  CUR.BENCH.MISC.CHG=TOT.WEIGHT *CUR.BENCH.MISC.CWT.RATE         ; * JMK02
                  CUR.BENCH.MISC.CHG=OCONV(CUR.BENCH.MISC.CHG,'MR0')
                  IF CUR.BENCH.MISC.CWT.MIN+0 # 0 THEN       ; * JMK02
                     IF CUR.BENCH.MISC.CHG < CUR.BENCH.MISC.CWT.MIN THEN         ; * JMK02
                        CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MIN      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
                  IF CUR.BENCH.MISC.CWT.MAX+0 # 0 THEN       ; * JMK02
                     IF CUR.BENCH.MISC.CHG > CUR.BENCH.MISC.CWT.MAX THEN         ; * JMK02
                        CUR.BENCH.MISC.CHG=CUR.BENCH.MISC.CWT.MAX      ; * JMK02
                     END                 ; * JMK02
                  END                    ; * JMK02
               END ELSE                  ; * JMK02
                  CUR.BENCH.MISC.CHG=0   ; * JMK02
               END                       ; * JMK02
            END ELSE                     ; * JMK02
               IF CUR.BENCH.MISC.CHG[LEN.CHG,1]='%' THEN
                  PERC=CUR.BENCH.MISC.CHG[1,LEN.CHG-1]
                  CUR.BENCH.MISC.CHG=OCONV(TOT.BENCH.AMT*PERC/100,'MR0')
               END
            END                          ; * JMK02
            ACC.ARRAY<3,MISC.CHG.COUNT>=CUR.BENCH.MISC.CHG   ; * JMK27
            TOT.BENCH.MISC.CHG+=CUR.BENCH.MISC.CHG
         END
         WHY:=@(03,LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.MISC.CHG.DESC
         WHY:=@(35,LINE):CUR.CONTR.MISC.CHG'R26#8'
         NVAL=DCOUNT(DTL.VOUT<1>,@VM)    ; * JMK06
         DTL.VOUT<1,NVAL+1>=CUR.MISC.CHG.CODE      ; * JMK06
         DTL.VOUT<2,NVAL+1>=''           ; * JMK06
         DTL.VOUT<3,NVAL+1>=''           ; * JMK06
         DTL.VOUT<4,NVAL+1>=''           ; * JMK06
         DTL.VOUT<5,NVAL+1>=CUR.CONTR.MISC.CHG     ; * JMK06
         DTL.VOUT<6>=ICONV((TOT.CONTR.DISC/10000),'MR0')     ; * JMK06
         IF LOGISTICS THEN
            WHY:=@(45,LINE):CUR.MISC.CHG.CODE'L(#4- )':CUR.MISC.CHG.DESC
            WHY:=@(73,LINE):CUR.BENCH.MISC.CHG'R26#7'
         END
      NEXT MISC.CHG.COUNT
*******************************************************************
* Print Grand Totals
*******************************************************************
*CRT @(0,14):'Press Break for Total Discount Calculation': ; INPUT NUL:
      GTOT.CONTR.AMT=TOT.CONTR.AMT+CONTR.FSC.AMT+TOT.CONTR.MISC.CHG
      IF LOGISTICS THEN
         GTOT.BENCH.AMT=TOT.BENCH.AMT+BENCH.FSC.AMT+TOT.BENCH.MISC.CHG
      END
*********************************************************
* Adjust Benchmark Amount if Less than Contract Amount
*********************************************************
      IF LOGISTICS AND GTOT.BENCH.AMT < GTOT.CONTR.AMT THEN
         GTOT.BENCH.AMT=GTOT.CONTR.AMT
         LINE+=1
         WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
      END
      IF LOGISTICS THEN
         IF BILL.DATE GE "12167" THEN
*DF            IF CARRIER = "00050" OR CARRIER = "00212"  OR CARRIER = "00004"  OR CARRIER = "00114" THEN
*           IF CLIENT = "00882" OR CLIENT = "00923" OR CLIENT = "00943" OR CLIENT = "01025" THEN     ; * JMK53
            IF CLIENT = "00882" OR CLIENT = "00923" OR CLIENT = "00943" OR CLIENT = "01025" OR CLIENT = "01769" THEN     ; * JMK53
               IF TOT.WEIGHT GE "700" THEN
                  IF (GTOT.BENCH.AMT-GTOT.CONTR.AMT) GT "3670" THEN
                     LINE+=1
                     WHY:=@(45,LINE):"BENCHMARK SUBTOTAL          ":NULL
                     WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
                     DIFF.LOG=3670-(GTOT.BENCH.AMT-GTOT.CONTR.AMT)
                     GTOT.BENCH.AMT=GTOT.CONTR.AMT+3670
                     LINE+=1
                     WHY:=@(45,LINE):"ADJ! Max consulting of 36.70":NULL
                     WHY:=@(73,LINE):DIFF.LOG'R26#7':NULL
                  END
               END
*DF            END
            END
         END
      END
      LINE=LINE+1
      WHY:=@(3,LINE):'CONTRACT TOTAL':NULL
      WHY:=@(35,LINE):GTOT.CONTR.AMT'R26#8':NULL
      IF LOGISTICS THEN
         WHY:=@(45,LINE):'BENCHMARK TOTAL':NULL
         WHY:=@(73,LINE):GTOT.BENCH.AMT'R26#7':NULL
      END
*
*NPR02
      IF IOT = "T" THEN
         TP.AMT.TAB<TP.CNT> = GTOT.CONTR.AMT
      END
*NPR02
*
*DF     IF LOGISTICS THEN
*DF        LOGISTICS.AMT=GTOT.BENCH.AMT-GTOT.CONTR.AMT
*DF     END ELSE
*DF        LOGISTICS.AMT=0
*DF     END
*DF     DIFFERENCE=GTOT.CONTR.AMT-TOT.CHARGE
*DF     IF ABS(DIFFERENCE) < 2 THEN
*DF        AMOUNT.TO.PAY=TOT.CHARGE
*DF        OVERCHARGE.AMT=0
*DF     END ELSE
*DF        IF DIFFERENCE < 0 THEN ;* Only Pay Contract Amt
*DF           AMOUNT.TO.PAY=GTOT.CONTR.AMT
*DF           OVERCHARGE.AMT=ABS(DIFFERENCE)
*DF        END ELSE
*DF           AMOUNT.TO.PAY=TOT.CHARGE
*DF           OVERCHARGE.AMT=0
*DF        END
*DF     END
*
      RETURN                             ; *NPR02
*
8000: *** Define VOUT Return Variable
*
      VOUT=''
      VOUT<1>=ERROR
      VOUT<2>=AUDIT
      VOUT<3>=BILL.DATE
      VOUT<4>=TRANS.MODE
      VOUT<5>=PIECES
      VOUT<6>=TOT.WEIGHT
      VOUT<7>=AIR.MISC.CHARGE            ; * Not Used -> Passed Through
      VOUT<8>=GTOT.CONTR.AMT
      IF LOGISTICS THEN
         VOUT<9>=GTOT.BENCH.AMT
      END ELSE
         VOUT<9>=GTOT.CONTR.AMT
      END
*DF      VOUT<8>=AMOUNT.TO.PAY
*DF      VOUT<9>=AMOUNT.TO.PAY+OVERCHARGE.AMT+LOGISTICS.AMT
      VOUT<10>=CARRIER
      VOUT<11>=CLIENT
      VOUT<12>=IOT
      VOUT<13,1>=ORIG.ZIP
      VOUT<13,2>=ORIG.CITY
      VOUT<13,3>=ORIG.STATE
      VOUT<14,1>=DEST.ZIP
      VOUT<14,2>=DEST.CITY
      VOUT<14,3>=DEST.STATE
      VOUT<17>=MISROUTE
      VOUT<18>=CLASS.WGT<1>              ; * Class Details (Mv)
      VOUT<19>=CLASS.WGT<2>              ; *  Weight Details (Mv)
      VOUT<20>=REDRAW.SCR                ; * Flag to tell calling program to redraw scr
*DF      VOUT<25>=CC
*DF       VOUT<25>=TOT.CHARGE
      IF TESTING THEN
         CRT@(0,22):'TESTING Mode - Press <ENTER> to Continue: ':
         INPUT NUL:
      END
      VOUT<21>=MISC.CHG<1>
      VOUT<22>=MISC.CHG<2>
      VOUT<23>=MISC.CHG<3>
      VOUT<24>=WHY
*DF      VOUT<26>=LOGISTICS.AMT
*DF      VOUT<27>=OVERCHARGE.AMT
      VOUT<28>=FAK
      VOUT<29>=ZIP.VOUT<2>
      VOUT<40>=DTL.VOUT<1>               ; * JMK06; * JMK07; * JMK08
      VOUT<41>=DTL.VOUT<2>               ; * JMK06; * JMK07; * JMK08
      VOUT<42>=DTL.VOUT<3>               ; * JMK06; * JMK07; * JMK08
      VOUT<43>=DTL.VOUT<4>               ; * JMK06; * JMK07; * JMK08
      VOUT<44>=DTL.VOUT<5>               ; * JMK06; * JMK07; * JMK08
      VOUT<45>=DTL.VOUT<6>               ; * JMK06; * JMK07; * JMK08
      VOUT<46>=CONTR.FSC.PARMS           ; * JMK12
      VOUT<47>=BENCH.FSC.PARMS           ; * JMK12
      VOUT<48>=AFS.FSC.PARMS             ; * JMK12
      VOUT<49>=TRANSIT.TIME              ; * JMK16
      VOUT<50>=ORIG.DIR.FLG              ; * JMK16
      VOUT<51>=DEST.DIR.FLG              ; * JMK16
      VOUT<52>=COMB.DIR.FLG              ; * JMK16
      VOUT<53>=ORIG.TERM.NAME            ; * JMK18
      VOUT<54>=ORIG.TERM.CODE            ; * JMK18
      VOUT<55>=ORIG.TERM.ADR1            ; * JMK18
      VOUT<56>=ORIG.TERM.ADR2            ; * JMK18
      VOUT<57>=ORIG.TERM.CITY            ; * JMK18
      VOUT<58>=ORIG.TERM.ST              ; * JMK18
      VOUT<59>=ORIG.TERM.ZIP             ; * JMK18
      VOUT<60>=ORIG.TERM.PHONE           ; * JMK18
      VOUT<61>=ORIG.TERM.TPHONE          ; * JMK18
      VOUT<62>=ORIG.TERM.FAX             ; * JMK18
      VOUT<63>=ORIG.TERM.EMAIL           ; * JMK18
      VOUT<64>=ORIG.TERM.CNAME           ; * JMK18
      VOUT<65>=ORIG.TERM.CTITLE          ; * JMK18
      VOUT<66>=DEST.TERM.NAME            ; * JMK18
      VOUT<67>=DEST.TERM.CODE            ; * JMK18
      VOUT<68>=DEST.TERM.ADR1            ; * JMK18
      VOUT<69>=DEST.TERM.ADR2            ; * JMK18
      VOUT<70>=DEST.TERM.CITY            ; * JMK18
      VOUT<71>=DEST.TERM.ST              ; * JMK18
      VOUT<72>=DEST.TERM.ZIP             ; * JMK18
      VOUT<73>=DEST.TERM.PHONE           ; * JMK18
      VOUT<74>=DEST.TERM.TPHONE          ; * JMK18
      VOUT<75>=DEST.TERM.FAX             ; * JMK18
      VOUT<76>=DEST.TERM.EMAIL           ; * JMK18
      VOUT<77>=DEST.TERM.CNAME           ; * JMK18
      VOUT<78>=DEST.TERM.CTITLE          ; * JMK18
      VOUT<79>=ACC.ARRAY<1>              ; * JMK27 - MV ACCESSORIAL CODES
      VOUT<80>=ACC.ARRAY<2>              ; * JMK27 - MV ACCESSORIAL CONTRACT AMTS
      VOUT<81>=ACC.ARRAY<3>              ; * JMK27 - MV ACCESSORIAL BENCH AMTS
      VOUT<82>=CARR.DATA.DATE            ; * JMK29
      VOUT<83>=AFSO.BENCH.FSC.PARMS      ; * JMK46
      VOUT<84>=TOT.CONTR.GROSS           ; * JMK52
      VOUT<85>=TOT.BENCH.GROSS           ; * JMK52
*

      RETURN
*
9000:
*
      IF SET.VOUT THEN GOSUB 8000
* JMK42      CALL RWS.SVC.NEIL('CLOSE','',SOCKETHANDLE)   ; * JMK42
*
      RETURN
