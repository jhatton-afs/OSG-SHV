      SUBROUTINE UPD.SQL.FBDUP.SUB(VIN,VOUT,CLIENT.REC,DIV.REC,BILL.REC)
***********************************************************************
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.FBDUP.SUB' ; UPL.VOUT = ''        ; * NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
* ANALYZE BILLS ACTED UPON BY AUDITORS
* COPYRIGHT (C) AFS LOGISTICS, LLC., 2002
*
* AUTHOR : OWEN HOLMAN
* DATE   : JANUARY 2002
*************************************************************************
* 040908 - JMK01 - C080617 - TL FSC estimation
* 042408 - JMK02 - Send UPS Bills without any amounts for payment matching
* 042708 - JMK03 - Send Cleared Date for Service Evaluation
* 050808 - JMK04 - C081128 - Modilfy BLS new filed 'FedEx Num of Pcs' to include all modes piece count
* 061912 - JMK05 - Choose development SQL server if not production server AFS
*************************************************************************
!
* INCLUDE THE ODBC DEFINITIONS
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK05
      SVR.NAME=SVR.VOUT<1>               ; * JMK05

      USER=VIN<1>
      CLIENT.ID=VIN<2>
      BILL.ID=VIN<3>
      SEQ=FIELD(BILL.ID,'*',3)
      IF SEQ=0 THEN RETURN

      FORM = "T##########"
      DASH = "----------"
      EXPECT = ""
      NULL=""
      TOT.NUM.BILLS=0


      ERROR.CNT=0
10:   ERRORS=''

      GOSUB SETUP.SQL

* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE
      UPS.EBILL=0
      PRO=FIELD(BILL.ID,'*',2)
      UPS.FDATE=ICONV(PRO[8,2]:'/':PRO[10,2]:'/':PRO[12,2],'D')
      BEGIN CASE
         CASE CLIENT.ID='00244' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00841' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00857' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00962' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01292' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='01310' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01352' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01393' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='01640' AND UPS.FDATE < ICONV('03/24/08','D')
         CASE 1
            UPS.EBILL=(BILL.REC<53>="EBILL.IMPORT.NEW")
      END CASE
*     IF UPS.EBILL THEN GOTO THE.END     ; * JMK02
      CARRIER.ID=FIELD(BILL.ID,'*',1)
      PRO=FIELD(BILL.ID,'*',2)
      PRO:='_':SEQ                       ; * Need this to retain uniqueness for record keys
      IF BILL.REC<37>='' THEN
         ERRORS<-1>='Missing Process Date for ':BILL.ID
         RETURN TO THE.END
      END
      PROC.DT=BILL.REC<37>'D4/'
      SQL.UNIQUEKEY=CLIENT.ID:CARRIER.ID:PRO:PROC.DT[7,4]:PROC.DT[1,2]:PROC.DT[4,2]
      SQL.CLIENTNO=CLIENT.ID+0
      SQL.DIVNO=BILL.REC<9>
      SQL.ACTUALCHRG=BILL.REC<8>'R26'
      SQL.PROCESSDATE=BILL.REC<37>'D4/'

*      FN = "SQLExecute"
*      STATUS = SQLEXECUTE(DELDUPENV)
*      STMTENV=DELDUPENV
*      GOSUB CKSTMTENV

      FN = "SQLExecute"
      STATUS = SQLEXECUTE(UPDDUPENV)
      STMTENV=UPDDUPENV
      GOSUB CKSTMTENV

*     IF UPS.EBILL THEN GOTO THE.END     ; * JMK02

THE.END:***
*     END OF PROGRAM
*
* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1>='UPD.SQL.Group@afs.net'
            MVIN<4>='AFS_UPD.SQL.FBDUP.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP

SETUP.SQL:*
!
* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLALLOCENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLALLOCCONNECT(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*
*     SQLSVR.INFO=OCONV('SQLSVR','TFB.TABLES;X;;1')          ; * JMK05
*     SOURCE=FIELD(SQLSVR.INFO<1>,' ',1)           ; * JMK05
*     UID=FIELD(SQLSVR.INFO<1>,' ',2)    ; * JMK05
*     PWD=FIELD(SQLSVR.INFO<1>,' ',3)    ; * JMK05
      BEGIN CASE                         ; * JMK05
         CASE SVR.NAME='AFS'             ; * JMK05
            SOURCE='PRODODS'             ; * JMK05
            UID="uv_sql"                 ; * JMK05
            PWD="4@gAbreg"               ; * JMK05
         CASE 1                          ; * JMK05
            SOURCE='DEVODS'              ; * JMK05
            UID="uv_sql"                 ; * JMK05
            PWD="4@gAbreg"               ; * JMK05
      END CASE                           ; * JMK05
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLCONNECT(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV

UPDATE.SQL.SHIPMENT:*
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
      FN = "SQLAllocStmt"
      STATUS = SQLALLOCSTMT(CONENV,UPDDUPENV)
      GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
      OPT.STR = STR(' ?,',5)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdDuplicateShipment (":OPT.STR:")}"           ; * 64 PLACEHOLDERS

      ROWNUM = 0
      FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(UPDDUPENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=UPDDUPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDDUPENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENTNO) ; STMTENV=UPDDUPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDDUPENV, 3, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.DIVNO) ; STMTENV=UPDDUPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDDUPENV, 4, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.PROCESSDATE) ; STMTENV=UPDDUPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDDUPENV, 5, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ACTUALCHRG) ; STMTENV=UPDDUPENV ; GOSUB CKSTMTENV

      FN = "SQLPrepare"
      STATUS = SQLPREPARE(UPDDUPENV, INST1)
      STMTENV=UPDDUPENV
      ENVSRC='UPDSHIP'
      GOSUB CKSTMTENV

DELETE.SQL.SHIPMENT:*
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
      FN = "SQLAllocStmt"
      STATUS = SQLALLOCSTMT(CONENV,DELDUPENV)
      GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
      OPT.STR = STR(' ?,',1)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_DelDuplicateShipment (":OPT.STR:")}"           ; * 64 PLACEHOLDERS

      ROWNUM = 0
      FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(DELDUPENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=DELDUPENV ; GOSUB CKSTMTENV

      FN = "SQLPrepare"
      STATUS = SQLPREPARE(DELDUPENV, INST1)
      STMTENV=DELDUPENV
      ENVSRC='DELSHIP'
      GOSUB CKSTMTENV

      RETURN

CKCONENV:

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBDUP.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN

CKSTMTENV:
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBDUP.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
