*=====================================================================
*
*  PROGRAM   : FB.AUDIT.1.1  - LTL Auto Audit Setup Program
*
*  PURPOSE   :
*
*  PROGRAMMER:  JIM T. ROW
*
*======================================================================
* PICK COMPILER INFORMATION
* ~~~~~~~~~~~~~~~~~~~~~~~~~
*  ~PICK-FILE: FBBP
*  ~PICK-RECORD: FB.AUDIT.1.1
*
*  ~ PICK-FILE: BP
*  ~ PICK-RECORD: JIM
*  ~COMPILE-REC: YES
*  ~AUTO-ANSWER: YES
*  ~RUN-REC: YES
*
*======================================================================
*
*   DATE     USER  COMMENT
* --------   ----  -------
* 10/10/96 - JTR - MDLW95 Removed.  Not needed, AFS95 (Same Thing)
* 033105 - JMK01 - ADD CLIENT AND CARRIER FOR ARTCO BELL AND CRETE
*
*======================================================================
*   COPYRIGHT (C) 1995,96 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED
*       ----------------------------------------------------
*  This program is sole property of AFS Logistics, LLC (AUTOMATED
*  FREIGHT SYSTEMS) and may not be used, copied, or modified without
*  the express written consent of Brian Barker of AFS Logistics, LLC.
*======================================================================

      $INCLUDE PROG.ADMIN INC_OPTIONS
      $INCLUDE FILE.DEFS INC_CLIENTS

*-------------------------------------------------
*                Local equates
*-------------------------------------------------


      EQU TRUE TO 1
      EQU FALSE TO 0
      EQU WRITE.DATA TO TRUE             ; * TRUE = Write data to appropriate files
      ; * FALSE = Don't write data.. In Test Mode
      EQU RESTRICT.ACCESS TO TRUE

      EQU PCMILLER.READ.FILE TO 1        ; * Used in Attr 4

      EQU AIRBRN TO "AIRBRN"             ; * Make sure to make changes in FB.AUDIT.1
      EQU LTLFAK TO "LTLFAK"             ; * Make sure to make changes in FB.AUDIT.1
      EQU YES TO "Y"
      EQU NO TO "N"
      EQU PARTIAL TO "P"
      EQU N.DISCOUNT.STR TO "10,000"
      EQU N.DISCOUNT TO 10000
      EQU Y.DISCOUNT.STR TO "20,000"
      EQU Y.DISCOUNT TO 20000

      EQU CLIENT.DISABLE.FILE TO 'DISABLE'         ; * Make sure to make changes in FB.AUDIT.1

*
* Highlighting Effects
*
      EQU REVON TO CHAR(14)              ; * Reverse Text ON
      EQU REVOFF TO CHAR(15)             ; * Reverse Text OFF

      EQU DISABLED.MSG TO '[':REVON:'DISABLED':REVOFF:']'
      EQU ENABLED.MSG TO '[ENABLED ]'

*
* Menu option Flags
*
      EQU DISABLED TO 0                  ; * Program set! Pgrmr should not use these!
      EQU ENABLED TO 100                 ; * Program set! Pgrmr should not use these!

*
* Menu options flags...Programmer uses these...
*
      EQU DISABLE TO 100                 ; * Will Clear line and disable if not disabled
      EQU ENABLE TO 200                  ; * Will Enable and Draw if not enabled
      EQU REFRESH TO 300                 ; * Will Refresh if Enabled
      EQU CLEAR TO 400                   ; * Will Clear line and enable
      EQU INIT TO 500                    ; * Will Zero the variables for that line

      EQU NUM.OPTIONS TO 13

*
* Line index equates - Used to index data created with
* EXTRACT.DATA.LINE
*
      EQU RATE.LV TO 1
      EQU PLUS.PERC TO 2
      EQU FAK TO 3
      EQU CONTR.PERC TO 4
      EQU BENCH.PERC TO 5
      EQU CONTR.MIN TO 6
      EQU BENCH.MIN TO 7
      EQU MIN.WEIGHT TO 8
      EQU MAX.WEIGHT TO 9
      EQU DISCOUNTS TO 10
      EQU LAST.FIELD TO 11

*
* Table/Array equates used to Store/Extract data into/from RATE.REC
*
      EQU DEF.IR TO 1
      EQU DEF.OR TO 2
      EQU DEF.IA TO 3
      EQU DEF.OA TO 4

*
* HELP Box display routine Coordinates
*
      EQU HLP.X TO 0
      EQU HLP.Y TO 3
      EQU HLP.W TO 30
      EQU HLP.H TO 18

*
* Menu Options...
*
      OPTIONS = 0
      OPTIONS.STATE=0

*
* Initialize app variables
*
      PROMPT''
      PROG.NAME='FB.AUDIT.1.1'
      PROG.DESC='LTL Carrier Audit Profile Setup'
      PACK.NAME='LTL Audit Setup'
      CO.NAME='AFS Logistics, LLC'
       UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.AUDIT.1.1' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
       CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/23/2010
      PORT.NUM = SYSTEM(19)              ; * Port user is sitting on
*    USER.NAME = OCONV(PORT.NUM,'MCU')    ;* User's Name
      CALL GET.USER(USER.NAME)
      CALL GET.USER(USER.NAME)
      ERR.MSG = ''

      WIDTH = 80
      CTR = INT(WIDTH/2)
      PAGE.SIZE = 15


*
* Init variables
*
      CLIENT.NAME='' ; CLIENT.ID=0 ; NEW.CLIENT.ID=0
      CLIENT.ENABLED = FALSE
      MAT CLIENT.REC = ''
      DIM TCLIENT.REC(CLIENT.REC.SIZE)
      MAT TCLIENT.REC = ''
      CARRIER.NAME='' ; CARRIER.ID=0 ; CARRIER.CITY='' ; CARRIER.STATE=''
      CARRIER.REC=''
      NUM.ZIPS = 0

      RATE.REC = ''
      AUDIT.REC = ''
      DATE.POS = 0                       ; * Extraction/Insertion Variable
      DATA.LINE = 0                      ; * Table Extraction/Insert temp storage
      GOSUB CLEAR.VARIABLES
      OPTIONS<1> = REFRESH
      GOSUB INIT.HELP

*
* Table entry values
*
      CLASSES='ACT':@VM:50:@VM:55:@VM:60:@VM:65:@VM:70:@VM:77.5:@VM:85:@VM:92.5:@VM:100:@VM:110:@VM:125:@VM:150:@VM:175:@VM:200:@VM:250:@VM:300:@VM:400:@VM:500
*     RATE.LEVELS='DISABLE':@VM:'MDLW95':@VM:'CZAR94':@VM:'ARFW500':@VM:'AFS95'
      RATE.LEVELS='DISABLE':@VM:'CZAR94':@VM:'ARFW500':@VM:'AFS95'
      YES.NO='Y':@VM:'N'

*
* Init support routines
*
      ASK.FN.MSG=''
      ASK.FN.MASK=''

      FAILURE = FALSE
      EXIT.IT = FALSE

*
* Temp storage User Entry variables
*
      NEW.CARRIER.ID = 0
      NEW.CLIENT.ID = 0
      NEW.ROUT.ZIP = 0
      NEW.BEG.EFF.DATE = 0
      NEW.END.EFF.DATE = 0

      EFF.DATE.ENABLED = FALSE
      ROUT.ZIP.ENABLED = FALSE
      ALL.ZIPS = 0
      STATE.NUM = 0


      GOSUB INIT.SCREEN

*
* Check for Restricted Access
*
      IF RESTRICT.ACCESS THEN
         BEGIN CASE
*
* Authorized Users
*
            CASE USER.NAME = 'JIM'
            CASE USER.NAME = 'OWEN'
            CASE USER.NAME = 'DARLENE'

*
* Restrict the other MoFo's
*
            CASE 1
               CALL FB.PRINT.CENT(1,80,10,'YOU DO NOT HAVE ACCESS TO THIS APPLICATION!')
               CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
               CALL FB.PRINT.CENT(1,80,14,'For Help See Jim, Owen, or Darlene.')
               CALL ELINE("ACCESS DENIED!")
               STOP
         END CASE
      END





*--------------------------------------------------------
*             Open general files
*--------------------------------------------------------

      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN 'DICT','CLIENTS' TO F.DICT.CLIENTS ELSE
         CALL OPEN.ABORT("DICT CLIENTS",PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT("CARRIERS",PROG.NAME)
      END
      OPEN 'DICT','CARRIERS' TO F.DICT ELSE
         CALL OPEN.ABORT("DICT CARRIERS",PROG.NAME)
      END
      OPEN '','FB.RATE.TABLES' TO F.RATE ELSE
         CALL OPEN.ABORT("FB.RATE.TABLES",PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS THEN
         READ ZIP.REC FROM F.ZIPS,'3.DIGIT' THEN
*
* Remove any ZERO zip codes
*
            NUM.ZIPS = DCOUNT(ZIP.REC<1>, @VM)
            FOR X = 1 TO NUM.ZIPS
               IF ZIP.REC<2,X> = 0 THEN
                  DEL ZIP.REC<1,X>
                  DEL ZIP.REC<2,X>
                  DEL ZIP.REC<3,X>
*                    CALL ELINE('WARNING! - ZERO ZIP REMOVED')
               END
            NEXT X
*
* Count number of legit States (zip code ranges) avail.
*
            NUM.ZIPS = DCOUNT(ZIP.REC<1>, @VM)

         END ELSE
            CALL OPEN.ABORT("READ ZIPS.CODES",PROG.NAME)
         END
      END ELSE
         CALL OPEN.ABORT("ZIPS.CODES",PROG.NAME)
      END

      OPEN 'PCIN' TO F.PCIN ELSE
         CALL OPEN.ABORT("PCIN",PROG.NAME)
      END
      OPEN 'PCOUT' TO F.PCOUT ELSE
         CALL OPEN.ABORT("PCOUT",PROG.NAME)
      END
      OPEN 'FB.MILEAGE' TO F.MILEAGE ELSE
         CALL OPEN.ABORT("FB.MILEAGE", PROG.NAME)
      END
      CALL CHANNEL(CH.NUM)

*---------------------------------------------------
*                  Menu options
*---------------------------------------------------

      CLIENT.ID = ''
      OPTIONS<1>=REFRESH
      OPTIONS.STATE<1>=ENABLED

*---------------------------------------------------
*                Main processing
*---------------------------------------------------

      X=15
      GOSUB SHOW.INTRO
      SLEEP 1

      GOSUB DSP.ENTRY.SCN

      EXIT.IT = FALSE
      LOOP
250:
         GOSUB REFRESH.DISPLAY
         CRT @(0,22):'Enter Selection Number :'
         HELP = "OPTIONS: [PRINT]=Print Current Display [R]=Redraw Screen [EX]=Exit Program"
         MASK = '#'
         CALL GEN.IN(24,22,MASK,'',Q,0,6,'','',2,24,22,1,QI,HELP,0,23)
         QI = OCONV(QI,'MCU')
         CRT @(0,22):@(-4)

300:
         BEGIN CASE
*
* EXit program
*
            CASE QI = 'EX'
               EXIT.IT = TRUE            ; * Exit Application

*
* Print
*
            CASE QI = 'PRINT'
               GOSUB PRINT.LAYOUT

*
* Clear/Redraw screen...
*
            CASE QI = 'R'
               GOSUB DSP.ENTRY.SCN
               FOR Y = 1 TO NUM.OPTIONS
                  IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
               NEXT Y

*
* Handle Menu Options
*
            CASE NUM(QI) AND QI<=NUM.OPTIONS AND QI>0
               IF OPTIONS.STATE<QI> = ENABLED THEN
                  BEGIN CASE
*---------------------------
* 1) Client Number/Name
*---------------------------
                     CASE QI='1'
                        GOSUB INPUT.CLIENT
                        OPTIONS<1>=REFRESH
                        OPTIONS<10>=REFRESH
                        IF NOT(FAILURE) AND NEW.CLIENT.ID # CLIENT.ID THEN
                           IF CLIENT.ID > 0 THEN
                              GOSUB SAVE.AUDIT.REC
                              GOSUB SAVE.RATE.REC
                           END
                           CLIENT.ID = NEW.CLIENT.ID
                           GOSUB LOAD.CLIENT.DESC
                           GOSUB CLIENT.ID.CHANGED
                        END

*---------------------------
* 2) Carrier Number/Name
*---------------------------
                     CASE QI='2'
                        GOSUB INPUT.CARRIER
                        OPTIONS<2>=REFRESH
                        OPTIONS<11>=REFRESH
                        IF NOT(FAILURE) AND NEW.CARRIER.ID # CARRIER.ID THEN
                           IF CARRIER.ID > 0 THEN
                              GOSUB SAVE.AUDIT.REC
                              GOSUB SAVE.RATE.REC
                           END
                           CARRIER.ID = NEW.CARRIER.ID
                           GOSUB LOAD.CARRIER.DESC
                           GOSUB CARRIER.ID.CHANGED
                        END

*---------------------------
* 3) Routing Zip
*---------------------------
                     CASE QI='3'
                        GOSUB INPUT.ROUT.ZIP
                        OPTIONS<3>=REFRESH
                        OPTIONS<12>=REFRESH
                        IF NOT(EXIT.IT) AND ROUT.ZIP.CHANGED THEN
                           IF NEW.ROUT.ZIP # ROUT.ZIP THEN
                              IF SAVE.ROUT.ZIP AND ROUT.ZIP THEN
                                 GOSUB SAVE.RATE.REC
                              END
                              ROUT.ZIP = NEW.ROUT.ZIP
                           END
                           GOSUB ROUT.ZIP.CHANGED
                        END

*---------------------------
* 4) Effective Dates
*---------------------------
                     CASE QI='4'
                        GOSUB INPUT.EFF.DATE
                        OPTIONS<4>=REFRESH
                        OPTIONS<13>=REFRESH
                        IF NOT(EXIT.IT) AND DATE.CHANGED THEN
                           IF NEW.BEG.EFF.DATE # BEG.EFF.DATE THEN
                              IF SAVE.EFF.DATE AND BEG.EFF.DATE THEN
                                 GOSUB SAVE.RATE.REC
                              END
                              BEG.EFF.DATE = NEW.BEG.EFF.DATE
                              END.EFF.DATE = NEW.END.EFF.DATE
                           END
                           GOSUB BEG.EFF.DATE.CHANGED
                        END

*---------------------------
* 5) Valid Shipping Points
*---------------------------
                     CASE QI='5'
                        GOSUB INPUT.SHIPPING.POINTS
                        OPTIONS<5>=REFRESH

*---------------------------
* 6) In Interstate
*---------------------------
                     CASE QI='6'
                        DATA.POS = DEF.IR
                        Y.POS = 12
                        GOSUB INPUT.RATE.TABLE
                        OPTIONS<6>=REFRESH

*---------------------------
* 7) Out Interstate
*---------------------------
                     CASE QI='7'
                        DATA.POS = DEF.OR
                        Y.POS = 13
                        GOSUB INPUT.RATE.TABLE
                        OPTIONS<7>=REFRESH

*---------------------------
* 8) In Intrastate
*---------------------------
                     CASE QI='8'
                        DATA.POS = DEF.IA
                        Y.POS = 14
                        GOSUB INPUT.RATE.TABLE
                        OPTIONS<8>=REFRESH

*---------------------------
* 9) Out Intrastate
*---------------------------
                     CASE QI='9'
                        DATA.POS = DEF.OA
                        Y.POS = 15
                        GOSUB INPUT.RATE.TABLE
                        OPTIONS<9>=REFRESH

*---------------------------
* 10) Client Status
*---------------------------
                     CASE QI='10'
                        BEGIN CASE
                           CASE CLIENT.ENABLED = TRUE
                              GOSUB DISABLE.CLIENT
                           CASE 1
                              GOSUB ENABLE.CLIENT
                        END CASE
                        OPTIONS<10>=REFRESH

*---------------------------
* 11) Carrier Status
*---------------------------
                     CASE QI='11'
                        BEGIN CASE
                           CASE AUDIT.REC<11>='DISABLE'
                              GOSUB ENABLE.CARRIER
                           CASE 1
                              GOSUB DISABLE.CARRIER
                        END CASE
                        OPTIONS<11>=REFRESH

*---------------------------
* 12) Routing Zip Status
*---------------------------
                     CASE QI='12'
                        GOSUB GET.ROUT.ZIP.STATUS
                        BEGIN CASE
                           CASE ROUT.ZIP.ENABLED
                              GOSUB DISABLE.ROUT.ZIP
                           CASE 1
                              GOSUB ENABLE.ROUT.ZIP
                        END CASE
                        OPTIONS<12>=REFRESH

*---------------------------
* 13) Eff Date Status
*---------------------------
                     CASE QI='13'
                        GOSUB GET.EFF.DATE.STATUS
                        BEGIN CASE
                           CASE EFF.DATE.ENABLED
                              GOSUB DISABLE.EFF.DATE
                           CASE 1
                              GOSUB ENABLE.EFF.DATE
                        END CASE
                        OPTIONS<13>=REFRESH
                  END CASE
               END ELSE
                  CALL ELINE('Selected option is disabled.')
               END

*
* Idiot input detector....
*
            CASE 1
               CALL ELINE('Invalid option, Try Again.')
               GOTO 250
         END CASE

      WHILE NOT(EXIT.IT) DO
      REPEAT

*
* Make sure everything is saved
*
      GOSUB SAVE.FILES

      STOP

*----------------------------------------------------------------------
* PRINT.LAYOUT:
*----------------------------------------------------------------------
PRINT.LAYOUT:

      FAILURE=FALSE

      YN.MSG = 'Do you want to print a detailed listing of shipping points? :'
      YN.MASK = 'Y '
      GOSUB ASK.Y.OR.N
      IF YN.ANSWER = 'X' THEN FAILURE = TRUE ; RETURN
      IF YN.ANSWER = 'EX' THEN FAILURE=TRUE ; EXIT.IT=TRUE ; RETURN
      PL.PRINT.STATES = YN.ANSWER

      CRT @(0,22):'Printing Client/Carrier Layout.....':@(-4)
      CRT @(0,23):@(-4):

      PRINTER ON
      PAGE 1
      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"
*
      TITLE=USER.NAME
      L.TAB=CTR-(LEN(TITLE)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):TITLE
*     R.TAB=(WIDTH-LEN(TEMP))-9
*     HEAD2=TEMP:SPACE(R.TAB):"PAGE 'PL'"
      R.TAB=(WIDTH-LEN(TEMP))-20
      HEAD2=TEMP:SPACE(R.TAB):USER.NAME'L(#10 )':"PAGE 'PL'"
*
      HEAD3 = STR('-',WIDTH):"'L'"
      HED=HEAD1:HEAD2:HEAD3
      PAGE 0
      HEADING HED

*
* Line
*
      LINE=' Client Name :'
      IF CLIENT.ID THEN
         LINE:= CLIENT.ID:', ':CL.NAME:' (':CL.CITY:', ':CL.ST:')'
      END ELSE
         LINE:= '(Client not selected)'
      END
      LINE = LINE'L#63'
      IF CLIENT.ENABLED THEN
         LINE:= ' [ENABLED ]'
      END ELSE
         LINE:= ' [DISABLED]'
      END
      PRINT LINE

*
* Line
*
      LINE=' Carrier Name:'
      IF CARRIER.ID THEN
         LINE:= CARRIER.ID:', ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      END ELSE
         LINE:= '(Carrier not selected)'
      END
      LINE = LINE'L#63'
      IF AUDIT.REC<11> = 'DISABLE' THEN
         LINE:= ' [DISABLED]'
      END ELSE
         LINE:= ' [ENABLED ]'
      END
      PRINT LINE

*
* Line
*
      LINE=' Routing Zip :'
      BEGIN CASE
*
* Routing Zip Null???
*
         CASE ROUT.ZIP = 0 OR ROUT.ZIP = ''
            LINE:= '(Routing Zip not setup)'
*
* Routing Zip a Number?
*
         CASE NUM(ROUT.ZIP)
            ZIP.VAR=ROUT.ZIP
            CALL FB.READ.ZIP(ZIP.VAR, DEST.CITY, DEST.STATE)
            IF DEST.CITY # '' THEN LINE:=ROUT.ZIP:' (':DEST.CITY:', ':DEST.STATE:')'
*
* Routing is a string...
*
         CASE 1
            LINE:= ROUT.ZIP
      END CASE
      LINE = LINE'L#63'
      GOSUB GET.ROUT.ZIP.STATUS
      BEGIN CASE
         CASE ROUT.ZIP.ENABLED = TRUE
            LINE:= ' [ENABLED ]'
         CASE 1
            LINE:= ' [DISABLED]'
      END CASE
      PRINT LINE

*
* Line
*
      LINE=' Eff Date Rng:'
      IF BEG.EFF.DATE THEN
         LINE:=BEG.EFF.DATE'D2/':' TO: '
         IF END.EFF.DATE='' THEN
            LINE:= ' (No Ending Date Set)'
         END ELSE
            LINE:= END.EFF.DATE'D2/'
         END
      END ELSE
         LINE:='(Effective Date Range not setup)'
      END
      LINE = LINE'L#63'
      GOSUB GET.EFF.DATE.STATUS
      BEGIN CASE
         CASE EFF.DATE.ENABLED = TRUE
            LINE:= ' [ENABLED ]'
         CASE 1
            LINE:= ' [DISABLED]'
      END CASE
      PRINT LINE

*
* Line
*
      PRINT

*
* Line
*
      LINE=' Ship Points :'
      NUM.AUDITS = DCOUNT(RATE.REC<20>, @VM)
      IF NUM.AUDITS = 0 THEN
         PRINT LINE:'(No Shipping Points Entered)'
      END ELSE
         TEMP=''
         FOR AUDIT.NUM = 1 TO NUM.AUDITS
            IF RATE.REC<22,AUDIT.NUM>=YES THEN
               IF TEMP # '' THEN TEMP:=', '
               IF RATE.REC<20,AUDIT.NUM>=RATE.REC<21,AUDIT.NUM> THEN
                  TEMP:= RATE.REC<20,AUDIT.NUM>'R%3'
               END ELSE
                  IF RATE.REC<20,AUDIT.NUM>+1 = RATE.REC<21,AUDIT.NUM> THEN
                     TEMP:= RATE.REC<20,AUDIT.NUM>'R%3':', ':RATE.REC<21,AUDIT.NUM>'R%3'
                  END ELSE
                     TEMP:= RATE.REC<20,AUDIT.NUM>'R%3':'-':RATE.REC<21,AUDIT.NUM>'R%3'
                  END
               END
            END

*
* About to cross over the edge of page???
*
            IF LEN(TEMP) > 56 THEN
               PRINT LINE:TEMP
               TEMP=''
               LINE=STR(' ',14)
            END
         NEXT AUDIT.NUM

*
* Is any thing remaining to be printed??
*
         IF TEMP # '' THEN PRINT LINE:TEMP
      END

*
* Line 6
*
      PRINT

*
* Line 7,8,9
*
      LINE1=STR(' ',9):' RATE ''L#8':SPACE(2)
      LINE2=STR(' ',9):' LEVEL''L#8':SPACE(2)
      LINE3=STR(' ',9):STR('-',8):SPACE(2)

      LINE1:=' PLUS ''L#6':SPACE(2)
      LINE2:=' PER. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='    ''L#4':SPACE(2)
      LINE2:='FAK ''L#4':SPACE(2)
      LINE3:= STR('-',4):SPACE(2)

      LINE1:='CONTR.''L#6':SPACE(2)
      LINE2:='PERC. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='BENCH ''L#6':SPACE(2)
      LINE2:='PERC. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='CONTR.''L#6':SPACE(2)
      LINE2:=' MIN. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='BENCH.''L#6':SPACE(2)
      LINE2:=' MIN. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='MIN.''L#4':SPACE(1)
      LINE2:='WGHT''L#4':SPACE(1)
      LINE3:= STR('-',4):SPACE(1)

      LINE1:='MAX.''L#5':SPACE(1)
      LINE2:='WGHT''L#5':SPACE(1)
      LINE3:= STR('-',5):SPACE(1)

      LINE1:='D'
      LINE2:='C'
      LINE3:='-'

      PRINT LINE1
      PRINT LINE2
      PRINT LINE3

*
* Line
*
      DATA.POS = DEF.IR
      GOSUB BUILD.DISPLAY.LINE
      PRINT ' I.Inter:':LINE

*
* Line
*
      DATA.POS = DEF.OR
      GOSUB BUILD.DISPLAY.LINE
      PRINT ' O.Inter:':LINE

*
* Line 12
*
      DATA.POS = DEF.IA
      GOSUB BUILD.DISPLAY.LINE
      PRINT ' I.Intra:':LINE

*
* Line 13
*
      DATA.POS = DEF.OA
      GOSUB BUILD.DISPLAY.LINE
      PRINT ' O.Intra:':LINE

      PRINTER OFF
      CRT @(0,22):@(-4):

      IF PL.PRINT.STATES = 'Y' THEN GOSUB PRINT.STATES


      RETURN


*=======================================================================
*
*                     RATE LINE INPUT ROUTINES
*
*=======================================================================


*----------------------------------------------------------------------
* INPUT.RATE.TABLE
*----------------------------------------------------------------------
INPUT.RATE.TABLE:

*
* Init our default values - Stored in DATA.LINE
*
      GOSUB EXTRACT.DATA.LINE

      ISN.Y.POS = Y.POS
      ISN.ERROR = 'Invalid Entry! Try Again.'

      FIELD.POS = RATE.LV                ; * Starting Field Position
      FAILURE = FALSE
      FIELD.BACK = FALSE
      FIELD.SAME = FALSE

      ISN.HELP = ''


      LOOP
         BEGIN CASE
            CASE FIELD.POS=RATE.LV
               ISN.X.POS = 11
               ISN.HELP = "Enter Rate Level:  [X]=Exit, Don't save changes [EX]=Exit Program"
               ISN.TABLE=RATE.LEVELS
               ISN.FORMAT = 'MR#8'
               ISN.INPUT.MASK = ''
               ISN.LEN = 8
               GOSUB INPUT.SIMPLE.TABLE

            CASE FIELD.POS=PLUS.PERC
               ISN.X.POS = 21
               IF DATA.LINE<RATE.LV> # 'DISABLE' THEN CRT @(ISN.X.POS, ISN.Y.POS):@(-4):
               ISN.ALLOW.NULL=FALSE
               ISN.HELP = 'Enter Plus Percentage (Normally 0):  [X]=Back [EX]=Exit Program'
               ISN.FORMAT = 'MR22(#6)'
               ISN.INPUT.MASK = 'AMT2'
               ISN.LEN = 6
               GOSUB INPUT.SIMPLE.NUMBER
               FIELD.BACK = FAILURE

            CASE FIELD.POS=FAK
               ISN.X.POS = 29
               ISN.HELP = 'Enter FAK Class:  [X]=Back [EX]=Exit Program'
               IF DATA.LINE<FIELD.POS> = '' THEN DATA.LINE<FIELD.POS> = 70
               ISN.TABLE=CLASSES
               ISN.FORMAT = 'MR(#4)'
               ISN.LEN = 4
               GOSUB INPUT.SIMPLE.TABLE
               FIELD.BACK = FAILURE

            CASE FIELD.POS=CONTR.PERC
               ISN.ALLOW.NULL=FALSE
               ISN.X.POS = 35
               ISN.HELP = 'Enter Contract Percentage:  [X]=Back [EX]=Exit Program'
               ISN.INPUT.MASK = 'AMT2'
               ISN.FORMAT = 'MR22(#6)'
               ISN.LEN = 6
               GOSUB INPUT.SIMPLE.NUMBER
               IF NOT(FAILURE) AND DATA.LINE<FIELD.POS> < 100 THEN
                  YN.MSG = 'WARNING! Percentange entered is less than 1%! Is this Correct? '
                  YN.MASK = 'N '
                  GOSUB ASK.Y.OR.N
                  IF YN.ANSWER = 'N' THEN FIELD.SAME = TRUE
               END
               FIELD.BACK = FAILURE

            CASE FIELD.POS=BENCH.PERC
               ISN.ALLOW.NULL=FALSE
               ISN.X.POS = 43
               ISN.HELP = 'Enter Benchmark Percentage:  [X]=Back [EX]=Exit Program'
               ISN.INPUT.MASK = 'AMT2'
               ISN.FORMAT = 'MR22(#6)'
               ISN.LEN = 6
               GOSUB INPUT.SIMPLE.NUMBER
               IF NOT(FAILURE) AND DATA.LINE<FIELD.POS> < 100 THEN
                  YN.MSG = 'WARNING! Percentange entered is less than 1%! Is this Correct? '
                  YN.MASK = 'N '
                  GOSUB ASK.Y.OR.N
                  IF YN.ANSWER = 'N' THEN FIELD.SAME = TRUE
               END
               FIELD.BACK = FAILURE

            CASE FIELD.POS=CONTR.MIN
               ISN.ALLOW.NULL=FALSE
               ISN.X.POS = 51
               ISN.HELP = 'Enter Contract Minimum:  [X]=Back [EX]=Exit Program'
               ISN.FORMAT = 'MR22(#6)'
               ISN.INPUT.MASK = 'AMT2'
               ISN.LEN = 6
               GOSUB INPUT.SIMPLE.NUMBER
               FIELD.BACK = FAILURE

            CASE FIELD.POS=BENCH.MIN
               ISN.ALLOW.NULL=FALSE
               T.OOPS = DATA.LINE<BENCH.MIN>
               ISN.X.POS = 59
               ISN.HELP = 'Enter Benchmark Minimum:  [X]=Back [EX]=Exit Program'
               ISN.INPUT.MASK = 'AMT2'
               ISN.FORMAT = 'MR22(#6)'
               ISN.LEN = 6
               GOSUB INPUT.SIMPLE.NUMBER
               FIELD.BACK = FAILURE
               IF NOT(FAILURE) AND DATA.LINE<BENCH.MIN> < DATA.LINE<CONTR.MIN> THEN
                  FIELD.SAME = TRUE
                  DATA.LINE<BENCH.MIN> = T.OOPS
                  CALL ELINE("Benchmark Minimum should be greater or equal to the Contract Minimum!")
               END

            CASE FIELD.POS=MIN.WEIGHT
               ISN.ALLOW.NULL=TRUE
               ISN.X.POS = 67
               ISN.HELP = 'Enter Minimum Weight:  [X]=Back [EX]=Exit Program'
               ISN.INPUT.MASK = 'AMT2'
               ISN.FORMAT = 'MR(#4)'
               ISN.LEN = 4
               GOSUB INPUT.SIMPLE.NUMBER
               FIELD.BACK = FAILURE

            CASE FIELD.POS=MAX.WEIGHT
               ISN.ALLOW.NULL=TRUE
               ISN.X.POS = 72
               T.OOPS = DATA.LINE<MAX.WEIGHT>
               ISN.HELP = 'Enter Maximum Weight:  [X]=Back [EX]=Exit Program'
               ISN.INPUT.MASK = 'AMT2'
               ISN.FORMAT = 'MR(#5)'
               ISN.LEN = 5
               GOSUB INPUT.SIMPLE.NUMBER
               FIELD.BACK = FAILURE
               IF NOT(FAILURE) AND DATA.LINE<MIN.WEIGHT> > DATA.LINE<MAX.WEIGHT> THEN
                  FIELD.SAME = TRUE
                  CALL ELINE("Maximum Weight should be greater than the Minimum Weight!")
                  DATA.LINE<MAX.WEIGHT> = T.OOPS
               END

            CASE FIELD.POS=DISCOUNTS
               ISN.X.POS = 78
               ISN.HELP = 'Enter Discount Flag - [Y]=':Y.DISCOUNT.STR:' [N]=':N.DISCOUNT.STR:'  [X]=Back [EX]=Exit'
               ISN.INPUT.MASK = ''
               ISN.TABLE=YES.NO
               ISN.FORMAT = 'MR(#1)'
               ISN.LEN = 1
               GOSUB INPUT.SIMPLE.TABLE
               FIELD.BACK = FAILURE
         END CASE

*
* Go to next field or back one.
*
         BEGIN CASE
            CASE FIELD.BACK
               FIELD.POS-=1
               FAILURE = FALSE
               FIELD.BACK = FALSE
               FIELD.SAME = FALSE
            CASE FIELD.SAME
               FIELD.SAME = FALSE

            CASE 1
               FIELD.POS+=1
         END CASE

      WHILE (DATA.LINE<RATE.LV> # 'DISABLE' AND (FIELD.POS # LAST.FIELD) AND NOT(FAILURE OR EXIT.IT))
      REPEAT

*
* COMMON EXIT POINT...
*

*
* If we did not abort, Store data entry.
*
      IF NOT(FAILURE OR EXIT.IT) THEN
         GOSUB BUILD.DATA.LINE
      END

      RETURN


*----------------------------------------------------------------------
* INPUT.SIMPLE.NUMBER
*
* EXPECTED INPUT:
*                ISN.X.POS  - X Position for data entry
*                ISN.Y.POS  - Y Position for data entry
*                ISN.LEN    - Len of input field
*                ISN.HELP   - Help Line
*                ISN.FORMAT - OCONV Conversion format for screen display
*                FIELD.POS  - Data position in DATA.LINE
*
*----------------------------------------------------------------------
INPUT.SIMPLE.NUMBER:
*
* Init. return value varables
*
      FAILURE=FALSE

      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):

      ISN.DEFAULT = DATA.LINE<FIELD.POS>
      ISN.MASK = TRIM(OCONV(ISN.DEFAULT,ISN.FORMAT)):' '
      CRT @(ISN.X.POS,ISN.Y.POS):STR(' ',ISN.LEN)

ISPE.2:
      CALL GEN.IN(ISN.X.POS,ISN.Y.POS,ISN.MASK,ISN.INPUT.MASK,Q,0,ISN.LEN,'','',2,ISN.X.POS,ISN.Y.POS,0,QI,ISN.HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=ISN.MASK ; Q=ISN.DEFAULT
      IF NOT(ISN.ALLOW.NULL) AND QI='' THEN QI='0'

      BEGIN CASE
         CASE QI = 'EX'
            EXIT.IT=TRUE
            FAILURE=TRUE

         CASE QI = 'X'
            FAILURE=TRUE

         CASE QI = ''

         CASE NUM(QI)
            DATA.LINE<FIELD.POS>= Q'R0'

         CASE 1
            CALL ELINE(ISN.ERROR)
            GOTO ISPE.2
      END CASE

      CRT @(ISN.X.POS,ISN.Y.POS):OCONV(DATA.LINE<FIELD.POS>,ISN.FORMAT)

      RETURN


*----------------------------------------------------------------------
* INPUT.SIMPLE.TABLE
*
* EXPECTED INPUT:
*                ISN.X.POS  - X Position for data entry
*                ISN.Y.POS  - Y Position for data entry
*                ISN.LEN    - Len of input field
*                ISN.HELP   - Help Line
*                FIELD.POS  - Data position in DATA.LINE
*----------------------------------------------------------------------
INPUT.SIMPLE.TABLE:
*
* Init. return value varables
*
      FAILURE=FALSE

      ISN.TABLE.STR = LEFT('OPTIONS :':CHANGE(ISN.TABLE,@VM,' '),79)
      ISN.DEFAULT = DATA.LINE<FIELD.POS>
      IF TRIM(ISN.DEFAULT) = '' THEN
         ISN.DEFAULT = ISN.TABLE<1,1>
      END

      ISN.MASK = TRIM(OCONV(ISN.DEFAULT,ISN.FORMAT)):' '
      ISN.TABLE2 = OCONV(ISN.TABLE,'MCU')
      CRT @(ISN.X.POS,ISN.Y.POS):STR(' ',ISN.LEN)

IST.2:
      CRT @(0,22):ISN.TABLE.STR:@(-4):
      CRT @(0,23):@(-4):

      CALL GEN.IN(ISN.X.POS,ISN.Y.POS,ISN.MASK,ISN.INPUT.MASK,Q,0,ISN.LEN,'','',2,ISN.X.POS,ISN.Y.POS,0,QI,ISN.HELP,0,23)

      IF QI= '' THEN QI=ISN.MASK
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            EXIT.IT=TRUE
            FAILURE=TRUE

         CASE QI = 'X'
            FAILURE=TRUE

         CASE 1
            LOCATE QI IN ISN.TABLE2<1> SETTING POS THEN
               DATA.LINE<FIELD.POS> = ISN.TABLE<1,POS>
            END ELSE
               CALL ELINE(ISN.ERROR)
               GOTO IST.2
            END
      END CASE

      CRT @(ISN.X.POS,ISN.Y.POS):OCONV(DATA.LINE<FIELD.POS>,ISN.FORMAT)
      RETURN




*=======================================================================
*
*                VALID SHIPPING POINT ROUTINES
*
*=======================================================================


*----------------------------------------------------------------------
* Input Valid Shipping Points
*----------------------------------------------------------------------
INPUT.SHIPPING.POINTS: ***

*
* Init. return value varables
*
      NEW.SHIPPING.POINTS = 0
      FAILURE=FALSE

*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN
      GOSUB SETUP.AUDIT.ZIPS

*
*
ISP.1:
      GOSUB LIST.STATES

ISP.2:
      IF EXIT.IT THEN GOTO ISP.EXIT

      CRT @(0,22):'Select State Zip Range :':@(-4)
      HELP = "[Y]=All To YES [N]=All To NO [R]=Mark Range [PRINT]=Prnt Zip [X]=Bck [EX]=Exit"
      MASK = 'X '

      CALL GEN.IN(24,22,MASK,'',Q,0,6,'','',2,24,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI = ''
            FAILURE=TRUE

         CASE QI = 'PRINT'
            GOSUB PRINT.STATES
            GOTO ISP.2

         CASE QI = 'R'
            GOSUB EDIT.STATE.RANGE
            GOTO ISP.2

         CASE QI='Y'
            YN.MSG = 'Set all State Zips as YES and include all states? :'
            YN.MASK = 'N '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'Y' THEN
               FOR STATE.NUM = 1 TO NUM.ZIPS
                  ZIP.REC<4,STATE.NUM> = YES
                  FOR ZIP.NUM = ZIP.REC<2,STATE.NUM> TO ZIP.REC<3,STATE.NUM>
                     ALL.ZIPS<ZIP.NUM>=YES
                  NEXT
               NEXT
               GOTO ISP.1
            END
            GOTO ISP.2

         CASE QI='N'
            YN.MSG = 'Set all State Zips as NO? :'
            YN.MASK = 'N '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'Y' THEN
               FOR STATE.NUM = 1 TO NUM.ZIPS
                  ZIP.REC<4,STATE.NUM> = NO
                  FOR ZIP.NUM = ZIP.REC<2,STATE.NUM> TO ZIP.REC<3,STATE.NUM>
                     ALL.ZIPS<ZIP.NUM>=NO
                  NEXT
               NEXT
               GOTO ISP.1
            END
            GOTO ISP.2

         CASE NUM(QI)
            STATE.NUM = QI'R#3'
            IF STATE.NUM < 1 OR STATE.NUM > NUM.ZIPS THEN
               CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.ZIPS)
            END ELSE
               GOSUB EDIT.STATES
            END
            GOTO ISP.2

         CASE 1
*
* Attempt to locate string entered as a state ID
*
            LOCATE QI IN ZIP.REC<1> SETTING WHERE THEN
               STATE.NUM = WHERE'R#3'
               IF STATE.NUM < 1 OR STATE.NUM > NUM.ZIPS THEN
                  CALL ELINE('Invalid state number.  Please enter number from 1 to ':NUM.ZIPS)
               END ELSE
                  GOSUB EDIT.STATES
               END
            END ELSE
               CALL ELINE('Invalid response. Try again.')
            END
            GOTO ISP.2
      END CASE

ISP.EXIT:
*
* COMMON EXIT POINT - Do any necessary clean ups or screen region marking
* for refreshing screen.
*

*
* Rebuild Audit Zip in AUDIT.REC<> - Used to update screen info.
*
      GOSUB BUILD.AUDIT.ZIPS

*
* Redraw entire screen contents
*
      GOSUB DSP.ENTRY.SCN
      FOR Y = 1 TO NUM.OPTIONS
         IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
      NEXT Y
      RETURN




*----------------------------------------------------------------------
* EDIT.STATE.RANGE
*----------------------------------------------------------------------
EDIT.STATE.RANGE:

      ESR.BACK = FALSE

ESR.1:
      HELP = "OPTIONS:  [X] = Back [EX] = Exit"
      CRT @(0,22):'Enter starting State Number: ':@(-4)

      IF ESR.BACK THEN
         MASK = 'X '
      END ELSE
         MASK = '1 '
      END
      CALL GEN.IN(30,22,MASK,'',Q,0,20,'','',2,30,22,1,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=TRIM(MASK)

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI=''
            FAILURE=TRUE
*
* Individual Selection
*
         CASE NUM(QI)
            FAILURE = FALSE
            STATE.NUM = QI'R#3'
            IF STATE.NUM < 1 OR STATE.NUM > NUM.ZIPS THEN
               CALL ELINE("Invalid STATE number entered, try again.")
            END ELSE
*
* Start editing Zips...
*
               LOOP
*
* Edit current State Number
*
                  GOSUB EDIT.STATES
*
* Did user ABORT?
*
                  IF NOT(FAILURE) THEN
*
* Hell NO!... Can we inc zip numbers???
*
                     IF STATE.NUM < NUM.ZIPS THEN
*
* Hell Yes.. Do it!
*
                        STATE.NUM+=1
                     END ELSE
*
* Nope.. Exit this MoFo.
*
                        ESR.BACK = TRUE
                        FAILURE = TRUE
                     END
                  END ELSE
                     ESR.BACK = FALSE
                  END
               WHILE NOT(FAILURE)
               REPEAT

            END
*
* Redraw menu
*

            GOTO ESR.1

*
* Idiot input...
*
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO ESR.1
      END CASE

      RETURN



*----------------------------------------------------------------------
* EDIT.STATES
*----------------------------------------------------------------------
EDIT.STATES: ***

      ES.COLS=''
      ES.COLS<1>=1 ; ES.COLS<2>=20 ; ES.COLS<3>=39 ; ES.COLS<4>=58
      ES.START.ROW = 5
      ES.MAX.ROWS=15

      ES.COL.NUM = 1+INT((STATE.NUM-1)/ES.MAX.ROWS)
      ES.ROW.NUM = REM(STATE.NUM, ES.MAX.ROWS)
      IF ES.ROW.NUM = 0 THEN ES.ROW.NUM = 15

      ES.COL = ES.COLS<ES.COL.NUM>
      ES.ROW = ES.START.ROW+ES.ROW.NUM

      TEMP = ' ':STATE.NUM'R#2':') '     ; * Line Number
      TEMP:= ZIP.REC<1,STATE.NUM>:' '    ; * State ID Code
      TEMP:= ZIP.REC<2,STATE.NUM>'R%3':' '         ; * State Low Zip
      TEMP:= ZIP.REC<3,STATE.NUM>'R%3':' '         ; * State High Zip


      CRT @(ES.COL,ES.ROW):TEMP
      ES.COL+=16

ES.1:
      FLAG = ZIP.REC<4,STATE.NUM>
      HELP = "[Y]=Include State [N]=Don't Include State [P]=Partial Zips [X]=Done [EX]=Exit"
      MASK = FLAG:' '

ES.2:
      IF EXIT.IT THEN GOTO ES.EXIT

      CRT @(0,22):"Select an option:":@(-4)
      CALL GEN.IN(ES.COL,ES.ROW,MASK,'',Q,0,1,'','',2,ES.COL,ES.ROW,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      IF QI='1' THEN QI='Y'
      IF QI='0' THEN QI='N'

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X'
            FAILURE=TRUE

         CASE QI = ''

         CASE QI = 'Y' OR QI = 'N'
            FOR T = ZIP.REC<2,STATE.NUM> TO ZIP.REC<3,STATE.NUM>
               ALL.ZIPS<T> = QI
            NEXT T
            ZIP.REC<4,STATE.NUM>=QI

         CASE QI='P'
            GOSUB EDIT.STATE.ZIPS
            GOSUB SETUP.STATE.AUDIT.ZIPS
            GOSUB LIST.STATES
            FAILURE= FALSE
            GOTO ES.1

         CASE 1
            CALL ELINE('Invalid option, valid options are "Y","N", or "P".  Try Again.')
            GOTO ES.2
      END CASE

ES.EXIT:
*
* COMMON EXIT POINT - Clean up display....
*

*
* Update screen display
*
      CRT @(ES.COL,ES.ROW):ZIP.REC<4,STATE.NUM>

      RETURN




*----------------------------------------------------------------------
* LIST.STATES
*----------------------------------------------------------------------
LIST.STATES: ***

*
* Clear Right display box
*
      CALL FB.DRAW.BOX(0,2,79,20,' ','+-+|+-+|')   ; * Full box image + header
      CALL FB.DRAW.BOX(0,2,79,4,'','+=+|+=+|')     ; * Draw Header Boarder

*    CALL FB.PRINT.CENT(21,21+58,3,'~~ EFFECTIVE DATES ON FILE ~~')

*
* Display Heading
*
      TEMP=' ##  ST LOW HGH F  '
      CRT @(1,4):TEMP:TEMP:TEMP:TEMP

*
* Init variables
*
      LS.COLS=''
      LS.COLS<1>=1 ; LS.COLS<2>=20 ; LS.COLS<3>=39 ; LS.COLS<4>=58
      LS.COL.NUM=1
      LS.ROW.NUM=1
      LS.MAX.COLS=4
      LS.MAX.ROWS=15

*
* Draw Left side
*
      LS.POS = 1
      LS.START.ROW = 5                   ; * Note this is 1 less (due to addition adds 1)
      EXIT.LD = FALSE

      LOOP
         TEMP = ' ':LS.POS'R#2':') '     ; * Line Number
         TEMP:= ZIP.REC<1,LS.POS>:' '    ; * State ID Code
         TEMP:= ZIP.REC<2,LS.POS>'R%3':' '         ; * State Low Zip
         TEMP:= ZIP.REC<3,LS.POS>'R%3':' '         ; * State High Zip
         TEMP:= ZIP.REC<4,LS.POS>        ; * Flag
         LS.POS+=1

         CRT @(LS.COLS<LS.COL.NUM>,LS.START.ROW+LS.ROW.NUM):TEMP
         BEGIN CASE
*
*  End of list?
*
            CASE LS.POS > NUM.ZIPS
               EXIT.LD = TRUE
*
*  Finished A Column?
*
            CASE LS.ROW.NUM = LS.MAX.ROWS
               IF LS.COL.NUM < LS.MAX.COLS THEN
                  LS.COL.NUM+=1
                  LS.ROW.NUM=1
               END ELSE
                  EXIT.LD = TRUE
                  CALL FB.PRINT.CENT(0,79,21,REVON:'* Unable to display all entries *':REVOFF)
               END
*
*  Default
*
            CASE 1
               LS.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.LD)
      REPEAT

      RETURN



*----------------------------------------------------------------------
* EDIT.STATE.ZIPS
*----------------------------------------------------------------------
EDIT.STATE.ZIPS: ***

*
* Init. return value varables
*
      PAGE.NUM = 1

*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN


ESZ.1:
      GOSUB DSP.EDIT.STATE.ZIPS.MENU
      GOSUB LIST.STATE.ZIPS

ESZ.2:
      IF EXIT.IT THEN GOTO ESZ.EXIT

      CRT @(0,13):' Enter Option :    '
      HELP = "OPTIONS: ''=Next page [T]=Top [B]=Back [H]=Help [X]=Exit"
      MASK = '-'

      CALL GEN.IN(16,13,MASK,'',Q,0,3,'','',2,16,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X'
            FAILURE=TRUE

*
* Individual Selection
*
         CASE NUM(QI) AND ((ZIP.REC<2,STATE.NUM> < 5 AND LEN(QI)=3) OR (QI>4))
            ZIP.NUM = QI'R%3'
            IF ZIP.NUM < ZIP.REC<2,STATE.NUM> OR ZIP.NUM > ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid zip number entered, try again.")
            END ELSE
               CALL FB.DRAW.BOX(0,3,30,18,' ','')
               GOSUB EDIT.STATE.ZIP
               GOSUB DSP.EDIT.STATE.ZIPS.MENU
            END
            GOTO ESZ.2

*
* Set all to NO
*
         CASE QI = '1'
            FOR T = ZIP.REC<2,STATE.NUM> TO ZIP.REC<3,STATE.NUM>
               ALL.ZIPS<T> = NO
            NEXT T
            ZIP.REC<4,STATE.NUM>=NO
            GOSUB LIST.STATE.ZIPS
            GOTO ESZ.2

*
* Set all to YES
*
         CASE QI = '2'
            FOR T = ZIP.REC<2,STATE.NUM> TO ZIP.REC<3,STATE.NUM>
               ALL.ZIPS<T> = YES
            NEXT T
            ZIP.REC<4,STATE.NUM>=YES
            GOSUB LIST.STATE.ZIPS
            GOTO ESZ.2

*
* Toggle all
*
         CASE QI = '3'
            FOR T = ZIP.REC<2,STATE.NUM> TO ZIP.REC<3,STATE.NUM>
               BEGIN CASE
                  CASE ALL.ZIPS<T> = YES
                     ALL.ZIPS<T> = NO
                  CASE ALL.ZIPS<T> = NO
                     ALL.ZIPS<T> = YES
               END CASE
            NEXT T
            ZIP.REC<4,STATE.NUM>=PARTIAL
            GOSUB LIST.STATE.ZIPS
            GOTO ESZ.2

*
* Enter RANGE MARKING mode
*
         CASE QI = '4'
            GOSUB EDIT.ZIP.RANGE
            GOSUB DSP.EDIT.STATE.ZIPS.MENU
            GOTO ESZ.2

*
* Page forward 1 page
*
         CASE QI=''
            PAGE.NUM+=1
            GOSUB LIST.STATE.ZIPS
            GOTO ESZ.2

*
* Top Page
*
         CASE QI='T'
            IF PAGE.NUM # 1 THEN
               PAGE.NUM=1
               GOSUB LIST.STATE.ZIPS
            END
            GOTO ESZ.2

*
* Page back 1 page
*
         CASE QI='B'
            IF PAGE.NUM > 1 THEN
               PAGE.NUM-=1
               GOSUB LIST.STATE.ZIPS
            END
            GOTO ESZ.2

*
* Refresh Page
*
         CASE QI='R'
            GOTO ESZ.1

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ESZ.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.EDIT.STATE.ZIPS.MENU
            GOTO ESZ.2

*
* Idiot input...
*
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO ESZ.1
      END CASE

ESZ.EXIT:
*
* COMMON EXIT POINT -
*


      RETURN


*----------------------------------------------------------------------
* Display Selective Zip Menu
*----------------------------------------------------------------------
DSP.EDIT.STATE.ZIPS.MENU: ***

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'Selective Zip Entry '
      CRT @(3, 5):'   Entry Options'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'1) Set all to NO'
      CRT @(1, 9):'2) Set all to YES'
      CRT @(1,10):'3) "Toggle" all'
      CRT @(1,11):'4) Enter Range Mode'

      RETURN


*----------------------------------------------------------------------
* PRINT.STATES:
*----------------------------------------------------------------------
PRINT.STATES:

      PRINTER ON
      PAGE 1
      CRT @(0,22):'Printing State Zip Ranges.....':@(-4)
      CRT @(0,23):@(-4):

      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"
*
      TITLE='Valid Shipping Points'
      L.TAB=CTR-(LEN(TITLE)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):TITLE
      R.TAB=(WIDTH-LEN(TEMP))-9
      HEAD2=TEMP:SPACE(R.TAB):"PAGE 'PL'"
*
      HEAD3 = STR('-',WIDTH):"'L'"
*
      TEMP = 'Client Info    :':CLIENT.ID:', ':CL.NAME:' (':CL.CITY:', ':CL.ST:')'
      HEAD4 = LEFT(TEMP,78):"'L'"
*
      TEMP = 'Carrier Info   :':CARRIER.ID:', ':CARRIER.NAME
      HEAD5 = LEFT(TEMP,78):"'L'"
*
      HEAD6 = 'Routing Zip    :':ROUT.ZIP'L#7':"'L'"
*
      HEAD7 = 'Eff Date Range :':BEG.EFF.DATE'D2/':' TO ':END.EFF.DATE'D2/':"'L'"
*
      HEAD8 = STR('-',WIDTH):"'L'"
*
      HED=HEAD1:HEAD2:HEAD3:HEAD4:HEAD5:HEAD6:HEAD7:HEAD8
      PAGE 0
      HEADING HED

      FOR STATE=1 TO NUM.ZIPS
         HEAD = ' ':STATE'R#2':') '      ; * Line Number
         HEAD:= ZIP.REC<1,STATE>:' '     ; * State ID Code
         TEMP = HEAD
         FOR ZIP=ZIP.REC<2,STATE> TO ZIP.REC<3,STATE>
            IF TEMP='' THEN TEMP = STR(' ',LEN(HEAD))
            FLAG = ALL.ZIPS<ZIP>
            IF FLAG # YES THEN FLAG = ' '
            TEMP:= ZIP'R%3':' ':FLAG:'  '
            IF LEN(TEMP) > 75 THEN PRINT TEMP ; TEMP = ''
         NEXT
         IF TEMP # '' THEN PRINT TEMP
         PRINT STR('-',WIDTH):"'L'"
      NEXT

      CRT @(0,22):@(-4):

      PRINTER OFF

      RETURN



*=======================================================================
*
*                EFFECTIVE DATE ROUTINES
*
*=======================================================================



*----------------------------------------------------------------------
* EDIT.STATE.ZIP
*----------------------------------------------------------------------
EDIT.STATE.ZIP: ***

*
* Init variables
*
      ESZ.COLS=''
      ESZ.COLS<1>=31 ; ESZ.COLS<2>=40 ; ESZ.COLS<3>=49 ; ESZ.COLS<4>=58 ; ESZ.COLS<5> = 67

      ESZ.MAX.COLS=5
      ESZ.MAX.ROWS=15
      ESZ.START.ROW=5

ESZ.1.0:
*
* Determine how many zips fit on a page, then determine the starting
* Zip OFFSET that is on the current page.
*
      ESZ.PAGE.SIZE = ESZ.MAX.COLS*ESZ.MAX.ROWS    ; * Number of zips on a page
      ST.ZIP = ZIP.REC<2,STATE.NUM>      ; * Starting zip # for state
      S.ZIP = ST.ZIP+(PAGE.NUM-1)*ESZ.PAGE.SIZE    ; * Starting zip # for page
      E.ZIP = S.ZIP+ESZ.PAGE.SIZE        ; * Ending zip # for page

*
* Is the zip number entered NOT on this current page?
*
      IF ZIP.NUM < S.ZIP OR ZIP.NUM >= E.ZIP THEN
*
* Yes... Change page number, update display, and recompute
* edit positioning...
*
         PAGE.NUM = 1+INT(ZIP.NUM-ST.ZIP/ESZ.PAGE.SIZE)
         GOSUB LIST.STATE.ZIPS
         GOTO ESZ.1.0
      END

*
* Zip position in the list (0-num zips for state) for current page.
*
      ZIP.POS = ZIP.NUM-S.ZIP

*
* Convert zip linear position to a two dimensional position
*
      ESZ.COL.NUM = 1+INT(ZIP.POS/ESZ.MAX.ROWS)
      ESZ.ROW.NUM = REM(ZIP.POS+1,ESZ.MAX.ROWS)
      IF ESZ.ROW.NUM = 0 THEN ESZ.ROW.NUM = 15

*
* Adjust for screen locations.
*
      ESZ.COL = ESZ.COLS<ESZ.COL.NUM>
      ESZ.ROW = ESZ.START.ROW+ESZ.ROW.NUM

      FLAG = ALL.ZIPS<ZIP.NUM>
      TEMP = '  ':ZIP.NUM'R%3':' ':FLAG
      CRT @(ESZ.COL,ESZ.ROW):TEMP
      ESZ.COL+=6

ESZ.1.A:
      HELP = "OPTIONS: [Y]=Include Zip [N]=Don't Include Zip [H]=Help [X]=Done [EX]=Exit"
      MASK = FLAG:' '

ESZ.2.A:
      CRT @(0,22):"Select an option:":@(-4)
      CALL GEN.IN(ESZ.COL,ESZ.ROW,MASK,'',Q,0,1,'','',2,ESZ.COL,ESZ.ROW,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=FLAG

      IF QI='1' THEN QI='Y'
      IF QI='0' THEN QI='N'
      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X'
            FAILURE=TRUE

         CASE QI = 'Y' OR QI = 'N'
            ALL.ZIPS<ZIP.NUM> = QI

         CASE QI = '?' OR QI = 'H'
            HELP.LINES=ESZ1.HELP
            GOSUB DISPLAY.HELP
            GOTO ESZ.1.A

         CASE 1
            CALL ELINE('Invalid option, valid options are "Y", "N", OR "X".  Try Again.')
            GOTO ESZ.2.A
      END CASE

*
* Redraw Current Zip Flag
*
      CRT @(ESZ.COL,ESZ.ROW):ALL.ZIPS<ZIP.NUM>

      RETURN


*----------------------------------------------------------------------
* EDIT.ZIP.RANGE
*----------------------------------------------------------------------
EDIT.ZIP.RANGE: ***

*
* Init
*

EZR.1:
      GOSUB DSP.EDIT.ZIP.RANGE.MENU

EZR.2:
      CRT @(0,11):' Start Zip #  :    '
      HELP = "OPTIONS:  [H]=Help [X]=Back [EX]=Exit Program"
      MASK = ZIP.REC<2,STATE.NUM>

      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',2,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=MASK

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI=''
            FAILURE=TRUE

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=EZR.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.EDIT.ZIP.RANGE.MENU
            GOTO EZR.2

*
* Individual Selection
*
         CASE NUM(QI)
            FAILURE = FALSE
            CALL FB.DRAW.BOX(0,3,30,18,' ','')
            ZIP.NUM = QI'R%3'
            IF ZIP.NUM < ZIP.REC<2,STATE.NUM> OR ZIP.NUM > ZIP.REC<3,STATE.NUM> THEN
               CALL ELINE("Invalid zip number entered, try again.")
            END ELSE
*
* Start editing Zips...
*
               LOOP
*
* Edit current Zip Number
*
                  GOSUB EDIT.STATE.ZIP
*
* Did user ABORT?
*
                  IF NOT(FAILURE) THEN
*
* Hell NO!... Can we inc zip numbers???
*
                     IF ZIP.NUM < ZIP.REC<3,STATE.NUM> THEN
*
* Hell Yes.. Do it!
*
                        ZIP.NUM+=1
                     END ELSE
*
* Nope.. Exit this MoFo.
*
                        FAILURE = TRUE
                     END
                  END
               WHILE NOT(FAILURE)
               REPEAT
            END
*
* Redraw menu
*
            GOSUB DSP.EDIT.ZIP.RANGE.MENU
            GOTO EZR.2

*
* Idiot input...
*
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO EZR.1
      END CASE



      RETURN


*----------------------------------------------------------------------
* Display Edit Zip Range Menu
*----------------------------------------------------------------------
DSP.EDIT.ZIP.RANGE.MENU: ***

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 5):'Edit Zip Range Mode'
      CRT @(3, 6):'==================='

      CRT @(1, 8):'Enter the ZIP to start'
      CRT @(1, 9):' Zip Range Editing.'

      RETURN



*----------------------------------------------------------------------
* LIST.STATE.ZIPS
*----------------------------------------------------------------------
LIST.STATE.ZIPS: ***

*
* Init variables
*
      LSZ.COLS=''
      LSZ.COLS<1>=31 ; LSZ.COLS<2>=40 ; LSZ.COLS<3>=49 ; LSZ.COLS<4>=58 ; LSZ.COLS<5> = 67

      LSZ.COL.NUM=1
      LSZ.ROW.NUM=1
      LSZ.MAX.COLS=5
      LSZ.MAX.ROWS=15
      LSZ.START.ROW=6

      S.ZIP = ZIP.REC<2,STATE.NUM>       ; * State Low Zip
      E.ZIP = ZIP.REC<3,STATE.NUM>       ; * State High Zip
      N.ZIPS = E.ZIP-S.ZIP+1
      NUM.PAGES = INT(N.ZIPS/(LSZ.MAX.COLS*LSZ.MAX.ROWS))
      IF NUM.PAGES < N.ZIPS/(LSZ.MAX.COLS*LSZ.MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN PAGE.NUM = 1

*
* Display Heading
*
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')

      TEMP=' ~~ STATE: ':ZIP.REC<1,STATE.NUM>:'               '
      TEMP:='PAGE # ':PAGE.NUM'R#2':' OF ':NUM.PAGES'R#2':' ~~ '
      CRT @(31,3):TEMP:
      TEMP='  ZIP F  '
      CRT @(31,4):TEMP:TEMP:TEMP:TEMP:TEMP:

*
* Display current page
*
      LSZ.POS = (PAGE.NUM-1)*LSZ.MAX.COLS*LSZ.MAX.ROWS
      LSZ.COL = LSZ.COLS<LSZ.COL.NUM>
      LSZ.ROW = LSZ.START.ROW

      EXIT.LSZ = FALSE

      LOOP
         ZIP = S.ZIP+LSZ.POS
         TEMP = '  ':ZIP'R%3':' '
         TEMP:= ALL.ZIPS<ZIP>
         LSZ.POS+=1

         CRT @(LSZ.COL,LSZ.ROW):TEMP
         BEGIN CASE
*
*  End of list?
*
            CASE LSZ.POS = N.ZIPS
               EXIT.LSZ = TRUE
*
*  Finished A Column?
*
            CASE LSZ.ROW.NUM = LSZ.MAX.ROWS
               IF LSZ.COL.NUM < LSZ.MAX.COLS THEN
                  LSZ.COL.NUM+=1
                  LSZ.ROW.NUM=1
                  LSZ.COL = LSZ.COLS<LSZ.COL.NUM>
                  LSZ.ROW = LSZ.START.ROW
               END ELSE
                  EXIT.LSZ = TRUE
                  CALL FB.PRINT.CENT(30,79,21,REVON:'* Continued on next page *':REVOFF)
               END
*
*  Default
*
            CASE 1
               LSZ.ROW+=1
               LSZ.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.LSZ)
      REPEAT

      RETURN



*=======================================================================
*
*                FILE SETUP/MAINTANCE ROUTINES
*
*=======================================================================


*----------------------------------------------------------------------
* SETUP.STATE.AUDIT.ZIPS - UPDATES P/Y/N FLAG FOR A SINGLE STATE.
*
* INPUT: STATE.NUM - STATE NUMBER TO RESETUP.
*        ALL.ZIPS  - USED TO DERMINE
*        ZIP.REC   - INFO ON STATE
*
* OUTPUT: ZIP.REC<4,STATE.NUM> = FLAG FOR STATE
*
*----------------------------------------------------------------------
SETUP.STATE.AUDIT.ZIPS:
*
* Scan though ZIP.REC and see if entire states are marked
*
*
      YES.HIT = 0
      NO.HIT = 0

      FOR Y = ZIP.REC<2,STATE.NUM> TO ZIP.REC<3,STATE.NUM>
         BEGIN CASE
            CASE ALL.ZIPS<Y> = YES
               YES.HIT+=1
            CASE ALL.ZIPS<Y> = NO
               NO.HIT+=1
         END CASE
      NEXT Y

*
* Evaluate results... All Yes, All No, or Combos
*
      BEGIN CASE
*
* Did we hit both Yes's and No's
*
         CASE YES.HIT > 0 AND NO.HIT > 0
            ZIP.REC<4,STATE.NUM> = PARTIAL
*
* Did we hit Yes's
*
         CASE YES.HIT > 0
            ZIP.REC<4,STATE.NUM> = YES

*
* Did we hit No's
*
         CASE NO.HIT > 0
            ZIP.REC<4,STATE.NUM> = NO
      END CASE


      RETURN



*----------------------------------------------------------------------
* BUILD.AUDIT.ZIPS - Consolidates all the zip audit flags to be stored
*                    to disk.
*
*----------------------------------------------------------------------
BUILD.AUDIT.ZIPS:

      RATE.REC<20>=''                    ; * Storage for Beg
      RATE.REC<21>=''                    ; * Storage for End
      RATE.REC<22>=''                    ; * Storage for Flag

*
* Loop though all zips and consolidate all groups of "yes" and "no"s
*
*
* NOTE: We loop though 1000 - This zip (1000) does not exist and is
*       only used to make sure the last zip (999) is written.
*
      LAST.FLAG = ALL.ZIPS<1>
      LAST.BEG = 1
      LAST.END = 1
      FOR ZIP.NUM = 2 TO 1000
         IF ALL.ZIPS<ZIP.NUM> # LAST.FLAG THEN
*
* Change in flag - store data and update LAST.xxxx variables.
*
            IF LAST.FLAG = YES THEN
*
* Store entries into Temp storage
*
               RATE.REC<20,-1> = LAST.BEG'R%3'
               RATE.REC<21,-1> = LAST.END'R%3'
               RATE.REC<22,-1> = LAST.FLAG
            END
            LAST.FLAG = ALL.ZIPS<ZIP.NUM>
            LAST.BEG = ZIP.NUM
            LAST.END = ZIP.NUM
         END ELSE
*
* Have another same flag.
*
            LAST.END = ZIP.NUM           ; * Move end marker to curr. position.
         END
      NEXT

      RETURN




*----------------------------------------------------------------------
* EXTRACT.AUDIT.ZIPS
*
* SORT.ZIP.REC<1> = CODE
* SORT.ZIP.REC<2> = LOW
* SORT.ZIP.REC<3> = HIGH
*----------------------------------------------------------------------
EXTRACT.AUDIT.ZIPS:
*
* Init - Set all to FALSE
*
      ALL.ZIPS = 0
      FOR ZIP.NUM = 1 TO 999             ; * 999+1 = LAST MARKER
         ALL.ZIPS<ZIP.NUM> = FALSE
      NEXT ZIP.NUM
      ALL.ZIPS<1000> = NO

*
* Mark legitamate state ranges as 'NO'
*
      FOR X = 1 TO NUM.ZIPS
         FOR Y = ZIP.REC<2,X> TO ZIP.REC<3,X>
            ALL.ZIPS<Y> = NO
         NEXT Y
      NEXT X

*
* Loop though all zips and setup a Zip-to-State(with flags) table
*
* NOTE: Zip number 1000 is used for force a N in that position to write
*       out zip number 999 without any extra code.
*
* Do not modify zips that are set to FALSE - They are not legit. zip
* codes.
*
      NUM.AUDITS = DCOUNT(RATE.REC<20>, @VM)
      FOR AUDIT.NUM = 1 TO NUM.AUDITS
         FOR ZIP.NUM = RATE.REC<20,AUDIT.NUM> TO RATE.REC<21,AUDIT.NUM>
            IF ALL.ZIPS<ZIP.NUM> # FALSE THEN
               ALL.ZIPS<ZIP.NUM> = RATE.REC<22,AUDIT.NUM>
            END
         NEXT ZIP.NUM
      NEXT AUDIT.NUM

*
* Remove any FALSE flags - Make NO
*
      FOR ZIP.NUM = 1 TO 1000
         IF ALL.ZIPS<ZIP.NUM> = FALSE THEN ALL.ZIPS<ZIP.NUM> = NO
      NEXT ZIP.NUM

      RETURN


*----------------------------------------------------------------------
* SETUP.AUDIT.ZIPS
*
* SORT.ZIP.REC<1> = CODE
* SORT.ZIP.REC<2> = LOW
* SORT.ZIP.REC<3> = HIGH
*----------------------------------------------------------------------
SETUP.AUDIT.ZIPS:
*
* Scan though ZIP.REC and see if entire states are marked
*
*
      FOR X = 1 TO NUM.ZIPS
         YES.HIT = 0
         NO.HIT = 0

         FOR Y = ZIP.REC<2,X> TO ZIP.REC<3,X>
            BEGIN CASE
               CASE ALL.ZIPS<Y> = YES
                  YES.HIT+=1
               CASE ALL.ZIPS<Y> = NO
                  NO.HIT+=1
            END CASE
         NEXT Y

*
* Evaluate results... All Yes, All No, or Combos
*
         BEGIN CASE
*
* Did we hit both Yes's and No's
*
            CASE YES.HIT > 0 AND NO.HIT > 0
               ZIP.REC<4,X> = PARTIAL
*
* Did we hit Yes's
*
            CASE YES.HIT > 0
               ZIP.REC<4,X> = YES

*
* Did we hit No's
*
            CASE NO.HIT > 0
               ZIP.REC<4,X> = NO
         END CASE

      NEXT X

      RETURN


*=======================================================================
*
*                EFFECTIVE DATE RANGE ROUTINES
*
*=======================================================================

*----------------------------------------------------------------------
* Input Effective Date Range
*
*  Get the users selected Effective Date - Stores entry into
*  NEW.BEG.EFF.DATE and NEW.END.EFF.DATE
*
*  NEW.BEG.EFF.DATE = 0        ;* If Beg.Eff.Date was chosen these will
*  NEW.END.EFF.DATE = 0        ;* contain a non-zero value
*
*----------------------------------------------------------------------
INPUT.EFF.DATE: ***

*
* Init. return value varables
*
      NEW.BEG.EFF.DATE = 0               ; * If Beg.Eff.Date was chosen these will
      NEW.END.EFF.DATE = 0               ; * contain a non-zero value
      FAILURE=FALSE
      DATE.CHANGED = FALSE
      SAVE.EFF.DATE = TRUE

*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN
*
* Get an index to where in the B.DATE & E.DATE fields
*
      LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
*
* FIREWALL CODE:
*
         OPTIONS<3>=CLEAR
         OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE
         OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
         ERR.MSG = 'UNABLE TO "LOCATE ROUT.ZIP" WHEN ENTERING EFF.DATE ROUTINES'
         GOSUB ERRORS                    ; * Give programmer a beep!
         RETURN
      END
*
*
*
IED.1:
      GOSUB DSP.EFF.DATE.MENU
      GOSUB LIST.DATES

IED.2:
      IF EXIT.IT THEN GOTO IED.EXIT

      CRT @(0,14):' Enter Option :    '
      HELP = "OPTIONS: [H]=Help [X]=Back [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,14,MASK,'',Q,0,3,'','',1,16,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X'
            FAILURE=TRUE

         CASE QI = ''

*
* 1) Select Date Range
*
         CASE QI = '1'
            GOSUB SELECT.DATE
            IF FAILURE THEN
               GOSUB DSP.EFF.DATE.MENU
               GOTO IED.2
            END

*
* 2) Add Date Range
*
         CASE QI = '2'
            GOSUB ADD.DATES
            GOTO IED.1

*
* 3) Delete Date Range
*
         CASE QI = '3'
            GOSUB DELETE.DATE
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END

*
* 4) Edit Closing Date Range
*
         CASE QI = '4'
            GOSUB EDIT.CLOSING.DATE
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END

*
* 5) List Dates
*
         CASE QI = '5'
            GOSUB TOGGLE.DATE
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IED.1
               END ELSE
                  GOSUB DSP.EFF.DATE.MENU
                  GOTO IED.2
               END
            END

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=IED.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.EFF.DATE.MENU
            GOTO IED.2

         CASE 1
            CALL ELINE('Invalid option, valid options are "1","2","3","4" or "X".  Try Again.')
            GOTO IED.2
      END CASE

IED.EXIT:
*
* COMMON EXIT POINT... do any necessary clean up or screen region marking
* for refreshing.
*

*
* Redraw entire screen contents
*
      GOSUB DSP.ENTRY.SCN
      FOR Y = 1 TO NUM.OPTIONS
         IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
      NEXT Y
      RETURN



*----------------------------------------------------------------------
* Display Effective Date Menu
*----------------------------------------------------------------------
DSP.EFF.DATE.MENU: ***

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'Effective Date Range'
      CRT @(3, 5):'   Entry Options'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'1) Select Date Range'
      CRT @(1, 9):'2) Add Date Range'
      CRT @(1,10):'3) Delete Date Range'
      CRT @(1,11):'4) Edit Closeing Date Range'
      CRT @(1,12):'5) Toggle Enable/Disable'

      RETURN


*----------------------------------------------------------------------
* EDIT.CLOSING.DATE
*----------------------------------------------------------------------
EDIT.CLOSING.DATE: ***

      FAILURE=FALSE

      NUM.TABLES = DCOUNT(AUDIT.REC<2,ROUT.ZIP.INDEX>, @SVM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END

ECD.1:
      GOSUB DSP.EDIT.CLOSE.DATE.MENU

ECD.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]=Help [X]=Abort, Don't change anything [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI = ''

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ECD.HELP
            GOSUB DISPLAY.HELP
            GOTO ECD.1

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO ECD.2
            END ELSE
               GOSUB EDIT.CL.DATE
               IF NOT(FAILURE) THEN AUDIT.REC<3, ROUT.ZIP.INDEX, NUM.SEL> = CLOSE.DATE
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO ECD.2
      END CASE

      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN


*----------------------------------------------------------------------
* EDIT.CL.DATE:
*----------------------------------------------------------------------
EDIT.CL.DATE:

      CALL FB.DRAW.BOX(0,3,30,18,' ','')           ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')  ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')    ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  EDIT CLOSING DATE  ~~')

      OLD.CLOSE.DATE = AUDIT.REC<3,ROUT.ZIP.INDEX,NUM.SEL>

      CRT @(43, 9):' Closing Date Editing'
      CRT @(43,10):'##  BEG DATE - END DATE'
      CRT @(43,11):'-----------------------'
      CRT @(43,12):NUM.SEL'R%2':'  ':AUDIT.REC<2,ROUT.ZIP.INDEX,NUM.SEL>'D2/':' - '

ECLD.1:
      MASK = OLD.CLOSE.DATE'D2/'
      CRT @(0,22):"Enter the Closing Date for these Rates.":@(-4)
      HELP ="OPTIONS: [T]=Today [H]=Help [X]=Abort,Don't change [EX]=Exit Program"
      CALL GEN.IN(58,12,MASK,'DATE',Q,1,8,'','',2,58,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE
            GOTO ECLD.EXIT
*
* Todays date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            GOTO ECLD.1
*
* Exit routine
*
         CASE QI = 'X'
            GOTO ECLD.EXIT

         CASE QI = ''
            CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
            GOTO ECLD.1
      END CASE

      BEGIN.DATE = AUDIT.REC<2, ROUT.ZIP.INDEX, NUM.SEL>
      CLOSE.DATE = TRIM(Q)
      CRT @(58,12):CLOSE.DATE'D2/'

      IF CLOSE.DATE < BEGIN.DATE THEN
         CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
         GOTO ECLD.1
      END

      IF NOT(FAILURE) AND OLD.CLOSE.DATE # CLOSE.DATE THEN
         FOR T = 1 TO NUM.TABLES
            IF T # NUM.SEL THEN
               CHECK = 0
               IF CLOSE.DATE => AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK = 1
               IF CLOSE.DATE <= AUDIT.REC<3, ROUT.ZIP.INDEX, T> THEN CHECK +=1
               IF CHECK=2 THEN
                  CALL ELINE("Closing Date resides within a prior date range.  Try again.")
                  CLOSE.DATE = OLD.CLOSE.DATE
                  GOTO ECLD.1
               END

               CHECK = 0
               IF BEGIN.DATE < AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK = 1
               IF CLOSE.DATE => AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK +=1
               IF CLOSE.DATE > AUDIT.REC<3, ROUT.ZIP.INDEX, T> THEN CHECK +=1

               IF CHECK=3 THEN
                  CALL ELINE("Closing Date includes a prior date range.  Try again.")
                  CLOSE.DATE = OLD.CLOSE.DATE
                  GOTO ECLD.1
               END
            END
         NEXT
      END


ECLD.EXIT:
      RETURN



*----------------------------------------------------------------------
* DSP.EDIT.CLOSE.DATE.MENU
*----------------------------------------------------------------------
DSP.EDIT.CLOSE.DATE.MENU:

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'  Effective Ending'
      CRT @(3, 5):'    Date Editing'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'Please Choose the effective'
      CRT @(1, 9):'Date Range Num to change the'
      CRT @(1,10):'ending date on.'

      RETURN



*----------------------------------------------------------------------
* TOGGLE.DATE
*----------------------------------------------------------------------
TOGGLE.DATE: ***

      FAILURE=FALSE

      NUM.TABLES = DCOUNT(AUDIT.REC<2,ROUT.ZIP.INDEX>, @SVM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END

TD.1:
      GOSUB DSP.TOGGLE.DATE.MENU

TD.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]=Help [X]=Abort, Don't change anything [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI = ''

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=TD.HELP
            GOSUB DISPLAY.HELP
            GOTO TD.1

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO TD.2
            END ELSE
               BEGIN CASE
                  CASE AUDIT.REC<10, ROUT.ZIP.INDEX, NUM.SEL>='DISABLE'
                     AUDIT.REC<10, ROUT.ZIP.INDEX, NUM.SEL>='ENABLE'
                  CASE 1
                     AUDIT.REC<10, ROUT.ZIP.INDEX, NUM.SEL>='DISABLE'
               END CASE
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO TD.2
      END CASE


      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN


*----------------------------------------------------------------------
* DSP.TOGGLE.DATE.MENU
*----------------------------------------------------------------------
DSP.TOGGLE.DATE.MENU:
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'   Effective Date'
      CRT @(3, 5):'       Toggle'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'Please Choose an Effective'
      CRT @(1, 9):'Date Range Num to change the'
      CRT @(1,10):'Enable/Disable flag.'
      RETURN





*----------------------------------------------------------------------
* DELETE.DATE
*----------------------------------------------------------------------
DELETE.DATE: ***

      FAILURE=FALSE

      NUM.TABLES = DCOUNT(AUDIT.REC<2,ROUT.ZIP.INDEX>, @SVM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END

DD.1:
      GOSUB DSP.DELETE.DATE.MENU

DD.2:
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS: [H]=Help [X]=Abort, Don't delete anything [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI = ''

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=DD.HELP
            GOSUB DISPLAY.HELP
            GOTO DD.1

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO DD.2
            END ELSE
               YN.MSG = 'DELETE Date # ':NUM.SEL:' and associated Rate Tables? :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting Rate Tables .... Please wait...':@(-4):
*
* Remove OLD Rate Tables...
*
                  DEL.CARRIER.ID = CARRIER.ID
                  DEL.CLIENT.ID = CLIENT.ID
                  DEL.ZIP = AUDIT.REC<8,ROUT.ZIP.INDEX>
                  DEL.DATE = AUDIT.REC<2,ROUT.ZIP.INDEX,NUM.SEL>
                  GOSUB REMOVE.RATE.TABLE
                  SAVE.EFF.DATE = FALSE
                  CRT @(0,22):@(-4):

*
* Check to see if we are deleting the one we are sitting on.
*
                  T.HITS = 0

                  IF AUDIT.REC<2,ROUT.ZIP.INDEX,NUM.SEL>=BEG.EFF.DATE THEN T.HITS+=1
                  IF AUDIT.REC<3,ROUT.ZIP.INDEX,NUM.SEL>=END.EFF.DATE THEN T.HITS+=1

*
* Go ahead and remove the Dates selected.
*
                  DEL AUDIT.REC<2,ROUT.ZIP.INDEX,NUM.SEL>
                  DEL AUDIT.REC<3,ROUT.ZIP.INDEX,NUM.SEL>

*
* Remove the Enable/Disable flag
*
                  DEL AUDIT.REC<10,ROUT.ZIP.INDEX,NUM.SEL>

*
* Did we delete the one we were sitting on?
*
                  IF T.HITS = 2 THEN
*
* Yes we are deleteing the ones we are set to..
* then choose a new one... Choose the first one
* and continue.
*
                     NEW.BEG.EFF.DATE = AUDIT.REC<2,ROUT.ZIP.INDEX,1>
                     NEW.END.EFF.DATE = AUDIT.REC<3,ROUT.ZIP.INDEX,1>

                     BEG.EFF.DATE = NEW.BEG.EFF.DATE
                     END.EFF.DATE = NEW.END.EFF.DATE
                     GOSUB BEG.EFF.DATE.CHANGED
                  END
               END ELSE
                  FAILURE = TRUE
               END
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO DD.2
      END CASE


      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN


*----------------------------------------------------------------------
* DSP.DELETE.DATE.MENU
*----------------------------------------------------------------------
DSP.DELETE.DATE.MENU:
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'   Effective Date'
      CRT @(3, 5):'      Removal'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'Please Choose an Effective'
      CRT @(1, 9):'Date Range Num to DELETE.'
      RETURN


*----------------------------------------------------------------------
* SELECT.DATE
*----------------------------------------------------------------------
SELECT.DATE: ***

      NEW.BEG.EFF.DATE = 0
      NEW.END.EFF.DATE = 0
      FAILURE = FALSE

      NUM.TABLES = DCOUNT(AUDIT.REC<2,ROUT.ZIP.INDEX>, @SVM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Date Ranges available to select from - Add a Date Range first.')
         FAILURE = TRUE
         RETURN
      END

SD.1:
      GOSUB DSP.SELECT.DATE.MENU

SD.2:
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS:  [H]=Help [X]=Back [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI = ''
            FAILURE=TRUE

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=SD.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.SELECT.DATE.MENU
            GOTO IED.2

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF NUM.SEL < 1 OR NUM.SEL > NUM.TABLES THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO SD.2
            END ELSE
               NEW.BEG.EFF.DATE = AUDIT.REC<2,ROUT.ZIP.INDEX,NUM.SEL>
               NEW.END.EFF.DATE = AUDIT.REC<3,ROUT.ZIP.INDEX,NUM.SEL>
               DATE.CHANGED = TRUE
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO SD.2
      END CASE


      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN

*----------------------------------------------------------------------
* DSP.SELECT.DATE.MENU
*----------------------------------------------------------------------
DSP.SELECT.DATE.MENU:

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'   Effective Date'
      CRT @(3, 5):'     Selection'
      CRT @(3, 6):'===================='

      CRT @(0, 8):' Please Choose an Effective'
      CRT @(0, 9):' Date Range Num to switch to.'

      RETURN


*----------------------------------------------------------------------
* LIST.DATES
*----------------------------------------------------------------------
LIST.DATES: ***

      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')
      CALL FB.PRINT.CENT(30,30+49,3,'~~ EFFECTIVE DATES ON FILE ~~')
*   CRT @(31,4):' ##  BEG DATE/END DATE   ##  BEG DATE/END DATE ':
      CRT @(31,4):' ## F BEG DATE/END DATE  ## F BEG DATE/END DATE':

*
* Count number of dates
*
      NUM.TABLES = DCOUNT(AUDIT.REC<2,ROUT.ZIP.INDEX>, @SVM)
      IF NUM.TABLES > 0 THEN
*
* Draw Left side
*
         POS = 1
         Y.POS = 6
         X.POS = 32
         EXIT.LD = FALSE

         LOOP
            TEMP = POS'R%2':' '
            IF AUDIT.REC<10,ROUT.ZIP.INDEX,POS> = 'DISABLE' THEN
               TEMP:='D '
            END ELSE
               TEMP:='E '
            END
            TEMP:= AUDIT.REC<2,ROUT.ZIP.INDEX,POS>'D2/':'-'  ; * Beg Eff Date
            TEMP:= AUDIT.REC<3,ROUT.ZIP.INDEX,POS>'D2/'      ; * End Eff Date

            CRT @(X.POS,Y.POS):TEMP
            BEGIN CASE
*
*  End of list?
*
               CASE POS = NUM.TABLES
                  EXIT.LD = TRUE
*
*  Finished Column 2??
*
               CASE Y.POS = 20 AND X.POS = 56
                  EXIT.LD = TRUE
*
*  Finished Column 1??
*
               CASE Y.POS = 20
                  POS+=1                 ; * Move to next entry
                  Y.POS=6                ; * Reset to top of Col #2
                  X.POS=56               ; * Set XPosition of screen for col 2
*
* Default - Inc Position and Entry Number
*
               CASE 1
                  POS+=1
                  Y.POS+=1
            END CASE
         WHILE NOT(EXIT.LD)
         REPEAT

         IF NUM.TABLES > 30 THEN CALL FB.PRINT.CENT(30,79,21,REVON:'* Unable to display all entries *':REVOFF)

      END ELSE
         CALL FB.PRINT.CENT(31,79,12,'* No Date Ranges Entered *')
      END

      RETURN



*----------------------------------------------------------------------
* ADD.DATES
*----------------------------------------------------------------------
ADD.DATES: ***

      CALL FB.DRAW.BOX(0,3,30,18,' ','')           ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')  ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')    ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  ADD DATE RANGE  ~~')

      TABLE.NUM = 0
      TABLE.BACK = 0
      NEW.TABLE = 1
      NUM.TABLES = DCOUNT(AUDIT.REC<2,ROUT.ZIP.INDEX>, @SVM)

      IF NUM.TABLES > 0 THEN
*
* Locate any OPEN tables that have not been closed yet
*
         Y = 1
         LOOP
         WHILE Y<=NUM.TABLES DO
            IF AUDIT.REC<3,ROUT.ZIP.INDEX,Y> = '' THEN TABLE.NUM = Y   ; * Found Open
            Y+=1
         REPEAT

*----------------------------
* Was a NON Closed Table Found?
*----------------------------
         IF TABLE.NUM > 0 THEN
AD.0:
            CRT @(43, 9):'   Close Prior Table'
            CRT @(43,10):'##  BEG DATE - END DATE'
            CRT @(43,11):'-----------------------'
            CRT @(43,12):TABLE.NUM'R%2':'  ':AUDIT.REC<2,ROUT.ZIP.INDEX,TABLE.NUM>'D2/':' - '
AD.1:
            MASK = 'MM/DD/YY'
            CRT @(0,22):"Enter a Closing Date for these Rates.":@(-4)
            IF TABLE.BACK THEN
               HELP ="OPTIONS: [T]=Today [H]=Help [X]=Abort,Don't change [EX]=Exit Program"
            END ELSE
               HELP ="OPTIONS: [T]=Today [H]=Help [X]=Exit Back [EX]=Exit Program"
            END
            CALL GEN.IN(58,12,MASK,'DATE',Q,1,8,'','',2,-8,12,0,QI,HELP,0,23)
            QI = OCONV(QI,'MCU')
            BEGIN CASE
*
* Exit program
*
               CASE QI = 'EX'
                  FAILURE=TRUE
                  EXIT.IT=TRUE
                  RETURN
*
* Todays date
*
               CASE QI = 'T'
                  Q = DATE()
*
* Help
*
               CASE QI='?' OR QI='H'
                  HELP.LINES=CPT.HELP
                  GOSUB DISPLAY.HELP
                  GOTO AD.1
*
* Exit routine
*
               CASE QI = 'X'
                  GOTO AD.EXIT

               CASE QI = ''
                  CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
                  GOTO AD.1
            END CASE

            BEGIN.DATE = AUDIT.REC<2, ROUT.ZIP.INDEX, TABLE.NUM>
            CLOSE.OLD.DATE = TRIM(Q)
            CRT @(58,12):CLOSE.OLD.DATE'D2/'

            IF CLOSE.OLD.DATE < BEGIN.DATE THEN
               CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
               GOTO AD.1
            END

            FOR T = 1 TO NUM.TABLES
               IF T # TABLE.NUM THEN
                  CHECK = 0
                  IF CLOSE.OLD.DATE => AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE <= AUDIT.REC<3, ROUT.ZIP.INDEX, T> THEN CHECK +=1
                  IF CHECK=2 THEN
                     CALL ELINE("Closing Date resides within a prior date range.  Try again.")
                     GOTO AD.1
                  END

                  CHECK = 0
                  IF BEGIN.DATE < AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE => AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK +=1
                  IF CLOSE.OLD.DATE > AUDIT.REC<3, ROUT.ZIP.INDEX, T> THEN CHECK +=1
                  IF CHECK=3 THEN
                     CALL ELINE("Closing Date includes a prior date range.  Try again.")
                     GOTO AD.1
                  END
               END
            NEXT
         END ELSE
*
* An open table was not found... Get the closing date
* of previous table to avoid over lap on new opening table.
*
            CLOSE.OLD.DATE = AUDIT.REC<3,ROUT.ZIP.INDEX,NUM.TABLES>
         END
      END

*----------------------------
* Add New Table - OPEN DATE
*----------------------------
AD.11:
      TABLE.BACK = 0
      CRT @(43, 9):'    Adding New Table'
      CRT @(43,10):'##  BEG DATE - END DATE'
      CRT @(43,11):'-----------------------'
      IF NUM.TABLES > 0 THEN
         TEMP = AUDIT.REC<2,ROUT.ZIP.INDEX,NUM.TABLES>'D2/'
         TEMP:= ' - ':AUDIT.REC<3,ROUT.ZIP.INDEX,NUM.TABLES>'D2/'
      END ELSE
         TEMP = 'No prior tables'
      END
      NEW.TABLE = NUM.TABLES+1
      CRT @(43,12):NUM.TABLES'R%2':'  ':TEMP
      CRT @(43,13):NEW.TABLE'R%2':STR(' ',23)

AD.2:
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter the Opening Date for the New Rates. ":@(-4)
      HELP = "OPTIONS: [T]=Today [H]=Help [X]=Back [EX]=Exit Program"
      CALL GEN.IN(47,13,MASK,'DATE',Q,1,8,'','',2,-8,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* EXIT program
*
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE
            GOTO AD.EXIT
*
* Today's Date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ADR.HELP
            GOSUB DISPLAY.HELP
            GOTO AD.2

*
* Back up
*
         CASE QI = 'X'
            IF TABLE.NUM > 0 THEN
               TABLE.BACK = 1
               GOTO AD.0
            END ELSE
               GOTO AD.EXIT
            END
         CASE QI = ''
            CALL ELINE('Invalid Option. Valid options are "T", "X", and a date formatted MM/DD/YY.')
            GOTO AD.2
      END CASE

      OPEN.DATE = TRIM(Q)
      CRT @(47,13):OPEN.DATE'D2/':' - '

      FOR T = 1 TO NUM.TABLES
         CHECK = 0
         IF OPEN.DATE => AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK =1
         IF OPEN.DATE <= AUDIT.REC<3, ROUT.ZIP.INDEX, T> THEN CHECK+=1
         IF CHECK=2 THEN
            CALL ELINE("Invalid Date - The Opening date resides within a prior date range.")
            GOTO AD.2
         END
      NEXT


*----------------------------
* Add New Table - CLOSE DATE
*----------------------------
AD.3:
      CRT @(58,15):STR(' ',10)
      MASK = 'MM/DD/YY'
      CRT @(0,22):"Enter a Closing Date for the New Rates.":@(-4)
      HELP = "OPTIONS: ''-Leave Open [T]=TDay [H]=Help [X]=Back [EX]=Exit Program"
      CALL GEN.IN(58,13,MASK,'DATE',Q,0,8,'','',2,-8,13,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* Exit Program
*
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE
            GOTO AD.EXIT

*
* Todays Date
*
         CASE QI = 'T'
            Q = DATE()
*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ECD.HELP
            GOSUB DISPLAY.HELP
            GOTO AD.3

*
* Back up
*
         CASE QI = 'X'
            GOTO AD.11

         CASE QI = ''
            Q = ''
      END CASE

      CLOSE.DATE = Q
      CRT @(58,13):CLOSE.DATE'D2/'

      IF CLOSE.DATE # '' THEN
         IF CLOSE.DATE < OPEN.DATE THEN
            CALL ELINE("Invalid Date - The Closing date can't be before the opening date!")
            GOTO AD.3
         END
      END

      FOR T = 1 TO NUM.TABLES
         CHECK = 0
         IF CLOSE.DATE => AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK = 1
         IF CLOSE.DATE <= AUDIT.REC<3, ROUT.ZIP.INDEX, T> THEN CHECK +=1
         IF CHECK=2 THEN
            CALL ELINE("Closing Date resides within a prior date range.  Try again.")
            GOTO AD.3
         END

         CHECK = 0
         IF OPEN.DATE < AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK = 1
         IF CLOSE.DATE => AUDIT.REC<2, ROUT.ZIP.INDEX, T> THEN CHECK +=1
         IF CLOSE.DATE > AUDIT.REC<3, ROUT.ZIP.INDEX, T> THEN CHECK +=1
         IF CHECK=3 THEN
            CALL ELINE("Closing Date includes a prior date range.  Try again.")
            GOTO AD.3
         END
      NEXT

      IF TABLE.NUM > 0 THEN
         AUDIT.REC<3,ROUT.ZIP.INDEX,TABLE.NUM> = CLOSE.OLD.DATE
      END

      AUDIT.REC<2,ROUT.ZIP.INDEX,NEW.TABLE> = OPEN.DATE
      AUDIT.REC<3,ROUT.ZIP.INDEX,NEW.TABLE> = CLOSE.DATE
      AUDIT.REC<10,ROUT.ZIP.INDEX,NEW.TABLE> = 'DISABLE'

*
* Return new entry as a date.eff to switch to.
*
      NEW.BEG.EFF.DATE = OPEN.DATE
      NEW.END.EFF.DATE = CLOSE.DATE
      DATE.CHANGED = TRUE

      NUM.TABLES = DCOUNT(AUDIT.REC<2, ROUT.ZIP.INDEX>, @SVM)
      CHANGES.MADE = 1
      CRT @(0,22):@(-4)
      CRT @(46,21):'[ Press Enter ]'
      HELP='Press the ENTER key to continue.'
      CALL GEN.IN(60,21,'','',Q,0,1,'','',1,60,21,0,QI,HELP,0,23)

AD.EXIT:
*
* COMMON EXIT POINT -
*
      CRT @(0,22):@(-4)

      RETURN



*----------------------------------------------------------------------
* ENABLE.EFF.DATE
*----------------------------------------------------------------------
ENABLE.EFF.DATE:

      LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
         RETURN
      END

      LOCATE BEG.EFF.DATE IN AUDIT.REC<2,ROUT.ZIP.INDEX> SETTING EFF.DATE.INDEX ELSE
         RETURN
      END

      AUDIT.REC<10,ROUT.ZIP.INDEX,EFF.DATE.INDEX> = 'ENABLE'

      RETURN


*----------------------------------------------------------------------
* DISABLE.EFF.DATE
*----------------------------------------------------------------------
DISABLE.EFF.DATE:

      LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
         RETURN
      END

      LOCATE BEG.EFF.DATE IN AUDIT.REC<2,ROUT.ZIP.INDEX> SETTING EFF.DATE.INDEX ELSE
         RETURN
      END

      AUDIT.REC<10,ROUT.ZIP.INDEX,EFF.DATE.INDEX> = 'DISABLE'

      RETURN


*----------------------------------------------------------------------
* GET.EFF.DATE.STATUS
*----------------------------------------------------------------------
GET.EFF.DATE.STATUS:

      LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
         RETURN
      END

      LOCATE BEG.EFF.DATE IN AUDIT.REC<2,ROUT.ZIP.INDEX> SETTING EFF.DATE.INDEX ELSE
         RETURN
      END

      BEGIN CASE
         CASE AUDIT.REC<10,ROUT.ZIP.INDEX,EFF.DATE.INDEX> = 'DISABLE'
            EFF.DATE.ENABLED = FALSE
         CASE 1
            EFF.DATE.ENABLED = TRUE
      END CASE

      RETURN


*=======================================================================
*
*                ROUTING ZIP ROUTINES
*
*=======================================================================


*----------------------------------------------------------------------
* INPUT.ROUT.ZIP
*----------------------------------------------------------------------
INPUT.ROUT.ZIP: ***

*
* Init. return value varables
*
      NEW.ROUT.ZIP = 0
      FAILURE=FALSE
      SAVE.ROUT.ZIP = TRUE
      ROUT.ZIP.CHANGED = FALSE

*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN

IRZ.1:
      IF NOT(EXIT.IT) THEN
         GOSUB DSP.ROUT.ZIPS.MENU
         GOSUB LIST.ROUT.ZIPS
      END

IRZ.2:
      IF EXIT.IT THEN GOTO IRZ.EXIT

      CRT @(0,14):' Enter Option :    '
      HELP = "OPTIONS: [H]=Help [X]=Back [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,14,MASK,'',Q,0,3,'','',1,16,14,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X'
            FAILURE=TRUE

         CASE QI = ''

*
* Select Routing Zip
*
         CASE QI = '1'
            GOSUB SELECT.ROUT.ZIP
            IF FAILURE THEN
               GOSUB DSP.ROUT.ZIPS.MENU
               GOTO IRZ.2
            END

*
* Add Routing Zip
*
         CASE QI = '2'
            LOCATE 'ALL' IN AUDIT.REC<8> SETTING WHERE THEN
               CALL ELINE('The Routing Zips incld "ALL" - You can not add a zip.  Delete "ALL" first!')
            END ELSE
               GOSUB ADD.ROUT.ZIP
            END
            GOTO IRZ.1

*
* Delete Routing Zip
*
         CASE QI = '3'
            GOSUB DELETE.ROUT.ZIP
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IRZ.1
               END ELSE
                  GOSUB DSP.ROUT.ZIPS.MENU
                  GOTO IRZ.2
               END
            END

*
* Toggle Enable/Disable Routing Zip
*
         CASE QI = '4'
            GOSUB TOGGLE.ROUT.ZIP
            IF NOT(EXIT.IT) THEN
               IF NOT(FAILURE) THEN
                  GOTO IRZ.1
               END ELSE
                  GOSUB DSP.ROUT.ZIPS.MENU
                  GOTO IRZ.2
               END
            END

*
* Create a Routing Zip with Contents from another Routing Zip
*
*       CASE QI = '5'
*            LOCATE 'ALL' IN AUDIT.REC<8> SETTING WHERE THEN
*                CALL ELINE('The Routing Zips incld "ALL" - You can not add a zip.  Delete "ALL" first!')
*            END ELSE
*                GOSUB COPY.ROUT.ZIP
*            END

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=IRZ.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.ROUT.ZIPS.MENU
            GOTO IRZ.2

         CASE 1
            CALL ELINE('Invalid option, valid options are "1","2","3","4" or "X".  Try Again.')
            GOTO IRZ.2
      END CASE

IRZ.EXIT:
*
* COMMON EXIT POINT... do any necessary clean up or screen region marking
* for refreshing.
*

*
* Redraw entire screen contents
*
      GOSUB DSP.ENTRY.SCN
      FOR Y = 1 TO NUM.OPTIONS
         IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
      NEXT Y
      RETURN



*----------------------------------------------------------------------
* Display Effective Date Menu
*----------------------------------------------------------------------
DSP.ROUT.ZIPS.MENU: ***

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'Routing Zip Maintance'
      CRT @(3, 5):'    Entry Options'
      CRT @(3, 6):'====================='

      CRT @(1, 8):'1) Select Routing Zip'
      CRT @(1, 9):'2) Add a new Routing Zip'
      CRT @(1,10):'3) Delete a Routing Zip'
      CRT @(1,11):'4) Toggle Enable/Disable Zip'
*    CRT @(1,12):'5) Copy Rout Zip to a New Zip'

      RETURN


*----------------------------------------------------------------------
* TOGGLE.ROUT.ZIP
*----------------------------------------------------------------------
TOGGLE.ROUT.ZIP: ***

      FAILURE=FALSE

      NUM.TABLES = DCOUNT(AUDIT.REC<8>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Routing Zips available to select from - Add a Routing Zip first.')
         FAILURE = TRUE
         RETURN
      END

TRZ.1:
      GOSUB DSP.TOGGLE.ZIP.MENU

TRZ.2:
      CRT @(0,12):' Enter Option :   '
      HELP = "OPTIONS: [H]=Help [X]=Abort, Don't change anything [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,12,MASK,'',Q,0,3,'','',1,16,12,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI = ''

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=TRZ.HELP
            GOSUB DISPLAY.HELP
            GOTO TRZ.1

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO TRZ.2
            END ELSE
               BEGIN CASE
                  CASE AUDIT.REC<9,NUM.SEL>='DISABLE'
                     AUDIT.REC<9,NUM.SEL>='ENABLE'
                  CASE 1
                     AUDIT.REC<9,NUM.SEL>='DISABLE'
               END CASE
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO TRZ.2
      END CASE


      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN

*----------------------------------------------------------------------
* DSP.TOGGLE.ZIP.MENU
*----------------------------------------------------------------------
DSP.TOGGLE.ZIP.MENU:
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'    Routing Zip  '
      CRT @(3, 5):'      Toggle'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'Please Choose a Routing'
      CRT @(1, 9):'Zip Num to TOGGLE the'
      CRT @(1,10):'Enable/Disable flag.'
      RETURN



*----------------------------------------------------------------------
* DELETE.ROUT.ZIP
*----------------------------------------------------------------------
DELETE.ROUT.ZIP: ***

      FAILURE=FALSE

      NUM.TABLES = DCOUNT(AUDIT.REC<8>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Routing Zips available to select from - Add a Routing Zip first.')
         FAILURE = TRUE
         RETURN
      END

DRZ.1:
      GOSUB DSP.DELETE.ZIP.MENU

DRZ.2:
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS: [H]=Help [X]=Abort, Don't delete anything [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE

         CASE QI = 'X' OR QI = ''

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=DRZ.HELP
            GOSUB DISPLAY.HELP
            GOTO DRZ.1

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO DRZ.2
            END ELSE
               YN.MSG = 'DELETE Routing Zip # ':NUM.SEL:' and associated Rate Tables? :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting Rate Tables .... Please wait...':@(-4):
*
* Check to see if we are deleting the one we are sitting on.
*

                  DEL.ZIP = AUDIT.REC<8,NUM.SEL>
                  DEL.CARRIER.ID = CARRIER.ID
                  DEL.CLIENT.ID = CLIENT.ID
                  T.NUM.DATES = DCOUNT(AUDIT.REC<2,NUM.SEL>, @SVM)
                  FOR T.X = 1 TO T.NUM.DATES
                     DEL.DATE = AUDIT.REC<2,NUM.SEL,T.X>
                     SAVE.ROUT.ZIP = FALSE
                     GOSUB REMOVE.RATE.TABLE
                  NEXT T.X
                  CRT @(0,22):@(-4):


*
* Go ahead and remove the Routing Zip selected.
*
                  DEL AUDIT.REC<8,NUM.SEL>

*
* Remove the Routing Zip status flag (Enabled/Disabled)
*
                  DEL AUDIT.REC<9,NUM.SEL>

*
* Remove all the Effective Date ranges for the Routing Zip
*
                  DEL AUDIT.REC<2,NUM.SEL>
                  DEL AUDIT.REC<3,NUM.SEL>


*
* Did we delete the one we were sitting on?
*
                  IF DEL.ZIP = ROUT.ZIP THEN
*
* Yes we are deleteing the ones we are set to..
* then choose a new one... Choose the first one
* and continue.
*
                     NEW.ROUT.ZIP = AUDIT.REC<8,1>
                     ROUT.ZIP = NEW.ROUT.ZIP
                     GOSUB ROUT.ZIP.CHANGED
                  END
               END ELSE
                  FAILURE = TRUE
               END
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO DRZ.2
      END CASE


      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN




*----------------------------------------------------------------------
* DSP.DELETE.DATE.MENU
*----------------------------------------------------------------------
DSP.DELETE.ZIP.MENU:
      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'    Routing Zip  '
      CRT @(3, 5):'      Removal'
      CRT @(3, 6):'===================='

      CRT @(1, 8):'Please Choose a Routing'
      CRT @(1, 9):'Zip Num to DELETE.'
      RETURN


*----------------------------------------------------------------------
* SELECT.ROUT.ZIP
*----------------------------------------------------------------------
SELECT.ROUT.ZIP: ***

      NEW.ROUT.ZIP = 0
      FAILURE = FALSE

      NUM.TABLES = DCOUNT(AUDIT.REC<8>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Audit Zip available to select from - Add an Audit Zip first.')
         FAILURE = TRUE
         RETURN
      END

SRZ.1:
      GOSUB DSP.SELECT.ZIP.MENU

SRZ.2:
      CRT @(0,11):' Enter Option :   '
      HELP = "OPTIONS:  [H]=Help [X]=Back [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
*
* Terminate Program
*
         CASE QI = 'EX'
            EXIT.IT=TRUE

*
* Exit routine
*
         CASE QI = 'X' OR QI = ''
            FAILURE=TRUE

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=SRZ.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.SELECT.ZIP.MENU
            GOTO SRZ.2

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF NUM.SEL < 1 OR NUM.SEL > NUM.TABLES THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO SRZ.2
            END ELSE
               NEW.ROUT.ZIP = AUDIT.REC<8,NUM.SEL>
               ROUT.ZIP.CHANGED = TRUE
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO SRZ.2
      END CASE


      CALL FB.DRAW.BOX(0,3,30,18,' ','')

      RETURN

*----------------------------------------------------------------------
* DSP.SELECT.ZIP.MENU
*----------------------------------------------------------------------
DSP.SELECT.ZIP.MENU:

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(3, 4):'    Routing Zip  '
      CRT @(3, 5):'     Selection'
      CRT @(3, 6):'===================='

      CRT @(0, 8):' Please Choose a Routing Zip'
      CRT @(0, 9):' Number to switch to.'

      RETURN




*----------------------------------------------------------------------
* COPY.ROUT.ZIP
*----------------------------------------------------------------------
COPY.ROUT.ZIP: ***

      NEW.ROUT.ZIP = 0
      FAILURE = FALSE
      TABLE.NUM = 0
      TABLE.BACK = 0

      NUM.TABLES = DCOUNT(AUDIT.REC<8>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No Audit Zip available to select from - Add an Audit Zip first.')
         FAILURE = TRUE
         RETURN
      END

CRZ.1:
      GOSUB DSP.COPY.ZIP.MENU

CRZ.2:
      CRT @(16,11):SPACE(12):
      HELP = "OPTIONS:  [H]=Help [X]=Back [EX]=Exit Program"
      MASK = 'X '

      CALL GEN.IN(16,11,MASK,'',Q,0,3,'','',1,16,11,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
*
* Terminate Program
*
         CASE QI = 'EX'
            EXIT.IT=TRUE
            FAILURE=TRUE
            RETURN

*
* Exit routine
*
         CASE QI = 'X' OR QI = ''
            FAILURE=TRUE

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=CRZ.HELP
            GOSUB DISPLAY.HELP
            GOSUB DSP.SELECT.ZIP.MENU
            GOTO CRZ.2

         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF NUM.SEL < 1 OR NUM.SEL > NUM.TABLES THEN
               CALL ELINE('Selection ouf of range.  1-':NUM.TABLES:' only.')
               GOTO CRZ.2
            END ELSE
               SOURCE.ZIP = AUDIT.REC<8,NUM.SEL>
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO CRZ.2
      END CASE

*
*
*
*
      CRT @(16,11):SOURCE.ZIP:'  (':NUM.SEL:')'
      NEW.TABLE = 1

*
* Add New Table - OPEN DATE
*
CRZ.4:
      TABLE.BACK = 0

CRZ.5:
      HELP = "Enter a new Routing Zip Code found on a bill. [X]=Back [EX]=Exit Program"
      MASK='------'
      CALL GEN.IN(16,13,MASK,'',Q,0,6,'L','',2,16,13,0,QI,HELP,0,23)

      QI=TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE
            RETURN

*
* Exit routine
*
         CASE QI='X'
            GOTO CRZ.2

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ARZ.HELP
            GOSUB DISPLAY.HELP
            GOTO CRZ.5

         CASE QI=''
            CALL ELINE('You must enter a Routing Zip')
            GOTO CRZ.4

         CASE LEN(QI)=5 AND QI MATCH '5N' ; NULL

         CASE LEN(QI)=6 AND QI MATCH('1A1N1A1N1A1N') ; NULL

         CASE QI='ALL'
            IF NUM.TABLES THEN
               CALL ELINE('Copying a Zip to a Zip called "ALL" is a stupid operation! Try Again!')
               GOTO IRZ.1
            END

         CASE QI='OTHER'
            LOCATE 'ALL' IN AUDIT.REC<8> SETTING WHERE THEN
               CALL ELINE('The Zip Code entry "ALL" already exists!  You can not add "OTHER" with "ALL"')
               GOTO CRZ.4
            END

         CASE 1
            CALL ELINE('Must be NNNNN for USA, ANANAN for Canadian, "ALL" or "OTHER"')
            GOTO IRZ.1
      END CASE

*
* Is the zip valid?
*
      IF QI # 'ALL' AND QI # 'OTHER' THEN
         CRT @(0,22):'Checking Zip Code with PCMILER - Please wait.':@(-4):
         CRT @(0,23):@(-4):
         VIN='BOTH'
         VIN<2>=CH.NUM
         VIN<3>=Q:@VM:71135
         VIN<4>=PCMILLER.READ.FILE       ; * Skip File Read ..... Look in PCMILER
         VIN<8>=CLIENT.ID                ; * JMK01
         VIN<9>=CARRIER.ID               ; * JMK01
         CALL PCMILER.BETA(VIN,VOUT,F.PCIN,F.PCOUT,F.MILEAGE)
         MILEAGE=VOUT<1>
         MSG=VOUT<2>'L#5'
         IF OCONV(MSG,'MCU') = 'ERROR' THEN
            CALL ELINE('PCMILER Reports that zip ':Q:' is an unknown Zip Code.  Please check it')
            GOTO CRZ.5
         END
      END ELSE
*
* Make sure 'ALL' and 'OTHER' are upper case
*
         Q = QI
      END

*
* Does the zip already exists in our list?
*
      LOCATE Q IN AUDIT.REC<8> SETTING WHERE THEN
         CALL ELINE(' Zip code ':Q:' has already been entered - Please enter a different one.')
         GOTO CRZ.5
      END

*
* Record it!
*
      DEST.ZIP=Q


*    AUDIT.REC<8,-1> = Q
*    AUDIT.REC<9,-1> = 'DISABLE'
*    NUM.TABLES = DCOUNT(AUDIT.REC<8>, @VM)

      HELP='Press the ENTER key to continue.'
      CALL GEN.IN(60,21,'','',Q,0,1,'','',1,60,21,0,QI,HELP,0,23)

CRZ.EXIT:
*
* COMMON EXIT POINT -
*
      CALL FB.DRAW.BOX(0,3,30,18,' ','')


      RETURN


*----------------------------------------------------------------------
* DSP.COPY.ZIP.MENU
*----------------------------------------------------------------------
DSP.COPY.ZIP.MENU:

      CALL FB.DRAW.BOX(0,3,30,18,' ','')
      CRT @(2, 4):' Routing Zip Selection'
      CRT @(2, 5):'   to copy conents'
      CRT @(2, 6):'======================='

      CRT @(0, 8):' Please Choose a Routing Zip'
      CRT @(0, 9):' Number to copy.'

      CRT @(0,11):' Source Zip # :   '

      CRT @(0,13):' Destination  :           '

      RETURN




*----------------------------------------------------------------------
* LIST.ROUT.ZIPS
*----------------------------------------------------------------------
LIST.ROUT.ZIPS: ***

*
* Init variables
*
      PAGE.NUM =1
      LRZ.ROW.NUM=1
      LRZ.MAX.ROWS=15
      LRZ.START.ROW=6

      N.ZIPS = DCOUNT(AUDIT.REC<8>, @VM)
      NUM.PAGES = INT(N.ZIPS/LRZ.MAX.ROWS)
      IF NUM.PAGES < (N.ZIPS/LRZ.MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN PAGE.NUM = 1

*
* Display Heading
*
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')

      CRT @(31,3):' ~~      ROUTING ZIPS       PAGE # ':PAGE.NUM'R#2':' OF ':NUM.PAGES'R#2':' ~~ '
      CRT @(31,4):'  ##   ZIP   F   CITY, STATE '

      IF N.ZIPS < 1 THEN
         CALL FB.PRINT.CENT(30,79,11,'** No Routing Zips On File **')
         FAILURE = TRUE
         RETURN
      END


*
* Display current page
*
      LRZ.POS = (PAGE.NUM-1)*LRZ.MAX.ROWS
      LRZ.ROW = LRZ.START.ROW

      EXIT.LRZ = FALSE

      LOOP
         LRZ.POS+=1
         ZIP = AUDIT.REC<8,LRZ.POS>
         TEMP = '  ':LRZ.POS'R%2':'  ':ZIP'L#6'
         IF AUDIT.REC<9,LRZ.POS> = 'DISABLE' THEN
            TEMP:=' D  '
         END ELSE
            TEMP:=' E  '
         END
         IF ZIP # 'ALL' AND ZIP # 'OTHER' THEN
            CALL FB.READ.ZIP(ZIP, DEST.CITY, DEST.STATE)
            IF DEST.CITY # '' THEN TEMP:= ' (':DEST.CITY:', ':DEST.STATE:')'
         END
         TEMP = TEMP'L#47'

         CRT @(31,LRZ.ROW):TEMP
         BEGIN CASE
*
*  End of list?
*
            CASE LRZ.POS = N.ZIPS
               EXIT.LRZ = TRUE
*
*  Finished the page?
*
            CASE LRZ.ROW.NUM = LRZ.MAX.ROWS
               EXIT.LRZ = TRUE
               IF LRZ.POS < N.ZIPS THEN
                  TEMP = REVON:'* Continued on next page *':REVOFF
               END ELSE
                  TEMP = REVON:'* End of Routing Zips *':REVOFF
               END
               CALL FB.PRINT.CENT(30,79,21,TEMP)
*
*  Default
*
            CASE 1
               LRZ.ROW+=1
               LRZ.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.LRZ)
      REPEAT



      RETURN



*----------------------------------------------------------------------
* ADD.ROUT.ZIP
*----------------------------------------------------------------------
ADD.ROUT.ZIP: ***

      CALL FB.DRAW.BOX(0,3,30,18,' ','')           ; * Clear a box area - NO Border
      CALL FB.DRAW.BOX(30,2,49,20,' ','+-+|+-+|')  ; * Draw a box with a custom border
      CALL FB.DRAW.BOX(30,2,49,4,'','+=+|+=+|')    ; * Draw a box with a custom border
      CALL FB.PRINT.CENT(30,30+49,3,'~~  ADD ROUTING ZIP  ~~')

      TABLE.NUM = 0
      TABLE.BACK = 0
      NEW.TABLE = 1
      NUM.TABLES = DCOUNT(AUDIT.REC<8>, @VM)

*
* Add New Table - OPEN DATE
*
ARZ.1:
      TABLE.BACK = 0
      CRT @(43, 9):'  Adding New Zip Code'
      CRT @(43,10):'     ##   ZIP CODE     '
      CRT @(43,11):'-----------------------'
      NEW.TABLE = NUM.TABLES+1
      CRT @(48,13):NEW.TABLE'R%2':STR(' ',23)

ARZ.2:
      HELP = "Enter a new Routing Zip Code found on a bill. [X]=Back [EX]=Exit Program"
      MASK='------'
      CALL GEN.IN(54,13,MASK,'',Q,0,6,'L','',2,54,13,0,QI,HELP,0,23)

      QI=TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE
            RETURN

*
* Exit routine
*
         CASE QI='X' OR QI=''
            FAILURE=TRUE
            RETURN

*
* Help
*
         CASE QI='?' OR QI='H'
            HELP.LINES=ARZ.HELP
            GOSUB DISPLAY.HELP
            GOTO ARZ.2

         CASE QI=''
            IF ROUT.ZIP # '' THEN Q=ROUT.ZIP ELSE
               CALL ELINE('You must enter a Routing Zip')
               GOTO ARZ.1
            END

         CASE LEN(QI)=5 AND QI MATCH '5N' ; NULL

         CASE LEN(QI)=6 AND QI MATCH('1A1N1A1N1A1N') ; NULL

         CASE QI='ALL'
            IF NUM.TABLES THEN
               CALL ELINE('Routing Zips are already on file.  You can not add "ALL".  Delete Zips first.')
               GOTO IRZ.1
            END

         CASE QI='OTHER'
            LOCATE 'ALL' IN AUDIT.REC<8> SETTING WHERE THEN
               CALL ELINE('The Zip Code entry "ALL" already exists!  You can not add "OTHER" with "ALL"')
               GOTO ARZ.1
            END

         CASE 1
            CALL ELINE('Must be NNNNN for USA, ANANAN for Canadian, "ALL" or "OTHER"')
            GOTO IRZ.1
      END CASE

*
* Is the zip valid?
*
      IF QI # 'ALL' AND QI # 'OTHER' THEN
         CRT @(0,22):'Checking Zip Code with PCMILER - Please wait.':@(-4):
         CRT @(0,23):@(-4):
         VIN='BOTH'
         VIN<2>=CH.NUM
         VIN<3>=Q:@VM:71135
         VIN<4>=PCMILLER.READ.FILE       ; * Skip File Read ..... Look in PCMILER
         VIN<8>=CLIENT.ID                ; * JMK01
         VIN<9>=CARRIER.ID               ; * JMK01
         CALL PCMILER.BETA(VIN,VOUT,F.PCIN,F.PCOUT,F.MILEAGE)
         MILEAGE=VOUT<1>
         MSG=VOUT<2>'L#5'
         IF OCONV(MSG,'MCU') = 'ERROR' THEN
            CALL ELINE('PCMILER Reports that zip ':Q:' is an unknown Zip Code.  Please check it')
            GOTO ARZ.2
         END
      END ELSE
*
* Make sure 'ALL' and 'OTHER' are upper case
*
         Q = QI
      END

*
* Does the zip already exists in our list?
*
      LOCATE Q IN AUDIT.REC<8> SETTING WHERE THEN
         CALL ELINE(' Zip code ':Q:' has already been entered - Please enter a different one.')
         GOTO ARZ.2
      END

*
* Record it!
*
      NEW.ROUT.ZIP=Q
      ROUT.ZIP.CHANGED = TRUE
      AUDIT.REC<8,-1> = Q
      AUDIT.REC<9,-1> = 'DISABLE'
      NUM.TABLES = DCOUNT(AUDIT.REC<8>, @VM)

*
* Update screen
*
      CRT @(48,13):NEW.TABLE'R%2':'     ':NEW.ROUT.ZIP:'  ':
      CRT @(0,22):@(-4)
      CRT @(46,21):'[ Press Enter ]'
      HELP='Press the ENTER key to continue.'
      CALL GEN.IN(60,21,'','',Q,0,1,'','',1,60,21,0,QI,HELP,0,23)

ARZ.EXIT:
*
* COMMON EXIT POINT -
*
      CRT @(0,22):@(-4)

      RETURN


*----------------------------------------------------------------------
* ENABLE.ROUT.ZIP:
*----------------------------------------------------------------------
ENABLE.ROUT.ZIP:

      LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
         RETURN
      END
      AUDIT.REC<9,ROUT.ZIP.INDEX>='ENABLE'

      RETURN


*----------------------------------------------------------------------
* DISABLE.ROUT.ZIP:
*----------------------------------------------------------------------
DISABLE.ROUT.ZIP:

      LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
         RETURN
      END
      AUDIT.REC<9,ROUT.ZIP.INDEX>='DISABLE'

      RETURN


*----------------------------------------------------------------------
* GET.ROUT.ZIP.STATUS
*----------------------------------------------------------------------
GET.ROUT.ZIP.STATUS:

      LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
         RETURN
      END

      BEGIN CASE
         CASE AUDIT.REC<9,ROUT.ZIP.INDEX>='DISABLE'
            ROUT.ZIP.ENABLED = FALSE
         CASE 1
            ROUT.ZIP.ENABLED = TRUE
      END CASE

      RETURN

*=======================================================================
*
*
*
*=======================================================================


*----------------------------------------------------------------------
* Input Carrier Number
*
*  Get the users selected Client ID - Stores entry into NEW.CARRIER.ID
*
*----------------------------------------------------------------------
INPUT.CARRIER: ***
*
* ASK FOR CARRIER
*
      NEW.CARRIER.ID = 0
      FAILURE=FALSE
ICA:
      CRT @(16, 4):STR(' ',49):
      HELP = "Enter Carrier Number. "
      IF CARRIER.ID THEN
         HELP:= " [X] = Back [EX] = Exit"
      END ELSE
         HELP:= " [EX] = Exit"
      END
      MASK = '#####'

ICA.1:
      CALL GEN.IN(16,4,MASK,'',Q,0,5,'','',2,16,4,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE
            RETURN

*
* Exit routine
*
         CASE QI='' OR QI='X'
            FAILURE=TRUE
            RETURN

         CASE NUM(QI)
            NEW.CARRIER.ID = QI'R%5'

         CASE 1
            CALL ELINE('Invalid Carrier Number, Try Again.')
            GOTO ICA
      END CASE

*
* Open Carrier Records
*

      READ TEMP.REC FROM F.CARRIERS, NEW.CARRIER.ID ELSE
         CALL ELINE(NEW.CARRIER.ID:' is an invalid Carrier Number. Try Again.')
         GOTO ICA
      END

      RETURN




*----------------------------------------------------------------------
* Input Client Number
*
*  Get the users selected Client ID - Stores entry into NEW.CLIENT.ID
*
*----------------------------------------------------------------------
INPUT.CLIENT: ***
*
* Enter Client ID
*
      NEW.CLIENT.ID = 0
      FAILURE=FALSE
ICL:
      HELP = "Enter client name or number to setup. "
      IF CLIENT.ID THEN
         HELP:= " [X] = Back [EX] = Exit"
      END ELSE
         HELP:= " [EX] = Exit"
      END
      MASK = '#####'
      CRT @(16,3):STR(' ',49):

ICL.1:
      CALL GEN.IN(16,3,MASK,'',Q,0,25,'','',2,16,3,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            FAILURE=TRUE
            EXIT.IT=TRUE
            RETURN

*
* Exit routine
*
         CASE QI = '' OR QI='X'
            FAILURE=TRUE
            RETURN

         CASE NUM(QI) AND QI # ''
            NEW.CLIENT.ID = QI'R%5'

         CASE NOT(QI MATCHES "0N") AND QI # ''
            CALL SOUNDEX.DISPLAY(QI,'BCUST','SDX.CLIENTS,NAME',2,ITEM.LIST)
            BEGIN CASE
               CASE ITEM.LIST = ''
                  GOTO ICL               ; * START OVER
               CASE DCOUNT(ITEM.LIST,@AM) GT 1
                  GOTO ICL               ; * START OVER
               CASE 1
                  DATA ITEM.LIST
*
* Refresh screen and mark fields to be updated...
*
                  GOSUB DSP.ENTRY.SCN
                  FOR Y = 1 TO NUM.OPTIONS
                     IF NOT(OPTIONS<Y>) THEN OPTIONS<Y>=REFRESH
                  NEXT Y
                  GOTO ICL               ; * START OVER
            END CASE

         CASE 1
            CALL ELINE('Invalid Client Name, Try Again.')
            GOTO ICL.1
      END CASE

*
* Check to see if it is a valid client or not
*
      MATREAD TCLIENT.REC FROM F.CLIENTS,NEW.CLIENT.ID ELSE
         CALL ELINE("Client number ":NEW.CLIENT.ID:" is not a valid client #")
         GOTO ICL.1
      END

      RETURN


*--------------------------------------------------------------------------
* DISABLE.CLIENT:
*
*  Any changes to this routine should also be made in FB.AUDIT.1
*
*--------------------------------------------------------------------------
DISABLE.CLIENT:

      TEMP = ''
      TEMP<1> = 'DISABLE'
      TEMP<2> = 'REMOVE THIS FILE TO ENABLE THE CLIENT'
      WRITE TEMP ON F.AUDIT,CLIENT.DISABLE.FILE
      CLIENT.ENABLED = FALSE

      RETURN


*--------------------------------------------------------------------------
* ENABLE.CLIENT:
*
*  Any changes to this routine should also be made in FB.AUDIT.1
*
*--------------------------------------------------------------------------
ENABLE.CLIENT:

      DELETE F.AUDIT, CLIENT.DISABLE.FILE
      CLIENT.ENABLED = TRUE

      RETURN


*--------------------------------------------------------------------------
* READ.CLIENT.STATUS
*
*  Any changes to this routine should also be made in FB.AUDIT.1
*
*--------------------------------------------------------------------------
READ.CLIENT.STATUS:

      READ TEMP FROM F.AUDIT,CLIENT.DISABLE.FILE THEN
         CLIENT.ENABLED = FALSE
      END ELSE
         CLIENT.ENABLED = TRUE
      END

      RETURN



*--------------------------------------------------------------------------
* DISABLE.CARRIER
*
*  Any changes to this routine should also be made in FB.AUDIT.1
*
*--------------------------------------------------------------------------
DISABLE.CARRIER:
      AUDIT.REC<11> = 'DISABLE'
      RETURN



*--------------------------------------------------------------------------
* ENABLE.CARRIER
*--------------------------------------------------------------------------
ENABLE.CARRIER:
      AUDIT.REC<11> = 'ENABLE'
      RETURN



*--------------------------------------------------------------------------
* Load Client Description
*
*  Loads the CLIENT.REC and set CLIENT.NAME
*
*  Sets FAILURE flag to TRUE if errors occur.. No other values are changed
*--------------------------------------------------------------------------
LOAD.CLIENT.DESC:

      MATREAD CLIENT.REC FROM F.CLIENTS,CLIENT.ID THEN
         FAILURE=FALSE
*        CLIENT.REC = TCLIENT.REC
         CLIENT.NAME = CL.NAME
      END ELSE
         FAILURE=TRUE
      END

      RETURN



*--------------------------------------------------------------------------
* Load Carrier Description
*
*  Loads the CARRIER.REC and set CARRIER.NAME, CARRIER.CITY,
*  and CARRIER.STATE info based upon the variable CARRIER.ID
*
*  Sets FAILURE flag to TRUE if errors occur.. No other values are changed
*--------------------------------------------------------------------------
LOAD.CARRIER.DESC:

*
* Open Carrier Audit Information
*
      READ TEMP.REC FROM F.CARRIERS, CARRIER.ID THEN
         FAILURE = FALSE
         CARRIER.REC = TEMP.REC
         CARRIER.NAME = CARRIER.REC<1>
         CARRIER.CITY = CARRIER.REC<3>
         CARRIER.STATE = CARRIER.REC<4>
      END ELSE
         FAILURE=TRUE
         CALL ELINE('Carrier "':CARRIER.ID:'" is not a valid carrier!!!')
         GOSUB BEEP
      END

      RETURN



*----------------------------------------------------------------------
* SAVE.AUDIT.REC
*----------------------------------------------------------------------
SAVE.AUDIT.REC: ***
*
* Save Carrier Audit file
*
      AUDIT.REC<1>=LTLFAK

      IF WRITE.DATA AND CARRIER.ID THEN
         WRITE AUDIT.REC ON F.AUDIT,CARRIER.ID
      END

      RETURN



*----------------------------------------------------------------------
* SAVE.RATE.REC
*----------------------------------------------------------------------
SAVE.RATE.REC: ***
*
* Make sure we have enough criteria to save with
*
      WRITE.BOOLEAN = CLIENT.ID AND CARRIER.ID AND ROUT.ZIP AND BEG.EFF.DATE

*
* Save RATE REC
*
      IF OPTIONS.STATE<5> # DISABLED AND WRITE.BOOLEAN THEN
         IF WRITE.DATA THEN
            REC.NAME = CLIENT.ID:'*':CARRIER.ID:'*':ROUT.ZIP:'*':BEG.EFF.DATE:'*LTL*1'
            RATE.REC<1>=LTLFAK
            RATE.REC<2>='IR':@VM:'OR':@VM:'IA':@VM:'OA'

* Inbound Interstate
*
            DATA.POS=DEF.IR
            GOSUB EXTRACT.DATA.LINE

* Outbound Interstate
*
            DATA.POS=DEF.OR
            GOSUB EXTRACT.DATA.LINE

* Inbound Intrastate
*
            DATA.POS=DEF.IA
            GOSUB EXTRACT.DATA.LINE

* Outbound Intrastate
*
            DATA.POS=DEF.OA
            GOSUB EXTRACT.DATA.LINE

* Shipping Points - Rebuild BEGIN/END ranges
*
            GOSUB BUILD.AUDIT.ZIPS

            WRITE RATE.REC ON F.RATE,REC.NAME
         END
      END

      RETURN



*----------------------------------------------------------------------
* EXTRACT DATA LINE
*
* INPUT: DATA.POS  - Table/Array type {DEF.IA,DEF.OA,DEF.IR,DEF.OR}
*
* OUTPUT: DATA.LINE will contain the values
* DATA.POS MUST be initalized to one of the EQUates DEF.IR,DEF.OR,DEF.IA,DEF.OA
*
*----------------------------------------------------------------------
EXTRACT.DATA.LINE:
*
* Check for valid entrys
*
      BEGIN CASE
*
* Possible valid entrys... Add more if necessary.
*
         CASE DATA.POS = DEF.IA          ; * Inbound Intrastate
         CASE DATA.POS = DEF.OA          ; * Outboud Intrastate
         CASE DATA.POS = DEF.IR          ; * Inbound Interstate
         CASE DATA.POS = DEF.OR          ; * Outbound Interstate

*
* Any other value..
*
         CASE 1
            ERR.MSG = "DATA.POS IS NOT A CORRECT ENTRY VALUE"
            GOSUB ERRORS
            STOP
      END CASE

*
* Extract Data Line
*
      DATA.LINE = 0
      FOR T = RATE.LV TO DISCOUNTS
         T.VAL = RATE.REC<T+2, DATA.POS>
         BEGIN CASE
            CASE T = MIN.WEIGHT
            CASE T = MAX.WEIGHT
            CASE T = RATE.LV
               IF T.VAL = '' THEN T.VAL = 'DISABLE'
            CASE T = FAK
            CASE T = DISCOUNTS
            CASE 1
               IF T.VAL = '' THEN T.VAL = 0
         END CASE
         DATA.LINE<T>=T.VAL
      NEXT T

      RETURN


*----------------------------------------------------------------------
* BUILD DATA LINE
*
* INPUT: DATA.POS  - Array type {DEF.IA,DEF.OA,DEF.IR,DEF.OR}
*        DATA.LINE - Dynamic array of data to be placed into RATE.REC
*
* OUTPUT: RATE.REC<3-11,DATA.POS> will contain the data.
*
* DATA.POS MUST be initalized to one of the EQUates DEF.IR,DEF.OR,DEF.IA,DEF.OA
*
*----------------------------------------------------------------------
BUILD.DATA.LINE:
*
* Check for valid entrys
*
      BEGIN CASE
*
* Possible valid entrys... Add more if necessary.
*
         CASE DATA.POS = DEF.IA          ; * Inbound Intrastate
         CASE DATA.POS = DEF.OA          ; * Outboud Intrastate
         CASE DATA.POS = DEF.IR          ; * Inbound Interstate
         CASE DATA.POS = DEF.OR          ; * Outbound Interstate

*
* Any other value..
*
         CASE 1
            ERR.MSG = "DATA.POS IS NOT A CORRECT ENTRY VALUE"
            GOSUB ERRORS
            STOP
      END CASE

*
* Build Data Line
*
      FOR T = RATE.LV TO DISCOUNTS
         T.VAL = DATA.LINE<T>
         BEGIN CASE
            CASE T = MIN.WEIGHT
            CASE T = MAX.WEIGHT
            CASE T = RATE.LV
               IF T.VAL = '' THEN T.VAL = 'DISABLE'
            CASE T = FAK
            CASE T = DISCOUNTS
            CASE 1
               IF T.VAL = '' THEN T.VAL = 0
         END CASE
         RATE.REC<T+2, DATA.POS>=T.VAL
      NEXT T

      RETURN



*----------------------------------------------------------------------
* Build Display Line
*----------------------------------------------------------------------
BUILD.DISPLAY.LINE:

      GOSUB EXTRACT.DATA.LINE

      IF DATA.LINE<RATE.LV>='DISABLE' THEN
         LINE = STR(' ',21):'**** D I S A B L E D ****'      ; * :STR(' ',22):REVOFF
      END ELSE
         LINE= DATA.LINE<RATE.LV >'R#8'
         LINE:=DATA.LINE<PLUS.PERC >'R26(#8)'
         LINE:=DATA.LINE<FAK >'R#6'
         LINE:=DATA.LINE<CONTR.PERC>'R26(#8)'
         LINE:=DATA.LINE<BENCH.PERC>'R26(#8)'
         LINE:=DATA.LINE<CONTR.MIN >'R26(#8)'
         LINE:=DATA.LINE<BENCH.MIN >'R26(#8)'
         LINE:=DATA.LINE<MIN.WEIGHT>'R(#6)'
         LINE:=DATA.LINE<MAX.WEIGHT>'R(#6)'
         LINE:=DATA.LINE<DISCOUNTS>'R#2'
      END
      RETURN



*----------------------------------------------------------------------
* Line Item Changed, Reload, Reinit routines
*
*  This section is complicated.  Use the flow chart in my folders.
*
*----------------------------------------------------------------------
CLIENT.ID.CHANGED:

      ENTRY.POINT = 1
*
* Is Client ID Init? (If it is init - it MUST already be valid!-See input
* routine for the client.id)
*
      IF CLIENT.ID=0 THEN
*
* Client ID is blank - Clear line, and Disable everything down.
*
         OPTIONS<1>=CLEAR
         OPTIONS<2>=DISABLE ; OPTIONS<3>=DISABLE ; OPTIONS<4>=DISABLE
         OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE ; OPTIONS<7>=DISABLE
         OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE ;
         OPTIONS<10>=DISABLE ; OPTIONS<11>=DISABLE
         OPTIONS<12>=DISABLE ; OPTIONS<13>=DISABLE
         RETURN
      END ELSE
*
* Does Client.ID Exist?
*
         OPEN '','FB.AUDIT.LTLFAK,':CLIENT.ID TO F.AUDIT THEN
*
* Yes it does exist!
*
            OPTIONS<1> = REFRESH
            OPTIONS<2> = ENABLE
            OPTIONS<10>= ENABLE
            GOSUB READ.CLIENT.STATUS

         END ELSE
*
* No it does not exist!
*
* DO we wish to create it?
*
            YN.MSG = '"':CLIENT.ID:'" is not setup! Do you want to set it up? :'
            YN.MASK = 'N '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'Y' THEN
               CALL ELINE('You must use the NEW Audit routine! for new clients')
            END
*           IF YN.ANSWER = 'Y' THEN
            IF 0 THEN
*
* Yes Create it!
*
               CRT @(1,22):'Setting up files for client - Please wait':@(-4)
               CRT @(1,23):@(-4):
               EXECUTE 'CREATE-FILE DATA FB.AUDIT.LTLFAK,':CLIENT.ID:' 7,1' PASSLIST CAPTURING OUTPUT
               OPEN '','FB.AUDIT.LTLFAK,':CLIENT.ID TO F.AUDIT ELSE
                  CALL OPEN.ABORT("FB.AUDIT.LTLFAK,":CLIENT.ID, PROG.NAME)
               END
*
* Setup menu items
*
               OPTIONS<2>=CLEAR
               OPTIONS<10>=ENABLE
               GOSUB DISABLE.CLIENT
            END ELSE
*
* No do not wish to creat it.
*
               OPTIONS<1>=CLEAR
               OPTIONS<2>=DISABLE
               OPTIONS<10>=DISABLE
            END

*
* We just Created or Cleared the Client - Do disable the rest.
*
            OPTIONS<3>=DISABLE ; OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE
            OPTIONS<6>=DISABLE ; OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE
            OPTIONS<9>=DISABLE ; OPTIONS<11>=DISABLE ;
            OPTIONS<12>=DISABLE ; OPTIONS<13>=DISABLE
            RETURN
         END
      END
      GOTO CIC.1

CARRIER.ID.CHANGED:
      ENTRY.POINT = 2
CIC.1:

*
* This is the entry point for drop downs or when CARRIER.ID has changed.
* If the CARRIER.ID # "" then the CARRIER.ID MUST be a valid carrier #,
* see the input routine for the CARRIER.ID
*
      IF CARRIER.ID=0 THEN
*
* Carrier ID is blank - Clear line, and Disable everything down.
*
         OPTIONS<2>=CLEAR
         OPTIONS<3>=DISABLE ; OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE
         OPTIONS<6>=DISABLE ; OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE
         OPTIONS<9>=DISABLE ; OPTIONS<11>=DISABLE
         RETURN
      END ELSE
*
* Does the CARRIER.ID exist?
*
         OPTIONS<2> = REFRESH
         READ AUDIT.REC FROM F.AUDIT,CARRIER.ID THEN
*
* Yes CARRIER.ID exists.. AUDIT.REC is Loaded
*
* Did we load something other than our LTLFAK
*
            IF AUDIT.REC<1> # LTLFAK THEN
*
* Yes!
*
               CALL ELINE("This carrier has already been setup using FB.AUDIT.1 - Can't edit.")
               OPTIONS<2>=CLEAR
               OPTIONS<3>=DISABLE ; OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE
               OPTIONS<6>=DISABLE ; OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE
               OPTIONS<9>=DISABLE ; OPTIONS<11>=DISABLE
               OPTIONS<12>=DISABLE ; OPTIONS<13>=DISABLE
               RETURN
            END ELSE
*
* No... Load the bastard...
*
               OPTIONS<3> = ENABLE
               OPTIONS<11>=ENABLE
            END
         END ELSE
*
* Does the ENTRY.POINT = 2 (Routine entered at CARRIER.ID.CHANGED)
*
            IF ENTRY.POINT = 2 THEN
*
* Yes... Ask if want to create it.
*
               YN.MSG = 'Carrier "':CARRIER.ID:'" is not setup for this client!  Create it? :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
*
* Yes .. Create it!
*
                  AUDIT.REC=0
                  AUDIT.REC<11>='DISABLE'
*
* Clear Routine Zip line and disable everything down
*
                  OPTIONS<3> = CLEAR
                  OPTIONS<11>=ENABLE
               END ELSE
*
* No Don't create it
*
                  OPTIONS<2>=CLEAR
                  OPTIONS<3>=DISABLE
                  OPTIONS<11>=DISABLE
               END

*
* We just created or cleared the CARRIER - So disable
* everything down.
*
               OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE
               OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
               RETURN
            END ELSE
*
* No Entry Point # 2 ... & CARRIER.ID does not exists.
*
               OPTIONS<2>=CLEAR
               OPTIONS<3>=DISABLE
               OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE
               OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
               OPTIONS<11>=DISABLE ; OPTIONS<12>=DISABLE ; OPTIONS<13>=DISABLE
               RETURN
            END
         END
      END
      GOTO RZC.1

ROUT.ZIP.CHANGED:
      ENTRY.POINT = 3
RZC.1:
*
* This is the entry point for drop downs or when ROUT.ZIP has changed.
*
      IF ROUT.ZIP = '' THEN
*
* ROUT.ZIP is blank - Clear line, and Disable everything down.
*
         OPTIONS<3>=CLEAR
         OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE
         OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
         OPTIONS<12>=DISABLE ; OPTIONS<13>=DISABLE
         RETURN
      END ELSE
*
* Does the ROUT.ZIP exist in our AUDIT.REC?
*
         LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING WHERE THEN
*
* Yes!
*
            ROUT.ZIP.INDEX = WHERE
            OPTIONS<3> = REFRESH
            OPTIONS<4> = ENABLE
            OPTIONS<12>=ENABLE
         END ELSE
*
* No..
*
            ROUT.ZIP.INDEX = 0
*
* Does ENTRY.POINT = 3 (Routine entered at ROUTING.ZIP.CHANGED)?
*
            IF ENTRY.POINT = 3 THEN
*
* DO we wish to create it?
*
               YN.MSG = '"':ROUT.ZIP:'" is not setup.  Do you want to set it up? :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
*
* YES..Store it.  This will create a new file.
*
                  OPTIONS<4>=CLEAR
                  AUDIT.REC<8,-1> = ROUT.ZIP
               END ELSE
*
* No do not wish to creat it.
*
                  OPTIONS<3>=CLEAR
                  OPTIONS<4>=DISABLE
                  OPTIONS<12>=DISABLE ; OPTIONS<13>=DISABLE ;
                  RETURN
               END

*
* We either created a new routing zip or have clear the zip,
* so all other entries should be disabled.
*
               OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE ; OPTIONS<7>=DISABLE
               OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
               OPTIONS<13>=DISABLE ;
               RETURN
            END ELSE
*
* No our Entry Point != 3 .. Store first audit entry into
* ROUT.ZIP and check for a NULL..
*
               ROUT.ZIP = AUDIT.REC<8,1>
*
* Is our ROUT.ZIP Null?
*
               IF ROUT.ZIP = "" THEN
*
* Yes.. Routing Zip is blank... Disable the EffDate ranges
*
                  OPTIONS<3>=CLEAR
                  OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE
                  OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
                  OPTIONS<12>=DISABLE ; OPTIONS<13>=DISABLE ;
                  RETURN
               END ELSE
*
* No.. Routing Zip is present - Enable EffDate range and
* Disable everything below.
*
                  OPTIONS<4>=ENABLE
                  OPTIONS<12>=ENABLE ; OPTIONS<13>=DISABLE ;
               END
            END
         END
      END
      GOTO BEDC.1

BEG.EFF.DATE.CHANGED:
      ENTRY.POINT = 4
BEDC.1:

*
* This is the entry point for drop downs or when BEG.EFF.DATE has changed.
*
      IF BEG.EFF.DATE = '' THEN
*
* BEG.EFF.DATE is null - Clear Line, Disable fields 5-9
*
         OPTIONS<4>=CLEAR
         OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE ; OPTIONS<7>=DISABLE
         OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
         OPTIONS<13>=DISABLE ;
         RETURN
      END ELSE
*
* Check to see if the BEG.EFF.DATE is valid
*
         LOCATE ROUT.ZIP IN AUDIT.REC<8> SETTING ROUT.ZIP.INDEX ELSE
*
* FIREWALL CODE:
*
* Should Never get here.. The Routing zip is NOT entered...
* It should have been enterted durring the data entry routine
* or when entering ROUTING.ZIP.CHANGED (& ENTRY.POINT=3)
*
            OPTIONS<3>=CLEAR
            OPTIONS<4>=DISABLE ; OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE
            OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE ; OPTIONS<9>=DISABLE
            OPTIONS<13>=DISABLE ;
            GOSUB ERRORS                 ; * Give programmer a beep!
            RETURN
         END

*
* We now have the index where the BEG.EFF.DATE/END.EFF.DATE
* starts in the Zip Range.
*
         LOCATE BEG.EFF.DATE IN AUDIT.REC<2,ROUT.ZIP.INDEX> SETTING WHERE THEN
*
* Yes the BEG.EFF.DATE is valid.
*
            OPTIONS<4> = REFRESH
            OPTIONS<5>=ENABLE ; OPTIONS<6>=ENABLE ; OPTIONS<7>=ENABLE
            OPTIONS<8>=ENABLE ; OPTIONS<9>=ENABLE ; OPTIONS<13>=ENABLE ;
            END.EFF.DATE = AUDIT.REC<3,ROUT.ZIP.INDEX,WHERE>
         END ELSE
*
* No the END.EFF.DATE is not valid.
*
* Did we enter this routine at BEG.EFF.DATE?
*
            IF ENTRY.POINT = 4 THEN
*
* Yes.. Store it.  This will create a new file.
*
               AUDIT.REC<3,ROUT.ZIP.INDEX,-1> = BEG.EFF.DATE
               OPTIONS<5>=CLEAR ; OPTIONS<6>=CLEAR ; OPTIONS<7>=CLEAR
               OPTIONS<8>=CLEAR ; OPTIONS<9>=CLEAR ; OPTIONS<13>=ENABLE ;
               RETURN
            END ELSE
*
* No... Set BEG.EFF.DATE to first entry
*
               BEG.EFF.DATE = AUDIT.REC<2,ROUT.ZIP.INDEX,1>
               END.EFF.DATE = AUDIT.REC<3,ROUT.ZIP.INDEX,1>
               IF BEG.EFF.DATE = '' THEN
*
* First entry was blank... Disable 5-9 and clear 4
*
                  OPTIONS<4>=CLEAR ;
                  OPTIONS<5>=DISABLE ; OPTIONS<6>=DISABLE
                  OPTIONS<7>=DISABLE ; OPTIONS<8>=DISABLE
                  OPTIONS<9>=DISABLE ; OPTIONS<13>=DISABLE
                  RETURN
               END ELSE
*
* No first entry was not null.. File should exists!
* enable 5-9
*
                  OPTIONS<5>=ENABLE ; OPTIONS<6>=ENABLE ; OPTIONS<7>=ENABLE
                  OPTIONS<8>=ENABLE ; OPTIONS<9>=ENABLE ; OPTIONS<13>=ENABLE
               END
            END
         END
      END

LOAD.RATE.REC:
*
* Create REC.NAME
*
      REC.NAME = CLIENT.ID:'*':CARRIER.ID:'*':ROUT.ZIP:'*':BEG.EFF.DATE:'*LTL*1'
      READ RATE.REC FROM F.RATE,REC.NAME THEN

*
* Record is loaded... Verify that it is a GOOD LTLFAK file
*
         IF RATE.REC<1> # LTLFAK THEN
            CALL ELINE("Rate Record is not an LTLFAK record.  File not loaded!")
            RATE.REC = ''
            OPTIONS<5>=CLEAR ; OPTIONS<6>=CLEAR ; OPTIONS<7>=CLEAR
            OPTIONS<8>=CLEAR ; OPTIONS<9>=CLEAR
            RETURN
         END


* Inbound Interstate
*
         DATA.POS = DEF.IR
         GOSUB EXTRACT.DATA.LINE
         OPTIONS<6>=ENABLE

* Outbound Interstate
*
         DATA.POS = DEF.OR
         GOSUB EXTRACT.DATA.LINE
         OPTIONS<7>=ENABLE

* Inbound Intrastate
*
         DATA.POS = DEF.IA
         GOSUB EXTRACT.DATA.LINE
         OPTIONS<8>=ENABLE

* Outbound Intrastate
*
         DATA.POS = DEF.OA
         GOSUB EXTRACT.DATA.LINE
         OPTIONS<9>=ENABLE

* Shipping Points
*
         GOSUB EXTRACT.AUDIT.ZIPS
         GOSUB SETUP.AUDIT.ZIPS
         OPTIONS<5>=ENABLE

      END ELSE
*
* Rate Rec does not exists...
*
         OPTIONS<5>=CLEAR ; OPTIONS<6>=CLEAR ; OPTIONS<7>=CLEAR
         OPTIONS<8>=CLEAR ; OPTIONS<9>=CLEAR
      END

      RETURN

*----------------------------------------------------------------------
* SAVE.FILES
*
*  Check to make sure all files are updated before exiting..
*----------------------------------------------------------------------
SAVE.FILES: ***
*
* Check about saving files...
*
      IF OPTIONS.STATE<2> # DISABLED THEN GOSUB SAVE.AUDIT.REC
      IF OPTIONS.STATE<5> # DISABLED THEN GOSUB SAVE.RATE.REC

      RETURN


*----------------------------------------------------------------------
* REMOVE.RATE.TABLE
*----------------------------------------------------------------------
REMOVE.RATE.TABLE: ***

*
* Check for valid input values
*
      BEGIN CASE
         CASE DEL.CLIENT.ID = ''
            RETURN
         CASE DEL.CARRIER.ID = ''
            RETURN
         CASE DEL.ZIP = ''
            RETURN
         CASE DEL.DATE = ''
            RETURN
*
* Everything is valid
*
         CASE 1
            REC.NAME = DEL.CLIENT.ID:'*':DEL.CARRIER.ID
            REC.NAME :='*':DEL.ZIP:'*':DEL.DATE:'*LTL*1'
            DELETE F.RATE, REC.NAME
      END CASE

      RETURN


*======================================================================
*
*                  MENU/SCREEN INPUT/DISPLAY ROUTINES
*
*======================================================================


*----------------------------------------------------------------------
* Clear/Init variables
*----------------------------------------------------------------------
CLEAR.VARIABLES:

      GOSUB CLR.LINE1                    ; * Clear Client ID & Name
      GOSUB CLR.LINE2                    ; * Clear Carrier ID, Name, City, State
      GOSUB CLR.LINE3                    ; * Clear Rout Zip
      GOSUB CLR.LINE4                    ; * Clear Beg/End Eff Date
      GOSUB CLR.LINE5                    ; * Clear Valid Shipping Points
      GOSUB CLR.LINE6                    ; * Clear Inbound Interstate
      GOSUB CLR.LINE7                    ; * Clear Outbound Interstate
      GOSUB CLR.LINE8                    ; * Clear Inbound Intrastate
      GOSUB CLR.LINE9                    ; * Clear Outbound Intrastate
      GOSUB CLR.LINE10                   ; * Clear Client Status
      GOSUB CLR.LINE11                   ; * Clear Carrier Status
      GOSUB CLR.LINE12                   ; * Clear Rout Zip Status
      GOSUB CLR.LINE13                   ; * Clear Eff Date Range Status


      RETURN


*----------------------------------------------------------------------
* Individual Data Line Clearing routines.
*----------------------------------------------------------------------
CLR.LINE1:
      CLIENT.ID = 0
      CLIENT.NAME=''
      RETURN

CLR.LINE2:
      CARRIER.ID = 0 ; CARRIER.NAME = '' ; CARRIER.CITY = '' ; CARRIER.STATE = ''
      CARRIER.REC=''
      RETURN

CLR.LINE3:
      ROUT.ZIP = 0
      RETURN

CLR.LINE4:
      BEG.EFF.DATE = 0 ; END.EFF.DATE = 0
      RETURN

CLR.LINE5:
      RATE.REC<20>=''
      RATE.REC<21>=''
      RATE.REC<22>=''
      GOSUB EXTRACT.AUDIT.ZIPS           ; * Clear and Init ALL.ZIPS<>
      RETURN

CLR.LINE6:
      DATA.POS = DEF.IR
      DATA.LINE = ''                     ; * Inbound Interstate
      GOSUB BUILD.DATA.LINE              ; * Clear RATE.REC for this DATA.POS
      RETURN

CLR.LINE7:
      DATA.POS = DEF.OR
      DATA.LINE = ''                     ; * Outbound Interstate
      GOSUB BUILD.DATA.LINE              ; * Clear RATE.REC for this DATA.POS
      RETURN

CLR.LINE8:
      DATA.POS = DEF.IA
      DATA.LINE = ''                     ; * Outbound Intrastate
      GOSUB BUILD.DATA.LINE              ; * Clear RATE.REC for this DATA.POS
      RETURN

CLR.LINE9:
      DATA.POS = DEF.OA
      DATA.LINE = ''                     ; * Outbound Intrastate
      GOSUB BUILD.DATA.LINE              ; * Clear RATE.REC for this DATA.POS
      RETURN

CLR.LINE10:
      CLIENT.ENABLED = FALSE
      RETURN

CLR.LINE11:
      IF AUDIT.REC<1> = LTLFAK THEN GOSUB DISABLE.CARRIER
      RETURN

CLR.LINE12:
      IF AUDIT.REC<1> = LTLFAK THEN GOSUB DISABLE.ROUT.ZIP
      RETURN

CLR.LINE13:
      IF AUDIT.REC<1> = LTLFAK THEN GOSUB DISABLE.EFF.DATE
      RETURN


*----------------------------------------------------------------------
* REFRESH DISPLAY  - Manages the different states that a menu item can be.
*
* NOTE:
*   For those of us who are fimular with "STATE MACHINES" this is a
*   text-book example.
*
*----------------------------------------------------------------------
REFRESH.DISPLAY:

      FOR T.LINE = 1 TO NUM.OPTIONS
*
* get our options for this menu line item
*
         T.OPT = OPTIONS<T.LINE>
         T.STAT= OPTIONS.STATE<T.LINE>

*
* Do we need to do any form of screen modifications for this line?
*
         IF (T.OPT) THEN
            BEGIN CASE
               CASE T.OPT=DISABLE AND T.STAT # DISABLED
*
* Disable
*
                  OPTIONS.STATE<T.LINE>=DISABLED
                  GOSUB CLR.VAR.T.LINE
                  GOSUB CLR.T.LINE

               CASE T.OPT=CLEAR
*
* Clear
*
                  OPTIONS.STATE<T.LINE>=ENABLED
                  GOSUB CLR.T.LINE
                  GOSUB CLR.VAR.T.LINE
                  GOSUB DSP.T.LINE

               CASE T.OPT=ENABLE
*
* Enable
*
                  OPTIONS.STATE<T.LINE>=ENABLED
                  GOSUB CLR.T.LINE
                  GOSUB DSP.T.LINE

               CASE T.OPT=REFRESH AND T.STAT=ENABLED
*
* Refresh
*
                  GOSUB CLR.T.LINE
                  GOSUB DSP.T.LINE
            END CASE
            OPTIONS<T.LINE>=''
         END

      NEXT TEMP

      RETURN

CLR.T.LINE:
      ON T.LINE GOSUB CLR.1,CLR.2,CLR.3,CLR.4,CLR.5,CLR.6,CLR.7,CLR.8,CLR.9,CLR.10,CLR.11,CLR.12,CLR.13
      RETURN

DSP.T.LINE:
      ON T.LINE GOSUB DSP.1,DSP.2,DSP.3,DSP.4,DSP.5,DSP.6,DSP.7,DSP.8,DSP.9,DSP.10,DSP.11,DSP.12,DSP.13
      RETURN

CLR.VAR.T.LINE:
      ON T.LINE GOSUB CLR.LINE1,CLR.LINE2,CLR.LINE3,CLR.LINE4,CLR.LINE5,CLR.LINE6,CLR.LINE7,CLR.LINE8,CLR.LINE9,CLR.LINE10,CLR.LINE11,CLR.LINE12,CLR.LINE13
      RETURN


*----------------------------------------------------------------------
* Menu Option 1
*----------------------------------------------------------------------
CLR.1:
      CRT @(0, 3):'1) Client Name :':STR(' ',49)
      RETURN

DSP.1:
      IF CLIENT.ID THEN
         TEMP = CLIENT.ID:', ':CL.NAME:' (':CL.CITY:', ':CL.ST:')'
      END ELSE
         TEMP = REVON:'(Client not selected)':REVOFF
      END

      CRT @(16, 3):TEMP'L#49'

      RETURN


*----------------------------------------------------------------------
* Menu Option 2
*----------------------------------------------------------------------
CLR.2:
      CRT @(0, 4):'2) Carrier Name:':STR(' ',49)
      RETURN

DSP.2:
      IF CARRIER.ID THEN
         TEMP = CARRIER.ID:', ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      END ELSE
         TEMP = REVON:'(Carrier not selected)':REVOFF
      END

      CRT @(16, 4):TEMP'L#49'
      RETURN


*----------------------------------------------------------------------
* Menu Option 3
*----------------------------------------------------------------------
CLR.3:
      CRT @(0, 5):'3) Routing Zip :':STR(' ',49)
      RETURN

DSP.3:
      BEGIN CASE
*
* Routing Zip Null???
*
         CASE ROUT.ZIP = 0 OR ROUT.ZIP = ''
            TEMP = REVON:'(Routing Zip not setup)':REVOFF
*
* Routing Zip a Number?
*
         CASE NUM(ROUT.ZIP)
            ZIP.VAR=ROUT.ZIP
            CALL FB.READ.ZIP(ZIP.VAR, DEST.CITY, DEST.STATE)
            TEMP = ROUT.ZIP:' (':DEST.CITY:', ':DEST.STATE:')'
*
* Routing is a string...
*
         CASE 1
            TEMP = ROUT.ZIP
      END CASE

      CRT @(16,5):TEMP'L#49'
      RETURN


*----------------------------------------------------------------------
* Menu Option 4
*----------------------------------------------------------------------
CLR.4:
      CRT @(0, 6):'4) Eff Date Rng:         TO :':STR(' ',32)
      RETURN

DSP.4:
      IF BEG.EFF.DATE THEN
         IF END.EFF.DATE='' THEN
            TEMP = ' (No Ending Date Set)'
         END ELSE
            TEMP = END.EFF.DATE'D2/'
         END
         CRT @(16, 6):BEG.EFF.DATE'D2/' ; CRT @(29, 6):TEMP
      END ELSE
         CRT @(16, 6):REVON:'(Effective Date Range not setup)':REVOFF
      END

      RETURN


*----------------------------------------------------------------------
* Menu Option 5
*----------------------------------------------------------------------
CLR.5:
      CRT @(0, 7):'5) Ship Points :':@(-4)
      RETURN

DSP.5:
      NUM.AUDITS = DCOUNT(RATE.REC<20>, @VM)
      IF NUM.AUDITS THEN
         TEMP = ''
         FOR AUDIT.NUM = 1 TO NUM.AUDITS
            IF RATE.REC<22,AUDIT.NUM>=YES THEN
               IF TEMP THEN TEMP:=', '
               IF RATE.REC<20,AUDIT.NUM>=RATE.REC<21,AUDIT.NUM> THEN
                  TEMP := RATE.REC<20,AUDIT.NUM>'R%3'
               END ELSE
                  IF RATE.REC<20,AUDIT.NUM>+1 = RATE.REC<21,AUDIT.NUM> THEN
                     TEMP := RATE.REC<20,AUDIT.NUM>'R%3':', ':RATE.REC<21,AUDIT.NUM>'R%3'
                  END ELSE
                     TEMP := RATE.REC<20,AUDIT.NUM>'R%3':'-':RATE.REC<21,AUDIT.NUM>'R%3'
                  END
               END
            END
         NEXT AUDIT.NUM
         IF LEN(TEMP) > 63 THEN TEMP=LEFT(TEMP,57):'<more>'
      END ELSE
         TEMP = REVON:'(No Shipping Points Entered)':REVOFF
      END


      CRT @(16, 7):TEMP'L#62':@(-4)
      RETURN


*----------------------------------------------------------------------
* Menu Option 6
*----------------------------------------------------------------------
CLR.6:
      CRT @(0,12):'6) I.Inter:':@(-4)
      RETURN

DSP.6:
      DATA.POS = DEF.IR
      GOSUB BUILD.DISPLAY.LINE
      CRT @(11,12):LINE:
      RETURN


*----------------------------------------------------------------------
* Menu Option 7
*----------------------------------------------------------------------
CLR.7:
      CRT @(0,13):'7) O.Inter:':@(-4)
      RETURN

DSP.7:
      DATA.POS = DEF.OR
      GOSUB BUILD.DISPLAY.LINE
      CRT @(11,13):LINE:
      RETURN


*----------------------------------------------------------------------
* Menu Option 8
*----------------------------------------------------------------------
CLR.8:
      CRT @(0,14):'8) I.Intra:':@(-4)
      RETURN

DSP.8:
      DATA.POS = DEF.IA
      GOSUB BUILD.DISPLAY.LINE
      CRT @(11,14):LINE:
      RETURN


*----------------------------------------------------------------------
* Menu Option 9
*----------------------------------------------------------------------
CLR.9:
      CRT @(0,15):'9) O.Intra:':@(-4)
      RETURN

DSP.9:
      DATA.POS = DEF.OA
      GOSUB BUILD.DISPLAY.LINE
      CRT @(11,15):LINE:
      RETURN



*----------------------------------------------------------------------
* Menu Option 10
*----------------------------------------------------------------------
CLR.10:
      CRT @(65,3):'10) [        ]':@(-4)
      RETURN

DSP.10:
      IF CLIENT.ENABLED THEN
         TEMP = ENABLED.MSG
      END ELSE
         TEMP = DISABLED.MSG
      END
      CRT @(69,3):TEMP:@(-4)
      RETURN



*----------------------------------------------------------------------
* Menu Option 11
*----------------------------------------------------------------------
CLR.11:
      CRT @(65,4):'11) [        ]':@(-4)
      RETURN

DSP.11:
      IF AUDIT.REC<11> = 'DISABLE' THEN
         TEMP = DISABLED.MSG
      END ELSE
         TEMP = ENABLED.MSG
      END
      CRT @(69,4):TEMP:@(-4)
      RETURN


*----------------------------------------------------------------------
* Menu Option 12
*----------------------------------------------------------------------
CLR.12:
      CRT @(65,5):'12) [        ]':@(-4)
      RETURN

DSP.12:
      GOSUB GET.ROUT.ZIP.STATUS
      BEGIN CASE
         CASE ROUT.ZIP.ENABLED = TRUE
            TEMP = ENABLED.MSG
         CASE 1
            TEMP = DISABLED.MSG
      END CASE
      CRT @(69,5):TEMP:@(-4)
      RETURN



*----------------------------------------------------------------------
* Menu Option 13
*----------------------------------------------------------------------
CLR.13:
      CRT @(65,6):'13) [        ]':@(-4)
      RETURN

DSP.13:
      GOSUB GET.EFF.DATE.STATUS
      BEGIN CASE
         CASE EFF.DATE.ENABLED = TRUE
            TEMP = ENABLED.MSG
         CASE 1
            TEMP = DISABLED.MSG
      END CASE
      CRT @(69,6):TEMP:@(-4)
      RETURN




*----------------------------------------------------------------------
* Entry/Edit Screen
*----------------------------------------------------------------------
DSP.ENTRY.SCN: ***

      GOSUB INIT.SCREEN

      GOSUB CLR.1                        ; * Display Client ID & Name
      GOSUB CLR.2                        ; * Display Carrier ID, Name, City, State
      GOSUB CLR.3                        ; * Display Rout Zip
      GOSUB CLR.4                        ; * Display Beg/End Eff Date
      GOSUB CLR.5                        ; * Display Valid Shipping Points
      GOSUB CLR.6                        ; * Display Inbound Interstate
      GOSUB CLR.7                        ; * Display Outbound Interstate
      GOSUB CLR.8                        ; * Display Inbound Intrastate
      GOSUB CLR.9                        ; * Display Outbound Intrastate
      GOSUB CLR.10                       ; * Display Client Status
      GOSUB CLR.11                       ; * Display Carrier Status
      GOSUB CLR.12                       ; * Display Rout Zip Status
      GOSUB CLR.13                       ; * Display Date Range Status

      LINE1= ' RATE ''L#8':SPACE(2)
      LINE2= ' LEVEL''L#8':SPACE(2)
      LINE3= STR('-',8):SPACE(2)

      LINE1:=' PLUS ''L#6':SPACE(2)
      LINE2:=' PER. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='    ''L#4':SPACE(2)
      LINE2:='FAK ''L#4':SPACE(2)
      LINE3:= STR('-',4):SPACE(2)

      LINE1:='CONTR.''L#6':SPACE(2)
      LINE2:='PERC. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='BENCH ''L#6':SPACE(2)
      LINE2:='PERC. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='CONTR.''L#6':SPACE(2)
      LINE2:=' MIN. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='BENCH.''L#6':SPACE(2)
      LINE2:=' MIN. ''L#6':SPACE(2)
      LINE3:= STR('-',6):SPACE(2)

      LINE1:='MIN.''L#4':SPACE(1)
      LINE2:='WGHT''L#4':SPACE(1)
      LINE3:= STR('-',4):SPACE(1)

      LINE1:='MAX.''L#5':SPACE(1)
      LINE2:='WGHT''L#5':SPACE(1)
      LINE3:= STR('-',5):SPACE(1)

      LINE1:='D'
      LINE2:='C'
      LINE3:='-'

      CRT @(11, 9):LINE1
      CRT @(11,10):LINE2
      CRT @(11,11):LINE3
      RETURN



*=======================================================================
*
*                GENERAL SUPPORT ROUTINES
*
*=======================================================================


*----------------------------------------------------------------------
* INIT SCREEN
*----------------------------------------------------------------------
INIT.SCREEN: ***

      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('-',79) ;
      CRT @(0,21):STR('-',79) ;
      RETURN



*----------------------------------------------------------------------
* SHOW INTRO
*----------------------------------------------------------------------
SHOW.INTRO:
      CRT @(X, 6):'        XXX       XXXXXXXX   xXXXXXXx   '
      CRT @(X, 7):'      xXXXXX      XXXXXXX   XXXXXXXXXX  '
      CRT @(X, 8):'     XXX  XX     xXX       XXXX     XXX '
      CRT @(X, 9):'    XXX   XX     XXXXXXX    XXXXXX      '
      CRT @(X,10):'   xXXXXXXXX     XXXXXX       XXXXXXx   '
      CRT @(X,11):'   XXXXXXXXXx   xXX       XXx     XXXX  '
      CRT @(X,12):'  XXX     XXX   XXX        XXXXXXXXXX   '
      CRT @(X,13):' xXX       XXX xXX          XXXXXXXX    '

      CRT @(X,15):' L  O  G  I  S  T  I  C  S     I  N  C  ':
*   CRT @(X,16):' -------------------------------------  '
      RETURN



*----------------------------------------------------------------------
* ASK.Y.OR.N
*
* A General Yes No prompt routine.
*
*----------------------------------------------------------------------
ASK.Y.OR.N: ***

      YN.ANSWER = ''

Y.OR.N:

      HELP = CHAR(7):"Entry Options: [Y]-Yes [N]-No [X]-Back"
      CRT @(0,22):YN.MSG:@(-4):
      MASK = YN.MASK'L#1'
      Q=''
      CALL GEN.IN(LEN(YN.MSG),22,MASK,'',Q,0,1,'','',2,LEN(YN.MSG),22,0,QI,HELP,1,23)
      QI = OCONV(QI,'MCU')

*
* Q&D Translation
*
      BEGIN CASE
         CASE QI = ''
            QI=MASK
         CASE QI = '1'
            QI='Y'
         CASE QI = '0'
            QI='N'
      END CASE

*
* Conditions.
*
      BEGIN CASE
         CASE QI = 'Y'
         CASE QI = 'N'
         CASE QI = 'X'
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO Y.OR.N
      END CASE

      CRT @(1,22):@(-4):
      CRT @(1,23):@(-4):
      YN.ANSWER = QI

      RETURN



*----------------------------------------------------------------------
* ASK.FOR.FNAME
*
*  RETURNS:  FNAME.ANSWER - FILE NAME ENTERED.
*
*  NOTE: This actually returns what was entered . So watch for 'EX' and '
*
*----------------------------------------------------------------------
ASK.FOR.FNAME: ***

      FNAME.ANSWER = ''

ASK.NAME:

      HELP = "Entry Options:  [X] = Exit"
      CRT @(1,22):ASK.FN.MSG:@(-4)
      MASK = ASK.FN.MASK
      Q = ''
      CALL GEN.IN(LEN(ASK.FN.MSG)+1,22,MASK,'',Q,0,20,'','',2,LEN(ASK.FN.MSG)+1,22,1,QI,HELP,0,23)

      IF QI='' THEN
         IF MASK='' THEN GOTO ASK.NAME
         QI=MASK
      END ELSE
         QI = OCONV(QI,'MCU')
      END

      CRT @(1,22):@(-4):
      CRT @(1,23):@(-4):
      FNAME.ANSWER = QI

      RETURN





*----------------------------------------------------------------------
* DISPLAY.HELP
*----------------------------------------------------------------------
DISPLAY.HELP:

      MASK=''
      EXIT.HELP = FALSE
      T.LINES = DCOUNT(HELP.LINES,@AM)

      HLP.SCN.TOP = HLP.Y+1
      HLP.PAGE.SIZE = HLP.H-HLP.Y-1
      HLP.SCN.BOT = HLP.Y+HLP.H-3

      Y.POS = HLP.SCN.TOP
      HLP.LINE.CNT=0
      T.Y = 1
      CALL FB.DRAW.BOX(HLP.X,HLP.Y,HLP.W,HLP.H,' ','')

      LOOP
         BEGIN CASE
*
*  Handle first 2 lines - Center on help windows
*
            CASE T.Y=1 OR T.Y=2
               CALL FB.PRINT.CENT(HLP.X,HLP.X+HLP.W,Y.POS,HELP.LINES<T.Y>)

            CASE 1
               CRT @(HLP.X, Y.POS):HELP.LINES<T.Y>
         END CASE

         T.Y+=1                          ; * Help Line index
         Y.POS+=1                        ; * Screen Y Position
         HLP.LINE.CNT+=1                 ; * Num Lines prnted on page

*
* Handle screen positioning
*
         BEGIN CASE
*
* Handle Page Breaks
*
            CASE (Y.POS = HLP.SCN.BOT) OR (T.Y > T.LINES)
DH.2:
*
* End of Help?
*
               IF T.Y > T.LINES THEN
                  TEMP = '[ End of Help ]'
                  HELP2 = "Press ENTER to exit help, "
               END ELSE
                  TEMP = '[ Continued on Next Page ]'
                  HELP2 = "Press ENTER to continue to next page, "
               END

*
* Is paging Back possible?
*
               IF T.Y > HLP.PAGE.SIZE+1 THEN
                  HELP2:= " [B]=Back 1 Page [X]=Exit Help."
               END ELSE
                  HELP2:= " [X]=Exit Help."
               END

*
* Display message, help and get input.
*
               CALL FB.PRINT.CENT(HLP.X,HLP.X+HLP.W,HLP.SCN.BOT+1,TEMP)
               CRT @(0,22):'Enter Option :':@(-4)
               CALL GEN.IN(15,22,' ','',Q,0,1,'','',0,15,22,0,QI,HELP2,0,23)
               QI = OCONV(QI,'MCU')

               BEGIN CASE
*
* Back 1 page
*
                  CASE QI = 'B' AND T.Y > (HLP.PAGE.SIZE+1)
                     T.Y-=HLP.PAGE.SIZE+HLP.LINE.CNT

*
* Goto next page
*
                  CASE QI = ''

*
* Goto next page
*
                  CASE QI = 'X'
                     EXIT.HELP = TRUE

*
* Idiot input...
*
                  CASE 1
                     CALL ELINE('Invalid selection, Try Again.')
                     GOTO DH.2
               END CASE

               HLP.LINE.CNT=0            ; * Num Lines prnted on page
               Y.POS = HLP.SCN.TOP       ; * Go back to top of help screen
               CALL FB.DRAW.BOX(HLP.X,HLP.Y,HLP.W,HLP.H,' ','')
         END CASE

      WHILE ((T.Y <= T.LINES) AND NOT(EXIT.HELP))
      REPEAT

      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):

      RETURN




*----------------------------------------------------------------------
* INIT.HELP
*----------------------------------------------------------------------
INIT.HELP:

      ESZ1.HELP=''                       ; *123456789012345678901234567890
      ESZ1.HELP<-1>='EDIT STATE FLAGS'
      ESZ1.HELP<-1>='----------------'
      ESZ1.HELP<-1>='You are currently in "Edit'
      ESZ1.HELP<-1>='State Flags".  This mode '
      ESZ1.HELP<-1>='allows you to individually'
      ESZ1.HELP<-1>='mark 3 digit zip codes to be'
      ESZ1.HELP<-1>='included or not included in'
      ESZ1.HELP<-1>='the list of Valid Shipping '
      ESZ1.HELP<-1>='Points.  A "Y" will mark the'
      ESZ1.HELP<-1>='zip to be included as a valid'
      ESZ1.HELP<-1>='shipping point and a "N" will'
      ESZ1.HELP<-1>='mark the zip as a Non Valid '
      ESZ1.HELP<-1>='zip code.  To Exit marking a'
      ESZ1.HELP<-1>='state press the "X" to exit.'

      ESZ.HELP=''                        ; *123456789012345678901234567890
      ESZ.HELP<-1>='SELECTIVE ZIP ENTRY'
      ESZ.HELP<-1>='-------------------'
      ESZ.HELP<-1>='You are editing the Audit'
      ESZ.HELP<-1>='Flags for the current State'
      ESZ.HELP<-1>='you selected.  You can set all'
      ESZ.HELP<-1>='flags to YES, NO, toggle all'
      ESZ.HELP<-1>='of the flags or Enter the zip'
      ESZ.HELP<-1>='number and manualy mark the'
      ESZ.HELP<-1>='individual zip as YES or NO.'
      ESZ.HELP<-1>='You can also enter Range Mode'
      ESZ.HELP<-1>='and manually mark a series of'
      ESZ.HELP<-1>='zips as YES or NO.  You can'
      ESZ.HELP<-1>='also press "X" to exit the '
      ESZ.HELP<-1>='Selective Zip Entry.'

      EZR.HELP=''                        ; *123456789012345678901234567890
      EZR.HELP<-1>='EDIT ZIP RANGE MODE'
      EZR.HELP<-1>='-------------------'
      EZR.HELP<-1>='This mode will allow you to'
      EZR.HELP<-1>='mark a range of zips as YES or'
      EZR.HELP<-1>='NO.  You will be asked for the'
      EZR.HELP<-1>='"Starting Zip" that is the zip'
      EZR.HELP<-1>='number you wish to start edit-'
      EZR.HELP<-1>='ing from.  You will be placed'
      EZR.HELP<-1>='at that zip and will move one'
      EZR.HELP<-1>='zip at a time allowing you to'
      EZR.HELP<-1>='mark the zip as YES or NO.'
      EZR.HELP<-1>='You can also press "X" to exit'
      EZR.HELP<-1>='at any time'

      IED.HELP=''                        ; *123456789012345678901234567890
      IED.HELP<-1>='EFFECTIVE DATE RANGE ENTRY'
      IED.HELP<-1>='--------------------------'
      IED.HELP<-1>='You are setting up the effec- '
      IED.HELP<-1>='tive date range that the rates'
      IED.HELP<-1>='will effect.  Each Date Range'
      IED.HELP<-1>='rates are different from other'
      IED.HELP<-1>='rates.  You can switch to a'
      IED.HELP<-1>='different Date Range, add a'
      IED.HELP<-1>='new Date Range, delete Date'
      IED.HELP<-1>='Ranges, close a Date Range, or'
      IED.HELP<-1>='exit.  You can only have 1'
      IED.HELP<-1>='Date Range "open" at a time.'
      IED.HELP<-1>='all other Date Ranges must '
      IED.HELP<-1>='have a closing date.'

      ADR.HELP=''                        ; *123456789012345678901234567890
      ADR.HELP<-1>='ADD NEW DATE RANGE'
      ADR.HELP<-1>='------------------'
      ADR.HELP<-1>='You are adding a new Date'
      ADR.HELP<-1>='Range.  You are being asked'
      ADR.HELP<-1>='for the Starting Date for the'
      ADR.HELP<-1>='Date Range.  This date will be'
      ADR.HELP<-1>='date in which the new rates'
      ADR.HELP<-1>='will take effect.'
      ADR.HELP<-1>='NOTE:  The new Date Range'
      ADR.HELP<-1>='will not yet have a rate table'
      ADR.HELP<-1>='and will not have any valid'
      ADR.HELP<-1>='shipping points setup.  These'
      ADR.HELP<-1>='will need to setup once the'
      ADR.HELP<-1>='new Date Range is entered.'

      CPT.HELP=''                        ; *123456789012345678901234567890
      CPT.HELP<-1>='CLOSE PRIOR TABLE'
      CPT.HELP<-1>='-----------------'
      CPT.HELP<-1>='You are adding a new Date'
      CPT.HELP<-1>='Range but an existing table'
      CPT.HELP<-1>='did not have a Closing Date'
      CPT.HELP<-1>='so you are being asked to'
      CPT.HELP<-1>='enter the closing date for'
      CPT.HELP<-1>='the prior table.  This date'
      CPT.HELP<-1>='would normally be the day'
      CPT.HELP<-1>='before your opening date of'
      CPT.HELP<-1>='your new Date Range.  This'
      CPT.HELP<-1>='will close out the prior rates'
      CPT.HELP<-1>='and will start the new ones on'
      CPT.HELP<-1>='the starting date entered.'

      ECD.HELP=''                        ; *123456789012345678901234567890
      ECD.HELP<-1>='ENTER CLOSING DATE'
      ECD.HELP<-1>='------------------'
      ECD.HELP<-1>=' '
      ECD.HELP<-1>='You are entering a Closing '
      ECD.HELP<-1>='Date for the rates to stop '
      ECD.HELP<-1>='being used.  If a Closing Date'
      ECD.HELP<-1>='is NOT entered the table will'
      ECD.HELP<-1>='be considered "Open" and will'
      ECD.HELP<-1>='allow the rates to be used'
      ECD.HELP<-1>='until a closing date is '
      ECD.HELP<-1>='choosen.  You can only have'
      ECD.HELP<-1>='one set of rates "Open" at one'
      ECD.HELP<-1>='time.'

      SD.HELP=''                         ; *123456789012345678901234567890
      SD.HELP<-1>='SELECT DATE RANGE'
      SD.HELP<-1>='-----------------'
      SD.HELP<-1>=' '
      SD.HELP<-1>='You are being asked which Date'
      SD.HELP<-1>='Range you would like to switch'
      SD.HELP<-1>='to.  Enter one of the Date'
      SD.HELP<-1>='Range number from the window'
      SD.HELP<-1>='on the right.  You can press'
      SD.HELP<-1>='"X" to exit and not switch to'
      SD.HELP<-1>='another Date Range.'

      DD.HELP=''                         ; *123456789012345678901234567890
      DD.HELP<-1>='DELETE DATE RANGE'
      DD.HELP<-1>='-----------------'
      DD.HELP<-1>=' '
      DD.HELP<-1>='You are being asked which Date'
      DD.HELP<-1>='Range you would like to DELETE'
      DD.HELP<-1>='When you delete a Date Range'
      DD.HELP<-1>='all audit information about'
      DD.HELP<-1>='Date Range will be erased!  Be'
      DD.HELP<-1>='very carefull when choosing to'
      DD.HELP<-1>='delete a Date Range.  You can '
      DD.HELP<-1>='press "X" to exit and not '
      DD.HELP<-1>='delete any date ranges.'

      TD.HELP=''                         ; *123456789012345678901234567890
      TD.HELP<-1>='TOGGLE DATE RANGE'
      TD.HELP<-1>='-----------------'
      TD.HELP<-1>=' '
      TD.HELP<-1>='You are being asked which Date'
      TD.HELP<-1>='Range you would like to TOGGLE'
      TD.HELP<-1>='the Enable/Disable flag.  When'
      TD.HELP<-1>='you TOGGLE a flag, this only'
      TD.HELP<-1>='means that an ENABLE flag will'
      TD.HELP<-1>='switch to DISABLE and a'
      TD.HELP<-1>='DISABLE flag will switch to an'
      TD.HELP<-1>='ENABLE flag - In short, it '
      TD.HELP<-1>='flip-flops or "Toggles" btween'
      TD.HELP<-1>='two states.  If a Date Range'
      TD.HELP<-1>='is disabled, then Data Entry'
      TD.HELP<-1>='will not use this entry for'
      TD.HELP<-1>='this date range'

      IRZ.HELP=''                        ; *123456789012345678901234567890
      IRZ.HELP<-1>='ROUTING ZIP SETUP'
      IRZ.HELP<-1>='-----------------'
      IRZ.HELP<-1>=' '
      IRZ.HELP<-1>='You are setting up the Routing'
      IRZ.HELP<-1>='Zips for the Client/Carrier'
      IRZ.HELP<-1>='that you have selected.  Each'
      IRZ.HELP<-1>='Routing Zip will then break '
      IRZ.HELP<-1>='down to effective dates and '
      IRZ.HELP<-1>='rates for each effective date.'

      DRZ.HELP=''                        ; *123456789012345678901234567890
      DRZ.HELP<-1>='DELETE ROUTING ZIP'
      DRZ.HELP<-1>='------------------'
      DRZ.HELP<-1>=' '
      DRZ.HELP<-1>='You are about to delete a'
      DRZ.HELP<-1>='Routing Zip and all Effective'
      DRZ.HELP<-1>='Date Ranges and Rate Tables'
      DRZ.HELP<-1>='for the Routing Zip you select'
      DRZ.HELP<-1>='Once Deleted, all data will be'
      DRZ.HELP<-1>='lost.'

      TRZ.HELP=''                        ; *123456789012345678901234567890
      TRZ.HELP<-1>='TOGGLE ROUTING ZIP'
      TRZ.HELP<-1>='------------------'
      TRZ.HELP<-1>=' '
      TRZ.HELP<-1>='You are being asked which'
      TRZ.HELP<-1>='Routing Zip you wish to TOGGLE'
      TRZ.HELP<-1>='the Enable/Disable flag.  When'
      TRZ.HELP<-1>='you TOGGLE a flag, this only'
      TRZ.HELP<-1>='means that an ENABLE flag will'
      TRZ.HELP<-1>='switch to DISABLE and a'
      TRZ.HELP<-1>='DISABLE flag will switch to an'
      TRZ.HELP<-1>='ENABLE flag - In short, it '
      TRZ.HELP<-1>='flip-flops or "Toggles" btween'
      TRZ.HELP<-1>='two states.  If a Routing Zip'
      TRZ.HELP<-1>='is disabled, then Data Entry'
      TRZ.HELP<-1>='will not use this entry for'
      TRZ.HELP<-1>='this Routing Zip OR ANY '
      TRZ.HELP<-1>='EFFECTIVE DATE RANGES UNDER '
      TRZ.HELP<-1>='THIS ROUTING ZIP no matter the'
      TRZ.HELP<-1>='status of the DATE RANGES'
      TRZ.HELP<-1>='under the Routing Zip.'

      ARZ.HELP=''                        ; *123456789012345678901234567890
      ARZ.HELP<-1>='ADD ROUTING ZIP'
      ARZ.HELP<-1>='---------------'
      ARZ.HELP<-1>=' '
      ARZ.HELP<-1>='You are adding a Routing Zip'
      ARZ.HELP<-1>='for the Client/Carrier that'
      ARZ.HELP<-1>='you have specified.  You can'
      ARZ.HELP<-1>='Enter a U.S. or CANADAN zip'
      ARZ.HELP<-1>='You can NOT enter duplicate'
      ARZ.HELP<-1>='zip codes.  All zips will be'
      ARZ.HELP<-1>='checked to see if the computer'
      ARZ.HELP<-1>='knows the City and State.  If'
      ARZ.HELP<-1>='it doesnt know the City/State'
      ARZ.HELP<-1>='it is POSSIBLE that the zip'
      ARZ.HELP<-1>='is invalid but does not mean'
      ARZ.HELP<-1>='that is invalid.  The computer'
      ARZ.HELP<-1>='may not know the City/State.'
      ARZ.HELP<-1>='You will be asked if you wish'
      ARZ.HELP<-1>='to continue using the zip.'

      SRZ.HELP=''                        ; *123456789012345678901234567890
      SRZ.HELP<-1>='SELECT ROUTING ZIP'
      SRZ.HELP<-1>='------------------'
      SRZ.HELP<-1>=' '
      SRZ.HELP<-1>='You are selecting a Routing'
      SRZ.HELP<-1>='Zip to switch to.  This will'
      SRZ.HELP<-1>='load all the rate tables and'
      SRZ.HELP<-1>='Valid Shipping Points for the'
      SRZ.HELP<-1>='choosen Routing Zip and return'
      SRZ.HELP<-1>='you to the Main Entry screen.'

      CRZ.HELP=''                        ; *123456789012345678901234567890
      CRZ.HELP<-1>='ADD ROUTING ZIP'
      CRZ.HELP<-1>='---------------'
      CRZ.HELP<-1>=' '
      CRZ.HELP<-1>='You are adding a Routing Zip'
      CRZ.HELP<-1>='for the Client/Carrier that'
      CRZ.HELP<-1>='you have specified.  You can'
      CRZ.HELP<-1>='Enter a U.S. or CANADAN zip'
      CRZ.HELP<-1>='You can NOT enter duplicate'
      CRZ.HELP<-1>='zip codes.  All zips will be'
      CRZ.HELP<-1>='checked to see if the computer'
      CRZ.HELP<-1>='knows the City and State.  If'
      CRZ.HELP<-1>='it doesnt know the City/State'
      CRZ.HELP<-1>='it is POSSIBLE that the zip'
      CRZ.HELP<-1>='is invalid but does not mean'
      CRZ.HELP<-1>='that is invalid.  The computer'
      CRZ.HELP<-1>='may not know the City/State.'
      CRZ.HELP<-1>='You will be asked if you wish'
      CRZ.HELP<-1>='to continue using the zip.'



      RETURN



*----------------------------------------------------------------------
*
* Error handler... This routine is called when an error is detected.  This
* gives the programmer a chance to press CTRL-C and debug from here out
* before aborting.
*
*----------------------------------------------------------------------
ERRORS:
      IF ERR.MSG = '' THEN
         T.MSG = 'ERROR DETECTED'
      END ELSE
         T.MSG = ERR.MSG
         ERR.MSG = ''                    ; * Don't use again By accident.
      END
      CRT @(0,21):CHAR(7):T.MSG:'-PRESS A KEY':
      INPUT NULL
      RETURN


*----------------------------------------------------------------------
* BEEP
*----------------------------------------------------------------------
BEEP:
      CRT CHAR(7):
      RETURN


*----------------------------------------------------------------------
*
*----------------------------------------------------------------------
DEBUG:
      CRT @(0,21):CHAR(7):REVON:'DEBUG - PRESS BREAK':REVOFF:@(-4):
      INPUT NULL,1
      CRT @(0,21):@(-4):
      RETURN

*
*
*
