      SUBROUTINE FB.LTL.SETUP.TABLE(VIN, F.AUDIT.TABLES, VOUT)
      ****************************************************
* Program name : FB.LTL.SETUP.TABLE
* Author       : JIM T ROW
* Date written : JAN 1996
* Library      : FBBP
* COPYRIGHT (c) : AFS, LLC 2016, All Rights Reserved.
* LTL Auto Audit Setup Program
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 09:45:46 on 11/19/2020.
*
* Start modification history
* 02/04/96 - JTR  - Unit Created
* 06/17/98 - JTR  - Modified program to store the Contract FAK and
*          -      - the Highest and Lowest occurance of FAK
* 11/06/02 - JMK01- Add accessorial charges calculation to table
* 12/19/02 - JMK02- Correct Sorting Of CWT Items
* 01/25/06 - JMK03- Add flat weight rate charges
* 01/30/06 - JMK04- Add Intra and Inter flat rate charges
* 03/07/06 - JMK05- Adjust entry process to pass over with minimums
*          -      -    for flat rate charges
* 051706 - JMK06 - Expand flat rate with more lines
* 071306 - JMK07 - Add OLA Mass Change by Class
* 110708 - JMK08 - C081905 - Allow multiple discounts on BM in OLA
* 111908 - JMK09 - T082555 - Missing Tariff Name for non-logistics clients
* 073009 - JMK10 - T090926 - Flat rate screen - Procomm
* 091009 - NPR01 - T090926 - Extensive changes to the way the Flat Weight Charges/rates screen works.
* 022112 - SWB01 - T93     - Fix 'G'lobal to not change Class and changes to limit Discount Range if LOGISTICS # 'Y'
* 082613 - JMK11 - SysAid#6869 - OLA FLAT RATE SCREEN
* 060314 - JMK12 - SysAid#9697 - Syntax error in FBBP FB.LTL.SETUP.TABLE
* 040318 - GRB01 - ADD record lock and locked name display
* 031119 - GRB02 - Set operator permission for view or update
* 111920 - NKH01 - ACCU-1055 Extended length of table variable to 3
* End modification history
*
*****************************************************

      ****  CALL GET.USER.NEW(USER,CH.NUM)

      KEITH=1

$INCLUDE FILE.DEFS INC_CLIENTS

*
* Highlighting Effects
*
      TERM.TYPE=SYSTEM(7)
      BEGIN CASE
         CASE TERM.TYPE='REGENT60'
            REVON = CHAR(14)             ; * Reverse Text ON
            REVOFF = CHAR(15)            ; * Reverse Text OFF
         CASE 1
            REVON = @(-13)
            REVOFF = @(-14)
      END CASE

      SKIP=0
*
* Line index equates - Used to index data created with
* EXTRACT.DATA.LINE
*
      EQU BILL.CLASS TO 1
      EQU CONT.CLASS TO 2
      EQU CONT.TMIN TO 3
      EQU CONT.L5C TO 4
      EQU CONT.O5C TO 5
      EQU CONT.TARIFF TO 6
      EQU LOGI.CLASS TO 12
      EQU LOGI.TMIN TO 13                ; * JMK08
*     EQU LOGI.PLUS TO 14                ; * JMK08
      EQU LOGI.L5C TO 14                 ; * JMK08
*     EQU LOGI.DISC TO 15                ; * JMK08
      EQU LOGI.O5C TO 15                 ; * JMK08
      EQU LOGI.TARIFF TO 16
      EQU LOGI.PLUS TO 17                ; * JMK08

      EQU MISC.CHARGE.CODES TO 26
      EQU MISC.CHARGE.CONT.AMTS TO 27
      EQU MISC.CHARGE.BENCH.AMTS TO 28
      EQU MISC.CHARGE.CONT.CWTRATES TO 49          ; * JMK01
      EQU MISC.CHARGE.CONT.CWTMINS TO 50           ; * JMK01
      EQU MISC.CHARGE.CONT.CWTMAXS TO 51           ; * JMK01
      EQU MISC.CHARGE.BENCH.CWTRATES TO 52         ; * JMK01
      EQU MISC.CHARGE.BENCH.CWTMINS TO 53          ; * JMK01
      EQU MISC.CHARGE.BENCH.CWTMAXS TO 54          ; * JMK01
      EQU FLAT.BEG.WT TO 55              ; *
      EQU FLAT.END.WT TO 56              ; * JMK03
*     EQU FLAT.CONTR.CHGS TO 57          ; * JMK03 ; * JMK04
*     EQU FLAT.LOGISTICS TO 58           ; * JMK03 ; * JMK04
      EQU FLAT.INTRA.CONTR.CHGS TO 57    ; * JMK03 ; * JMK04
      EQU FLAT.INTRA.LOGISTICS TO 58     ; * JMK03 ; * JMK04
      EQU FLAT.INTER.CONTR.CHGS TO 59    ; * JMK03 ; * JMK04
      EQU FLAT.INTER.LOGISTICS TO 60     ; * JMK03 ; * JMK04

*
* PROGRAMMER NOTICE! Make note of the the imbedded CUR.LINE

*
      EQU RT.BILL.CLASS TO RATE.TABLE<BILL.CLASS ,CUR.LINE>
      EQU RT.CONT.CLASS TO RATE.TABLE<CONT.CLASS ,CUR.LINE>
      EQU RT.CONT.TMIN TO RATE.TABLE<CONT.TMIN ,CUR.LINE>
      EQU RT.CONT.L5C TO RATE.TABLE<CONT.L5C ,CUR.LINE>
      EQU RT.CONT.O5C TO RATE.TABLE<CONT.O5C ,CUR.LINE>
      EQU RT.CONT.TARIFF TO RATE.TABLE<CONT.TARIFF,CUR.LINE>
      EQU RT.LOGI.CLASS TO RATE.TABLE<LOGI.CLASS ,CUR.LINE>
      EQU RT.LOGI.TMIN TO RATE.TABLE<LOGI.TMIN ,CUR.LINE>    ; * JMK08
      EQU RT.LOGI.L5C TO RATE.TABLE<LOGI.L5C ,CUR.LINE>      ; * JMK08
      EQU RT.LOGI.O5C TO RATE.TABLE<LOGI.O5C ,CUR.LINE>      ; * JMK08
      EQU RT.LOGI.PLUS TO RATE.TABLE<LOGI.PLUS ,CUR.LINE>
*     EQU RT.LOGI.DISC TO RATE.TABLE<LOGI.DISC ,CUR.LINE>    ; * JMK08
      EQU RT.LOGI.TARIFF TO RATE.TABLE<LOGI.TARIFF,CUR.LINE>
      EQU RT.INTRA.CONTR TO RATE.TABLE<21,1>
      EQU RT.INTER.CONTR TO RATE.TABLE<21,2>
      EQU RT.INTRA.BENCH TO RATE.TABLE<22,1>
      EQU RT.INTER.BENCH TO RATE.TABLE<22,2>
      EQU RT.TABLE.ACTIVE TO RATE.TABLE<25>
      EQU RT.MISC.CODE TO RATE.TABLE<26,CUR.LINE>
      EQU RT.MISC.AMOUNT TO RATE.TABLE<27,CUR.LINE>
      EQU RT.COMMENT TO RATE.TABLE<30>
      EQU RT.DESCRIPTION TO RATE.TABLE<31>
      EQU RT.CUTBACK.CODE TO RATE.TABLE<32>
      EQU RT.CFAK.CLASS TO RATE.TABLE<33>
      EQU RT.CFAK.LOWEST TO RATE.TABLE<34>
      EQU RT.CFAK.HIGHEST TO RATE.TABLE<35>
      EQU RT.CFAK.05C TO RATE.TABLE<36>


      EQU TRUE TO 1
      EQU FALSE TO 0

      FIELDS = BILL.CLASS
      FIELDS< 2>= CONT.CLASS
      FIELDS< 3>= CONT.TMIN
      FIELDS< 4>= CONT.L5C
      FIELDS< 5>= CONT.O5C
*     FIELDS< 6>= CONT.TARIFF            ; * JMK08
*     FIELDS< 7>= LOGI.CLASS             ; * JMK08
*     FIELDS< 8>= LOGI.DISC              ; * JMK08
*     FIELDS< 9>= LOGI.PLUS              ; * JMK08
*     FIELDS<10>= LOGI.TARIFF            ; * JMK08
      FIELDS< 6>= LOGI.CLASS             ; * JMK08
      FIELDS< 7>= LOGI.TMIN              ; * JMK08
      FIELDS< 8>= LOGI.L5C               ; * JMK08
      FIELDS< 9>= LOGI.O5C               ; * JMK08
      FIELDS<10>= LOGI.PLUS              ; * JMK08
      FIELDS<11>= CONT.TARIFF            ; * JMK08

*
* Init Variables
*

      PROG.NAME = 'FB.LTL.SETUP.TABLE'
      CO.NAME = 'AFS Logistics, LLC'
      PROG.DESC = 'Audit Table Entry'

      CLASSES =50:@VM:55:@VM:60:@VM:65:@VM:70:@VM:77:@VM:85
      CLASSES:=@VM:92:@VM:100:@VM:110:@VM:125:@VM:150:@VM:175
      CLASSES:=@VM:200:@VM:250:@VM:300:@VM:400:@VM:500
      MAX.NUM.CLASSES=DCOUNT(CLASSES,@VM)

      CUR.LINE = 1
      RATE.TABLE=''
      TEMP.TABLE=''
      FAILURE='' ; EXIT.IT=''
      LAST.DATA.LINE = ''
      MAT CLIENT.REC = ''
      CUTBACK.DESC=''
      MAX.DISC.COL = 3                   ; * SWB01

*
* Init support 'Subroutine' variables
*
      AFN.MSG='' ; AFN.MIN=0 ; AFN.MAX=0 ; AFN.MASK=''
      YN.MSG='' ; YN.MASK='' ; YN.ANSWER=''
      ISN.ALLOW.OTHER = '' ; ISN.OTHER=''
      ISN.IN='' ; ISN.DEFAULT=''
      ISN.ERROR = 'Invalid Entry! Try Again.'

*
* Extract Passed Values
*
      TABLE.NUM = VIN<1>
      CLIENT.ID = VIN<2,1>'R%5'
      CLIENT.NAME = VIN<2,2>
      CARRIER.ID = VIN<3,1>'R%5'
      CARRIER.NAME = VIN<3,2>
      TABLE.DESC = VIN<5>
      CBVOUT=''
      CBVOUT<1>=VIN<6>
      USER = VIN<7>
      CH.NUM = VIN<8>
WRITE.DATA = VIN<9>;* GRB02
      EXIT.KEY = ''
      SAVE.IT = TRUE

      PACK.NAME = 'TABLE :':TABLE.NUM'L#3'   ; * NKH01

      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'FB.LTL.SETUP.TABLE' ; UPL.VOUT = ''       ; * NPR_UPL 04/23/2010
      UPL.VIN<3> = USER
      UPL.VIN<4> = CH.NUM
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
*
* Open necessary file systems.
*
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      GOSUB LOAD.CLIENT.DESC
      OPEN '', 'FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT("FB.TABLES", PROG.NAME)
      END
      READ TARIFFS FROM F.TABLES,'TARIFF.DATE.XREF' ELSE
         CALL ELINE('UNABLE TO READ TARIFF LIST FROM "FB.TABLES,TARIFF.DATE.XREF"')
         STOP
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','FB.CUT.BACKS' TO F.CUT.BACKS ELSE
         CALL OPEN.ABORT("FB.CUT.BACKS",PROG.NAME)
      END

*
* Read Misc Charge Code Table from File
*
      READ LI.CODES FROM F.TABLES,'LI.CODES' THEN
         LI.CODES<3> = ''
         LI.CODES<4> = ''
      END ELSE
         LI.CODES=''
         CALL ELINE('UNABLE TO READ "LI.CODES" FROM "FB.TABLES"')
      END

*
* Main
*
      GOSUB DSP.AUDIT.HDR
      EXIT.IT = FALSE

      GOSUB LOAD.RATE.TABLE
      IF FAILURE THEN
*
* The table was created...
* Force Data Entry at class 50
*
         GOSUB DSP.RATE.TABLE
*
* Use LOCATE incase some idiot changes my tables...
*
         LOCATE '50' IN CLASSES<1> SETTING CUR.LINE THEN
            GOSUB INPUT.RATE.TABLE
            IF EXIT.IT THEN
               SAVE.IT = FALSE
            END
         END
      END



LS1:
      LOOP
      WHILE (NOT(EXIT.IT))
         GOSUB DSP.RATE.TABLE
         HELP = "[50-500]-Dtl [C]hrgs [G]lobal [L]TL [A]udtr Nts [S]ave [!]-Client [R]pt [D]sc"      ; * JMK07
         MASK = ' '

LS2:
         CRT @(0,22):'Option :':@(-4)
         CALL GEN.IN(8,22,MASK,'',Q,0,6,'','',2,8,22,0,QI,HELP,0,23)
         QI = TRIM(OCONV(QI,'MCU'))
         IF QI='' THEN QI=TRIM(MASK)
         BEGIN CASE
*
* Terminate Program - Dont Save Selections
*
            CASE QI = 'EX'
               GOSUB ASK.ABOUT.QUITTING
               IF EXIT.IT THEN
                  EXIT.KEY = 'EX'
                  SAVE.IT = FALSE
               END

*
* Back to Table Selection
*
            CASE QI = 'X' OR QI=''
               EXIT.KEY = 'X'
               EXIT.IT = TRUE
               SAVE.IT = TRUE

*
* Save As (Cheap Copy)
*
            CASE QI='S'
               AFN.MSG = '(This does NOT permanently change the Table Number)'
               AFN.MSG:= ' Save As Table Number? :'
               AFN.ALLOW.NULL = TRUE
               AFN.MIN =0
               AFN.MAX =999              ; * This needs to be able to handle alpha's
               AFN.MASK='X '
               GOSUB ASK.FOR.NUM
               BEGIN CASE
                  CASE AFN.ANSWER='EX'
                     GOSUB ASK.ABOUT.QUITTING
                     IF EXIT.IT THEN
                        EXIT.KEY = 'EX'
                        SAVE.IT = FALSE
                     END
                  CASE AFN.ANSWER='X'
                  CASE AFN.ANSWER#''
                     T.TABLE.NUM = AFN.ANSWER
                     GOSUB CHECK.FOR.TABLE
                     T.WRITE.TABLE = NOT(TABLE.FOUND)
                     IF TABLE.FOUND THEN
                        YN.MSG = 'WARNING! Table number "'
                        YN.MSG:=T.TABLE.NUM:'" already exists!'
                        YN.MSG:=' Do you with to OVERWRITE it? '
                        YN.MASK = 'N '
                        GOSUB ASK.Y.OR.N
                        T.WRITE.TABLE = (YN.ANSWER='Y')
                     END
*
* Is this a DIFFERENT TABLE NUMBER?
*
                     OLD.TABLE.DESC = RATE.TABLE<31>
                     IF T.TABLE.NUM # TABLE.NUM THEN
*
* Ask user to enter a table description
*
                        GOSUB EDIT.TABLE.DESCRIPTION
                        IF QI='X' THEN T.WRITE.TABLE = FALSE
                     END

                     IF T.WRITE.TABLE THEN
                        OLD.TABLE.NUM = TABLE.NUM
                        TABLE.NUM = T.TABLE.NUM
                        GOSUB SAVE.RATE.TABLE
                        TABLE.NUM = OLD.TABLE.NUM
                        RATE.TABLE<31> = OLD.TABLE.DESC
                        CALL ELINE('A copy of this table has been saved with the table number ':T.TABLE.NUM)
                     END
               END CASE
*
* Repeat Line
*
            CASE QI='R'
               REPEAT.FROM=''
               REPEAT.TO.BEG=''
               REPEAT.TO.END=''
RP.1:
               CRT @(0,22):"Repeat Rate  ":REPEAT.FROM'R#3':"  To  ":REPEAT.TO.BEG'R#3':"  Thru  ":REPEAT.TO.END'R#3':@(-4)
               IF REPEAT.FROM='' THEN MASK='###' ELSE MASK=REPEAT.FROM'R#3'
               HELP='Enter the rate that is to be repeated'
               CALL GEN.IN(13,22,MASK,'',Q,0,3,'','',2,13,22,0,QI,HELP,0,23)
               QI=OCONV(QI,'MCU')
               IF QI='' THEN QI=REPEAT.FROM
               BEGIN CASE
                  CASE QI = 'EX'
                     GOSUB ASK.ABOUT.QUITTING
                     IF EXIT.IT THEN
                        EXIT.KEY='EX'
                        SAVE.IT=FALSE
                     END
                     GOTO LS1
                  CASE QI = 'X'
                     GOTO LS1
                  CASE QI # '' AND NUM(QI)
                     LOCATE QI IN CLASSES<1> SETTING CUR.LINE ELSE
                        CALL ELINE('Invalid Selection - Please Try Again')
                        GOTO RP.1
                     END
                  CASE 1
                     CALL ELINE('Invalid Selection - Please Try Again')
                     GOTO RP.1
               END CASE
               IF RATE.TABLE<CONT.CLASS,CUR.LINE>='' THEN
                  CALL ELINE('Repeat not allow on an incomplete line ')
                  GOTO RP.1
               END
               REPEAT.FROM=QI
               IF CUR.LINE # MAX.NUM.CLASSES THEN
                  REPEAT.TO.BEG=CLASSES<1,CUR.LINE+1>
                  REPEAT.TO.END=CLASSES<1,MAX.NUM.CLASSES>
               END
RP.2:
               CRT @(0,22):"Repeat Rate  ":REPEAT.FROM'R#3':"  To  ":REPEAT.TO.BEG'R#3':"  Thru  ":REPEAT.TO.END'R#3':@(-4)
               HELP='Enter the beginning rate line to be repeated'
               IF REPEAT.TO.BEG='' THEN MASK='###' ELSE MASK=REPEAT.TO.BEG'R#3'
               CALL GEN.IN(22,22,MASK,'',Q,0,3,'','',2,22,22,0,QI,HELP,0,23)
               QI=OCONV(QI,'MCU')
               IF QI='' THEN QI=REPEAT.TO.BEG
               BEGIN CASE
                  CASE QI = 'EX'
                     GOSUB ASK.ABOUT.QUITTING
                     IF EXIT.IT THEN
                        EXIT.KEY='EX'
                        SAVE.IT=FALSE
                        GOTO LS1
                     END
                     GOTO RP.2
                  CASE QI = 'X'
                     GOTO RP.1
                  CASE QI # '' AND NUM(QI)
                     LOCATE QI IN CLASSES<1> SETTING BEG.CUR.LINE ELSE
                        CALL ELINE('Invalid Selection - Please Try Again')
                        GOTO RP.2
                     END
                  CASE 1
                     CALL ELINE('Invalid Selection - Please Try Again')
                     GOTO RP.2
               END CASE
               REPEAT.TO.BEG=QI
RP.3:
               CRT @(0,22):"Repeat Rate  ":REPEAT.FROM'R#3':"  To  ":REPEAT.TO.BEG'R#3':"  Thru  ":REPEAT.TO.END'R#3':@(-4)
               IF REPEAT.TO.END='' THEN MASK='###' ELSE MASK=REPEAT.TO.END'R#3'
               HELP='Enter the ending rate line to be repeated'
               CALL GEN.IN(33,22,MASK,'',Q,0,3,'','',2,33,22,0,QI,HELP,0,23)
               QI=OCONV(QI,'MCU')
               IF QI='' THEN QI=REPEAT.TO.END
               BEGIN CASE
                  CASE QI = 'EX'
                     GOSUB ASK.ABOUT.QUITTING
                     IF EXIT.IT THEN
                        EXIT.KEY='EX'
                        SAVE.IT=FALSE
                        GOTO LS1
                     END
                     GOTO RP.3
                  CASE QI = 'X'
                     GOTO RP.2
                  CASE QI # '' AND NUM(QI)
                     LOCATE QI IN CLASSES<1> SETTING END.CUR.LINE THEN
                        IF END.CUR.LINE < BEG.CUR.LINE THEN
                           CALL ELINE('End rate line must be greater than beginning rate line')
                           GOTO RP.3
                        END
                     END ELSE
                        CALL ELINE('Invalid Selection - Please Try Again')
                        GOTO RP.3
                     END
                  CASE 1
                     CALL ELINE('Invalid Selection - Please Try Again')
                     GOTO RP.3
               END CASE
               REPEAT.TO.END=QI
               FOR LINE.NO = BEG.CUR.LINE TO END.CUR.LINE

                  FOR T = CONT.CLASS TO LOGI.PLUS  ; * JMK08
                     RATE.TABLE<T,LINE.NO>=RATE.TABLE<T,CUR.LINE>
                  NEXT T
               NEXT LINE.NO

*
* Global Change
*
            CASE QI='G'                  ; * JMK07
               GLOBAL.CLS.BEG=''         ; * JMK07
               GLOBAL.CLS.END=''         ; * JMK07
               GLOBAL.COL.BEG=''         ; * JMK08
               GLOBAL.COL.END=''         ; * JMK08
               GLOBAL.FROM=''            ; * JMK07
               GLOBAL.TO=''              ; * JMK07
               GLOBAL.ACT=''             ; * JMK07
GL.1:

               CRT @(0,22):"Class Range ":GLOBAL.CLS.BEG'R#3':" To ":GLOBAL.CLS.END'R#3':" Disc Range ":GLOBAL.COL.BEG'R#3':" To ":GLOBAL.COL.END'R#3':" From ":GLOBAL.FROM'R26#5':" To ":GLOBAL.TO'R26#5':@(-4)   ; * JMK07 ; * JMK08
               IF GLOBAL.CLS.BEG='' THEN MASK='###' ELSE MASK=GLOBAL.CLS.BEG'R#3'          ; * JMK07
               HELP='Enter the beginning class to change'    ; * JMK07
               CALL GEN.IN(12,22,MASK,'',Q,0,3,'','',2,12,22,0,QI,HELP,0,23)     ; * JMK07
               QI=OCONV(QI,'MCU')        ; * JMK07
               IF QI='' THEN QI=GLOBAL.CLS.BEG     ; * JMK07
               BEGIN CASE                ; * JMK07
                  CASE QI = 'EX'         ; * JMK07
                     GOSUB ASK.ABOUT.QUITTING      ; * JMK07
                     IF EXIT.IT THEN     ; * JMK07
                        EXIT.KEY='EX'    ; * JMK07
                        SAVE.IT=FALSE    ; * JMK07
                     END                 ; * JMK07
                     GOTO LS1            ; * JMK07
                  CASE QI = 'X'          ; * JMK07
                     GOTO LS1            ; * JMK07
                  CASE QI # '' AND NUM(QI)         ; * JMK07
                     LOCATE QI IN CLASSES<1> SETTING BEG.CUR.LINE ELSE           ; * JMK07
                        CALL ELINE('Invalid Selection - Please Try Again')       ; * JMK07
                        GOTO GL.1        ; * JMK07
                     END                 ; * JMK07
                  CASE 1                 ; * JMK07
                     CALL ELINE('Invalid Selection - Please Try Again')          ; * JMK07
                     GOTO GL.1           ; * JMK07
               END CASE                  ; * JMK07
               GLOBAL.CLS.BEG=QI         ; * JMK07
GL.2:

               CRT @(0,22):"Class Range ":GLOBAL.CLS.BEG'R#3':" To ":GLOBAL.CLS.END'R#3':" Disc Range ":GLOBAL.COL.BEG'R#3':" To ":GLOBAL.COL.END'R#3':" From ":GLOBAL.FROM'R26#5':" To ":GLOBAL.TO'R26#5':@(-4)   ; * JMK07 ; * JMK08
               HELP='Enter the ending class to change'       ; * JMK07
               IF GLOBAL.CLS.END='' THEN MASK='###' ELSE MASK=GLOBAL.CLS.END'R#3'          ; * JMK07
               CALL GEN.IN(19,22,MASK,'',Q,0,3,'','',2,19,22,0,QI,HELP,0,23)     ; * JMK07
               QI=OCONV(QI,'MCU')        ; * JMK07
               IF QI='' THEN QI=GLOBAL.CLS.END     ; * JMK07
               BEGIN CASE                ; * JMK07
                  CASE QI = 'EX'         ; * JMK07
                     GOSUB ASK.ABOUT.QUITTING      ; * JMK07
                     IF EXIT.IT THEN     ; * JMK07
                        EXIT.KEY='EX'    ; * JMK07
                        SAVE.IT=FALSE    ; * JMK07
                        GOTO LS1         ; * JMK07
                     END                 ; * JMK07
                     GOTO GL.2           ; * JMK07
                  CASE QI = 'X'          ; * JMK07
                     GOTO GL.1           ; * JMK07
                  CASE QI # '' AND NUM(QI)         ; * JMK07
                     LOCATE QI IN CLASSES<1> SETTING END.CUR.LINE THEN           ; * JMK07
                        IF END.CUR.LINE < BEG.CUR.LINE THEN  ; * JMK07
                           CALL ELINE('End rate line must be greater than beginning rate line')      ; * JMK07
                           GOTO GL.2     ; * JMK07
                        END              ; * JMK07
                     END ELSE            ; * JMK07
                        CALL ELINE('Invalid Selection - Please Try Again')       ; * JMK07
                        GOTO GL.2        ; * JMK07
                     END                 ; * JMK07
                  CASE 1                 ; * JMK07
                     CALL ELINE('Invalid Selection - Please Try Again')          ; * JMK07
                     GOTO GL.2           ; * JMK07
               END CASE                  ; * JMK07
               GLOBAL.CLS.END=QI         ; * JMK07
GL.3:

               CRT @(0,22):"Class Range ":GLOBAL.CLS.BEG'R#3':" To ":GLOBAL.CLS.END'R#3':" Disc Range ":GLOBAL.COL.BEG'R#3':" To ":GLOBAL.COL.END'R#3':" From ":GLOBAL.FROM'R26#5':" To ":GLOBAL.TO'R26#5':@(-4)   ; * JMK07 ; * JMK08
               IF GLOBAL.COL.BEG='' THEN MASK='###' ELSE MASK=GLOBAL.COL.BEG'R#3'          ; * JMK07
               HELP='Enter the beginning discount column to change (1-':MAX.DISC.COL:')'   ; * SWB01
               CALL GEN.IN(34,22,MASK,'',Q,0,3,'','',2,34,22,0,QI,HELP,0,23)     ; * JMK07
               QI=OCONV(QI,'MCU')        ; * JMK07
               IF QI='' THEN QI=GLOBAL.COL.BEG     ; * JMK07
               BEGIN CASE                ; * JMK07
                  CASE QI = 'EX'         ; * JMK07
                     GOSUB ASK.ABOUT.QUITTING      ; * JMK07
                     IF EXIT.IT THEN     ; * JMK07
                        EXIT.KEY='EX'    ; * JMK07
                        SAVE.IT=FALSE    ; * JMK07
                        GOTO LS1         ; * JMK07
                     END                 ; * JMK07
                     GOTO GL.3           ; * JMK07
                  CASE QI = 'X'          ; * JMK07
                     GOTO GL.2           ; * JMK07
                  CASE QI = '1'          ; * JMK07
                     DISC.BEG=3          ; * JMK07
                  CASE QI = '2'          ; * JMK07
                     DISC.BEG=4          ; * JMK07
                  CASE QI = '3'          ; * JMK07
                     DISC.BEG=5          ; * JMK07

                  CASE QI = '4' AND CL.LOGISTICS = 'Y'       ; * SWB01
                     DISC.BEG=13         ; * JMK07

                  CASE QI = '5' AND CL.LOGISTICS = 'Y'       ; * SWB01
                     DISC.BEG=14         ; * JMK07

                  CASE QI = '6' AND CL.LOGISTICS = 'Y'       ; * SWB01
                     DISC.BEG=15         ; * JMK07
                  CASE 1                 ; * JMK07
                     CALL ELINE('Invalid Selection - Please Try Again')          ; * JMK07
                     GOTO GL.3           ; * JMK07
               END CASE                  ; * JMK07
               GLOBAL.COL.BEG=QI         ; * JMK07
GL.4:

               CRT @(0,22):"Class Range ":GLOBAL.CLS.BEG'R#3':" To ":GLOBAL.CLS.END'R#3':" Disc Range ":GLOBAL.COL.BEG'R#3':" To ":GLOBAL.COL.END'R#3':" From ":GLOBAL.FROM'R26#5':" To ":GLOBAL.TO'R26#5':@(-4)   ; * JMK07 ; * JMK08

               HELP='Enter the ending discount column to change (1-':MAX.DISC.COL:')'      ; * SWB01
               IF GLOBAL.COL.END='' THEN MASK='###' ELSE MASK=GLOBAL.COL.END'R#3'          ; * JMK07
               CALL GEN.IN(41,22,MASK,'',Q,0,3,'','',2,41,22,0,QI,HELP,0,23)     ; * JMK07
               QI=OCONV(QI,'MCU')        ; * JMK07
               IF QI='' THEN QI=GLOBAL.COL.END     ; * JMK07
               BEGIN CASE                ; * JMK07
                  CASE QI = 'EX'         ; * JMK07
                     GOSUB ASK.ABOUT.QUITTING      ; * JMK07
                     IF EXIT.IT THEN     ; * JMK07
                        EXIT.KEY='EX'    ; * JMK07
                        SAVE.IT=FALSE    ; * JMK07
                        GOTO LS1         ; * JMK07
                     END                 ; * JMK07
                     GOTO GL.4           ; * JMK07
                  CASE QI = 'X'          ; * JMK07
                     GOTO GL.3           ; * JMK07
                  CASE QI = '1'          ; * JMK07
                     DISC.END=3          ; * JMK07
                  CASE QI = '2'          ; * JMK07
                     DISC.END=4          ; * JMK07
                  CASE QI = '3'          ; * JMK07
                     DISC.END=5          ; * JMK07
                  CASE QI = '4' AND CL.LOGISTICS = 'Y'       ; * SWB01
                     DISC.END=13         ; * JMK07
                  CASE QI = '5' AND CL.LOGISTICS = 'Y'       ; * SWB01
                     DISC.END=14         ; * JMK07
                  CASE QI = '6' AND CL.LOGISTICS = 'Y'       ; * SWB01
                     DISC.END=15         ; * JMK07
                  CASE 1                 ; * JMK07
                     CALL ELINE('Invalid Selection - Please Try Again')          ; * JMK07
                     GOTO GL.4           ; * JMK07
               END CASE                  ; * JMK07
               GLOBAL.COL.END=QI         ; * JMK07
GL.5:

               CRT @(0,22):"Class Range ":GLOBAL.CLS.BEG'R#3':" To ":GLOBAL.CLS.END'R#3':" Disc Range ":GLOBAL.COL.BEG'R#3':" To ":GLOBAL.COL.END'R#3':" From ":GLOBAL.FROM'R26#5':" To ":GLOBAL.TO'R26#5':@(-4)   ; * JMK07 ; * JMK08
               IF GLOBAL.FROM='' THEN MASK='##.##' ELSE MASK=GLOBAL.FROM'R26#5'  ; * JMK07
               HELP='Enter the old value'          ; * JMK07
               CALL GEN.IN(50,22,MASK,'AMT2',Q,0,5,'','',2,50,22,0,QI,HELP,0,23)           ; * JMK07
               QI=OCONV(QI,'MCU')        ; * JMK07
               IF QI='' THEN QI=GLOBAL.FROM        ; * JMK07
               BEGIN CASE                ; * JMK07
                  CASE QI = 'EX'         ; * JMK07
                     GOSUB ASK.ABOUT.QUITTING      ; * JMK07
                     IF EXIT.IT THEN     ; * JMK07
                        EXIT.KEY='EX'    ; * JMK07
                        SAVE.IT=FALSE    ; * JMK07
                        GOTO LS1         ; * JMK07
                     END                 ; * JMK07
                     GOTO GL.5           ; * JMK07
                  CASE QI = 'X'          ; * JMK07
                     GOTO GL.4           ; * JMK07
                  CASE QI # '' AND NUM(QI)         ; * JMK07
                     VALUE.FOUND=0       ; * JMK07
                     FOR LINE.NO = BEG.CUR.LINE TO END.CUR.LINE        ; * JMK07

                        FOR T = DISC.BEG TO DISC.END         ; * JMK07 ; * JMK08
                           IF T < 6 OR T > 12 THEN           ; * SWB01
                              IF RATE.TABLE<T,LINE.NO>=Q THEN VALUE.FOUND=1      ; * JMK07
                           END           ; * SWB01
                        NEXT T           ; * JMK07
                     NEXT LINE.NO        ; * JMK07
                     IF VALUE.FOUND=0 THEN         ; * JMK07
                        CALL ELINE('Invalid Selection - Please Try Again')       ; * JMK07
                        GOTO GL.5        ; * JMK07
                     END                 ; * JMK07
                  CASE 1                 ; * JMK07
                     CALL ELINE('Invalid Selection - Please Try Again')          ; * JMK07
                     GOTO GL.5           ; * JMK07
               END CASE                  ; * JMK07
               GLOBAL.FROM=Q             ; * JMK07
GL.6:

               CRT @(0,22):"Class Range ":GLOBAL.CLS.BEG'R#3':" To ":GLOBAL.CLS.END'R#3':" Disc Range ":GLOBAL.COL.BEG'R#3':" To ":GLOBAL.COL.END'R#3':" From ":GLOBAL.FROM'R26#5':" To ":GLOBAL.TO'R26#5':@(-4)   ; * JMK07 ; * JMK08
               IF GLOBAL.TO='' THEN MASK='##.##' ELSE MASK=GLOBAL.TO'R26#5'      ; * JMK07
               HELP='Enter the new value'          ; * JMK07
               CALL GEN.IN(59,22,MASK,'AMT2',Q,0,5,'','',2,59,22,0,QI,HELP,0,23)           ; * JMK07
               QI=OCONV(QI,'MCU')        ; * JMK07
               IF QI='' THEN QI=GLOBAL.TO          ; * JMK07
               BEGIN CASE                ; * JMK07
                  CASE QI = 'EX'         ; * JMK07
                     GOSUB ASK.ABOUT.QUITTING      ; * JMK07
                     IF EXIT.IT THEN     ; * JMK07
                        EXIT.KEY='EX'    ; * JMK07
                        SAVE.IT=FALSE    ; * JMK07
                        GOTO LS1         ; * JMK07
                     END                 ; * JMK07
                     GOTO GL.6           ; * JMK07
                  CASE QI = 'X'          ; * JMK07
                     GOTO GL.5           ; * JMK07
                  CASE QI # '' AND NUM(QI)         ; * JMK07
                  CASE 1                 ; * JMK07
                     CALL ELINE('Invalid Selection - Please Try Again')          ; * JMK07
                     GOTO GL.4           ; * JMK07
               END CASE                  ; * JMK07
               GLOBAL.TO=Q               ; * JMK07
GL.7:

               CRT @(0,22):"Class Range ":GLOBAL.CLS.BEG'R#3':" To ":GLOBAL.CLS.END'R#3':" Disc Range ":GLOBAL.COL.BEG'R#3':" To ":GLOBAL.COL.END'R#3':" From ":GLOBAL.FROM'R26#5':" To ":GLOBAL.TO'R26#5':@(-4)   ; * JMK07 ; * JMK08
               DISC.BEG.SAVE = DISC.BEG  ; * SWB01
               DISC.END.SAVE = DISC.END  ; * SWB01
               FOR LINE.NO = BEG.CUR.LINE TO END.CUR.LINE    ; * JMK07
                  FOR T = DISC.BEG TO DISC.END     ; * JMK07 ; * JMK08
*The Discount columns are in 3 - 5 and 13 - 15. Don't change anything
*the 'columns' in between 5 and 13.
                     IF T < 6 OR T > 12 THEN       ; * SWB01
                        IF RATE.TABLE<T,LINE.NO>=GLOBAL.FROM THEN      ; * JMK07
                           RATE.TABLE<T,LINE.NO>=GLOBAL.TO   ; * JMK07
                        END              ; * JMK07
                     END                 ; * SWB01
                  NEXT T                 ; * JMK07
               NEXT LINE.NO              ; * JMK07
*
* Client Maintance
*
            CASE QI='!'
               DATA CLIENT.ID
               EXECUTE 'FB.1.1'
               GOSUB LOAD.CLIENT.DESC
               GOSUB DSP.AUDIT.HDR
*
* Annonataions - Auditors Notes
*
            CASE QI='A'
               GOSUB INPUT.AUDITOR.NOTES
               IF EXIT.IT THEN
                  EXIT.KEY = 'EX'
                  SAVE.IT = FALSE
               END ELSE
                  GOSUB DSP.AUDIT.HDR
               END
*
* Description Line
*
            CASE QI='D'
               GOSUB EDIT.TABLE.DESCRIPTION
*
* Misc Charges
*
            CASE QI='C'
               GOSUB INPUT.MISC.CHARGES
               IF EXIT.IT THEN
                  EXIT.KEY = 'EX'
                  SAVE.IT = FALSE
               END
               GOSUB DSP.AUDIT.HDR
*
* LTL Carrier Charges
*
            CASE QI='L'
               GOSUB INPUT.CARRIER.CHARGES
               IF EXIT.IT THEN
                  EXIT.KEY = 'EX'
                  SAVE.IT = FALSE
               END
               GOSUB DSP.AUDIT.HDR
*
* Edit Class Line
*
            CASE QI#'' AND NUM(QI)
               LOCATE QI IN CLASSES<1> SETTING CUR.LINE THEN
                  GOSUB INPUT.RATE.TABLE
               END ELSE
                  CALL ELINE('Invalid Selection - Please try again')
                  GOTO LS2
               END
*
* Invalid Option...
*
            CASE 1
               CALL ELINE('Invalid Selection - Try again')
               GOTO LS2
         END CASE

      REPEAT

**************************************************
TABLE.EXIT:
**************************************************
* Init Return Values
*
      VOUT=EXIT.KEY
      IF SAVE.IT THEN
*
* Check to see that the user has setup everything....
*
         IF RT.TABLE.ACTIVE # 'Y' THEN
            YN.MSG = 'WARNING! This table is NOT active!  Do you wish to correct this? '
            YN.MASK = 'Y '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'Y' THEN
               EXIT.IT = FALSE
               GOSUB INPUT.MISC.CHARGES
               GOTO LS1
            END
         END

         GOSUB SAVE.RATE.TABLE
      END


      RETURN

**************************************************
EDIT.TABLE.DESCRIPTION:
**************************************************
*
* Edit the rate table's one line description
*
      MASK = RATE.TABLE<31>:' '
      REQ=0
      HELP = "Enter Table Description: [cr]=Exit"
      CRT @(0,22):'DESCRIPTION:':@(-4):
      IF MASK='' THEN
         REQ=1
         MASK=STR('#',65)
      END
      CALL GEN.IN(12,22,MASK,'',Q,REQ,65,'','',2,12,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='X' OR QI=''
         CASE QI='EX'
            STOP
         CASE 1
            T.MSG = TRIM(Q)
            YN.MSG = 'Accept "':T.MSG:'" ?'
            YN.MASK = 'Y '
            GOSUB ASK.Y.OR.N
            BEGIN CASE
               CASE YN.ANSWER = 'Y'
                  RATE.TABLE<31>=T.MSG
               CASE YN.ANSWER ='EX'
                  STOP
               CASE 1
                  GOTO EDIT.TABLE.DESCRIPTION
            END CASE

      END CASE

      RETURN

**************************************************
INPUT.AUDITOR.NOTES:
**************************************************
*
* Initialize Variables
*
IAN.1:
      CALL FB.DRAW.BOX(0,7,80,11,' ','+=+|+=+|')
      CALL FB.DRAW.BOX(0,7,80,3,' ','+=+|+=+|')
      CALL FB.PRINT.CENT(0,78,8,"A U D I T O R   R E M A R K S")
      CRT @(1,9):STR('-',78):

      T.NUM.LINES = DCOUNT(RATE.TABLE<30>,@VM)
      FOR T.LINE = 1 TO 7
         T = RATE.TABLE<30,T.LINE>
         CRT @(1,9+T.LINE):T'L#78':
      NEXT

IAN.2:
      MASK = '# '
      HELP = "ENTRY OPTIONS: [E]dit [D]elete [X]-Back [EX]it"
      CRT @(0,22):'OPTION:':@(-4):
      CALL GEN.IN(7,22,MASK,'',Q,0,2,'','',2,7,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI='X' OR QI=''

         CASE QI='EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN RETURN
            GOTO IAN.2

         CASE QI='D'
            YN.MSG = 'Delete the Auditor Remark? '
            YN.MASK = 'N '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'Y' THEN
               RATE.TABLE<30>=''
            END
            GOTO IAN.1

         CASE QI='E'
            GOSUB EDIT.AUDITOR.NOTES
            GOTO IAN.1

         CASE 1
            CALL ELINE('Invalid option, Please try again.')
            GOTO IAN.2
      END CASE

IAN.EXIT:

      CALL FB.DRAW.BOX(0,7,80,11,' ','')

      RETURN

**************************************************
EDIT.AUDITOR.NOTES:
**************************************************
      MASK = '#'
      HELP = "ENTRY OPTIONS: ''-Finished [B]-Back up one line  [X]-Exit"
      CRT @(0,22):'Enter a comment for the current rate table.':@(-4):
      DONE = FALSE
      T.LINE = 1

      LOOP
         MASK = RATE.TABLE<30,T.LINE>
      UNTIL (DONE)
         CALL GEN.IN(1,9+T.LINE,MASK,'',Q,0,78,'','',2,1,9+T.LINE,0,QI,HELP,0,23)
         IF QI='' THEN QI=MASK ; Q=MASK
         QI = OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='B'
               IF T.LINE>1 THEN
                  CRT @(1,9+T.LINE):RATE.TABLE<30,T.LINE>'L#78':
                  T.LINE-=1
               END
            CASE QI='X' OR QI=''
               DONE=TRUE
            CASE 1                       ; * QI # ''
               RATE.TABLE<30,T.LINE>=TRIM(Q)
               CRT @(1,9+T.LINE):RATE.TABLE<30,T.LINE>'L#78':
               IF T.LINE<7 THEN
                  T.LINE+=1
               END ELSE
                  DONE=TRUE
               END
         END CASE
      REPEAT

EAN.1:


      RETURN

**************************************************
ASK.ABOUT.QUITTING:
**************************************************

      YN.MSG = 'Exit Program and Loose any changes? '
      YN.MASK = 'N '
      GOSUB ASK.Y.OR.N
      EXIT.IT = (YN.ANSWER = 'Y')
      FAILURE+=EXIT.IT

      RETURN

**************************************************
CHECK.FOR.TABLE:
**************************************************

      TABLE.FOUND = FALSE
      T = CARRIER.ID:'*':T.TABLE.NUM
      READ DUMMY FROM F.AUDIT.TABLES,T THEN
         TABLE.FOUND = TRUE
      END

      RETURN

**************************************************
CHECK.FOR.COMPLETE.TABLE:
**************************************************

      FAILURE.MSG = ''
      FOR T.Y = 1 TO 18 UNTIL FAILURE.MSG # ''
         CUR.LINE = T.Y
         BEGIN CASE
            CASE RT.CONT.CLASS = ''
               FAILURE.MSG='CONTRACT CLASS'
            CASE RT.CONT.TMIN=''
               FAILURE.MSG='CONTRACT TMIN'
            CASE RT.CONT.L5C=''
               FAILURE.MSG='CONTRACT L5C'
            CASE RT.CONT.O5C=''
               FAILURE.MSG='CONTRACT O5C'
            CASE RT.CONT.TARIFF=''
               FAILURE.MSG='AFS TARIFF'  ; * JMK08
            CASE RATE.TABLE<38,1>='' AND RATE.TABLE<41,1>=''
               FAILURE.MSG='CONTRACT mins'
         END CASE

         IF CL.LOGISTICS = 'Y' THEN
*
* Check Logistics Client Specific Values
*
            BEGIN CASE
               CASE RT.LOGI.CLASS=''
                  FAILURE.MSG='BENCHMARK CLASS'
               CASE RT.LOGI.TMIN=''      ; * JMK08
                  FAILURE.MSG='BENCHMARK TMIN'     ; * JMK08
               CASE RT.LOGI.L5C=''       ; * JMK08
                  FAILURE.MSG='BENCHMARK L5C'      ; * JMK08
               CASE RT.LOGI.O5C=''       ; * JMK08
                  FAILURE.MSG='BENCHMARK O5C'      ; * JMK08
               CASE RT.LOGI.PLUS=''
                  FAILURE.MSG='BENCHMARK PLUS'
               CASE RATE.TABLE<39,1>='' AND RATE.TABLE<42,1>=''
                  FAILURE.MSG='BENCHMARK mins'
            END CASE
         END
      NEXT T.Y

      IF FAILURE.MSG THEN FAILURE.MSG:=' not setup. Unable to Activate Table until this is setup.'

      RETURN

**************************************************
INPUT.RATE.TABLE:
**************************************************

*
* Init our default values - Stored in DATA.LINE
*
      GOSUB EXTRACT.DATA.LINE
      FORCED.ENTRY = NOT(DATA.LINE<CONT.CLASS,CUR.LINE>)=''

      ISN.HELP = ''
      ISN.ERROR = 'Invalid Entry! Try Again.'
      ISN.Y.POS = CUR.LINE+3
      FAILURE = FALSE                    ; *
      FIELD.BACK = FALSE                 ; * Flag to go back 1 field
      FIELD.SAME = FALSE                 ; * Temp Flag to force entry at particular fields
      GOING.BACK = FALSE                 ; * Keeps up with X back across 'skipped fields'
      FIELD.PTR = 1                      ; * The current field
      MAX.FIELDS = DCOUNT(FIELDS,@AM)    ; * JMK08

      LOOP
         FIELD.POS = FIELDS<FIELD.PTR>
         BEGIN CASE
            CASE FIELD.POS=CONT.CLASS
               ISN.X.POS = 5
               ISN.HELP = 'Enter Contract LTL Class:  [F]ill [X]=Back [EX]it Program'
               ISN.INPUT.MASK = ''
               ISN.TABLE=CLASSES:@VM:'F'
               ISN.FORMAT = 'MR(#3)'
               ISN.LEN = 3
               IF CUR.LINE = 1 THEN
                  ISN.DEFAULT=''
               END ELSE
                  IF LAST.DATA.LINE<CONT.CLASS> = CLASSES<1,CUR.LINE-1> THEN
*
* Last Line was actual Class - Set the defualt to this class
*
                     ISN.DEFAULT=CLASSES<1,CUR.LINE>
                  END ELSE
                     ISN.DEFAULT=''
                  END
               END
               GOSUB INPUT.SIMPLE.TABLE
               IF DATA.LINE<CONT.CLASS>='F' THEN
                  GOSUB FILL.IN.BLANKS
                  FIELD.POS = CONT.TARIFF          ; * Exit line...
                  FAILURE = TRUE         ; * Do not store DATA.LINE
               END

            CASE FIELD.POS=CONT.TMIN
               ISN.X.POS = 9
               ISN.FORMAT = 'MR22(#5)'
               ISN.ALLOW.NULL=FALSE
               ISN.INPUT.MASK = 'AMT2'
               ISN.HELP = 'Enter Contract Tariff Minimum Percentage:  [X]=Back [EX]it Program'
               ISN.LEN = 5
               GOSUB TABLE.INPUT.NUMBER
               FIELD.BACK = FAILURE
            CASE FIELD.POS=CONT.L5C
               ISN.X.POS = 15
               ISN.FORMAT = 'MR22(#5)'
               ISN.ALLOW.NULL=FALSE
               ISN.HELP = 'Enter L5C (Lessthan 500 Lbs) Contract Percentage:  [X]=Back [EX]it Program'
               ISN.INPUT.MASK = 'AMT2'
               ISN.LEN = 5
               GOSUB TABLE.INPUT.NUMBER
               FIELD.BACK = FAILURE
            CASE FIELD.POS=CONT.O5C
               ISN.X.POS = 21
               ISN.FORMAT = 'MR22(#5)'
               ISN.ALLOW.NULL=FALSE
               ISN.HELP = 'Enter O5C (500 Lbs and Over) Contract Percentage:  [X]=Back [EX]it Program'
               ISN.INPUT.MASK = 'AMT2'
               ISN.LEN = 5
               GOSUB TABLE.INPUT.NUMBER
               FIELD.BACK = FAILURE
            CASE FIELD.POS=LOGI.CLASS
               IF CL.LOGISTICS = 'Y' THEN
                  ISN.X.POS = 29         ; * JMK08
                  ISN.HELP = 'Enter Benchmark LTL Class:  [X]=Back [EX]it Program'
                  ISN.TABLE=CLASSES:@VM:'F'
                  ISN.FORMAT = 'MR(#3)'
                  ISN.LEN = 3
                  IF CUR.LINE = 1 THEN
                     ISN.DEFAULT=''
                  END ELSE
                     IF LAST.DATA.LINE<LOGI.CLASS> = CLASSES<1,CUR.LINE-1> THEN
*
* Last Line was actual Class - Set the defualt to this class
*
                        ISN.DEFAULT=CLASSES<1,CUR.LINE>
                     END ELSE
                        ISN.DEFAULT=''   ; * Force to use the last line entered.
                     END
                  END
                  GOSUB INPUT.SIMPLE.TABLE
                  IF DATA.LINE<LOGI.CLASS>='F' THEN
                     GOSUB FILL.IN.BLANKS
                     FIELD.POS = CONT.TARIFF       ; * Exit line...
                     FAILURE = TRUE      ; * Do not store DATA.LINE
                  END
                  FIELD.BACK = FAILURE
               END

            CASE FIELD.POS=LOGI.TMIN     ; * JMK08
               IF CL.LOGISTICS = 'Y' THEN          ; * JMK08
                  ISN.X.POS = 33         ; * JMK08
                  ISN.FORMAT = 'MR22(#5)'          ; * JMK08
                  ISN.ALLOW.NULL=FALSE   ; * JMK08
                  ISN.INPUT.MASK = 'AMT2'          ; * JMK08
                  ISN.HELP = 'Enter Benchmark Tariff Minimum Percentage:  [X]=Back [EX]it Program'   ; * JMK08
                  ISN.LEN = 5            ; * JMK08
                  GOSUB TABLE.INPUT.NUMBER         ; * JMK08
                  FIELD.BACK = FAILURE   ; * JMK08
               END                       ; * JMK08
            CASE FIELD.POS=LOGI.L5C      ; * JMK08
               IF CL.LOGISTICS = 'Y' THEN          ; * JMK08
                  ISN.X.POS = 39         ; * JMK08
                  ISN.FORMAT = 'MR22(#5)'          ; * JMK08
                  ISN.ALLOW.NULL=FALSE   ; * JMK08
                  ISN.HELP = 'Enter L5C (Lessthan 500 Lbs) Benchmark Percentage:  [X]=Back [EX]it Program'     ; * JMK08
                  ISN.INPUT.MASK = 'AMT2'          ; * JMK08
                  ISN.LEN = 5            ; * JMK08
                  GOSUB TABLE.INPUT.NUMBER         ; * JMK08
                  FIELD.BACK = FAILURE   ; * JMK08
               END                       ; * JMK08
            CASE FIELD.POS=LOGI.O5C      ; * JMK08
               IF CL.LOGISTICS = 'Y' THEN          ; * JMK08
                  ISN.X.POS = 45         ; * JMK08
                  ISN.FORMAT = 'MR22(#5)'          ; * JMK08
                  ISN.ALLOW.NULL=FALSE   ; * JMK08
                  ISN.HELP = 'Enter O5C (500 Lbs and Over) Benchmark Percentage:  [X]=Back [EX]it Program'     ; * JMK08
                  ISN.INPUT.MASK = 'AMT2'          ; * JMK08
                  ISN.LEN = 5            ; * JMK08
                  GOSUB TABLE.INPUT.NUMBER         ; * JMK08
                  FIELD.BACK = FAILURE   ; * JMK08
               END                       ; * JMK08
            CASE FIELD.POS=LOGI.PLUS
               IF CL.LOGISTICS = 'Y' THEN
                  ISN.X.POS = 51         ; * JMK08
                  ISN.FORMAT = 'MR22(#5)'
                  IF CUR.LINE > 1 THEN
                     CRT @(ISN.X.POS,ISN.Y.POS):OCONV(DATA.LINE<FIELD.POS>,ISN.FORMAT)
                     FIELD.BACK = GOING.BACK
                  END ELSE
                     ISN.INPUT.MASK = 'AMT2'
                     ISN.HELP = 'Enter Benchmark Plus Percentage:  [X]=Back [EX]it Program'
                     ISN.LEN = 5
                     GOSUB TABLE.INPUT.NUMBER
                     FIELD.BACK = FAILURE

                     IF DATA.LINE<LOGI.PLUS> AND DATA.LINE<LOGI.O5C>=0 THEN      ; * JMK08
                        CALL ELINE('The Plus% is not correct without a Disc%. Please correct this!')
                        FIELD.BACK = 1
                     END
                  END
               END

            CASE FIELD.POS=CONT.TARIFF

               ISN.X.POS = 27            ; * JMK08
               IF CL.LOGISTICS = 'Y' THEN          ; * JMK09
                  ISN.X.POS = 57         ; * JMK08
               END                       ; * JMK09
               ISN.FORMAT = 'ML(#15)'
               IF CUR.LINE > 1 THEN
                  CRT @(ISN.X.POS,ISN.Y.POS):OCONV(DATA.LINE<FIELD.POS>,ISN.FORMAT)
                  FIELD.BACK = GOING.BACK
               END ELSE
                  IF DATA.LINE<CONT.TARIFF>='' THEN ISN.DEFAULT='AFS500_9501'
                  ISN.HELP = 'Enter AFS Tariff: [S]=Select [?]=Display Tariffs [X]=Back [EX]it Progrm'         ; * JMK08
                  ISN.TABLE="S":@VM:TARIFFS<1>
                  ISN.LEN = 15
                  GOSUB INPUT.SIMPLE.TABLE
                  FIELD.BACK = FAILURE
                  IF FAILURE THEN ELSE
                     IF DATA.LINE<CONT.TARIFF> = "S" THEN
                        VIN='' ; VOUT=''
                        CALL TARIFF.SELECT(VIN,VOUT,TARIFFS)
                        GOSUB DSP.AUDIT.HDR
                        GOSUB DSP.RATE.TABLE
                        IF VOUT='X' OR VOUT='EX' THEN
                           FIELD.BACK=1
                        END ELSE
                           DATA.LINE<CONT.TARIFF> =VOUT
                           CRT @(ISN.X.POS,ISN.Y.POS):OCONV(DATA.LINE<FIELD.POS>,ISN.FORMAT)
                           GOSUB DSP.DATA.LINE
                        END
                     END
                  END
               END
         END CASE

*
* Go to next field, Stay on same field, or go back one.
*
         BEGIN CASE
            CASE FIELD.BACK
               FIELD.PTR-=1
               FAILURE = FALSE
               FIELD.BACK = FALSE
               FIELD.SAME = FALSE
               GOING.BACK = TRUE
               FIELD.POS = 0
            CASE FIELD.SAME
               FIELD.SAME = FALSE
            CASE 1
               FIELD.PTR+=1
               GOING.BACK = FALSE
         END CASE

      WHILE ((FIELD.POS # CONT.TARIFF) AND NOT(FAILURE OR EXIT.IT))
      REPEAT

*
* COMMON EXIT POINT...
*
*
* If we did not abort, Store data entry.
*
      IF NOT(FAILURE OR EXIT.IT) THEN
         GOSUB STORE.DATA.LINE
         IF CUR.LINE = 1 THEN GOSUB DSP.RATE.TABLE
*
* Is the next line blank?  If so, force user to enter it.
*
         IF CUR.LINE < 18 AND RATE.TABLE<CONT.CLASS,CUR.LINE+1>='' THEN
            CUR.LINE+=1
            GOTO INPUT.RATE.TABLE
         END
      END

      RETURN

**************************************************
FILL.IN.BLANKS:
**************************************************
*
* Make sure we have enought information to check input
*
      IF CUR.LINE < 2 THEN RETURN
*
* Special code to handled skipped fields..
*
      FOR T = CUR.LINE TO 18
         RATE.TABLE<CONT.TMIN,T> = RATE.TABLE<CONT.TMIN,T-1>
         RATE.TABLE<CONT.L5C,T> = RATE.TABLE<CONT.L5C,T-1>
         RATE.TABLE<CONT.O5C,T> = RATE.TABLE<CONT.O5C,T-1>
         RATE.TABLE<CONT.TARIFF,T> = RATE.TABLE<CONT.TARIFF,T-1>
         RATE.TABLE<LOGI.TMIN,T> = RATE.TABLE<LOGI.TMIN,T-1>           ; * JMK08
         RATE.TABLE<LOGI.L5C,T> = RATE.TABLE<LOGI.L5C,T-1>   ; * JMK08
         RATE.TABLE<LOGI.O5C,T> = RATE.TABLE<LOGI.O5C,T-1>   ; * JMK08
         RATE.TABLE<LOGI.PLUS,T> = RATE.TABLE<LOGI.PLUS,T-1>
*        RATE.TABLE<LOGI.DISC,T> = RATE.TABLE<LOGI.DISC,T-1> ; * JMK08
*        RATE.TABLE<LOGI.TARIFF,T> = RATE.TABLE<LOGI.TARIFF,T-1>       ; * JMK09
         RATE.TABLE<LOGI.TARIFF,T> = RATE.TABLE<CONT.TARIFF,T>         ; * JMK09

*
* CONTRACT CLASS: Was the prior line actual class?
*
         IF RATE.TABLE<CONT.CLASS,T-1> = CLASSES<1,T-1> THEN
*
* Last Line was actual Class - Set the default to this class
*
            RATE.TABLE<CONT.CLASS,T>=CLASSES<1,T>
         END ELSE
*
* Set class to the prior line class
*
            RATE.TABLE<CONT.CLASS,T>=RATE.TABLE<CONT.CLASS,T-1>
         END

*
* LOGISTICS CLASS: Was the prior line actual class?
*
         IF RATE.TABLE<LOGI.CLASS,T-1> = CLASSES<1,T-1> THEN
*
* Last Line was actual Class - Set the defaUlt to this class
*
            RATE.TABLE<LOGI.CLASS,T>=CLASSES<1,T>
         END ELSE
*
* Set class to the prior line class
*
            RATE.TABLE<LOGI.CLASS,T>=RATE.TABLE<LOGI.CLASS,T-1>
         END

      NEXT
      RETURN

*                ISN.X.POS  - X Position for data entry
*                ISN.Y.POS  - Y Position for data entry
*                ISN.LEN    - Len of input field
*                ISN.HELP   - Help Line
*                ISN.FORMAT - OCONV Conversion format for screen display
*                FIELD.POS  - Data position in DATA.LINE

**************************************************
TABLE.INPUT.NUMBER:
**************************************************
      ISN.DEFAULT = DATA.LINE<FIELD.POS>
      IF ISN.DEFAULT = '' THEN
         ISN.DEFAULT = LAST.DATA.LINE<FIELD.POS>
         IF CUR.LINE=1 AND ISN.DEFAULT='' THEN     ; * JMK08
            IF FIELD.POS='4' OR FIELD.POS='5' OR FIELD.POS='14' OR FIELD.POS='15' THEN     ; * JMK08
               ISN.DEFAULT=DATA.LINE<FIELD.POS-1>  ; * JMK08
            END                          ; * JMK08
         END                             ; * JMK08
      END
      GOSUB INPUT.SIMPLE.NUMBER
      IF NOT(FAILURE) THEN
         IF ISN.RETURN < 100 AND ISN.RETURN # 0 THEN
            YN.MSG = 'WARNING! Percentange entered is less than 1%! Is this Correct? '
            YN.MASK = 'N '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'N' THEN GOTO TABLE.INPUT.NUMBER
         END
         DATA.LINE<FIELD.POS>= ISN.RETURN
         IF ISN.RETURN > 10000 AND ISN.RETURN # 0 THEN
            CALL ELINE('ERROR! Percentange entered is greater than 100%!')
            GOTO TABLE.INPUT.NUMBER
         END
      END
      ISN.DEFAULT=''

      RETURN

*                ISN.X.POS  - X Position for data entry
*                ISN.Y.POS  - Y Position for data entry
*                ISN.LEN    - Len of input field
*                ISN.HELP   - Help Line
*                ISN.FORMAT - OCONV Conversion format for screen display
*                FIELD.POS  - Data position in DATA.LINE

**************************************************
INPUT.SIMPLE.NUMBER:
**************************************************
*
* Init. return value varables
*
      FAILURE=FALSE
      ISN.RETURN = ''
      ISN.OTHER.POS = 0
      ISN.NULL = FALSE

      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):

      ISN.MASK = TRIM(OCONV(ISN.DEFAULT,ISN.FORMAT)):' '
      CRT @(ISN.X.POS,ISN.Y.POS):STR(' ',ISN.LEN)

ISPE.2:
      CALL GEN.IN(ISN.X.POS,ISN.Y.POS,ISN.MASK,ISN.INPUT.MASK,Q,0,ISN.LEN,'','',2,ISN.X.POS,ISN.Y.POS,0,QI,ISN.HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=TRIM(ISN.MASK) ; Q=ISN.DEFAULT ; ISN.NULL=TRUE
      IF NOT(ISN.ALLOW.NULL) AND QI='' THEN QI='0'
      LQI=QI[LEN(QI),1]
      FQI=QI[1,LEN(QI)-1]

      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               EXIT.KEY = 'EX'
               SAVE.IT = FALSE
               FAILURE = TRUE
            END ELSE
               GOTO ISPE.2
            END
         CASE QI = 'X'
            ISN.RETURN = ISN.DEFAULT
            FAILURE = TRUE
         CASE QI = ''
         CASE NUM(QI)
            ISN.RETURN = Q'R0'
         CASE LQI = ISN.IN
            IF NUM(FQI) ELSE
               CALL ELINE('Must be numbers except the [':ISN.IN:']')
               GOTO ISPE.2
            END
            IF FQI < 0 OR FQI >= 100 THEN
               CALL ELINE('Percents must be greater 0 and less than 100')
               GOTO ISPE.2
            END
            ISN.RETURN = QI
         CASE ISN.ALLOW.OTHER = TRUE
            IF QI='A' THEN QI='ASK'
            IF QI='C' THEN QI='CWT'
            LOCATE QI IN ISN.OTHER SETTING ISN.OTHER.POS THEN
               ISN.RETURN = ISN.OTHER<ISN.OTHER.POS>
            END ELSE
               CALL ELINE(ISN.ERROR)
               ISN.OTHER.POS=0
               GOTO ISPE.2
            END
         CASE 1
            CALL ELINE(ISN.ERROR)
            GOTO ISPE.2
      END CASE
      IF ISN.OTHER.POS THEN
         T = ISN.RETURN
      END ELSE
         T = OCONV(ISN.RETURN,ISN.FORMAT)
      END
      CRT @(ISN.X.POS,ISN.Y.POS):T

      RETURN

*                ISN.X.POS  - X Position for data entry
*                ISN.Y.POS  - Y Position for data entry
*                ISN.LEN    - Len of input field
*                ISN.HELP   - Help Line
*                FIELD.POS  - Data position in DATA.LINE
* OPTIONAL INPUT:
*                ISN.DEFAULT - Will use passed default (if not NULL)

**************************************************
INPUT.SIMPLE.TABLE:
**************************************************
*
* Init. return value varables
*
      FAILURE=FALSE

      ISN.TABLE.STR = FOLD(CHANGE(ISN.TABLE,@VM,' '),78)
      ISN.POS = 1
      T.NUM.FOLDS = DCOUNT(ISN.TABLE.STR,@AM)
      IF TRIM(ISN.DEFAULT) = '' THEN
*
* Use the passed default
*
         ISN.DEFAULT = DATA.LINE<FIELD.POS>
      END
*
* Check to see if the default is blank...
*
      IF TRIM(ISN.DEFAULT) = '' THEN
*
* Check to see if there is a last line, if so, use
* the last line's default.
*
         IF LAST.DATA.LINE<FIELD.POS> # '' THEN
            ISN.DEFAULT = LAST.DATA.LINE<FIELD.POS>
         END ELSE
*
* No last line default, use the first entry in
* the table to choose from.
*
            ISN.DEFAULT = ISN.TABLE<1,1>
         END
      END

      ISN.MASK = TRIM(OCONV(ISN.DEFAULT,ISN.FORMAT)):' '
      ISN.TABLE2 = OCONV(ISN.TABLE,'MCU')
      CRT @(ISN.X.POS,ISN.Y.POS):STR(' ',ISN.LEN)

IST.2:
      CRT @(0,22):ISN.TABLE.STR<ISN.POS>:@(-4):
      CRT @(0,23):@(-4):
      CALL GEN.IN(ISN.X.POS,ISN.Y.POS,ISN.MASK,ISN.INPUT.MASK,Q,0,ISN.LEN,'','',2,ISN.X.POS,ISN.Y.POS,0,QI,ISN.HELP,0,23)
      IF QI= '' THEN QI=ISN.MASK
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               SAVE.IT = FALSE
               EXIT.KEY = 'EX'
               FAILURE = TRUE
            END ELSE
               GOTO IST.2
            END
         CASE QI='?'
            KEEP.FOLDING = TRUE
            CRT @(0,23):'OPTIONS: [ENTER]=View next line [SPACE]=Done.':@(-4):
            CRT @(0,22):
            UPDATE.FOLD = TRUE
            LOOP
               LOOP
                  INPUT INPUTBUFFER,-1
               UNTIL INPUTBUFFER=0
                  INPUT JUNK,1
                  IF JUNK # '' THEN
                     KEEP.FOLDING = FALSE
                  END ELSE
                     IF ISN.POS = T.NUM.FOLDS THEN
                        ISN.POS = 1
                     END ELSE
                        ISN.POS+= 1
                     END
                     CRT @(0,22):ISN.TABLE.STR<ISN.POS>:@(-4):
                  END
               REPEAT
            WHILE (KEEP.FOLDING)
            REPEAT
            GOTO IST.2
         CASE QI = 'X'
            FAILURE=TRUE
         CASE 1
            LOCATE QI IN ISN.TABLE2<1> SETTING POS THEN
               DATA.LINE<FIELD.POS> = ISN.TABLE<1,POS>
            END ELSE
               CALL ELINE(ISN.ERROR)
               GOTO IST.2
            END
      END CASE
      CRT @(ISN.X.POS,ISN.Y.POS):OCONV(DATA.LINE<FIELD.POS>,ISN.FORMAT)
      ISN.DEFAULT=''

      RETURN

**************************************************
EXTRACT.DATA.LINE:
**************************************************
      DATA.LINE = ''

      FOR T = CONT.CLASS TO LOGI.PLUS    ; * JMK08
         DATA.LINE<T> = RATE.TABLE<T,CUR.LINE>
      NEXT T

      RETURN

**************************************************
STORE.DATA.LINE:
**************************************************
      FOR T = CONT.CLASS TO LOGI.PLUS    ; * JMK08
         T.VAL = DATA.LINE<T>
         IF T=16 THEN T.VAL=DATA.LINE<6>

         IF T.VAL#'' THEN RATE.TABLE<T,CUR.LINE> = T.VAL
      NEXT T

*
* Special code to handled skipped fields..
*
      IF CUR.LINE = 1 THEN
         FOR T = 2 TO 18
*       RATE.TABLE<CONT.TMIN,T>    = RATE.TABLE<CONT.TMIN,1>
*       RATE.TABLE<CONT.L5C,T>     = RATE.TABLE<CONT.L5C,1>
*       RATE.TABLE<CONT.O5C,T>     = RATE.TABLE<CONT.O5C,1>
            RATE.TABLE<CONT.TARIFF,T> = RATE.TABLE<CONT.TARIFF,1>
            RATE.TABLE<LOGI.PLUS,T> = RATE.TABLE<LOGI.PLUS,1>
*           RATE.TABLE<LOGI.TARIFF,T> = RATE.TABLE<LOGI.TARIFF,1>      ; * JMK09
            RATE.TABLE<LOGI.TARIFF,T> = RATE.TABLE<CONT.TARIFF,1>      ; * JMK09
         NEXT
      END

      LAST.DATA.LINE = DATA.LINE

      RETURN

**************************************************
DSP.RATE.TABLE:
**************************************************

      T = CUR.LINE                       ; * Store CUR.LINE
      FOR T.Y = 1 TO 18
         CUR.LINE = T.Y
         GOSUB DSP.AUDIT.LINE
      NEXT T.Y
      CUR.LINE = T                       ; * Restore CUR.LINE
      RETURN

**************************************************
DSP.AUDIT.LINE:
**************************************************
*
* NOTE! The equates used here contain reference to CUR.LINE!
*
      LINE = RT.BILL.CLASS'R#4'

      IF RT.CONT.CLASS='' THEN
         LINE:= ' ---'
      END ELSE
         LINE:= RT.CONT.CLASS'R#4'
      END

      IF RT.CONT.TMIN='' THEN
         LINE:= ' -----'
      END ELSE
         LINE:= RT.CONT.TMIN'R26(#6)'
      END

      IF RT.CONT.L5C='' THEN
         LINE:= ' -----'
      END ELSE
         LINE:= RT.CONT.L5C'R26(#6)'
      END

      IF RT.CONT.O5C='' THEN
         LINE:= ' -----'
      END ELSE
         LINE:= RT.CONT.O5C'R26(#6)'
      END

      IF CL.LOGISTICS = 'Y' THEN
         LINE:='  '
         IF RT.LOGI.CLASS='' THEN
            LINE:=' ---'
         END ELSE
            LINE:= RT.LOGI.CLASS'R#4'
         END

         IF RT.LOGI.TMIN='' THEN         ; * JMK08
            LINE:= ' -----'              ; * JMK08
         END ELSE                        ; * JMK08
            LINE:= RT.LOGI.TMIN'R26(#6)'           ; * JMK08
         END                             ; * JMK08

         IF RT.LOGI.L5C='' THEN          ; * JMK08
            LINE:= ' -----'              ; * JMK08
         END ELSE                        ; * JMK08
            LINE:= RT.LOGI.L5C'R26(#6)'  ; * JMK08
         END

         IF RT.LOGI.O5C='' THEN          ; * JMK08
            LINE:= ' -----'              ; * JMK08
         END ELSE                        ; * JMK08
            LINE:= RT.LOGI.O5C'R26(#6)'  ; * JMK08
         END                             ; * JMK08

         IF RT.LOGI.PLUS='' THEN
            LINE:= ' -----'
         END ELSE
            LINE:= RT.LOGI.PLUS'R26(#6)'
         END
         LINE:= ' '
         IF RT.CONT.TARIFF='' THEN
            LINE:=STR('-',20)
         END ELSE
            LINE:= RT.CONT.TARIFF'L#20'
         END
      END ELSE                           ; * JMK09
         LINE:= ' '                      ; * JMK09
         IF RT.CONT.TARIFF='' THEN       ; * JMK09
            LINE:=STR('-',20)            ; * JMK09
         END ELSE                        ; * JMK09
            LINE:= RT.CONT.TARIFF'L#20'  ; * JMK09
         END                             ; * JMK09
      END                                ; * JMK09
      CRT @(0,3+CUR.LINE):LINE:@(-4):

      RETURN
**************************************************
DSP.DATA.LINE:
**************************************************
      LINE = DATA.LINE<BILL.CLASS>'R#4'

      T=DATA.LINE<CONT.CLASS>
      IF T='' THEN
         LINE:= ' ---'
      END ELSE
         LINE:= T'R#4'
      END

      T=DATA.LINE<CONT.TMIN>
      IF T='' THEN
         LINE:= ' -----'
      END ELSE
         LINE:= T'R26(#6)'
      END

      T=DATA.LINE<CONT.L5C>
      IF T='' THEN
         LINE:= ' -----'
      END ELSE
         LINE:= T'R26(#6)'
      END

      T=DATA.LINE<CONT.O5C>
      IF T='' THEN
         LINE:= ' -----'
      END ELSE
         LINE:= T'R26(#6)'
      END

      IF CL.LOGISTICS = 'Y' THEN
         LINE:='  '
         T=DATA.LINE<LOGI.CLASS>
         IF T='' THEN
            LINE:=' ---'
         END ELSE
            LINE:= T'R#4'
         END

         T=DATA.LINE<LOGI.TMIN>          ; * JMK08
         IF T='' THEN                    ; * JMK08
            LINE:= ' -----'              ; * JMK08
         END ELSE                        ; * JMK08
            LINE:= T'R26(#6)'            ; * JMK08
         END                             ; * JMK08

         T=DATA.LINE<LOGI.L5C>           ; * JMK08
         IF T='' THEN                    ; * JMK08
            LINE:= ' -----'              ; * JMK08
         END ELSE                        ; * JMK08
            LINE:= T'R26(#6)'            ; * JMK08
         END                             ; * JMK08

         T=DATA.LINE<LOGI.O5C>           ; * JMK08
         IF T='' THEN                    ; * JMK08
            LINE:= ' -----'              ; * JMK08
         END ELSE                        ; * JMK08
            LINE:= T'R26(#6)'            ; * JMK08
         END                             ; * JMK08

         T=DATA.LINE<LOGI.PLUS>
         IF T='' THEN
            LINE:= ' -----'
         END ELSE
            LINE:= T'R26(#6)'

         END
         LINE:= ' '                      ; * JMK09
         T=DATA.LINE<CONT.TARIFF>        ; * JMK09
         IF T='' THEN                    ; * JMK09
            LINE:=STR('-',20)            ; * JMK09
         END ELSE                        ; * JMK09
            LINE:= T'L#20'               ; * JMK09
         END                             ; * JMK09
      END ELSE                           ; * JMK09

         LINE:= ' '                      ; * JMK09
         T=DATA.LINE<CONT.TARIFF>        ; * JMK09
         IF T='' THEN                    ; * JMK09
            LINE:=STR('-',20)            ; * JMK09
         END ELSE                        ; * JMK09
            LINE:= T'L#20'               ; * JMK09
         END                             ; * JMK09
      END                                ; * JMK09
      CRT @(0,3+CUR.LINE):LINE:@(-4):

      RETURN

**************************************************
DSP.AUDIT.HDR:
**************************************************
      GOSUB INIT.SCREEN

      LINE1 ='     '
      LINE1:= '|':STR('-',4):' Contract ':STR('-',5):'|'     ; * JMK08
      IF CL.LOGISTICS = 'Y' THEN
         LINE1:= '   '
         LINE1:= '|':STR('-',7):' Benchmark ':STR('-',7):'|'           ; * JMK08
      END

      LINE2 = 'Bill'
      LINE2:= ' Cls'
      LINE2:= ' Tmin%'
      LINE2:= '  L5C%'
      LINE2:= '  O5C%'
      IF CL.LOGISTICS = 'Y' THEN
         LINE2:= '   Cls'
         LINE2:= ' Tmin%'
         LINE2:= '  L5C%'
         LINE2:= '  O5C%'
         LINE2:= ' Plus%'
         LINE2:= ' AFS Tariff Name'
      END ELSE                           ; * JMK09
         LINE2:= ' AFS Tariff Name'      ; * JMK09
      END

      CRT @(0,2):LINE1:
      CRT @(0,3):LINE2:

      CRT @(20,0):CBVOUT<1>:'Client : ':CLIENT.ID:', ':CLIENT.NAME'L#22':@(-6)
      CRT @(20,1):'Carrier: ':CARRIER.ID:', ':CARRIER.NAME'L#22'

      FOR Y = 1 TO 18
         CRT @(0,Y+3):CLASSES<1,Y>'R#3':
      NEXT Y

      RETURN

**************************************************
INIT.SCREEN:
**************************************************
      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      RETURN


**************************************************
INPUT.MISC.CHARGES:
**************************************************
      FAILURE=FALSE
      GOSUB INIT.SCREEN

      IF KEITH THEN
         INTER=0
         IF USER='KEITH' THEN
            CL.LOGISTICS='N'
         END

*
INPUT.MISC.CHARGES.KEITH:
*
         GOSUB INIT.SCREEN
         CRT @(0,2):STR('-',79):
         CRT @(0,3):CBVOUT<1>:'Client  :':CLIENT.ID:' ':CLIENT.NAME'L#62':@(-6)
         CRT @(0,4):'Carrier :':CARRIER.ID:' ':CARRIER.NAME'L#62'
         CRT @(0,5):STR('-',79):
         CRT @(0,6):'Intra Minimums:'
         TEXT='Weight  Contract  '
         IF CL.LOGISTICS='Y' THEN
            TEXT:='Bench'
         END
         CRT @(0,7):TEXT
         CRT @(43,6):'Inter Minimums:'
         TEXT='Weight  Contract  '
         IF CL.LOGISTICS='Y' THEN
            TEXT:='Bench'
         END
         CRT @(43,7):TEXT

*INTRA VALUES
*RATE.TABLE<37,X>=WEIGHT 1 (INTRA)
*
*RATE.TABLE<38,X> = CONTR FOR WEIGHT X (INTRA)
*
*RATE.TABLE<39,X> = BENCH FOR WEIGHT X (INTRA)
*

         FOR I = 1 TO 5
            IF RATE.TABLE<37,I>='' THEN
               CRT @(0,8+I):'------':
            END ELSE
               IF RATE.TABLE<37,I>='@' THEN
                  CRT @(0,8+I):"AND UP":
               END ELSE
                  CRT @(0,8+I):RATE.TABLE<37,I>:
               END
            END
         NEXT
         FOR I = 1 TO 5
            IF RATE.TABLE<38,I>='' THEN
               CRT @(8,8+I):'--------':
            END ELSE
               CRT @(8,8+I):RATE.TABLE<38,I>'L26(#8)'
            END
         NEXT
         IF CL.LOGISTICS='Y' THEN
            FOR I=1 TO 5
               IF RATE.TABLE<39,I>='' THEN
                  CRT @(18,8+I):'--------'
               END ELSE
                  CRT @(18,8+I):RATE.TABLE<39,I>'L26(#8)'
               END
            NEXT
         END

*INTER VALUES
*RATE.TABLE<40,X>=  WEIGHT 1 (INTER)
*
*RATE.TABLE<41,X> = CONTR FOR WEIGHT X (INTER)
*
*RATE.TABLE<42,X> = BENCH FOR WEIGHT X (INTRA)
*

         FOR I=1 TO 5
            IF RATE.TABLE<40,I>='' THEN
               CRT @(43,8+I):'------'
            END ELSE
               IF RATE.TABLE<40,I>='@' THEN
                  CRT @(43,8+I):"AND UP"
               END ELSE
                  CRT @(43,8+I):RATE.TABLE<40,I>
               END
            END
         NEXT
         FOR I=1 TO 5
            IF RATE.TABLE<41,I>='' THEN
               CRT @(51,8+I):'--------'
            END ELSE
               CRT @(51,8+I):RATE.TABLE<41,I>'L26(#8)'
            END
         NEXT
         IF CL.LOGISTICS='Y' THEN
            FOR I=1 TO 5
               IF RATE.TABLE<42,I>='' THEN
                  CRT @(61,8+I):'--------'
               END ELSE
                  CRT @(61,8+I):RATE.TABLE<42,I>'L26(#8)'
               END
            NEXT
         END
         CRT @( 0, 15):'3) Table Active:'
         CRT @( 0, 16):'4) Overcharge Cutback Code:'
*
         CRT @( 0, 17):'5) Flat Wt Chgs: Beg Wt End Wt Intra Contract          Inter Contract'       ; * JMK03 ; * JMK04
         IF CL.LOGISTICS='Y' THEN        ; * JMK03
            CRT @(46, 17):'Bench'        ; * JMK03
            CRT @(70, 17):'Bench'        ; * JMK04
         END                             ; * JMK03
*
SHOW.TABLE.STATUS:
*
         BEGIN CASE
            CASE RT.TABLE.ACTIVE=''
               T='---'
            CASE RT.TABLE.ACTIVE='Y'
               T='YES'
            CASE RT.TABLE.ACTIVE='N'
               T='NO '
         END CASE
         CRT @(17,15):T
*
SHOW.CUTBACK.CODE:
*
         IF RT.CUTBACK.CODE='' THEN
            T = '-------'
         END ELSE
            T = RT.CUTBACK.CODE:' (':CUTBACK.DESC
            T = T[1,129]:')'             ; * 49+80 Inclues the next 80 col line...
         END
         CRT @(29,16):T:@(-4)
         GOSUB SHOW.WEIGHT.CHGS          ; * JMK06
*
*
DISP.CHOICE:
*
         IF SKIP THEN
            SKIP=0
            GOTO SKIP.POINT
         END ELSE
            CRT @(0,21):'Enter Option :':@(-4)

            CRT @(0,22):'Options: [1]=Intra [2]=Inter [3]=Active ':@(-4):        ; * JMK03
            CRT @(0,23):'         [4]=CutBack Code [5]=Flt Chrgs [L]=Ltl Carrier Chrgs [X]=Back [EX]it':@(-4):           ; * JMK03
            MASK = ' '
            CALL GEN.IN(16,21,MASK,'',Q,0,3,'','',1,16,21,0,QI,'',0,23)
            QI = OCONV(QI,'MCU')
            BEGIN CASE
               CASE QI = 'EX'
                  GOSUB ASK.ABOUT.QUITTING
                  IF NOT(EXIT.IT) THEN GOTO DISP.CHOICE
                  CRT @(0,21):@(-4):
                  CRT @(0,22):@(-4):
                  CRT @(0,23):@(-4):
               CASE QI = 'X' OR QI=''
                  RETURN
*
* Intrastate Contract Min
*
               CASE QI = '1'
                  GOTO ENTER.INTRA.CONTR.KEITH
*
* Intrastate Benchmark Min
*
               CASE QI = '2'
                  INTER=1
                  GOTO ENTER.INTRA.CONTR.KEITH
*
* Toggle Table Active Status
*
               CASE QI = '3'
                  GOSUB TOGGLE.TABLE.STATUS
                  GOTO SHOW.TABLE.STATUS
*
* Cutback Code
*
               CASE QI = '4'
                  GOSUB INPUT.CUTBACK.CODE
                  GOTO SHOW.CUTBACK.CODE
*
* Flat Weight Charges
*
               CASE QI = '5'             ; * JMK03
                  GOSUB ENTER.FLAT.CHGS  ; * JMK03
                  GOTO INPUT.MISC.CHARGES.KEITH    ; * JMK06

*
* LTL Carrier Charge Codes
*
               CASE QI = 'L'
                  GOSUB INPUT.CARRIER.CHARGES
                  GOTO INPUT.MISC.CHARGES.KEITH

               CASE 1
                  CALL ELINE('Invalid option, Try Again.')
                  GOTO DISP.CHOICE
            END CASE
         END

**************************************************
SKIP.POINT:
**************************************************
*
         RETURN
**************************************************
ENTER.INTRA.CONTR.KEITH:
**************************************************
         X.HIT=0
         SKIP.DISPLAY=0
         DEC.IL=0
         IF INTER=1 THEN
            INTER=0
            BASELOC=43
            BASEREC=3
         END ELSE
            BASELOC=0
            BASEREC=0
         END
         CRT @(0,21):@(-4):
         CRT @(0,22):@(-4):
         CRT @(0,23):@(-4):
         LOC=0
         OLD.IL=0
         FOR OL=1 TO 5
            FOR IL=1 TO 3
               OLD.IL=IL
               IF DEC.IL=1 THEN
                  IL=IL-1
                  DEC.IL=0
               END
               BEGIN CASE
                  CASE IL=1
                     OLD.LOC=LOC
                     LOC=0+BASELOC
                     CRT @(0,23):@(-4):
                     CRT @(0,23):"Enter weight or [D] to delete line":OL:
                  CASE IL=2
                     OLD.LOC=LOC
                     LOC=8+BASELOC
                     CRT @(0,23):@(-4):
                     CRT @(0,23):"Enter Contract Min for Weight ":OL:
                  CASE IL=3
                     OLD.LOC=LOC
                     LOC=18+BASELOC
                     IF CL.LOGISTICS='Y' THEN
                        CRT @(0,23):@(-4):
                        CRT @(0,23):"Enter Benchmark Min for Weight ":OL:
                     END ELSE
                        GO GO.AGAIN
                     END
               END CASE
               Q=''
               QI=''
               IF CL.LOGISTICS='N' AND IL=3 ELSE
                  IF IL=1 THEN
                     IF RATE.TABLE<36+BASEREC+IL,OL>='@' THEN
                        MASK='AND UP '
                     END ELSE
                        MASK=RATE.TABLE<36+BASEREC+IL,OL>'L#6'
                     END
                     CALL GEN.IN(LOC,8+OL,MASK,'',Q,0,8,'','',0,LOC,8+OL,0,QI,'',0,0)
                  END ELSE
                     MASK=RATE.TABLE<36+BASEREC+IL,OL>'L26(#8)'
                     CALL GEN.IN(LOC,8+OL,MASK,'AMT2',Q,0,8,'','',0,LOC,8+OL,0,QI,'',0,0)
                  END
               END
               QI=OCONV(QI,'MCU')
               BEGIN CASE
                  CASE QI=''
                     IF IL=3 AND RATE.TABLE<37+BASEREC,OL>='@' THEN GO INPUT.MISC.CHARGES.KEITH
                     IF IL>1 THEN
                        IF RATE.TABLE<36+IL+BASEREC,OL>='' THEN
                           CALL ELINE("ENTRY REQUIRED AFTER WEIGHT")
                           IL=IL-1
                        END
                     END ELSE
                        IF RATE.TABLE<36+IL+BASEREC,OL>='' THEN
                           IF RATE.TABLE<36+IL+BASEREC,OL-1>#'@' THEN
                              RATE.TABLE<36+IL+BASEREC,OL>='@'
                           END ELSE
                              GO INPUT.MISC.CHARGES.KEITH
                              RETURN
                           END
                        END
                     END

                  CASE QI='EX'
                     STOP
                  CASE QI='X'
                     DEC.IL=1
                     IF IL=1 AND OL=1 ELSE
                        SKIP.DISPLAY=1
                        IF OLD.IL=1 THEN
                           X.HIT=1
                        END
                     END
                  CASE QI='D'
                     IF RATE.TABLE<36+IL+BASEREC,OL>='@' THEN
                        CALL ELINE("YOU CAN NOT DELETE THIS LINE - CHANGE ONLY!")
                        IL=IL-1
                        GO GO.AGAIN
                     END ELSE
                        GOSUB DELETE.LINE
                        GOTO INPUT.MISC.CHARGES.KEITH
                     END
                  CASE NOT(NUM(QI))
                     CALL ELINE("ENTRY MUST BE IN THE FORM OF A NUMBER")
                     RATE.TABLE<36+IL+BASEREC,OL>=''
                     IL=IL-1
                     GO GO.AGAIN
                  CASE IL=1
                     IF OL>1 THEN
                        IF Q<=RATE.TABLE<37+BASEREC,OL-1> THEN
                           CALL ELINE("Weight ":OL:" must be greater than weight ":OL-1)
                           DEC.IL=1
                        END ELSE
                           RATE.TABLE<37+BASEREC,OL>=QI
                        END
                     END ELSE
                        IF RATE.TABLE<37+BASEREC,OL+1> THEN
                           IF QI>=RATE.TABLE<37+BASEREC,OL+1> THEN
                              CALL ELINE("Weight must be less than ":RATE.TABLE<37+BASEREC,OL+1>)
                              IL=IL-1
                              GO GO.AGAIN
                           END
                        END
                        RATE.TABLE<37+BASEREC,OL>=QI
                     END
                  CASE IL=2
                     IF QI<0 THEN
                        CALL ELINE("NO NEGATIVE NUMBERS ALLOWED!!!")
                        IL=IL-1
                        GO GO.AGAIN
                     END
                     IF RATE.TABLE<39+BASEREC,OL>#'' AND QI>RATE.TABLE<39+BASEREC,OL> THEN
                        CALL ELINE("NUMBER CAN NOT BE GREATER THAN BENCHMARK")
                        IF USER#'SSHAFER' AND USER#'AHICKS' THEN
                           IL=IL-1
                           GO GO.AGAIN
                        END
                     END
                     RATE.TABLE<38+BASEREC,OL>=Q
                  CASE IL=3
                     IF CL.LOGISTICS='Y'THEN
                     IF Q<0 THEN
                        CALL ELINE("NO NEGATIVE NUMBERS ALLOWED")
                        IL=IL-1
                        GO GO.AGAIN
                     END

                     IF 0 THEN
                        CALL ELINE("Intrastate benchmark must be greater than the intrastate contract minimum!")
                        IL=IL-1
                        GO GO.AGAIN
                     END ELSE
                        RATE.TABLE<39+BASEREC,OL>=Q
                     END
                     IF RATE.TABLE<37+BASEREC,OL>='@' THEN
                        GO INPUT.MISC.CHARGES.KEITH
                     END
                  END ELSE
                     IF CL.LOGISTICS='N' ELSE
                        CALL ELINE("ENTRY MUST BE IN THE FORM OF A NUMBER")
                        DEC.IL=1
                     END
                  END
            END CASE
            IF IL=1 THEN
               IF RATE.TABLE<36+IL+BASEREC,OL>='@' THEN
                  CRT @(LOC,8+OL):"AND UP"
               END ELSE
                  CRT @(LOC,8+OL):RATE.TABLE<36+IL+BASEREC,OL>'L#6'
               END
            END ELSE
               IF X.HIT AND IL=2 THEN
                  X.HIT=0
                  CRT @(LOC,8+OL):RATE.TABLE<36+IL+BASEREC,OL>'L26(#8)'
               END ELSE
                  CRT @(LOC,8+OL):RATE.TABLE<36+IL+BASEREC,OL>'L26(#8)'
               END
            END
            IF SKIP.DISPLAY THEN
               SKIP.DISPLAY=0
               IF IL>1 THEN
                  IL=IL-1
               END ELSE
                  DEC.IL=0
                  IL=2
                  OL=OL-1
               END
            END
GO.AGAIN:
         NEXT
      NEXT
      SKIP=1
      GOTO INPUT.MISC.CHARGES.KEITH
      RETURN
**************************************************
ENTER.FLAT.CHGS:
**************************************************
      X.FLAT.HIT=0                       ; * JMK03
      SKIP.FLAT.DISPLAY=0                ; * JMK03
      DEC.FLAT.IL=0                      ; * JMK03
      BASELOC=0                          ; * JMK03
      BASEREC=0                          ; * JMK03

      CRT @(0,6):@(-3):                  ; * JMK06
      CRT @(52,3):'Flat Weight Charges'
      CRT @(52,4):'-------------------'

      CRT @(0 ,6) : "Line#"              ; * NPR01
      CRT @(9 ,6) : "Beg Wt."            ; * NPR01
      CRT @(18,6) : "End Wt."            ; * NPR01
      CRT @(28,6) : "INTRA Contract"     ; * NPR01
      CRT @(47,6) : "Bench"              ; * NPR01
      CRT @(55,6) : "INTER Contract"     ; * NPR01
      CRT @(74,6) : "Bench"              ; * NPR01

      FWC.PG = 1                         ; * NPR01
      GOSUB SHOW.WEIGHT.CHGS.FULL        ; * JMK06    ;* NPR01
      RETURN                             ; * NPR01
********
      FLAT.LOC=0                         ; * JMK03
      OLD.FLAT.IL=0                      ; * JMK03

      WT.FIELDS=6                        ; * JMK03 ; * JMK04
      N.LINES = DCOUNT(RATE.TABLE<55>,@VM)         ; * JMK10

      FOR FLAT.OL=1 TO 14                ; * JMK03 ; * JMK06 ; * JMK10
         FOR FLAT.IL=1 TO WT.FIELDS      ; * JMK03
            OLD.FLAT.IL=FLAT.IL          ; * JMK03
            IF DEC.FLAT.IL=1 THEN        ; * JMK03
               FLAT.IL=FLAT.IL-1         ; * JMK03
               DEC.FLAT.IL=0             ; * JMK03
            END                          ; * JMK03
            BEGIN CASE                   ; * JMK03
               CASE FLAT.IL=1            ; * JMK03
                  OLD.FLAT.LOC=FLAT.LOC  ; * JMK03
                  FLAT.LOC=17+BASELOC    ; * JMK03
                  CRT @(0,23):@(-4):     ; * JMK03
                  CRT @(0,23):"Enter Beginning Weight or [D] to delete line":FLAT.OL:      ; * JMK03
               CASE FLAT.IL=2            ; * JMK03
                  OLD.FLAT.LOC=FLAT.LOC  ; * JMK03
                  FLAT.LOC=24+BASELOC    ; * JMK03
                  CRT @(0,23):@(-4):     ; * JMK03
                  CRT @(0,23):"Enter Ending Weight for line ":FLAT.OL:           ; * JMK03
               CASE FLAT.IL=3            ; * JMK03
                  OLD.FLAT.LOC=FLAT.LOC  ; * JMK03
                  FLAT.LOC=37+BASELOC    ; * JMK03
                  CRT @(0,23):@(-4):     ; * JMK03
                  CRT @(0,23):"Enter Intrastate Contract Charge for line ":FLAT.OL:        ; * JMK03 ; * JMK04
               CASE FLAT.IL=4 AND CL.LOGISTICS='Y'           ; * JMK03 ; * JMK04
                  OLD.FLAT.LOC=FLAT.LOC  ; * JMK03
                  FLAT.LOC=46+BASELOC    ; * JMK03
                  CRT @(0,23):@(-4):     ; * JMK03
                  CRT @(0,23):"Enter Intrastate Benchmark Charge for line ":FLAT.OL:       ; * JMK03 ; * JMK04
               CASE FLAT.IL=5            ; * JMK04
                  OLD.FLAT.LOC=FLAT.LOC  ; * JMK04
                  FLAT.LOC=61+BASELOC    ; * JMK04
                  CRT @(0,23):@(-4):     ; * JMK04
                  CRT @(0,23):"Enter Interstate Contract Charge for line ":FLAT.OL:        ; * JMK04
               CASE FLAT.IL=6 AND CL.LOGISTICS='Y'           ; * JMK04
                  OLD.FLAT.LOC=FLAT.LOC  ; * JMK04
                  FLAT.LOC=70+BASELOC    ; * JMK04
                  CRT @(0,23):@(-4):     ; * JMK04
                  CRT @(0,23):"Enter Interstate Benchmark Charge for line ":FLAT.OL:       ; * JMK04
            END CASE                     ; * JMK03
            Q=''                         ; * JMK03
            QI=''                        ; * JMK03
            IF FLAT.IL=1 OR FLAT.IL=2 THEN         ; * JMK03
               MASK=RATE.TABLE<54+FLAT.IL,FLAT.OL>'L#6'      ; * JMK03
               CALL GEN.IN(FLAT.LOC,6+FLAT.OL,MASK,'',Q,0,8,'','',0,FLAT.LOC,6+FLAT.OL,0,QI,'',0,0)  ; * JMK03
            END ELSE                     ; * JMK03
               MASK=RATE.TABLE<54+FLAT.IL,FLAT.OL>'L26(#8)'  ; * JMK03
               CALL GEN.IN(FLAT.LOC,6+FLAT.OL,MASK,'AMT2',Q,0,8,'','',0,FLAT.LOC,6+FLAT.OL,0,QI,'',0,0)        ; * JMK03
            END                          ; * JMK03
            QI=OCONV(QI,'MCU')           ; * JMK03
            BEGIN CASE                   ; * JMK03
               CASE QI=''                ; * JMK03
                  IF FLAT.IL=1 THEN      ; * JMK05
                     IF RATE.TABLE<54+FLAT.IL,FLAT.OL>='' THEN         ; * JMK03 ; * JMK05
                        RETURN           ; * JMK03 ; * JMK05
                     END                 ; * JMK03 ; * JMK05
                  END                    ; * JMK05
               CASE QI='EX'              ; * JMK03
                  STOP                   ; * JMK03
               CASE QI='X'               ; * JMK03
                  DEC.FLAT.IL=1          ; * JMK03
                  IF FLAT.IL=1 AND FLAT.OL=1 THEN  ; * JMK10
                     RETURN              ; * JMK10
                  END ELSE               ; * JMK03
                     SKIP.FLAT.DISPLAY=1           ; * JMK03
                     IF OLD.FLAT.IL=1 THEN         ; * JMK03
                        X.FLAT.HIT=1     ; * JMK03
                     END                 ; * JMK03
                  END                    ; * JMK03
               CASE QI='D'               ; * JMK03
                  GOSUB WT.DELETE.LINE   ; * JMK03
                  GOTO SHOW.WEIGHT.CHGS  ; * JMK03
               CASE FLAT.IL=1            ; * JMK03
                  IF NOT(NUM(QI)) THEN   ; * JMK03
                     CALL ELINE("Entry must be numeric")     ; * JMK03
                     RATE.TABLE<54+FLAT.IL,FLAT.OL>=''       ; * JMK03
                     FLAT.IL=FLAT.IL-1   ; * JMK03
                     GO WT.GO.AGAIN      ; * JMK03
                  END
                  IF QI<1 THEN           ; * JMK05
                     CALL ELINE("Must be greater than 0!!!")           ; * JMK05
                     FLAT.IL=FLAT.IL-1   ; * JMK05
                     GO WT.GO.AGAIN      ; * JMK05
                  END                    ; * JMK05
                  IF FLAT.OL>1 THEN      ; * JMK03
                     IF Q<=RATE.TABLE<55,FLAT.OL-1> THEN     ; * JMK03
                        CALL ELINE("Weight ":FLAT.OL:" must be greater than beginning weight on line ":FLAT.OL-1)        ; * JMK03
                        FLAT.IL=FLAT.IL-1          ; * JMK03
                        GO WT.GO.AGAIN   ; * JMK03
                     END ELSE            ; * JMK03
                        IF Q<RATE.TABLE<56,FLAT.OL-1> THEN   ; * JMK03
                           CALL ELINE("Weight ":FLAT.OL:" must be greater than ending weight on line ":FLAT.OL-1)        ; * JMK03
                           FLAT.IL=FLAT.IL-1       ; * JMK03
                           GO WT.GO.AGAIN          ; * JMK03
                        END ELSE         ; * JMK03
                           RATE.TABLE<55,FLAT.OL>=QI         ; * JMK03
                        END              ; * JMK03
                     END                 ; * JMK03
                  END ELSE               ; * JMK03
                     IF RATE.TABLE<55,FLAT.OL+1> THEN        ; * JMK03
                        IF QI>=RATE.TABLE<55,FLAT.OL+1> THEN           ; * JMK03
                           CALL ELINE("Weight must be less than ":RATE.TABLE<55,FLAT.OL+1>)          ; * JMK03
                           FLAT.IL=FLAT.IL-1       ; * JMK03
                           GO WT.GO.AGAIN          ; * JMK03
                        END              ; * JMK03
                     END                 ; * JMK03
                     RATE.TABLE<55,FLAT.OL>=QI     ; * JMK03
                  END                    ; * JMK03
               CASE FLAT.IL=2            ; * JMK03
                  IF NOT(NUM(QI)) THEN   ; * JMK03
                     CALL ELINE("Entry must be numeric")     ; * JMK03
                     RATE.TABLE<54+FLAT.IL,FLAT.OL>=''       ; * JMK03
                     FLAT.IL=FLAT.IL-1   ; * JMK03
                     GO WT.GO.AGAIN      ; * JMK03
                  END
                  IF QI<1 THEN           ; * JMK05
                     CALL ELINE("Must be greater than 0!!!")           ; * JMK05
                     FLAT.IL=FLAT.IL-1   ; * JMK05
                     GO WT.GO.AGAIN      ; * JMK05
                  END                    ; * JMK05
                  IF FLAT.OL>1 THEN      ; * JMK03
                     IF Q<=RATE.TABLE<56,FLAT.OL-1> THEN     ; * JMK03
                        CALL ELINE("Weight ":FLAT.OL:" must be greater than line ":FLAT.OL-1)        ; * JMK03
                        DEC.FLAT.IL=1    ; * JMK03
                     END ELSE            ; * JMK03
                        RATE.TABLE<56,FLAT.OL>=QI  ; * JMK03
                     END                 ; * JMK03
                  END ELSE               ; * JMK03
                     IF RATE.TABLE<56,FLAT.OL+1> THEN        ; * JMK03
                        IF QI>=RATE.TABLE<56,FLAT.OL+1> THEN           ; * JMK03
                           CALL ELINE("Weight must be less than ":RATE.TABLE<56,FLAT.OL+1>)          ; * JMK03
                           FLAT.IL=FLAT.IL-1       ; * JMK03
                           GO WT.GO.AGAIN          ; * JMK03
                        END              ; * JMK03
                     END                 ; * JMK03
                     RATE.TABLE<56,FLAT.OL>=QI     ; * JMK03
                  END                    ; * JMK03
               CASE FLAT.IL=3            ; * JMK03
                  IF QI='#' THEN QI='' ; Q=''      ; * JMK05
                  IF QI=' ' THEN QI='' ; Q=''      ; * JMK05
                  IF QI#'' THEN          ; * JMK05
                     IF NOT(NUM(QI)) THEN          ; * JMK05
                        CALL ELINE("Entry must be numeric")  ; * JMK05
                        RATE.TABLE<54+FLAT.IL,FLAT.OL>=''    ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05
                     IF QI<25 THEN       ; * JMK05
                        CALL ELINE("Must be at least $25.00!!!")       ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05

                  END                    ; * JMK05
                  RATE.TABLE<57,FLAT.OL>=Q         ; * JMK03
               CASE FLAT.IL=4            ; * JMK03
                  IF CL.LOGISTICS#'Y' THEN GO WT.GO.AGAIN    ; * JMK04
                  IF QI='#' THEN QI='' ; Q=''      ; * JMK05
                  IF QI=' ' THEN QI='' ; Q=''      ; * JMK05
                  IF QI#'' THEN          ; * JMK05
                     IF NOT(NUM(QI)) THEN          ; * JMK05
                        CALL ELINE("Entry must be numeric")  ; * JMK05
                        RATE.TABLE<54+FLAT.IL,FLAT.OL>=''    ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05
                     IF QI<25 THEN       ; * JMK05
                        CALL ELINE("Must be at least $25.00!!!")       ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05

                  END                    ; * JMK05
                  RATE.TABLE<58,FLAT.OL>=Q         ; * JMK03
               CASE FLAT.IL=5            ; * JMK04
                  IF QI='#' THEN QI='' ; Q=''      ; * JMK05
                  IF QI=' ' THEN QI='' ; Q=''      ; * JMK05
                  IF QI#'' THEN          ; * JMK05
                     IF NOT(NUM(QI)) THEN          ; * JMK05
                        CALL ELINE("Entry must be numeric")  ; * JMK05
                        RATE.TABLE<54+FLAT.IL,FLAT.OL>=''    ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05
                     IF QI<25 THEN       ; * JMK05
                        CALL ELINE("Must be at least $25.00!!!")       ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05

                  END                    ; * JMK05
                  RATE.TABLE<59,FLAT.OL>=Q         ; * JMK04
               CASE FLAT.IL=6            ; * JMK04
                  IF CL.LOGISTICS#'Y' THEN GO WT.GO.AGAIN    ; * JMK04
                  IF QI='#' THEN QI='' ; Q=''      ; * JMK05
                  IF QI=' ' THEN QI='' ; Q=''      ; * JMK05
                  IF QI#'' THEN          ; * JMK05
                     IF NOT(NUM(QI)) THEN          ; * JMK05
                        CALL ELINE("Entry must be numeric")  ; * JMK05
                        RATE.TABLE<54+FLAT.IL,FLAT.OL>=''    ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05
                     IF QI<25 THEN       ; * JMK05
                        CALL ELINE("MUST BE AT LEAST 25.00!!!")        ; * JMK05
                        FLAT.IL=FLAT.IL-1          ; * JMK05
                        GO WT.GO.AGAIN   ; * JMK05
                     END                 ; * JMK05

                  END                    ; * JMK05
                  RATE.TABLE<60,FLAT.OL>=Q         ; * JMK04
                  IF RATE.TABLE<57,FLAT.OL>='' AND RATE.TABLE<58,FLAT.OL>='' AND RATE.TABLE<59,FLAT.OL>='' AND RATE.TABLE<60,FLAT.OL>='' THEN          ; * JMK05
                     CALL ELINE("You must enter some amount in one of the Charge Fields!!!")         ; * JMK05
                     FLAT.IL=FLAT.IL-1   ; * JMK05
                     GO WT.GO.AGAIN      ; * JMK05
                  END
            END CASE                     ; * JMK03
            IF FLAT.IL<3 THEN            ; * JMK03
               CRT @(FLAT.LOC,6+FLAT.OL):RATE.TABLE<54+FLAT.IL,FLAT.OL>'L#6'     ; * JMK03
            END ELSE                     ; * JMK03
               IF RATE.TABLE<54+FLAT.IL,FLAT.OL>#'' THEN     ; * JMK05
                  CRT @(FLAT.LOC,6+FLAT.OL):RATE.TABLE<54+FLAT.IL,FLAT.OL>'L26(#8)'        ; * JMK03
               END ELSE                  ; * JMK05
                  CRT @(FLAT.LOC,6+FLAT.OL):RATE.TABLE<54+FLAT.IL,FLAT.OL>       ; * JMK05
               END                       ; * JMK05
            END                          ; * JMK03
            IF SKIP.FLAT.DISPLAY THEN    ; * JMK03
               SKIP.FLAT.DISPLAY=0       ; * JMK03
               IF FLAT.IL>1 THEN         ; * JMK03
                  FLAT.IL=FLAT.IL-1      ; * JMK03
               END ELSE                  ; * JMK03
                  DEC.FLAT.IL=0          ; * JMK03
                  FLAT.IL=2              ; * JMK03
                  FLAT.OL=FLAT.OL-1      ; * JMK03
               END                       ; * JMK03
            END                          ; * JMK03
WT.GO.AGAIN:                             ; * JMK03
         NEXT                            ; * JMK03
      NEXT                               ; * JMK03
      N.LINES = DCOUNT(RATE.TABLE<55>,@VM)         ; * JMK10
      IF FLAT.IL>N.LINES THEN RETURN     ; * JMK10
      SKIP=1                             ; * JMK03
      GOTO ENTER.FLAT.CHGS               ; * JMK03
      RETURN                             ; * JMK03
***************************************************
WT.DELETE.LINE:
***************************************************
*     FOR COUNT=1 TO 4                   ; * JMK03 ; * JMK04
      FOR COUNT=1 TO 6                   ; * JMK03 ; * JMK04
         DEL RATE.TABLE<54+COUNT,FLAT.OL>          ; * JMK03
      NEXT                               ; * JMK03
      RETURN                             ; * JMK03

***************************************************
DELETE.LINE:
***************************************************
      FOR COUNT=1 TO 3
         DEL RATE.TABLE<36+COUNT+BASEREC,OL>
      NEXT
      RETURN
**************************************************
IMC.1:
**************************************************
      IF NOT(EXIT.IT) THEN GOSUB DSP.MISC.CHARGES.SCN

IMC.2:

      IF EXIT.IT THEN GOTO IMC.EXIT

      CRT @(0,21):'Enter Option :':@(-4)
      CRT @(0,22):'Options: [1]=Intra Con [2]=Intra Bnch [3]=Inter Con [4]=Inter Bnch':@(-4):
      CRT @(0,23):'         [5]=Active [6]=CutBack Code [L]=Ltl Carrier Chrgs [X]=Back [EX]it':@(-4):

      MASK = ' '
      CALL GEN.IN(16,21,MASK,'',Q,0,3,'','',1,16,21,0,QI,'',0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO IMC.2
            CRT @(0,21):@(-4):
            CRT @(0,22):@(-4):
            CRT @(0,23):@(-4):

         CASE QI = 'X' OR QI=''

*
* Intrastate Contract Min
*
         CASE QI = '1'
            GOSUB ENTER.INTRA.CONTR
            GOTO IMC.2
*
* Intrastate Benchmark Min
*
         CASE QI = '2'
            GOSUB ENTER.INTRA.BENCH
            GOTO IMC.2
*
* Interstate Contract Min
*
         CASE QI = '3'
            GOSUB ENTER.INTER.CONTR
            GOTO IMC.2
*
* Interstate Benchmark Min
*
         CASE QI = '4'
            GOSUB ENTER.INTER.BENCH
            GOTO IMC.2
*
* Toggle Table Active Status
*
         CASE QI = '5'
            GOSUB TOGGLE.TABLE.STATUS
            GOSUB DSP.TABLE.STATUS
            GOTO IMC.2
*
* Cutback Code
*
         CASE QI = '6'
            GOSUB INPUT.CUTBACK.CODE
            GOSUB DSP.CUTBACK.CODE
            GOTO IMC.2
*
* LTL Carrier Charge Codes
*
         CASE QI = 'L'
            GOSUB INPUT.CARRIER.CHARGES
            GOTO INPUT.MISC.CHARGES

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO IMC.2
      END CASE

IMC.EXIT:
*

      RETURN

**************************************************
DSP.MISC.CHARGES.SCN:
**************************************************

      CRT @( 0, 2):STR('-',79):
      CRT @( 0, 3):CBVOUT<1>:'Client  :':CLIENT.ID:', ':CLIENT.NAME'L#62':@(-6)
      CRT @( 0, 4):'Carrier :':CARRIER.ID:', ':CARRIER.NAME'L#62'
      CRT @( 0, 5):STR('-',79):
      CRT @( 0, 6):'1) Intra Contract Min:' ; CRT @(43,6):'2) Intra Benchmark Min:'
      CRT @( 0, 7):'3) Inter Contract Min:' ; CRT @(43,7):'4) Inter Benchmark Min:'
      CRT @( 0, 8):'5) Table Active:'
      CRT @( 0, 9):'6) Overcharge Cutback Code:'

      GOSUB DSP.INTRA.VALUES
      GOSUB DSP.INTER.VALUES
      GOSUB DSP.TABLE.STATUS
      GOSUB DSP.CUTBACK.CODE

      RETURN

**************************************************
DSP.CUTBACK.CODE:
**************************************************

      IF RT.CUTBACK.CODE='' THEN
         T = '-------'
      END ELSE
         T = RT.CUTBACK.CODE:' (':CUTBACK.DESC
         T = T[1,129]:')'                ; * 49+80 Inclues the next 80 col line...
      END
      CRT @(29,9):T:@(-4)

      RETURN

**************************************************
DSP.INTRA.VALUES:
**************************************************
      IF RT.INTRA.CONTR ='' THEN
         T = '--------'
      END ELSE
         T = RT.INTRA.CONTR'R26(#8)'
      END
      CRT @(24,6):T

      IF RT.INTRA.BENCH ='' THEN
         T = '--------'
      END ELSE
         T = RT.INTRA.BENCH'R26(#8)'
      END
      CRT @(67,6):T

      RETURN

**************************************************
DSP.INTER.VALUES:
**************************************************

      IF RT.INTER.CONTR ='' THEN
         T = '--------'
      END ELSE
         T = RT.INTER.CONTR'R26(#8)'
      END
      CRT @(24,7):T

      IF RT.INTER.BENCH ='' THEN
         T = '--------'
      END ELSE
         T = RT.INTER.BENCH'R26(#8)'
      END
      CRT @(67,7):T

      RETURN

**************************************************
DSP.TABLE.STATUS:
**************************************************

      BEGIN CASE
         CASE RT.TABLE.ACTIVE=''
            T='---'
         CASE RT.TABLE.ACTIVE='Y'
         CASE RT.TABLE.ACTIVE='N'
            T='NO '
      END CASE
      CRT @(17,8):T

      RETURN

**************************************************
TOGGLE.TABLE.STATUS:
**************************************************
*
* Table Active Flag
*
      BEGIN CASE
         CASE RT.TABLE.ACTIVE = 'Y'
            RT.TABLE.ACTIVE = 'N'
            IF KEITH THEN
               CALL ELINE('This table is NO LONGER ACTIVE!')
               GOTO SHOW.TABLE.STATUS
            END ELSE
               GOSUB DSP.TABLE.STATUS
            END
            CALL ELINE('This table is NO LONGER ACTIVE!')

         CASE 1
            GOSUB CHECK.FOR.COMPLETE.TABLE
            IF FAILURE.MSG THEN
               CALL ELINE(FAILURE.MSG)
               RETURN
            END
            RT.TABLE.ACTIVE = 'Y'
            IF KEITH THEN
               CALL ELINE('This table is NOW ACTIVE.')
               GOTO SHOW.TABLE.STATUS
            END ELSE
               GOSUB DSP.TABLE.STATUS
            END
            CALL ELINE('This table is NOW ACTIVE.')
      END CASE

      RETURN

**************************************************
INPUT.CUTBACK.CODE:
**************************************************

      CRT @(0,22):'Entering a code will REMOVE the $1 overcharge limit and ACCEPT ALL OVERCHRGS':
      HELP = "Enter overchage cutback code [SPACE]-Clear [L]-List [X]-Exit [EX]it"
      MASK = RT.CUTBACK.CODE:' '
      IF MASK='' THEN MASK='#'
      IF KEITH THEN
         CRT @(29,16):@(-4)
         CALL GEN.IN(29,16,MASK,'',Q,0,10,'','',10,29,16,0,QI,HELP,0,23)
      END ELSE
         CRT @(29,9):@(-4)
         CALL GEN.IN(29,9,MASK,'',Q,0,10,'','',10,29,9,0,QI,HELP,0,23)
      END
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO INPUT.CUTBACK.CODE

         CASE QI = 'X' OR QI = ''

         CASE QI = 'L'
            EXECUTE 'SORT FB.CUT.BACKS 1 2'

            GOSUB INIT.SCREEN
            IF KEITH THEN
               SKIP=1
               GOSUB INPUT.MISC.CHARGES.KEITH
            END ELSE
               GOSUB DSP.MISC.CHARGES.SCN
            END
            GOTO INPUT.CUTBACK.CODE

         CASE QI#'' AND TRIM(QI)=''
            RT.CUTBACK.CODE=''

         CASE 1
            T.CODE = TRIM(QI)
            READV T.DESC FROM F.CUT.BACKS,T.CODE,1 ELSE
               CALL ELINE('Cutback Code "':T.CODE:'" is not on file! Try another code.')
               GOTO INPUT.CUTBACK.CODE
            END
            IF INDEX(T.DESC,'~',1) THEN
               CALL ELINE('(~) You can not use the cut back code "':T.CODE:'". Try another code.')
               GOTO INPUT.CUTBACK.CODE
            END
            RT.CUTBACK.CODE=T.CODE
            CUTBACK.DESC = T.DESC
      END CASE

      CRT @(0,22):@(-4)

      RETURN

**************************************************
ENTER.INTRA.CONTR:
**************************************************
      CRT @(0,21):@(-4):
*
* Get Intrastate Min Contract Amt
*
      ISN.X.POS = 24
      ISN.Y.POS = 6
      ISN.ALLOW.NULL=FALSE
      ISN.FORMAT = 'MR22(#8)'
      ISN.INPUT.MASK = 'AMT2'
      ISN.LEN = 8
      ISN.DEFAULT = RT.INTRA.CONTR
      ISN.HELP = 'Enter Intrastate Min Contract:  [X]=Back [EX]it Program'
      GOSUB INPUT.SIMPLE.NUMBER
      IF NOT(FAILURE) THEN
         IF RT.INTRA.CONTR = '' AND RT.INTRA.BENCH = '' AND ISN.NULL THEN
            GOSUB DSP.INTRA.VALUES
         END ELSE
            RT.INTRA.CONTR= ISN.RETURN
            IF CL.LOGISTICS = 'Y' THEN
               IF RT.INTRA.CONTR > RT.INTRA.BENCH THEN
                  CALL ELINE('Intrastate benchmark min must be greater than the Intrastate contract min.')
                  GOTO ENTER.INTRA.CONTR
               END
            END
         END
      END

      RETURN

**************************************************
ENTER.INTRA.BENCH:
**************************************************
      IF CL.LOGISTICS = 'Y' THEN
         CRT @(0,21):@(-4):
*
* Get Intrastate Min Benchmark Amt
*
         ISN.X.POS = 67
         ISN.Y.POS = 6
         ISN.ALLOW.NULL=FALSE
         ISN.FORMAT = 'MR22(#8)'
         ISN.INPUT.MASK = 'AMT2'
         ISN.LEN = 8
         ISN.DEFAULT = RT.INTRA.BENCH
         ISN.HELP = 'Enter Intrastate Min Bench:  [X]=Back [EX]it Program'
         GOSUB INPUT.SIMPLE.NUMBER
         IF NOT(FAILURE) THEN
            IF RT.INTRA.CONTR = '' AND RT.INTRA.BENCH = '' AND ISN.NULL THEN
               GOSUB DSP.INTRA.VALUES
            END ELSE
               RT.INTRA.BENCH= ISN.RETURN
               IF RT.INTRA.CONTR > RT.INTRA.BENCH THEN
                  CALL ELINE('Intrastate benchmark min must be greater than the Intrastate contract min.')
                  RT.INTRA.BENCH=''
                  GOTO ENTER.INTRA.BENCH
               END
            END
         END
      END

      RETURN

**************************************************
ENTER.INTER.CONTR:
**************************************************
      CRT @(0,21):@(-4):
*
* Get Interstate Min Contract Amt
*
      ISN.X.POS = 24
      ISN.Y.POS = 7
      ISN.ALLOW.NULL=FALSE
      ISN.HELP = 'Enter Interstate Min Contract:  [X]=Back [EX]it Program'
      ISN.FORMAT = 'MR22(#8)'
      ISN.INPUT.MASK = 'AMT2'
      ISN.LEN = 8
      ISN.DEFAULT = RT.INTER.CONTR
      GOSUB INPUT.SIMPLE.NUMBER
      IF NOT(FAILURE) THEN
         IF RT.INTER.CONTR = '' AND RT.INTER.BENCH = '' AND ISN.NULL THEN
            GOSUB DSP.INTER.VALUES
         END ELSE
            RT.INTER.CONTR= ISN.RETURN
            IF CL.LOGISTICS = 'Y' THEN
               IF RT.INTER.CONTR > RT.INTER.BENCH THEN
                  CALL ELINE('Interstate benchmark min must be greater than the Interstate contract min.')
                  GOTO ENTER.INTER.CONTR
               END
            END
         END
      END

      RETURN

**************************************************
ENTER.INTER.BENCH:
**************************************************
      IF CL.LOGISTICS = 'Y' THEN
         CRT @(0,21):@(-4):
*
* Get Interstate Min Benchmark Amt
*
         ISN.X.POS = 67
         ISN.Y.POS = 7
         ISN.ALLOW.NULL=FALSE
         ISN.FORMAT = 'MR22(#8)'
         ISN.INPUT.MASK = 'AMT2'
         ISN.LEN = 8
         ISN.DEFAULT = RT.INTER.BENCH
         ISN.HELP = 'Enter Interstate Min Bench:  [X]=Back [EX]it Program'
         GOSUB INPUT.SIMPLE.NUMBER
         IF NOT(FAILURE) THEN
            IF RT.INTER.CONTR = '' AND RT.INTER.BENCH = '' AND ISN.NULL THEN
               GOSUB DSP.INTER.VALUES
            END ELSE
               RT.INTER.BENCH = ISN.RETURN
               IF RT.INTER.CONTR > RT.INTER.BENCH THEN
                  CALL ELINE('Interstate benchmark min must be greater than the Interstate contract min.')
                  RT.INTER.BENCH=''
                  GOTO ENTER.INTER.BENCH
               END
            END
         END
      END

      RETURN

**************************************************
INPUT.CARRIER.CHARGES:
**************************************************
*
* Init. return value varables
*
      FAILURE=FALSE
      PAGE.NUM =1

*
* Init Screen/Clear it.
*
      GOSUB INIT.SCREEN

ICC.1:
      IF NOT(EXIT.IT) THEN
         CRT @( 0, 2):STR('-',79):
         CRT @( 0, 3):CBVOUT<1>:'Client  :':CLIENT.ID:', ':CLIENT.NAME'L#62':@(-6)
         CRT @( 0, 4):'Carrier :':CARRIER.ID:', ':CARRIER.NAME'L#62'
         CRT @( 0, 5):STR('-',79):
         CALL FB.DRAW.BOX( 0,6,79,16,' ','--- --- ')
         CALL FB.DRAW.BOX(26,6,53,16,' ','+-+|+-+|')
         GOSUB DSP.MISC.CHARGES.MENU
         GOSUB LIST.MISC.CHARGES
      END

ICC.2:
      IF EXIT.IT THEN GOTO ICC.EXIT

      CRT @(0,17):' Enter Option :    '
      HELP = 'OPTIONS:'
      GOSUB DETERMINE.PAGE.DSP
      HELP:=PD.HELP
      HELP:=' [X]=Back [EX]it Program'
      MASK = ' '

      CALL GEN.IN(16,17,MASK,'',Q,0,3,'','',1,16,17,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF NOT(EXIT.IT) THEN GOTO ICC.2

         CASE QI = 'X' OR QI=''

*
* Page Forward
*
         CASE QI = 'F'
            IF PAGE.NUM < NUM.PAGES THEN
               PAGE.NUM+=1
               GOSUB LIST.MISC.CHARGES
            END ELSE
               CALL ELINE('LAST PAGE: Can not page beyond the last page.')
            END
            GOTO ICC.2

*
* Page Backward
*
         CASE QI = 'B'
            IF PAGE.NUM > 1 THEN
               PAGE.NUM-=1
               GOSUB LIST.MISC.CHARGES
            END ELSE
               CALL ELINE('FIRST PAGE: Can not page before the first page.')
            END
            GOTO ICC.2

*
* Add Line Item Code
*
         CASE QI = '1'
            GOSUB ADD.MISC.CHARGE
            GOTO ICC.1

*
* Delete Line Item Code
*
         CASE QI = '2'
            GOSUB DELETE.MISC.CHARGE
            IF NOT(EXIT.IT) THEN
               GOSUB DSP.MISC.CHARGES.MENU
               GOTO ICC.2
            END

*
* Edit Line Item Amnt
*
         CASE QI = '3'
            GOSUB EDIT.MISC.CHARGE
            IF NOT(EXIT.IT) THEN
               GOSUB DSP.MISC.CHARGES.MENU
               GOTO ICC.2
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO ICC.2
      END CASE

ICC.EXIT:
*
* COMMON EXIT POINT... do any necessary clean up or screen region marking
* for refreshing.
*
      RETURN

**************************************************
DSP.MISC.CHARGES.MENU:
**************************************************
      CALL FB.DRAW.BOX(0,6,26,15,' ','')
      CRT @(2, 7):' LTL Carrier Charges '
      CRT @(2, 8):'     Maintance '
      CRT @(2, 9):'====================='
      CRT @(1,10):'1) Add a Charge Code'
      CRT @(1,11):'2) Delete a Charge Code'
      CRT @(1,12):'3) Edit a Chrge Code Amt'

      CRT @(0,22):@(-4)

      RETURN

**************************************************
ADD.MISC.CHARGE:
**************************************************
      CALL FB.DRAW.BOX(0,6,26,15,' ','')
      TABLE.BACK = 0
      NEW.TABLE = 1
      NUM.TABLES = DCOUNT(RATE.TABLE<MISC.CHARGE.CODES>, @VM)

*
* Add New Carrier Charge
*
AMC.1:
      GOSUB LIST.LI.CODES
      IF N.LINES = 0 THEN
         CALL ELINE('No Line Items (LI.CODES) to add from.')
         FAILURE = TRUE
         RETURN
      END

      GOSUB DSP.ADD.MISC.MENU

AMC.2:
      GOSUB DETERMINE.PAGE.DSP
      CRT @(1,15):PD.LINE1'L#25'
      CRT @(1,16):PD.LINE2'L#25'
      MASK = '  '

      CRT @(2,18):'Code #:     '
      HELP='OPTIONS: '
      CRT @(0,22):'Enter a LTL Carrier Chrge Code ## from the list on the right.':@(-4)
      HELP:= PD.HELP:" [X]=Back [EX]it"
      MASK='---'
      CALL GEN.IN(9,18,MASK,'',Q,0,3,'L','',3,9,18,0,QI,HELP,0,23)

      QI=TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
*
* Exit program
*
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               RETURN
            END ELSE
               GOTO AMC.2
            END

*
* Exit routine
*
         CASE QI='X' OR QI=''
            RETURN

*
* Page Forward
*
         CASE QI = 'F'
            IF PAGE.NUM < NUM.PAGES THEN
               PAGE.NUM+=1
               GOSUB LIST.LI.CODES
            END ELSE
               CALL ELINE('LAST PAGE: Can not page beyond the last page.')
            END
            GOTO AMC.2

*
* Page Backward
*
         CASE QI = 'B'
            IF PAGE.NUM > 1 THEN
               PAGE.NUM-=1
               GOSUB LIST.LI.CODES
            END ELSE
               CALL ELINE('FIRST PAGE: Can not page before the first page.')
            END
            GOTO AMC.2

*
* Choose a number
*
         CASE NUM(QI)
            T.POS = QI
*
* Is it a Valid Entry?
*
            IF T.POS<1 OR T.POS>N.LINES THEN
               CALL ELINE('Invalid Entry.  Please try again. 1-':N.LINES)
               GOTO AMC.2
            END
*
* Is it already entered?
*
            T.CODE = LI.CODES<1,T.POS>
            LOCATE T.CODE IN RATE.TABLE<MISC.CHARGE.CODES> SETTING WHERE THEN
               CALL ELINE('Code ':T.CODE:' has already been entered.')
               GOTO AMC.2
            END
*
* Add entry - No amount yet.
*
            RATE.TABLE<MISC.CHARGE.CODES,-1>=T.CODE
            LOCATE T.CODE IN RATE.TABLE<MISC.CHARGE.CODES> SETTING NUM.SEL THEN
               RATE.TABLE<MISC.CHARGE.CONT.AMTS,NUM.SEL>=''
               RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>=''
               GOSUB LIST.MISC.CHARGES
               GOSUB EDIT.MISC.CHARGE.SEL
            END ELSE
               CALL ELINE('Unable to add ':T.CODE:' call programming!!') ; 
            END

         CASE 1
            CALL ELINE('Invalid Option. Try again.')
            GOTO AMC.1
      END CASE

AMC.EXIT:
*
* COMMON EXIT POINT -
*
      CRT @(0,22):@(-4)

      RETURN

**************************************************
DSP.ADD.MISC.MENU:
**************************************************
      CRT @(1, 7):'Adding a Carrier Charge'
      CRT @(1, 8):'     ##   CODE ##      '
      CRT @(1, 9):'======================='
      CRT @(1,11):'Select the Charge Code'
      CRT @(1,12):'Number from the list on'
      CRT @(1,13):'the right.'
      CRT @(0,22):'Enter a LTL Carrier Chrge Code ## from the list on the right.':@(-4)
      RETURN

**************************************************
DELETE.MISC.CHARGE:
**************************************************
      FAILURE=FALSE
      CRT @(0,22):@(-4):

      NUM.TABLES = DCOUNT(RATE.TABLE<MISC.CHARGE.CODES>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No LTL Charges have been entered to delete.')
         FAILURE = TRUE
         RETURN
      END

DMC.1:
      GOSUB DSP.DELETE.CHARGE.MENU

DMC.2:
      HELP = 'OPTIONS: '
      GOSUB DETERMINE.PAGE.DSP
      HELP:=PD.HELP
      HELP:=' [X]=Back [EX]it Program'
      CRT @(1,14):PD.LINE1'L#25'
      CRT @(1,15):PD.LINE2'L#25'
      MASK = '--'
      CRT @(0,17):' Enter Code # :   '

      CALL GEN.IN(16,17,MASK,'',Q,0,3,'','',1,16,17,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               FAILURE=TRUE
            END ELSE
               GOTO DMC.2
            END
         CASE QI = 'X' OR QI = ''
         CASE QI = 'F'
            IF PAGE.NUM < NUM.PAGES THEN
               PAGE.NUM+=1
               GOSUB LIST.MISC.CHARGES
            END ELSE
               CALL ELINE('LAST PAGE: Can not page beyond the last page.')
            END
            GOTO DMC.2
         CASE QI = 'B'
            IF PAGE.NUM > 1 THEN
               PAGE.NUM-=1
               GOSUB LIST.MISC.CHARGES
            END ELSE
               CALL ELINE('FIRST PAGE: Can not page before the first page.')
            END
            GOTO DMC.2
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection out of range.  1-':NUM.TABLES:' only.')
               GOTO DMC.2
            END ELSE
               SEL.CODE = DISP.TABLE<1,NUM.SEL>
               YN.MSG = 'DELETE Misc Charge Code #':NUM.SEL:' ':SEL.CODE:'? :'
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'Y' THEN
                  CRT @(0,22):'Deleting Misc Charge Code... Please wait...':@(-4):
*
* Locate it's new position incase it has moved from
* removing the subst. zips.
*
                  LOCATE SEL.CODE IN RATE.TABLE<MISC.CHARGE.CODES> SETTING WHERE ELSE
                     CALL ELINE('UNABLE TO LOCATE THE MISC CHARGE CODE IN RATE.TABLE<>')
                  END
*
* Remove the Misc Charge Code and Amount
*
                  DEL RATE.TABLE<MISC.CHARGE.CODES,WHERE>
                  DEL RATE.TABLE<MISC.CHARGE.CONT.AMTS,WHERE>
                  DEL RATE.TABLE<MISC.CHARGE.BENCH.AMTS,WHERE>

                  DEL RATE.TABLE<MISC.CHARGE.CONT.CWTRATES,WHERE>
                  DEL RATE.TABLE<MISC.CHARGE.CONT.CWTMINS,WHERE>
                  DEL RATE.TABLE<MISC.CHARGE.CONT.CWTMAXS,WHERE>
                  DEL RATE.TABLE<MISC.CHARGE.BENCH.CWTRATES,WHERE>
                  DEL RATE.TABLE<MISC.CHARGE.BENCH.CWTMINS,WHERE>
                  DEL RATE.TABLE<MISC.CHARGE.BENCH.CWTMAXS,WHERE>

                  GOSUB LIST.MISC.CHARGES
               END ELSE
                  FAILURE = TRUE
               END
            END

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO DMC.2
      END CASE

      CRT @(0,22):@(-4)

      RETURN

**************************************************
DSP.DELETE.CHARGE.MENU:
**************************************************
      CALL FB.DRAW.BOX(0,6,26,15,' ','')
      CRT @(3, 7):'  Misc Charge Code'
      CRT @(3, 8):'      Removal'
      CRT @(3, 9):'===================='

      CRT @(3,11):'Please Choose a Misc.'
      CRT @(3,12):'Code Num to DELETE.'

      CRT @(0,22):@(-4)

      RETURN

**************************************************
EDIT.MISC.CHARGE:
**************************************************

      FAILURE=FALSE
      NUM.TABLES = DCOUNT(RATE.TABLE<MISC.CHARGE.CODES>, @VM)
      IF NUM.TABLES < 1 THEN
         CALL ELINE('No LTL Charges have been entered to edit.')
         FAILURE = TRUE
         RETURN
      END
EMC.1:
      GOSUB DSP.EDIT.CHARGE.MENU
EMC.2:

      HELP = 'OPTIONS: '
      GOSUB DETERMINE.PAGE.DSP
      HELP:=PD.HELP
      CRT @(1,14):PD.LINE1'L#25'
      CRT @(1,15):PD.LINE2'L#25'
      HELP:=' [X]=Back [EX]it Program'
      CRT @(0,17):' Enter Code # :   '
      MASK = '--'
      CALL GEN.IN(16,17,MASK,'',Q,0,3,'','',1,16,17,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               FAILURE=TRUE
            END ELSE
               GOTO EMC.2
            END
         CASE QI = 'X' OR QI = ''
*
* Page Forward
*
         CASE QI = 'F'
            IF PAGE.NUM < NUM.PAGES THEN
               PAGE.NUM+=1
               GOSUB LIST.MISC.CHARGES
            END ELSE
               CALL ELINE('LAST PAGE: Can not page beyond the last page.')
            END
            GOTO EMC.2
*
* Page Backward
*
         CASE QI = 'B'
            IF PAGE.NUM > 1 THEN
               PAGE.NUM-=1
               GOSUB LIST.MISC.CHARGES
            END ELSE
               CALL ELINE('FIRST PAGE: Can not page before the first page.')
            END
            GOTO EMC.2
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > NUM.TABLES) THEN
               CALL ELINE('Selection out of range.  1-':NUM.TABLES:' only.')
               GOTO EMC.2
            END
            GOSUB EDIT.MISC.CHARGE.SEL

         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO EMC.2
      END CASE
      RETURN

**************************************************
DSP.EDIT.CHARGE.MENU:
**************************************************
      CALL FB.DRAW.BOX(0,6,26,15,' ','')
      CRT @(3, 7):'  Misc Charge Code'
      CRT @(3, 8):'      Editing'
      CRT @(3, 9):'===================='
      CRT @(3,11):'Please Choose a Misc.'
      CRT @(3,12):'Code Num to EDIT.'
      CRT @(0,22):@(-4)

      RETURN

**************************************************
EDIT.MISC.CHARGE.SEL:
**************************************************

*
* Position display to the entry to edit.
*
      T.PAGE.NUM=INT(NUM.SEL/DL.MAX.ROWS)
      IF T.PAGE.NUM < (NUM.SEL/DL.MAX.ROWS) THEN T.PAGE.NUM+=1
      IF T.PAGE.NUM # PAGE.NUM THEN
         PAGE.NUM = T.PAGE.NUM
         GOSUB LIST.MISC.CHARGES
      END

*
* Init Positioning variables...
*
      T.POS = DL.MAX.ROWS*(PAGE.NUM-1)
      ISN.Y.POS = DL.START.ROW+NUM.SEL-T.POS-1
      ISN.FORMAT = 'MR22(#6)'
      ISN.INPUT.MASK = 'AMT2'
      ISN.LEN = 6
      ISN.ERROR = 'Invalid Entry! Try Again.'
      ISN.ALLOW.OTHER = TRUE
      ISN.OTHER='ASK'
      ISN.OTHER<-1>='CWT'                ; * JMK01
      ISN.IN='%'

      GOSUB DSP.EDIT.HELP

EMCS.1:
*
* Get MISC Carrier Code Charge to apply to Contract
*
      T.POS = DL.MAX.ROWS*(PAGE.NUM-1)
      ISN.Y.POS = DL.START.ROW+NUM.SEL-T.POS-1
      ISN.ALLOW.NULL=FALSE
      ISN.HELP = 'Enter Misc Carrier Charge for the CONTRACT: A=[ASK] C=[CWT] [%] [X]=Back [EX]it'
      IF CL.LOGISTICS = 'Y' THEN
         ISN.X.POS = 64
      END ELSE
         ISN.X.POS = 71
      END
      ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.CONT.AMTS,NUM.SEL>
      GOSUB INPUT.SIMPLE.NUMBER
      IF FAILURE THEN
         IF CL.LOGISTICS = 'Y' THEN
            IF RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>='CWT' THEN   ; * JMK01
               IF RATE.TABLE<MISC.CHARGE.CONT.CWTMINS,NUM.SEL> > RATE.TABLE<MISC.CHARGE.BENCH.CWTMINS,NUM.SEL> THEN      ; * JMK01
                  CALL ELINE('Misc cwt benchmark min must be greater than the Misc cwt contract min.')         ; * JMK01
                  GOTO EMCS.1            ; * JMK01
               END                       ; * JMK01
            END ELSE                     ; * JMK01
               IF RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>#'ASK' THEN
                  TEST.MISC.CONT.AMT=RATE.TABLE<MISC.CHARGE.CONT.AMTS,NUM.SEL>   ; * JMK01
                  TEST.MISC.CONT.AMT=OCONV(TEST.MISC.CONT.AMT,'MCN')   ; * JMK01
                  TEST.MISC.BENCH.AMT=RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>           ; * JMK01
                  TEST.MISC.BENCH.AMT=OCONV(TEST.MISC.BENCH.AMT,'MCN')           ; * JMK01

                  IF TEST.MISC.CONT.AMT > TEST.MISC.BENCH.AMT THEN     ; * JMK01
                     CALL ELINE('Misc charge benchmark min must be greater than the Misc charge contract min.')
                     GOTO EMCS.1
                  END
               END
            END                          ; * JMK01
         END
         GOTO EMCS.EXIT
      END ELSE
         IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN
            YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '
            YN.MASK = 'N '
            GOSUB ASK.Y.OR.N
            IF YN.ANSWER = 'N' THEN GOTO EMCS.1
         END
         RATE.TABLE<MISC.CHARGE.CONT.AMTS,NUM.SEL>=ISN.RETURN
         IF ISN.RETURN='CWT' THEN        ; * JMK01
EMCS.11:    * DRAW SCREEN; * JMK01
            CALL FB.DRAW.BOX(48,9,30,3,' ','+=+|+=+|')       ; * JMK01
            CALL FB.DRAW.BOX(48,11,30,5,' ','+=+|+-+|')      ; * JMK01
            CRT @(59,9):'CONTRACT'       ; * JMK01
            CRT @(50,10):DISP.TABLE<1,NUM.SEL>'L#4 '         ; * JMK01
            CRT @(55,10):DISP.TABLE<2,NUM.SEL>'L#22'         ; * JMK01
            CRT @(50,12):'1) CWT RATE':@(65,12):RATE.TABLE<MISC.CHARGE.CONT.CWTRATES,NUM.SEL> 'R26(#6)'        ; * JMK01
            CRT @(50,13):'2) MIN AMT':@(65,13):RATE.TABLE<MISC.CHARGE.CONT.CWTMINS,NUM.SEL> 'R26(#6)'          ; * JMK01
            CRT @(50,14):'3) MAX AMT':@(64,14):RATE.TABLE<MISC.CHARGE.CONT.CWTMAXS,NUM.SEL> 'R26(#7)'          ; * JMK01

EMCS.12:    * Get MISC Carrier Code CWT Charge to apply to Contract; * JMK01

            ISN.ALLOW.NULL=FALSE         ; * JMK01
            ISN.HELP = 'Enter CWT Charge: [X]=Back [EX]it'   ; * JMK01
            ISN.Y.POS = 12               ; * JMK01
            ISN.X.POS = 65               ; * JMK01
            ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.CONT.CWTRATES,NUM.SEL>          ; * JMK01
            GOSUB INPUT.SIMPLE.NUMBER    ; * JMK01
            IF FAILURE THEN              ; * JMK01
               GOSUB LIST.MISC.CHARGES   ; * JMK01
               GOTO EMCS.1               ; * JMK01
            END ELSE                     ; * JMK01
               IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN   ; * JMK01
                  YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '           ; * JMK01
                  YN.MASK = 'N '         ; * JMK01
                  GOSUB ASK.Y.OR.N       ; * JMK01
                  IF YN.ANSWER = 'N' THEN GOTO EMCS.12       ; * JMK01
               END                       ; * JMK01
               RATE.TABLE<MISC.CHARGE.CONT.CWTRATES,NUM.SEL>=ISN.RETURN          ; * JMK01
            END                          ; * JMK01

EMCS.13:    * Get MISC Carrier Code CWT Min Charge to apply to Contract; * JMK01

            ISN.ALLOW.NULL=TRUE          ; * JMK01
            ISN.HELP = 'Enter CWT Min Charge: [X]=Back [EX]it'         ; * JMK01
            ISN.Y.POS = 13               ; * JMK01
            ISN.X.POS = 65               ; * JMK01
            ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.CONT.CWTMINS,NUM.SEL>           ; * JMK01
            GOSUB INPUT.SIMPLE.NUMBER    ; * JMK01
            IF FAILURE THEN              ; * JMK01
               GOSUB LIST.MISC.CHARGES   ; * JMK01
               GOTO EMCS.1               ; * JMK01
            END ELSE                     ; * JMK01
               IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN   ; * JMK01
                  YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '           ; * JMK01
                  YN.MASK = 'N '         ; * JMK01
                  GOSUB ASK.Y.OR.N       ; * JMK01
                  IF YN.ANSWER = 'N' THEN GOTO EMCS.13       ; * JMK01
               END                       ; * JMK01
               RATE.TABLE<MISC.CHARGE.CONT.CWTMINS,NUM.SEL>=ISN.RETURN           ; * JMK01
            END                          ; * JMK01

EMCS.14:    * Get MISC Carrier Code CWT Max Charge to apply to Contract; * JMK01

            ISN.ALLOW.NULL=TRUE          ; * JMK01
            ISN.HELP = 'Enter CWT Max Charge: [X]=Back [EX]it'         ; * JMK01
            ISN.Y.POS = 14               ; * JMK01
            ISN.X.POS = 64               ; * JMK01
            TEMP.ISN.LEN=ISN.LEN
            ISN.LEN=7
            TEMP.ISN.FORMAT=ISN.FORMAT
            ISN.FORMAT='MR22(#7)'
            ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.CONT.CWTMAXS,NUM.SEL>           ; * JMK01
            GOSUB INPUT.SIMPLE.NUMBER    ; * JMK01
            ISN.LEN=TEMP.ISN.LEN
            ISN.FORMAT=TEMP.ISN.FORMAT
            IF FAILURE THEN              ; * JMK01
               GOSUB LIST.MISC.CHARGES   ; * JMK01
               GOTO EMCS.1               ; * JMK01
            END ELSE                     ; * JMK01
               IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN   ; * JMK01
                  YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '           ; * JMK01
                  YN.MASK = 'N '         ; * JMK01
                  GOSUB ASK.Y.OR.N       ; * JMK01
                  IF YN.ANSWER = 'N' THEN GOTO EMCS.14       ; * JMK01
               END                       ; * JMK01
               RATE.TABLE<MISC.CHARGE.CONT.CWTMAXS,NUM.SEL>=ISN.RETURN           ; * JMK01
            END                          ; * JMK01
            GOSUB LIST.MISC.CHARGES      ; * JMK01
         END ELSE                        ; * JMK01
            RATE.TABLE<MISC.CHARGE.CONT.CWTRATES,NUM.SEL>=''           ; * JMK01
            RATE.TABLE<MISC.CHARGE.CONT.CWTMINS,NUM.SEL>=''  ; * JMK01
            RATE.TABLE<MISC.CHARGE.CONT.CWTMAXS,NUM.SEL>=''  ; * JMK01
         END                             ; * JMK01
      END
      IF CL.LOGISTICS = 'Y' THEN
EMCS.2:
*
* Get MISC Carrier Code Charge to apply to Benchmark
*
         T.POS = DL.MAX.ROWS*(PAGE.NUM-1)          ; * JMK01
         ISN.Y.POS = DL.START.ROW+NUM.SEL-T.POS-1  ; * JMK01
         ISN.X.POS = 71
         ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>
         ISN.HELP = 'Enter Misc Carrier Charge for the BENCHMARK: [ASK] [CWT] [%] [X]=Back [EX]it'

         GOSUB INPUT.SIMPLE.NUMBER
         IF FAILURE THEN
            IF QI='X' THEN GOTO EMCS.1
         END ELSE
            IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN
               YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '
               YN.MASK = 'N '
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER = 'N' THEN GOTO EMCS.2
            END
            RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>=ISN.RETURN
            IF ISN.RETURN='CWT' THEN     ; * JMK01
EMCS.21:       * DRAW SCREEN; * JMK01
               CALL FB.DRAW.BOX(48,9,30,3,' ','+=+|+=+|')    ; * JMK01
               CALL FB.DRAW.BOX(48,11,30,5,' ','+=+|+-+|')   ; * JMK01
               CRT @(61,9):'BENCH'       ; * JMK01
               CRT @(50,10):DISP.TABLE<1,NUM.SEL>'L#4 '      ; * JMK01
               CRT @(55,10):DISP.TABLE<2,NUM.SEL>'L#22'      ; * JMK01
               CRT @(50,12):'1) CWT RATE':@(65,12):RATE.TABLE<MISC.CHARGE.BENCH.CWTRATES,NUM.SEL> 'R26(#6)'    ; * JMK01
               CRT @(50,13):'2) MINIMUM':@(65,13):RATE.TABLE<MISC.CHARGE.BENCH.CWTMINS,NUM.SEL> 'R26(#6)'      ; * JMK01
               CRT @(50,14):'3) MAXIMUM':@(64,14):RATE.TABLE<MISC.CHARGE.BENCH.CWTMAXS,NUM.SEL> 'R26(#7)'      ; * JMK01

EMCS.22:       * Get MISC Carrier Code CWT Charge to apply to Bench; * JMK01

               ISN.ALLOW.NULL=FALSE      ; * JMK01
               ISN.HELP = 'Enter CWT Charge: [X]=Back [EX]it'          ; * JMK01
               ISN.Y.POS = 12            ; * JMK01
               ISN.X.POS = 65            ; * JMK01
               ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.BENCH.CWTRATES,NUM.SEL>      ; * JMK01
               GOSUB INPUT.SIMPLE.NUMBER           ; * JMK01
               IF FAILURE THEN           ; * JMK01
                  GOSUB LIST.MISC.CHARGES          ; * JMK01
                  GOTO EMCS.2            ; * JMK01
               END ELSE                  ; * JMK01
                  IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN          ; * JMK01
                     YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '        ; * JMK01
                     YN.MASK = 'N '      ; * JMK01
                     GOSUB ASK.Y.OR.N    ; * JMK01
                     IF YN.ANSWER = 'N' THEN GOTO EMCS.22    ; * JMK01
                  END                    ; * JMK01
                  RATE.TABLE<MISC.CHARGE.BENCH.CWTRATES,NUM.SEL>=ISN.RETURN      ; * JMK01
               END                       ; * JMK01

EMCS.23:       * Get MISC Carrier Code CWT Min Charge to apply to Bench; * JMK01

               ISN.ALLOW.NULL=TRUE       ; * JMK01
               ISN.HELP = 'Enter CWT Min Charge: [X]=Back [EX]it'      ; * JMK01
               ISN.Y.POS = 13            ; * JMK01
               ISN.X.POS = 65            ; * JMK01
               ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.BENCH.CWTMINS,NUM.SEL>       ; * JMK01
               GOSUB INPUT.SIMPLE.NUMBER           ; * JMK01
               IF FAILURE THEN           ; * JMK01
                  GOSUB LIST.MISC.CHARGES          ; * JMK01
                  GOTO EMCS.2            ; * JMK01
               END ELSE                  ; * JMK01
                  IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN          ; * JMK01
                     YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '        ; * JMK01
                     YN.MASK = 'N '      ; * JMK01
                     GOSUB ASK.Y.OR.N    ; * JMK01
                     IF YN.ANSWER = 'N' THEN GOTO EMCS.23    ; * JMK01
                  END                    ; * JMK01
                  RATE.TABLE<MISC.CHARGE.BENCH.CWTMINS,NUM.SEL>=ISN.RETURN       ; * JMK01
               END                       ; * JMK01

EMCS.24:       * Get MISC Carrier Code CWT Max Charge to apply to Bench; * JMK01

               ISN.ALLOW.NULL=TRUE       ; * JMK01
               ISN.HELP = 'Enter CWT Max Charge: [X]=Back [EX]it'      ; * JMK01
               ISN.Y.POS = 14            ; * JMK01
               ISN.X.POS = 64            ; * JMK01
               TEMP.ISN.LEN=ISN.LEN
               ISN.LEN=7
               TEMP.ISN.FORMAT=ISN.FORMAT
               ISN.FORMAT='MR22(#7)'
               ISN.DEFAULT = RATE.TABLE<MISC.CHARGE.BENCH.CWTMAXS,NUM.SEL>       ; * JMK01
               GOSUB INPUT.SIMPLE.NUMBER           ; * JMK01
               ISN.LEN=TEMP.ISN.LEN
               ISN.FORMAT=TEMP.ISN.FORMAT
               IF FAILURE THEN           ; * JMK01
                  GOSUB LIST.MISC.CHARGES          ; * JMK01
                  GOTO EMCS.2            ; * JMK01
               END ELSE                  ; * JMK01
                  IF ISN.RETURN < 10 AND ISN.RETURN[LEN(ISN.RETURN),1]#ISN.IN AND ISN.RETURN # 0 THEN          ; * JMK01
                     YN.MSG = 'WARNING! Amount entered is less than $1.00! Is this Correct? '        ; * JMK01
                     YN.MASK = 'N '      ; * JMK01
                     GOSUB ASK.Y.OR.N    ; * JMK01
                     IF YN.ANSWER = 'N' THEN GOTO EMCS.24    ; * JMK01
                  END                    ; * JMK01
                  RATE.TABLE<MISC.CHARGE.BENCH.CWTMAXS,NUM.SEL>=ISN.RETURN       ; * JMK01
               END                       ; * JMK01
               GOSUB LIST.MISC.CHARGES   ; * JMK01
            END ELSE                     ; * JMK01
               RATE.TABLE<MISC.CHARGE.BENCH.CWTRATES,NUM.SEL>=''       ; * JMK01
               RATE.TABLE<MISC.CHARGE.BENCH.CWTMINS,NUM.SEL>=''        ; * JMK01
               RATE.TABLE<MISC.CHARGE.BENCH.CWTMAXS,NUM.SEL>=''        ; * JMK01
            END                          ; * JMK01
         END
         IF RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>='ASK' THEN
            IF RATE.TABLE<MISC.CHARGE.CONT.AMTS,NUM.SEL>#'ASK' THEN
               CALL ELINE('Benchmark cannot be ASK and Contract be an amount')
               GOTO EMCS.2
            END
         END ELSE
            TEST.MISC.CONT.AMT=RATE.TABLE<MISC.CHARGE.CONT.AMTS,NUM.SEL>         ; * JMK01
            TEST.MISC.CONT.AMT=OCONV(TEST.MISC.CONT.AMT,'MCN')         ; * JMK01
            TEST.MISC.BENCH.AMT=RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>       ; * JMK01
            TEST.MISC.BENCH.AMT=OCONV(TEST.MISC.BENCH.AMT,'MCN')       ; * JMK01

            IF TEST.MISC.CONT.AMT > TEST.MISC.BENCH.AMT THEN           ; * JMK01
               CALL ELINE('Misc charge benchmark min must be greater than the Misc charge contract min.')
               RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>=''
               GOTO EMCS.2
            END
         END
      END

EMCS.EXIT:
*
* Evaluate the results
*
      IF NOT(EXIT.IT) THEN
*
* Check for Invalid Setups
*
         T.CONTR = RATE.TABLE<MISC.CHARGE.CONT.AMTS,NUM.SEL>
         T.BENCH = RATE.TABLE<MISC.CHARGE.BENCH.AMTS,NUM.SEL>
         IF T.BENCH[LEN(T.BENCH),1]=ISN.IN THEN
            IF T.CONTR[LEN(T.CONTR),1]=ISN.IN ELSE
               CALL ELINE('Either both the contract and benchmark should be a ':ISN.IN:' or both should be numeric')
               GOTO EMCS.1
            END
            T.BENCH=TRIM(T.BENCH[1,LEN(T.BENCH)-1])
         END ELSE
            IF T.CONTR[LEN(T.CONTR),1]=ISN.IN THEN
               CALL ELINE('Either both the contract and benchmark should be a ':ISN.IN:' or both should be numeric')
               GOTO EMCS.2
            END
         END
         IF T.CONTR[LEN(T.CONTR),1]=ISN.IN THEN
            T.CONTR=TRIM(T.CONTR[1,LEN(T.CONTR)-1])
         END
         IF CL.LOGISTICS = 'Y' THEN
*
* Check for warnings
*
            T = (T.CONTR > T.BENCH)
            IF T.CONTR='ASK' OR T.BENCH='ASK' THEN T=0
            IF T THEN
               CALL ELINE("WARNING! The Benchmark amount is LESS THAN the Contract amount!")
            END
            IF (T.CONTR = 0) AND (T.BENCH = 0) THEN
               CALL ELINE('WARNING Both the Contract and Benchmark amounts are zero.')
            END
         END ELSE
            IF T.CONTR = 0 THEN
               CALL ELINE('WARNING The Contract amount is zero.')
            END
         END

      END
      ISN.IN=''
      ISN.ALLOW.OTHER=FALSE
      ISN.OTHER=''

      CRT @(0,22):@(-4)

      RETURN

**************************************************
DSP.EDIT.HELP:
**************************************************

      CALL FB.DRAW.BOX(0,6,26,15,' ','')
      CRT @(3, 7):'  Misc Charge Code'
      CRT @(3, 8):'      Editing'
      CRT @(3, 9):'===================='
      CRT @(1,11):'Please enter the amounts'
      CRT @(1,12):'for the LTL Misc Charge'
      CRT @(1,13):'which will apply toward'
      CRT @(1,14):'the Benchmark and '
      CRT @(1,15):'Contract.'
      CRT @(35,21):STR('-',40):

      RETURN

**************************************************
LIST.MISC.CHARGES:
**************************************************
*
* Init variables
*
      DISP.HEAD1 = '~ LTL Carrier Charge Codes On File ~'
      DISP.TABLE = RATE.TABLE<MISC.CHARGE.CODES>
      DISP.TABLE<3> = RATE.TABLE<MISC.CHARGE.CONT.AMTS>
      DISP.HEAD2 = ' ## CODE DESCRIPTION                  '
      IF CL.LOGISTICS = 'Y' THEN
         DISP.HEAD2:= 'Contr  Bench'
         DISP.TABLE<4> = RATE.TABLE<MISC.CHARGE.BENCH.AMTS>
      END ELSE
         DISP.HEAD2:= '       Contr'
      END

*
* Add Descriptions to the Codes...
*
      T.NUM.CODES = DCOUNT(RATE.TABLE<MISC.CHARGE.CODES>,@VM)
      FOR T.POS = 1 TO T.NUM.CODES
         T.CODE = RATE.TABLE<MISC.CHARGE.CODES, T.POS>
         LOCATE T.CODE IN LI.CODES<1> SETTING WHERE THEN
            T.DESC = LI.CODES<2,WHERE>
         END ELSE
            T.DESC = '** Description not on file **'
         END
         DISP.TABLE<2,T.POS>=T.DESC
      NEXT

*
* Now Display'Em...
*
      GOSUB DSP.LIST

      RETURN

**************************************************
LIST.LI.CODES:
**************************************************
*
* Init variables
*
      DISP.HEAD1 = '~ LTL Carrier Charge Codes ~'
      DISP.HEAD2 = ' ## CODE DESCRIPTION'
      DISP.TABLE = LI.CODES
*
* Now Display'Em...
*
      GOSUB DSP.LIST
      RETURN

**************************************************
DSP.LIST:
**************************************************
*
* Init variables
*
      DL.ROW.NUM=1
      DL.MAX.ROWS=11
      DL.START.ROW=9

      N.LINES = DCOUNT(DISP.TABLE<1>, @VM)
      NUM.PAGES = INT(N.LINES/DL.MAX.ROWS)
      IF NUM.PAGES < (N.LINES/DL.MAX.ROWS) THEN NUM.PAGES+=1
      IF PAGE.NUM > NUM.PAGES THEN
         IF NUM.PAGES = 0 THEN NUM.PAGES = 1
         PAGE.NUM = 1
      END

*
* Display Heading Box
*
      CALL FB.DRAW.BOX(27,6,51,16,' ','    --- ')
      CALL FB.DRAW.BOX(26,5,53,4,' ','+=+|+=+|')
      CALL FB.PRINT.CENT(26,79,6,DISP.HEAD1)
      CRT @(27,7):DISP.HEAD2
*
* Empty List?
*
      IF N.LINES < 1 THEN
         CALL FB.PRINT.CENT(26,79,13,'** Nothing on File **')
         FAILURE = TRUE
         RETURN
      END
*
* Display current page
*
      DL.POS = (PAGE.NUM-1)*DL.MAX.ROWS
      DL.ROW = DL.START.ROW
      EXIT.DL = FALSE

      LOOP
         DL.POS+=1
         TEMP = DL.POS'R%2'
         CODE = DISP.TABLE<1,DL.POS>
         TEMP:= ' ':CODE'L#4'
         DESC = DISP.TABLE<2,DL.POS>
         TEMP:= ' ':DESC'L#27'
*
* Does this include info for Bench & Contract?
*
         IF INDEX(DISP.HEAD2,'Contr',1) THEN
            IF CL.LOGISTICS = 'Y' THEN
               AMOUNT = DISP.TABLE<3,DL.POS>
               TEMP:= ' ':AMOUNT'R26(#6)'
               AMOUNT = DISP.TABLE<4,DL.POS>
               TEMP:= ' ':AMOUNT'R26(#6)'
            END ELSE
               AMOUNT = DISP.TABLE<3,DL.POS>
               TEMP:= ' ':SPACE(7):AMOUNT'R26(#6)'
            END
         END
         CRT @(28,DL.ROW):TEMP:
         BEGIN CASE
*
*  Finished the page?
*
            CASE DL.ROW.NUM = DL.MAX.ROWS AND DL.POS < N.LINES
               EXIT.DL = TRUE
               TEMP = REVON:'* [F]wd 1 Page'
               IF PAGE.NUM > 1 THEN TEMP:= ' [B]ack 1 Page'
               TEMP:=' *':REVOFF
               CALL FB.PRINT.CENT(26, 79, 21, TEMP)
*
*  Finished the List and not the Page?
*
            CASE DL.POS >= N.LINES
               EXIT.DL = TRUE
               TEMP = REVON:'* End of Listing'
               IF PAGE.NUM # 1 THEN TEMP:=' - [B]ack 1 Page'
               TEMP:=' *':REVOFF
               CALL FB.PRINT.CENT(26, 79, 21, TEMP)
*
*  Default
*
            CASE 1
               DL.ROW+=1
               DL.ROW.NUM+=1
         END CASE
      WHILE NOT(EXIT.DL)
      REPEAT

      RETURN

**************************************************
DETERMINE.PAGE.DSP:
**************************************************
      PD.HELP=''
      PD.LINE1 = ''
      PD.LINE2 = ''

      IF PAGE.NUM < NUM.PAGES THEN
         PD.LINE1 = '[F] = Page List Forward'
         PD.HELP = ' [F]wd Page'
      END

      IF PAGE.NUM > 1 THEN
         PD.LINE2 = '[B] = Page List Backward'
         PD.HELP:= ' [B]ack Page'
      END

      RETURN

**************************************************
INIT.RATE.TABLE:
**************************************************
      RATE.TABLE=CLASSES<1>

      RETURN

**************************************************
LOAD.RATE.TABLE:
**************************************************
      TABLE.ID = CARRIER.ID:'*':TABLE.NUM
      FAILURE = FALSE

LRT.1:

      * Begin GRB01
      READU RATE.TABLE FROM F.AUDIT.TABLES,TABLE.ID LOCKED
         IF RECORDLOCKED(F.AUDIT.TABLES,TABLE.ID) THEN
            LOCK.USER = STATUS()"R%5"
            VIN=''
            VIN<1> = LOCK.USER
            CALL LOCK.USER(VIN,VOUT)
            CALL ELINE("This record is currently locked by ":VOUT<1>)
            EXIT.IT = TRUE
            SAVE.IT = FALSE
            RETURN TO LS1
         END
* End GRB01
      END THEN
         GOSUB SORT.RATE.TABLE
      END ELSE
         RATE.TABLE = CLASSES
         IF TABLE.DESC THEN RATE.TABLE<31>=TABLE.DESC
         FAILURE = TRUE
      END
      TEMP.TABLE=RATE.TABLE
      ORIG.RATE.TABLE = RATE.TABLE

*
* Load the description for the Cutback code, verify the code is correct, and
* remove the code if the code had been removed from FB.CUT.BACKS
*
      IF RT.CUTBACK.CODE THEN
         READV T.DESC FROM F.CUT.BACKS,RT.CUTBACK.CODE,1 THEN
            CUTBACK.DESC = T.DESC
         END ELSE
            RT.CUTBACK.CODE = ''
         END
      END

      RETURN

**************************************************
SAVE.RATE.TABLE:
**************************************************
*
* Compute Rate Table Contract FAK
*
      RATE.TABLE<33> = ''                ; * Contr FAK Class
      RATE.TABLE<34> = ''                ; * Contr FAK Lowest Bill Class
      RATE.TABLE<35> = ''                ; * Contr FAK Highest Bill Class
      RATE.TABLE<36> = ''                ; * Contr FAK O5C %

      LO.LINE = 1
      HI.LINE = 0                        ; * Init to some ambigous value..
      LAST.LINE.CLS = RATE.TABLE<CONT.CLASS,1>

      FOR X = 2 TO 18
*
* Compare the current line with the last line
*
         IF LAST.LINE.CLS = RATE.TABLE<CONT.CLASS,X> THEN
*
* Current line does match the last line.
*
            IF RATE.TABLE<CONT.O5C,X> # RATE.TABLE<CONT.O5C,LO.LINE> THEN
               MSG = 'WARNING! The Contract O5C% for an FAK is not the'
               MSG:= ' same on Bill Class "':RATE.TABLE<BILL.CLASS,X>:'"'
               CALL ELINE(MSG)
            END
            HI.LINE = X                  ; * Basicly the same as (LAST.LINE.CLS)
         END ELSE
*
* They did not match.. do we need to same some info out?
*
            IF (HI.LINE # 0) THEN GOTO SRT.0
*
* They did not match.. Move the last line to the current line
* then NEXT to the next line to compare
*
            LO.LINE = X
            LAST.LINE.CLS = RATE.TABLE<CONT.CLASS,X>
         END
      NEXT X


SRT.0:
      IF (HI.LINE # 0) THEN
         RATE.TABLE<33> = RATE.TABLE<CONT.CLASS,HI.LINE>
         RATE.TABLE<34> = RATE.TABLE<BILL.CLASS,LO.LINE>
         RATE.TABLE<35> = RATE.TABLE<BILL.CLASS,HI.LINE>
         RATE.TABLE<36> = RATE.TABLE<CONT.O5C,HI.LINE>
         HI.LINE = 0
      END

      TABLE.ID = CARRIER.ID:'*':TABLE.NUM

SRT.1:

      IF RATE.TABLE#TEMP.TABLE THEN
         RATE.TABLE<43>=USER
         RATE.TABLE<44>=DATE()
         RATE.TABLE<45>=TIME()
         RATE.TABLE<46,-1>=USER
         RATE.TABLE<47,-1>=DATE()
         RATE.TABLE<48,-1>=TIME()
      END
      IF WRITE.DATA THEN                 ; * GRB02
         WRITE RATE.TABLE ON F.AUDIT.TABLES,TABLE.ID ELSE
            CALL ELINE("SAVE.RATE.TABLE: Unable to write table F.AUDIT.TABLES,":TABLE.ID:". Call Programming!!!.")
            GOTO SRT.1
         END
         IF ORIG.RATE.TABLE # RATE.TABLE THEN
            GOSUB UPDATE.LOG
         END
      END                                ; * GRB02
      RETURN

**************************************************
DELETE.RATE.TABLE:
**************************************************

      TABLE.ID = CARRIER.ID:'*':TABLE.NUM

DRT.1:
      IF WRITE.DATA THEN                 ; * GRB02
         DELETE F.AUDIT.TABLES, TABLE.ID ELSE
            CALL ELINE("DELETE.RATE.TABLE: Unable to DELETE table F.AUDIT.TABLES,":TABLE.ID:". Call Programming!")
            GOTO DRT.1
         END
      END                                ; * GRB02
      RETURN

**************************************************
SORT.RATE.TABLE:
**************************************************

      T.ITEMS = DCOUNT(RATE.TABLE<MISC.CHARGE.CODES>,@VM)

      FOR T.X = 1 TO T.ITEMS
         T.LOWEST = RATE.TABLE<MISC.CHARGE.CODES,T.X>
         T.LOWEST.POS = T.X

         FOR T.POS = T.X+1 TO T.ITEMS
            T.VAL = RATE.TABLE<MISC.CHARGE.CODES,T.POS>
            IF T.LOWEST > T.VAL THEN
               T.LOWEST = T.VAL
               T.LOWEST.POS = T.POS
            END
         NEXT T.POS

         IF T.LOWEST.POS # T.X THEN
            SA.SV1 = T.LOWEST.POS ; SA.SV2 = T.X
            GOSUB SWAP.ITEMS
         END
      NEXT T.X
      RETURN

* SWAP.ITEMS - Swaps an Ltl Carrier Code, and Amounts with another
*                subvalue.
**************************************************
SWAP.ITEMS:
**************************************************
      SA.ATRIB = MISC.CHARGE.CODES
      GOSUB SWAP.SUBVALS
      SA.ATRIB = MISC.CHARGE.CONT.AMTS
      GOSUB SWAP.SUBVALS
      SA.ATRIB = MISC.CHARGE.BENCH.AMTS
      GOSUB SWAP.SUBVALS
      SA.ATRIB = MISC.CHARGE.CONT.CWTRATES         ; * JMK02
      GOSUB SWAP.SUBVALS                 ; * JMK02
      SA.ATRIB = MISC.CHARGE.CONT.CWTMINS          ; * JMK02
      GOSUB SWAP.SUBVALS                 ; * JMK02
      SA.ATRIB = MISC.CHARGE.CONT.CWTMAXS          ; * JMK02
      GOSUB SWAP.SUBVALS                 ; * JMK02
      SA.ATRIB = MISC.CHARGE.BENCH.CWTRATES        ; * JMK02
      GOSUB SWAP.SUBVALS                 ; * JMK02
      SA.ATRIB = MISC.CHARGE.BENCH.CWTMINS         ; * JMK02
      GOSUB SWAP.SUBVALS                 ; * JMK02
      SA.ATRIB = MISC.CHARGE.BENCH.CWTMAXS         ; * JMK02
      GOSUB SWAP.SUBVALS                 ; * JMK02
      RETURN

* INPUT : SA.ATRIB - Attribute to exchange Sub Value contents
*         SA.SV1 - Subvalue to exchange contents
*         SA.SV2 - Subvalue to exchange contents

**************************************************
SWAP.SUBVALS:
**************************************************
      SA.T.VAL = RATE.TABLE<SA.ATRIB,SA.SV1>
      RATE.TABLE<SA.ATRIB,SA.SV1> = RATE.TABLE<SA.ATRIB,SA.SV2>
      RATE.TABLE<SA.ATRIB,SA.SV2> = SA.T.VAL

      RETURN

**************************************************
LOAD.CLIENT.DESC:
**************************************************

      MATREAD CLIENT.REC FROM F.CLIENTS,CLIENT.ID THEN
         FAILURE=FALSE
         CLIENT.NAME = CL.NAME
      END ELSE
         FAILURE=TRUE
      END
      IF CLIENT.ID='00223' THEN CL.LOGISTICS='N'
      IF CL.LOGISTICS='Y' THEN           ; * SWB01
         MAX.DISC.COL=6                  ; * SWB01
      END                                ; * SWB01

      RETURN

**************************************************
ASK.Y.OR.N:***
**************************************************
      YN.ANSWER = ''
Y.OR.N:
      HELP = CHAR(7):"Entry Options: [Y]-Yes [N]-No [X]-Back"
      CRT @(0,22):YN.MSG:@(-4)
      MASK = YN.MASK'L#1'
      Q=''
      CALL GEN.IN(LEN(YN.MSG)+1,22,MASK,'',Q,0,1,'','',2,LEN(YN.MSG)+1,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = '1'
            QI='Y'
         CASE QI = '0'
            QI='N'
         CASE QI = 'Y'
         CASE QI = 'N'
         CASE QI = 'X'
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO Y.OR.N
      END CASE
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      YN.ANSWER = QI
      RETURN

**************************************************
ASK.FOR.NUM:***
**************************************************
      AFN.ANSWER = ''
AFN.1:
      HELP = "Entry Options: [":AFN.MIN:"-":AFN.MAX:"] [A-Z] [X]-Back"
      CRT @(0,22):AFN.MSG:@(-4)
      MASK = AFN.MASK:' '
      Q=''
      CALL GEN.IN(LEN(AFN.MSG)+1,22,MASK,'',Q,0,LEN(AFN.MAX),'','',2,LEN(AFN.MSG)+1,22,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI = TRIM(OCONV(QI,'MCU'))

      BEGIN CASE
         CASE QI = 'X' OR QI='EX' OR QI=''
*DF      CASE QI>=AFN.MIN AND QI<=AFN.MAX
         CASE (QI GE AFN.MIN AND QI LE AFN.MAX) OR (QI GE 'A' AND QI LE 'Z')
         CASE 1
            CALL ELINE('Invalid entry. Please try again.')
            GOTO AFN.1
      END CASE

      AFN.ANSWER=QI
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):

      RETURN

* RETURNS:
*   FOUND - TRUE  = Successfully found the locked record
*           FALSE = Failed in the attempt to find the locked file.
*                   FL.USER will contain "Someone" as a name.
*   FL.USER - The user who has the lock on the file.


**************************************************
DEBUG:
**************************************************
*
* Was a special debug message passed? If not, Use the default.
*
      IF DEBUG.MSG = '' THEN DEBUG.MSG='DEBUG POINT - BREAK IT!'
      CRT @(0,0):DEBUG.MSG:
      INPUT NULL,1
      CRT @(0,0):SPACE(LEN(DEBUG.MSG)):
      DEBUG.MSG=''                       ; * Clear it to prevent reuse of special.

      RETURN

***************************************************
SHOW.WEIGHT.CHGS:
***************************************************
      FOR FLAT.I = 1 TO 3                ; * JMK03
         IF RATE.TABLE<55,FLAT.I>='' THEN          ; * JMK03
            CRT @(17,17+FLAT.I):'------':          ; * JMK03
         END ELSE                        ; * JMK03
            CRT @(17,17+FLAT.I):RATE.TABLE<55,FLAT.I> "R#6":           ; * JMK03
         END                             ; * JMK03
         IF RATE.TABLE<56,FLAT.I>='' THEN          ; * JMK03
            CRT @(24,17+FLAT.I):'------':          ; * JMK03
         END ELSE                        ; * JMK03
            CRT @(24,17+FLAT.I):RATE.TABLE<56,FLAT.I> "R#6" :          ; * JMK03
         END                             ; * JMK03
         IF RATE.TABLE<57,FLAT.I>='' THEN          ; * JMK03
            CRT @(37,17+FLAT.I):'--------':        ; * JMK03
         END ELSE                        ; * JMK03
            CRT @(37,17+FLAT.I):RATE.TABLE<57,FLAT.I>'L26(#8)':        ; * JMK03
         END                             ; * JMK03
         IF CL.LOGISTICS='Y' THEN        ; * JMK03
            IF RATE.TABLE<58,FLAT.I>='' THEN       ; * JMK03
               CRT @(46,17+FLAT.I):'--------':     ; * JMK03
            END ELSE                     ; * JMK03
               CRT @(46,17+FLAT.I):RATE.TABLE<58,FLAT.I>'L26(#8)':     ; * JMK03
            END                          ; * JMK03
         END                             ; * JMK03
         IF RATE.TABLE<59,FLAT.I>='' THEN          ; * JMK04
            CRT @(61,17+FLAT.I):'--------':        ; * JMK04
         END ELSE                        ; * JMK034
            CRT @(61,17+FLAT.I):RATE.TABLE<59,FLAT.I>'L26(#8)':        ; * JMK04
         END                             ; * JMK04
         IF CL.LOGISTICS='Y' THEN        ; * JMK04
            IF RATE.TABLE<60,FLAT.I>='' THEN       ; * JMK04
               CRT @(70,17+FLAT.I):'--------':     ; * JMK04
            END ELSE                     ; * JMK04
               CRT @(70,17+FLAT.I):RATE.TABLE<60,FLAT.I>'L26(#8)':     ; * JMK04
            END                          ; * JMK04
         END                             ; * JMK04
      NEXT FLAT.I                        ; * JMK03
      RETURN                             ; * JMK06
***************************************************
SHOW.WEIGHT.CHGS.FULL:
**************************************************
      FWC.ROW.NUM=1
      FWC.MAX.ROWS=14
      FWC.START.ROW=7
      HELP = 'OPTIONS: Line # ---'
      FWC.HELP = ''
      LN.POS = 1
      N.LINES = DCOUNT(RATE.TABLE<55>,@VM)
      NUM.FWC.PGS = INT(N.LINES/FWC.MAX.ROWS)
      IF NUM.FWC.PGS < (N.LINES/FWC.MAX.ROWS) THEN NUM.FWC.PGS+=1
      IF FWC.PG > NUM.FWC.PGS THEN
         IF NUM.FWC.PGS = 0 THEN NUM.FWC.PGS = 1
         FWC.PG = 1
      END
      ST.LINE = 1                        ; * NPR01
      END.LINE = FWC.MAX.ROWS
      GOSUB SHOW.WEIGHT.CHGS.FULL2       ; * NPR01
FWC.2:*

      HELP = 'OPTIONS: Line # ...'
      FWC.HELP = ''
      IF FWC.PG < NUM.FWC.PGS THEN
         FWC.HELP = ' [F]wd Page'
      END
      IF FWC.PG > 1 THEN
         FWC.HELP:= ' [B]ack Page'
      END
      HELP:=FWC.HELP
      HELP:=' [X]=Back [EX]it Program'
      MASK = 'Enter your selection --'
      CALL GEN.IN(0,22,MASK,'',Q,0,3,'','',1,25,22,0,QI,HELP,0,23)
      QI = TRIM(OCONV(QI,'MCU'))
      T.LINES = DCOUNT(RATE.TABLE<55>,@VM)         ; * NPR99
      BEGIN CASE
         CASE QI = 'EX'
            GOSUB ASK.ABOUT.QUITTING
            IF EXIT.IT THEN
               STOP
            END ELSE
               GOTO FWC.2
            END
         CASE QI = 'X' OR QI = ''
            RETURN
*
* Page Forward
*
         CASE QI = 'F'
            IF FWC.PG LT NUM.FWC.PGS THEN
               FWC.PG += 1
               GOSUB SHOW.WEIGHT.CHGS.FULL2
            END ELSE
               CALL ELINE('LAST PAGE: Can not page beyond the last page.')
            END
            GOTO FWC.2

*
* Page Backward
*
         CASE QI = 'B'
            IF FWC.PG > 1 THEN
               FWC.PG -= 1
               LN.POS = LN.POS - (FWC.MAX.ROWS*2)
               IF LN.POS LE 0 THEN LN.POS = 1
               GOSUB SHOW.WEIGHT.CHGS.FULL2
            END ELSE
               CALL ELINE('FIRST PAGE: Can not page before the first page.')
            END
            GOTO FWC.2
         CASE T.LINES = '' OR T.LINES = '0'
            FLAT.IL = 1 ; FLAT.OL = 1
            GOSUB ENTER.FLAT.CHGS2
            GOTO FWC.2
         CASE NUM(QI)
            NUM.SEL = QI'R%2'
            IF (NUM.SEL < 1) OR (NUM.SEL > T.LINES+1) THEN   ; * NPR99
               CALL ELINE('Selection out of range.  1-':N.LINES:' only.')
               CALL ELINE('Selection out of range.  1-':T.LINES:' only.')
               GOTO FWC.2
            END
            FLAT.IL = NUM.SEL            ; * NPR01
            IF FWC.PG = 1 THEN
               FLAT.OL = FLAT.IL
            END ELSE
               FLAT.OL = ((FWC.PG-1) * FWC.MAX.ROWS) + NUM.SEL         ; * NPR01
            END
            GOSUB ENTER.FLAT.CHGS2
            GOTO FWC.2
         CASE 1
            CALL ELINE('Invalid option, Try Again.')
            GOTO FWC.2
      END CASE

      RETURN
**************************************************
SHOW.WEIGHT.CHGS.FULL2:*
**************************************************
      CRT @(0,7) : @(-3)

      FOR FLAT.I = ST.LINE TO END.LINE   ; * JMK06              ;* NPR01
         CRT @(0,6+FLAT.I): LN.POS "R#3":") ":     ; * NPR01 ; * JMK11
         IF RATE.TABLE<55,LN.POS>='' THEN          ; * JMK06
            CRT @(10,6+FLAT.I):'------':           ; * JMK06
         END ELSE                        ; * JMK06
            CRT @(10,6+FLAT.I):RATE.TABLE<55,LN.POS> "R#6" :           ; * JMK06
         END                             ; * JMK06
         IF RATE.TABLE<56,LN.POS>='' THEN          ; * JMK06
            CRT @(19,6+FLAT.I):'------':           ; * JMK06
         END ELSE                        ; * JMK06
            CRT @(19,6+FLAT.I):RATE.TABLE<56,LN.POS> "R#6" :           ; * JMK06
         END                             ; * JMK06
         IF RATE.TABLE<57,LN.POS>='' THEN          ; * JMK06
            CRT @(33,6+FLAT.I):'---------':        ; * JMK06
         END ELSE                        ; * JMK06
            CRT @(33,6+FLAT.I):OCONV(RATE.TABLE<57,LN.POS>,"MR2") "R#9" :        ; * JMK06
         END                             ; * JMK06
         IF CL.LOGISTICS='Y' THEN        ; * JMK06
            IF RATE.TABLE<58,LN.POS>='' THEN       ; * JMK06
               CRT @(43,6+FLAT.I):'---------':     ; * JMK06
            END ELSE                     ; * JMK06
               CRT @(43,6+FLAT.I):OCONV(RATE.TABLE<58,LN.POS>,"MR2") "R#9" :     ; * JMK06
            END                          ; * JMK06
         END                             ; * JMK06
         IF RATE.TABLE<59,LN.POS>='' THEN          ; * JMK06
            CRT @(60,6+FLAT.I):'---------'         ; * JMK06
         END ELSE                        ; * JMK036
            CRT @(60,6+FLAT.I):OCONV(RATE.TABLE<59,LN.POS>,"MR2") "R#9"          ; * JMK06
         END                             ; * JMK06
         IF CL.LOGISTICS='Y' THEN        ; * JMK06
            IF RATE.TABLE<60,LN.POS>='' THEN       ; * JMK06
               CRT @(70,6+FLAT.I):'---------'      ; * JMK06
            END ELSE                     ; * JMK06
               CRT @(70,6+FLAT.I):OCONV(RATE.TABLE<60,LN.POS>,"MR2") "R#9"       ; * JMK06
            END                          ; * JMK06
         END                             ; * JMK06
         LN.POS += 1
      NEXT FLAT.I                        ; * JMK06

      RETURN                             ; * JMK06

*
   END
*
**************************************************
ENTER.FLAT.CHGS2:
**************************************************
   X.FLAT.HIT=0                          ; * JMK03
   SKIP.FLAT.DISPLAY=0                   ; * JMK03
   DEC.FLAT.IL=0                         ; * JMK03
   BASELOC=0                             ; * JMK03
   BASEREC=0                             ; * JMK03
   FLAT.LOC=0                            ; * JMK03
   OLD.FLAT.IL=0                         ; * JMK03
   Q=''                                  ; * JMK03
   QI=''                                 ; * JMK03

FWC.EDIT.1:* Beginning Weight

   OLD.FLAT.LOC=FLAT.LOC                 ; * JMK03
   FLAT.LOC=17+BASELOC                   ; * JMK03
   CRT @(0,23):@(-4):                    ; * JMK03
   HELP = "Enter Beginning Weight or [D] to delete line ":FLAT.OL

   MASK=RATE.TABLE<55,FLAT.OL> 'R#6'     ; * JMK03
   CALL GEN.IN(10,6+FLAT.IL,MASK,'',Q,0,8,'','',0,10,6+FLAT.IL,0,QI,HELP,0,23)   ; * JMK03               QI=OCONV(QI,'MCU')           ; * JMK03
   IF QI = '' THEN
      IF RATE.TABLE<55,FLAT.OL>='' THEN
         RETURN
      END
      Q = RATE.TABLE<55,FLAT.OL>
      QI = Q
   END
   IF QI = 'D' THEN
      GOSUB WT.DELETE.LINE               ; * JMK03
      IF FWC.PG LE 1 THEN
         LN.POS = 1
      END ELSE
         W.VAR = ((LN.POS-1)/FWC.MAX.ROWS) - 1
         LN.POS = W.VAR * FWC.MAX.ROWS
      END
      GOSUB SHOW.WEIGHT.CHGS.FULL2
      GOTO FWC.EDIT.99
   END
   IF NOT(NUM(QI)) THEN                  ; * JMK03
      CALL ELINE("Entry must be numeric")          ; * JMK03
      RATE.TABLE<55,FLAT.OL>=''          ; * JMK03
      GO FWC.EDIT.1                      ; * JMK03
   END
   IF QI<1 THEN                          ; * JMK05
      CALL ELINE("Must be greater than 0!!!")      ; * JMK05
      GO FWC.EDIT.1                      ; * JMK05
   END                                   ; * JMK05
   IF FLAT.OL>1 THEN                     ; * JMK03
      IF Q<=RATE.TABLE<55,FLAT.OL-1> THEN          ; * JMK03
         CALL ELINE("Weight ":FLAT.OL:" must be greater than beginning weight on line ":FLAT.OL-1)   ; * JMK03
         GO FWC.EDIT.1                   ; * JMK03
      END ELSE                           ; * JMK03
         IF Q<RATE.TABLE<56,FLAT.OL-1> THEN        ; * JMK03
            CALL ELINE("Weight ":FLAT.OL:" must be greater than ending weight on line ":FLAT.OL-1)   ; * JMK03
            GO FWC.EDIT.1                ; * JMK03
         END ELSE                        ; * JMK03
            RATE.TABLE<55,FLAT.OL>=QI    ; * JMK03
         END                             ; * JMK03
      END                                ; * JMK03
   END ELSE                              ; * JMK03
      IF RATE.TABLE<55,FLAT.OL+1> THEN   ; * JMK03
         IF QI>=RATE.TABLE<55,FLAT.OL+1> THEN      ; * JMK03
            CALL ELINE("Weight must be less than ":RATE.TABLE<55,FLAT.OL+1>)     ; * JMK03
            GO FWC.EDIT.1                ; * JMK03
         END                             ; * JMK03
      END                                ; * JMK03
      RATE.TABLE<55,FLAT.OL>=QI          ; * JMK03
   END                                   ; * JMK03

   CRT @(10,6+FLAT.IL):RATE.TABLE<55,FLAT.OL> 'R#6'

FWC.EDIT.2:* Ending Weight

   OLD.FLAT.LOC=FLAT.LOC                 ; * JMK03
   FLAT.LOC=24+BASELOC                   ; * JMK03
   CRT @(0,23):@(-4):                    ; * JMK03
   HELP = "Enter Ending Weight for line ":FLAT.OL  ; * JMK03
   MASK=RATE.TABLE<56,FLAT.OL> 'R#6'     ; * JMK03
   CALL GEN.IN(19,6+FLAT.IL,MASK,'',Q,0,8,'','',0,19,6+FLAT.IL,0,QI,HELP,0,23)   ; * JMK03

   QI=OCONV(QI,'MCU')                    ; * JMK03

   IF QI = '' THEN
      Q = RATE.TABLE<56,FLAT.OL>
      QI = Q
   END
   IF NOT(NUM(QI)) THEN                  ; * JMK03
      CALL ELINE("Entry must be numeric")          ; * JMK03
      RATE.TABLE<56,FLAT.OL>=''          ; * JMK03
      GO FWC.EDIT.2                      ; * JMK03
   END
   IF QI<1 THEN                          ; * JMK05
      CALL ELINE("Must be greater than 0!!!")      ; * JMK05
      GO FWC.EDIT.2                      ; * JMK05
   END                                   ; * JMK05
   IF FLAT.OL>1 THEN                     ; * JMK03
      IF Q<=RATE.TABLE<56,FLAT.OL-1> THEN          ; * JMK03
         CALL ELINE("Weight ":FLAT.OL:" must be greater than line ":FLAT.OL-1)   ; * JMK03
         GO FWC.EDIT.2                   ; * JMK03
      END ELSE                           ; * JMK03
         RATE.TABLE<56,FLAT.OL>=QI       ; * JMK03
      END                                ; * JMK03
   END ELSE                              ; * JMK03
      IF RATE.TABLE<56,FLAT.OL+1> THEN   ; * JMK03
         IF QI>=RATE.TABLE<56,FLAT.OL+1> THEN      ; * JMK03
            CALL ELINE("Weight must be less than ":RATE.TABLE<56,FLAT.OL+1>)     ; * JMK03
            GO FWC.EDIT.2                ; * JMK03
         END                             ; * JMK03
      END                                ; * JMK03
      RATE.TABLE<56,FLAT.OL>=QI          ; * JMK03
   END                                   ; * JMK03
   CRT @(19,6+FLAT.IL):RATE.TABLE<56,FLAT.OL> 'R#6'


FWC.EDIT.3:* Intrastate Contract Charge

   OLD.FLAT.LOC=FLAT.LOC                 ; * JMK03
   FLAT.LOC=37+BASELOC                   ; * JMK03
   CRT @(0,23):@(-4):                    ; * JMK03
   HELP = "Enter Intrastate Contract Charge for line ":FLAT.OL         ; * JMK03 ; * JMK04  ;* NPR01
   MASK = OCONV(RATE.TABLE<57,FLAT.OL>,"MR2") "R#9"          ; * JMK03  ; * NPR01
   CALL GEN.IN(33,6+FLAT.IL,MASK,'AMT2',Q,0,8,'','',0,33,6+FLAT.IL,0,QI,HELP,0,23)         ; * JMK03
   QI=OCONV(QI,'MCU')                    ; * JMK03

   IF QI = '' THEN
      Q = RATE.TABLE<57,FLAT.OL>
      QI = Q
   END
   IF QI='#' THEN QI='' ; Q=''           ; * JMK05
   IF QI=' ' THEN QI='' ; Q=''           ; * JMK05
   IF QI#'' THEN                         ; * JMK05
      IF NOT(NUM(QI)) THEN               ; * JMK05
         CALL ELINE("Entry must be numeric")       ; * JMK05
         RATE.TABLE<57,FLAT.OL>=''       ; * JMK05
         GO FWC.EDIT.3                   ; * JMK05
      END                                ; * JMK05
      IF QI<25 THEN                      ; * JMK05
         CALL ELINE("Must be at least $25.00!!!")  ; * JMK05
         GO FWC.EDIT.3                   ; * JMK05
      END                                ; * JMK05
   END                                   ; * JMK05
   RATE.TABLE<57,FLAT.OL>=Q              ; * JMK03
   CRT @(33,6+FLAT.IL) : OCONV(RATE.TABLE<57,FLAT.OL>,"MR2") "R#9"

FWC.EDIT.4:* Intrastate Benchmark Charge

   IF CL.LOGISTICS#'Y' THEN GOTO FWC.EDIT.5        ; * JMK04
   OLD.FLAT.LOC=FLAT.LOC                 ; * JMK03
   FLAT.LOC=46+BASELOC                   ; * JMK03
   CRT @(0,23):@(-4):                    ; * JMK03
   HELP = "Enter Intrastate Benchmark Charge for line ":FLAT.OL        ; * JMK03 ; * JMK04
   MASK = OCONV(RATE.TABLE<58,FLAT.OL>,"MR2") "R#9"          ; * JMK03  ; * NPR01
   CALL GEN.IN(43,6+FLAT.IL,MASK,'AMT2',Q,0,8,'','',0,43,6+FLAT.IL,0,QI,HELP,0,23)         ; * JMK03 ; * JMK12
   QI=OCONV(QI,'MCU')                    ; * JMK03
   IF QI = '' THEN
      Q = RATE.TABLE<58,FLAT.OL>
      QI = Q
   END
   IF QI='#' THEN QI='' ; Q=''           ; * JMK05
   IF QI=' ' THEN QI='' ; Q=''           ; * JMK05
   IF QI#'' THEN                         ; * JMK05
      IF NOT(NUM(QI)) THEN               ; * JMK05
         CALL ELINE("Entry must be numeric")       ; * JMK05
         RATE.TABLE<58,FLAT.OL>=''       ; * JMK05
         GOTO FWC.EDIT.4                 ; * JMK05
      END                                ; * JMK05
      IF QI<25 THEN                      ; * JMK05
         CALL ELINE("Must be at least $25.00!!!")  ; * JMK05
         GOTO FWC.EDIT.4                 ; * JMK05
      END                                ; * JMK05

   END                                   ; * JMK05
   RATE.TABLE<58,FLAT.OL>=Q              ; * JMK03
   CRT @(43,6+FLAT.IL) : OCONV(RATE.TABLE<58,FLAT.OL>,"MR2") "R#9"

FWC.EDIT.5:* Interstate Contract Charge

   OLD.FLAT.LOC=FLAT.LOC                 ; * JMK04
   FLAT.LOC=61+BASELOC                   ; * JMK04
   CRT @(0,23):@(-4):                    ; * JMK04
   HELP = "Enter Interstate Contract Charge for line ":FLAT.OL         ; * JMK04
   MASK = OCONV(RATE.TABLE<59,FLAT.OL>,"MR2") "R#9"          ; * JMK03  ; * NPR01
   CALL GEN.IN(60,6+FLAT.IL,MASK,'AMT2',Q,0,8,'','',0,60,6+FLAT.IL,0,QI,HELP,0,23)         ; * JMK03
   QI=OCONV(QI,'MCU')                    ; * JMK03
   IF QI = '' THEN
      Q = RATE.TABLE<59,FLAT.OL>
      QI = Q
   END
   IF QI='#' THEN QI='' ; Q=''           ; * JMK05
   IF QI=' ' THEN QI='' ; Q=''           ; * JMK05
   IF QI#'' THEN                         ; * JMK05
      IF NOT(NUM(QI)) THEN               ; * JMK05
         CALL ELINE("Entry must be numeric")       ; * JMK05
         RATE.TABLE<59,FLAT.OL>=''       ; * JMK05
         GOTO FWC.EDIT.5                 ; * JMK05
      END                                ; * JMK05
      IF QI<25 THEN                      ; * JMK05
         CALL ELINE("Must be at least $25.00!!!")  ; * JMK05
         GOTO FWC.EDIT.5                 ; * JMK05
      END                                ; * JMK05

   END                                   ; * JMK05

   RATE.TABLE<59,FLAT.OL>=Q              ; * JMK04

   CRT @(60,6+FLAT.IL) : OCONV(RATE.TABLE<59,FLAT.OL>,"MR2") "R#9"

FWC.EDIT.6:* Interstate Benchmark Charge

   IF CL.LOGISTICS#'Y' THEN GOTO FWC.EDIT.99       ; * JMK04

   OLD.FLAT.LOC=FLAT.LOC                 ; * JMK04
   FLAT.LOC=70+BASELOC                   ; * JMK04
   CRT @(0,23):@(-4):                    ; * JMK04
   HELP = "Enter Interstate Benchmark Charge for line ":FLAT.OL        ; * JMK04

   MASK = OCONV(RATE.TABLE<60,FLAT.OL>,"MR2") "R#9"          ; * JMK03  ; * NPR01
   CALL GEN.IN(70,6+FLAT.IL,MASK,'AMT2',Q,0,8,'','',0,70,6+FLAT.IL,0,QI,HELP,0,23)         ; * JMK03

   QI=OCONV(QI,'MCU')                    ; * JMK03

   IF QI = '' THEN
      Q = RATE.TABLE<60,FLAT.OL>
      QI = Q
   END

   IF QI='#' THEN QI='' ; Q=''           ; * JMK05
   IF QI=' ' THEN QI='' ; Q=''           ; * JMK05
   IF QI#'' THEN                         ; * JMK05
      IF NOT(NUM(QI)) THEN               ; * JMK05
         CALL ELINE("Entry must be numeric")       ; * JMK05
         RATE.TABLE<54+FLAT.IL,FLAT.OL>=''         ; * JMK05
         GOTO FWC.EDIT.6                 ; * JMK05
      END                                ; * JMK05
      IF QI<25 THEN                      ; * JMK05
         CALL ELINE("MUST BE AT LEAST 25.00!!!")   ; * JMK05
         GOTO FWC.EDIT.6                 ; * JMK05
      END                                ; * JMK05

   END                                   ; * JMK05
   RATE.TABLE<60,FLAT.OL>=Q              ; * JMK04
   IF RATE.TABLE<57,FLAT.OL>='' AND RATE.TABLE<58,FLAT.OL>='' AND RATE.TABLE<59,FLAT.OL>='' AND RATE.TABLE<60,FLAT.OL>='' THEN     ; * JMK05
      CALL ELINE("You must enter some amount in one of the Charge Fields!!!")    ; * JMK05
      GOTO FWC.EDIT.3                    ; * JMK05
   END
   CRT @(70,6+FLAT.IL) : OCONV(RATE.TABLE<60,FLAT.OL>,"MR2") "R#9"
**************************************************
FWC.EDIT.99:* End of Flat weight charge entry.
**************************************************
   RETURN
***************************************************
UPDATE.LOG:
****************************************************
   IF ORIG.RATE.TABLE # RATE.TABLE THEN
      SYS.TME = TIME()
      PROC.DTE =DATE()
      VIN=""
      VOUT=""
      VIN<1> = PROC.DTE
      VIN<2> = SYS.TME
      VIN<6> = USER
****VIN<7> = CLIENT.ID:",":DIV.ID
      VIN<10> = CH.NUM
      VIN<8> = "FB.LTL.SETUP.TABLE"
      VIN<11> = "FBAT":"*":CLIENT.ID:"*":CARRIER.ID:"*":TABLE.NUM
      ATT.CNT = DCOUNT(RATE.TABLE,@AM)
      FOR I = 1 TO ATT.CNT
         IF I GE 44 AND I LE 48 THEN
            CONTINUE
         END
         IF RATE.TABLE<I> # ORIG.RATE.TABLE<I> THEN
            VIN<3> = I
            IF DCOUNT(ORIG.RATE.TABLE<I>,@VM) GT 1 THEN
               TMP = ORIG.RATE.TABLE<I>
               CONVERT @VM TO @SVM IN TMP
               VIN<4> = TMP
            END ELSE
               VIN<4> = ORIG.RATE.TABLE<I>
            END
            IF DCOUNT(ORIG.RATE.TABLE<I>,@VM) GT 1 THEN
               TMP = RATE.TABLE<I>
               CONVERT @VM TO @SVM IN TMP
               VIN<5> = TMP
            END ELSE
               VIN<5> = RATE.TABLE<I>
            END
            CALL UPD.AUD.LOG(VIN,VOUT)

         END
      NEXT I
   END
   * SOURCE.FILE = VIN<9>
   RETURN
