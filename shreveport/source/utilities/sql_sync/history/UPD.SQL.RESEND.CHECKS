***********************************************************************
* Program name :  UPD.SQL.CHECKS
* Author       :  Greg Bino
* Date written :  04/20/16
* Library      : FBBP
$* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* This program sends checks to SQL database
*
* Last updated by afs (gbino) at 07:33:13 on 04/22/2016.
*
* Start modification history
* Mod nn  mm/dd/yy, init, req #, description
* End modification history
*
************************************************************************
* Include the ODBC definitions
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.USER(USER)
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)
      SVR.NAME=SVR.VOUT<1>
      form = "T##########"
      dash = "----------"
      Expect = ""
      NULL=""
      EOL=CHAR(13):CHAR(10)
      TOT.DIV=0
      TOT.CV=0
      ERRORS=''


      MODE='B'
      ACTION='A'
      DIM CHECK.REC(50),CHECK.DTL.REC(10),BILL.REC(300)
      MAT CHECK.REC = "" ; MAT CHECK.DTL.REC='' ; MAT BILL.REC = ''

      GOSUB SETUP.SQL
      GOSUB SET.IT
*****
      OPEN '','FB.CHECKS.HDR' TO F.CK.HDR ELSE ABORT 201,'FB.CHECKS.HDR'
      OPEN '','FB.CHECKS.DTL' TO F.CK.DTL ELSE ABORT 201,'FB.CHECKS.DTL'
      OPEN '','CHECK.PRO.XREF.2018' TO F.CK.2020 ELSE ABORT 201,'FB.CHECKS.HDR'
      OPEN 'GRB' TO F.GRB ELSE ABORT 201,'GRB'

      CRT @(0,0):@(-1):@(0,3):'UPD.SQL.CHECKS - Processing Checks for ':OCONV(DATE(),'D2/')

      CHECK.EOF=0
      CHECK.CNT=0
      CHECK.PER=0
      DTL.PER=0

      STMT = 'GET-LIST RESEND.CHECKS'

      EXECUTE STMT CAPTURING STUFF RETURNING JUNK

      IF @SELECTED LT 1 THEN GO THE.END
      LOOP
         READNEXT ID ELSE CHECK.EOF=1
      UNTIL CHECK.EOF DO
         CHECK.CNT+=1
         IF NOT(REM(CHECK.CNT,10)) THEN
            CRT @(10,10):CHECK.CNT
         END
         READ REC FROM F.CK.2020,ID THEN

           ** DEBUG
            PRV.CLIENT.ID=''

            CLEAR.DATE=CHECK.REC(5)

            CLIENT.ID = FIELD(ID,"*",1)
            IF REC<4> # "" THEN
               BILL.ID = REC<4>
               BILL.ID = FIELD(BILL.ID,"*",2,2)
            END ELSE

               BILL.ID = FIELD(ID,"*",2,2)
            END
            PRO = FIELD(BILL.ID,"*",2,2)
            BILL.ID = BILL.ID:"*":0
            CARRIER.ID = FIELD(ID,"*",2)
            OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.HIST ELSE CONTINUE

            MATREAD BILL.REC FROM F.HIST,BILL.ID THEN

               IF BILL.REC(37)='' THEN
                  ERRORS<-1>='Missing Process Date for ':BILL.ID
****                           RETURN TO THE.END
               END
               PROC.DT=BILL.REC(37)'D4/'
               SQL.UNIQUEKEY=CLIENT.ID:CARRIER.ID:PRO:PROC.DT[7,4]:PROC.DT[1,2]:PROC.DT[4,2]
               SQL.CARRIERNO=CARRIER.ID+0
               SQL.INVNO=TRIM(BILL.REC(94))[1,50]
               SQL.CHECKNO=BILL.REC(14)
               SQL.CHECKAMT=BILL.REC(13)'R26'
               SQL.CHECKDATE=BILL.REC(15)'D2/'
               SQL.AUDITOR=BILL.REC(89)[1,50]
               SQL.DISCOUNTCOMMISSION=BILL.REC(42)'R26'
               SQL.OVERCHRGCOMMISSION=BILL.REC(43)'R26'
               SQL.CONSULTINGCOMMISSION=BILL.REC(44)'R26'
               SQL.DISCOUNTVARIANCE=BILL.REC(10)'R26'
               SQL.OVERCHRGVARIANCE=BILL.REC(11)'R26'
               SQL.CONSULTINGVARIANCE=BILL.REC(12)'R26'
               SQL.BALDUEDISCOUNT=BILL.REC(34)'R26'
               SQL.BALDUEOVERCHRG=BILL.REC(35)'R26'
               SQL.BALDUECONSULTING=BILL.REC(36)'R26'
               SQL.CUTBACKCODE=BILL.REC(41)[1,50]
               SQL.PRONO=PRO[1,50]
               SQL.CARRIERCHRG=BILL.REC(7)'R26'
               SQL.ACTUALCHRG=BILL.REC(8)'R26'
               SQL.APPROVEDCARRIERNO=''
               IF BILL.REC(69)#'' THEN
                  SQL.APPROVEDCARRIERNO=BILL.REC(69)+0
               END
               SQL.MISROUTEAMT=''
               IF BILL.REC(63)+0#0 THEN
                  SQL.MISROUTEAMT=BILL.REC(63)'R26'
               END
               SQL.LCCID=''
               SQL.LCCAMT=''
               IF BILL.REC(147)#'' THEN
                  SQL.LCCID=BILL.REC(147)+0
                  SQL.LCCAMT=BILL.REC(143)'R26'
               END
               SQL.FUNDSCLEARED=''
               IF CLEAR.DATE#'' THEN
                  SQL.FUNDSCLEARED=CLEAR.DATE'D2/'
               END
               *****CALL UPD.SQL.FBPYMT.SUB(SQLVIN,SQLVOUT,BILL.REC)
               FN = "SQLExecute"
               STATUS = SQLEXECUTE(UPDPYMTENV)
               STMTENV=UPDPYMTENV
               GOSUB CKSTMTENV
                 WRITEV DATE() ON F.CK.2020,ID,20
            END

         END
       
         **     CHECK.REC(50) = DATE()
         **     MATWRITE CHECK.REC ON F.CK.HDR,CHECK.ID
         *  (())     RELEASE F.CK.HDR,CHECK.ID
         **   END

      REPEAT

****************************************************************
THE.END:
****************************************************************
*     End of program
*
* Now just clean up the environment and leave
*
      Fn = "SQLFreeStmt"
      STATUS = SQLFreeStmt(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      Fn = "SQLDisconnect"
      STATUS = SQLDisconnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeConnect"
      STATUS = SQLFreeConnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeEnv"
      STATUS = SQLFreeEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN STOPM "Failed to release ODBC environment"

      MVIN=''
      MVIN<1>='Dfriend@afs.net'
      MVIN<1,-1>='nmeddaugh@afs.net'
      MVIN<4>='AFS'
      MVIN<5>='SQL Sage check Load has finished!'

      MVIN<7>=1
      CALL SENDMAIL.NEW(MVIN,MVOUT)
      VIN1=""
      VIN1<1> = 'UPD.SQL.CHECKS'
      VIN1<2> = USER
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "E"
      WRITE ERRORS ON F.GRB,"CHECK.ERRORS"
      CALL PROGTRACK(VIN1,VOUT1)
      STOP
*****************************************************************
SET.IT:
****************************************************************
*
* Note that we are using parameter markers in the SQL statement to facilitate
* loading multiple rows of data efficiently
*
      OPT.STR = STR(' ?,',25)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdPayment (":OPT.STR:")}"           ; * 4 PLACEHOLDERS

      MROWNU = 0
      Fn = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT

      STATUS = SQLSETPARAM(UPDPYMTENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 2, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CARRIERNO) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 3, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.INVNO) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 4, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CHECKNO) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 5, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CHECKAMT) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 6, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CHECKDATE) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 7, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.AUDITOR) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 8, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.DISCOUNTCOMMISSION) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 9, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.OVERCHRGCOMMISSION) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 10, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONSULTINGCOMMISSION) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 11, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.DISCOUNTVARIANCE) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 12, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.OVERCHRGVARIANCE) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 13, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONSULTINGVARIANCE) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 14, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.BALDUEDISCOUNT) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 15, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.BALDUEOVERCHRG) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 16, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.BALDUECONSULTING) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 17, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CUTBACKCODE) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 18, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.PRONO) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 19, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CARRIERCHRG) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 20, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.ACTUALCHRG) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 21, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.APPROVEDCARRIERNO) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 22, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.MISROUTEAMT) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 23, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.LCCID) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 24, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.LCCAMT) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDPYMTENV, 25, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FUNDSCLEARED) ; STMTENV=UPDPYMTENV ; GOSUB CKSTMTENV

      Fn = "SQLPrepare"
      STATUS = SQLPrepare(UPDPYMTENV, INST1)
      STMTENV=UPDPYMTENV
      ENVSRC='UPDPYMT'
      GOSUB CKSTMTENV


      RETURN

*****************************************************************
SETUP.SQL:*
*****************************************************************
* Create an ODBC environment & a connection environment. Use the
* SSQLSetConnectOption to specify the Operating system user ID and
* password.

      STATUS = SQLAllocEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN STOP "Failed to allocate an ODBC environment"

      STATUS = SQLAllocConnect(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN STOP "Failed to allocate a CONNECT environment"
*
* Gather the data source name, userid and password for the server O/S and
* information for the DBMS at the server. The DBMS info is often also
* a user name and password, but not in all cases.
*
      BEGIN CASE
         CASE SVR.NAME='AFS'
            SOURCE='PRODODS'
            UID="uv_sql"
            PWD="4@gAbreg"
         CASE 1
            SOURCE='DEVODS'
            UID="uv_sql"
            PWD="4@gAbreg"
      END CASE
*
* Establish a session to the specified data source
*
      PRINT "Connecting to data source: ": SOURCE
      Fn = "SQLConnect"
      STATUS = SQLConnect(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV
*
* Now allocate an SQL statement environment
* to be used for executing SQL statements
*
      Fn = "SQLAllocStmt"
      STATUS = SQLAllocStmt(CONENV,UPDPYMTENV)
      GOSUB CKCONENV

      RETURN
*****************************************************************
CKCONENV:
*****************************************************************
      COUNT = -1
      IF STATUS EQ -2 THEN CRT "INVALID CONNECTION HANDLE" ; RETURN TO THE.END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               CRT "Allowed error of ":STATE:" returned for func ":Fn
               GOTO 299
            END ELSE
               CRT "Status for ":Fn:" call is: ":STATUS
               CRT "SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               CRT "Error text is"
               CRT "    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            CRT "EXITING CKCONENV" ; RETURN TO THE.END
         END
      END
299:*
      RETURN
*****************************************************************
CKSTMTENV:
*****************************************************************
      IF STATUS EQ -2 THEN
         CRT "INVALID STATEMENT HANDLE" ; RETURN TO THE.END
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               CRT "Allowed error of ":STATE:" returned for func ":Fn
               GOTO 399
            END ELSE
               CRT "Status for ":Fn:" call is: ":STATUS
               CRT "SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               CRT "Error text is"
               CRT "    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            CRT "EXITING CKSTMTENV" ; RETURN TO THE.END
         END
      END
399:*
      RETURN
