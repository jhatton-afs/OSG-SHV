*******************************************************
* Program name : FB.14.2
* Author       : Unknown
* Date written : Unknown
* Library      : FBBP
* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* IMPORT.SCOTT.CHECKS
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 09:22:51 on 03/22/2019.
*
* Start modification history
* 113004 - JMK01 - REMOVE OWEN FROM AUTOMATED EMAILS
* 120104 - JMK02 - CHANGE WORKING DIRECTORY FROM USER TO STC
* 121504 - JMK03 - CHANGE BANK CODE VERIFY TO WARNING WHEN HISTORY
* 122104 - JMK04 - ADD CLIENT CARRIER INDEX FOR WEB ACCESS
* 032219 - NKH01 - ACCU-316 Modified CREATE-FILE file sizes
* End modification history
*
*******************************************************
*
* INITILIZE VARIABLES
*
      EQU TB TO CHAR(9)
      PROMPT ''
      ERRORS=''
      WARNINGS=''
      CARRIER.ARRAY=''
      CLIENT.ARRAY=''
      CRX.ARRAY=''
      CHK.ARRAY=''
      IMPORT.ID=''
      CALL GET.USER(USER)
      USER=OCONV(USER,'MCU')
      PROG.NAME='FB.14.2'
      PROG.DESC='SCOTT TRAFFIC IMPORT'
      PACK.NAME='FREIGHT BILLING'
      CALL AFS.SCR.HEAD(CO.ID, FILE.ID, '', PROG.NAME, PROG.DESC, PACK.NAME, CO.NAME, TIME.DATE, 1)
       UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.14.2' ; UPL.VOUT = ''                    ;* NPR_UPL 04/23/2010
       CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/23/2010
      TESTING=0
      AR.FLAG=0
      BEGIN CASE
         CASE USER='BRIAN' AND NOT(TESTING)
         CASE USER='KAREN' AND NOT(TESTING)
         CASE USER='MARY' AND NOT(TESTING)
         CASE USER='MKERBOW'
         CASE USER='MYRA' AND NOT(TESTING)
         CASE USER='OWEN' AND NOT(TESTING)
         CASE 1
            CALL ELINE('Unauthorized access.  Contact Owen or Mike.')
            STOP
      END CASE
      HDG.ARRAY=''
      HDG.ARRAY<1,1>='comp'
      HDG.ARRAY<1,2>='bch'
      HDG.ARRAY<1,3>='seq'
      HDG.ARRAY<1,4>='scac'
      HDG.ARRAY<1,5>='carrier'
      HDG.ARRAY<1,6>='pro date'
      HDG.ARRAY<1,7>='pro'
      HDG.ARRAY<1,8>='b/l'
      HDG.ARRAY<1,9>='wgt'
      HDG.ARRAY<1,10>='as wgt'
      HDG.ARRAY<1,11>=' charged '
      HDG.ARRAY<1,12>=' discount '
      HDG.ARRAY<1,13>=' paid '
      HDG.ARRAY<1,14>='acct'
      HDG.ARRAY<1,15>='type'
      HDG.ARRAY<1,16>='chkno'
      HDG.ARRAY<1,17>='ck date'
      HDG.ARRAY<1,18>='due date'
      HDG.ARRAY<1,19>='mode'
      HDG.ARRAY<1,20>='terms'
      HDG.ARRAY<1,21>='shpr'
      HDG.ARRAY<1,22>='city'
      HDG.ARRAY<1,23>='st'
      HDG.ARRAY<1,24>='zip'
      HDG.ARRAY<1,25>='cnsgn'
      HDG.ARRAY<1,26>='city'
      HDG.ARRAY<1,27>='st'
      HDG.ARRAY<1,28>='zip'
      HDG.ARRAY<1,29>='cust / vend'
      HDG.ARRAY<1,30>='xref'
      HDG.ARRAY<1,31>='ctn'
      HDG.ARRAY<1,32>='cmdty'
      HDG.ARRAY<1,33>='shpfile'
      HDG.ARRAY<1,34>='data'
      HDG.ARRAY<1,35>='class'
      HDG.ARRAY<1,36>=' ded amt '
      HDG.ARRAY<1,37>='err typ'
      HDG.ARRAY<1,38>='rsn'
      HDG.ARRAY<1,39>=' fsc '
      HDG.ARRAY<1,40>='misc'
      HDG.ARRAY<1,41>='payee'
      HDG.ARRAY<1,42>='paynam'
*
* Open Files
*
      OPEN '','BILLDATA.STC' TO F.INFILE ELSE
         CALL OPEN.ABORT('BILLDATA.':USER,PROG.NAME)
      END
      OPEN '','FB.OPEN.BILLS' TO F.OPEN ELSE
         CALL OPEN.ABORT('FB.OPEN.BILLS',PROG.NAME)
      END
      OPEN '','FB.BILLS.CRX' TO F.CRX ELSE
         CALL OPEN.ABORT('FB.BILLS.CRX',PROG.NAME)
      END
      OPEN '','AR-BRIDGE' TO F.ARBRIDGE ELSE
         CALL OPEN.ABORT('AR-BRIGE',PROG.NAME)
      END
      OPEN '','SCOTT.SCAC.XREF' TO F.SCOTT.SCAC ELSE
         CALL OPEN.ABORT('SCOTT.SCAC.XREF',PROG.NAME)
      END
      OPEN '','SDX.CLIENTS,IMPORT' TO F.SCOTT.CLIENT ELSE
         CALL OPEN.ABORT('SDX.CLIENTS,IMPORT',PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END
      OPEN '','SCOTT.UNPROCESS' TO F.UNPROCESS ELSE
         CALL OPEN.ABORT('SCOTT.UNPROCESS',PROG.NAME)
      END
      OPEN '','BCTRL' TO F.BCTRL ELSE
         CALL OPEN.ABORT('BCTRL',PROG.NAME)
      END
      OPEN '','CLIENT.CARRIER.XREF' TO F.CLI.CAR.XREF ELSE   ; * JMK04
         CALL OPEN.ABORT('CLIENT.CARRIER.XREF',PROG.NAME)    ; * JMK04
      END                                ; * JMK04
      CLEARFILE F.UNPROCESS
      CHANGE.MODE=0
      TOT.AMT=''
      TOT.BILLS=''
      PROC.DATE=''
      TO.ADD=''
      CC.ADD=''
      BCC.ADD=''
      USER.ADD=''
      READ BCTRL.REC FROM F.BCTRL,USER ELSE BCTRL.REC=''
      USER.ADD=BCTRL.REC<20>
      TO.ADD='Accounting_List@afs.net'
*     CC.ADD<1,-1>='OHolman@afs.net'       ; * JMK01
****      CC.ADD<1,-1>='MKerbow@afs.net'
****      CC.ADD<1,-1>='MButts@afs.net'
      CC.ADD<1,-1>='MMcKay@afs.net'
*
10:* START MAIN PROCESS
*
      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
*
* Show setup instructions and screen
*
      CRT @(0,03):@(-3):
      CRT @(0,04):'Instructions for use BEFORE Continuing:'
      CRT @(0,05):'Step  1 Save the Scott Traffic check spreadsheet from email to disk'
      CRT @(0,06):'Step  2 Open Excel THEN Open the Spreadsheet with the Scott Traffic check info'
      CRT @(0,07):"Step  3 CLICK File, CLICK Save As, 'Change directory' to: (U:\STC\) Drive"
      CRT @(0,08):"Step  4 'Change Save as type:' to: Text (Tab Delimited)(.txt)"
      CRT @(0,09):'Step  5 Name the file "YYYYMMDD[D,H]SCOTT.CHECKS" in order to create AR'
      CRT @(0,10):'    ex. 20041102SCOTT.CHECKS for daily file for 11-02-04'
      CRT @(0,10):'    ex. 20041102HSCOTT.CHECKS for HBD file for 11-02-04'
      CRT @(0,12):'        Any name without "checks" embedded will produce historical bills only.'
      CRT @(0,13):"        Ignore the 'Not Compatible' messages you receive and click OK, then YES"
      CRT @(0,14):'01) Total number of bills : '
      CRT @(0,15):'02) Total amount paid     : '
      CRT @(0,16):'03) Import file name      : '
      CRT @(0,17):'04) Process date          : '
*
100:* Enter the total number of bills for this import
*
      IF TOT.BILLS#'' THEN
         MASK=TOT.BILLS'R#6'
      END ELSE
         MASK='######'
      END
      HELP='Enter total number of bills. [EX]=Exit'
      CALL GEN.IN(0,14,'01) Total number of bills : ':MASK,'AMT0',Q,0,6,'','',2,28,14,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE TOT.BILLS#'' & QI=''
            Q=TOT.BILLS
         CASE QI='X'
            GOTO 100
         CASE QI='EX'
            STOP
         CASE QI=''
            NULL
      END CASE
      TOT.BILLS=Q
      CRT @(28,14):TOT.BILLS'R#6':@(-4)
      IF CHANGE.MODE THEN RETURN
*
200:* Enter the total amount paid for this import
*
      IF TOT.AMT#'' THEN
         MASK=TOT.AMT'R26,'
      END ELSE
         MASK='##########'
      END
      HELP='Enter total amount to pay. [X]=Back [EX]=Exit'
      CALL GEN.IN(0,15,'02) Total amount paid     : ':MASK,'AMT2',Q,0,10,'','',2,28,15,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE TOT.AMT#'' & QI=''
            Q=TOT.AMT
         CASE QI='X'
            GOTO 100
         CASE QI='EX'
            STOP
         CASE QI=''
            NULL
      END CASE
      TOT.AMT=Q
      CRT @(28,15):TOT.AMT'R26,':@(-4)
      IF CHANGE.MODE THEN RETURN
*
300:* Enter the import file name
*
      IF IMPORT.ID#'' THEN
         MASK=IMPORT.ID
      END ELSE
         MASK=''
      END
      HELP='Enter the import file ID. [EX]=Exit'
      CALL GEN.IN(0,16,'03) Import file name      : ':MASK,'',Q,0,40,'','',2,28,16,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE IMPORT.ID#'' & QI=''
            Q=IMPORT.ID
         CASE QI='X'
            GOTO 200
         CASE QI='EX'
            STOP
         CASE QI=''
            NULL
      END CASE
      READ TEST FROM F.INFILE,QI ELSE
         CALL ELINE(QI:' not on file.  Please try again.')
         GO 300
      END
      IMPORT.ID=Q
      SCT.FLG=IMPORT.ID[9,1]
      CRT @(28,16):IMPORT.ID:@(-4)
      IF CHANGE.MODE THEN RETURN
*
400:* Enter Process Date for Dietrich
*
      IF PROC.DATE#'' THEN
         MASK=PROC.DATE'D2/'
      END ELSE
         IF IMPORT.ID[1,8] MATCHES '8N' THEN
            MASK=IMPORT.ID[5,2]:'/':IMPORT.ID[7,2]:'/':IMPORT.ID[1,4]
         END ELSE
            MASK=DATE()'D2/'
         END
      END
      HELP='Enter process date. [X]=Back [EX]=Exit'
      CALL GEN.IN(0,17,'04) Process date          : ':MASK,'DATE',Q,0,10,'','',2,28,17,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE PROC.DATE#'' & QI=''
            Q=PROC.DATE
         CASE QI='X'
            GOTO 300
         CASE QI='EX'
            STOP
         CASE QI=''
            Q=ICONV(MASK,'D')
      END CASE
      PROC.DATE=Q
      CRT @(28,17):PROC.DATE'D2/':@(-4)
      IF CHANGE.MODE THEN RETURN
*
500:* Choose to change or continue
*
      CHANGE.MODE=1
      HELP='Enter Option 1-4, [Y]=Continue, [X]=Back, [EX]=Exit'
      CALL GEN.IN(0,22,'Is the information correct? ','',ACK,0,2,'','',1,28,22,0,QI,HELP,0,23)
      ACK=OCONV(ACK,'MCU')
      BEGIN CASE
         CASE ACK='X'
            GOSUB 300
         CASE ACK='EX'
            STOP
         CASE ACK=1
            GOSUB 100
         CASE ACK=2
            GOSUB 200
         CASE ACK=3
            GOSUB 300
         CASE ACK=4
            GOSUB 400
         CASE ACK='Y'
            GO 1000
         CASE 1
            GO 500
      END CASE
      GO 500
*
1000:* Continue processing
*
      READ INREC FROM F.INFILE,IMPORT.ID ELSE STOP
      IF INDEX(IMPORT.ID,'CHECKS',1) THEN AR.FLAG=1
      INREC=CHANGE(INREC,TB,@VM)
      ORG.INREC=INREC
      NATT=DCOUNT(INREC,@AM)
      LINE.TST=TRIM(INREC<NATT,1>)
      IF LINE.TST=CHAR(26) THEN
         DEL INREC<NATT>
         NATT=DCOUNT(INREC,@AM)
      END
      CRT
      CRT 'Verifying Import File ':IMPORT.ID
      CRT
      VERIFY.NUM=NATT-1
      VERIFY.AMT=0
      PER=''
*
* Verify headings to confirm same column positions
*
      INLINE=INREC<1>
      NVAL=DCOUNT(INLINE<1>,@VM)
      FOR VAL=1 TO NVAL
         IF INLINE<1,VAL>#HDG.ARRAY<1,VAL> THEN
            IF AR.FLAG THEN
               IF PROC.DATE >= 13478 THEN
                  ERRORS<-1>='Possible column mismatch on column ':VAL
               END ELSE
                  WARNINGS<-1>='Possible column mismatch on column ':VAL
               END
            END ELSE
               WARNINGS<-1>='Possible column mismatch on column ':VAL
            END
         END
      NEXT VAL
      FOR ATT=2 TO NATT
         CALL PROG.BAR(22,ATT,NATT,PER)
         INLINE=INREC<ATT>
         GOSUB VERIFY.LINE
      NEXT ATT
      IF VERIFY.NUM#TOT.BILLS THEN
         ERRORS<-1>=TOT.BILLS:' does not balance to total number of bills on process file.'
      END
      IF VERIFY.AMT#TOT.AMT THEN
         ERRORS<-1>=TOT.AMT'R26,':' does not balance to total amount on process file.'
      END
      IF WARNINGS#'' THEN
         CRT @(0,3):@(-3):
         NWARN=DCOUNT(WARNINGS,@AM)
         FOR WARNCNT=1 TO NWARN
            CRT WARNINGS<WARNCNT>
         NEXT WARNCNT
         CALL ELINE('Please review warnings')
         WRITE WARNINGS ON F.UNPROCESS,'WARNINGS'
      END
      IF ERRORS#'' THEN
         CRT @(0,3):@(-3):
         NERRS=DCOUNT(ERRORS,@AM)
         FOR ERRCNT=1 TO NERRS
            CRT ERRORS<ERRCNT>
         NEXT ERRCNT
         CALL ELINE('Please correct errors and re-process')
         WRITE ERRORS ON F.UNPROCESS,'ERRORS'
         WRITE WARNINGS ON F.UNPROCESS,'WARNINGS'
         STOP
      END
      CRT @(0,22):@(-4):
      CALL ELINE('At the processing portion.')
      PER=''
      FOR ATT=2 TO NATT
         CALL PROG.BAR(22,ATT,NATT,PER)
         INLINE=INREC<ATT>
         GOSUB GET.IMPORT.FIELDS
         GOSUB GET.AFS.CARRIER
         GOSUB GET.AFS.CLIENT
         GOSUB WRITE.AFS.FILES
      NEXT ATT
      IF NOT(TESTING) AND AR.FLAG THEN
         EMAIL.OUT=''
         EMAIL.OUT<1>=TO.ADD
         EMAIL.OUT<2>=CC.ADD
         EMAIL.OUT<3>=BCC.ADD
         EMAIL.OUT<4>=USER.ADD
         EMAIL.OUT<6>='The Scott Import file above is ready for AR posting and Check processing.'
         BEGIN CASE
            CASE SCT.FLG='D'
               EMAIL.OUT<5,1>='Scott Import File (Dietrich) for ':PROC.DATE'D4/'
               EMAIL.OUT<6,2>='Please remember to use FP bank code "D" for this file.'
            CASE SCT.FLG='H'
               EMAIL.OUT<5,1>='Scott Import File (HBD) for ':PROC.DATE'D4/'
               EMAIL.OUT<6,2>='Please remember to use FP bank code "H" for this file.'
            CASE 1
               EMAIL.OUT<5,1>='Scott Import File for ':PROC.DATE'D4/'
               EMAIL.OUT<6,2>='Please remember to use FP bank code "S" for this file.'
         END CASE
         EVIN = EMAIL.OUT
         EVOUT = ''
         IF EMAIL.OUT<1>#'' THEN CALL SENDMAIL(EVIN,EVOUT)
      END
      CRT @(0,22):@(-4):
      CALL ELINE('Processing complete.')
      STOP
*
VERIFY.LINE:*
*
      GOSUB GET.IMPORT.FIELDS
*
* ACCUMULATE BALANCING TOTALS
*
      VERIFY.AMT+=IN.PAID
*
* CHECK FOR CARRIER
*
      IF IN.SCAC#'' THEN
         READ SCAC.NDX FROM F.SCOTT.SCAC,IN.SCAC ELSE
            ERRORS<-1>='Line ':ATT'R%5':', No Scott Traffic index for ':IN.SCAC:' carrier.'
         END
         CARRIER.ID=SCAC.NDX<1>
         READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE
            ERRORS<-1>='Line ':ATT'R%5':', AFS carrier ':CARRIER.ID:' not on file'
         END
         LOCATE(IN.SCAC,CARRIER.ARRAY,1;CARPOS;'AL') ELSE
            CARRIER.ARRAY=INSERT(CARRIER.ARRAY,1,CARPOS;IN.SCAC)
            CARRIER.ARRAY=INSERT(CARRIER.ARRAY,2,CARPOS;CARRIER.ID)
            CARRIER.ARRAY=INSERT(CARRIER.ARRAY,3,CARPOS;0)
            CARRIER.ARRAY=INSERT(CARRIER.ARRAY,4,CARPOS;'')
            CARRIER.ARRAY=INSERT(CARRIER.ARRAY,5,CARPOS;'')
         END
         CARRIER.ARRAY<3,CARPOS>+=IN.PAID
      END
*
* CHECK FOR CLIENT
*
      IF IN.COMP#'' THEN
         READ CLIENT.NDX FROM F.SCOTT.CLIENT,'SCT*':IN.COMP ELSE
            ERRORS<-1>='Line ':ATT'R%5':', No Scott Traffic index for ':IN.COMP:' client.'
         END
         CLIENT.ID=CLIENT.NDX<1>
         READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
            ERRORS<-1>='Line ':ATT'R%5':', AFS client ':CLIENT.ID:' not on file'
         END
         IF CLIENT.REC<81>#'F' AND CLIENT.REC<81>#'D' AND CLIENT.REC<81>#'H' THEN
            IF AR.FLAG THEN              ; * JMK03
               ERRORS<-1>='Line ':ATT'R%5':', AFS client ':CLIENT.ID:' has invalid FP bank code'
            END ELSE                     ; * JMK03
               IF CLIENT.REC<81>='' THEN           ; * JMK03
                  ERRORS<-1>='Line ':ATT'R%5':', AFS client ':CLIENT.ID:' has invalid FP bank code'
               END                       ; * JMK03
            END                          ; * JMK03
         END
         IF CLIENT.REC<92>#'00002' THEN
            ERRORS<-1>='Line ':ATT'R%5':', AFS client ':CLIENT.ID:' has invalid FP company code'
         END
         IF AR.FLAG THEN
            READ TEST FROM F.ARBRIDGE,CLIENT.ID THEN
               ERRORS<-1>='Line ':ATT'R%5':', AFS client ':CLIENT.ID:' has unposted previous AR'
            END
         END
         LOCATE(IN.COMP,CLIENT.ARRAY,1;CLIPOS;'AR') ELSE
            CLIENT.ARRAY=INSERT(CLIENT.ARRAY,1,CLIPOS;IN.COMP)
            CLIENT.ARRAY=INSERT(CLIENT.ARRAY,2,CLIPOS;CLIENT.ID)
         END
         CLIENT.ARRAY<3,CLIPOS>+=IN.PAID
      END
*
* CHECK FOR NEGATIVE PAID AMOUNTS
*
      IF IN.PAID < 0 THEN
         WARNINGS<-1>='Line ':ATT'r%5':', ':IN.PAID'R26':' is less than zero'
      END
*
* BUILD CHECK ARRAY
*
      LOCATE(IN.CHKNO,CHK.ARRAY,1;CPOS;'AR') THEN
         CHK.ARRAY<2,CPOS>+=IN.PAID
      END ELSE
         CHK.ARRAY=INSERT(CHK.ARRAY,1,CPOS;IN.CHKNO)
         CHK.ARRAY=INSERT(CHK.ARRAY,2,CPOS;IN.PAID)
      END
      RETURN
*
GET.IMPORT.FIELDS:*
*
      IN.COMP=INLINE<1,1>
      IN.BCH=INLINE<1,2>
      IN.SEQ=INLINE<1,3>
      IN.SCAC=INLINE<1,4>
      IN.CARRIER=INLINE<1,5>
      IN.PRODATE=INLINE<1,6>
      IN.PRO=INLINE<1,7>
      IN.BL=INLINE<1,8>
      IN.WGT=INLINE<1,9>
      IN.ASWGT=INLINE<1,10>
      IN.CHARGED=INLINE<1,11>
      IN.DISCOUNT=INLINE<1,12>
      IN.PAID=INLINE<1,13>
      IN.ACCT=INLINE<1,14>
      IN.TYPE=INLINE<1,15>
      IN.CHKNO=INLINE<1,16>
      IN.CKDATE=INLINE<1,17>
      IN.DUEDATE=INLINE<1,18>
      IN.MODE=INLINE<1,19>
      IN.TERMS=INLINE<1,20>
      IN.SHPR=INLINE<1,21>
      IN.SCITY=INLINE<1,22>
      IN.SST=INLINE<1,23>
      IN.SZIP=INLINE<1,24>
      IN.CNSGN=INLINE<1,25>
      IN.CCITY=INLINE<1,26>
      IN.CST=INLINE<1,27>
      IN.CZIP=INLINE<1,28>
      IN.CUSTVEND=INLINE<1,29>
      IN.XREF=INLINE<1,30>
      IN.CTN=INLINE<1,31>
      IN.CMDTY=INLINE<1,32>
      IN.SHPFILE=INLINE<1,33>
      IN.DATA=INLINE<1,34>
      IN.CLASS=INLINE<1,35>
      IN.DEDAMT=INLINE<1,36>
      IN.ERRTYP=INLINE<1,37>
      IN.RSN=INLINE<1,38>
      IN.FSC=INLINE<1,39>
      IN.MISC=INLINE<1,40>
      IN.PAYEE=INLINE<1,41>
      IN.PAYNAM=INLINE<1,42>
*
* CONVERT IMPORT FIELDS FOR HANDLING
*
      IN.COMP=CHANGE(IN.COMP,"'","")
      IN.COMP=TRIM(IN.COMP)
      IN.PRODATE=ICONV(IN.PRODATE,'D')
      IN.OPRODATE=OCONV(IN.PRODATE,'D4/')
      ARGIN=IN.WGT
      GOSUB CHG.NUMBER
      IN.WGT=RESULT
      ARGIN=IN.ASWGT
      GOSUB CHG.NUMBER
      IN.ASWGT=RESULT
      ARGIN=IN.CHARGED
      GOSUB CHG.CURRENCY
      IN.CHARGED=RESULT
      ARGIN=IN.PAID
      GOSUB CHG.CURRENCY
      IN.PAID=RESULT
      IN.CKDATE=ICONV(IN.CKDATE[5,2]:'/':IN.CKDATE[7,2]:'/':IN.CKDATE[1,4],'D')
      IN.DUEDATE=ICONV(IN.DUEDATE,'D')
      IN.DEDAMT=CHANGE(IN.DEDAMT,' ','')
      IN.DEDAMT=ICONV(IN.DEDAMT,'MR2')
      RETURN
*
GET.AFS.CARRIER:*
*
      LOCATE(IN.SCAC,CARRIER.ARRAY,1;CARPOS) THEN
         CARRIER.ID=CARRIER.ARRAY<2,CARPOS>
      END
      IF CARRIER.ID='00015' OR CARRIER.ID='01075' THEN
         IF IN.PAYEE='FDXCMR' THEN
            CARRIER.ID='14987'
         END
      END
      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID THEN NULL ELSE NULL
      RETURN
*
GET.AFS.CLIENT:*
*
      LOCATE(IN.COMP,CLIENT.ARRAY,1;CLIPOS) THEN
         CLIENT.ID=CLIENT.ARRAY<2,CLIPOS>
      END
      READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID THEN NULL ELSE NULL
      BANK.ID=CLIENT.REC<81>
      OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.HIST ELSE
         CALL OPEN.ABORT('FB.BILLS.HIST,':CLIENT.ID,PROG.NAME)
      END
      OPEN '','FB.OPEN.DATE.XREF,':CLIENT.ID TO F.FOX ELSE
         EXECUTE 'CREATE-FILE DATA FB.OPEN.DATE.XREF,':CLIENT.ID:' 23,2' CAPTURING OUTPUT    ; * NKH01
         OPEN '','FB.OPEN.DATE.XREF,':CLIENT.ID TO F.FOX ELSE
            CALL OPEN.ABORT('FB.OPEN.DATE.XREF,':CLIENT.ID,PROG.NAME)
         END
      END
      OPEN '','FB.AUDIT,':CLIENT.ID TO F.AUDIT THEN
         AUDIT = 1
      END ELSE
         AUDIT = 0
      END
      RETURN
*
WRITE.AFS.FILES:*
*
*
* CHECK FOR DUPLICATE BILLS
*
      VERSION=0
      AFS.PRO=IN.PRO
      IF CARRIER.ID='00041' THEN
         AFS.PRO=IN.PRO[5,3]:'-':IN.PRO[8,3]:OCONV(IN.OPRODATE,'MCN')
      END
      PRO.ID=CARRIER.ID:'*':AFS.PRO:'*':VERSION
      IF TESTING THEN
         READ TEST FROM F.UNPROCESS,'CRX*':PRO.ID ELSE TEST=''
      END ELSE
         READ TEST FROM F.CRX,PRO.ID ELSE TEST=''
      END
      IF TEST#'' THEN
         IF AR.FLAG=0 THEN GOTO BYPASS.AFS.FILES
         SEQ=0
         LOOP
            SEQ+=1
            PRO.SEQ=AFS.PRO:'/':SEQ
            PRO.ID=CARRIER.ID:'*':PRO.SEQ:'*0'
            READ TEST FROM F.UNPROCESS,'CRX*':PRO.ID ELSE TEST=''
         UNTIL TEST='' DO
         REPEAT
      END
*
* CREATE FB.BILLS.HIST
*
      PRO.REC=''
      PRO.REC<1>=IN.PRODATE
      PRO.REC<2>=IN.TERMS[1,1]
      IF CARRIER.ID='00041' OR CARRIER.ID='12810' OR CARRIER.ID='03042' THEN     ; * United Parcel Service
         PRO.REC<3>='99999'
         PRO.REC<4>='99999'
      END ELSE
         IF CARRIER.ID='01075' THEN      ; * FedEx Ground
            PRO.REC<3>='99999'
            PRO.REC<4>='99999'
         END ELSE
            PRO.REC<3>=IN.SZIP
            PRO.REC<4>=IN.CZIP
         END
      END
      PRO.REC<6>=IN.WGT
      PRO.REC<7>=IN.PAID+IN.DEDAMT
      PRO.REC<8>=IN.PAID
      PRO.REC<11>=0-IN.DEDAMT
      PRO.REC<16>=IN.BL
      PRO.REC<17>=IN.CUSTVEND
      PRO.REC<20>=CARRIER.ID
      CARRIER.MODE.WGT=CARRIER.REC<70>
      CARRIER.MODE.BY.WGT=CARRIER.REC<71>
      LOCATE PRO.REC<6> IN CARRIER.MODE.WGT<1> BY "AR" SETTING POS ELSE NULL
      T.MODE.BY.WGT=OCONV(CARRIER.MODE.BY.WGT<1,POS>,'MCU')
      PRO.REC<21>=T.MODE.BY.WGT
      IF CARRIER.ID='00041' OR CARRIER.ID='12810' OR CARRIER.ID='03042' THEN
         PRO.REC<25>='ZZ'
         PRO.REC<26>='ZZ'
         PRO.REC<27>='UPS'
         PRO.REC<28>='UPS'
      END ELSE
         IF CARRIER.ID='01075' THEN
            PRO.REC<25>='ZZ'
            PRO.REC<26>='ZZ'
            PRO.REC<27>='FedEx Ground'
            PRO.REC<28>='FedEx Ground'
         END ELSE
            PRO.REC<25>=IN.SST
            PRO.REC<26>=IN.CST
            PRO.REC<27>=IN.SCITY
            PRO.REC<28>=IN.CCITY
         END
      END
      VAR.CODE=''
      IF PRO.REC<10>+0#0 THEN VAR.CODE=VAR.CODE:'D'
      IF PRO.REC<11>+0#0 THEN VAR.CODE=VAR.CODE:'O'
      IF PRO.REC<12>+0#0 THEN VAR.CODE=VAR.CODE:'C'
      PRO.REC<29>=VAR.CODE
      PRO.REC<30>=IN.PRODATE
      IF AR.FLAG THEN
         PRO.REC<37>=PROC.DATE
      END ELSE
         PRO.REC<37>=IN.CKDATE
      END
      PRO.REC<38>=IN.DUEDATE
      PRO.REC<39>='O'
      PRO.REC<40>=BANK.ID
      PRO.REC<41,2>=IN.RSN
      IF PRO.REC<53>='' THEN PRO.REC<53>=USER
      PRO.REC<55>=LEN(PRO.REC)-LEN(USER)
      PRO.REC<68>=1
      PRO.REC<84,-1>=USER                ; * Update Each Time bill is Filed
      PRO.REC<85,-1>=TIME()              ; * Update Each Time bill is Filed
      PRO.REC<86,-1>=DATE()              ; * Update Each Time bill is Filed
      PRO.REC<74>=IN.CLASS
      PRO.REC<75>=IN.WGT
      PRO.REC<100>=IN.CUSTVEND
      IF PROC.DATE >= 13478 THEN
         PRO.REC<175>=IN.COMP
         PRO.REC<176>=IN.SCAC
         PRO.REC<177>=IN.PRO
         PRO.REC<178>=IN.CHKNO
         PRO.REC<179>=IN.CKDATE
      END
      IF AUDIT THEN
         READV CORE.CARRIER FROM F.AUDIT, CARRIER.ID, 13 ELSE
            CORE.CARRIER = 'N'
         END
      END ELSE
         CORE.CARRIER = 'N'
      END
      PRO.REC<197> = CORE.CARRIER

      WRITE PRO.REC ON F.UNPROCESS,'PRO*':PRO.ID
      IF NOT(TESTING) THEN
         WRITE PRO.REC ON F.HIST,PRO.ID
         READ DCLI.CAR.XREF FROM F.CLI.CAR.XREF,CLIENT.ID ELSE DCLI.CAR.XREF=''  ; * JMK04
         LOCATE CARRIER.ID IN DCLI.CAR.XREF BY 'AR' SETTING CCPOS ELSE           ; * JMK04
            INS CARRIER.ID BEFORE DCLI.CAR.XREF<CCPOS>       ; * JMK04
            WRITE DCLI.CAR.XREF ON F.CLI.CAR.XREF,CLIENT.ID  ; * JMK04
         END                             ; * JMK04
      END

      CLIENT.ARRAY<3,CLIPOS>=CLIENT.ARRAY<3,CLIPOS>+1

*
* CREATE FB.BILLS.CRX
*
      REC=''
      REC<1>=CLIENT.ID
      REC<2>=PRO.REC<1>
      REC<7>=PRO.REC<7>
      REC<8>=PRO.REC<8>
      REC<10>=PRO.REC<10>
      REC<11>=PRO.REC<11>
      REC<12>=PRO.REC<12>
      REC<30>=PRO.REC<30>
      REC<37>=PRO.REC<37>
      REC<41>=PRO.REC<41>
      REC<53>=PRO.REC<53>
      REC<54>=PRO.REC<54>
      REC<55>=PRO.REC<55>
      REC<63>=PRO.REC<63>
      IF CLIENT.ID[1,2]='99' ELSE
         WRITE REC ON F.UNPROCESS,'CRX*':PRO.ID
         IF NOT(TESTING) THEN
            WRITE REC ON F.CRX,PRO.ID
*NPR00 012510 CALL UPD.CRX.DF.FILE(PROG.NAME,"",PRO.ID,REC)
         END
      END
      IF AR.FLAG THEN
*
* CREATE FB.BILLS.OPEN
*
         WRITE PRO.REC ON F.UNPROCESS,'FO*':CLIENT.ID:'*':PRO.ID
         IF NOT(TESTING) THEN
            WRITE PRO.REC ON F.OPEN,CLIENT.ID:'*':PRO.ID
         END
      END
      IF AR.FLAG THEN
*
* CREATE FB.OPEN.DATE.XREF
*
         READ DFOX FROM F.UNPROCESS,'FOX*':CLIENT.ID:'*':PRO.REC<37> ELSE DFOX=''
         LOCATE CLIENT.ID:'*':PRO.ID IN DFOX SETTING POS THEN
            DEL DFOX<POS>
         END
         DFOX<-1>=CLIENT.ID:"*":PRO.ID
         WRITE DFOX ON F.UNPROCESS,'FOX*':CLIENT.ID:'*':PRO.REC<37>
         IF NOT(TESTING) THEN
            READ DFOX FROM F.FOX,PRO.REC<37> ELSE DFOX=''
            LOCATE CLIENT.ID:'*':PRO.ID IN DFOX SETTING POS THEN
               DEL DFOX<POS>
            END
            DFOX<-1>=CLIENT.ID:"*":PRO.ID
            WRITE DFOX ON F.FOX,PRO.REC<37>
         END
      END
      IF AR.FLAG THEN
*
* CREATE AR-BRIDGE
*
         READU BRIDGE.REC FROM F.UNPROCESS,'AR*':CLIENT.ID ELSE
            BRIDGE.REC=''
            BRIDGE.REC<1>='1001'
            BRIDGE.REC<4>=PRO.REC<37>
            BRIDGE.REC<15>=USER
            BRIDGE.REC<16>=DATE()
            BRIDGE.REC<17>=TIME()
         END
         BRIDGE.REC<2>=BRIDGE.REC<2>+1
         BRIDGE.REC<3>=BRIDGE.REC<3>+IN.PAID
         WRITE BRIDGE.REC ON F.UNPROCESS,'AR*':CLIENT.ID
         IF NOT(TESTING) THEN
            READU BRIDGE.REC FROM F.ARBRIDGE,CLIENT.ID ELSE
               BRIDGE.REC=''
               BRIDGE.REC<1>='1001'
               BRIDGE.REC<4>=PRO.REC<37>
               BRIDGE.REC<15>=USER
               BRIDGE.REC<16>=DATE()
               BRIDGE.REC<17>=TIME()
            END
            BRIDGE.REC<2>=BRIDGE.REC<2>+1
            BRIDGE.REC<3>=BRIDGE.REC<3>+IN.PAID
            WRITE BRIDGE.REC ON F.ARBRIDGE,CLIENT.ID
         END
      END
*
BYPASS.AFS.FILES:*
*
      RETURN
*
* CLEANUP DATA
*
*
CHG.NUMBER:*
*
      MINUS=1
      RESULT=CHANGE(ARGIN,'"','')
      IF INDEX(RESULT,'(',1) THEN
         RESULT=CHANGE(RESULT,'(','')
         RESULT=CHANGE(RESULT,')','')
         MINUS=-1
      END
*     RESULT=CHANGE(RESULT,"'","")
*     RESULT=CHANGE(RESULT,' ','')
*     RESULT=CHANGE(RESULT,',','')
      RESULT=ICONV(RESULT,'MR0,')
      RESULT=RESULT*MINUS
      RETURN
*
CHG.CURRENCY:*
*
      MINUS=1
      RESULT=CHANGE(ARGIN,'"','')
      IF INDEX(RESULT,'(',1) THEN
         RESULT=CHANGE(RESULT,'(','')
         RESULT=CHANGE(RESULT,')','')
         MINUS=-1
      END
      RESULT=CHANGE(RESULT,"'","")
      RESULT=CHANGE(RESULT,'$','')
      RESULT=CHANGE(RESULT,' ','')
      RESULT=CHANGE(RESULT,',','')
      RESULT=ICONV(RESULT,'MR2,$')
      RESULT=RESULT*MINUS
      RETURN
   END
