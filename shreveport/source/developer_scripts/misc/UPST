******************************************************************
* Program : REBUILD.UPSDTL
* Desc    : Rebuild UPSDTL from UPS EBILL
* Author  : Greg Bino
* Date    : 08/1/2017
* Copyright (c) 2016 by AFS Logistics, LLC. - All Rights Reserved
* Use UPS EBILL HIST file to build the UPSDTL file
*
*
* Last updated by afs (AFSLOGISTICS\tgorton) at 09:42:09 on 08/08/2017.
*
* Start modification history
* End modification history

*******************************************************************

$INCLUDE FILE.DEFS INC_ADDS60.CODES
$INCLUDE PROG.ADMIN INC_OPTIONS

* Initialize variables
      CMND=@SENTENCE                     ; * JMK19
      IF FIELD(CMND,' ',2)='BATCH' THEN  ; * JMK19
         AUTO=1                          ; * JMK19
      END ELSE                           ; * JMK19
         AUTO=0                          ; * JMK19
      END                                ; * JMK19
      PROMPT''

      CALL GET.USER.NEW(USER.NAME,CH.NUM)
      CO.NAME='AFS, LLC.'
      PROG.NAME='REBUILD.UPSDTL'
      PROG.DESC='Build UPSDTL using EBILL HIST file'
      PACK.NAME='Freight Payment'
      TAB=CHAR(9)
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'EBILL.IMPORT.NEW' ; UPL.VOUT = ''         ; * NPR_UPL 04/23/2010
      ******     CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010

      * Begin GRB01
      VIN1=""
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER.NAME
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "S"
      ******     CALL PROGTRACK(VIN1,VOUT1)
      * End GRB01
      ESC=CHAR(27)
      MIN.CHARGE=362
      MIN.CHARGE=380

      AFS.IS.ADDRESS = 'helpdesk@afs.net'          ; * JCW02 ; * JMK08
      AFS.PARCEL.ADDRESS = 'parcel@afs.net'        ; * JCW02    ; * GRB01
      TODAY.DOW=OCONV(DATE(),'DW')
      IF TODAY.DOW=7 THEN TODAY.DOW=0    ; * ADJUSTMENT FOR SUNDAY

      TERM.TYPE=SYSTEM(7)
      BEGIN CASE
         CASE TERM.TYPE='REGENT60'
            REV.NORMAL=TERM.ESC.SEQ:CHAR(TERM.REV+TERM.DIM)
            REV.HILITE=TERM.ESC.SEQ:CHAR(TERM.REV)
            REV.OFF=TERM.ESC.SEQ:CHAR(TERM.NORMAL)
         CASE 1
            REV.NORMAL=@(-13):@(-11)
            REV.HILITE=@(-13)
            REV.OFF=@(-12):@(-14)
      END CASE
      MASK.CHAR='-'
      PLACE.HOLDER='!@#$%^&*()'

      CARRIER.ID='00041'                 ; * UPS - This is the default carrier
      EBILL.FOLDER='U:\E-BILL'           ; * Folder where e-Bill files are placed to be imported
      EBILL.FILENAME=''                  ; * Filename of e-Bill file to import as comma separated values (CSV)
      EBILL.SAVE.FILENAME=''             ; * Filename of e-Bill file to save as tab-delimited (XLS)

      EBILL.IMPORT.NEW=''                ; * Original e-Bill file read in (CSV format)
      EBILL.ERROR=''
      EBILL=''                           ; * Converted form of e-Bill file in pick format
      EBILL.SAVE=''                      ; * Saved copy of EBILL for writing to archive directory

      SHIPPER.LIST=''                    ; * List of unique shipper numbers found
* <1>=shipper number <2>=client id <3>=division id
      SHIPPER.FOUND.LIST=''              ; * Shipper numbers found in cross-reference file
      SHIPPER.FOUND=0                    ; * Number of shipper numbers found in cross-reference
      SHIPPER.NOTFOUND.LIST=''           ; * Shipper numbers not found in cross-reference file
      SHIPPER.NOTFOUND=0                 ; * Number of shipper numbers not found in cross-reference

      UPS.SERVICE.DESCRIPTIONS=''        ; * List of service descriptions
      SERVICE.FOUND.LIST=''              ; * Service descriptions found in FB.TABLES item
      SERVICE.FOUND=0                    ; * Number of service descriptions found in FB.TABLES
      SERVICE.NOTFOUND.LIST=''           ; * Service descriptions not found in FB.TABLES item
      SERVICE.NOTFOUND=0                 ; * Number of service descriptions not found in FB.TABLES

      DATA.SCR.DA=''                     ; * Pick-list display variables
      HEADING.SCR.DA=''                  ; * The external subroutine POP.UP.LIST IN GEN.PROGS
      START.SCR.DA=0                     ; * pops up a screen list, but does not allow printing
      END.SCR.DA=0                       ; * This internal version allows printing
      DATA.PRT.DA=''
      HEADING1.PRT.DA=''
      HEADING2.PRT.DA=''

      SHIP.DATE.LIST=''                  ; * List of ship dates by shipper number

      BILL.REC=''
      GSR.AUDIT=''
*
* Accessorial Codes
*
      ACC.REC=''

      ACC.REC<39,1>='Declared Value'

      ACC.REC<39,2>=150
      ACC.REC<39,2>=180

      ACC.REC<39,3>=150
      ACC.REC<39,3>=180

      ACC.REC<40,1>='Saturday Charge Delivery'

      ACC.REC<40,2>=1250

      ACC.REC<40,3>=1250
      ACC.REC<41,1>='COD'

      ACC.REC<41,2>=900

      ACC.REC<41,3>=900
      ACC.REC<42,1>='Additional Handling'
      ACC.REC<42,2>=600
      ACC.REC<42,2>=650
      ACC.REC<42,3>=600
      ACC.REC<42,3>=650
      ACC.REC<43,1>='Hazardous Materials Surcharge Air/Ground'
      ACC.REC<43,2>=3000
      ACC.REC<43,3>=2000
      ACC.REC<44,1>='Early AM Surcharge'
      ACC.REC<44,2>=2850
      ACC.REC<44,3>=2850
      ACC.REC<45,1>='Delivery Confirmation Response'
      ACC.REC<45,2>=125
      ACC.REC<45,2>=150
      ACC.REC<45,3>=125
      ACC.REC<45,3>=150
      ACC.REC<46,1>='Saturday Charge Pickup'
      ACC.REC<46,2>=1250
      ACC.REC<46,3>=1250
      ACC.REC<47,1>='Call Tag'
      ACC.REC<47,2>=700
      ACC.REC<47,3>=700
      ACC.REC<48,1>='Extended Destination Surcharge'
      ACC.REC<48,2>=2000
      ACC.REC<48,3>=2000
      ACC.REC<49,1>='Missing/Invalid Account # Charge'
      ACC.REC<49,2>=1000
      ACC.REC<49,3>=1000
      ACC.REC<50,1>='Delivery Area Surcharge'
      ACC.REC<50,2>=140
      ACC.REC<50,2>=150
      ACC.REC<50,3>=220
      ACC.REC<50,3>=230
      ACC.REC<52,1>='Chargeback Surcharge'
      ACC.REC<52,2>=1000
      ACC.REC<52,3>=1000
      ACC.REC<53,1>='Pickup fee'
      ACC.REC<53,2>=400
      ACC.REC<53,3>=400
      ACC.REC<54,1>='Billing option'
      ACC.REC<54,2>=1500

      ACC.REC<54,3>=1500
      ACC.REC<56,1>='Split Duty Tax'
      ACC.REC<56,2>=1500
      ACC.REC<56,3>=1500

* Open files
* Where the .CSV e-Bill file is saved after being downloaded from UPS
* From here, it will read by EBILL.IMPORT.NEW
* This pick file is known under Windows as BILLDATA\E-BILL
      OPEN '','BILLDATA.EBILL.CM' TO F.BILLDATA.EBILL ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL',PROG.NAME)
      END
      OPEN '','BILLDATA.EBILL.HOLD' TO F.BILLDATA.EBILL.HOLD ELSE      ; * JMK13
         CALL OPEN.ABORT('BILLDATA.EBILL.HOLD',PROG.NAME)    ; * JMK13
      END                                ; * JMK13

* Where the .XLS e-Bill file is saved following importing for archival purposes
* This pick file is known under Windows as BILLDATA\E-BILL HIST
      OPEN '','BILLDATA.EBILL.HIST' TO F.BILLDATA.EBILL.HIST ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL.HIST',PROG.NAME)
      END
      OPEN '','BILLDATA.EBILL.LOGAMT' TO F.BILLDATA.EBILL.LOGAMT ELSE  ; * JMK13
         CALL OPEN.ABORT('BILLDATA.EBILL.LOGAMT',PROG.NAME)  ; * JMK13
      END                                ; * JMK13

* This is the location for the e-bill header line for output; * JMK01
      OPEN '','BILLDATA.FORMS' TO F.FORMS ELSE     ; * JMK01
         CALL OPEN.ABORT('BILLDATA.FORMS',PROG.NAME)         ; * JMK01
      END                                ; * JMK01

* Cross-reference for shipper numbers and AFS client/division numbers
      OPEN '','EDI.CAR.ACNT.XREF' TO F.XREF ELSE
         CALL OPEN.ABORT('EDI.CAR.ACNT.XREF',PROG.NAME)
      END

* Where the service descriptions for e-Bill file packages are stored
* under the ID "UPS.EBILL.SERVICE.DESCRIPTIONS"
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END


      OPEN '','UPS.SCHED' TO F.UPS.SCHED ELSE
         CALL OPEN.ABORT('UPS.SCHED',PROG.NAME)
      END

      OPEN '','UPS.SCHED.HIST' TO F.UPS.SCHED.HIST ELSE
         CALL OPEN.ABORT('UPS.SCHED.HIST',PROG.NAME)
      END
* Where old benchmarks are stored multivalued by service descriptions
* This is used to calculate the logistics variance
* It is also used as a work file to store net and incentive amounts between passes
* When used as a work file, the ID is SHIPPER_NUMBER*TEMP
* At the end of the program (at the THE.END label), all *TEMP items are deleted
      OPEN '','UPS.BM' TO F.UPS.BM ELSE
         CALL OPEN.ABORT('UPS.BM',PROG.NAME)
      END

* AFS clients
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END

* Carriers
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END

* Bills cross reference - other bills files are comma files and are opened when
* a client ID is available
      OPEN '','FB.BILLS.CRX' TO F.BILLS.CRX ELSE
         CALL OPEN.ABORT('FB.BILLS.CRX',PROG.NAME)
      END

* File used to track importing of UPS files.
      OPEN '','UPS.FILE.XREF' TO F.UPS.FILE.XREF ELSE        ; * JMK18
         CALL OPEN.ABORT('UPS.FILE.XREF',PROG.NAME)          ; * JMK18
      END                                ; * JMK18
* Transportation mode file used to read transportation mode names
      OPEN '','FB.TRANSPORT' TO F.TRANSPORT ELSE
         CALL OPEN.ABORT('FB.TRANSPORT',PROG.NAME)
      END

* Where client-division specific files are stored for inclusion in process emails
* They are picked up from here by FB.3.1.NEW after the account is processed
      OPEN '','UPSDATA' TO F.UPSDATA ELSE
         CALL OPEN.ABORT('F.UPSDATA',PROG.NAME)
      END

* Where the UPS GSR audit files are written to
* UPS.IN is the VOC name for the directory BILLDATA\UPS
      OPEN '','UPS.IN' TO F.UPS.IN ELSE
         CALL OPEN.ABORT('F.UPS.IN',PROG.NAME)
      END

* Write the GSR spreadsheet here before emailing
      OPEN '','EMAILDATA' TO F.EMAILDATA ELSE
         CALL OPEN.ABORT('EMAILDATA',PROG.NAME)
      END

* Where the GSR spreadsheet is written to if the email cannot be sent
* The user is notified if this is the case
      OPEN '','BILLDATA.':USER.NAME TO F.BILLDATA.USER ELSE
         CALL OPEN.ABORT('BILLDATA.':USER.NAME,PROG.NAME)
      END

* Work file used to hold bill records until it is certain that they can all
* be written
      WORK.FILE='FBWORK':CH.NUM
      OPEN '',WORK.FILE TO F.WORK ELSE
         EXECUTE 'CREATE-FILE ':WORK.FILE:' 1 1001' PASSLIST CAPTURING OUTPUT
         OPEN '',WORK.FILE TO F.WORK ELSE
            CALL OPEN.ABORT(WORK.FILE,PROG.NAME)
         END
      END
      CLEARFILE F.WORK                   ; * Clear any possible data in this file before using

      OPEN '','CC.DAYS' TO F.CCDAYS ELSE           ; * JMK36
         CALL OPEN.ABORT('CC.DAYS',PROG.NAME)      ; * JMK36
      END                                ; * JMK36

      OPEN '','FB.STATUS.UPDATE' TO F.STATUS.UPDATE ELSE     ; * JMK64
         CALL OPEN.ABORT('FB.CARRIER.PAYEE',PROG.NAME)       ; * JMK64
      END                                ; * JMK64
*************************************************************
* Show screen
      GOSUB DISPLAY.SCREEN

* Restrict program usage
      BEGIN CASE

         CASE USER.NAME='DAVID'
         CASE USER.NAME='GBINO'
         CASE USER.NAME='SV.UVAUTO'
         CASE 1
            TEMP='**  This is a restricted access application - Access Denied  **'
            CALL CENTER(TEMP,80)
            CRT @(0,12):TEMP
            CALL ELINE('')
            GOTO THE.END
      END CASE
      SKIP.COUNT=0
      SELECT.ALL=0

      IF AUTO THEN                       ; * JMK19
         SELECT.ALL=1                    ; * JMK19
* GET EBILL HEADER REC                   ; * JMK20
         READ HDR.REC FROM F.FORMS,'UPS_EBILL_HEADER.TXT' THEN         ; * JMK20
            EBILL.HDR=HDR.REC<1>         ; * JMK20
            CONVERT CHAR(9) TO @VM IN EBILL.HDR    ; * JMK20
         END                             ; * JMK20
         READ HDR.AG.REC FROM F.FORMS,'UPS_EBILL_HEADER_AIRGAS_SAP.TXT' THEN     ; * JMK77
            EBILL.AG.HDR=HDR.AG.REC<1>   ; * JMK77
            CONVERT CHAR(9) TO @VM IN EBILL.HDR    ; * JMK77
         END                             ; * JMK77
         CARRIER.ID='00041'              ; * JMK19
         READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID THEN
            CARRIER.NAME=CARRIER.REC<1>
            CARRIER.CITY=CARRIER.REC<3>
            CARRIER.STATE=CARRIER.REC<4>
            CARRIER.MODE=CARRIER.REC<44>
            CARRIER.DAYS=CARRIER.REC<23>           ; * JMKXXX
            CARRIER.DAYS.OVERRIDE=CARRIER.REC<94>  ; * JMKXXX
         END
         GO 200                          ; * JMK19
      END                                ; * JMK19

*************************************************************
100:  **** Get carrier
*************************************************************
      MASK=CARRIER.ID:STR(MASK.CHAR,5-LEN(CARRIER.ID)):@(-4)
      HELP='Enter carrier ID or letters for search. [EX]it'
      CALL GEN.IN(11,4,MASK,'',Q,0,20,'','',2,11,4,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='' AND CARRIER.ID THEN QI=CARRIER.ID
      BEGIN CASE
         CASE QI='EX'
            GOTO THE.END
         CASE NOT(QI MATCHES '0N')
            CALL SOUNDEX.DISPLAY(QI,'CARRIERS','SDX.CARRIER,NAME','1,3,4',ITEM.LIST)
            BEGIN CASE
               CASE ITEM.LIST=''
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
               CASE ITEM.LIST#''
                  IF NUM(ITEM.LIST<1,1>) THEN DATA ITEM.LIST<1,1>
            END CASE
            GOSUB DISPLAY.SCREEN
            GOTO 100
         CASE NUM(QI) AND QI#''
            QI=QI'R%5'
            READ CARRIER.REC FROM F.CARRIERS,QI THEN
               CARRIER.ID=QI
               CARRIER.NAME=CARRIER.REC<1>
               CARRIER.CITY=CARRIER.REC<3>
               CARRIER.STATE=CARRIER.REC<4>
               CARRIER.MODE=CARRIER.REC<44>
               CARRIER.DAYS=CARRIER.REC<23>        ; * JMKXXX
               CARRIER.DAYS.OVERRIDE=CARRIER.REC<94>         ; * JMKXXX
            END ELSE
               CALL ELINE('ERROR - Carrier ':QI:' is not a valid carrier.')
               GOTO 100
            END
         CASE 1
            GOTO 100
      END CASE
      GOSUB DISPLAY.DATA

* GET EBILL HEADER REC ; * JMK01
      READ HDR.REC FROM F.FORMS,'UPS_EBILL_HEADER.TXT' THEN  ; * JMK01
         EBILL.HDR=HDR.REC<1>            ; * JMK01
         CONVERT CHAR(9) TO @VM IN EBILL.HDR       ; * JMK01

      END                                ; * JMK01
      READ HDR.AG.REC FROM F.FORMS,'UPS_EBILL_HEADER_AIRGAS_SAP.TXT' THEN        ; * JMK77
         EBILL.AG.HDR=HDR.AG.REC<1>      ; * JMK77
         CONVERT CHAR(9) TO @VM IN EBILL.HDR       ; * JMK77
      END                                ; * JMK77
* Show e-Bill files in BILLDATA\E-BILL directory for the selected carrier
* and let user select one to import
*************************************************************
200:  ***
*************************************************************      CLEARDATA
****      EXECUTE 'SSELECT BILLDATA.EBILL.CM BY UPS.DOW' CAPTURING OUTPUT
CMD = 'SSELECT BILLDATA.EBILL.CM BY UPS.DOW' 
       EXECUTE CMD RTNLIST FILE.LIST
****      EXECUTE 'GET-LIST GB'
      NUM.FILES=@SELECTED

      IF NUM.FILES < 1 THEN              ; * JCW01
         IF AUTO=0 THEN                  ; * JMK19
            **    GOSUB FILENAME.SAVE.INSTRUCTIONS
         END                             ; * JMK19
         SELECT.ALL=0
         GOTO THE.END
      END
      FILENAME.LIST=''
      GBDONE=0
      LOOP
****         READNEXT FILENAME ELSE GBDONE=1
READNEXT FILENAME FROM FILE.LIST ELSE GBDONE=1
      UNTIL GBDONE=1

         F1=FIELD(FILENAME,'_',1)        ; * Plan number

         F2=FILENAME[12,999]
         F2=FIELD(FILENAME,'_',2,99)

         IF (LEN(F1)=10 OR LEN(F1)=11) AND (F2 MATCHES "2N'_'2N'_'4N'.XLS'") THEN
            **     FILENAME.LIST<-1>=FILENAME
         END ELSE
            CONTINUE
         END
         ******    REPEAT
         **    NUM.FILES=DCOUNT(FILENAME.LIST,@AM)
***         NUM.FILES = @SELECTED
         IF NUM.FILES=0 THEN
            IF AUTO=0 THEN               ; * JMK19
               **    GOSUB FILENAME.SAVE.INSTRUCTIONS
            END                          ; * JMK19
            SELECT.ALL=0
            GOTO THE.END
         END
         **   FOR X=1 TO NUM.FILES
         **      FILENAME.LIST<X>=SPACE(1):FILENAME.LIST<X>:SPACE(78-LEN(FILENAME.LIST<X>))
         **   NEXT X
         HEADING=' ':EBILL.FOLDER:'$(contains e-Bill files waiting to be imported) '
         HEADING=CHANGE(HEADING,'$',SPACE(80-LEN(HEADING)))
         IF SELECT.ALL THEN
            SELECTION=1                  ; * JMK13
            IF SELECTION > NUM.FILES THEN
               SELECT.ALL=0
               GOTO THE.END
            END
****            EBILL.FILENAME=''            ; * Filename of e-Bill file to import as comma separated values (CSV)
            EBILL.FILENAME = FILENAME
            EBILL.SAVE.FILENAME=''       ; * Filename of e-Bill file to save as tab-delimited (XLS)

            EBILL.IMPORT.NEW=''          ; * Original e-Bill file read in (CSV format) ; * JMK13
            EBILL.ERROR=''               ; * JMK13
            EBILL.WARNING=''
            EBILL=''                     ; * Converted form of e-Bill file in pick format
            EBILL.SAVE=''                ; * Saved copy of EBILL for writing to archive directory
            SHIPPER.LIST=''              ; * List of unique shipper numbers found
* <1>=shipper number <2>=client id <3>=division id
            SHIPPER.FOUND.LIST=''        ; * Shipper numbers found in cross-reference file
            SHIPPER.FOUND=0              ; * Number of shipper numbers found in cross-reference
            SHIPPER.NOTFOUND.LIST=''     ; * Shipper numbers not found in cross-reference file
            SHIPPER.NOTFOUND=0           ; * Number of shipper numbers not found in cross-reference

            UPS.SERVICE.DESCRIPTIONS=''  ; * List of service descriptions
            SERVICE.FOUND.LIST=''        ; * Service descriptions found in FB.TABLES item
            SERVICE.FOUND=0              ; * Number of service descriptions found in FB.TABLES
            SERVICE.NOTFOUND.LIST=''     ; * Service descriptions not found in FB.TABLES item
            SERVICE.NOTFOUND=0           ; * Number of service descriptions not found in FB.TABLES

            DATA.SCR.DA=''               ; * Pick-list display variables
            HEADING.SCR.DA=''            ; * The external subroutine POP.UP.LIST IN GEN.PROGS
            START.SCR.DA=0               ; * pops up a screen list, but does not allow printing
            END.SCR.DA=0                 ; * This internal version allows printing
            DATA.PRT.DA=''
            HEADING1.PRT.DA=''
            HEADING2.PRT.DA=''

            SHIP.DATE.LIST=''            ; * List of ship dates by shipper number

            BILL.REC=''
            INV.NUM=''                   ; * JMK09
            GSR.AUDIT=''
            CLEARFILE F.WORK             ; * Clear any possible data in this file before using
            DATA 'Y'
         END ELSE
            SELECTION=''
            CRT @(0,23):'Select an e-Bill file to import. [X]=Back [E]xit':@(-4):
            CALL POP.UP.LIST(FILENAME.LIST,HEADING,10,14,SELECTION)
         END
         BEGIN CASE
            CASE SELECTION='E'
               GOTO THE.END
            CASE SELECTION='X'
               GOTO 100
            CASE SELECTION='A'           ; * JMK13
            CASE 1
               **  EBILL.FILENAME=TRIM(FILENAME.LIST<SELECTION>)
               **   EBILL.SAVE.FILENAME=EBILL.FILENAME[1,LEN(EBILL.FILENAME)-3]:'XLS'
         END CASE
         GOSUB DISPLAY.DATA


*************************************************************
300:     **** Verify that user is ready to start
*************************************************************
         IF SELECT.ALL ELSE
            IF SELECTION='A' THEN        ; * JMK13
               LN='Are you ready to import ALL e-Bill files? '         ; * JMK13
            END ELSE                     ; * JMK13
               LN='Are you ready to import this e-Bill file? '
            END                          ; * JMK13
            MASK='N-'
            HELP='[Y]es [N]o [X]=Back [EX]it'
            CALL GEN.IN(0,20,LN:MASK,'',Q,0,2,'','',2,-2,20,1,QI,HELP,0,23)
            QI=OCONV(QI,'MCU')
            BEGIN CASE
               CASE QI='EX' OR QI='N' OR QI='' OR QI='0'
                  GOTO THE.END
               CASE QI='X'
                  GOTO 200
               CASE QI='Y' OR QI='1'
                  IF SELECTION='A' THEN
                     SELECT.ALL=1
                     SELECTION=1
                  END
                  NULL
               CASE 1
                  GOTO 300
            END CASE
         END

* Read in the existing CSV e-Bill file
         CRT @(0,8):@(-3):@(0,8):'Reading e-Bill file...':

* Begin GRB02
         ***    READ EBILL.IMPORT.NEW FROM F.BILLDATA.EBILL,EBILL.FILENAME ELSE
         ***       CRT @(0,20):EBILL.FOLDER:'\':EBILL.FILENAME:' not found.':@(-4)
         ***       GOTO THE.END
         ***   END
         CRT @(0,8):@(-3):@(0,8):'Preparing e-Bill file for importation and processing...':
         ******  EBILL.FILENAME = "00000612BI_07_29_2017 TEST.csv"
         OPENSEQ 'BILLDATA.EBILL.CM', EBILL.FILENAME TO INSEQ.FILE ELSE
            CRT "CANNOT OPEN BILLDATA.EBILL"
            GOTO THE.END
         END
         EBILL = ""
         EBILL.ORG=EBILL.IMPORT.NEW      ; * JMK13
         EBILL.ERROR<1,-1>=''            ; * JMK13
         EBILL.WARNING<1,-1>=''          ; * JMK13
         INSEQ.DONE1 = 0
         LINE.NUM=1
         LOOP
            READSEQ LINE FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
         UNTIL INSEQ.DONE1 DO
            * End GRB02
* Check for existence of data within the file
            IF DCOUNT(LINE,@AM)=0 THEN
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='No data found in e-Bill file ':EBILL.FILENAME:'.'     ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'No data found in e-Bill file ':EBILL.FILENAME:'.':@(-4)
               END                       ; * JMK13
               GOTO THE.END
            END
* Convert CSV format to pick format

            LINE.NUM+=1
            IF INDEX(LINE,'"',1) THEN
               FOUND.QUOTE=0
               NEW.LINE=''
               FOR X=1 TO LEN(LINE)
                  BEGIN CASE
                     CASE LINE[X,1]='"'
                        FOUND.QUOTE=NOT(FOUND.QUOTE)
                     CASE LINE[X,1]=','
                        IF FOUND.QUOTE THEN
                           NEW.LINE:=LINE[X,1]
                        END ELSE
                           NEW.LINE:=@VM
                        END
                     CASE 1
                        NEW.LINE:=LINE[X,1]
                  END CASE
               NEXT X
               IF FOUND.QUOTE THEN
                  IF SELECT.ALL THEN     ; * JMK13
                     EBILL.ERROR<1,-1>='Unmatched quote on line ':LINE.NUM:'.'   ; * JMK13
                     GOTO THE.END        ; * JMK13
                  END ELSE               ; * JMK13
                     CRT @(0,10):LINE
                     CRT @(0,20):'Unmatched quote on line ':LINE.NUM:'.'
                     CRT @(0,21):'Select:':@(-4)
                     HELP='[C]ontinue and ignore extra quote [EX]it and fix'
                     MASK='----'
FQ1:                 CALL GEN.IN(8,21,MASK,'',Q,0,4,'','',2,8,21,1,QI,HELP,0,23)
                     QI=OCONV(QI,'MCU')
                     BEGIN CASE
                        CASE QI='EX' OR QI='EXIT'
                           GOTO THE.END
                        CASE QI#'C'
                           GOTO FQ1
                     END CASE
                     CRT @(0,10):@(-3)
                  END                    ; * JMK13
               END
               LINE=NEW.LINE
            END ELSE
****            LINE=CHANGE(LINE,',',@VM)
               LINE = CHANGE(LINE,CHAR(9),@VM)
            END
* Trim potential spaces off
            LINE=TRIM(LINE)
            LOOP WHILE INDEX(LINE,' ':@VM,1)
               LINE=CHANGE(LINE,' ':@VM,@VM)
            REPEAT
            LOOP WHILE INDEX(LINE,@VM:' ',1)
               LINE=CHANGE(LINE,@VM:' ',@VM)
            REPEAT


            EBILL<-1>=LINE



            **** DEL EBILL.IMPORT.NEW<1>    ; * GRB02
            *WRITESEQ EBILL ???

         REPEAT
         CLOSESEQ INSEQ.FILE             ; * GRB02
* Check for good format in first row since this has been a problem recently
* If bad format, give a warning, delete that first row and continue
         IF SELECT.ALL ELSE
            IF EBILL<1,3>='' AND EBILL<1,4>='' AND EBILL<1,5>='' THEN
               CRT @(0,20):'Warning: First row of e-Bill data file is not in proper format.':@(-4)
               CRT @(0,21):'...Deleting first row of the file before continuing...':@(-4)
               CALL ELINE('')
               DEL EBILL<1>
               LINE.NUM-=1
            END
         END
         CRT @(50,6):@(-4):'(Total Lines = ':LINE.NUM:')'

* Save a copy of the raw e-Bill file in tab-delimited pick format for archiving in
* BILLDATA\E-BILL HIST folder (pick name in VOC is BILLDATA.EBILL.HIST)
         EBILL.SAVE=EBILL
         NUM.PACKAGES=DCOUNT(EBILL,@AM)  ; * Number of shipments shipped=number of rows of file


*************************************************************
* Read service description table
*************************************************************
         READ UPS.SERVICE.DESCRIPTIONS FROM F.TABLES,'UPS.EBILL.SERVICE.DESCRIPTIONS' ELSE UPS.SERVICE.DESCRIPTIONS=''
         IF SELECT.ALL=1 THEN            ; * JMK19
            IF UPS.SERVICE.DESCRIPTIONS<1,1>='' THEN         ; * JMK19
               DEL UPS.SERVICE.DESCRIPTIONS<1,1>   ; * JMK19
            END                          ; * JMK50
            IF UPS.SERVICE.DESCRIPTIONS<1,1>='(ROLL-UP)' THEN          ; * JMK50
               DEL UPS.SERVICE.DESCRIPTIONS<1,1>   ; * JMK50
            END                          ; * JMK50
         END                             ; * JMK19

*********************************************************************************************
PASS1:***Update list of service descriptions in FB.TABLES with contents of actual e-Bill file
*********************************************************************************************
         PASS.NUMBER=1
         CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Updating Service Description table in FB.TABLES...':
         NEED.TO.UPDATE=0
         FOR X=1 TO NUM.PACKAGES
            SERVICE.DESCRIPTION=OCONV(EBILL<X,21>,'MCU')
            LOCATE SERVICE.DESCRIPTION IN UPS.SERVICE.DESCRIPTIONS<1> BY 'AL' SETTING POS ELSE
               INS SERVICE.DESCRIPTION BEFORE UPS.SERVICE.DESCRIPTIONS<1,POS>
               NEED.TO.UPDATE=1
            END
         NEXT X
         IF NEED.TO.UPDATE THEN
            WRITE UPS.SERVICE.DESCRIPTIONS ON F.TABLES,'UPS.EBILL.SERVICE.DESCRIPTIONS'
         END
         NUM.SD=DCOUNT(UPS.SERVICE.DESCRIPTIONS<1>,@VM)

*   Build an array of unique shipper numbers and their corresponding clients/divisions
*   Build lists of shipper numbers found and not found for display
*   Build lists of service descriptions found and not found for display
*********************************************************************************************
PASS2:***
*********************************************************************************************
         NUM.SD=DCOUNT(UPS.SERVICE.DESCRIPTIONS<1>,@VM)
         PASS.NUMBER=2
         PLAN.AMOUNT=0
         READ DUPSBILL.CODES FROM F.TABLES,'UPSBILL.CODES' ELSE
            IF SELECT.ALL THEN           ; * JMK13
               EBILL.ERROR<1,-1>='Cannot locate the UPSBILL.CODES in the FB.TABLES'        ; * JMK13
            END ELSE                     ; * JMK13
               CALL ELINE('Cannot locate the UPSBILL.CODES in the FB.TABLES')
            END
            GOTO THE.END
         END
         CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Checking Shipper Numbers and Service Descriptions...':
****      CRT @(5,10):'Shipper Number      :'
****      CRT @(5,11):'Service Description :'
         SPECIAL.REXEL.EMAIL=1

         ********* LOOPING AGAIN

         FOR X=1 TO NUM.PACKAGES         ; * ENDS AROUND     1003
            BEGIN CASE
               CASE CARRIER.ID='00041'
* e-bill format allows 10 digits, but only use last 6 for UPS
                  IF LEN(EBILL<X,3>)=10 THEN
                     SHIPPER.NUMBER=EBILL<X,3>[5,6]
                  END ELSE

                     SHIPPER.NUMBER=EBILL<X,3>'R%6'
                  END
                  IF SPECIAL.REXEL.EMAIL THEN
                     IF SHIPPER.NUMBER='6949X8' THEN
                        IF EBILL<X,6> > 0 THEN
                           SPECIAL.REXEL.EMAIL=0
                           EMAIL.OUT=''
                           EMAIL.OUT<1>='parcel@afs.net'     ; * GRB01
                           EMAIL.OUT<2>='DFriend@afs.net'
                           EMAIL.OUT<3>=''         ; * BCC: Email addresses
                           EMAIL.OUT<4>='Reports@afs.net'    ; * From Email address
                           EMAIL.OUT<5>='Shipper account 694-9X8 was encountered'
                           VIN=EMAIL.OUT
                           VOUT=''
                           ********                CALL SENDMAIL(VIN,VOUT)
                           IF VOUT<1>='ERROR' THEN
                              IF SELECT.ALL THEN
                                 EBILL.ERROR<1,-1>='Email failure occurred for the encountered shipper ':SHIPPER.NUMBER
                              END ELSE
                                 CALL ELINE('Email failure occurred for the encountered shipper ':SHIPPER.NUMBER)
                              END
                           END
                        END
                     END
                  END
* Get file date from first row and put in YYYYMMDD format for easy sorting
* This is the format used by items in the UPSDATA file
* Changed to get the date out of each line as more than one invoice
* shipper number might be in the file with different dates
                  INV.NUM=EBILL<X,4>     ; * JMK09
                  FILE.DATE=EBILL<X,5>
                  DUE.DATE = EBILL<X,63>           ; * NPR02
                  PLAN.AMOUNT=PLAN.AMOUNT+ICONV(EBILL<X,37>,'MR2')+ICONV(EBILL<X,38>,'MR2')
                  BEGIN CASE
                     CASE EBILL<X,22>='1' OR EBILL<X,22>='4'
                        FILE.TYPE='O'
                     CASE EBILL<X,22>='2'
                        FILE.TYPE='I'
                     CASE EBILL<X,22>='3'
                        FILE.TYPE='T'
                     CASE EBILL<X,22>=''
                        LOCATE EBILL<X,20> IN DUPSBILL.CODES<1> BY 'AL' SETTING XX.POS THEN
                           FILE.TYPE=DUPSBILL.CODES<3,XX.POS>
                           IF FILE.TYPE#'I' AND FILE.TYPE#'O' AND FILE.TYPE#'T' AND FILE.TYPE#'S' THEN
                              CALL ELINE('Invalid type for ':DUPSBILL.CODES<1,XX.POS>:' Using a code of <S>')
                              EMAIL.OUT=''
                              EMAIL.OUT<1>='parcel@afs.net':@VM:'BPBarker@afs.net'         ; * GRB01

                              EMAIL.OUT<2>='DFriend@afs.net'           ; * RLM01
                              EMAIL.OUT<3>=''      ; * BCC: Email addresses
                              EMAIL.OUT<4>='Reports@afs.net'           ; * From Email address
                              EMAIL.OUT<5>='Invalid type for ':DUPSBILL.CODES<1,XX.POS>:' Using a code of <S>'
* Email body
                              EMAIL.OUT<6,-1>='Invalid type of ':DUPSBILL.CODES<3,XX.POS>:' for ':DUPSBILL.CODES<1,XX.POS>:' in shipper number ':SHIPPER.NUMBER
                              VIN=EMAIL.OUT
                              VOUT=''
                              *********                CALL SENDMAIL(VIN,VOUT)
                              IF VOUT<1>='ERROR' THEN
                                 IF SELECT.ALL THEN
                                    EBILL.ERROR<1,-1>='Email failure occurred for the invalid type for shipper ':SHIPPER.NUMBER
                                 END ELSE
                                    CALL ELINE('Email failure occurred for the invalid type for shipper ':SHIPPER.NUMBER)
                                 END
                              END ELSE
*                           CALL ELINE('Invalid type email to ':EMAIL.OUT<1>:'.') ; * JMK02
                              END
                              DUPSBILL.CODES<3,XX.POS>='S'
                              WRITE DUPSBILL.CODES ON F.TABLES,'UPSBILL.CODES'
                           END
                        END ELSE
                           INS EBILL<X,20> BEFORE DUPSBILL.CODES<1,XX.POS>
                           INS EBILL<X,21> BEFORE DUPSBILL.CODES<2,XX.POS>
                           INS 'S' BEFORE DUPSBILL.CODES<3,XX.POS>
                           EMAIL.OUT=''
                           EMAIL.OUT<1>='parcel@afs.net'
                           EMAIL.OUT<2>='DFriend@afs.net'    ; * RLM01
                           EMAIL.OUT<3>=''         ; * BCC: Email addresses
                           EMAIL.OUT<4>='Reports@afs.net'    ; * From Email address
                           EMAIL.OUT<5>='New type for ':DUPSBILL.CODES<1,XX.POS>:' Using a code of <S>'

* Email body
                           EMAIL.OUT<6,-1>='New type for ':DUPSBILL.CODES<1,XX.POS>:' in shipper number ':SHIPPER.NUMBER
                           VIN=EMAIL.OUT
                           VOUT=''
                           ********            CALL SENDMAIL(VIN,VOUT)
                           IF VOUT<1>='ERROR' THEN
                              IF SELECT.ALL THEN
                                 EBILL.ERROR<1,-1>='Email failure occurred for the new type for shipper ':SHIPPER.NUMBER
                              END ELSE
                                 CALL ELINE('Email failure occurred for the new type for shipper ':SHIPPER.NUMBER)
                              END
                           END ELSE

                           END
                           WRITE DUPSBILL.CODES ON F.TABLES,'UPSBILL.CODES'
                        END
                  END CASE
                  UPS.INVOICE.AMOUNT=ICONV(EBILL<X,6>,'MR2')
                  IF LEN(FILE.DATE)=7 THEN FILE.DATE=0:FILE.DATE
                  IF LEN(DUE.DATE)=7 THEN DUE.DATE=0:DUE.DATE          ; * NPR02
                  IF LEN(FILE.DATE)#8 THEN
                     IF SELECT.ALL THEN  ; * JMK13
                        EBILL.ERROR<1,-1>='File Date ':FILE.DATE:' from e-Bill file is invalid.'     ; * JMK13
                     END ELSE            ; * JMK13
                        CRT @(0,20):'File Date ':FILE.DATE:' from e-Bill file is invalid.':@(-4)
                     END                 ; * JMK13
                     GOTO THE.END
                  END ELSE
                     FILE.DATE=FILE.DATE[1,2]:'-':FILE.DATE[3,2]:'-':FILE.DATE[5,4]
                     FILE.DATE=ICONV(FILE.DATE,'D')
                     DUE.DATE=DUE.DATE[1,2]:'-':DUE.DATE[3,2]:'-':DUE.DATE[5,4]  ; * NPR02
                     DUE.DATE=ICONV(DUE.DATE,'D')  ; * NPR02
                     IF FILE.DATE='' OR MOD(FILE.DATE,7)#6 THEN
                        IF SELECT.ALL THEN         ; * JMK13
                           EBILL.ERROR<1,-1>='File Date ':FILE.DATE:' from e-Bill file is invalid.'  ; * JMK13
                        END ELSE         ; * JMK13
                           CRT @(0,20):'File Date ':FILE.DATE:' from e-Bill file is invalid.':@(-4)
                        END              ; * JMK13
                        GOTO THE.END
                     END ELSE
                        BILL.DATE=FILE.DATE        ; * Used for call to GET.EXPENSE and Bills file
                        FILE.DATE=EBILL<X,5>
                        IF LEN(FILE.DATE)=7 THEN FILE.DATE=0:FILE.DATE
                     END
                  END
               CASE 1
                  SHIPPER.NUMBER=EBILL<X,3>
                  INV.NUM=EBILL<X,4>     ; * JMK09
            END CASE


            EBILL<X,3>=SHIPPER.NUMBER    ; * Write it back for later comparison
****         CRT @(27,10):SHIPPER.NUMBER:@(-4)
            LOCATE SHIPPER.NUMBER:FILE.DATE IN SHIPPER.LIST<5> BY 'AL' SETTING POS ELSE
               INS SHIPPER.NUMBER BEFORE SHIPPER.LIST<1,POS>
               ITEM.ID=CARRIER.ID:'*':SHIPPER.NUMBER
               READ SHIP.REC FROM F.XREF,ITEM.ID THEN
                  IF SHIP.REC<1>='' THEN
                     SHIPPER.NOTFOUND+=1
                  END ELSE
                     SHIPPER.FOUND+=1
                     INS SHIPPER.NUMBER BEFORE SHIPPER.FOUND.LIST<POS>
                     INS SHIP.REC<1> BEFORE SHIPPER.LIST<2,POS>        ; * AFS Client ID
                     INS SHIP.REC<2> BEFORE SHIPPER.LIST<3,POS>        ; * AFS Division ID
                     INS FILE.DATE BEFORE SHIPPER.LIST<4,POS>          ; * Date of invoice
                     INS SHIPPER.NUMBER:FILE.DATE BEFORE SHIPPER.LIST<5,POS>     ; * New ID
                     INS UPS.INVOICE.AMOUNT BEFORE SHIPPER.LIST<6,POS>           ; * Invoice amount for comparison
                     INS FILE.TYPE BEFORE SHIPPER.LIST<7,POS>
                     INS INV.NUM BEFORE SHIPPER.LIST<8,POS>  ; * JMK09
                     INS SHIP.REC<5> BEFORE SHIPPER.LIST<9,POS>        ; * JMK21
                     INS DUE.DATE BEFORE SHIPPER.LIST<10,POS>          ; *NPR02 Due Date
                  END
               END ELSE
                  SHIPPER.NOTFOUND+=1
                  INS SHIPPER.NUMBER BEFORE SHIPPER.NOTFOUND.LIST<POS>
                  INS 'NOT FOUND' BEFORE SHIPPER.LIST<2,POS>           ; * AFS Client ID
                  INS 'NOT FOUND' BEFORE SHIPPER.LIST<3,POS>           ; * AFS Division ID
                  INS FILE.DATE BEFORE SHIPPER.LIST<4,POS>   ; * Date of invice
                  INS SHIPPER.NUMBER:FILE.DATE BEFORE SHIPPER.LIST<5,POS>        ; * New ID
                  INS UPS.INVOICE.AMOUNT BEFORE SHIPPER.LIST<6,POS>    ; * Invoice amount for comparison
                  INS FILE.TYPE BEFORE SHIPPER.LIST<7,POS>
                  INS INV.NUM BEFORE SHIPPER.LIST<8,POS>     ; * JMK09
                  INS 'NOT FOUND' BEFORE SHIPPER.LIST<9,POS>           ; * JMK21
                  INS DUE.DATE BEFORE SHIPPER.LIST<10,POS>   ; *NPR02 Due Date
               END
            END
            SERVICE.DESCRIPTION=OCONV(EBILL<X,21>,'MCU')
****         CRT @(27,11):SERVICE.DESCRIPTION:@(-4)
            LOCATE SERVICE.DESCRIPTION IN UPS.SERVICE.DESCRIPTIONS<1> BY 'AL' SETTING POS THEN
               LOCATE SERVICE.DESCRIPTION IN SERVICE.FOUND.LIST BY 'AL' SETTING POS ELSE
                  SERVICE.FOUND+=1
                  INS SERVICE.DESCRIPTION BEFORE SERVICE.FOUND.LIST<POS>
               END
            END ELSE
               LOCATE SERVICE.DESCRIPTION IN SERVICE.NOTFOUND.LIST BY 'AL' SETTING POS ELSE
                  SERVICE.NOTFOUND+=1
                  INS SERVICE.DESCRIPTION BEFORE SERVICE.NOTFOUND.LIST<POS>
               END
            END

         NEXT X                          ; ******************************** BEGINS AROUND 814

* Display found and not found shipper numbers
* Screen parameters
         DATA.SCR.DA=''
         T=LEN(SHIPPER.FOUND)+LEN('  Shipper Numbers Found')-20
         FOR X=1 TO SHIPPER.FOUND
            DATA.SCR.DA<X>=SPACE(T):SHIPPER.FOUND.LIST<X>'R#20'
         NEXT X
         T=38-T
         FOR X=1 TO SHIPPER.NOTFOUND
            IF DATA.SCR.DA<X>='' THEN
               DATA.SCR.DA<X>:=SPACE(58)
            END ELSE
               DATA.SCR.DA<X>:=SPACE(T)
            END
            DATA.SCR.DA<X>:=SHIPPER.NOTFOUND.LIST<X>'R#20'
         NEXT X

         HEADING.SCR.DA=' ':SHIPPER.FOUND:' Shipper Numbers Found$':SHIPPER.NOTFOUND:' Shipper Numbers Not Found '
         HEADING.SCR.DA=CHANGE(HEADING.SCR.DA,'$',SPACE(80-LEN(HEADING.SCR.DA)))
         START.SCR.DA=11
         END.SCR.DA=20

* Printer parameters
         DATA.PRT.DA=DATA.SCR.DA
         HEADING1.PRT.DA=CARRIER.ID:' ':CARRIER.NAME:' e-Bill Shipper Number Report'
         HEADING2.PRT.DA=HEADING.SCR.DA

         TOTAL.SHIPPER=SHIPPER.FOUND+SHIPPER.NOTFOUND
         TOTAL.SHIPPER.STMT=TOTAL.SHIPPER:' unique Shipper Numbers detected in e-Bill file'
         ******    CALL CENTER(TOTAL.SHIPPER.STMT,80)
         ******     CRT @(0,8):@(-3):@(0,8):TOTAL.SHIPPER.STMT
         IF SHIPPER.NOTFOUND THEN
            IF SELECT.ALL THEN           ; * JMK13
               EBILL.ERROR<1,-1>='Shipper numbers not found must first be added to file EDI.CAR.ACNT.XREF.  '  ; * JMK13
               GOTO THE.END              ; * JMK13
            END ELSE                     ; * JMK13
               CRT @(0,22):'Shipper numbers not found must first be added to file EDI.CAR.ACNT.XREF.'
               GOSUB SETUP.DISPLAY.DA    ; * JMK04
            END                          ; * JMK13
         END

* Display found and not/found service descriptions
* Screen parameters
         DATA.SCR.DA=''
         T=LEN(SERVICE.FOUND)+LEN('  Service Descriptions Found')-24
         FOR X=1 TO SERVICE.FOUND
            DATA.SCR.DA<X>=SPACE(T):SERVICE.FOUND.LIST<X>'R#24'
         NEXT X
         T=42-T
         FOR X=1 TO SERVICE.NOTFOUND
            IF DATA.SCR.DA<X>='' THEN
               DATA.SCR.DA<X>:=SPACE(62)
            END ELSE
               DATA.SCR.DA<X>:=SPACE(T)
            END
            DATA.SCR.DA<X>:=SERVICE.NOTFOUND.LIST<X>'R#24'
         NEXT X

         HEADING.SCR.DA=' ':SERVICE.FOUND:' Service Descriptions Found$':SERVICE.NOTFOUND:' Service Descriptions Not Found '
         HEADING.SCR.DA=CHANGE(HEADING.SCR.DA,'$',SPACE(80-LEN(HEADING.SCR.DA)))
         START.SCR.DA=11
         END.SCR.DA=20

* Printer parameters
         DATA.PRT.DA=DATA.SCR.DA
         HEADING1.PRT.DA=CARRIER.ID:' ':CARRIER.NAME:' e-Bill Service Description Report'
         HEADING2.PRT.DA=HEADING.SCR.DA
         TOTAL.SERVICE=SERVICE.FOUND+SERVICE.NOTFOUND
         TOTAL.SERVICE.STMT=TOTAL.SERVICE:' unique Service Descriptions detected in e-Bill file'
         *****    CALL CENTER(TOTAL.SERVICE.STMT,80)
         *****    CRT @(0,8):@(-3):@(0,8):TOTAL.SERVICE.STMT
         *****    CRT @(0,22):'Service Descriptions not found must first be added to file FB.TABLES.'
         IF SERVICE.NOTFOUND>0 THEN      ; * JMK04
            IF SELECT.ALL THEN           ; * JMK13
               EBILL.ERROR<1,-1>='Service Descriptions not found must first be added to file FB.TABLES.  '     ; * JMK13
               GOTO THE.END              ; * JMK13
            END ELSE                     ; * JMK13
               GOSUB SETUP.DISPLAY.DA
            END                          ; * JMK13
         END
         IF UPS.INVOICE.AMOUNT # 0 THEN  ; * GRB01
            *****      GOSUB BLOCK.CLIENTS             ; * JMK03
         END
         IF (SHIPPER.NOTFOUND+SERVICE.NOTFOUND)>0 THEN
            IF SELECT.ALL THEN           ; * JMK13
               EBILL.ERROR<1,-1>='Enter the Shipper Numbers and/or Service Descriptions that were not found.'  ; * JMK13
            END ELSE                     ; * JMK13
               CRT @(0,20):'Enter the Shipper Numbers and/or Service Descriptions that were not found.':@(-4)
            END                          ; * JMK13
            GOTO THE.END
         END

* Assign number of unique shippers in e-Bill file
         NUM.SHIPPERS=DCOUNT(SHIPPER.LIST<1>,@VM)

*   Check all client numbers and make sure that all BILLS and BILLS.HIST files will open
*   Read the BM.ARRAY record for each client and update it from the master list in FB.TABLES, if needed
*   For each shipper number in the list, pass through the entire e-Bill data file and do the following:
*     Sum up net and incentive amounts per service description per client and write to UPS.BM as a temp item (this is later deleted)
*     Build a list of all ship dates for each shipper number
***********************************************************************************
PASS3:***
**********************************************************************************
         PASS.NUMBER=3
         CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Checking clients, Identifying ship dates, Adding nets/incentives...':
         SHIP.DATE.LIST=''
         FOR X=1 TO NUM.SHIPPERS         ; * ends around 3074
            SHIPPER.NUMBER=SHIPPER.LIST<1,X>
            CLIENT.ID=SHIPPER.LIST<2,X>
            DIVISION.ID=SHIPPER.LIST<3,X>
            FILE.DATE=SHIPPER.LIST<4,X>
            INV.NUM=SHIPPER.LIST<8,X>    ; * JMK09
            UPS.VC=SHIPPER.LIST<9,X>     ; * JMK21
            DUE.DATE=SHIPPER.LIST<10,X>  ; * NPR02
            READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='Client ':CLIENT.ID:' not on file - Aborting.  '       ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'Client ':CLIENT.ID:' not on file - Aborting.':@(-4)
               END                       ; * JMK13
               GOTO THE.END
            END
            IF CLIENT.REC<12>='Y' THEN   ; * JMK32
               IF DIVISION.ID='' THEN    ; * JMK11 ; * JMK32
                  IF SELECT.ALL THEN     ; * JMK13
                     EBILL.ERROR<1,-1>='Client ':CLIENT.ID:', ':SHIPPER.NUMBER:' requires division which is not setup - Aborting.  '         ; * JMK13
                  END ELSE               ; * JMK13
                     CRT @(0,20):'Client ':CLIENT.ID:', ':SHIPPER.NUMBER:' requires division which is not setup - Aborting.':@(-4)           ; * JMK11
                  END                    ; * JMK13
                  GOTO THE.END           ; * JMK11
               END                       ; * JMK11
               OPEN '','DIVISION.CODES,':CLIENT.ID TO F.TEST ELSE      ; * JMK32
                  IF SELECT.ALL THEN     ; * JMK32
                     EBILL.ERROR<1,-1>='Open failed for DIVISION.CODES,':CLIENT.ID:' - Aborting.  '  ; * JMK32
                  END ELSE               ; * JMK32
                     CRT @(0,20):'Open failed for DIVISION.CODES,':CLIENT.ID:' - Aborting.':@(-4)    ; * JMK32
                  END                    ; * JMK32
DEBUG
                  GOTO THE.END           ; * JMK32
               END                       ; * JMK32
               READ TEST.REC FROM F.TEST,DIVISION.ID ELSE    ; * JMK32
                  IF SELECT.ALL THEN     ; * JMK32
                     EBILL.ERROR<1,-1>='Division Code ':DIVISION.ID:' not on file - Aborting.  '     ; * JMK32
                  END ELSE               ; * JMK32
                     CRT @(0,20):'Division Code ':DIVISION.ID:' not on file - Aborting.':@(-4)       ; * JMK32
                  END                    ; * JMK32
DEBUG
                  GOTO THE.END           ; * JMK32
               END                       ; * JMK32
               INACTIVE.TEST=1           ; * JMK32
               IF CLIENT.ID='01706' THEN INACTIVE.TEST=0     ; * JMK32
               IF TEST.REC<7>='I' AND INACTIVE.TEST THEN     ; * JMK32
                  IF SELECT.ALL THEN     ; * JMK32
                     EBILL.ERROR<1,-1>='Client ':CLIENT.ID:', ':SHIPPER.NUMBER:' requires division ':DIVISION.ID:' which is set to Inactive - Aborting.  '       ; * JMK32
                  END ELSE               ; * JMK32
                     CRT @(0,20):'Client ':CLIENT.ID:', ':SHIPPER.NUMBER:' requires division ':DIVISION.ID:' which is set to Inactive - Aborting.':@(-4)         ; * JMK32
                  END                    ; * JMK32
DEBUG
                  GOTO THE.END           ; * JMK32
               END                       ; * JMK32
            END                          ; * JMK11

            OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='Open failed for FB.BILLS,':CLIENT.ID:' - Aborting.  '           ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'Open failed for FB.BILLS,':CLIENT.ID:' - Aborting.':@(-4)
               END                       ; * JMK13
DEBUG
               GOTO THE.END
            END
            OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILLS.HIST ELSE
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='Open failed for FB.BILLS.HIST,':CLIENT.ID:' - Aborting.  '      ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'Open failed for FB.BILLS.HIST,':CLIENT.ID:' - Aborting.':@(-4)
               END                       ; * JMK13
DEBUG
               GOTO THE.END
            END

            BEGIN CASE                   ; * JMK52
               CASE CLIENT.ID='01288'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01289'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01292'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01305'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01315'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01326'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01329'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01330'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01334'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01338'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01351'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01352'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01627'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='01643'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='02705'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04172'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04635'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04771'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04791'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04811'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04923'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04924'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04925'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04926'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04927'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='04928'    ; * JMK72
                  ZERO.OVERCHARGE=1      ; * JMK72
               CASE CLIENT.ID='30009'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE CLIENT.ID='30028'    ; * JMK52
                  ZERO.OVERCHARGE=1      ; * JMK52
               CASE 1                    ; * JMK52
                  ZERO.OVERCHARGE=0      ; * JMK52
            END CASE                     ; * JMK52
            BEGIN CASE                   ; * JMK52
               CASE 1                    ; * JMK52
                  ZERO.LOGISTICS=0       ; * JMK52
            END CASE                     ; * JMK52
            UPD.UPSDTL=0                 ; * JMK46
            UPD.UPSDTL=1                 ; * JMK46
            *  LIST OF CLIENTS TO CREATE UPSDTL FILE



            IF UPD.UPSDTL THEN           ; * JMK27 ; * JMK43 ; * JMK45 ; * JMK46


               OPEN '','UPSDTLCM,':CLIENT.ID TO F.UPSDTL ELSE  ; * JMK27
                  EXECUTE 'CREATE-FILE DATA UPSDTLCM,':CLIENT.ID:' 1,1,1' CAPTURING OUTPUT   ; * JMK53
                  OPEN '','UPSDTLCM,':CLIENT.ID TO F.UPSDTL ELSE         ; * JMK53
                     IF SELECT.ALL THEN  ; * JMK27
                        EBILL.ERROR<1,-1>='Open failed for UPSDTL,':CLIENT.ID:' - Aborting.  '       ; * JMK27
                     END ELSE            ; * JMK27
                        CRT @(0,20):'Open failed for UPSDTL,':CLIENT.ID:' - Aborting.':@(-4)         ; * JMK27
                     END                 ; * JMK27
DEBUG
                     GOTO THE.END        ; * JMK27
                  END                    ; * JMK53
               END                       ; * JMK27
            END                          ; * JMK27
            EXP.LINE=0                   ; * JMK47
            IF CLIENT.ID='01019' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01322' THEN EXP.LINE=1   ; * JMK57
            IF CLIENT.ID='01357' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01418' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01581' THEN EXP.LINE=1   ; * JMK69
            IF CLIENT.ID='01639' THEN EXP.LINE=1   ; * DRF09
            IF CLIENT.ID='01675' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01706' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01747' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01773' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01825' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01826' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01977' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='01979' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='02025' THEN EXP.LINE=1   ; * DRF08
            IF CLIENT.ID='02131' THEN EXP.LINE=1   ; * JMK66
            IF CLIENT.ID='05016' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05026' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05027' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05028' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05029' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05030' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05031' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05032' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05033' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05034' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05035' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05036' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05037' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05038' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05039' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05040' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05041' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05042' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05043' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05044' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05046' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05047' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05048' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05049' THEN EXP.LINE=1   ; * JMK78
            IF CLIENT.ID='05166' THEN EXP.LINE=1   ; * DRF01
            IF CLIENT.ID='05549' THEN EXP.LINE=1   ; * DRFZZ
            IF CLIENT.ID='10356' THEN EXP.LINE=1   ; * JMK47
            IF CLIENT.ID='30028' THEN EXP.LINE=1   ; * JMK47
            IN.FILE=0
            OUT.FILE=0
            BOTH.FILE=0
            BM.ARRAY=''
*************************************************************
CHECK.UPS.BM:*
*************************************************************
            READ BM.ARRAY.I FROM F.UPS.BM,CLIENT.ID:'-I*':SHIPPER.NUMBER THEN    ; * JMK01
* Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
* Don't insert - Give warning and end program instead
               FOR Y=1 TO NUM.SD         ; * JMK01
                  SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>    ; * JMK01
                  LOCATE SERVICE.DESCRIPTION IN BM.ARRAY.I<1> BY 'AL' SETTING POS ELSE     ; * JMK01
                     IF SELECT.ALL THEN  ; * JMK13
                        EBILL.ERROR<1,-1>='Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-I*':SHIPPER.NUMBER:'.  '         ; * JMK13
                        EBILL.ERROR:='Run UPS.BM.SETUP for this client to enter old benchmark percent.'        ; * JMK13
                     END ELSE            ; * JMK13
                        CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-I*':SHIPPER.NUMBER:'.':@(-4)           ; * JMK01
                        CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)   ; * JMK01
                     END                 ; * JMK13
DEBUG
                     GOTO THE.END        ; * JMK01
                  END                    ; * JMK01
               NEXT Y                    ; * JMK01
               BM.ARRAY<21>=BM.ARRAY.I<1>          ; * JMK01
               BM.ARRAY<22>=BM.ARRAY.I<2>          ; * JMK01
               BM.ARRAY<23>=BM.ARRAY.I<3>          ; * JMK01
               BM.ARRAY<41>=BM.ARRAY.I<1>          ; * JMK01
               BM.ARRAY<42>=BM.ARRAY.I<2>          ; * JMK01
               BM.ARRAY<43>=BM.ARRAY.I<3>          ; * JMK01
               IN.FILE=1                 ; * JMK01
            END ELSE                     ; * JMK01
               READ BM.ARRAY.I FROM F.UPS.BM,CLIENT.ID:'-I' THEN
* Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
* Don't insert - Give warning and end program instead
                  FOR Y=1 TO NUM.SD
                     SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>
                     LOCATE SERVICE.DESCRIPTION IN BM.ARRAY.I<1> BY 'AL' SETTING POS ELSE
                        IF SELECT.ALL THEN         ; * JMK13
                           EBILL.ERROR<1,-1>='Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-I.  '     ; * JMK13
                           EBILL.ERROR:='Run UPS.BM.SETUP for this client to enter old benchmark percent.'     ; * JMK13
                        END ELSE         ; * JMK13
                           CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-I.':@(-4)
                           CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)

                        END              ; * JMK13
DEBUG
                        GOTO THE.END
                     END
                  NEXT Y
                  BM.ARRAY<21>=BM.ARRAY.I<1>
                  BM.ARRAY<22>=BM.ARRAY.I<2>
                  BM.ARRAY<23>=BM.ARRAY.I<3>
                  BM.ARRAY<41>=BM.ARRAY.I<1>
                  BM.ARRAY<42>=BM.ARRAY.I<2>
                  BM.ARRAY<43>=BM.ARRAY.I<3>
                  IN.FILE=1
               END
            END                          ; * JMK01
            READ BM.ARRAY.O FROM F.UPS.BM,CLIENT.ID:'-O*':SHIPPER.NUMBER THEN    ; * JMK01
* Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
* Don't insert - Give warning and end program instead
               FOR Y=1 TO NUM.SD         ; * JMK01
                  SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>    ; * JMK01
                  LOCATE SERVICE.DESCRIPTION IN BM.ARRAY.O<1> BY 'AL' SETTING POS ELSE     ; * JMK01

                     IF SELECT.ALL THEN  ; * JMK13
                        EBILL.ERROR<1,-1>='Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-O*':SHIPPER.NUMBER:'.  '         ; * JMK13
                        EBILL.ERROR:='Run UPS.BM.SETUP for this client to enter old benchmark percent.'        ; * JMK13
                     END ELSE            ; * JMK13
                        CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-O*':SHIPPER.NUMBER:'.':@(-4)           ; * JMK01
                        CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)   ; * JMK01

                     END                 ; * JMK13
DEBUG
                     GOTO THE.END        ; * JMK01
                  END                    ; * JMK01
               NEXT Y                    ; * JMK01
               BM.ARRAY<1>=BM.ARRAY.O<1>           ; * JMK01
               BM.ARRAY<2>=BM.ARRAY.O<2>           ; * JMK01
               BM.ARRAY<3>=BM.ARRAY.O<3>           ; * JMK01
               BM.ARRAY<61>=BM.ARRAY.O<1>          ; * JMK01
               BM.ARRAY<62>=BM.ARRAY.O<2>          ; * JMK01
               BM.ARRAY<63>=BM.ARRAY.O<3>          ; * JMK01
               OUT.FILE=1                ; * JMK01
            END ELSE                     ; * JMK01
               READ BM.ARRAY.O FROM F.UPS.BM,CLIENT.ID:'-O' THEN
* Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
* Don't insert - Give warning and end program instead
                  FOR Y=1 TO NUM.SD
                     SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>
                     LOCATE SERVICE.DESCRIPTION IN BM.ARRAY.O<1> BY 'AL' SETTING POS ELSE
                        IF SELECT.ALL THEN         ; * JMK13
                           EBILL.ERROR<1,-1>='Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-O.  '     ; * JMK13
                           EBILL.ERROR:='Run UPS.BM.SETUP for this client to enter old benchmark percent.'     ; * JMK13
                        END ELSE         ; * JMK13
                           CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-O.':@(-4)
                           CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)
                        END              ; * JMK13
DEBUG
                        GOTO THE.END
                     END
                  NEXT Y
                  BM.ARRAY<1>=BM.ARRAY.O<1>
                  BM.ARRAY<2>=BM.ARRAY.O<2>
                  BM.ARRAY<3>=BM.ARRAY.O<3>
                  BM.ARRAY<61>=BM.ARRAY.O<1>
                  BM.ARRAY<62>=BM.ARRAY.O<2>
                  BM.ARRAY<63>=BM.ARRAY.O<3>
                  OUT.FILE=1
               END
            END                          ; * JMK01
            IF IN.FILE#OUT.FILE THEN
               IF IN.FILE=0 THEN
                  IF SELECT.ALL THEN     ; * JMK13
                     EBILL.ERROR<1,-1>='Logistics benchmarks not on file for client ':CLIENT.ID:'-I - Aborting.  '       ; * JMK13
                  END ELSE               ; * JMK13
                     CRT @(0,20):'Logistics benchmarks not on file for client ':CLIENT.ID:'-I - Aborting.':@(-4)
                  END                    ; * JMK13
               END ELSE
                  IF SELECT.ALL THEN     ; * JMK13
                     EBILL.ERROR<1,-1>='Logistics benchmarks not on file for client ':CLIENT.ID:'-O - Aborting.  '       ; * JMK13
                  END ELSE               ; * JMK13
                     CRT @(0,20):'Logistics benchmarks not on file for client ':CLIENT.ID:'-O - Aborting.':@(-4)
                  END                    ; * JMK13
               END
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR:='Run UPS.BM.SETUP for this client to establish old benchmark percents.'         ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,21):'Run UPS.BM.SETUP for this client to establish old benchmark percents.':@(-4)
               END                       ; * JMK13
               GOTO THE.END
            END ELSE
               IF IN.FILE=1 THEN

               END ELSE
                  READ BM.ARRAY FROM F.UPS.BM,CLIENT.ID:'*':SHIPPER.NUMBER THEN  ; * JMK01
* Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
* Don't insert - Give warning and end program instead
                     FOR Y=1 TO NUM.SD   ; * JMK01
                        SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>        ; * JMK01
                        LOCATE SERVICE.DESCRIPTION IN BM.ARRAY<1> BY 'AL' SETTING POS ELSE           ; * JMK01
                           IF SELECT.ALL THEN      ; * JMK13
                              EBILL.ERROR<1,-1>='Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'*':SHIPPER.NUMBER:'.  '     ; * JMK13
                              EBILL.ERROR:='Run UPS.BM.SETUP for this client to enter old benchmark percent.'  ; * JMK13
                           END ELSE      ; * JMK13
                              CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'*':SHIPPER.NUMBER:'.':@(-4)       ; * JMK01
                              CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)       ; * JMK01
                           END           ; * JMK13
                           GOTO THE.END  ; * JMK01
                        END              ; * JMK01
                     NEXT Y              ; * JMK01
                     BM.ARRAY<21>=BM.ARRAY<1>      ; * JMK01
                     BM.ARRAY<22>=BM.ARRAY<2>      ; * JMK01
                     BM.ARRAY<23>=BM.ARRAY<3>      ; * JMK01
                     BM.ARRAY<41>=BM.ARRAY<1>      ; * JMK01
                     BM.ARRAY<42>=BM.ARRAY<2>      ; * JMK01
                     BM.ARRAY<43>=BM.ARRAY<3>      ; * JMK01
                     BM.ARRAY<61>=BM.ARRAY<1>      ; * JMK01
                     BM.ARRAY<62>=BM.ARRAY<2>      ; * JMK01
                     BM.ARRAY<63>=BM.ARRAY<3>      ; * JMK01
                     BOTH.FILE=1         ; * JMK01
                  END ELSE               ; * JMK01
                     READ BM.ARRAY FROM F.UPS.BM,CLIENT.ID THEN
* Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
* Don't insert - Give warning and end program instead
                        FOR Y=1 TO NUM.SD
                           SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>
                           LOCATE SERVICE.DESCRIPTION IN BM.ARRAY<1> BY 'AL' SETTING POS ELSE
                              IF SELECT.ALL THEN   ; * JMK13
                                 EBILL.ERROR<1,-1>='Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'.  '           ; * JMK13
                                 EBILL.ERROR:='Run UPS.BM.SETUP for this client to enter old benchmark percent.'         ; * JMK13
                              END ELSE   ; * JMK13
                                 CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'.':@(-4)
                                 CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)
                              END        ; * JMK13
                              GOTO THE.END
                           END
                        NEXT Y
                        BM.ARRAY<21>=BM.ARRAY<1>
                        BM.ARRAY<22>=BM.ARRAY<2>
                        BM.ARRAY<23>=BM.ARRAY<3>
                        BM.ARRAY<41>=BM.ARRAY<1>
                        BM.ARRAY<42>=BM.ARRAY<2>
                        BM.ARRAY<43>=BM.ARRAY<3>
                        BM.ARRAY<61>=BM.ARRAY<1>
                        BM.ARRAY<62>=BM.ARRAY<2>
                        BM.ARRAY<63>=BM.ARRAY<3>
                        BOTH.FILE=1
* WRITE BM.ARRAY ON F.UPS.BM,CLIENT.ID; * Write new record with added service descriptions
                     END ELSE
                        TEST.ID='INACTIVE-':CLIENT.ID        ; * JMK58
                        READ TEST.UPS.BM.REC FROM F.UPS.BM,TEST.ID THEN          ; * JMK58
                           WRITE TEST.UPS.BM.REC ON F.UPS.BM,CLIENT.ID           ; * JMK58
                           DELETE F.UPS.BM,TEST.ID           ; * JMK58
                           GO CHECK.UPS.BM         ; * JMK58
                        END ELSE         ; * JMK58
                           TEST.ID='TEMP-':CLIENT.ID         ; * JMK58
                           READ TEST.UPS.BM.REC FROM F.UPS.BM,TEST.ID THEN       ; * JMK58
                              WRITE TEST.UPS.BM.REC ON F.UPS.BM,CLIENT.ID        ; * JMK58
                              DELETE F.UPS.BM,TEST.ID        ; * JMK58
                              GO CHECK.UPS.BM      ; * JMK58
                           END           ; * JMK58
                        END              ; * JMK58
                        IF SELECT.ALL THEN         ; * JMK13
                           EBILL.ERROR<1,-1>='Logistics benchmarks not on file for client ':CLIENT.ID:' - Aborting.  '   ; * JMK13
                           EBILL.ERROR:='Run UPS.BM.SETUP for this client to establish old benchmark percents.'          ; * JMK13
                        END ELSE         ; * JMK13
                           CRT @(0,20):'Logistics benchmarks not on file for client ':CLIENT.ID:' - Aborting.':@(-4)
                           CRT @(0,21):'Run UPS.BM.SETUP for this client to establish old benchmark percents.':@(-4)
                        END              ; * JMK13
                        GOTO THE.END
                     END
                  END                    ; * JMK01
               END
            END
            GOSUB ZERO.OUT.OTHER.ATTRIBUTES.IN.BM.ARRAY
            ADDR.CORR.ARRAY=''
            VOID.ARRAY=''

            ******************************************** ends around   3066


            FOR Y=1 TO NUM.PACKAGES
               IF EBILL<Y,3>=SHIPPER.NUMBER AND EBILL<Y,5>=FILE.DATE THEN
                  SERVICE.DESCRIPTION=EBILL<Y,21>
                  TRACKING.NUMBER=EBILL<Y,7>
                  FILE.TYPE=''
                  IF EBILL<Y,22>='1' OR EBILL<Y,22>='4' THEN
                     FILE.TYPE=1
                  END
                  IF EBILL<Y,22>='2' THEN
                     FILE.TYPE=2
                  END
                  IF EBILL<Y,22>='3' THEN
                     FILE.TYPE=3
                  END
                  IF FILE.TYPE # '' THEN
                     ATT.SETTING=(FILE.TYPE-1)*20
                     BM.ARRAY<ATT.SETTING+19>=BM.ARRAY<ATT.SETTING+19>+1
                  END
                  IF FILE.TYPE='' THEN
                     LOCATE EBILL<Y,20> IN DUPSBILL.CODES<1> BY 'AL' SETTING XX.POS THEN
                        FILE.CODE=DUPSBILL.CODES<3,XX.POS>
                     END
                     BEGIN CASE
                        CASE FILE.CODE='O'
                           FILE.TYPE='1'
                        CASE FILE.CODE='I'
                           FILE.TYPE=2
                        CASE FILE.CODE='T'
                           FILE.TYPE=3
                        CASE FILE.CODE='S'
                           FILE.TYPE=4
                        CASE 1
                           IF SELECT.ALL THEN      ; * JMK13
                              EBILL.WARNING<1,-1>='Invalid code using the S code on line ':Y:'.  '   ; * JMK13
                           END ELSE      ; * JMK13
                              CALL ELINE('Invalid code using the S code')
                           END           ; * JMK13
                           FILE.TYPE=4
                     END CASE
                  END
                  ATT.SETTING=(FILE.TYPE-1)*20
                  LOCATE SERVICE.DESCRIPTION IN BM.ARRAY<ATT.SETTING+1> BY 'AL' SETTING BM.POS THEN
                     BEGIN CASE
                        CASE SERVICE.DESCRIPTION='2ND AIR AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='2ND DAY AIR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='3DAY SELECT'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='EARLY AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='EXPEDITED'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='EXPRESS'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT 2ND AIR AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT 2ND DAY AI'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT 3DAY SELEC'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT NEXT DAY A'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT NEXT DAY S'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='NEXT DAY AIR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='NEXT DAY AIR SAVER'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='SONIC AIR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='2ND DAY AIR HUNDREDWT'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='3DAY SELECT HUNDREDWT'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='NEXT DAY AIR HUNDREDWT'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='NEXT DAY AIR SAVER HUNDR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='ADDR. CORR. 2ND AIR AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='ADDR. CORR. 2ND DAY AI'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='ADDR. CORR. 3DAY SELEC'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='ADDR. CORR. EARLY AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='ADDR. CORR. EXPEDITED'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='ADDR. CORR. EXPRESS'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='ADDR. CORR. NEXT DAY A'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='COM. 2ND AIR AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='COM. 2ND DAY AIR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='COM. 3DAY SELECT'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='COM. EARLY AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='COM. NEXT DAY AIR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='COM. NEXT DAY AIR SAVER'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='RES. 2ND AIR AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='RES. 2ND DAY AIR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='RES. 3DAY SELECT'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='RES. EARLY AM'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='RES. NEXT DAY AIR'
                           ACC.SUB.POS=2
                        CASE SERVICE.DESCRIPTION='RES. NEXT DAY AIR SAVER'
                           ACC.SUB.POS=2
                        CASE 1
                           ACC.SUB.POS=3
                     END CASE
                     PACKAGE.TYPE=EBILL<Y,13>
                     IF INDEX(SERVICE.DESCRIPTION,'VOID',1) ELSE
                        IF SERVICE.DESCRIPTION#'CREDIT ADJUSTMENTS' AND SERVICE.DESCRIPTION#'GUARANTEED SERVICE REFUN' THEN
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS ELSE
                              INS TRACKING.NUMBER BEFORE VOID.ARRAY<1,TEMP.POS>
                              INS SERVICE.DESCRIPTION BEFORE VOID.ARRAY<2,TEMP.POS>
                              INS ICONV(EBILL<Y,37>,'MR2') BEFORE VOID.ARRAY<3,TEMP.POS>
                              INS BM.POS BEFORE VOID.ARRAY<4,TEMP.POS>
                              INS ATT.SETTING BEFORE VOID.ARRAY<5,TEMP.POS>
                              INS ACC.SUB.POS BEFORE VOID.ARRAY<6,TEMP.POS>
                              INS PACKAGE.TYPE BEFORE VOID.ARRAY<7,TEMP.POS>
                           END
                        END
                     END
                     IF PACKAGE.TYPE='LTR' THEN
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        IF SHIPPER.NUMBER='039682' AND NET.CHARGE+0#0 THEN       ; * JMK14
                           IF SELECT.ALL THEN      ; * JMK14
                              EBILL.ERROR<1,-1>='Inactive shipper number "':SHIPPER.NUMBER:'" should not have chargeable activity.  '        ; * JMK14
                              EBILL.ERROR:='Please confirm these charges with the client prior to importing.'  ; * JMK14
                           END ELSE      ; * JMK14
                              CRT @(0,20):'Inactive shipper number "':SHIPPER.NUMBER:'" should not have chargeable activity.':@(-4)          ; * JMK14
                              CRT @(0,21):'Please confirm these charges with the client prior to importing.':@(-4)       ; * JMK14
                           END           ; * JMK14
                           GOTO THE.END  ; * JMK14
                        END              ; * JMK14
                        IF SHIPPER.NUMBER='1XW847' OR SHIPPER.NUMBER='318778' OR CLIENT.ID='01181' OR CLIENT.ID='00861' OR CLIENT.ID='02054' OR CLIENT.ID='00888' OR CLIENT.ID='00913' OR CLIENT.ID='00928' OR CLIENT.ID='00929' OR CLIENT.ID='01085' OR CLIENT.ID='01196' OR CLIENT.ID='01132' OR SHIPPER.NUMBER='784421' OR CLIENT.ID='01222' OR SHIPPER.NUMBER='675394' OR CLIENT.ID='00392' OR SHIPPER.NUMBER='179747' OR SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' OR CLIENT.ID='01157' OR CLIENT.ID='01368' OR CLIENT.ID='01483' OR CLIENT.ID='01484' OR CLIENT.ID='01286' OR (CLIENT.ID='01338' AND DIVISION.ID#'00010') OR CLIENT.ID='01352' OR CLIENT.ID='01292' OR CLIENT.ID='01273' OR CLIENT.ID='01363' OR CLIENT.ID='01066' OR CLIENT.ID='01223' OR CLIENT.ID='01256' OR CLIENT.ID='01428' OR CLIENT.ID='00917' OR CLIENT.ID='00918' OR CLIENT.ID='01479' OR CLIENT.ID='01472' OR CLIENT.ID='01576' OR CLIENT.ID='01706' THEN
                           IF (CLIENT.ID='01157' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) OR (SHIPPER.NUMBER='179747' AND EBILL<Y,20>='WWS') OR (CLIENT.ID='01428' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) THEN
                              BM.ARRAY<ATT.SETTING+18>=BM.ARRAY<ATT.SETTING+18>+NET.CHARGE
                           END ELSE
                              IF SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' THEN
                                 IF ACC.SUB.POS='2' THEN
                                    BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                 END
                              END

                              IF CLIENT.ID='01706' THEN
                                 IF DIVISION.ID='00365' OR DIVISION.ID='01002' OR DIVISION.ID='01022' OR DIVISION.ID='01035' OR DIVISION.ID='01204' OR DIVISION.ID='02021' OR DIVISION.ID='02030' OR DIVISION.ID='02033' OR DIVISION.ID='02301' OR DIVISION.ID='02302' OR DIVISION.ID='02303' OR DIVISION.ID='02305' OR DIVISION.ID='02306' OR DIVISION.ID='02312' OR DIVISION.ID='02313' OR DIVISION.ID='02318' OR DIVISION.ID='02403' OR DIVISION.ID='02406' OR DIVISION.ID='02413' OR DIVISION.ID='02440' OR DIVISION.ID='02441' OR DIVISION.ID='02442' OR DIVISION.ID='02443' OR DIVISION.ID='02446' OR DIVISION.ID='02452' OR DIVISION.ID='02470' OR DIVISION.ID='02471' OR DIVISION.ID='02475' OR DIVISION.ID='02490' OR DIVISION.ID='02500' OR DIVISION.ID='02501' OR DIVISION.ID='02502' OR DIVISION.ID='02505' OR DIVISION.ID='02510' OR DIVISION.ID='02511' OR DIVISION.ID='02512' OR DIVISION.ID='02514' OR DIVISION.ID='02518' OR DIVISION.ID='02520' OR DIVISION.ID='02530' OR DIVISION.ID='02534' OR DIVISION.ID='02536' OR DIVISION.ID='02540' OR DIVISION.ID='02542' OR DIVISION.ID='02543' OR DIVISION.ID='02548' OR DIVISION.ID='02550' OR DIVISION.ID='02555' OR DIVISION.ID='02560' OR DIVISION.ID='02565' OR DIVISION.ID='02566' OR DIVISION.ID='02569' OR DIVISION.ID='02570' OR DIVISION.ID='02572' OR DIVISION.ID='02573' OR DIVISION.ID='02575' OR DIVISION.ID='02582' OR DIVISION.ID='02585' OR DIVISION.ID='02586' OR DIVISION.ID='02587' OR DIVISION.ID='02588' OR DIVISION.ID='02677' OR DIVISION.ID='02842' OR DIVISION.ID='02881' OR DIVISION.ID='02882' OR DIVISION.ID='02883' OR DIVISION.ID='02999' OR DIVISION.ID='99999' OR DIVISION.ID='00706' OR DIVISION.ID='00368' OR DIVISION.ID='02070' OR DIVISION.ID='02100' OR DIVISION.ID='02102' OR DIVISION.ID='02105' OR DIVISION.ID='02130' OR DIVISION.ID='02132' OR DIVISION.ID='02139' OR DIVISION.ID='02140' OR DIVISION.ID='02149' OR DIVISION.ID='02150' OR DIVISION.ID='02160' OR DIVISION.ID='02171' OR DIVISION.ID='02200' OR DIVISION.ID='02601' OR DIVISION.ID='02603' OR DIVISION.ID='02604' OR DIVISION.ID='02605' OR DIVISION.ID='02606' OR DIVISION.ID='02809' OR DIVISION.ID='02810' OR DIVISION.ID='02811' OR DIVISION.ID='02813' OR DIVISION.ID='02831' OR DIVISION.ID='02832' OR DIVISION.ID='02833' OR DIVISION.ID='02834' OR DIVISION.ID='02835' OR DIVISION.ID='02836' OR DIVISION.ID='02837' OR DIVISION.ID='02838' OR DIVISION.ID='02840' OR DIVISION.ID='02843' OR DIVISION.ID='02845' OR DIVISION.ID='03001' OR DIVISION.ID='03002' OR DIVISION.ID='03003' OR DIVISION.ID='03004' OR DIVISION.ID='03005' OR DIVISION.ID='03006' OR DIVISION.ID='03007' OR DIVISION.ID='03008' OR DIVISION.ID='03009' OR DIVISION.ID='03010' OR DIVISION.ID='03011' OR DIVISION.ID='03012' OR DIVISION.ID='03013' OR DIVISION.ID='03015' OR DIVISION.ID='03016' OR DIVISION.ID='03017' OR DIVISION.ID='03018' ELSE
                                    BEGIN CASE
                                       CASE EBILL<Y,22>='1' OR EBILL<Y,22>='4'
                                          IF OCONV(EBILL<Y,30>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,31>,'MCU')[1,5]='REXEL' THEN
                                             BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                          END
                                       CASE EBILL<Y,22>='2'
                                          IF OCONV(EBILL<Y,24>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,25>,'MCU')[1,5]='REXEL' THEN
                                             BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                          END
                                       CASE EBILL<Y,22>='3'
                                          IF (OCONV(EBILL<Y,24>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,25>,'MCU')[1,5]='REXEL') AND (OCONV(EBILL<Y,30>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,30>,'MCU')[1,5]='REXEL') THEN
                                             BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                          END
                                    END CASE
                                 END
                              END
                           END
                        END
                                         ; * SWB01 - * Column 57 (Export license fee) is deliberately not included when summing Accessoirals
                        ACC.CHARGE=0

                        ***************************

                        FOR XX = 39 TO 56
                           IF EBILL<Y,XX>='Y' THEN
                              ACC.AMT=''
                              IF EBILL<Y,XX+25>#'' THEN
                                 ACC.AMT=ICONV(EBILL<Y,XX+25>,'MR2')
                              END ELSE
                                 IF EBILL<Y,1>='3' THEN
                                    ACC.AMT=ACC.REC<XX,ACC.SUB.POS>
                                    IF XX = 50 THEN
                                       IF SERVICE.DESCRIPTION[1,13]='HUNDREDWEIGHT' THEN
                                          ACC.AMT=750
                                       END
                                    END
                                 END
                              END
                              IF NET.CHARGE > ACC.AMT THEN
                                 NET.CHARGE=NET.CHARGE-ACC.AMT
                                 ACC.CHARGE=ACC.CHARGE+ACC.AMT
                              END ELSE
                                 ACC.CHARGE=ACC.CHARGE+NET.CHARGE
                                 NET.CHARGE=0
                              END
                           END
                        NEXT XX

                        *********************************************************8

                        IF EBILL<Y,85>#'' THEN     ; * SWB01
                           ACC.AMT=ICONV(EBILL<Y,85>,'MR2')  ; * SWB01
                           IF NET.CHARGE > ACC.AMT THEN      ; * JMK25
                              NET.CHARGE=NET.CHARGE-ACC.AMT  ; * JMK25
                              ACC.CHARGE=ACC.CHARGE+ACC.AMT  ; * JMK25
                           END ELSE      ; * JMK25
                              ACC.CHARGE=ACC.CHARGE+NET.CHARGE         ; * JMK25
                              NET.CHARGE=0         ; * JMK25
                           END           ; * JMK25
                        END              ; * JMK25

                        IF SERVICE.DESCRIPTION='GUARANTEED SERVICE REFUN' THEN   ; **************


                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           TEMP.INV.DATE=EBILL<Y,5>
                           IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                           TEMP.SHIP.DATE=EBILL<Y,23>
                           IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                           GOOD.TEST=1
                           IF LEN(TEMP.INV.DATE)=8 THEN
                              TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                              TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                           END ELSE
                              GOOD.TEST=0
                           END
                           IF LEN(TEMP.SHIP.DATE)=8 THEN
                              TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                              TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                           END ELSE
                              GOOD.TEST=0
                           END

                           IF GOOD.TEST THEN
                              BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                              IF ZERO.OVERCHARGE=0 THEN      ; * JMK52
                                 EBILL<Y,93>=EBILL<Y,37>     ; * JMK52
                                 EBILL.SAVE<Y,93>=EBILL<Y,37>          ; * JMK52
                              END        ; * JMK52
                           END ELSE
                              BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                              IF ZERO.OVERCHARGE=0 THEN      ; * JMK52
                                 EBILL<Y,93>=EBILL<Y,37>     ; * JMK52
                                 EBILL.SAVE<Y,93>=EBILL<Y,37>          ; * JMK52
                              END        ; * JMK52
                           END
                        END
                        IF SERVICE.DESCRIPTION='HOST MANIFEST VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='UPS ONL WORLDSHIP VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE

                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN

                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN

                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='VENDOR MANIFEST VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='CAMPUS SHIP VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN

                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='UPS INTERNET VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='MANIFEST EDI VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN

                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='GUARANTEE SERVICE REFUN' THEN
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              EMAIL.OUT=''
                              EMAIL.OUT<1>='DFriend@afs.net'
                              EMAIL.OUT<3>=''      ; * BCC: Email addresses
                              EMAIL.OUT<4>='Reports@afs.net'           ; * From Email address
                              EMAIL.OUT<5>='Possible GSR'

* Email body
                              EMAIL.OUT<6,-1>='GSR for ':TRACKING.NUMBER:' in shipper number ':SHIPPER.NUMBER
                              VIN=EMAIL.OUT
                              VOUT=''
                              ********              CALL SENDMAIL(VIN,VOUT)
                           END
                        END
                        IF SERVICE.DESCRIPTION='CREDIT ADJUSTMENTS' THEN

                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           COMM.SWITCH=1           ; * JMK48
                           IF EBILL<Y,58>[1,18]='DUPLICATE SHIPMENT' THEN COMM.SWITCH=0    ; * JMK48
                           IF EBILL<Y,58>[1,15]='BILLED FOR VOID' THEN COMM.SWITCH=0       ; * JMK48
                           IF EBILL<Y,58>[1,13]='SHIPMENT VOID' THEN COMM.SWITCH=0         ; * JMK48
                           IF EBILL<Y,58>[1,4]='RESI' THEN COMM.SWITCH=0         ; * JMK48
                           IF EBILL<Y,58>[1,3]='ADD' THEN    ; * JMK54
                              BEGIN CASE           ; * JMK54
                                 CASE SHIPPER.NUMBER='E28577'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='429866'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='411525'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='16376W'          ; * JMK54 - Courter Co
                                 CASE CLIENT.ID='01503'      ; * JMK65
                                 CASE 1  ; * JMK54
                                    COMM.SWITCH=0  ; * JMK54
                              END CASE   ; * JMK54
                           END           ; * JMK54
                           IF EBILL<Y,58>[1,8]='GOODWILL' AND INDEX(EBILL<Y,59>,'BARKER',1) AND INDEX(EBILL<Y,59>,'BRIAN',1) THEN COMM.SWITCH=0        ; * JMK48
                           IF EBILL<Y,58>[1,8]='GOODWILL' AND INDEX(EBILL<Y,59>,'BARKER',1) AND INDEX(EBILL<Y,59>,'BRYAN',1) THEN COMM.SWITCH=0        ; * JMK48
                           IF EBILL<Y,59>[1,15]='BILLED FOR VOID' THEN COMM.SWITCH=0       ; * JMK48
                           IF EBILL<Y,59>[1,4]='RESI' THEN COMM.SWITCH=0         ; * JMK48

                           IF EBILL<Y,59>[1,3]='ADD' THEN    ; * JMK54
                              BEGIN CASE           ; * JMK54
                                 CASE SHIPPER.NUMBER='E28577'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='429866'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='411525'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='16376W'          ; * JMK54 - Courter Co
                                 CASE CLIENT.ID='01503'      ; * JMK65
                                 CASE 1  ; * JMK54
                                    COMM.SWITCH=0  ; * JMK54
                              END CASE   ; * JMK54
                           END           ; * JMK54
                           IF INDEX(OCONV(EBILL<Y,59>,'MCU'),'TARA REHBERG',1) THEN COMM.SWITCH=1    ; * JMK56
                           IF EBILL<Y,60>[1,15]='BILLED FOR VOID' THEN COMM.SWITCH=0       ; * JMK48
                           IF EBILL<Y,60>[1,4]='RESI' THEN COMM.SWITCH=0         ; * JMK48

                           IF EBILL<Y,60>[1,3]='ADD' THEN    ; * JMK54
                              BEGIN CASE           ; * JMK54
                                 CASE SHIPPER.NUMBER='E28577'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='429866'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='411525'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='16376W'          ; * JMK54 - Courter Co
                                 CASE CLIENT.ID='01503'      ; * JMK65
                                 CASE 1  ; * JMK54
                                    COMM.SWITCH=0  ; * JMK54
                              END CASE   ; * JMK54
                           END           ; * JMK54
                           IF INDEX(OCONV(EBILL<Y,60>,'MCU'),'TARA REHBERG',1) THEN COMM.SWITCH=1    ; * JMK56
                           IF COMM.SWITCH THEN     ; * JMK48

                              NET.CHARGE=0
                           END
                           IF NET.CHARGE < 0 THEN
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        END
                        IF SHIPPER.NUMBER='E79490' THEN
                           IF SERVICE.DESCRIPTION[1,11]='ADDR. CORR.' AND NET.CHARGE+0 > 0 THEN

                              IF SERVICE.DESCRIPTION[1,18]='ADDR. CORR. GROUND' THEN       ; * JMK73
                                 MAX.ADDR.CORR='500'
                              END ELSE
                                 MAX.ADDR.CORR='1000'
                              END
                              ADDR.CORR.ID=EBILL<Y,32>:'*':EBILL<Y,35>
                              LOCATE ADDR.CORR.ID IN ADDR.CORR.ARRAY<1> BY 'AL' SETTING ADDR.CORR.POS THEN
                                 ADDR.CORR.ARRAY<3,ADDR.CORR.POS>=ADDR.CORR.ARRAY<3,ADDR.CORR.POS>+NET.CHARGE
                                 ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE
                                 IF EBILL<Y,33>#'' THEN
                                    ADDR.CORR.ARRAY<6,ADDR.CORR.POS>=EBILL<Y,33>
                                 END
                                 IF EBILL<Y,34>#'' THEN
                                    ADDR.CORR.ARRAY<7,ADDR.CORR.POS>=EBILL<Y,34>
                                 END
                                 NET.CHARGE=0
                              END ELSE
                                 INS ADDR.CORR.ID BEFORE ADDR.CORR.ARRAY<1,ADDR.CORR.POS>
                                 INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<3,ADDR.CORR.POS>
                                 IF NET.CHARGE > MAX.ADDR.CORR THEN
                                    ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE-MAX.ADDR.CORR
                                    NET.CHARGE = MAX.ADDR.CORR
                                 END
                                 INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<2,ADDR.CORR.POS>
                                 INS EBILL<Y,32> BEFORE ADDR.CORR.ARRAY<5,ADDR.CORR.POS>
                                 INS EBILL<Y,33> BEFORE ADDR.CORR.ARRAY<6,ADDR.CORR.POS>
                                 INS EBILL<Y,34> BEFORE ADDR.CORR.ARRAY<7,ADDR.CORR.POS>
                                 INS EBILL<Y,35> BEFORE ADDR.CORR.ARRAY<8,ADDR.CORR.POS>
                              END
                           END
                        END
                        BM.ARRAY<ATT.SETTING+8,BM.POS>+=NET.CHARGE     ; * Net per service description
                        BM.ARRAY<ATT.SETTING+14,BM.POS>+=ACC.CHARGE    ; * Accessorial Charge
                        GROSS.CHARGE=NET.CHARGE+ICONV(EBILL<Y,38>,'MR2')
                        MIN.CHARGE=0
                        BEGIN CASE
                           CASE SERVICE.DESCRIPTION='COM. 3DAY SELECT'
                              MIN.CHARGE=795       ; * DRF06
                           CASE SERVICE.DESCRIPTION='RES. 3DAY SELECT'
                              MIN.CHARGE=1130      ; * DRF06
                           CASE SERVICE.DESCRIPTION='COM. GROUND'
                              MIN.CHARGE=624       ; * DRF06
                           CASE SERVICE.DESCRIPTION='RES. GROUND'
                              MIN.CHARGE=914       ; * DRF06
                           CASE SERVICE.DESCRIPTION='GROUND' AND EBILL<Y,20>='WWS'
                              MIN.CHARGE=1645      ; * DRF06
                           CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT GROUND' AND EBILL<Y,18> => 4 AND EBILL<Y,18> <= 8
                              MIN.CHARGE=4500
                           CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT GROUND'
                              MIN.CHARGE=4100
                        END CASE
                        IF GROSS.CHARGE > MIN.CHARGE + (MIN.CHARGE*BM.ARRAY<3,BM.POS>/10000)'R0' OR BM.ARRAY<3,BM.POS>=10000 THEN
                           BM.ARRAY<ATT.SETTING+9,BM.POS>+=ICONV(EBILL<Y,38>,'MR2')        ; * Incentive per service description for LTL
                           BM.ARRAY<ATT.SETTING+10,BM.POS>+=GROSS.CHARGE
                           IF ZERO.LOGISTICS=0 AND SERVICE.DESCRIPTION#'CREDIT ADJUSTMENTS' THEN     ; * JMK52
                              IF EBILL<Y,20>='ASD' THEN      ; * JMK61
                                 BEGIN CASE        ; * JMK61
                                    CASE SERVICE.DESCRIPTION='COM. GROUND'       ; * JMK61
                                       GROSS.CHARGE-=500     ; * JMK61
                                    CASE SERVICE.DESCRIPTION='RES. GROUND'       ; * JMK61
                                       GROSS.CHARGE-=500     ; * JMK61
                                    CASE 1         ; * JMK61
                                 END CASE          ; * JMK61
                              END        ; * JMK61
                              LOGISTICS.AMT=0      ; * JMK52
                              IF BM.ARRAY<3,BM.POS>#'10000' THEN       ; * JMK52
                          *****       BEGIN CASE
                            *****          CASE FILE.TYPE = 1
                            *****             LOGISTICS.AMT=ICONV(EBILL<Y,38>,'MR2')-(GROSS.CHARGE*BM.ARRAY<3,BM.POS>/10000)'R0'
                             *****         CASE FILE.TYPE = 2
                              *****           LOGISTICS.AMT=ICONV(EBILL<Y,38>,'MR2')-(GROSS.CHARGE*BM.ARRAY<23,BM.POS>/10000)'R0'         ; * JMK52
                            *****          CASE 1
                             *****            CRT "CRAP FILE TYPE IS ":FILE.TYPE
                             *****            GB1 = EBILL<Y,4>
                              *****           IF GB1 = "000000730201167" THEN
                              *****              GB3 = ICONV(EBILL<Y,38>,'MR2')
                                *****            GB4 = GROSS.CHARGE
                                *****            DEBUG
                               *****          END
2180:
                                 *****        DEBUG
                               *****    END CASE
                                   LOGISTICS.AMT=ICONV(EBILL<Y,38>,'MR2')-(GROSS.CHARGE*BM.ARRAY<3,BM.POS>/10000)'R0'
                              END
                              EBILL<Y,94>=-LOGISTICS.AMT'R26'          ; * JMK52
                              EBILL.SAVE<Y,94>=-LOGISTICS.AMT'R26'     ; * JMK52
                           END           ; * JMK52
                        END
                        BM.ARRAY<ATT.SETTING+20>=BM.ARRAY<ATT.SETTING+20>+ICONV(EBILL<Y,37>,'MR2')
                     END ELSE            ; * PACKAGE.TYPE # 'LTR'
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        IF SHIPPER.NUMBER='039682' AND NET.CHARGE+0#0 THEN       ; * JMK14
                           IF SELECT.ALL THEN      ; * JMK14
                              EBILL.ERROR<1,-1>='Inactive shipper number "':SHIPPER.NUMBER:'" should not have chargeable activity.  '        ; * JMK14
                              EBILL.ERROR:='Please confirm these charges with the client prior to importing.'  ; * JMK14
                           END ELSE      ; * JMK14
                              CRT @(0,20):'Inactive shipper number "':SHIPPER.NUMBER:'" should not have chargeable activity.':@(-4)          ; * JMK14
                              CRT @(0,21):'Please confirm these charges with the client prior to importing.':@(-4)       ; * JMK14
                           END           ; * JMK14
                           GOTO THE.END  ; * JMK14
                        END              ; * JMK14
                        IF SHIPPER.NUMBER='1XW847' OR SHIPPER.NUMBER='318778' OR CLIENT.ID='01181' OR CLIENT.ID='00861' OR CLIENT.ID='02054' OR CLIENT.ID='00888' OR CLIENT.ID='00913' OR CLIENT.ID='00928' OR CLIENT.ID='00929' OR CLIENT.ID='01085' OR CLIENT.ID='01196' OR CLIENT.ID='01132' OR SHIPPER.NUMBER='784421' OR CLIENT.ID='01222' OR SHIPPER.NUMBER='675394' OR CLIENT.ID='00392' OR SHIPPER.NUMBER='179747' OR SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' OR CLIENT.ID='01157' OR CLIENT.ID='01368' OR CLIENT.ID='01483' OR CLIENT.ID='01484' OR CLIENT.ID='01286' OR (CLIENT.ID='01338' AND DIVISION.ID#'00010') OR CLIENT.ID='01352' OR CLIENT.ID='01292' OR CLIENT.ID='01273' OR CLIENT.ID='01363' OR CLIENT.ID='01066' OR CLIENT.ID='01223' OR CLIENT.ID='01256' OR CLIENT.ID='01428' OR CLIENT.ID='00917' OR CLIENT.ID='00918' OR CLIENT.ID='01479' OR CLIENT.ID='01472' OR CLIENT.ID='01576' OR CLIENT.ID='01706' THEN
                           IF (CLIENT.ID='01157' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) OR (SHIPPER.NUMBER='179747' AND EBILL<Y,20>='WWS') OR (CLIENT.ID='01428' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) THEN
                              BM.ARRAY<ATT.SETTING+18>=BM.ARRAY<ATT.SETTING+18>+NET.CHARGE
                           END ELSE
                              IF SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' THEN
                                 IF ACC.SUB.POS='2' THEN
                                    BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                 END
                              END
                              IF CLIENT.ID='01706' THEN
                                 IF DIVISION.ID='00365' OR DIVISION.ID='01002' OR DIVISION.ID='01022' OR DIVISION.ID='01035' OR DIVISION.ID='01204' OR DIVISION.ID='02021' OR DIVISION.ID='02030' OR DIVISION.ID='02033' OR DIVISION.ID='02301' OR DIVISION.ID='02302' OR DIVISION.ID='02303' OR DIVISION.ID='02305' OR DIVISION.ID='02306' OR DIVISION.ID='02312' OR DIVISION.ID='02313' OR DIVISION.ID='02318' OR DIVISION.ID='02403' OR DIVISION.ID='02406' OR DIVISION.ID='02413' OR DIVISION.ID='02440' OR DIVISION.ID='02441' OR DIVISION.ID='02442' OR DIVISION.ID='02443' OR DIVISION.ID='02446' OR DIVISION.ID='02452' OR DIVISION.ID='02470' OR DIVISION.ID='02471' OR DIVISION.ID='02475' OR DIVISION.ID='02490' OR DIVISION.ID='02500' OR DIVISION.ID='02501' OR DIVISION.ID='02502' OR DIVISION.ID='02505' OR DIVISION.ID='02510' OR DIVISION.ID='02511' OR DIVISION.ID='02512' OR DIVISION.ID='02514' OR DIVISION.ID='02518' OR DIVISION.ID='02520' OR DIVISION.ID='02530' OR DIVISION.ID='02534' OR DIVISION.ID='02536' OR DIVISION.ID='02540' OR DIVISION.ID='02542' OR DIVISION.ID='02543' OR DIVISION.ID='02548' OR DIVISION.ID='02550' OR DIVISION.ID='02555' OR DIVISION.ID='02560' OR DIVISION.ID='02565' OR DIVISION.ID='02566' OR DIVISION.ID='02569' OR DIVISION.ID='02570' OR DIVISION.ID='02572' OR DIVISION.ID='02573' OR DIVISION.ID='02575' OR DIVISION.ID='02582' OR DIVISION.ID='02585' OR DIVISION.ID='02586' OR DIVISION.ID='02587' OR DIVISION.ID='02588' OR DIVISION.ID='02677' OR DIVISION.ID='02842' OR DIVISION.ID='02881' OR DIVISION.ID='02882' OR DIVISION.ID='02883' OR DIVISION.ID='02999' OR DIVISION.ID='99999' OR DIVISION.ID='00706' OR DIVISION.ID='00368' OR DIVISION.ID='02070' OR DIVISION.ID='02100' OR DIVISION.ID='02102' OR DIVISION.ID='02105' OR DIVISION.ID='02130' OR DIVISION.ID='02132' OR DIVISION.ID='02139' OR DIVISION.ID='02140' OR DIVISION.ID='02149' OR DIVISION.ID='02150' OR DIVISION.ID='02160' OR DIVISION.ID='02171' OR DIVISION.ID='02200' OR DIVISION.ID='02601' OR DIVISION.ID='02603' OR DIVISION.ID='02604' OR DIVISION.ID='02605' OR DIVISION.ID='02606' OR DIVISION.ID='02809' OR DIVISION.ID='02810' OR DIVISION.ID='02811' OR DIVISION.ID='02813' OR DIVISION.ID='02831' OR DIVISION.ID='02832' OR DIVISION.ID='02833' OR DIVISION.ID='02834' OR DIVISION.ID='02835' OR DIVISION.ID='02836' OR DIVISION.ID='02837' OR DIVISION.ID='02838' OR DIVISION.ID='02840' OR DIVISION.ID='02843' OR DIVISION.ID='02845' OR DIVISION.ID='03001' OR DIVISION.ID='03002' OR DIVISION.ID='03003' OR DIVISION.ID='03004' OR DIVISION.ID='03005' OR DIVISION.ID='03006' OR DIVISION.ID='03007' OR DIVISION.ID='03008' OR DIVISION.ID='03009' OR DIVISION.ID='03010' OR DIVISION.ID='03011' OR DIVISION.ID='03012' OR DIVISION.ID='03013' OR DIVISION.ID='03015' OR DIVISION.ID='03016' OR DIVISION.ID='03017' OR DIVISION.ID='03018' ELSE
                                    BEGIN CASE
                                       CASE EBILL<Y,22>='1' OR EBILL<Y,22>='4'
                                          IF OCONV(EBILL<Y,30>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,31>,'MCU')[1,5]='REXEL' THEN
                                             BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                          END
                                       CASE EBILL<Y,22>='2'
                                          IF OCONV(EBILL<Y,24>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,25>,'MCU')[1,5]='REXEL' THEN
                                             BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                          END
                                       CASE EBILL<Y,22>='3'
                                          IF (OCONV(EBILL<Y,24>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,25>,'MCU')[1,5]='REXEL') AND (OCONV(EBILL<Y,30>,'MCU')[1,5]='REXEL' OR OCONV(EBILL<Y,30>,'MCU')[1,5]='REXEL') THEN
                                             BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                                          END
                                    END CASE
                                 END
                              END
                           END
                        END

                        ACC.CHARGE=0
                        FOR XX = 39 TO 56
                           IF EBILL<Y,XX>='Y' THEN
                              ACC.AMT=''
                              IF EBILL<Y,XX+25>#'' THEN
                                 ACC.AMT=ICONV(EBILL<Y,XX+25>,'MR2')
                              END ELSE
                                 IF EBILL<Y,1>='3' THEN
                                    ACC.AMT=ACC.REC<XX,ACC.SUB.POS>
                                    IF XX = 50 THEN
                                       IF SERVICE.DESCRIPTION[1,13]='HUNDREDWEIGHT' THEN
                                          ACC.AMT=750
                                       END
                                    END
                                 END
                              END
                              IF NET.CHARGE > ACC.AMT THEN
                                 NET.CHARGE=NET.CHARGE-ACC.AMT
                                 ACC.CHARGE=ACC.CHARGE+ACC.AMT
                              END ELSE
                                 ACC.CHARGE=ACC.CHARGE+NET.CHARGE
                                 NET.CHARGE=0
                              END
                           END
                        NEXT XX
                        IF EBILL<Y,85>#'' THEN     ; * SWB01
                           ACC.AMT=ICONV(EBILL<Y,85>,'MR2')  ; * SWB01
                           IF NET.CHARGE > ACC.AMT THEN      ; * SWB01
                              NET.CHARGE=NET.CHARGE-ACC.AMT  ; * SWB01
                              ACC.CHARGE=ACC.CHARGE+ACC.AMT  ; * SWB01
                           END ELSE      ; * SWB01
                              ACC.CHARGE=ACC.CHARGE+NET.CHARGE         ; * SWB01
                              NET.CHARGE=0         ; * SWB01
                           END           ; * SWB01
                        END              ; * SWB01
                        IF SERVICE.DESCRIPTION='GUARANTEED SERVICE REFUN' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           TEMP.INV.DATE=EBILL<Y,5>
                           IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                           TEMP.SHIP.DATE=EBILL<Y,23>
                           IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                           GOOD.TEST=1
                           IF LEN(TEMP.INV.DATE)=8 THEN
                              TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                              TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                           END ELSE
                              GOOD.TEST=0
                           END
                           IF LEN(TEMP.SHIP.DATE)=8 THEN
                              TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                              TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                           END ELSE
                              GOOD.TEST=0
                           END

                           IF GOOD.TEST THEN

                              BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                              IF ZERO.OVERCHARGE=0 THEN      ; * JMK52
                                 EBILL<Y,93>=EBILL<Y,37>     ; * JMK52
                                 EBILL.SAVE<Y,93>=EBILL<Y,37>          ; * JMK52
                              END        ; * JMK52
                           END ELSE
                              BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                              IF ZERO.OVERCHARGE=0 THEN      ; * JMK52
                                 EBILL<Y,93>=EBILL<Y,37>     ; * JMK52
                                 EBILL.SAVE<Y,93>=EBILL<Y,37>          ; * JMK52
                              END        ; * JMK52
                           END
                        END
                        IF SERVICE.DESCRIPTION='HOST MANIFEST VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='UPS ONL WORLDSHIP VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE

                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN

                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='VENDOR MANIFEST VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='CAMPUS SHIP VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN

                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='UPS INTERNET VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='MANIFEST EDI VOID' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                                 IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                    IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                       IF SELECT.ALL THEN    ; * JMK13
                                          EBILL.ERROR<1,-1>='Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>     ; * JMK13
                                       END ELSE    ; * JMK13
                                          CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                       END         ; * JMK13
                                       GOTO THE.END
                                    END
                                    BM.POS=VOID.ARRAY<4,TEMP.POS>
                                    ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                    ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                    PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                                 END
                              END
                           END ELSE
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN

                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                        END
                        IF SERVICE.DESCRIPTION='GUARANTEE SERVICE REFUN' THEN
                           LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                              EMAIL.OUT=''
                              EMAIL.OUT<1>='DFriend@afs.net'
                              EMAIL.OUT<3>=''      ; * BCC: Email addresses
                              EMAIL.OUT<4>='Reports@afs.net'           ; * From Email address
                              EMAIL.OUT<5>='Possible GSR'

* Email body
                              EMAIL.OUT<6,-1>='GSR for ':TRACKING.NUMBER:' in shipper number ':SHIPPER.NUMBER
                              VIN=EMAIL.OUT
                              VOUT=''
                              *******                      CALL SENDMAIL(VIN,VOUT)

                           END
                        END
                        IF SERVICE.DESCRIPTION='CREDIT ADJUSTMENTS' THEN
                           ACC.CHARGE=0
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                           COMM.SWITCH=1           ; * JMK48
                           IF EBILL<Y,58>[1,18]='DUPLICATE SHIPMENT' THEN COMM.SWITCH=0    ; * JMK48
                           IF EBILL<Y,58>[1,15]='BILLED FOR VOID' THEN COMM.SWITCH=0       ; * JMK48
                           IF EBILL<Y,58>[1,13]='SHIPMENT VOID' THEN COMM.SWITCH=0         ; * JMK48
                           IF EBILL<Y,58>[1,4]='RESI' THEN COMM.SWITCH=0         ; * JMK48
                           IF EBILL<Y,58>[1,3]='ADD' THEN    ; * JMK54
                              BEGIN CASE           ; * JMK54
                                 CASE SHIPPER.NUMBER='E28577'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='429866'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='411525'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='16376W'          ; * JMK54 - Courter Co
                                 CASE CLIENT.ID='01503'      ; * JMK65
                                 CASE 1  ; * JMK54
                                    COMM.SWITCH=0  ; * JMK54
                              END CASE   ; * JMK54
                           END           ; * JMK54
                           IF EBILL<Y,58>[1,8]='GOODWILL' AND INDEX(EBILL<Y,59>,'BARKER',1) AND INDEX(EBILL<Y,59>,'BRIAN',1) THEN COMM.SWITCH=0        ; * JMK48
                           IF EBILL<Y,58>[1,8]='GOODWILL' AND INDEX(EBILL<Y,59>,'BARKER',1) AND INDEX(EBILL<Y,59>,'BRYAN',1) THEN COMM.SWITCH=0        ; * JMK48
                           IF EBILL<Y,59>[1,15]='BILLED FOR VOID' THEN COMM.SWITCH=0       ; * JMK48
                           IF EBILL<Y,59>[1,4]='RESI' THEN COMM.SWITCH=0         ; * JMK48
                           IF EBILL<Y,59>[1,3]='ADD' THEN    ; * JMK54
                              BEGIN CASE           ; * JMK54
                                 CASE SHIPPER.NUMBER='E28577'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='429866'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='411525'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='16376W'          ; * JMK54 - Courter Co
                                 CASE CLIENT.ID='01503'      ; * JMK65
                                 CASE 1  ; * JMK54
                                    COMM.SWITCH=0  ; * JMK54
                              END CASE   ; * JMK54
                           END           ; * JMK54
                           IF EBILL<Y,60>[1,15]='BILLED FOR VOID' THEN COMM.SWITCH=0       ; * JMK48
                           IF EBILL<Y,60>[1,4]='RESI' THEN COMM.SWITCH=0         ; * JMK48

                           IF EBILL<Y,60>[1,3]='ADD' THEN    ; * JMK54
                              BEGIN CASE           ; * JMK54
                                 CASE SHIPPER.NUMBER='E28577'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='429866'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='411525'          ; * JMK54 - Courter Co
                                 CASE SHIPPER.NUMBER='16376W'          ; * JMK54 - Courter Co
                                 CASE CLIENT.ID='01503'      ; * JMK65
                                 CASE 1  ; * JMK54
                                    COMM.SWITCH=0  ; * JMK54
                              END CASE   ; * JMK54
                           END           ; * JMK54
                           IF COMM.SWITCH THEN     ; * JMK48

                              NET.CHARGE=0
                           END

                           IF NET.CHARGE < 0 THEN
                              TEMP.INV.DATE=EBILL<Y,5>
                              IF LEN(TEMP.INV.DATE)=7 THEN TEMP.INV.DATE=0:TEMP.INV.DATE
                              TEMP.SHIP.DATE=EBILL<Y,23>
                              IF LEN(TEMP.SHIP.DATE)=7 THEN TEMP.SHIP.DATE=0:TEMP.SHIP.DATE
                              GOOD.TEST=1
                              IF LEN(TEMP.INV.DATE)=8 THEN
                                 TEMP.INV.DATE=TEMP.INV.DATE[1,2]:'-':TEMP.INV.DATE[3,2]:'-':TEMP.INV.DATE[5,4]
                                 TEMP.INV.DATE=ICONV(TEMP.INV.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF LEN(TEMP.SHIP.DATE)=8 THEN
                                 TEMP.SHIP.DATE=TEMP.SHIP.DATE[1,2]:'-':TEMP.SHIP.DATE[3,2]:'-':TEMP.SHIP.DATE[5,4]
                                 TEMP.SHIP.DATE=ICONV(TEMP.SHIP.DATE,'D')
                              END ELSE
                                 GOOD.TEST=0
                              END
                              IF GOOD.TEST THEN
                                 IF TEMP.INV.DATE-TEMP.SHIP.DATE > 5 THEN
                                    BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                    IF ZERO.OVERCHARGE=0 THEN          ; * JMK52
                                       EBILL<Y,93>=EBILL<Y,37>         ; * JMK52
                                       EBILL.SAVE<Y,93>=EBILL<Y,37>    ; * JMK52
                                    END  ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                                 IF ZERO.OVERCHARGE=0 THEN   ; * JMK52
                                    EBILL<Y,93>=EBILL<Y,37>  ; * JMK52
                                    EBILL.SAVE<Y,93>=EBILL<Y,37>       ; * JMK52
                                 END     ; * JMK52
                              END
                           END
                           NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        END
                        IF SHIPPER.NUMBER='E79490' THEN
                           IF SERVICE.DESCRIPTION[1,11]='ADDR. CORR.' AND NET.CHARGE+0 > 0 THEN
                              IF SERVICE.DESCRIPTION[1,18]='ADDR. CORR. GROUND' THEN       ; * JMK73
                                 MAX.ADDR.CORR='500'
                              END ELSE
                                 MAX.ADDR.CORR='1000'
                              END
                              ADDR.CORR.ID=EBILL<Y,32>:'*':EBILL<Y,35>
                              LOCATE ADDR.CORR.ID IN ADDR.CORR.ARRAY<1> BY 'AL' SETTING ADDR.CORR.POS THEN
                                 ADDR.CORR.ARRAY<3,ADDR.CORR.POS>=ADDR.CORR.ARRAY<3,ADDR.CORR.POS>+NET.CHARGE
                                 ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE
                                 IF EBILL<Y,33>#'' THEN
                                    ADDR.CORR.ARRAY<6,ADDR.CORR.POS>=EBILL<Y,33>
                                 END
                                 IF EBILL<Y,34>#'' THEN
                                    ADDR.CORR.ARRAY<7,ADDR.CORR.POS>=EBILL<Y,34>
                                 END
                                 NET.CHARGE=0
                              END ELSE
                                 INS ADDR.CORR.ID BEFORE ADDR.CORR.ARRAY<1,ADDR.CORR.POS>
                                 INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<3,ADDR.CORR.POS>
                                 IF NET.CHARGE > MAX.ADDR.CORR THEN
                                    ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE-MAX.ADDR.CORR
                                    NET.CHARGE = MAX.ADDR.CORR
                                 END
                                 INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<2,ADDR.CORR.POS>
                                 INS EBILL<Y,32> BEFORE ADDR.CORR.ARRAY<5,ADDR.CORR.POS>
                                 INS EBILL<Y,33> BEFORE ADDR.CORR.ARRAY<6,ADDR.CORR.POS>
                                 INS EBILL<Y,34> BEFORE ADDR.CORR.ARRAY<7,ADDR.CORR.POS>
                                 INS EBILL<Y,35> BEFORE ADDR.CORR.ARRAY<8,ADDR.CORR.POS>
                              END
                           END
                        END
                        BM.ARRAY<ATT.SETTING+4,BM.POS>+=NET.CHARGE     ; * Net per service description for packages
                        BM.ARRAY<ATT.SETTING+13,BM.POS>+=ACC.CHARGE    ; * Accessioral Charge
                        GROSS.CHARGE=NET.CHARGE+ICONV(EBILL<Y,38>,'MR2')
                        BM.ARRAY<ATT.SETTING+20>=BM.ARRAY<ATT.SETTING+20>+ICONV(EBILL<Y,37>,'MR2')
                        MIN.CHARGE=0
                        BEGIN CASE
                           CASE SERVICE.DESCRIPTION='COM. 3DAY SELECT'
                              MIN.CHARGE=795       ; * DRF06
                           CASE SERVICE.DESCRIPTION='RES. 3DAY SELECT'
                              MIN.CHARGE=1130      ; * DRF06
                           CASE SERVICE.DESCRIPTION='COM. GROUND'
                              MIN.CHARGE=624       ; * DRF06
                           CASE SERVICE.DESCRIPTION='RES. GROUND'
                              MIN.CHARGE=914       ; * DRF06
                           CASE SERVICE.DESCRIPTION='GROUND' AND EBILL<Y,20>='WWS'
                              MIN.CHARGE=1645      ; * DRF06
                           CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT GROUND' AND EBILL<Y,18> => 4 AND EBILL<Y,18> <= 8
                              MIN.CHARGE=4500
                           CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT GROUND'
                              MIN.CHARGE=4100
                        END CASE
                        IF GROSS.CHARGE > MIN.CHARGE + (MIN.CHARGE*BM.ARRAY<2,BM.POS>/10000)'R0' OR BM.ARRAY<2,BM.POS>=10000 THEN
                           BM.ARRAY<ATT.SETTING+5,BM.POS>+=ICONV(EBILL<Y,38>,'MR2')        ; * Incentive per service description for packages
                           BM.ARRAY<ATT.SETTING+6,BM.POS>+=GROSS.CHARGE
                           IF ZERO.LOGISTICS=0 AND SERVICE.DESCRIPTION#'CREDIT ADJUSTMENTS' THEN     ; * JMK52
                              IF EBILL<Y,20>='ASD' THEN      ; * JMK61
                                 BEGIN CASE        ; * JMK61
                                    CASE SERVICE.DESCRIPTION='COM. GROUND'       ; * JMK61
                                       GROSS.CHARGE-=500     ; * JMK61
                                    CASE SERVICE.DESCRIPTION='RES. GROUND'       ; * JMK61
                                       GROSS.CHARGE-=500     ; * JMK61
                                    CASE 1         ; * JMK61
                                 END CASE          ; * JMK61
                              END        ; * JMK61
                              LOGISTICS.AMT=0      ; * JMK52
                              IF BM.ARRAY<2,BM.POS>#'10000' THEN       ; * JMK52
                         *****          BEGIN CASE
                           *****           CASE FILE.TYPE = 1
                          *****               LOGISTICS.AMT=ICONV(EBILL<Y,38>,'MR2')-(GROSS.CHARGE*BM.ARRAY<2,BM.POS>/10000)'R0'
                            *****          CASE FILE.TYPE = 2
                            *****             LOGISTICS.AMT=ICONV(EBILL<Y,38>,'MR2')-(GROSS.CHARGE*BM.ARRAY<22,BM.POS>/10000)'R0'         ; * JMK52
                            *****          CASE 1
                             *****            CRT "CRAP FILE TYPE IS ":FILE.TYPE
                             *****      END CASE
                              *****           GB1 = EBILL<Y,4>
                              *****     IF GB1 = "000000730201167" THEN
                               *****       GB3 = ICONV(EBILL<Y,38>,'MR2')
                                *****      GB4 = GROSS.CHARGE
                                *****      DEBUG
                               *****    END
                               LOGISTICS.AMT=ICONV(EBILL<Y,38>,'MR2')-(GROSS.CHARGE*BM.ARRAY<2,BM.POS>/10000)'R0'
                               
                              END        ; * JMK52
                              EBILL<Y,94>=-LOGISTICS.AMT'R26'          ; * JMK52
                              EBILL.SAVE<Y,94>=-LOGISTICS.AMT'R26'     ; * JMK52
                           END           ; * JMK52
*
* Calculate hundredweight using percent in old pck benchmark or amount
* in old ltr benchmark - net charges. Take the higher of the two for
* logitics and store it in BM.ARRAY<16,pos>.
*

                           IF SERVICE.DESCRIPTION[1,13]='HUNDREDWEIGHT' AND SERVICE.DESCRIPTION#'HUNDREDWEIGHT RES. ADJ.' THEN
                              HUN.LOG=ICONV(EBILL<Y,38>,'MR2')-((GROSS.CHARGE*BM.ARRAY<ATT.SETTING+2,BM.POS>/10000)'R0')
                              MIN.HUN.LOG=BM.ARRAY<ATT.SETTING+3,BM.POS>-NET.CHARGE
                              IF ((CLIENT.ID='00883' AND (SHIPPER.NUMBER='733E43' OR SHIPPER.NUMBER='751766' OR SHIPPER.NUMBER='0A4V07')) OR CLIENT.ID#'00883') THEN
*
* Only use the min hundred weight for shipper 733E43, 751766, and 0A4V07
* for Pollock and for all of our other clients. - 07/24/03 DRF
*
                                 IF HUN.LOG > MIN.HUN.LOG THEN
                                    BM.ARRAY<ATT.SETTING+16,BM.POS>+=HUN.LOG
                                    IF EBILL<Y,20>='ASD' THEN          ; * JMK61
                                       BEGIN CASE  ; * JMK61
                                          CASE SERVICE.DESCRIPTION='COM. GROUND'           ; * JMK61
                                             GROSS.CHARGE-=500         ; * JMK61
                                          CASE SERVICE.DESCRIPTION='RES. GROUND'           ; * JMK61
                                             GROSS.CHARGE-=500         ; * JMK61
                                          CASE 1   ; * JMK61
                                       END CASE    ; * JMK61
                                    END  ; * JMK61
                                    LOGISTICS.AMT=0          ; * JMK52
                                    IF BM.ARRAY<2,BM.POS>#'10000' THEN           ; * JMK52
                                       LOGISTICS.AMT=HUN.LOG'R26'      ; * JMK52
                                    END  ; * JMK52
                                    EBILL<Y,94>+=-LOGISTICS.AMT'R26'   ; * JMK52
                                    EBILL.SAVE<Y,94>+=-LOGISTICS.AMT'R26'        ; * JMK52
                                 END ELSE
                                    BM.ARRAY<ATT.SETTING+16,BM.POS>+=MIN.HUN.LOG
                                    IF EBILL<Y,20>='ASD' THEN          ; * JMK61
                                       BEGIN CASE  ; * JMK61
                                          CASE SERVICE.DESCRIPTION='COM. GROUND'           ; * JMK61
                                             GROSS.CHARGE-=500         ; * JMK61
                                          CASE SERVICE.DESCRIPTION='RES. GROUND'           ; * JMK61
                                             GROSS.CHARGE-=500         ; * JMK61
                                          CASE 1   ; * JMK61
                                       END CASE    ; * JMK61
                                    END  ; * JMK61
                                    LOGISTICS.AMT=0          ; * JMK52
                                    IF BM.ARRAY<2,BM.POS>#'10000' THEN           ; * JMK52
                                       LOGISTICS.AMT=MIN.HUN.LOG'R26'  ; * JMK52
                                    END  ; * JMK52
                                    EBILL<Y,94>+=-LOGISTICS.AMT'R26'   ; * JMK52
                                    EBILL.SAVE<Y,94>+=-LOGISTICS.AMT'R26'        ; * JMK52
                                 END
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+16,BM.POS>+=HUN.LOG
                                 IF EBILL<Y,20>='ASD' THEN   ; * JMK61
                                    BEGIN CASE     ; * JMK61
                                       CASE SERVICE.DESCRIPTION='COM. GROUND'    ; * JMK61
                                          GROSS.CHARGE-=500  ; * JMK61
                                       CASE SERVICE.DESCRIPTION='RES. GROUND'    ; * JMK61
                                          GROSS.CHARGE-=500  ; * JMK61
                                       CASE 1      ; * JMK61
                                    END CASE       ; * JMK61
                                 END     ; * JMK61
                                 LOGISTICS.AMT=0   ; * JMK52
                                 IF BM.ARRAY<2,BM.POS>#'10000' THEN    ; * JMK52
                                    LOGISTICS.AMT=HUN.LOG'R26'         ; * JMK52
                                 END     ; * JMK52
                                 EBILL<Y,94>+=-LOGISTICS.AMT'R26'      ; * JMK52
                                 EBILL.SAVE<Y,94>+=-LOGISTICS.AMT'R26'           ; * JMK52
                              END
                           END
                        END
                     END
                     LOCATE TRACKING.NUMBER IN BM.ARRAY<ATT.SETTING+81,BM.POS> BY 'AL' SETTING TRK.POS THEN    ; * JMK23
                        BM.ARRAY<ATT.SETTING+82,BM.POS,TRK.POS>+=ICONV(EBILL<Y,37>,'MR2')  ; * JMK23
                     END ELSE            ; * JMK23
                        INS TRACKING.NUMBER BEFORE BM.ARRAY<ATT.SETTING+81,BM.POS,TRK.POS>           ; * JMK23
                        INS ICONV(EBILL<Y,37>,'MR2') BEFORE BM.ARRAY<ATT.SETTING+82,BM.POS,TRK.POS>  ; * JMK23
                        IF EXP.LINE=1 THEN         ; * JMK47
                           IF CLIENT.ID='30028' THEN         ; * JMK35
                              INS (EBILL<Y,89>:'.':EBILL<Y,90>:'.':EBILL<Y,91>) BEFORE BM.ARRAY<ATT.SETTING+83,BM.POS,TRK.POS>     ; * JMK35
                           END ELSE      ; * JMK35
                              INS EBILL<Y,89> BEFORE BM.ARRAY<ATT.SETTING+83,BM.POS,TRK.POS>         ; * JMK23
                           END           ; * JMK35
                        END              ; * JMK23
                     END                 ; * JMK23

                     IF EXP.LINE=1 THEN  ; * JMK47
                        EXP.STRING=EBILL<Y,89>     ; * JMK35
                        IF CLIENT.ID='30028' THEN  ; * JMK35
                           EXP.STRING=EBILL<Y,89>:'.':EBILL<Y,90>:'.':EBILL<Y,91>          ; * JMK35
                        END              ; * JMK35
                        LOCATE EXP.STRING IN BM.ARRAY<ATT.SETTING+84> BY 'AL' SETTING EXP.POS THEN   ; * JMK23 ; * JMK35
                           BM.ARRAY<ATT.SETTING+85,EXP.POS>+=ICONV(EBILL<Y,37>,'MR2')      ; * JMK23
                        END ELSE         ; * JMK23
                           INS EXP.STRING BEFORE BM.ARRAY<ATT.SETTING+84,EXP.POS>          ; * JMK23 ; * JMK35
                           INS ICONV(EBILL<Y,37>,'MR2') BEFORE BM.ARRAY<ATT.SETTING+85,EXP.POS>      ; * JMK23
                        END              ; * JMK23
                     END                 ; * JMK23
                  END ELSE
                     IF SELECT.ALL THEN  ; * JMK13
                        EBILL.ERROR<1,-1>='Service description read with no logistics benchmark on file - Aborting.  '   ; * JMK13
                        EBILL.ERROR:='Run UPS.BM.SETUP and provide a benchmark % for client: ':CLIENT.ID:' and service '           ; * JMK13
                        EBILL.ERROR:='description: ':SERVICE.DESCRIPTION:'.'     ; * JMK13
                     END ELSE            ; * JMK13
                        CRT @(0,20):'Service description read with no logistics benchmark on file - Aborting.':@(-4)
                        CRT @(0,21):'Run UPS.BM.SETUP and provide a benchmark % for client: ':CLIENT.ID:' and service':@(-4)
                        CRT @(0,22):'description: ':SERVICE.DESCRIPTION:'.':@(-4)
                     END                 ; * JMK13
                     GOTO THE.END
                  END
                  LOCATE EBILL<Y,23> IN SHIP.DATE.LIST<1,X> BY 'AL' SETTING POS ELSE
                     INS EBILL<Y,23> BEFORE SHIP.DATE.LIST<1,X,POS>
                  END
               END
            NEXT Y                       ; *  begins around 1568       lines in file

            *************************************************************
            * writeseq
            *************************************************************
            WRITE BM.ARRAY ON F.UPS.BM,SHIPPER.NUMBER:FILE.DATE:'*TEMP'          ; * This is deleted before this program ends


         NEXT X                          ; ************************************begins around    1112     shippers

* Pass 4:
*   Build pro number and bills ID, calculate variances and display on screen for each shipper number
*   Build the BILL.REC item and write it to the work file
*   (Don't write any bill records anything until it is certain that all can be written)
***************************************************************************************
PASS4:***
***************************************************************************************
  *****       GO PASS6
         PASS.NUMBER=4
         CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Building bill items, calculating variances, writing to temp files...':
         BILLS.WRITTEN=0
         FOR X=1 TO NUM.SHIPPERS         ; ********************* ends around  3321
            SHIPPER.NUMBER=SHIPPER.LIST<1,X>
            FILE.DATE=SHIPPER.LIST<4,X>
            FILE.DATE=FILE.DATE[1,2]:'-':FILE.DATE[3,2]:'-':FILE.DATE[5,4]
            FILE.DATE=ICONV(FILE.DATE,'D')
            BILL.DATE=FILE.DATE          ; * Used for call to GET.EXPENSE and Bills file
            FILE.DATE=SHIPPER.LIST<4,X>

            CLIENT.ID=SHIPPER.LIST<2,X>
            DIVISION.ID=SHIPPER.LIST<3,X>
            UPS.INVOICE.AMOUNT=SHIPPER.LIST<6,X>
            INV.NUM=SHIPPER.LIST<8,X>    ; * JMK09
            UPS.VC=SHIPPER.LIST<9,X>     ; * JMK21
            DUE.DATE=SHIPPER.LIST<10,X>  ; * NPR02
            BEGIN CASE
               CASE CARRIER.ID='00041'
                  PRO.NUMBER=SHIPPER.NUMBER[1,3]:'-':SHIPPER.NUMBER[4,3]
                  PRO.NUMBER:=FILE.DATE[1,2]:FILE.DATE[3,2]:FILE.DATE[7,2]
               CASE 1
                  PRO.NUMBER=SHIPPER.NUMBER
            END CASE
            BILLS.ID=CARRIER.ID:'*':PRO.NUMBER:'-O*0'        ; * Same ID used for Bills, Bills Hist, and CRX

            READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='Client file could not be read - Aborting.  '          ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'Client file could not be read - Aborting.':@(-4)
               END                       ; * JMK13
               GOTO THE.END
            END
            IF CLIENT.REC<12>='Y' AND DIVISION.ID='' THEN    ; * JMK11
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='Client ':CLIENT.ID:' requires division which is not setup - Aborting.  '  ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'Client ':CLIENT.ID:' requires division which is not setup - Aborting.':@(-4)    ; * JMK11
               END                       ; * JMK13
               GOTO THE.END              ; * JMK11
            END                          ; * JMK11
            CLIENT.NAME=CLIENT.REC<2>
            USE.EXPENSE=CLIENT.REC<13>   ; * 'Y' for yes, anything else for 'N'
            IF USE.EXPENSE#'Y' THEN USE.EXPENSE='N'          ; * JMKXXX

            OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='FB.BILLS for client ':CLIENT.ID:' could not be opened - Aborting.  '      ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'FB.BILLS for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
               END                       ; * JMK13
               GOTO THE.END
            END
            OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILLS.HIST ELSE
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='FB.BILLS.HIST for client ':CLIENT.ID:' could not be opened - Aborting.  '           ; * JMK13
               END ELSE                  ; * JMK13
                  CRT @(0,20):'FB.BILLS.HIST for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
               END                       ; * JMK13
               GOTO THE.END
            END
     ******       READ BILL.REC FROM F.BILLS,BILLS.ID THEN
       ******        IF SELECT.ALL THEN        ; * JMK13
       ******           EBILL.WARNING<1,-1>='Pro Number ':PRO.NUMBER:' is already in FB.BILLS,':CLIENT.ID:' file - skipping.  '          ; * JMK13
        ******       END ELSE                  ; * JMK13
       ******           CALL ELINE('Pro Number ':PRO.NUMBER:' is already in FB.BILLS,':CLIENT.ID:' file - skipping.')
        ******       END                       ; * JMK13
        ******       SHIPPER.LIST<11,X>='1'    ; * JMK74
        ******       GOTO SKIP.BILL            ; * Bill is already in file - Skip
        ******    END
       ******     READ BILL.REC FROM F.BILLS.HIST,BILLS.ID THEN
        ******       IF SELECT.ALL THEN        ; * JMK13
        ******          EBILL.WARNING<1,-1>='Pro Number ':PRO.NUMBER:' is already in FB.BILLS.HIST,':CLIENT.ID:' file - skipping.  '     ; * JMK13
        ******       END ELSE                  ; * JMK13
        ******          CALL ELINE('Pro Number ':PRO.NUMBER:' is already in FB.BILLS.HIST,':CLIENT.ID:' file - skipping.')
        ******       END                       ; * JMK13
         ******      SHIPPER.LIST<11,X>='1'    ; * JMK74
        ******       GOTO SKIP.BILL            ; * Bill is already in file - Skip
        ******    END
            BILLS.WRITTEN+=1             ; * Add up the number of bills written (not skipped)
            ENTRY.DATE=CLIENT.REC<82>+1  ; * Last processed + 1 day
            IF ENTRY.DATE<DATE() THEN
               ENTRY.DATE=DATE()
            END
            GOSUB CALCULATE.CHARGES
            FOR ZZZ = 1 TO 3             ; * ends around 3318
               IF ZZZ = 1 THEN
                  NEW.PRO.NUMBER=PRO.NUMBER:'-O'
               END
               IF ZZZ = 2 THEN
                  NEW.PRO.NUMBER=PRO.NUMBER:'-I'
               END
               IF ZZZ = 3 THEN
                  NEW.PRO.NUMBER=PRO.NUMBER:'-T'
               END
               BILLS.ID=CARRIER.ID:'*':NEW.PRO.NUMBER:'*0'

               ATT.SETTING=(ZZZ-1)*20
               
               
               GOSUB CALCULATE.TOTALS
               
               
               CRT @(3,10):'Shipper Number  : ':SHIPPER.NUMBER:@(-4)
               CRT @(3,11):'Client Number   : ':CLIENT.ID:@(-4)
               CRT @(3,12):'Client Name     : ':CLIENT.NAME:@(-4)
               CRT @(3,13):'Division Number : ':DIVISION.ID:@(-4)
               CRT @(3,14):'Pro Number      : ':NEW.PRO.NUMBER:@(-4)
               CRT @(3,15):'Total Invoice Amount      : $ ':TOTAL.INVOICE.AMOUNT'R26#9':@(-4)
               CRT @(3,16):'Total Logistics Variance  : $ ':TOTAL.LOGISTICS.VARIANCE'R26#9':@(-4)
               CRT @(3,17):'Total Overcharge Variance : $ ':TOTAL.OVERCHARGE.VARIANCE'R26#9':@(-4)
               CRT @(3,18):'Total Discount Variance   : $ ':TOTAL.DISCOUNT.VARIANCE'R26#9':@(-4)
              
              
             

               CREATE.BILL=0             ; * JMK40
               IF TOTAL.INVOICE.AMOUNT#0 THEN CREATE.BILL=1  ; * JMK40
               IF TOTAL.LOGISTICS.VARIANCE#0 THEN CREATE.BILL=1        ; * JMK40
               IF TOTAL.OVERCHARGE.VARIANCE#0 THEN CREATE.BILL=1       ; * JMK40
               IF TOTAL.DISCOUNT.VARIANCE#0 THEN CREATE.BILL=1         ; * JMK40
               IF CLIENT.ID='01476' THEN CREATE.BILL=1       ; * JMK40
               IF CLIENT.ID='01088' THEN CREATE.BILL=1       ; * JMK40
               
               IF CLIENT.ID='01633' THEN CREATE.BILL=1       ; * JMKXXX
               IF CLIENT.ID='01826' THEN CREATE.BILL=1
               IF SHIPPER.NUMBER='A37688' THEN CREATE.BILL=1           ; * JMK51
               IF SHIPPER.NUMBER='A5V915' THEN CREATE.BILL=1           ; * JMK51
               IF SHIPPER.NUMBER='AE7075' THEN CREATE.BILL=1           ; * JMK51
               IF SHIPPER.NUMBER='21W730' THEN CREATE.BILL=1           ; * JMK51
               IF SHIPPER.NUMBER='34Y29Y' THEN CREATE.BILL=1
               IF SHIPPER.NUMBER='5938W6' THEN CREATE.BILL=1           ; * JMK51
               IF CREATE.BILL THEN       ; * JMK40
                  IF CLIENT.ID='01410' THEN
                     TOTAL.INVOICE.AMOUNT=0
                  END
                  IF CLIENT.ID='01185' THEN
                     TOTAL.INVOICE.AMOUNT=0
                  END
                  IF CLIENT.ID='01090' THEN
                     TOTAL.INVOICE.AMOUNT=0
                  END
                  IF CLIENT.ID='01416' THEN
                     TOTAL.INVOICE.AMOUNT=0
                  END
                  IF UPS.INVOICE.AMOUNT < 0 THEN
                     TOTAL.INVOICE.AMOUNT=0
                  END
                  IF BILL.DATE < CLIENT.REC<27> THEN
                     IF SELECT.ALL THEN  ; * JMK13
                        EBILL.ERROR<1,-1>='Ebill contains bill(s) prior to the startup date.  '      ; * JMK13
                     END ELSE            ; * JMK13
                        CALL ELINE('Ebill contains bill(s) prior to the startup date')
                     END                 ; * JMK13
                     GOTO THE.END
                  END
                  GOSUB SETUP.BILL.REC


* Write bills record to a work file for each client
                  WRITE BILL.REC ON F.WORK,CLIENT.ID:'*':BILLS.ID      ; * append client ID to the regular Bills item ID for the purpose of the work file
               END

               IF SHIPPER.NUMBER='E79490' AND ADDR.CORR.ARRAY<4>+0#0 THEN
                  *****    GOSUB EMAIL.ADDR.CORR.INFO
               END
            NEXT ZZZ                     ; *********************** begins around 3169
*************************************************************
SKIP.BILL:***
         NEXT X                          ; *  begins around  3086  shipper
*
         CLIENTS.WITH.BILLS = ""         ; *NPR01
         IF SELECT.ALL ELSE              ; * JMK13
            CALL ELINE('Number of bills to be written to FB.BILLS and FB.BILLS.HIST files = ':BILLS.WRITTEN)
         END                             ; * JMK13
         IF BILLS.WRITTEN=0 THEN
            CRT @(0,20):'All e-Bills already exist - No bills were written.'
            CRT @(0,21):'This file has been imported before - Moving it to archive folder.'
            GOSUB DELETE.AND.ARCHIVE.EXISTING.EBILL.FILE
            GOTO THE.END
         END ELSE
            CRT @(0,8):@(-3):@(0,8):'Writing ':BILLS.WRITTEN:' items to bill files...':

* Read bills from temp file and rewrite to FB.BILLS, FB.BILLS.HIST, and FB.BILLS.CRX
            CLEARDATA                    ; * JMK76
            STMT='SSELECT ':WORK.FILE
            EXECUTE STMT RTNLIST WORK.LIST CAPTURING STMT.OUTPUT       ; * JMK75
            NUM.FILES=@SELECTED
            IF NUM.FILES < 1 THEN        ; * JCW01
               IF SELECT.ALL THEN        ; * JMK13
                  EBILL.ERROR<1,-1>='No bills exist in work file to write to bills files - Aborting.  '        ; * JMK13
               END ELSE
                  CRT @(0,20):'No bills exist in work file to write to bills files - Aborting.':@(-4)
               END                       ; * JMK13
               GOTO THE.END
            END
            DONE=0
            LOOP
               READNEXT CLIENT.BILL.ID FROM WORK.LIST ELSE DONE=1      ; * JMK75
            UNTIL DONE=1
               READ BILL.REC FROM F.WORK,CLIENT.BILL.ID ELSE NULL
               CLIENT.ID=FIELD(CLIENT.BILL.ID,'*',1)         ; * Client number
               BILLS.ID=CLIENT.BILL.ID[7,LEN(CLIENT.BILL.ID)-6]
               OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
                  IF SELECT.ALL THEN     ; * JMK13
                     EBILL.ERROR<1,-1>='FB.BILLS for client ':CLIENT.ID:' could not be opened - Aborting.  '   ; * JMK13
                  END ELSE               ; * JMK13
                     CRT @(0,20):'FB.BILLS for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
                  END                    ; * JMK13
                  GOTO THE.END
               END
               OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILLS.HIST ELSE
                  IF SELECT.ALL THEN     ; * JMK13
                     EBILL.ERROR<1,-1>='FB.BILLS.HIST for client ':CLIENT.ID:' could not be opened - Aborting.  '        ; * JMK13
                  END ELSE               ; * JMK13
                     CRT @(0,20):'FB.BILLS.HIST for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
                  END                    ; * JMK13
                  GOTO THE.END
               END
    ******           READ BILL.REC FROM F.BILLS,BILLS.ID THEN
      ******            IF SELECT.ALL ELSE     ; * JMK13
    ******                 CALL ELINE('Pro Number ':PRO.NUMBER:' is already in FB.BILLS,':CLIENT.ID:' file - skipping.')
    ******              END                    ; * JMK13
    ******              GOTO SKIP.WRITE        ; * Bill is already in file - Skip
    ******           END
   ******            READ BILL.REC FROM F.BILLS.HIST,BILLS.ID THEN
    ******              IF SELECT.ALL ELSE     ; * JMK13
     ******                CALL ELINE('Pro Number ':PRO.NUMBER:' is already in FB.BILLS.HIST,':CLIENT.ID:' file - skipping.')
     ******             END                    ; * JMK13
     ******             GOTO SKIP.WRITE        ; * Bill is already in file - Skip
      ******         END
      ******         LOCATE CLIENT.ID IN CLIENTS.WITH.BILLS SETTING CPOS ELSE          ; *NPR01
      ******            CLIENTS.WITH.BILLS<-1> = CLIENT.ID         ; *NPR01
      ******        END                       ; *NPR01

               ******        WRITE BILL.REC ON F.BILLS,BILLS.ID
               ******        WRITE BILL.REC ON F.BILLS.HIST,BILLS.ID



               *****         CALL UPD.FB.STATUS.UPDATE(CLIENT.ID,BILLS.ID,F.STATUS.UPDATE)        ; * JMK64
               *******       GOSUB SETUP.CRX.BILL.REC
               ******        WRITE CRX.BILL.REC ON F.BILLS.CRX,BILLS.ID
               IF CARRIER.ID = '00041' THEN
                  ACTIVITY.CODE = 1
                  ACT.TRANS.DATE = BILL.DATE
                  ****     GOSUB UPD.UPS.SCHED

                  ACTIVITY.CODE = 2
                  ACT.TRANS.DATE = DUE.DATE
                  *****      GOSUB UPD.UPS.SCHED
               END
*************************************************************
SKIP.WRITE:    ***
            REPEAT
         END

        
* Pass 6:
*   Extract packages for each client to create separate client_division specific
*   e-Bill files to include with the client's process emails and write to UPSDATA
*   Build GSR spreadsheet for all GSR refunds and email to Wendy Cartolano who processes
*   UPS service refunds
****************************************************************************
PASS6:***
********************************************************************************

         PASS.NUMBER=6
         CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Building and writing client/division specific e-Bill files...':
         GSR.SPREADSHEET=''
         OLD.SHIPPER.NUMBER='**********'
         FOR X=1 TO NUM.SHIPPERS         ; *********************** ends around  3711
            SHIPPER.NUMBER=SHIPPER.LIST<1,X>
            OFILE.DATE=SHIPPER.LIST<4,X>           ; * JMK79
            FILE.DATE=SHIPPER.LIST<4,X>
            FILE.DATE=FILE.DATE[5,4]:FILE.DATE[1,2]:FILE.DATE[3,2]
            CLIENT.ID=SHIPPER.LIST<2,X>
            READV PARENT.ID FROM F.CLIENTS,CLIENT.ID,147 ELSE PARENT.ID=CLIENT.ID          ; * JMK81
            DIVISION.ID=SHIPPER.LIST<3,X>
            BEGIN CASE                   ; * JMK77
               CASE CLIENT.ID='05016' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05026' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05027' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05028' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05029' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05030' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05031' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05032' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05033' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05034' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05035' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05036' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05037' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05038' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05039' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05040' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05041' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05042' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05043' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05044' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05045' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05046' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05047' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05048' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05049' ; AIRGAS=1   ; * JMK77
               CASE CLIENT.ID='05166' ; AIRGAS=1   ; * DRF01
               CASE CLIENT.ID='05549' ; AIRGAS=1   ; * DRFZZ
               CASE PARENT.ID='87774' ; AIRGAS=1   ; * JMK81
               CASE 1 ; AIRGAS=0         ; * JMK77
            END CASE                     ; * JMK77
            HDR.EBILL.ROW=EBILL.HDR      ; * JMK77
            IF AIRGAS THEN               ; * JMK77
               HDR.EBILL.ROW=EBILL.AG.HDR          ; * JMK77
            END                          ; * JMK77
            UPS.VC=SHIPPER.LIST<9,X>     ; * JMK21
            DUE.DATE=SHIPPER.LIST<10,X>  ; * NPR02
            DUP.FLAG=SHIPPER.LIST<11,X>  ; * JMK74
            IF OLD.SHIPPER.NUMBER # SHIPPER.NUMBER THEN
               READ DCLIENT FROM F.CLIENTS,CLIENT.ID ELSE DCLIENT=''
               COMPANY.NAME=DCLIENT<2>
               COMPANY.GL.CODE=''

               IF DIVISION.ID='' THEN
                  COMPANY.ADDR=DCLIENT<3,1>
                  COMPANY.CITY=DCLIENT<4>
                  COMPANY.ST=DCLIENT<5>
                  COMPANY.ZIP=DCLIENT<6>
                  REGION.ID=''           ; * JMK43
               END ELSE
                  OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV THEN
                     READ DIV.REC FROM F.DIV,DIVISION.ID ELSE
                        DIV.REC=''
                     END
                  END ELSE
                     DIV.REC=''
                  END
                  COMPANY.ADDR=DIV.REC<14>
                  COMPANY.CITY=DIV.REC<16>
                  COMPANY.ST=DIV.REC<17>
                  COMPANY.ZIP=DIV.REC<1>
                  REGION.ID=DIV.REC<45>  ; * JMK43
               END
               OLD.SHIPPER.NUMBER=SHIPPER.NUMBER
            END
            CLIENT.DIVISION.HOLD.REC=''
            CLIENT.REGION.HOLD.REC=''    ; * JMK46
            EXISTING.CLIENT.DIVISION.HOLD.REC=''
            EXISTING.CLIENT.REGION.HOLD.REC=''     ; * JMK46
            EXISTING.CLIENT.HOLD.REC=''
            CLIENT.DIVISION.ITEM.ID=CLIENT.ID
            IF DIVISION.ID#'' THEN CLIENT.DIVISION.ITEM.ID:='_':DIVISION.ID
            CLIENT.DIVISION.ITEM.ID:='*':FILE.DATE
            REG.RPT=0                    ; * JMK46
            IF CLIENT.ID='01706' AND REGION.ID#'' THEN REG.RPT=1       ; * JMK46
            IF CLIENT.ID='01633' AND REGION.ID#'' THEN REG.RPT=1       ; * JMK46
            IF CLIENT.ID='01977' AND REGION.ID#'' THEN REG.RPT=1       ; * JMK46
            IF CLIENT.ID='01979' AND REGION.ID#'' THEN REG.RPT=1       ; * JMK47
            IF REG.RPT THEN              ; * JMK46
               CLIENT.REGION.ITEM.ID=CLIENT.ID     ; * JMK46
               IF REGION.ID#'' THEN CLIENT.REGION.ITEM.ID:='_':REGION.ID         ; * JMK46
               CLIENT.REGION.ITEM.ID:='*':FILE.DATE          ; * JMK46
            END                          ; * JMK46
            UPD.UPSDTL=1                 ; * JMK46

            FOR Y=1 TO NUM.PACKAGES      ; * ends around 3656  lines in file
               IF EBILL<Y,3>=SHIPPER.NUMBER AND EBILL<Y,5>=OFILE.DATE THEN       ; * JMK79
                  IF EBILL<Y,20>='GSR' OR EBILL<Y,20>='VOD' THEN
                  END
                  TEMP.LINE=EBILL<Y>
                  IF TEMP.LINE#'' THEN
                     TEMP.LINE<1,3>="'":EBILL<Y,3>
                     TEMP.LINE<1,4>="'":EBILL<Y,4>
                     IF COMPANY.GL.CODE#'' THEN
                        TEMP.LINE<1,9>=COMPANY.GL.CODE
                     END
                     NUM.OF.COL=DCOUNT(TEMP.LINE<1>,@VM)
                     FOR YY = 1 TO NUM.OF.COL
                        IF TEMP.LINE<1,YY>[1,1]='-' OR TEMP.LINE<1,YY>[1,1]='+' OR TEMP.LINE<1,YY>[1,1]='=' OR TEMP.LINE<1,YY>[1,1]='*' OR TEMP.LINE<1,YY>[1,1]='/' AND NOT(NUM(TEMP.LINE<1,YY>)) THEN
                           TEMP.LINE<1,YY>="'":TEMP.LINE<1,YY>
                        END
                     NEXT YY
                     IF TEMP.LINE<1,21>='GROUND HUNDREDWT' OR TEMP.LINE<1,21>='2ND DAY AIR HUNDREDWT' OR TEMP.LINE<1,21>='3DAY SELECT HUNDREDWT' OR TEMP.LINE<1,21>='NEXT DAY AIR HUNDREDWT' OR TEMP.LINE<1,21>='NEXT DAY AIR SAVER HUNDR' THEN
                        HUNDWEIGHT=1
                     END ELSE
                        HUNDWEIGHT=0
                     END
                     IF TEMP.LINE<1,22>='1' THEN
                        IF NOT(HUNDWEIGHT) THEN
                           IF TEMP.LINE<1,25>='' AND TEMP.LINE<1,26>='' AND TEMP.LINE<1,27>='' AND TEMP.LINE<1,28>='' AND TEMP.LINE<1,29>='' THEN
                              TEMP.LINE<1,25>=COMPANY.NAME
                              TEMP.LINE<1,26>=COMPANY.ADDR
                              TEMP.LINE<1,27>=COMPANY.CITY
                              TEMP.LINE<1,28>=COMPANY.ST
                              TEMP.LINE<1,29>=COMPANY.ZIP
                           END
                        END
                     END
                  END


                  IF DUP.FLAG#'1' THEN   ; * JMK47
                     CLIENT.DIVISION.HOLD.REC<-1>=TEMP.LINE
                     IF REG.RPT THEN
                        ***    CLIENT.REGION.HOLD.REC<-1>=TEMP.LINE
                     END
                  END                    ; * JMK47
               END
            NEXT Y                       ; *   begins around  3609

            IF CLIENT.DIVISION.HOLD.REC#'' THEN
               READ EXISTING.CLIENT.DIVISION.HOLD.REC FROM F.UPSDATA,CLIENT.DIVISION.ITEM.ID ELSE
                  EXISTING.CLIENT.DIVISION.HOLD.REC=HDR.EBILL.ROW      ; * JMK77
               END
               NUM.HOLD=DCOUNT(CLIENT.DIVISION.HOLD.REC,@AM)
               FOR Y=1 TO NUM.HOLD
                  EXISTING.CLIENT.DIVISION.HOLD.REC<-1>=CLIENT.DIVISION.HOLD.REC<Y>
               NEXT Y
*****            LOCATE CLIENT.ID IN CLIENTS.WITH.BILLS SETTING POS THEN    ; * NPR01
****              WRITE EXISTING.CLIENT.DIVISION.HOLD.REC ON F.UPSDATA,CLIENT.DIVISION.ITEM.ID
               IF UPD.UPSDTL THEN        ; * JMK46
****               WRITE EXISTING.CLIENT.DIVISION.HOLD.REC ON F.UPSDTL,CLIENT.DIVISION.ITEM.ID           ; * JMK46
               END                       ; * JMK46
*****            END                          ; * NPR01
****               IF DIVISION.ID#'' THEN
                  CLIENT.ITEM.ID=CLIENT.ID:'*':FILE.DATE
                  READ EXISTING.CLIENT.HOLD.REC FROM F.UPSDATA,CLIENT.ITEM.ID ELSE
                     EXISTING.CLIENT.HOLD.REC=HDR.EBILL.ROW  ; * JMK77
                  END
                  NUM.HOLD=DCOUNT(CLIENT.DIVISION.HOLD.REC,@AM)
                  FOR Y=1 TO NUM.HOLD
                     EXISTING.CLIENT.HOLD.REC<-1>=CLIENT.DIVISION.HOLD.REC<Y>
                  NEXT Y
*****               LOCATE CLIENT.ID IN CLIENTS.WITH.BILLS SETTING POS THEN           ; * NPR01
                  WRITE EXISTING.CLIENT.HOLD.REC ON F.UPSDATA,CLIENT.ITEM.ID
                  IF UPD.UPSDTL THEN     ; * JMK46
                     WRITE EXISTING.CLIENT.HOLD.REC ON F.UPSDTL,CLIENT.ITEM.ID   ; * JMK46
                  END                    ; * JMK46
*****               END                       ; * NPR01
****               END
            END
            *****    IF REG.RPT THEN                 ; * JMK46
            *****      IF CLIENT.REGION.HOLD.REC#'' THEN      ; * JMK46
            *****        READ EXISTING.CLIENT.REGION.HOLD.REC FROM F.UPSDATA,CLIENT.REGION.ITEM.ID ELSE        ; * JMK46
            *****          EXISTING.CLIENT.REGION.HOLD.REC=HDR.EBILL.ROW        ; * JMK46 ; * JMK77
            *****      END
            *****      NUM.HOLD=DCOUNT(CLIENT.REGION.HOLD.REC,@AM)   ; * JMK46
            *****       FOR Y=1 TO NUM.HOLD       ; * JMK46
            *****         EXISTING.CLIENT.REGION.HOLD.REC<-1>=CLIENT.REGION.HOLD.REC<Y>  ; * JMK46
            *****        NEXT Y                    ; * JMK46
*****               LOCATE CLIENT.ID IN CLIENTS.WITH.BILLS SETTING POS THEN           ; * JMK46
            ******    WRITE EXISTING.CLIENT.REGION.HOLD.REC ON F.UPSDATA,CLIENT.REGION.ITEM.ID
            *****        IF UPD.UPSDTL THEN        ; * JMK46
            *****      WRITE EXISTING.CLIENT.REGION.HOLD.REC ON F.UPSDTL,CLIENT.REGION.ITEM.ID  ; * JMK46
            *****     END                       ; * JMK46
*****               END                       ; * JMK46
            *****        END                          ; * JMK46
            *****       END                             ; * JMK46

         NEXT X                          ; * begins around 3466

         IF GSR.SPREADSHEET#'' THEN
            *******      GOSUB EMAIL.GSR.SPREADSHEET     ; * Write file to EMAILDATA, then email it
         END

         CRT @(0,20):'e-Bill file successfully imported and processed.'

         ***  GOSUB DELETE.AND.ARCHIVE.EXISTING.EBILL.FILE

*     GOSUB EMAIL.PDFS
      REPEAT
********************************88
      GOTO THE.END

********************************************************************************
DISPLAY.SCREEN:***
********************************************************************************
      CALL AFS.SCR.HEAD(CO.ID,FILE.ID,'',PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('=',79)
      CRT @(0,4):'Carrier  : '
      CRT @(0,6):'Filename : '
      RETURN

********************************************************************************
DISPLAY.DATA:***
********************************************************************************
      CRT @(11,4):CARRIER.ID'R%5':' ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      IF EBILL.FILENAME#'' THEN
         CRT @(11,6):EBILL.FOLDER:'\':EBILL.FILENAME"L#25"
      END
      RETURN

********************************************************************************
FILENAME.SAVE.INSTRUCTIONS:***
********************************************************************************
      IF SELECT.ALL ELSE                 ; * JMK13
         CRT @(0,12):'There are no e-Bill files in folder ':EBILL.FOLDER:' to select from.'
         CRT @(0,14):'Save e-Bill files in ':EBILL.FOLDER:' with filename format: cccccccccc_mm_dd_yyyy.csv'
         CRT @(0,16):'  cccccccccc = 10 digit plan number'
         CRT @(0,17):'          mm =  2 digit month'
         CRT @(0,18):'          dd =  2 digit day'
         CRT @(0,19):'        yyyy =  4 digit year'
      END                                ; * JMK13
      RETURN

********************************************************************************
ZERO.OUT.OTHER.ATTRIBUTES.IN.BM.ARRAY:***
********************************************************************************
      NUM.ATT=DCOUNT(BM.ARRAY<1>,@VM)
      FOR I=1 TO NUM.ATT
         BM.ARRAY<4,I>=0                 ; * Net Packages
         BM.ARRAY<5,I>=0                 ; * Incentive Packages
         BM.ARRAY<6,I>=0                 ; * Gross Packages
         BM.ARRAY<7,I>=0                 ; * Old Total Incentive Packages
         BM.ARRAY<8,I>=0                 ; * Net Letters
         BM.ARRAY<9,I>=0                 ; * Incentive Letters
         BM.ARRAY<10,I>=0                ; * Gross Letters
         BM.ARRAY<11,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<12,I>=0                ; * New Logistics Variance
         BM.ARRAY<13,I>=0                ; * Package Accessorial
         BM.ARRAY<14,I>=0                ; * LTL Accessorial
         BM.ARRAY<16,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<17,I>=0                ; * Overcharge amounts
         BM.ARRAY<24,I>=0                ; * Net Packages
         BM.ARRAY<25,I>=0                ; * Incentive Packages
         BM.ARRAY<26,I>=0                ; * Gross Packages
         BM.ARRAY<27,I>=0                ; * Old Total Incentive Packages
         BM.ARRAY<28,I>=0                ; * Net Letters
         BM.ARRAY<29,I>=0                ; * Incentive Letters
         BM.ARRAY<30,I>=0                ; * Gross Letters
         BM.ARRAY<31,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<32,I>=0                ; * New Logistics Variance
         BM.ARRAY<33,I>=0                ; * Package Accessorial
         BM.ARRAY<34,I>=0                ; * LTL Accessorial
         BM.ARRAY<36,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<37,I>=0                ; * Overcharge amounts
         BM.ARRAY<44,I>=0                ; * Net Packages
         BM.ARRAY<45,I>=0                ; * Incentive Packages
         BM.ARRAY<46,I>=0                ; * Gross Packages
         BM.ARRAY<47,I>=0                ; * Old Total Incentive Packages
         BM.ARRAY<48,I>=0                ; * Net Letters
         BM.ARRAY<49,I>=0                ; * Incentive Letters
         BM.ARRAY<50,I>=0                ; * Gross Letters
         BM.ARRAY<51,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<52,I>=0                ; * New Logistics Variance
         BM.ARRAY<53,I>=0                ; * Package Accessorial
         BM.ARRAY<54,I>=0                ; * LTL Accessorial
         BM.ARRAY<56,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<57,I>=0                ; * Overcharge amounts
         BM.ARRAY<64,I>=0                ; * Net Packages
         BM.ARRAY<65,I>=0                ; * Incentive Packages
         BM.ARRAY<66,I>=0                ; * Gross Packages
         BM.ARRAY<67,I>=0                ; * Old Total Incentive Packages
         BM.ARRAY<68,I>=0                ; * Net Letters
         BM.ARRAY<69,I>=0                ; * Incentive Letters
         BM.ARRAY<70,I>=0                ; * Gross Letters
         BM.ARRAY<71,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<72,I>=0                ; * New Logistics Variance
         BM.ARRAY<73,I>=0                ; * Package Accessorial
         BM.ARRAY<74,I>=0                ; * LTL Accessorial
         BM.ARRAY<76,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<77,I>=0                ; * Overcharge amounts
      NEXT I
      BM.ARRAY<15>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<18>=0
      BM.ARRAY<19>=0                     ; * Number of tracking items
      BM.ARRAY<20>=0                     ; * Total net of all packages
      BM.ARRAY<35>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<38>=0
      BM.ARRAY<39>=0                     ; * Number of tracking items
      BM.ARRAY<40>=0                     ; * Total net of all packages
      BM.ARRAY<55>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<58>=0
      BM.ARRAY<59>=0                     ; * Number of tracking items
      BM.ARRAY<60>=0                     ; * Total net of all packages
      BM.ARRAY<75>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<78>=0
      BM.ARRAY<79>=0                     ; * Number of tracking items
      BM.ARRAY<80>=0                     ; * Total net of all packages
      RETURN

********************************************************************************
CALCULATE.CHARGES:***
********************************************************************************
      BM.ARRAY=''
      BOTH.FILE=1
      READ BM.ARRAY FROM F.UPS.BM,SHIPPER.NUMBER:FILE.DATE:'*TEMP' ELSE NULL
      IF BM.ARRAY<21>#BM.ARRAY<1> THEN
         CRT @(0,20):'Services do not match for the inbound and outbound code':@(-4)
         GOTO THE.END
      END
      NUM.SD=DCOUNT(BM.ARRAY<1>,@VM)

      FOR Y=1 TO NUM.SD
* Old total incentive = gross * old BM %
         BM.ARRAY<7,Y>=(BM.ARRAY<6,Y>*BM.ARRAY<2,Y>/10000)'R0'
         BM.ARRAY<11,Y>=(BM.ARRAY<10,Y>*BM.ARRAY<3,Y>/10000)'R0'
         BM.ARRAY<27,Y>=(BM.ARRAY<26,Y>*BM.ARRAY<22,Y>/10000)'R0'
         BM.ARRAY<31,Y>=(BM.ARRAY<30,Y>*BM.ARRAY<23,Y>/10000)'R0'
         BM.ARRAY<47,Y>=(BM.ARRAY<46,Y>*BM.ARRAY<42,Y>/10000)'R0'
         BM.ARRAY<51,Y>=(BM.ARRAY<50,Y>*BM.ARRAY<43,Y>/10000)'R0'
         BM.ARRAY<67,Y>=(BM.ARRAY<66,Y>*BM.ARRAY<62,Y>/10000)'R0'
         BM.ARRAY<71,Y>=(BM.ARRAY<70,Y>*BM.ARRAY<63,Y>/10000)'R0'

      NEXT Y
      FOR Y=1 TO NUM.SD
* New logistics variance = incentive - old total incentive

         IF BM.ARRAY<2,Y>#'10000' THEN
            BM.ARRAY<12,Y>=BM.ARRAY<5,Y>-BM.ARRAY<7,Y>
         END
         IF BM.ARRAY<3,Y>#'10000' THEN
            BM.ARRAY<12,Y>=BM.ARRAY<12,Y>+BM.ARRAY<9,Y>-BM.ARRAY<11,Y>
         END
         IF BM.ARRAY<22,Y>#'10000' THEN
            BM.ARRAY<32,Y>=BM.ARRAY<25,Y>-BM.ARRAY<27,Y>
         END
         IF BM.ARRAY<23,Y>#'10000' THEN
            BM.ARRAY<32,Y>=BM.ARRAY<32,Y>+BM.ARRAY<29,Y>-BM.ARRAY<31,Y>
         END
         IF BM.ARRAY<42,Y>#'10000' THEN
            BM.ARRAY<52,Y>=BM.ARRAY<45,Y>-BM.ARRAY<47,Y>
         END
         IF BM.ARRAY<43,Y>#'10000' THEN
            BM.ARRAY<52,Y>=BM.ARRAY<52,Y>+BM.ARRAY<49,Y>-BM.ARRAY<51,Y>
         END
         IF BM.ARRAY<62,Y>#'10000' THEN
            BM.ARRAY<72,Y>=BM.ARRAY<65,Y>-BM.ARRAY<67,Y>
         END
         IF BM.ARRAY<63,Y>#'10000' THEN
            BM.ARRAY<72,Y>=BM.ARRAY<72,Y>+BM.ARRAY<69,Y>-BM.ARRAY<71,Y>
         END
      NEXT Y
      SPLIT.AMOUNT=BM.ARRAY<20>+BM.ARRAY<40>+BM.ARRAY<60>
      IF SPLIT.AMOUNT=0 THEN
         T.PERCENT=.3333
         I.PERCENT=.3333
      END ELSE
         T.PERCENT=BM.ARRAY<60>/SPLIT.AMOUNT
         I.PERCENT=BM.ARRAY<40>/SPLIT.AMOUNT
      END
      FOR Y=1 TO NUM.SD
* Calculate split codes
         FOR ZZ=4 TO 14
            T.AMOUNT=T.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<40+ZZ,Y>=BM.ARRAY<40+ZZ,Y>+OCONV(T.AMOUNT,'MR0')
            I.AMOUNT=I.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<20+ZZ,Y>=BM.ARRAY<20+ZZ,Y>+OCONV(I.AMOUNT,'MR0')
            AMT.LEFT=BM.ARRAY<60+ZZ,Y>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
            BM.ARRAY<ZZ,Y>=BM.ARRAY<ZZ,Y>+AMT.LEFT
         NEXT ZZ
         FOR ZZ=16 TO 17
            T.AMOUNT=T.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<40+ZZ,Y>=BM.ARRAY<40+ZZ,Y>+OCONV(T.AMOUNT,'MR0')
            I.AMOUNT=I.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<20+ZZ,Y>=BM.ARRAY<20+ZZ,Y>+OCONV(I.AMOUNT,'MR0')
            AMT.LEFT=BM.ARRAY<60+ZZ,Y>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
            BM.ARRAY<ZZ,Y>=BM.ARRAY<ZZ,Y>+AMT.LEFT
         NEXT ZZ
      NEXT Y

      T.AMOUNT=T.PERCENT*BM.ARRAY<75>
      BM.ARRAY<55>=BM.ARRAY<55>+OCONV(T.AMOUNT,'MR0')
      I.AMOUNT=I.PERCENT*BM.ARRAY<75>
      BM.ARRAY<35>=BM.ARRAY<35>+OCONV(I.AMOUNT,'MR0')
      AMT.LEFT=BM.ARRAY<75>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
      BM.ARRAY<15>=BM.ARRAY<15>+AMT.LEFT
      T.AMOUNT=T.PERCENT*BM.ARRAY<78>
      BM.ARRAY<58>=BM.ARRAY<58>+OCONV(T.AMOUNT,'MR0')
      I.AMOUNT=I.PERCENT*BM.ARRAY<78>
      BM.ARRAY<38>=BM.ARRAY<38>+OCONV(I.AMOUNT,'MR0')
      AMT.LEFT=BM.ARRAY<78>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
      BM.ARRAY<18>=BM.ARRAY<18>+AMT.LEFT
      T.AMOUNT=T.PERCENT*BM.ARRAY<80>
      BM.ARRAY<60>=BM.ARRAY<60>+OCONV(T.AMOUNT,'MR0')
      I.AMOUNT=I.PERCENT*BM.ARRAY<80>
      BM.ARRAY<40>=BM.ARRAY<40>+OCONV(I.AMOUNT,'MR0')
      AMT.LEFT=BM.ARRAY<80>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
      BM.ARRAY<20>=BM.ARRAY<20>+AMT.LEFT


      IF EXP.LINE=1 THEN                 ; * JMK47
         NVAL=DCOUNT(BM.ARRAY<145>,@VM)  ; * JMK23
         FOR VAL=1 TO NVAL               ; * JMK23
* Calculate split codes
            T.AMOUNT=T.PERCENT*BM.ARRAY<145,VAL>   ; * JMK23
            IF BM.ARRAY<124,VAL>='' THEN           ; * JMK23
               BM.ARRAY<124,VAL>=BM.ARRAY<144>     ; * JMK23
            END                          ; * JMK23
            BM.ARRAY<125,VAL>+=OCONV(T.AMOUNT,'MR0')         ; * JMK23
            I.AMOUNT=I.PERCENT*BM.ARRAY<145,VAL>   ; * JMK23
            IF BM.ARRAY<104,VAL>='' THEN           ; * JMK23
               BM.ARRAY<104,VAL>=BM.ARRAY<144>     ; * JMK23
            END                          ; * JMK23
            BM.ARRAY<105,VAL>+=OCONV(I.AMOUNT,'MR0')         ; * JMK23
            AMT.LEFT=BM.ARRAY<145,VAL>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')         ; * JMK23
            IF BM.ARRAY<84,VAL>='' THEN  ; * JMK23
               BM.ARRAY<84,VAL>=BM.ARRAY<144>      ; * JMK23
            END                          ; * JMK23
            BM.ARRAY<85,VAL>+=AMT.LEFT   ; * JMK23
         NEXT VAL                        ; * JMK23
      END                                ; * JMK23
CHECK.AGAIN:***
      IF UPS.INVOICE.AMOUNT >= 0 THEN
         IF BM.ARRAY<20> < 0 OR BM.ARRAY<40> < 0 OR BM.ARRAY<60> < 0 THEN
            IF BM.ARRAY<20> < 0 THEN
               IF BM.ARRAY<40> > BM.ARRAY<60> THEN
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<24,Y>=BM.ARRAY<24,Y>+BM.ARRAY<4,Y>
                     BM.ARRAY<28,Y>=BM.ARRAY<28,Y>+BM.ARRAY<8,Y>
                     BM.ARRAY<33,Y>=BM.ARRAY<33,Y>+BM.ARRAY<13,Y>
                     BM.ARRAY<34,Y>=BM.ARRAY<34,Y>+BM.ARRAY<14,Y>
                     BM.ARRAY<4,Y>=0
                     BM.ARRAY<8,Y>=0
                     BM.ARRAY<13,Y>=0
                     BM.ARRAY<14,Y>=0
                  NEXT Y
                  BM.ARRAY<40>=BM.ARRAY<40>+BM.ARRAY<20>
                  BM.ARRAY<20>=0
               END ELSE
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<44,Y>=BM.ARRAY<44,Y>+BM.ARRAY<4,Y>
                     BM.ARRAY<48,Y>=BM.ARRAY<48,Y>+BM.ARRAY<8,Y>
                     BM.ARRAY<53,Y>=BM.ARRAY<53,Y>+BM.ARRAY<13,Y>
                     BM.ARRAY<54,Y>=BM.ARRAY<54,Y>+BM.ARRAY<14,Y>
                     BM.ARRAY<4,Y>=0
                     BM.ARRAY<8,Y>=0
                     BM.ARRAY<13,Y>=0
                     BM.ARRAY<14,Y>=0
                  NEXT Y
                  BM.ARRAY<60>=BM.ARRAY<60>+BM.ARRAY<20>
                  BM.ARRAY<20>=0
               END
            END
            IF BM.ARRAY<40> < 0 THEN
               IF BM.ARRAY<20> > BM.ARRAY<60> THEN
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<4,Y>=BM.ARRAY<4,Y>+BM.ARRAY<24,Y>
                     BM.ARRAY<8,Y>=BM.ARRAY<8,Y>+BM.ARRAY<28,Y>
                     BM.ARRAY<13,Y>=BM.ARRAY<13,Y>+BM.ARRAY<33,Y>
                     BM.ARRAY<14,Y>=BM.ARRAY<14,Y>+BM.ARRAY<34,Y>
                     BM.ARRAY<24,Y>=0
                     BM.ARRAY<28,Y>=0
                     BM.ARRAY<33,Y>=0
                     BM.ARRAY<34,Y>=0
                  NEXT Y
                  BM.ARRAY<20>=BM.ARRAY<20>+BM.ARRAY<40>
                  BM.ARRAY<40>=0
               END ELSE
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<44,Y>=BM.ARRAY<44,Y>+BM.ARRAY<24,Y>
                     BM.ARRAY<48,Y>=BM.ARRAY<48,Y>+BM.ARRAY<28,Y>
                     BM.ARRAY<53,Y>=BM.ARRAY<53,Y>+BM.ARRAY<33,Y>
                     BM.ARRAY<54,Y>=BM.ARRAY<54,Y>+BM.ARRAY<34,Y>
                     BM.ARRAY<24,Y>=0
                     BM.ARRAY<28,Y>=0
                     BM.ARRAY<33,Y>=0
                     BM.ARRAY<34,Y>=0
                  NEXT Y
                  BM.ARRAY<60>=BM.ARRAY<60>+BM.ARRAY<40>
                  BM.ARRAY<40>=0
               END
            END
            IF BM.ARRAY<60> < 0 THEN
               IF BM.ARRAY<20> > BM.ARRAY<40> THEN
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<4,Y>=BM.ARRAY<4,Y>+BM.ARRAY<44,Y>
                     BM.ARRAY<8,Y>=BM.ARRAY<8,Y>+BM.ARRAY<48,Y>
                     BM.ARRAY<13,Y>=BM.ARRAY<13,Y>+BM.ARRAY<53,Y>
                     BM.ARRAY<14,Y>=BM.ARRAY<14,Y>+BM.ARRAY<54,Y>
                     BM.ARRAY<44,Y>=0
                     BM.ARRAY<48,Y>=0
                     BM.ARRAY<53,Y>=0
                     BM.ARRAY<54,Y>=0
                  NEXT Y
                  BM.ARRAY<20>=BM.ARRAY<20>+BM.ARRAY<60>
                  BM.ARRAY<60>=0
               END ELSE
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<24,Y>=BM.ARRAY<24,Y>+BM.ARRAY<44,Y>
                     BM.ARRAY<28,Y>=BM.ARRAY<28,Y>+BM.ARRAY<48,Y>
                     BM.ARRAY<33,Y>=BM.ARRAY<33,Y>+BM.ARRAY<53,Y>
                     BM.ARRAY<34,Y>=BM.ARRAY<34,Y>+BM.ARRAY<54,Y>
                     BM.ARRAY<44,Y>=0
                     BM.ARRAY<48,Y>=0
                     BM.ARRAY<53,Y>=0
                     BM.ARRAY<54,Y>=0
                  NEXT Y
                  BM.ARRAY<40>=BM.ARRAY<40>+BM.ARRAY<60>
                  BM.ARRAY<60>=0
               END
            END
            GOTO CHECK.AGAIN
         END
         T.NET=0
         T.INCENTIVE=0
         FOR Y=1 TO NUM.SD
* Check to make sure that the incentive is at least 3 percent
* the gross charges if not send an email out to everyone
            T.NET=T.NET+BM.ARRAY<4,Y>+BM.ARRAY<8,Y>+BM.ARRAY<13,Y>+BM.ARRAY<14,Y>
            T.NET=T.NET+BM.ARRAY<24,Y>+BM.ARRAY<28,Y>+BM.ARRAY<33,Y>+BM.ARRAY<34,Y>
            T.NET=T.NET+BM.ARRAY<44,Y>+BM.ARRAY<48,Y>+BM.ARRAY<53,Y>+BM.ARRAY<54,Y>
            T.INCENTIVE=T.INCENTIVE+BM.ARRAY<5,Y>+BM.ARRAY<9,Y>
            T.INCENTIVE=T.INCENTIVE+BM.ARRAY<25,Y>+BM.ARRAY<29,Y>
            T.INCENTIVE=T.INCENTIVE+BM.ARRAY<45,Y>+BM.ARRAY<49,Y>
         NEXT Y

         
      END
      RETURN
********************************************************************************
CALCULATE.TOTALS:***
********************************************************************************
      TOTAL.INVOICE.AMOUNT=0
      FOR Y=1 TO NUM.SD
* Add up net charges across all service descriptions to get total

         TOTAL.INVOICE.AMOUNT+=BM.ARRAY<ATT.SETTING+4,Y>+BM.ARRAY<ATT.SETTING+8,Y>+BM.ARRAY<ATT.SETTING+13,Y>+BM.ARRAY<ATT.SETTING+14,Y>
      NEXT Y
      IF TOTAL.INVOICE.AMOUNT#BM.ARRAY<ATT.SETTING+20> THEN
         IF ABS( TOTAL.INVOICE.AMOUNT - BM.ARRAY<ATT.SETTING+20> ) GT 2 THEN     ; * GRB
            IF SELECT.ALL THEN           ; * JMK13
               EBILL.WARNING<1,-1>='Total Invoice ':TOTAL.INVOICE.AMOUNT:' and ':BM.ARRAY<ATT.SETTING+20>:' do not match'          ; * JMK13
            END ELSE                     ; * JMK13
               CALL ELINE('Total Invoice ':TOTAL.INVOICE.AMOUNT:' and ':BM.ARRAY<ATT.SETTING+20>:' do not match')
            END                          ; * JMK13
         END                             ; * GRB
      END

      TOTAL.LOGISTICS.VARIANCE=0
      FOR Y=1 TO NUM.SD
* Add up logistics variance across all service descriptions to get total
* NEW use 16 for hundredweight and 12 for everybody else.

         IF BM.ARRAY<ATT.SETTING+1,Y>[1,13]='HUNDREDWEIGHT' AND BM.ARRAY<ATT.SETTING+1,Y>#'HUNDREDWEIGHT RES. ADJ.' THEN
            IF BM.ARRAY<ATT.SETTING+16,Y> GT 0 THEN
               TOTAL.LOGISTICS.VARIANCE+=BM.ARRAY<ATT.SETTING+16,Y>
            END
         END ELSE
            IF BM.ARRAY<ATT.SETTING+1,Y>#'HUNDREDWEIGHT RES. ADJ.' AND BM.ARRAY<ATT.SETTING+1,Y>#'CREDIT ADJUSTMENTS' AND BM.ARRAY<ATT.SETTING+1,Y>#'GUARANTEED SERVICE REFUN' AND BM.ARRAY<ATT.SETTING+1,Y>#'HOST MANIFEST VOID' AND BM.ARRAY<ATT.SETTING+1,Y>#'UPS ONL WORLDSHIP VOID' AND BM.ARRAY<ATT.SETTING+1,Y>#'VENDOR MANIFEST VOID' AND BM.ARRAY<ATT.SETTING+1,Y>#'CAMPUS SHIP VOID' AND BM.ARRAY<ATT.SETTING+1,Y>#'MANIFEST EDI VOID' AND BM.ARRAY<ATT.SETTING+1,Y>#'UPS INTERNET VOID' THEN
               IF CLIENT.ID='01148' OR CLIENT.ID='01371' OR CLIENT.ID='01398' THEN
                  IF BM.ARRAY<ATT.SETTING+1,Y>='3DAY SELECT' OR BM.ARRAY<ATT.SETTING+1,Y>='COM. 3DAY SELECT' OR BM.ARRAY<ATT.SETTING+1,Y>='RES. 3DAY SELECT' THEN
                     TOTAL.LOGISTICS.VARIANCE+=BM.ARRAY<ATT.SETTING+12,Y>
                  END ELSE
                     IF BM.ARRAY<ATT.SETTING+12,Y> GT 0 THEN
                        TOTAL.LOGISTICS.VARIANCE+=BM.ARRAY<ATT.SETTING+12,Y>
                     END
                  END
               END ELSE
                  IF BM.ARRAY<ATT.SETTING+12,Y> GT 0 THEN
                     TOTAL.LOGISTICS.VARIANCE+=BM.ARRAY<ATT.SETTING+12,Y>
                  END
               END
            END
         END
      NEXT Y
      IF TOTAL.LOGISTICS.VARIANCE < 0 THEN TOTAL.LOGISTICS.VARIANCE = 0
      TOTAL.LOGISTICS.VARIANCE=ABS(TOTAL.LOGISTICS.VARIANCE)

      TOTAL.OVERCHARGE.VARIANCE=0
      LOCATE 'GUARANTEED SERVICE REFUN' IN BM.ARRAY<ATT.SETTING+1> BY 'AL' SETTING POS THEN
         TOTAL.OVERCHARGE.VARIANCE=BM.ARRAY<ATT.SETTING+17,POS>
      END
      IF CLIENT.ID#'01410' AND CLIENT.ID#'01475' AND CLIENT.ID#'01916' THEN      ; * JMK37
         LOCATE 'HOST MANIFEST VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'UPS ONL WORLDSHIP VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'VENDOR MANIFEST VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'CAMPUS SHIP VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'UPS INTERNET VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'MANIFEST EDI VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'CREDIT ADJUSTMENTS' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
      END
      TOTAL.OVERCHARGE.VARIANCE=ABS(TOTAL.OVERCHARGE.VARIANCE)
      IF SHIPPER.NUMBER='E79490' AND ADDR.CORR.ARRAY<4>+0#0 THEN
         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+1
      END

      IF CLIENT.ID='01352' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END

      IF CLIENT.ID='01305' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END

      IF CLIENT.ID='01330' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END

      TOTAL.DISCOUNT.VARIANCE=0
      TOTAL.DISCOUNT.VARIANCE=ABS(TOTAL.DISCOUNT.VARIANCE)
      TOTAL.ADDRESS.CORRECTION=0
      FOR Y=1 TO NUM.SD
         IF BM.ARRAY<ATT.SETTING+1,Y>[1,11]='ADDR. CORR.' THEN
            TOTAL.ADDRESS.CORRECTION+=BM.ARRAY<ATT.SETTING+4,Y>+BM.ARRAY<ATT.SETTING+8,Y>
         END
      NEXT Y

      TOTAL.LATE.PAYMENT.FEE=0
      FOR Y=1 TO NUM.SD
         IF BM.ARRAY<ATT.SETTING+1,Y>[1,16]='LATE PAYMENT FEE' THEN
            TOTAL.LATE.PAYMENT.FEE+=BM.ARRAY<ATT.SETTING+4,Y>+BM.ARRAY<ATT.SETTING+8,Y>
         END
      NEXT Y

      RETURN

********************************************************************************
SETUP.BILL.REC:***
********************************************************************************
      BILL.REC=''
      BILL.REC<1>=BILL.DATE              ; * Bill Date - same throughout the file
      BILL.REC<2>='O'                    ; * UPS always Outbound
      IF ZZZ = 2 THEN
         BILL.REC<2>='I'
      END
      IF ZZZ = 3 THEN
         BILL.REC<2>='T'

      END
      BILL.REC<3>='99999'                ; * Origin City ZIP
      BILL.REC<4>='99999'                ; * Destination City ZIP
      BILL.REC<6>=0                      ; * Weight always 0 for UPS
      BILL.REC<7>=TOTAL.INVOICE.AMOUNT
      BILL.REC<7>+=TOTAL.LOGISTICS.VARIANCE
      BILL.REC<7>+=TOTAL.OVERCHARGE.VARIANCE
      BILL.REC<7>+=TOTAL.DISCOUNT.VARIANCE         ; * Amount client would have paid without AFS
      BILL.REC<8>=TOTAL.INVOICE.AMOUNT   ; * Amount we pay (amount to cut check for)
      BILL.REC<9>=DIVISION.ID            ; * Division
      BILL.REC<10>=-TOTAL.DISCOUNT.VARIANCE        ; * Discount variance
      BILL.REC<11>=-TOTAL.OVERCHARGE.VARIANCE      ; * Overcharge Variance
      BILL.REC<12>=-TOTAL.LOGISTICS.VARIANCE       ; * Consulting (logistics) variance
      BILL.REC<13>=''                    ; * Check amount - leave blank
      BILL.REC<14>=''                    ; * Check number - leave blank
      BILL.REC<15>=''                    ; * Check Date - leave blank
      BILL.REC<16>=''                    ; * BOL - leave blank
      BILL.REC<222>='ZZ'                 ; * Origin Country Code
      BILL.REC<223>='ZZ'                 ; * Destination Country Code

      IF CLIENT.ID='00857' THEN
         BILL.REC<16>='82200001'
      END
      BEGIN CASE
         CASE CLIENT.ID='00883'          ; * Pollock Paper
            TEMP='27106'
         CASE CLIENT.ID='00841'          ; * Moridge
            TEMP='01393'
         CASE CLIENT.ID='01152'          ; * Interstate Logos
            TEMP='00000'
            IF SHIPPER.NUMBER='2AW686' THEN
               TEMP='00001'
            END
         CASE CLIENT.ID='01088'          ; * Hi-Lo Industries
            TEMP='00021'
         CASE CLIENT.ID='00761'          ; * Leisure Arts
            TEMP='03203'
         CASE CLIENT.ID='00984'          ; * Orscheln
            TEMP='00098'
         CASE CLIENT.ID='01000'          ; * Qualico
            TEMP='00063'
         CASE CLIENT.ID='10334'          ; * The Massey Company
            TEMP='00191'
         CASE CLIENT.ID='00839'          ; * Newell Coach
            TEMP=''
* No Customer/Vendor for Newell Coach
         CASE CLIENT.ID='00939'          ; * Krause Corp
            TEMP='01239'
         CASE CLIENT.ID='00895'          ; * Exline
            TEMP='00669'
         CASE CLIENT.ID='01057'          ; * H & K Dallas
            TEMP='00136'
         CASE CLIENT.ID='01029'          ; * Enpro/Texolon
            TEMP='00363'
         CASE CLIENT.ID='00919'          ; * Miracle Recreation - Monett
            TEMP='08523'
            IF SHIPPER.NUMBER='9R43V7' THEN
               TEMP='01417'
            END
         CASE CLIENT.ID='00933'          ; * Cobalt Boats
            TEMP='01024'
         CASE CLIENT.ID='01139'          ; * Davis Paint Co
            TEMP='00302'
         CASE CLIENT.ID='00979'          ; * Heatron
            TEMP='00024'
            IF SHIPPER.NUMBER='242202' THEN
               TEMP='00412'
            END
         CASE CLIENT.ID='01075'          ; * Superior Gearbox
            TEMP='00034'
         CASE CLIENT.ID='01132'          ; * Li-Cor Biosciences
            TEMP='00827'
         CASE CLIENT.ID='01160'          ; * Hunt Engine
            TEMP='00042'
            IF SHIPPER.NUMBER='705912' THEN
               TEMP='00060'
            END
         CASE CLIENT.ID='01015'          ; * Hillyard
            TEMP='01526'
         CASE CLIENT.ID='01114'          ; * Mechanical Equipment
            TEMP='02082'
            IF SHIPPER.NUMBER='707810' THEN
               TEMP='02160'
            END
         CASE CLIENT.ID='01032'          ; * Gray Automotive
            TEMP='00512'
         CASE CLIENT.ID='00392'          ; * Liebherr Mining Truck Inc.
            TEMP='03323'
         CASE CLIENT.ID='01271'          ; * Airgas East
            TEMP='00291'
            IF SHIPPER.NUMBER='2096E2' THEN
               TEMP='00738'
            END
            IF SHIPPER.NUMBER='17X901' OR SHIPPER.NUMBER='180570' OR SHIPPER.NUMBER='253340' OR SHIPPER.NUMBER='63W515' THEN
               TEMP='00739'
            END
            IF SHIPPER.NUMBER='182084' THEN
               TEMP='00740'
            END
            IF SHIPPER.NUMBER='236569' OR SHIPPER.NUMBER='295220' OR SHIPPER.NUMBER='297811' OR SHIPPER.NUMBER='168782' THEN
               TEMP='00741'
            END
            IF SHIPPER.NUMBER='298450' THEN
               TEMP='00742'
            END
            IF SHIPPER.NUMBER='014940' OR SHIPPER.NUMBER='030E37' OR SHIPPER.NUMBER='040168' OR SHIPPER.NUMBER='040189' OR SHIPPER.NUMBER='042903' OR SHIPPER.NUMBER='043200' OR SHIPPER.NUMBER='046007' OR SHIPPER.NUMBER='0E2811' OR SHIPPER.NUMBER='1X8714' OR SHIPPER.NUMBER='2X6681' OR SHIPPER.NUMBER='X13578' THEN
               TEMP='00744'
            END
            IF SHIPPER.NUMBER='296268' THEN
               TEMP='00780'
            END
            IF SHIPPER.NUMBER='07X319' OR SHIPPER.NUMBER='X12001' THEN
               TEMP='00825'
            END
         CASE CLIENT.ID='01157'          ; * Clore Automotive
            TEMP='13154'
         CASE CLIENT.ID='01286'          ; * Livers Bronze
            TEMP='00000'
         CASE CLIENT.ID='01357'          ; * Douglas Quikut
            TEMP='00040'
            IF SHIPPER.NUMBER='72X340' THEN
               TEMP='00039'
            END
         CASE CLIENT.ID='01352'          ; * General Wire Spring
            TEMP='00154'
         CASE CLIENT.ID='01330'          ; * Timken Latrobe Distribution
            TEMP='00419'
         CASE CLIENT.ID='01256'          ; * Rubber Products
            TEMP='06844'
         CASE CLIENT.ID='01283'          ; * SRI Surgical
            TEMP='00207'
         CASE CLIENT.ID='00978'          ; * Enpro/Garlock Palmyra
            TEMP='23451'
         CASE CLIENT.ID='01361'          ; * Enpro/Fairbanks Morse
            TEMP='00027'
            IF SHIPPER.NUMBER='582969' THEN
               TEMP='00546'
            END
            IF SHIPPER.NUMBER='890321' THEN
               TEMP='00334'
            END
            IF SHIPPER.NUMBER='X53561' THEN
               TEMP='00476'
            END
         CASE CLIENT.ID='01066'          ; * PowerSeal Pipeline
            TEMP='02090'
         CASE CLIENT.ID='01396'          ; * Cummins Wagner
            TEMP='00021'
         CASE CLIENT.ID='01394'          ; * Odessa Pumps
            TEMP='00001'
         CASE CLIENT.ID='01179'          ; * Tuboscope
            TEMP='01188'
            IF SHIPPER.NUMBER='1WE245' THEN
               TEMP='03619'
            END
         CASE CLIENT.ID='01159'          ; * National Spencer
            TEMP='00062'
         CASE CLIENT.ID='01309'          ; * Minster Machines
            TEMP='00235'
         CASE CLIENT.ID='01027'          ; * Robert Madden
            TEMP='00143'
            IF SHIPPER.NUMBER='9E15E1' THEN
               TEMP='00142'
            END
         CASE CLIENT.ID='01423'          ; * UMC Automation
            TEMP='00000'
         CASE CLIENT.ID='01435'          ; * Skinner Brothers
            TEMP='00113'
            IF SHIPPER.NUMBER='731035' THEN
               TEMP='00114'
            END
         CASE CLIENT.ID='01151'          ; * Par Way Tryson
            TEMP='00398'
         CASE CLIENT.ID='01171'          ; * Louisiana Fish Fry
            TEMP='00208'
         CASE CLIENT.ID='01305'          ; * Future Metals
            TEMP='00295'
         CASE CLIENT.ID='01380'          ; * Pfaudler
            TEMP='00018'
         CASE CLIENT.ID='01381'          ; * Fein Power Tools
            TEMP='00301'
         CASE CLIENT.ID='01397'          ; * Electric Supply of Tampa
            TEMP='00173'
         CASE CLIENT.ID='01419'          ; * Virginia Linen
            TEMP='00084'
         CASE CLIENT.ID='01442'          ; * Voto Mfg Sales
            TEMP='00064'
         CASE CLIENT.ID='01459'          ; * Pittsburgh Wire
            TEMP='00144'
         CASE CLIENT.ID='01468'          ; * Shepherd Color
            TEMP='00000'
         CASE CLIENT.ID='01187'          ; * Allied Plastic Supply
            TEMP='00665'
         CASE CLIENT.ID='01450'          ; * Universal Electric
            TEMP='00393'
         CASE CLIENT.ID='01090'          ; * Aquaculture
            TEMP='00244'
         CASE CLIENT.ID='01110'          ; * Tony Chacere's
            TEMP='00000'
         CASE CLIENT.ID='01439'          ; * Flodraulic Group, Inc.
            TEMP='00000'
         CASE CLIENT.ID='01475'          ; * Lamar Corporation
            TEMP='00000'
         CASE CLIENT.ID='01605'          ; * Trinity Forge
            TEMP='00002'
         CASE CLIENT.ID='01600'          ; * Gemini Moulding
            TEMP='00009'
         CASE CLIENT.ID='01606'          ; * Southeast Process Controls
            TEMP='00001'
         CASE CLIENT.ID='01038'          ; * Southern Audio Services
            TEMP='00345'
         CASE CLIENT.ID='01598'          ; * Mosites Rubber Co
            TEMP='00008'
         CASE CLIENT.ID='01584'          ; * Amarillo Gear Co
            TEMP='00025'
         CASE CLIENT.ID='01532'          ; * Enpro Pikotek
            TEMP='00002'
         CASE CLIENT.ID='01242'          ; * Putnam Plastics
            TEMP='01604'
         CASE CLIENT.ID='01567'          ; * Betts Spring
            TEMP='01560'
         CASE CLIENT.ID='01587'          ; * Bray Sales Southern California
            TEMP='00000'
         CASE CLIENT.ID='01586'          ; * Bray Sales Texas
            TEMP='00000'
         CASE CLIENT.ID='01585'          ; * Process Solutions
            TEMP='00000'
         CASE CLIENT.ID='01581'          ; * AAA Products
            TEMP='00004'
         CASE CLIENT.ID='01583'          ; * Intermountain Valve
            TEMP='00000'
         CASE CLIENT.ID='01129'          ; * Dr Tichenor
            TEMP='00260'
         CASE CLIENT.ID='01565'          ; * New Tech Flow Control
            TEMP='00000'
         CASE CLIENT.ID='01554'          ; * Power & Pumps
            TEMP='06816'
         CASE CLIENT.ID='01336'          ; * Hussey Copper Eminence
            TEMP='00000'
         CASE CLIENT.ID='01529'          ; * Rectorseal
            TEMP='01556'
         CASE CLIENT.ID='01547'          ; * TPH Aquisition
            TEMP='00006'
         CASE CLIENT.ID='01545'          ; * Texas Oil Tools
            TEMP='00002'
         CASE CLIENT.ID='01521'          ; * Flow-Tek
            TEMP='00000'
         CASE CLIENT.ID='01499'          ; * Lamar Corporation
            TEMP='00121'
            IF SHIPPER.NUMBER='0R294V' THEN
               TEMP='03382'
            END
            IF SHIPPER.NUMBER='5W192X' THEN
               TEMP='03382'
            END
            IF SHIPPER.NUMBER='R8W891' THEN
               TEMP='03382'
            END
         CASE CLIENT.ID='01478'          ; * Targus
            TEMP='00429'
         CASE CLIENT.ID='01505'          ; * Marlite
            TEMP='00001'
         CASE CLIENT.ID='01511'          ; * Womack Mach Supp
            TEMP='00015'
            IF SHIPPER.NUMBER='744214' THEN
               TEMP='01274'
            END
            IF SHIPPER.NUMBER='86W0A3' THEN
               TEMP='01274'
            END
            IF SHIPPER.NUMBER='879528' THEN
               TEMP='01274'
            END
            IF SHIPPER.NUMBER='9W668A' THEN
               TEMP='01274'
            END
         CASE CLIENT.ID='01192'          ; * Applied Energy
            TEMP='00083'
         CASE CLIENT.ID='01582'          ; * Applied Energy-Kansas
            TEMP='00000'
         CASE CLIENT.ID='01420'          ; * VEKTEK
            TEMP='00052'
         CASE CLIENT.ID='01485'          ; * Feintool Cincinatti
            TEMP='00000'
         CASE CLIENT.ID='01328'          ; * PBM Inc
            TEMP='00001'
         CASE CLIENT.ID='01630'
            TEMP='01230'
         CASE CLIENT.ID='01622'          ; * Fittings Unlimited
            TEMP='00001'
         CASE CLIENT.ID='01632'          ; * Media Valve Co
            TEMP='00004'
         CASE CLIENT.ID='01639'          ; * Harrington Corporation
            TEMP='00000'
         CASE CLIENT.ID='00724'          ; * Advanced Industries
            TEMP='00358'
         CASE CLIENT.ID='01614'          ; * The Shepherd Chemical Company
            TEMP='00445'
         CASE CLIENT.ID='01671'          ; * Image Projection West
            TEMP='00000'
         CASE CLIENT.ID='01658'          ; * Amazon Hose & Rubber Co
            TEMP='00049'
         CASE CLIENT.ID='01669'          ; * Gemco
            TEMP='00033'
         CASE CLIENT.ID='01670'          ; * Estad Stamping & Mfg Co
            TEMP='00005'
         CASE CLIENT.ID='01700'          ; * Notions Marketing - JMK15
            TEMP='00000'                 ; * JMK15
         CASE CLIENT.ID='01697'          ; * Energy Tech Lab
            TEMP='00006'
         CASE CLIENT.ID='01709'
            TEMP='00000'
         CASE CLIENT.ID='01349'          ; * Robroy Industries
            BEGIN CASE
               CASE SHIPPER.NUMBER='A6181R'
                  TEMP='08846'
               CASE SHIPPER.NUMBER='186340'
                  TEMP='00972'
               CASE SHIPPER.NUMBER='689A0W'
                  TEMP='08844'
               CASE SHIPPER.NUMBER='7RV410'
                  TEMP='08845'
               CASE SHIPPER.NUMBER='757899'
                  TEMP='00972'
               CASE SHIPPER.NUMBER='780107'
                  TEMP='00972'
            END CASE
         CASE CLIENT.ID='01350'
            TEMP='02615'
         CASE CLIENT.ID='01645'
            TEMP='00000'
         CASE CLIENT.ID='01717'
            TEMP='00026'
         CASE CLIENT.ID='01674'
            TEMP='00022'
         CASE CLIENT.ID='01719'
            TEMP='00012'
         CASE CLIENT.ID='01633'
            TEMP='00203'
         CASE CLIENT.ID='00760'
            TEMP='00002'
         CASE CLIENT.ID='01753'
            TEMP='00016'
         CASE CLIENT.ID='00344'
            TEMP='00000'
         CASE 1
            IF UPS.VC#'' THEN            ; * JMK21
               TEMP=UPS.VC               ; * JMK21
            END ELSE                     ; * JMK21
               IF SELECT.ALL THEN
                  EBILL.ERROR<1,-1>='Client ':CLIENT.ID:', ':SHIPPER.NUMBER:' needs to be setup for cust vend codes - Aborting.'
               END ELSE
                  CALL ELINE('Client ':CLIENT.ID:', ':SHIPPER.NUMBER:' needs to be setup for cust vend codes - Aborting.')
               END
               GOTO THE.END
            END                          ; * JMK21
            IF CLIENT.ID='01706' THEN
               OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV THEN
                  READV DIV.REGION FROM F.DIV,DIVISION.ID,45 ELSE DIV.REGION=''
               END ELSE
                  DIV.REGION=''
               END
            END
      END CASE
      BILL.REC<17>=TEMP                  ; * Customer-Vendor code
      BILL.REC<18>=''                    ; * Route - leave blank
      BILL.REC<19>=''                    ; * Miles - leave blank
      BILL.REC<20>=CARRIER.ID            ; * AFS Carrier ID
      BEGIN CASE
         CASE CARRIER.ID='00041'         ; * UPS
            TEMP='15'                    ; * Parcel Ground from FB.TRANSPORT file
         CASE 1
            IF SELECT.ALL THEN
               EBILL.ERROR<1,-1>='Client ':CLIENT.ID:' needs to be setup for transportation mode - Aborting.'
            END ELSE
               CALL ELINE('Client ':CLIENT.ID:' needs to be setup for transportation mode - Aborting.')
            END
            GOTO THE.END
      END CASE
      BILL.REC<21>=TEMP                  ; * Transportation mode
      BILL.REC<22>=''                    ; * Disc Det
      BILL.REC<23>=''                    ; * Disc Det
      BILL.REC<24>=0                     ; * Disc % ?
      BILL.REC<25>='ZZ'                  ; * Orig state
      BILL.REC<26>='ZZ'                  ; * Dest state
      BILL.REC<27>='UPS'                 ; * Orig city
      BILL.REC<28>='UPS'                 ; * Dest city
      TEMP=''
      IF TOTAL.OVERCHARGE.VARIANCE#0 THEN TEMP:='O'
      IF TOTAL.LOGISTICS.VARIANCE#0 THEN TEMP:='C'
      IF TOTAL.DISCOUNT.VARIANCE#0 THEN TEMP:='D'
      BILL.REC<29>=TEMP                  ; * OCD (Overcharge, Consulting, Discount)
      BILL.REC<30>=ENTRY.DATE            ; * Entry date in the next processing period
      BILL.REC<32>=''                    ; * Expense Distribution code ?
      BILL.REC<34>=0                     ; * BD Discount Variance
      BILL.REC<35>=0                     ; * BD Overcharge Variance
      BILL.REC<36>=0                     ; * BD Commission Variance
      BILL.REC<37>=''
      PROC.DUE.DATE=BILL.DATE+CARRIER.DAYS         ; * JMK36
      IF CARRIER.DAYS.OVERRIDE#'Y' THEN  ; * JMK36
         CLIENT.DAYS=CLIENT.REC<186>     ; * JMK51
         IF CLIENT.DAYS#'' AND NUM(CLIENT.DAYS) THEN         ; * JMK36
            PROC.DUE.DATE=BILL.DATE+CLIENT.DAYS    ; * JMK36
         END                             ; * JMK36
         IF CLIENT.DAYS='C' OR CLIENT.DAYS='P' THEN          ; * JMK36 ; * JMK38
            IF CLIENT.DAYS='P' THEN      ; * JMK38
               DUE.DATE=''               ; * JMK38
            END                          ; * JMK38
            CCDAYS.ID=CLIENT.ID'R%5':'*':CARRIER.ID'R%5'     ; * JMK36
            READ CCDAYS.REC FROM F.CCDAYS,CCDAYS.ID THEN     ; * JMK36
               CCDAYS=CCDAYS.REC<1>      ; * JMK36
               PROC.DUE.DATE=BILL.DATE+CCDAYS      ; * JMK36
            END                          ; * JMK36
         END                             ; * JMK36
      END                                ; * JMK36
      BILL.REC<38>=PROC.DUE.DATE         ; * JMK36
      BILL.REC<39>='O'                   ; * Status O for OK - needed for process program
      BILL.REC<40>=''                    ; * Bank ?
      BEGIN CASE
         CASE CARRIER.ID='00041'         ; * UPS Variance description
            IF TOTAL.DISCOUNT.VARIANCE#0 THEN
               BILL.REC<41,1>='Discount Variance'
            END
            IF TOTAL.OVERCHARGE.VARIANCE#0 THEN
               IF SHIPPER.NUMBER='E79490' AND ADDR.CORR.ARRAY<4>+0#0 THEN
                  IF TOTAL.OVERCHARGE.VARIANCE-1#0 THEN
                     BILL.REC<41,2>=(TOTAL.OVERCHARGE.VARIANCE-1)'R26':' Guaranteed Service Refund/Voids,.01 Address Correction of ':ADDR.CORR.ARRAY<4>'R26'
                  END ELSE
                     BILL.REC<41,2>='.01 Address Correction ':ADDR.CORR.ARRAY<4>'R26'
                  END
               END ELSE
                  BILL.REC<41,2>='Guaranteed Service Refund/Voids'
               END
            END
            IF TOTAL.LOGISTICS.VARIANCE#0 THEN
               BILL.REC<41,3>='Logistics Variance'
            END
         CASE 1
            IF SELECT.ALL THEN
               EBILL.ERROR<1,-1>='Carrier ':CARRIER.ID:' needs to be setup for variance description - Aborting.'
            END ELSE
               CALL ELINE('Carrier ':CARRIER.ID:' needs to be setup for variance description - Aborting.')
            END
            GOTO THE.END
      END CASE
      BILL.REC<42>=''                    ; * Discount commission - leave blank for process program
      BILL.REC<43>=''                    ; * Overcharge commission - leave blank for process program
      BILL.REC<44>=''                    ; * Consulting commission - leave blank for process program
      BILL.REC<45>='LD'                  ; * Entry for Logistics Distribution
      BILL.REC<46>=''                    ; * Minimum charge ?
      BILL.REC<47>='N'                   ; * Approved carrier ?
      BILL.REC<48>=''                    ; * Carrier warning ?
      BILL.REC<49>='0'                   ; * CPM ?
      BILL.REC<50>=''                    ; * Update mode ?
      IF TOTAL.LOGISTICS.VARIANCE#0 THEN
         BILL.REC<51>=BILL.REC<21>       ; * Variance code (Transportation mode)
         BILL.REC<52>=TOTAL.LOGISTICS.VARIANCE     ; * Variance amount (Logistics variance)
         READV TEMP FROM F.TRANSPORT,BILL.REC<51>,1 ELSE TEMP=''
         BILL.REC<56>=TEMP               ; * Log Desc (Transportation mode name)
      END ELSE
         BILL.REC<51>=''                 ; * Variance code (Transportation mode)
         BILL.REC<52>=''                 ; * Variance amount (Logistics variance)
         BILL.REC<56>=''                 ; * Log Desc (Transportation mode name)
      END
      BILL.REC<53>=PROG.NAME             ; * Entered by
      BILL.REC<54>=PROG.NAME             ; * Verified by
      BILL.REC<55>=0                     ; * Size
      BILL.REC<57>=''
      BILL.REC<58>=''
      BILL.REC<59>=''
      BILL.REC<60>=''
      BILL.REC<61>=''
      BILL.REC<62>=''
      BILL.REC<63>='0'                   ; * Misrouting amount 0 for UPS
      BILL.REC<64>=''
      BILL.REC<65>=''
      BILL.REC<66>=''
      BILL.REC<67>=''
      BILL.REC<68>='1'                   ; * Stack 1 bill - Nothing to do by the auditor
      BILL.REC<69>=''
      BILL.REC<70>=''
      BILL.REC<71>=''
      BILL.REC<72>=''
      BILL.REC<73>=''
      BILL.REC<74>=''
      BILL.REC<75>=''
      BILL.REC<76>=''
      BILL.REC<77>=''
      BILL.REC<78>=''
      BILL.REC<79>=''
      BILL.REC<80>=''
      BILL.REC<81>=''
      BILL.REC<82>=''
      BILL.REC<83>=''
      BILL.REC<84>=PROG.NAME
      BILL.REC<85>=TIME()
      BILL.REC<86>=DATE()
      BILL.REC<87>=''
      BILL.REC<88>=''
      BILL.REC<89>=''                    ; * Leave auditor blank
      BILL.REC<90>=''
      BILL.REC<91>=''
      BILL.REC<92>=''
      BILL.REC<93>=''
*     BILL.REC<94>=''                    ; * JMK09
      BILL.REC<94>=INV.NUM               ; * JMK09
      BILL.REC<95>=DATE()
      BILL.REC<96>=''
      BILL.REC<97>=''
      BILL.REC<98>=BILL.REC<8>
      BILL.REC<99>=''
      BILL.REC<100>=BILL.REC<17>
      BILL.REC<101>=''
      BILL.REC<102>=''
      BILL.REC<103>=''
      BILL.REC<104>=''
      BILL.REC<105>=''
      BILL.REC<106>=''
      BILL.REC<107>=''
      BILL.REC<108>=''
      BILL.REC<109>=''
      BILL.REC<110>=''
      BILL.REC<111>=''
      BILL.REC<112>=''
      BILL.REC<113>=''
      BILL.REC<114>=''
      BILL.REC<115>=''
      BILL.REC<116>=''
      BILL.REC<117>=''
      BILL.REC<118>=''
      BILL.REC<119>=''
      BILL.REC<120>='99999'
      BILL.REC<121>='UPS'
      BILL.REC<122>='ZZ'
      BILL.REC<123>=TOTAL.ADDRESS.CORRECTION       ; * Address correction charge
      BILL.REC<124>=''
      BILL.REC<125>=''
      BILL.REC<126>=''
      BILL.REC<127>=''
      BILL.REC<128>=''
      BILL.REC<148>=TOTAL.LATE.PAYMENT.FEE
      BEGIN CASE
         CASE SHIPPER.NUMBER='184449'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='242243'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='242369'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='295378'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='5A991X'
            BILL.REC<185>='SP'
            BILL.REC<186>='2110'
         CASE 1
            BILL.REC<185>=''
            BILL.REC<186>=''
      END CASE
      IF CLIENT.ID='01326' THEN
         BILL.REC<187>='41'
      END ELSE
         BILL.REC<187>=''
      END
      BILL.REC<198>=BM.ARRAY<ATT.SETTING+19>
      BILL.REC<238>=DUE.DATE             ; * NPR04 Changed 09/15/10
      IF USE.EXPENSE='Y' THEN
         GOSUB CALL.GET.EXPENSE          ; * Call GET.EXPENSE to return EXPENSE.CODE
      END ELSE
         EXPENSE.CODE=''                 ; * Use null
      END
      BILL.REC<5>=EXPENSE.CODE           ; * Assign expense code
      BEGIN CASE
         CASE EXP.LINE=1                 ; * JMK60
            GOSUB CALL.GET.EXPENSE       ; * JMK60
            IF DTAB#'' THEN              ; * JMK60
               TEMP=DTAB<1>              ; * JMK60
            END ELSE                     ; * JMK60
               TEMP=BILL.REC<5>          ; * JMK60
            END                          ; * JMK60


         CASE CLIENT.ID='00978'
            TEMP=''
*  Distribute BFG-Garlock Palmyra automatically....
            TEMP<1,1>='MLD'
            TEMP<1,2>='KLZ'
            TEMP<1,3>='CMP'
            TEMP<1,4>='GYL'
            TEMP<1,5>='SHT'
            TEMP<1,6>='FAB'
            TEMP<1,7>='EJT'
            TEMP<1,8>='HYD'

            IF BILL.REC<2>='I' OR BILL.REC<2>='T' THEN       ; * DRF10
               TEMP<1,9>='RIM'
            END ELSE
               IF SHIPPER.NUMBER='1X4568' OR SHIPPER.NUMBER='3V986A' THEN
                  TEMP='KLZ'
                  BILL.REC<5>='KLZ'
               END
            END

         CASE CLIENT.ID='01157'

            IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>=0 THEN
               TEMP='50.22025'
            END ELSE
               TEMP=BILL.REC<5>
               IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                  TEMP<1,2>='50.22025'
               END
            END



*  BILL.REC<5> FOR EXPENSE CODES OR NULL FOR NO EXPENSE CODES SETUP


         CASE CLIENT.ID='01357'          ; * JMK34 ; * JMK60
            GOSUB CALL.GET.EXPENSE       ; * JMK34 ; * JMK60
            IF DTAB#'' THEN              ; * JMK34 ; * JMK60
               TEMP=DTAB<1>              ; * JMK34 ; * JMK60
            END ELSE                     ; * JMK34 ; * JMK60
               TEMP=BILL.REC<5>          ; * JMK34 ; * JMK60
            END                          ; * JMK34 ; * JMK60
         CASE CLIENT.ID='01826'          ; * JMK60
            GOSUB CALL.GET.EXPENSE       ; * JMK24 ; * JMK60
            IF DTAB#'' THEN              ; * JMK24 ; * JMK60
               TEMP=DTAB<1>              ; * JMK24 ; * JMK60
            END ELSE                     ; * JMK24 ; * JMK60
               TEMP=BILL.REC<5>          ; * JMK24 ; * JMK60
            END                          ; * JMK24 ; * JMK60


         CASE CLIENT.ID='02025'          ; * DRF08
            GOSUB CALL.GET.EXPENSE       ; * DRF08
            IF DTAB#'' THEN              ; * DRF08
               TEMP=DTAB<1>              ; * DRF08
            END ELSE                     ; * DRF08
               TEMP=BILL.REC<5>          ; * DRF08
            END                          ; * DRF08


         CASE USE.EXPENSE='Y'
            TEMP=BILL.REC<5>
         CASE USE.EXPENSE='N'
            TEMP=''
         CASE 1
            IF SELECT.ALL THEN
               EBILL.ERROR<1,-1>='Client ':CLIENT.ID:' needs to be setup for mv expense codes - Aborting.'
            END ELSE
               CALL ELINE('Client ':CLIENT.ID:' needs to be setup for mv expense codes - Aborting.')
            END
            GOTO THE.END
      END CASE
      BILL.REC<31>=TEMP                  ; * This is mv expense code
      BEGIN CASE
         CASE EXP.LINE=1                 ; * JMK62
            IF DTAB#'' THEN              ; * JMK62
               TEMP=DTAB<3>              ; * JMK62
            END ELSE                     ; * JMK62
               TEMP=BILL.REC<8>          ; * JMK62
            END                          ; * JMK62
            IF DCOUNT(TEMP,@VM)=1 AND BILL.REC<8>='0' THEN   ; * JMK62
               TEMP=0                    ; * JMK62
            END                          ; * JMK62


         CASE CLIENT.ID='00978'
            BASE.AMT=BILL.REC<8>
            EXP.ARRAY=''
*  Distribute BFG-Garlock Palmyra automatically....
*  Distribute change for Inbound and Outbound 01/31/06 - DRF
*  Distribute change for Inbound 04/24/08 - DRF
*  Distribute change for Inbound 01/05/10 - DRF

            IF BILL.REC<2>='I' OR BILL.REC<2>='T' THEN       ; * DRF10
               EXP.ARRAY<1,1>='MLD' ; EXP.ARRAY<2,1>=15.1
               EXP.ARRAY<1,2>='KLZ' ; EXP.ARRAY<2,2>=28.0
               EXP.ARRAY<1,3>='CMP' ; EXP.ARRAY<2,3>=0.1
               EXP.ARRAY<1,4>='GYL' ; EXP.ARRAY<2,4>=15.4
               EXP.ARRAY<1,5>='HPS' ; EXP.ARRAY<2,5>=31.0
               EXP.ARRAY<1,6>='FAB' ; EXP.ARRAY<2,6>=1.3
               EXP.ARRAY<1,7>='EJ' ; EXP.ARRAY<2,7>=2.1
               EXP.ARRAY<1,8>='HYD' ; EXP.ARRAY<2,8>=4.6
               EXP.ARRAY<1,9>='RIM' ; EXP.ARRAY<2,9>=2.4
            END ELSE
               IF SHIPPER.NUMBER='1X4568' OR SHIPPER.NUMBER='3V986A' THEN
                  EXP.ARRAY<1,1>='KLZ' ; EXP.ARRAY<2,1>=100.0
               END ELSE
                  EXP.ARRAY<1,1>='MLD' ; EXP.ARRAY<2,1>=1.1
                  EXP.ARRAY<1,2>='KLZ' ; EXP.ARRAY<2,2>=20.2
                  EXP.ARRAY<1,3>='CMP' ; EXP.ARRAY<2,3>=0.9
                  EXP.ARRAY<1,4>='GYL' ; EXP.ARRAY<2,4>=19.9
                  EXP.ARRAY<1,5>='HPS' ; EXP.ARRAY<2,5>=32.1
                  EXP.ARRAY<1,6>='FAB' ; EXP.ARRAY<2,6>=8.4
                  EXP.ARRAY<1,7>='EJ' ; EXP.ARRAY<2,7>=9.2
                  EXP.ARRAY<1,8>='HYD' ; EXP.ARRAY<2,8>=8.2
               END
            END
            EXP.TIMES=DCOUNT(EXP.ARRAY<1>,@VM)
            EXP.CHECK=0
            AMT.LEFT=BASE.AMT
            DTAB=''
            FOR ZZ = 1 TO EXP.TIMES
               EXP.CHECK+=EXP.ARRAY<2,ZZ>
               IF ZZ = EXP.TIMES THEN
                  EXP.AMT=AMT.LEFT
               END ELSE
                  EXP.AMT=BASE.AMT*EXP.ARRAY<2,ZZ>/100
                  EXP.AMT=OCONV(EXP.AMT,'MR0')
               END
               DTAB<1,-1>=EXP.ARRAY<1,ZZ>
               DTAB<3,-1>=EXP.AMT
               AMT.LEFT-=EXP.AMT
            NEXT ZZ
            IF EXP.CHECK#100 THEN
               IF SELECT.ALL THEN
                  EBILL.ERROR<1,-1>='Automatic Expense Breakout for BFG Garlock is not 100% Update Refused!'
               END ELSE
                  CALL ELINE('Automatic Expense Breakout for BFG Garlock is not 100% Update Refused!')
               END
               GOTO THE.END
            END
            TEMP=DTAB<3>


         CASE CLIENT.ID='01157'
            IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>=0 THEN
               TEMP=BM.ARRAY<ATT.SETTING+18>
            END ELSE
               TEMP=BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>
               IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                  TEMP<1,2>=BM.ARRAY<ATT.SETTING+18>
               END
            END



         CASE CLIENT.ID='01633'
            TEMP=BILL.REC<8>
            IF BILL.REC<2>='I' THEN BILL.REC<9>='00001'
         CASE USE.EXPENSE='Y'
            TEMP=BILL.REC<8>
         CASE USE.EXPENSE='N'
            TEMP=''
         CASE 1
            IF SELECT.ALL THEN
               EBILL.ERROR<1,-1>='Client ':CLIENT.ID:' needs to be setup for mv amount to pay - Aborting.'
            END ELSE
               CALL ELINE('Client ':CLIENT.ID:' needs to be setup for mv amount to pay - Aborting.')
            END
            GOTO THE.END
      END CASE
      BILL.REC<33>=TEMP                  ; * This is mv amount to pay

      IF USE.EXPENSE='Y' THEN            ; * JMK49
         FRT.AMT=BILL.REC<8>+0           ; * JMK49
         EXP.AMT=SUM(BILL.REC<33>)+0     ; * JMK49
         IF FRT.AMT#EXP.AMT THEN         ; * JMK49
            IF DCOUNT(BILL.REC<31>,@VM)=1 THEN     ; * JMK49
               BILL.REC<33>=BILL.REC<8>  ; * JMK49
            END ELSE                     ; * JMK49
               IF FRT.AMT=0 THEN         ; * JMK49
                  NVAL=DCOUNT(BILL.REC<31>,@VM)    ; * JMK49
                  FOR VAL=1 TO NVAL      ; * JMK49
                     BILL.REC<33,VAL>=0  ; * JMK49
                  NEXT VAL               ; * JMK49
               END ELSE                  ; * JMK49
                  IF CLIENT.ID#'01826' THEN
                     NVAL=DCOUNT(BILL.REC<33>,@VM)
                     EXP.VAR=FRT.AMT-EXP.AMT       ; * JMK68
                     BILL.REC<33,NVAL>+=EXP.VAR    ; * JMK68

                  END                    ; * JMK49
               END
            END                          ; * JMK49
         END                             ; * JMK49
      END                                ; * JMK49
      RETURN

********************************************************************************
CALL.GET.EXPENSE:***
********************************************************************************
      DTAB=''
      IF EXP.LINE=1 THEN                 ; * JMK62
         EXP.ARRAY=''                    ; * JMK62
         EXP.ARRAY<1>=BM.ARRAY<ATT.SETTING+84>     ; * JMK62
         EXP.ARRAY<2>=BM.ARRAY<ATT.SETTING+85>     ; * JMK62
         DTAB<1>=EXP.ARRAY<1>            ; * JMK62
         DTAB<3>=EXP.ARRAY<2>            ; * JMK62
         EXPENSE.CODE=DTAB<1,1>          ; * JMK62
         RETURN                          ; * JMK62
      END                                ; * JMK62
      OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV THEN
         READ DIV.REC FROM F.DIV,DIVISION.ID ELSE
            DIV.REC=''
         END
      END ELSE
         DIV.REC=''
      END
      OPEN '','VEND.CUST,':CLIENT.ID TO F.CUST THEN
         READ CUST.REC FROM F.CUST,BILL.REC<17> ELSE
            CUST.REC=''
         END
      END ELSE
         CUST.REC=''
      END

      OPEN '','EXPENSE.CODES,':CLIENT.ID TO F.EXP THEN
         EXPENSE.VIN=''
         EXPENSE.VIN<1>=CUST.REC<1>
         EXPENSE.VIN<2>=BILL.REC<8>
         EXPENSE.VIN<3>=0
         EXPENSE.VIN<4>=1

         EXPENSE.VIN<5>=NEW.PRO.NUMBER[1,7]        ; * JMKXXX
         EXPENSE.VIN<6>=''               ; * SERVICE LEVEL
         CALL NEW.GET.EXPENSE(EXPENSE.VIN,CLIENT.ID,CARRIER.ID,BILL.REC,F.EXP,EXPENSE.VOUT)
         IF EXPENSE.VOUT<1>#'' THEN
            EXPENSE.CODE=EXPENSE.VOUT<1>
            RETURN
         END
      END
      VIN=''
      VIN<1>=CLIENT.ID                   ; * Client
      VIN<2>=DIVISION.ID                 ; * Division
      VIN<3>=DIV.REC<8>                  ; *
      VIN<31>=DIV.REC<45>
      VIN<4>=CARRIER.ID                  ; * Carrier
      VIN<5>=CARRIER.NAME                ; * Name of carrier
      VIN<6>=CARRIER.MODE                ; * Transportation mode

      VIN<7>=BILL.REC<2>
      BEGIN CASE
         CASE CLIENT.ID='00866'
            VIN<8>='D'                   ; * Consignee code
            VIN<9>='Great Plains MFG'    ; * Consignee description
            VIN<22>='04266'              ; * Customer/Vendor ID
         CASE CLIENT.ID='01037'
            VIN<8>=DIVISION.ID[4,2]      ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
         CASE CLIENT.ID='01283'
            VIN<8>=''                    ; * Consignee code
            VIN<9>='SRI'                 ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
         CASE 1
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
      END CASE
      VIN<10>='99999'                    ; * UPS always uses a zip of 99999
      VIN<11>='ZZ'                       ; * UPS always uses a state of ZZ
      VIN<12>='99999'                    ; * UPS always uses a zip of 99999
      VIN<13>='ZZ'                       ; * UPS always uses a state of ZZ
      VIN<14>='DEFAULT'                  ; * GET.EXPENSE internal operation mode
      VIN<15>=''                         ; * Default expense code
      VIN<16>=0                          ; * Back flag - Is this an input variable?
      VIN<17>=''                         ; * Used for EDI
      VIN<18>=''                         ; * Bill of Lading number - leave blank according to Myra
      VIN<19>= BILL.DATE                 ; * Bill date
      IF CARRIER.ID='00015' THEN
         VIN<20>=EBILL<X,4>              ; * Invoice number
      END ELSE
         VIN<20>=''                      ; * All other carriers get null
      END
      VIN<21>=DIV.REC<11>
      VIN<23>=PRO.NUMBER                 ; * Pro number
      IF CLIENT.ID='00392' THEN
         VIN<14>='EDI'
      END

      VOUT=''
      CALL GET.EXPENSE(VIN,VOUT)
      EXPENSE.CODE=VOUT<1>
      MULTI.CODE=VOUT<8>
      MULTI.PERCENT=VOUT<9>

      IF CLIENT.ID='00889' AND SHIPPER.NUMBER='47X83X' THEN
         EXPENSE.CODE='015-005-4630-10'
      END
      IF CLIENT.ID='00936' THEN          ; * Encon
         EXPENSE.CODE='5230'
      END
      IF CLIENT.ID='01182' THEN          ; * Enginetech
         EXPENSE.CODE='91990.010'
      END
      IF CLIENT.ID='00883' THEN          ; * Pollock Paper
         EXPENSE.CODE=DIVISION.ID[4,2]:'7777777'
      END


      IF CLIENT.ID='00984' THEN          ; * Orscheln
         EXPENSE.CODE='60571'
      END
      IF CLIENT.ID='01000' THEN          ; * Qualico
         EXPENSE.CODE='60571'
      END

      IF CLIENT.ID='01057' THEN          ; *  H & K Dallas
         EXPENSE.CODE='1322'
      END

      IF CLIENT.ID='00919' THEN          ; * Miracle Recreation - Monett
         EXPENSE.CODE='71000-000-6100'
      END


      IF CLIENT.ID='01511' AND SHIPPER.NUMBER='56472W' THEN
         EXPENSE.CODE='01-00-01-6210000'
      END
      IF CLIENT.ID='00978' THEN          ; * Enpro/Garlock Palmyra
         EXPENSE.CODE='MLD'
      END

      IF CLIENT.ID='01777' THEN          ; * Stemco Kaiser
         REF1=EBILL<X,9>
         REF2=EBILL<X,10>
         BEGIN CASE
            CASE BILL.REC<2>='I'
               EXPENSE.CODE='510-000'
            CASE REF1='FWS'
               EXPENSE.CODE='652-000'
            CASE REF1='FPP'
               EXPENSE.CODE='501-400'
            CASE REF1='FPA'
               EXPENSE.CODE='501-300'
            CASE 1
               EXPENSE.CODE='999-999'
         END CASE
      END
      IF CLIENT.ID='01826' THEN
         IOT=BILL.REC<2>
         BEGIN CASE
            CASE SHIPPER.NUMBER='Y83Y22' AND (IOT='O' OR IOT='T')
               EXPENSE.CODE='500275-25'
            CASE EBILL<X,88>='LTR'
               EXPENSE.CODE='500750-552'
            CASE IOT='O' OR IOT='T'
               EXPENSE.CODE='500275-551'
            CASE IOT='I'
               EXPENSE.CODE='120000-RAW'
         END CASE
      END
      IF CLIENT.ID='10310' THEN
         EXPENSE.CODE='99999'
      END
      DTAB=''
      IF MULTI.CODE#'' THEN
         DTAB<1>=MULTI.CODE
         ACTUAL.CHG=TOTAL.INVOICE.AMOUNT
         CODE.COUNTER=DCOUNT(DTAB<1>,@VM)
         CODE.ACC = 0
         FOR XX = 1 TO CODE.COUNTER-1
            DTAB<3,XX> = OCONV(ACTUAL.CHG*MULTI.PERCENT<1,XX>/10000,'MR0')
            CODE.ACC = CODE.ACC + DTAB<3,XX>
         NEXT XX
         DTAB<3,CODE.COUNTER>=ACTUAL.CHG-CODE.ACC
         IF TOTAL.INVOICE.AMOUNT=0 THEN
            DTAB<3,CODE.COUNTER>=0
         END
         CHANGE.EXP=0
      END
      IF EXPENSE.CODE='' THEN
         IF SELECT.ALL THEN              ; * JMK13
            EBILL.ERROR<1,-1>='Expense code could not be calculated.  '          ; * JMK13
            GOTO THE.END                 ; * JMK13
         END                             ; * JMK13
GET.EXPENSE1:
         CRT @(0,20):'Expense code could not be calculated. Please enter:':@(-4)
GET.EXPENSE2:
         MASK=EXPENSE.CODE:STR(MASK.CHAR,20-LEN(EXPENSE.CODE)):@(-4)
         HELP='Enter expense code. [EX]it'
         CALL GEN.IN(52,20,MASK,'',Q,0,20,'','',2,52,20,1,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         IF QI='' AND EXPENSE.CODE#'' THEN QI=EXPENSE.CODE
         BEGIN CASE
            CASE QI='EX' OR QI='EXIT'
               GOTO THE.END
            CASE QI=''
               GOTO GET.EXPENSE2
         END CASE
         EXPENSE.CODE=QI
         CRT @(0,20):'New expense code: ':EXPENSE.CODE:@(-4)
GET.YES.NO:
         MASK='Is this correct? ':STR(MASK.CHAR,4):@(-4)
         HELP='[Y]es [N]o [EX]it'
         CALL GEN.IN(0,22,MASK,'',Q,0,4,'','',2,17,22,1,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='EX' OR QI='EXIT'
               GOTO THE.END
            CASE QI='N' OR QI='NO' OR QI='0'
               CRT @(0,20):@(-3)
               GOTO GET.EXPENSE1
            CASE QI='Y' OR QI='YES' OR QI='1'
               CRT @(0,19):@(-3)
               BILL.REC<5>=EXPENSE.CODE
               BILL.REC<31,1>=EXPENSE.CODE
            CASE 1
               GOTO GET.YES.NO
         END CASE
      END
      RETURN

********************************************************************************
SETUP.CRX.BILL.REC:***
********************************************************************************
* Setup CRX.BILL.REC from BILL.REC
      CRX.BILL.REC=''
      CRX.BILL.REC<1>=CLIENT.ID
      CRX.BILL.REC<2>=BILL.REC<1>
      CRX.BILL.REC<7>=BILL.REC<7>
      CRX.BILL.REC<8>=BILL.REC<8>
      CRX.BILL.REC<10>=BILL.REC<10>
      CRX.BILL.REC<11>=BILL.REC<11>
      CRX.BILL.REC<12>=BILL.REC<12>
      CRX.BILL.REC<30>=BILL.REC<30>
      CRX.BILL.REC<37>=BILL.REC<37>
      CRX.BILL.REC<39>=BILL.REC<39>
      CRX.BILL.REC<41>=BILL.REC<41>
      CRX.BILL.REC<53>=BILL.REC<53>
      CRX.BILL.REC<54>=BILL.REC<54>
      CRX.BILL.REC<55>=BILL.REC<55>
      CRX.BILL.REC<63>=BILL.REC<63>
      RETURN
********************************************************************************
UPD.UPS.SCHED:*** NPR02 Added subroutine
********************************************************************************
      UPS.VIN = '' ; UPS.VOUT = ''
      UPS.VIN<1> = CLIENT.ID:"*":BILLS.ID
      UPS.VIN<2> = ACTIVITY.CODE
      UPS.VIN<3> = ACT.TRANS.DATE
      UPS.VIN<4> = ""                    ; * No longer used
      UPS.VIN<5> = USER.NAME
      UPS.VIN<6> = DATE()
      UPS.VIN<7> = TIME()

      ****   CALL FB.UPD.UPS.SCHED(UPS.VIN,UPS.VOUT,F.UPS.SCHED,F.UPS.SCHED.HIST)

      RETURN


********************************************************************************
EMAIL.EBILL.ERROR:***
********************************************************************************
      EMAIL.OUT=''
      EMAIL.OUT<1>='UPS.Ebills@afs.net'  ; * To: Email addresses
      EMAIL.OUT<4>='FBBP_EBILL.IMPORT.NEW@afs.net'           ; * From Email address
      EMAIL.OUT<5>='UPS E-Bill Import Errors or Warnings for ':EBILL.FILENAME    ; * Subject of Email
      EMAIL.OUT<6,-1>='UPS E-Bill Import run by ':USER.NAME:' on ':DATE()'D4-':' at ':OCONV(TIME(),'MTHS')
      EMAIL.OUT<6,-1>='from UPS e-Bill file dated ':FILE.DATE
      IF EBILL.WARNING#'' THEN
         EMAIL.OUT<6>:=' may need review for these reasons:'
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>=EBILL.WARNING
         EMAIL.OUT<6,-1>=' '
      END
      IF EBILL.ERROR#'' THEN
         EMAIL.OUT<6,-1>=' did not import due to the following reasons:'
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>=EBILL.ERROR
         EMAIL.OUT<6,-1>=' '
      END
      EMAIL.OUT<7>=1                     ; * Auto format (add carriage returns to end of text)
      VIN=EMAIL.OUT
      VOUT=''
      *****    CALL SENDMAIL(VIN,VOUT)
      RETURN

********************************************************************************
DELETE.AND.ARCHIVE.EXISTING.EBILL.FILE:***
********************************************************************************
* Begin GRB02
      CLOSESEQ INSEQ.FILE
      DELETE F.BILLDATA.EBILL,EBILL.FILENAME
      IF EBILL.ERROR#'' OR EBILL.WARNING#'' THEN   ; * JMK13
         GOSUB EMAIL.EBILL.ERROR         ; * JMK13
      END                                ; * JMK13
      IF EBILL.ERROR#'' AND UPS.INVOICE.AMOUNT # 0 THEN      ; * JMK13, GRB01
         *****
         OPENSEQ 'BILLDATA.EBILL', EBILL.FILENAME TO INSEQ.FILE ELSE
            CRT "CANNOT OPEN BILLDATA.EBILL ":EBILL.FILENAME
            GOTO THE.END
         END
         OPENSEQ 'BILLDATA.EBILL.HOLD', EBILL.FILENAME TO OUTSEQ.FILE ELSE
            CREATE OUTSEQ.FILE ELSE
               CRT "CANNOT OPEN BILLDATA.EBILL.HOLD"
               GOTO THE.END
            END
         END
         INSEQ.DONE1 = 0
         LOOP
            READSEQ LINE FROM INSEQ.FILE ELSE INSEQ.DONE1 = 1
         UNTIL INSEQ.DONE1 DO
            WRITESEQ LINE ON OUTSEQ.FILE ELSE NULL
         REPEAT
         CLOSESEQ INSEQ.FILE
         CLOSESEQ OUTSEQ.FILE
         ****  WRITE EBILL.ORG ON F.BILLDATA.EBILL.HOLD,EBILL.FILENAME       ; * JMK13
      END ELSE                           ; * JMK13
         *** END
         OPENSEQ 'BILLDATA.EBILL.HIST', EBILL.SAVE.FILENAME TO OUTSEQ.FILE ELSE
            CREATE OUTSEQ.FILE ELSE

               CRT "CANNOT OPEN BILLDATA.EBILL"
               GOTO THE.END
            END
         END
         OPENSEQ 'BILLDATA.EBILL.LOGAMT', EBILL.SAVE.FILENAME TO OUTSEQ.FILE2 ELSE
            CREATE OUTSEQ.FILE ELSE

               CRT "CANNOT OPEN BILLDATA.EBILL"
               GOTO THE.END
            END
         END

         EBS.LINE.CNT = DCOUNT(EBILL.SAVE,@AM)

         EBILL.SAVE=CHANGE(EBILL.SAVE,@VM,TAB)
         FOR JJ = 1 TO EBS.LINE.CNT
            WRITESEQ EBILL.SAVE<JJ> ON OUTSEQ.FILE ELSE NULL
            WRITESEQ EBILL.SAVE<JJ> ON OUTSEQ.FILE2 ELSE NULL
         NEXT JJ
         CLOSESEQ OUTSEQ.FILE
         CLOSESEQ OUTSEQ.FILE2
         **   WRITE EBILL.SAVE ON F.BILLDATA.EBILL.HIST,EBILL.SAVE.FILENAME
         **   WRITE EBILL.SAVE ON F.BILLDATA.EBILL.LOGAMT,EBILL.SAVE.FILENAME         ; * JMK13
         * End GRB02
         IF EBILL.SAVE.FILENAME[1,11]='P00000932HZ' THEN     ; * JMK17
            OPEN '','FTP.01349.REPORTS' TO F.FTP THEN        ; * JMK17
               WRITE EBILL.SAVE ON F.FTP,EBILL.SAVE.FILENAME           ; * JMK17
            END ELSE                     ; * JMK17
               CALL OPEN.ABORT('FTP.01349.REPORTS',PROG.NAME)          ; * JMK17
            END                          ; * JMK17
         END                             ; * JMK17
         ******     GOSUB UNBLOCK.CLIENTS           ; * JMK03
      END                                ; * JMK13
      RETURN

********************************************************************************
SETUP.DISPLAY.DA:***
********************************************************************************
* Data viewer
* Input: DATA.SCR.DA, HEADING.SCR.DA, START.SCR.DA, END.SCR.DA

      CRT @(0,START.SCR.DA-1):REV.NORMAL:HEADING.SCR.DA:REV.OFF
      CRT @(0,END.SCR.DA+1):REV.NORMAL:' ':REV.HILITE:'U':REV.NORMAL:'p ':REV.HILITE:'D':REV.NORMAL:'own ':REV.HILITE:'T':REV.NORMAL:'op ':REV.HILITE:'B':REV.NORMAL:'ottom ':REV.HILITE:'P':REV.NORMAL:'rint ':REV.HILITE:'E':REV.NORMAL:'xit                                        Select:  ':REV.OFF
      NUM.ITEMS.DA=DCOUNT(DATA.SCR.DA,@AM)
      NUM.DISPLAY.ITEMS.DA=END.SCR.DA-START.SCR.DA+1
      START.ITEM.DA=1
      END.ITEM.DA=NUM.DISPLAY.ITEMS.DA
      IF END.ITEM.DA>NUM.ITEMS.DA THEN END.ITEM.DA=NUM.ITEMS.DA

DISPLAY.DA:
      FOR X=START.ITEM.DA TO END.ITEM.DA
         CRT @(0,START.SCR.DA+X-START.ITEM.DA):DATA.SCR.DA<X>:@(-4)
      NEXT X
      FOR X=START.SCR.DA+END.ITEM.DA-START.ITEM.DA+1 TO END.SCR.DA
         CRT @(0,X):@(-4)
      NEXT X

GET.KEY:
      CALL GEN.IN(77,END.SCR.DA+1,'','',Q,0,1,'','',1,77,END.SCR.DA+1,1,QI,'',0,23)
      CRT @(77,END.SCR.DA+1):REV.NORMAL:'  ':REV.OFF
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='E'
            FOR X=START.SCR.DA-1 TO END.SCR.DA+1
               CRT @(0,X):@(-4)
            NEXT X
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            RETURN

         CASE QI='B'
            IF END.ITEM.DA=NUM.ITEMS.DA THEN GOTO GET.KEY
            END.ITEM.DA=NUM.ITEMS.DA
            START.ITEM.DA=END.ITEM.DA-NUM.DISPLAY.ITEMS.DA+1
            IF START.ITEM.DA<1 THEN START.ITEM.DA=1
            GOTO DISPLAY.DA
         CASE QI='T'
            IF START.ITEM.DA=1 THEN GOTO GET.KEY
            START.ITEM.DA=1
            END.ITEM.DA=NUM.DISPLAY.ITEMS.DA
            IF END.ITEM.DA>NUM.ITEMS.DA THEN END.ITEM.DA=NUM.ITEMS.DA
            GOTO DISPLAY.DA
         CASE QI='D'
            IF END.ITEM.DA=NUM.ITEMS.DA THEN GOTO GET.KEY
* Line at a time
            START.ITEM.DA=START.ITEM.DA+1
            END.ITEM.DA=END.ITEM.DA+1
            GOTO DISPLAY.DA
         CASE QI='U'
            IF START.ITEM.DA=1 THEN GOTO GET.KEY
* Line at a time
            START.ITEM.DA=START.ITEM.DA-1
            END.ITEM.DA=END.ITEM.DA-1
            GOTO DISPLAY.DA
         CASE 1
            GOTO GET.KEY
      END CASE



********************************************************************************
THE.END:***
********************************************************************************
      IF SELECT.ALL THEN
         IF EBILL.ERROR THEN
            ****          GOSUB DELETE.AND.ARCHIVE.EXISTING.EBILL.FILE
         END
         ***       GOTO 200
      END
* Delete any temporary work files in file UPS.BM before ending
*   The temporary items have ID = SHIPPER_NUMBER*TEMP
      EXECUTE 'SSELECT UPS.BM = "[*TEMP"' CAPTURING OUTPUT
      NUM.FILES=@SELECTED
*     IF NUM.FILES=0 THEN   ; * JCW01
      IF NUM.FILES < 1 THEN              ; * JCW01
         GOTO END.NOW
      END
      DONE=0
      LOOP
         READNEXT FILENAME ELSE DONE=1
      UNTIL DONE=1
         F1=FIELD(FILENAME,'*',1)        ; * Client number or shipper number
         F2=FIELD(FILENAME,'*',2)        ; * TEMP if it's a temporary work file
         IF F2='TEMP' THEN
            DELETE F.UPS.BM,FILENAME
         END
      REPEAT
END.NOW:***
      * Begin GRB01
      VIN1=''
      VIN1<1> = UPL.VIN<2>
      VIN1<2> = USER.NAME
      VIN1<3> = SYSTEM(18)
      VIN1<4> = "E"
      ****    CALL PROGTRACK(VIN1,VOUT1)
      * End GRB01
      IF SELECT.ALL ELSE
         IF AUTO=0 THEN                  ; * JMK19
            CALL ELINE('Program ending.')
         END                             ; * JMK19
      END
      CRT @(0,23):@(-4):
   END
