      SUBROUTINE UPD.SQL.FB.REVIEW(VIN,VOUT,CLIENT.REC,CARRIER.REC,BILL.REC,DIV.REC,VC.REC,CSCAC.REC,F.REVIEW)
***********************************************************
*
*
*
***********************************************************
* MAINTENANCE
***********************************************************
* 031811 - JMK01 - CREATED PROCESS
* 111711 - JMK02 - SysAid#349 - Consulting Commision cap
* 060324 - DRF01 - INT-343 Have the BTPS EDI data show as PPr not EDI
***********************************************************
!
* INCLUDE THE ODBC DEFINITIONS
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H

*
* INITIALIZE VARIABLES
*
      EXPECT = ""
      ERRORS = ''
      ERROR.CNT = 0

      CLIENT.ID=VIN<1>
      END.DATE=VIN<2>
      BILL.ID=VIN<3>
      SHIP.METHOD=VIN<4>
      USER=VIN<5>
      CARRIER.ID=FIELD(BILL.ID,'*',1)
      IF CARRIER.ID='00015' THEN RETURN
      IF CARRIER.ID='00041' THEN RETURN
      IF CARRIER.ID='01075' THEN RETURN

10:   GOSUB SETUP.SQL

      CVIN=BILL.ID
      CVIN<2>=CLIENT.REC<84>
      CVIN<3>=CLIENT.REC<34>
      CVIN<4>=CLIENT.REC<33>
      CVIN<5>=CLIENT.REC<85>
      CVIN<6>=CLIENT.REC<88>
      CVIN<7>=BILL.REC<20>
      CVIN<8>=CLIENT.ID
      CVIN<9>=USER
      CVIN<10>=CLIENT.REC<131>
      CVIN<11>=CLIENT.REC<177>            ; * JMK12
      CVIN<12>=CLIENT.REC<178>            ; * JMK12
      CVIN<13>=CLIENT.REC<187>            ; * JMK22
      CVIN<14>=CLIENT.REC<200>            ; * JMK34
      CVIN<15>=CLIENT.REC<208>            ; * JMK51
      CVIN<16>=CLIENT.REC<209>            ; * JMK51
      CVIN<17>=CLIENT.REC<210>            ; * JMK51
      CVIN<18>=CLIENT.REC<211>            ; * JMK51
      CVIN<19>=CLIENT.REC<212>            ; * JMK51
      CVIN<20>=CLIENT.REC<213>            ; * JMK51
      CVIN<21>=CLIENT.REC<214>            ; * JMK57
      CVIN<22>=CLIENT.REC<215>            ; * JMK57
      CVIN<23>=CLIENT.REC<216>            ; * JMK57
      CVIN<24>=CLIENT.REC<217>            ; * JMK57
      CVIN<25>=CLIENT.REC<218>            ; * JMK57
      CVIN<26>=CLIENT.REC<219>            ; * JMK57
      CVIN<28>=CLIENT.REC<268>            ; * JMK02
      BILL.REC<37>=END.DATE              ; * To fool Date selection for Charges
      CALL CALC.COMMISSION(BILL.REC,CVIN,CVOUT)
      DISCOUNT.COMM=CVOUT<1>
      OVERCHG.COMM=CVOUT<2>
      CONSULTING.COMM=CVOUT<3>
      EXPENSE.DIST.COMM=CVOUT<4>
      MGMT.SVC.COMM=CVOUT<5>              ; * JMK12
      MISR.CONS.COMM=CVOUT<6>             ; * JMK39
      OVERCHG.PERC=CVOUT<7>               ; * JMK113
      LOG.COMM.PERC=CVOUT<8>            ; * NPR019
      BILL.REC<32>=EXPENSE.DIST.COMM
      BILL.REC<42>=DISCOUNT.COMM
      BILL.REC<43>=OVERCHG.COMM
      BILL.REC<44>=CONSULTING.COMM
      BILL.REC<165>=MGMT.SVC.COMM        ; * JMK12
      BILL.REC<203>=MISR.CONS.COMM       ; * JMK39 - MISR COMM FOR MISR VARIANCES

      CARRIER.ID=BILL.REC<20>
      DIV.ID=BILL.REC<9>
      VC.ID=BILL.REC<17>
      IF VC.REC='' THEN
         VC.NAME=BILL.REC<17>
      END ELSE
         VC.NAME=VC.REC<1>
      END
      CSCAC.ITEM=CSCAC.REC<1>
      IF CSCAC.ITEM='' THEN
         CSCAC.ITEM=CARRIER.REC<12>
         IF CSCAC.ITEM='' THEN
            CSCAC.ITEM=CARRIER.REC<1>[1,5]
         END
      END
      LOCATE 'FSC' IN BILL.REC<151> SETTING FPOS THEN
         FSC.AMT=BILL.REC<152,FPOS>
      END ELSE
         FSC.AMT=0
      END
      LOCATE 'GST' IN BILL.REC<151> SETTING FPOS THEN
         GST.AMT=BILL.REC<152,FPOS>
      END ELSE
         GST.AMT=0
      END
      BEGIN CASE
         CASE BILL.REC<21>='1'
            TMODE='LTL'
         CASE BILL.REC<21>='2'
            TMODE='Parcel Air'
         CASE BILL.REC<21>='3'
            TMODE='Rail'
         CASE BILL.REC<21>='4'
            TMODE='Local'
         CASE BILL.REC<21>='6'
            TMODE='Truckload'
         CASE BILL.REC<21>='7'
            TMODE='Bus'
         CASE BILL.REC<21>='8'
            TMODE='International'
         CASE BILL.REC<21>='10'
            TMODE='Vendor'
         CASE BILL.REC<21>='11'
            TMODE='Hot Shot'
         CASE BILL.REC<21>='12'
            TMODE='Cargo Air'
         CASE BILL.REC<21>='15'
            TMODE='Parcel Ground'
         CASE BILL.REC<21>='16'
            TMODE='Warehousing'
         CASE BILL.REC<21>='17'
            TMODE='Offshore Domestic'
         CASE BILL.REC<21>='18'
            TMODE='Intermodal'
         CASE BILL.REC<21>='19'
            TMODE='Drayage'
         CASE BILL.REC<21>='20'
            TMODE='Transloading'
      END CASE
      ACT.CHG=BILL.REC<8>+0
      DCOM.AMT=BILL.REC<42>+0
      LCOM.AMT=BILL.REC<43>+0
      OCOM.AMT=BILL.REC<44>+0
      SCOM.AMT=BILL.REC<165>+0
      TRUE.COST=ACT.CHG+DCOM.AMT+LCOM.AMT+OCOM.AMT+SCOM.AMT
      FBSRC='PPR'
      IF BILL.REC<88>#'' OR BILL.REC<53>[1,12]='EBILL.IMPORT' THEN
         IF BILL.REC<295>='' THEN    ; * DRF01
            FBSRC='EDI'
         END     ; * DRF01
      END
      FOR ATT=59 TO 62
         IF BILL.REC<ATT>#'' THEN
            FBSRC='PPR'
         END
      NEXT ATT
      SQL.CLIENTNUMBER=CLIENT.ID+0
      SQL.REGIONNUMBER=DIV.REC<45>       ; * RegionNumber
      SQL.DIVISIONNUMBER=BILL.REC<9>
      SQL.CARRIERSCAC=CSCAC.ITEM
      SQL.CARRIERNAME=CARRIER.REC<1>
      SQL.PREPROCESSDATE=OCONV(END.DATE,'D4/')
      SQL.BILLDATE=OCONV(BILL.REC<1>,'D4/')
      SQL.INVOICENUMBER=BILL.REC<94>
      SQL.PRONUMBER=FIELD(BILL.ID,'*',2)
      SQL.BOLNUMBER=BILL.REC<16,1>
      SQL.IOT=BILL.REC<2>
      SQL.ORIGCITY=BILL.REC<27>
      SQL.ORIGSTATE=BILL.REC<25>
      SQL.ORIGZIP=BILL.REC<3>
      SQL.ORIGCOUNTRY=BILL.REC<222>
      SQL.CUSTVENDNAME=VC.NAME
      SQL.DESTCITY=BILL.REC<28>
      SQL.DESTSTATE=BILL.REC<26>
      SQL.DESTZIP=BILL.REC<4>
      SQL.DESTCOUNTRY=BILL.REC<223>
      SQL.THIRDPARTYNAME=BILL.REC<183>
      SQL.AUTHORIZINGPARTYNAME=BILL.REC<184>
      SQL.GROSSCHARGE=BILL.REC<7>'R46'
      SQL.ACTUALCHARGE=BILL.REC<8>'R46'
      SQL.FSC=FSC.AMT'R46'
      SQL.GST=GST.AMT'R46'
      SQL.OCVARIANCE=BILL.REC<11>'R46'
      SQL.CUTBACKCODE=BILL.REC<41,2>[1,50]
      SQL.WEIGHT=BILL.REC<6>'R24'
      SQL.TRANSMODE=TMODE
      SQL.TRUECOST=TRUE.COST'R46'
      SQL.EXPENSECODE=BILL.REC<5>
      SQL.SHIPMENTMETHOD=SHIP.METHOD
      SQL.FBSOURCE=FBSRC
      SQL.PICKREFNUMBER=BILL.ID
      SQL.REVIEWSTATUSCODE=''
      SQL.REASON=''
      SQL.APPROVEDEXPENSECODE=''
      SQL.APPROVEDDATE=''
      SQL.SENTFLAG=''
      SQL.SENTDATE=''
      SQL.CREATEDON=''

      FN = "SQLExecute"
      STATUS = SQLEXECUTE(UPDREVENV)
      STMTENV=UPDREVENV
      GOSUB CKSTMTENV

      RETURN
THE.END:***
*     END OF PROGRAM
*
* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            VOUT<1>='Errors'
            VOUT<2>=ERRORS
            MVIN=''
            MVIN<1>='UPD.SQL.Group@afs.net'
            MVIN<4>='AFS_UPD.SQL.FB.REVIEW'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP

SETUP.SQL:*
!
* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLALLOCENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLALLOCCONNECT(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*
      SQLSVR.INFO=OCONV('SQLSVR','TFB.TABLES;X;;1')
      SOURCE=FIELD(SQLSVR.INFO<1>,' ',1)
      UID=FIELD(SQLSVR.INFO<1>,' ',2)
      PWD=FIELD(SQLSVR.INFO<1>,' ',3)
*     SOURCE='DEVODS'
*     UID="uv_sql"
*     PWD="4@gAbreg"
*     SOURCE='PRODODS'
*     UID="uv_sql"
*     PWD="4@gAbreg"
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLCONNECT(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV

UPDATE.SQL.SHIPMENT:*
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
      FN = "SQLAllocStmt"
      STATUS = SQLALLOCSTMT(CONENV,UPDREVENV)
      GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
      OPT.STR = STR(' ?,',35)            ; * JMK03 ; * JMK04 ; * JMK06 ;  JMK07
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdFreightBill (":OPT.STR:")}"       ; * 64 PLACEHOLDERS

      ROWNUM = 0
      FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(UPDREVENV, 01, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENTNUMBER) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 02, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.REGIONNUMBER) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 03, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.DIVISIONNUMBER) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 04, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CARRIERSCAC) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 05, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CARRIERNAME) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 06, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.PREPROCESSDATE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 07, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.BILLDATE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 08, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.INVOICENUMBER) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 09, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.PRONUMBER) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 10, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.BOLNUMBER) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 11, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.IOT) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 12, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.ORIGCITY) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 13, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ORIGSTATE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 14, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ORIGZIP) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 15, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ORIGCOUNTRY) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 16, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CUSTVENDNAME) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 17, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.DESTCITY) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 18, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.DESTSTATE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 19, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.DESTZIP) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 20, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.DESTCOUNTRY) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 21, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.THIRDPARTYNAME) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 22, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.AUTHORIZINGPARTYNAME) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 23, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.GROSSCHARGE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 24, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.ACTUALCHARGE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 25, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.FSC) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 26, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.GST) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 27, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.OCVARIANCE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 28, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CUTBACKCODE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 29, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.WEIGHT) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 30, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.TRANSMODE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 31, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.TRUECOST) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 32, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.EXPENSECODE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 33, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.SHIPMENTMETHOD) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 34, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.FBSOURCE) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDREVENV, 35, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.PICKREFNUMBER) ; STMTENV=UPDREVENV ; GOSUB CKSTMTENV

      FN = "SQLPrepare"
      STATUS = SQLPREPARE(UPDREVENV, INST1)
      STMTENV=UPDREVENV
      ENVSRC='UPDSHIP'
      GOSUB CKSTMTENV
      RETURN

CKCONENV:

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBHIST.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN

CKSTMTENV:
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBHIST.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN

   END
