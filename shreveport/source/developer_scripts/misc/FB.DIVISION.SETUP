**************************************************************
* Program name : FB.DIVISION.SETUP
* Author       : Nicole Hennick
* Date written : February 13, 2025
* Library      : FBBP
* COPYRIGHT (C) 2025 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* Screen to enter rules for Division calculation
*
* Last updated by afs (AFSLOGISTICS\nhennick) at 07:01:34 on 02/13/2025.
*
* Start modification history
* 021325 : NKH00 : ACCU-1971 New Program
* End modification history
**************************************************************
      $INCLUDE FILE.DEFS INC_ADDS60.CODES; * These require specific PROCOMM settings

* Equates
      TERM.TYPE=SYSTEM(7)
      BEGIN CASE
         CASE TERM.TYPE='REGENT60'
            REVERSE.BLINK.ON = TERM.ESC.SEQ:CHAR(TERM.REV+TERM.BLINK)   ; * Reverse Blinking text ON
            REVERSE.ON = TERM.ESC.SEQ:CHAR(TERM.REV)          ; * Reverse text ON
            REVERSE.OFF = TERM.ESC.SEQ:CHAR(TERM.NORMAL)      ; * Reverse text OFF
         CASE 1
            REVERSE.BLINK.ON = @(-13):@(-5)
            REVERSE.ON = @(-13)
            REVERSE.OFF = @(-14):@(-6)
      END CASE
      EQU TRUE TO 1
      EQU FALSE TO 0
      EQU TAB TO CHAR(9)                 

* Initialize general program variables
      PROMPT''
     
      CALL GET.USER.NEW(USER.NAME,CH.NUM)
      PROG.NAME='FB.DIVISION.SETUP'
      PROG.DESC='Division Setup'
      PACK.NAME='USER : ':USER.NAME
      CO.NAME='AFS Logistics, LLC'       
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'FB.DIVISION.SETUP' ; UPL.VOUT = ''         
      UPL.VIN<3> = USER.NAME
      UPL.VIN<4> = CH.NUM
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)      
      EDIT.MASK.CHAR='-'
      PLACE.HOLDER='~~ PLACE*HOLDER ~~'
      DASH=STR('-',80)                   
      EMAIL=0                            
      TESTING=0  
      
* Check Access
      OPEN '','OPERATOR' TO F.OP ELSE
         CALL OPEN.ABORT("OPERATOR",PROG.NAME)
      END
      READV OP.FLG FROM F.OP,USER.NAME,88 ELSE
         OP.FLG = "N"
      END
      IF OP.FLG # "Y" THEN      
         CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
         CALL FB.PRINT.CENT(1,80,14,'Access Denied! Contact your Supervisor for Access')
         CALL ELINE('')
         STOP
      END    
      USER.ACCESS=2  

* Set access privileges
* 3 Levels of access:
*      0 - Access Denied
*      1 - View Access only
*      2 - Full View/Edit Access
                              

* Initialize operating variables
      PAGE.SIZE=13                       ; * Number of lines per page
      START.Y=7                          ; * Starting y-position on the screen minus one
      LAST.EDIT.MASK=1                   ; * Last item edited or deleted
      WIDTH=80                           ; * Print width for printing table of overrides
      CTR=INT(WIDTH/2)                   ; * Center of the table width

      DIVISION.REC=''
      OLD.DIVISION.REC=''
      CLIENT.ID=''
      CLIENT.NAME=''
      CLIENT.CITY=''
      CLIENT.STATE=''
      CARRIER.ID=''
      CARRIER.NAME=''
      CARRIER.CITY=''
      CARRIER.STATE=''

* Open files
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END
      OPEN '','FB.DIVISION' TO F.DIVISION ELSE
         CALL OPEN.ABORT('FB.DIVISION',PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','VOC' TO F.VOC ELSE        
         CALL OPEN.ABORT('VOC',PROG.NAME)          
      END                                
      OPEN '','BILLDATA.':USER.NAME TO F.BILLDATA ELSE       
         CALL OPEN.ABORT('BILLDATA.':USER.NAME,PROG.NAME)    
      END                                
      OPEN '','BCTRL' TO F.BCTRL ELSE    
         CALL OPEN.ABORT('BCTRL',PROG.NAME)        
      END                                

      GOSUB DISPLAY.SCREEN
    
*************************************************************
GET.CLIENT: ***
*************************************************************
      IF CLIENT.ID THEN
         EDIT.MASK=CLIENT.ID'R%5':@(-4)
      END ELSE
         EDIT.MASK=STR(EDIT.MASK.CHAR,5):@(-4)
      END
      HELP='Enter client ID. [L]ist existing client/carrier setups [EX]it'
      CALL GEN.IN(10,3,EDIT.MASK,'',Q,0,20,'','',2,10,3,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='' AND CLIENT.ID THEN QI=CLIENT.ID
      IF QI='' AND NOT(CLIENT.ID) THEN QI='ALL'
      BEGIN CASE
         CASE QI='EX'
            GOTO THE.END
         CASE QI='L'
            LIST.CLIENT=''
            GOSUB DISPLAY.DIVISIONS
            GOSUB DISPLAY.SCREEN
            GOTO GET.CLIENT
         CASE NOT(QI MATCHES "0N")
            CALL SOUNDEX.DISPLAY(QI,'CLIENTS','SDX.CLIENTS,NAME','2,3,4',ITEM.LIST)
            BEGIN CASE
               CASE ITEM.LIST=''
                  GOSUB DISPLAY.SCREEN
                  GOTO GET.CLIENT
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
                  GOSUB DISPLAY.SCREEN
                  GOTO GET.CLIENT
               CASE ITEM.LIST#''
                  IF NUM(ITEM.LIST<1,1>) THEN DATA ITEM.LIST<1,1>
                  GOSUB DISPLAY.SCREEN
                  GOTO GET.CLIENT
            END CASE
         CASE NUM(QI) AND QI#''
            QI=QI'R%5'
            READ CLIENT.REC FROM F.CLIENTS,QI THEN
               CLIENT.ID=QI
               CLIENT.NAME=CLIENT.REC<2>
               CLIENT.CITY=CLIENT.REC<4>
               CLIENT.STATE=CLIENT.REC<5>
            END ELSE
               CALL ELINE('ERROR - Client ':QI:' is not a valid client.')
               GOTO GET.CLIENT
            END
         CASE 1
            GOTO GET.CLIENT
      END CASE
      IF CLIENT.ID='ALL' THEN
         CRT @(10,3):'ALL':@(-4)
      END ELSE
         CRT @(10,3):CLIENT.ID'R%5':' ':CLIENT.NAME:' (':CLIENT.CITY:', ':CLIENT.STATE:')':@(-4)
         OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV ELSE
            CALL ELINE('Division codes not setup for this client')
            GOTO GET.CLIENT
         END
      END

*************************************************************
GET.CARRIER: ***
*************************************************************
      IF CARRIER.ID THEN
         EDIT.MASK=CARRIER.ID:@(-4)
      END ELSE
         EDIT.MASK=STR(EDIT.MASK.CHAR,5):@(-4)
      END
      HELP='Enter carrier ID. [L]ist existing client/carrier setups [ALL] [X]=Back [EX]it'
      CALL GEN.IN(10,4,EDIT.MASK,'',Q,0,20,'','',2,10,4,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='' AND CARRIER.ID THEN QI=CARRIER.ID
      IF QI='' AND NOT(CARRIER.ID) AND CLIENT.ID#'ALL' THEN QI='ALL'
      BEGIN CASE
         CASE QI='EX'
            GOTO THE.END
         CASE QI='X'
            GOTO GET.CLIENT
         CASE QI='ALL'
            CARRIER.ID='ALL'
            CARRIER.NAME='All Carriers'  
         CASE QI='L'
            LIST.CLIENT=CLIENT.ID
            GOSUB DISPLAY.DIVISIONS
            GOSUB DISPLAY.SCREEN
            GOTO GET.CARRIER
         CASE NOT(QI MATCHES "0N")
            CALL SOUNDEX.DISPLAY(QI,'CARRIERS','SDX.CARRIER,NAME','1,3,4',ITEM.LIST)
            BEGIN CASE
               CASE ITEM.LIST=''
                  GOSUB DISPLAY.SCREEN
                  GOTO GET.CARRIER
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
                  GOSUB DISPLAY.SCREEN
                  GOTO GET.CARRIER
               CASE ITEM.LIST#''
                  IF NUM(ITEM.LIST<1,1>) THEN DATA ITEM.LIST<1,1>
                  GOSUB DISPLAY.SCREEN
                  GOTO GET.CARRIER
            END CASE
         CASE NUM(QI) AND QI#''
            QI=QI'R%5'
            READ CARRIER.REC FROM F.CARRIERS,QI THEN
               CARRIER.ID=QI
               CARRIER.NAME=CARRIER.REC<1>
               CARRIER.CITY=CARRIER.REC<3>
               CARRIER.STATE=CARRIER.REC<4>
            END ELSE
               CALL ELINE('ERROR - Carrier ':QI:' is not a valid carrier.')
               GOTO GET.CARRIER
            END
         CASE 1
            GOTO GET.CARRIER
      END CASE

      IF CLIENT.ID='ALL' AND CARRIER.ID='ALL' THEN
         CALL ELINE('Cannot setup for ALL Clients and ALL Carriers')
         GO GET.CARRIER
      END
      IF CARRIER.ID='ALL' THEN
         CRT @(10,4):'ALL'
      END ELSE
         IF CARRIER.ID THEN
            CRT @(10,4):CARRIER.ID'R%5':' ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
         END
      END

* Load division record
      DIVISION.ID=CLIENT.ID:'*':CARRIER.ID
      READ DIVISION.REC FROM F.DIVISION,DIVISION.ID ELSE
         DIVISION.REC=''
      END
      OLD.DIVISION.REC=DIVISION.REC

* Load division fields
      READ DIVISION.FIELDS FROM F.TABLES,'DIVISION.FIELDS' ELSE DIVISION.FIELDS=''  ; * JMK11
      NUM.FIELDS=DCOUNT(DIVISION.FIELDS<1>,@VM)

* Load division operators
      READ DIVISION.OPERATORS FROM F.TABLES,'DIVISION.OPERATORS' ELSE DIVISION.OPERATORS=''   ; * JMK11
      NUM.OPERATORS=DCOUNT(DIVISION.OPERATORS<1>,@VM)
      OPERATOR.HELP=''
      FOR X=1 TO NUM.OPERATORS
         IF X#1 THEN OPERATOR.HELP:=' '
         OPERATOR.HELP:='[':X:']=':DIVISION.OPERATORS<1,X>
      NEXT X

* Calculate number of items and number of pages and set page number
      NUM.RULES=DCOUNT(DIVISION.REC<6>,@VM)
      IF NUM.RULES=0 THEN
         NUM.PAGES=0
         PAGE.NUMBER=0
         CALL FB.DRAW.BOX(0,START.Y+1,80,PAGE.SIZE,' ','')
         IF CARRIER.ID='ALL' THEN
            CALL FB.PRINT.CENT(0,78,12,'(All Carriers)')
         END ELSE
            CALL FB.PRINT.CENT(0,78,12,'Carrier ':CARRIER.ID'R#5':', ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')')
         END
         CALL FB.PRINT.CENT(0,78,13,'does not have an DIVISION Setup')
         CALL ELINE('')
         IF USER.ACCESS=1 THEN GOTO THE.END
      END ELSE
         NUM.PAGES=INT(NUM.RULES/PAGE.SIZE)
         IF REM(NUM.RULES,PAGE.SIZE) THEN NUM.PAGES+=1
         PAGE.NUMBER=1
      END
      GOSUB DISPLAY.PAGE

*************************************************************
MAIN.START: ***
*************************************************************
      ADD.RULE = 0   
      IF USER.ACCESS=2 AND DIVISION.REC='' AND OLD.DIVISION.REC='' THEN  
         CRT @(0,22):'Enter Option : --      [C]opy [B]ack Page [F]orward Page [T]op Page [L]ast Page'         
      END ELSE                           
         CRT @(0,22):'Enter Option : --             [B]ack Page [F]orward Page [T]op Page [L]ast Page'
      END                                
      EDIT.MASK=STR(EDIT.MASK.CHAR,2)
      HELP='[A]dd [D]elete [E]dit [I]nsert Group [S]ort [P]rint    [U]pdate [X]=Back [EX]it'
      CALL GEN.IN(15,22,EDIT.MASK,'',Q,0,3,'','',3,15,22,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'                    ; * Exit
            IF USER.ACCESS=1 THEN GOTO THE.END
            GOTO LAST.CHANCE.TO.SAVE
         CASE QI='X'                     ; * Back to carrier
            IF USER.ACCESS=1 THEN
               GOSUB DISPLAY.SCREEN
               GOTO GET.CARRIER
            END
            IF DIVISION.REC#OLD.DIVISION.REC THEN
               YN.MSG='You have unsaved changes. Save before entering new carrier?'
               YN.MASK=''
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER='Y' THEN
                  CRT @(0,22):'Saving...':@(-3)
                  SLEEP 1
                  GOSUB SORT.DIVISION.REC
                  GOSUB FAILSAFE.CHECK
                  IF FAILSAFE.OK THEN
                     GOSUB SORT.DIVISION.REC
                     GOSUB SAVE.DIVISION.REC
                     GOSUB DISPLAY.PAGE
                  END ELSE
                     GOSUB DISPLAY.PAGE
                     GOTO MAIN.START     ; * X-Back aborted due to failsafe errors
                  END
               END
            END
            GOSUB DISPLAY.SCREEN
            GOTO GET.CARRIER
         CASE QI='U'                     ; * Update (and exit)
            IF USER.ACCESS=1 THEN GOTO THE.END
            IF DIVISION.REC#OLD.DIVISION.REC OR TESTING THEN   
               CRT @(0,22):'Saving...':@(-3)
               SLEEP 1
               GOSUB SORT.DIVISION.REC
               GOSUB FAILSAFE.CHECK
               IF FAILSAFE.OK THEN
                  GOSUB SORT.DIVISION.REC
                  GOSUB SAVE.DIVISION.REC
                  GOSUB DISPLAY.PAGE
               END ELSE
                  GOSUB DISPLAY.PAGE
                  GOTO MAIN.START        ; * Update aborted due to failsafe errors
               END
            END ELSE
               CRT @(0,22):'No changes to save.':@(-3)
               SLEEP 1
            END
            GOTO THE.END
         CASE QI='L' OR QI='LP'          ; * Last Page
            IF NUM.PAGES#0 AND PAGE.NUMBER#NUM.PAGES THEN
               PAGE.NUMBER=NUM.PAGES
               GOSUB DISPLAY.PAGE
            END ELSE
               CALL ELINE('** LAST PAGE **')
            END
            GOTO MAIN.START
         CASE QI='T' OR QI='TP'          ; * Top Page
            IF NUM.PAGES#0 AND PAGE.NUMBER#1 THEN
               PAGE.NUMBER=1
               GOSUB DISPLAY.PAGE
            END ELSE
               CALL ELINE('** FIRST PAGE **')
            END
            GOTO MAIN.START
         CASE QI='F' OR QI='FP'          ; * Forward a page
            IF NUM.PAGES#0 AND PAGE.NUMBER<NUM.PAGES THEN
               PAGE.NUMBER+=1
               GOSUB DISPLAY.PAGE
            END ELSE
               CALL ELINE('** LAST PAGE **')
            END
            GOTO MAIN.START
         CASE QI='B' OR QI='BP'          ; * Backward a page
            IF NUM.PAGES#0 AND PAGE.NUMBER>1 THEN
               PAGE.NUMBER-=1
               GOSUB DISPLAY.PAGE
            END ELSE
               CALL ELINE('** FIRST PAGE **')
            END
            GOTO MAIN.START
         CASE QI='C' AND DIVISION.REC=''  

*************************************************************         
GET.COPY.CLIENT: *** 
*************************************************************
               EDIT.MASK=STR(EDIT.MASK.CHAR,5):@(-4)         
               CRT @(0,22):'Enter original client : -----'   
               HELP='Enter copy client ID. [EX]it'           
               CALL GEN.IN(24,22,EDIT.MASK,'',Q,0,20,'','',2,24,22,1,QI,HELP,0,23)         
               QI=OCONV(QI,'MCU')        
               IF QI='' AND CLIENT.ID THEN QI=CLIENT.ID      
               IF QI='' AND NOT(CLIENT.ID) THEN QI='ALL'     
               BEGIN CASE                
                  CASE QI='EX'           
                     GOTO THE.END        
                  CASE NOT(QI MATCHES "0N")        
                     CALL SOUNDEX.DISPLAY(QI,'CLIENTS','SDX.CLIENTS,NAME','2,3,4',ITEM.LIST)         
                     BEGIN CASE          
                        CASE ITEM.LIST=''          
                           GOSUB DISPLAY.SCREEN    
                           GOTO GET.COPY.CLIENT    
                        CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1   
                           GOSUB DISPLAY.SCREEN    
                           GOTO GET.COPY.CLIENT    
                        CASE ITEM.LIST#''          
                           IF NUM(ITEM.LIST<1,1>) THEN DATA ITEM.LIST<1,1>       
                           GOSUB DISPLAY.SCREEN    
                           GOTO GET.COPY.CLIENT    
                     END CASE            
                  CASE NUM(QI) AND QI#''           
                     QI=QI'R%5'          
                     READ CCLIENT.REC FROM F.CLIENTS,QI THEN           
                        CCLIENT.ID=QI    
                        CLIENT.NAME=CCLIENT.REC<2>           
                        CLIENT.CITY=CCLIENT.REC<4>           
                        CLIENT.STATE=CCLIENT.REC<5>          
                     END ELSE            
                        CALL ELINE('ERROR - Client ':QI:' is not a valid client.')         
                        GOTO GET.COPY.CLIENT       
                     END                 
                  CASE 1                 
                     GOTO GET.COPY.CLIENT          
               END CASE   
               
*************************************************************                              
GET.COPY.CARRIER: *** 
*************************************************************
               EDIT.MASK=STR(EDIT.MASK.CHAR,5):@(-4)         
               CRT @(0,22):'Enter original carrier : -----'  
               HELP='Enter copy carrier ID. [EX]it'          
               CALL GEN.IN(24,22,EDIT.MASK,'',Q,0,20,'','',2,24,22,1,QI,HELP,0,23)         
               QI=OCONV(QI,'MCU')        
               IF QI='' AND CARRIER.ID THEN QI=CARRIER.ID    
               IF QI='' AND NOT(CARRIER.ID) THEN QI='ALL'    
               BEGIN CASE                
                  CASE QI='EX'           
                     GOTO THE.END        
                  CASE QI='ALL'          
                     CCARRIER.ID='ALL'   
                  CASE NOT(QI MATCHES "0N")        
                     CALL SOUNDEX.DISPLAY(QI,'CARRIERS','SDX.CARRIER,NAME','1,3,4',ITEM.LIST)        
                     BEGIN CASE          
                        CASE ITEM.LIST=''          
                           GOSUB DISPLAY.SCREEN    
                           GOTO GET.COPY.CARRIER   
                        CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1   
                           GOSUB DISPLAY.SCREEN    
                           GOTO GET.COPY.CARRIER   
                        CASE ITEM.LIST#''          
                           IF NUM(ITEM.LIST<1,1>) THEN DATA ITEM.LIST<1,1>       
                           GOSUB DISPLAY.SCREEN    
                           GOTO GET.COPY.CARRIER   
                     END CASE            
                  CASE NUM(QI) AND QI#''           
                     QI=QI'R%5'          
                     READ CCARRIER.REC FROM F.CLIENTS,QI THEN          
                        CCARRIER.ID=QI   
                        CCARRIER.NAME=CCARRIER.REC<2>        
                        CCARRIER.CITY=CCARRIER.REC<4>        
                        CCARRIER.STATE=CCARRIER.REC<5>       
                     END ELSE            
                        CALL ELINE('ERROR - Carrier ':QI:' is not a valid carrier.')       
                        GOTO GET.COPY.CARRIER      
                     END                 
                  CASE 1                 
                     GOTO GET.COPY.CARRIER         
               END CASE                  
               CDIVISION.ID=CCLIENT.ID:'*':CCARRIER.ID
               READ CDIVISION.REC FROM F.DIVISION,CDIVISION.ID ELSE
                  CDIVISION.REC=''
               END
               DIVISION.REC=CDIVISION.REC
               GOSUB SORT.DIVISION.REC
               GOSUB DISPLAY.PAGE
               GOTO MAIN.START           
         CASE QI='P'                     ; * Print Divisions to printer
            IF NUM.RULES>0 THEN
               YN.MSG='Print Division rules to currently selected printer?'
               YN.MASK='Y'
               GOSUB ASK.Y.OR.N
               IF YN.ANSWER='Y' THEN
                  GOSUB SORT.DIVISION.REC
                  GOSUB PRINT.DIVISIONS
                  GOSUB DISPLAY.SCREEN
               END ELSE                  
                  YN.MSG='Send Division rules to Spreadsheet?'          
                  YN.MASK='Y'            
                  GOSUB ASK.Y.OR.N       
                  IF YN.ANSWER='Y' THEN  
                     GOSUB SORT.DIVISION.REC        
                     GOSUB DNLD.DIVISIONS           
                  END                    
               END
               GOSUB DISPLAY.PAGE
            END ELSE
               CALL ELINE('No rules to PRINT.')
            END
            GOTO MAIN.START
         CASE QI='S'                     ; * Sort
            IF USER.ACCESS=1 THEN GOTO MAIN.START
            IF NUM.RULES>1 THEN
               CRT @(0,22):'Sorting...':@(-3)
               SLEEP 1
               GOSUB SORT.DIVISION.REC
               GOSUB DISPLAY.PAGE
            END ELSE
               CALL ELINE('No rules to sort.')
            END
            GOTO MAIN.START
         CASE QI='I' OR QI='IG'          ; * Insert a group
            IF USER.ACCESS=1 THEN GOTO MAIN.START
            IF NUM.RULES<1 THEN
               CALL ELINE('No groups to INSERT before.')
            END ELSE
               IF DIVISION.REC<6,NUM.RULES>#'ZZ' THEN
                  GOSUB SORT.DIVISION.REC
                  GOSUB DISPLAY.PAGE
                  AFN.MSG='Enter group to insert BEFORE :'
                  AFN.MIN=DIVISION.REC<6,1>
                  AFN.MAX=DIVISION.REC<6,NUM.RULES>
                  AFN.MASK=AFN.MIN
                  GOSUB ASK.FOR.NUM
                  IF AFN.ANSWER#'X' THEN
                     INSERT.BEFORE=AFN.ANSWER
                     GOSUB INSERT.GROUP
                     GOSUB DISPLAY.PAGE
                  END
               END ELSE
                  CALL ELINE('Last group is ZZ and cannot go any higher.')
               END
            END
            GOTO MAIN.START
         CASE QI='E'                     ; * Edit a rule
            IF USER.ACCESS=1 THEN GOTO MAIN.START
            IF NUM.RULES<1 THEN
               CALL ELINE('No rules to EDIT.')
            END ELSE
               EDIT.ENTRY=''
               GOSUB EDIT.DIVISION.RULE
               GOSUB DISPLAY.PAGE
            END
            GOTO MAIN.START
         CASE NUM(QI) AND QI#''          ; * Edit rule number
            IF USER.ACCESS=1 THEN GOTO MAIN.START
            IF QI>=1 AND QI<=NUM.RULES THEN
               EDIT.ENTRY=QI
               GOSUB EDIT.DIVISION.RULE
               GOSUB DISPLAY.PAGE
            END ELSE
               CALL ELINE('No rules to EDIT.')
            END
            GOTO MAIN.START
         CASE QI='D'                     ; * Delete a rule
            IF USER.ACCESS=1 THEN GOTO MAIN.START
            IF NUM.RULES<1 THEN
               CALL ELINE('No rules to DELETE.')
            END ELSE
               GOSUB DELETE.DIVISION.RULE
               GOSUB DISPLAY.PAGE
            END
            GOTO MAIN.START
         CASE QI='A'                     ; * Add a rule         
            IF USER.ACCESS=1 THEN GOTO MAIN.START
            GOSUB ADD.DIVISION.RULE
            GOSUB DISPLAY.PAGE
            GOTO MAIN.START
         CASE QI='*' AND USER.NAME='JAMES'         ; * Show contents of DIVISION.REC
            CRT @(-1)
            CRT @(0,0):DIVISION.REC
            CALL ELINE('Viewing DEBUG Screen.')
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.PAGE
            GOTO MAIN.START
         CASE 1
            GOTO MAIN.START
      END CASE

*************************************************************
DISPLAY.SCREEN: *** Display the basic screen setup
*************************************************************
      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('=',79):
      CRT @(0,3):'CLIENT  :'
      CRT @(0,4):'CARRIER :'
      CRT @(0,5):STR('=',79):
      CRT @(0,21):STR('=',79):
      IF CLIENT.ID THEN
         CRT @(10,3):CLIENT.ID'R%5':' ':CLIENT.NAME:' (':CLIENT.CITY:', ':CLIENT.STATE:')'
      END
      IF CARRIER.ID='ALL' THEN
         CRT @(10,4):'ALL'
      END ELSE
         IF CARRIER.ID THEN
            CRT @(10,4):CARRIER.ID'R%5':' ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
         END
      END
      CRT @(0,6):'### Grp SubGrp Division Code                    Field  OP      Information     '    
      CRT @(0,7):'--- --- ------ -------------------------------- ------ --  --------------------'    
      
      RETURN

*************************************************************
DISPLAY.PAGE: *** This routine displays a given page
*************************************************************
      STR.OUT='[Page ':PAGE.NUMBER:' of ':NUM.PAGES:']'
      CRT @(78-LEN(STR.OUT),5):STR.OUT
      Y=1                                ; * Screen position
      IF PAGE.NUMBER=0 THEN
         LINE.NUM=1
      END ELSE
         LINE.NUM=(PAGE.NUMBER-1)*PAGE.SIZE+1
      END
      LOOP WHILE Y<=PAGE.SIZE
         BEGIN CASE
            CASE LINE.NUM>NUM.RULES
* Print nothing - actually clears line
               SCREEN.LINE=LINE.NUM'R%3'           
            CASE DIVISION.REC<6,LINE.NUM>=''
               SCREEN.LINE=LINE.NUM'R%3'           
            CASE 1
               GOSUB FORMAT.LINE
               SCREEN.LINE=FORMATTED.LINE
         END CASE
         CRT @(0,START.Y+Y):SCREEN.LINE:@(-4)      ; * Draw screen line
         Y+=1                            ; * Inc screen position
         LINE.NUM+=1
      REPEAT
      
      RETURN

*************************************************************
FORMAT.LINE: *** Format a single line for screen or printer display
*************************************************************
      FORMATTED.LINE=LINE.NUM'R%3 '       
      FORMATTED.LINE:=DIVISION.REC<6,LINE.NUM>'L#3':SPACE(3)  ; * Group 
      FORMATTED.LINE:=DIVISION.REC<14,LINE.NUM>'R%2':SPACE(3)           ; * Sub-group 
      FORMATTED.LINE:=DIVISION.REC<7,LINE.NUM>'L#32 '         ; * Division Code  
      IF EMAIL THEN                      
         LOCATE(DIVISION.REC<3,LINE.NUM>,DIVISION.FIELDS,1;FPOS) THEN    
            FORMATTED.LINE:=DIVISION.FIELDS<2,FPOS>'L#32':SPACE(1)      ; * Field  
         END                             
         LOCATE(DIVISION.REC<4,LINE.NUM>,DIVISION.OPERATORS,1;OPOS) THEN           
            FORMATTED.LINE:=DIVISION.OPERATORS<2,OPOS>'L#9':SPACE(1)    ; * Operator 
         END                             
      END ELSE                           
         FORMATTED.LINE:=DIVISION.REC<3,LINE.NUM>'L#6 '       ; * Field 
         FORMATTED.LINE:=DIVISION.REC<4,LINE.NUM>'L#2  '      ; * Operator 
      END                                
      TEMP=DIVISION.REC<5,LINE.NUM>
      LOCATE DIVISION.REC<3,LINE.NUM> IN DIVISION.FIELDS<1> SETTING POS THEN
         TYPE=DIVISION.FIELDS<4,POS>
         IF CLIENT.ID='01644' AND  DIVISION.REC<3,LINE.NUM>='DIV' THEN
            TYPE='R%6'
         END
         IF TYPE='' THEN TYPE='MCU'
      END
      IF DIVISION.REC<3,LINE.NUM>='DIV' THEN
         IF INDEX(DIVISION.REC<5,LINE.NUM>,'[',1) OR INDEX(DIVISION.REC<5,LINE.NUM>,']',1) THEN
            TYPE=''
         END
      END
      IF TYPE='R%5' OR TYPE='R%6' THEN
         TEMP=TEMP TYPE
      END ELSE
         TEMP=OCONV(TEMP,TYPE)
      END
      FORMATTED.LINE:=TEMP'L#20'         ; * Information
      
      RETURN

*************************************************************
FORMAT.DNLD.LINE: *** Format a single line for screen or printer display
*************************************************************
      FORMATTED.DNLD.LINE=LINE.NUM'R%3'   
      FORMATTED.DNLD.LINE<1,-1>=DIVISION.REC<6,LINE.NUM>'L#2'           ; * Group 
      FORMATTED.DNLD.LINE<1,-1>=DIVISION.REC<14,LINE.NUM>'R%2'          ; * Sub-group 
      FORMATTED.DNLD.LINE<1,-1>=DIVISION.REC<7,LINE.NUM>'L#32'          ; * Audit  
      FORMATTED.DNLD.LINE<1,-1>=DIVISION.REC<3,LINE.NUM>'L#6'           ; * Field 
      FORMATTED.DNLD.LINE<1,-1>=DIVISION.REC<4,LINE.NUM>'L#2'           ; * Operator 
      TEMP=DIVISION.REC<5,LINE.NUM>       
      LOCATE DIVISION.REC<3,LINE.NUM> IN DIVISION.FIELDS<1> SETTING POS THEN       
         TYPE=DIVISION.FIELDS<4,POS>      
         IF CLIENT.ID='01644' AND  DIVISION.REC<3,LINE.NUM>='DIV' THEN
            TYPE='R%6'
         END
         IF TYPE='' THEN TYPE='MCU'      
      END                                
      IF TYPE='R%5' OR TYPE='R%6' THEN                 
         TEMP=TEMP TYPE                  
      END ELSE                           
         TEMP=OCONV(TEMP,TYPE)           
      END                                
      FORMATTED.DNLD.LINE<1,-1>=TEMP'L#20'         ; * Information 
      
      RETURN                             

*************************************************************
ADD.DIVISION.RULE: *** Make sure last page is being displayed
*************************************************************
      NP1=FALSE
      NP2=FALSE
      IF PAGE.NUMBER<NUM.PAGES THEN
         PAGE.NUMBER=NUM.PAGES
         NP1=TRUE
      END
      IF REM(NUM.RULES,PAGE.SIZE)=0 THEN
* Go to the next clean page for entry
         PAGE.NUMBER+=1
         NUM.PAGES+=1
         NP2=TRUE
      END
      IF NP1 OR NP2 THEN GOSUB DISPLAY.PAGE

      EDIT.NUMBER=NUM.RULES+1
      IF REM(EDIT.NUMBER,PAGE.SIZE)=0 THEN
         Y.POS=START.Y+PAGE.SIZE
      END ELSE
         Y.POS=START.Y+REM(EDIT.NUMBER,PAGE.SIZE)
      END

* Make initial data assignments for a new rule instead of ASSIGN.FIELDS.OUT
      GROUP=''
      SUBGROUP=''
      BEGIN.DATE=''
      END.DATE=''
      DIV.CODE=''
      FIELD=''
      OPERATOR=''
      INFO=''

      GOSUB PROCESS.DATA

      IF BACK.FLAG THEN
         IF NP2 THEN
            PAGE.NUMBER-=1
            NUM.PAGES-=1
         END
      END ELSE
         NUM.RULES+=1
         GOSUB ASSIGN.FIELDS.IN
      END 
      ADD.RULE = 1                  
      GOSUB CHECK.FOR.DUPLICATES    
      ADD.RULE = 0                  
                 
      RETURN

*************************************************************
EDIT.DIVISION.RULE: *** Edit an existing rule
*************************************************************
      IF EDIT.ENTRY='' THEN
         AFN.MSG='Select rule to EDIT :'
         AFN.MIN=1
         AFN.MAX=NUM.RULES
         AFN.MASK=LAST.EDIT.MASK
         GOSUB ASK.FOR.NUM
         IF AFN.ANSWER='X' THEN RETURN
         EDIT.ENTRY=AFN.ANSWER
      END
      EDIT.NUMBER=EDIT.ENTRY
      LAST.EDIT.MASK=EDIT.ENTRY

      PAGE.NUMBER=INT(EDIT.NUMBER/PAGE.SIZE)
      IF PAGE.NUMBER*PAGE.SIZE<EDIT.NUMBER THEN PAGE.NUMBER+=1
      EDIT.Y=EDIT.NUMBER-(PAGE.NUMBER*PAGE.SIZE)+PAGE.SIZE
      GOSUB DISPLAY.PAGE
      Y.POS=START.Y+EDIT.Y

      GOSUB ASSIGN.FIELDS.OUT
      GOSUB PROCESS.DATA

      IF NOT(BACK.FLAG) THEN
         GOSUB ASSIGN.FIELDS.IN
      END
      GOSUB CHECK.FOR.DUPLICATES  ;* NKH01            

      RETURN

*************************************************************
DELETE.DIVISION.RULE: *** Delete an existing rule
*************************************************************
      AFN.MSG='Select rule to DELETE :'
      AFN.MIN=1
      AFN.MAX=NUM.RULES
      AFN.MASK=LAST.EDIT.MASK
      GOSUB ASK.FOR.NUM
      IF AFN.ANSWER='X' THEN RETURN

      EDIT.NUMBER=AFN.ANSWER
      LAST.EDIT.MASK=AFN.ANSWER
      PAGE.NUMBER=INT(EDIT.NUMBER/PAGE.SIZE)
      IF PAGE.NUMBER*PAGE.SIZE<EDIT.NUMBER THEN PAGE.NUMBER+=1
      EDIT.Y=EDIT.NUMBER-(PAGE.NUMBER*PAGE.SIZE)+PAGE.SIZE
      GOSUB DISPLAY.PAGE

      LINE.NUM=EDIT.NUMBER
      GOSUB FORMAT.LINE
      DELETE.LINE=REVERSE.ON:FORMATTED.LINE:REVERSE.OFF
      CRT @(0,START.Y+EDIT.Y):DELETE.LINE:@(-4)    ; * Draw screen line

      YN.MSG='DELETE this rule? :'
      YN.MASK='N'
      GOSUB ASK.Y.OR.N
      IF YN.ANSWER='Y' THEN
         DEL DIVISION.REC<1,EDIT.NUMBER>
         DEL DIVISION.REC<2,EDIT.NUMBER>
         DEL DIVISION.REC<3,EDIT.NUMBER>
         DEL DIVISION.REC<4,EDIT.NUMBER>
         DEL DIVISION.REC<5,EDIT.NUMBER>
         DEL DIVISION.REC<6,EDIT.NUMBER>
         DEL DIVISION.REC<7,EDIT.NUMBER>
         DEL DIVISION.REC<14,EDIT.NUMBER>
         NUM.RULES-=1
         IF NUM.RULES=0 THEN
            NUM.PAGES=0
            PAGE.NUMBER=0
         END ELSE
            NUM.PAGES=INT(NUM.RULES/PAGE.SIZE)
            IF REM(NUM.RULES,PAGE.SIZE) THEN NUM.PAGES+=1
            IF REM(NUM.RULES,PAGE.SIZE)=0 AND EDIT.NUMBER=NUM.RULES+1 THEN
               PAGE.NUMBER-=1
            END
         END
         IF LAST.EDIT.MASK>NUM.RULES THEN LAST.EDIT.MASK=NUM.RULES
         IF LAST.EDIT.MASK=0 THEN LAST.EDIT.MASK=1
      END
      
      RETURN

*************************************************************
INSERT.GROUP: *** Insert a group in between existing groups
*************************************************************
      NUM.RULES=DCOUNT(DIVISION.REC<6>,@VM)
IG:   LOCATE INSERT.BEFORE IN DIVISION.REC<6> SETTING POS ELSE
         INSERT.BEFORE=CHAR(SEQ(INSERT.BEFORE)+1)
         GOTO IG
      END
      FOR RULE=NUM.RULES TO POS STEP -1
         GRP=DIVISION.REC<6,RULE>
         BEGIN CASE
            CASE LEN(GRP)=2
               IF GRP[2,1]='Z' THEN
                  DIVISION.REC<6,RULE>=CHAR(SEQ(GRP[1,1])+1):'A'
               END ELSE
                  DIVISION.REC<6,RULE>=GRP[1,1]:CHAR(SEQ(GRP[2,1])+1)
               END
            CASE GRP='Z'
               DIVISION.REC<6,RULE>='AA'
            CASE 1
               DIVISION.REC<6,RULE>=CHAR(SEQ(GRP)+1)
         END CASE
      NEXT RULE
      
      RETURN

*************************************************************
SORT.DIVISION.REC: *** Sort rules
*************************************************************
      SORT.ARRAY=''                      ; * holds sort keys and pointers into DIVISION.REC
      SORTED.DIVISION.REC=''              ; * sorted version of DIVISION.REC
      NUM.RULES=DCOUNT(DIVISION.REC<6>,@VM)
      FOR RULE=1 TO NUM.RULES
         SORT.KEY =DIVISION.REC<6,RULE>'L#2'        ; * Group
         SORT.KEY:=DIVISION.REC<14,RULE>'R%2'       ; * Subgroup
         SORT.KEY:=DIVISION.REC<3,RULE>   ; *'L#6';  * Field
         SORT.KEY:=DIVISION.REC<4,RULE>   ; *'L#2';  * Operator
         SORT.KEY:=DIVISION.REC<5,RULE>   ; *'L#20'; * Info
         LOCATE SORT.KEY IN SORT.ARRAY<1> BY 'AL' SETTING SORT.POS THEN
            CALL ELINE('You have a duplicate rule. Please delete one of the duplicates.')
         END ELSE
            INS SORT.KEY BEFORE SORT.ARRAY<1,SORT.POS>
            INS RULE BEFORE SORT.ARRAY<2,SORT.POS>
         END
      NEXT RULE

      FOR RULE=1 TO NUM.RULES
         DIVISION.PTR=SORT.ARRAY<2,RULE>
         SORTED.DIVISION.REC<1,RULE>=DIVISION.REC<1,DIVISION.PTR>
         SORTED.DIVISION.REC<2,RULE>=DIVISION.REC<2,DIVISION.PTR>
         SORTED.DIVISION.REC<3,RULE>=DIVISION.REC<3,DIVISION.PTR>
         SORTED.DIVISION.REC<4,RULE>=DIVISION.REC<4,DIVISION.PTR>
         SORTED.DIVISION.REC<5,RULE>=DIVISION.REC<5,DIVISION.PTR>
         SORTED.DIVISION.REC<6,RULE>=DIVISION.REC<6,DIVISION.PTR>
         SORTED.DIVISION.REC<7,RULE>=DIVISION.REC<7,DIVISION.PTR>
         SORTED.DIVISION.REC<14,RULE>=DIVISION.REC<14,DIVISION.PTR>
      NEXT RULE

* Copy the items not affected by the sorting
      FOR RULE=8 TO 13
         SORTED.DIVISION.REC<RULE>=DIVISION.REC<RULE>
      NEXT RULE

      DIVISION.REC=SORTED.DIVISION.REC
      
      RETURN

*************************************************************
PRINT.DIVISIONS: *** Print rules to printer
*************************************************************
      PRINTER ON
      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"
      TITLE='DIVISION Entries'
      L.TAB=CTR-(LEN(TITLE)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):TITLE
      R.TAB=(WIDTH-LEN(TEMP))-20
      HEAD2=TEMP:SPACE(R.TAB):USER.NAME'L(#10 )':"PAGE 'PL'"
      HEAD3=STR('=',WIDTH):"'L'"
      HEAD4='CLIENT  : ':CLIENT.ID'R#5':' ':CLIENT.NAME:' (':CLIENT.CITY:', ':CLIENT.STATE:')':"'L'"
      HEAD5='CARRIER : ':CARRIER.ID'R#5'
      IF CARRIER.ID#'ALL' THEN
         HEAD5:=' ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      END
      HEAD5:="'LL'"
      HEAD6='##  Grp  SubGrp  Beg Date  End Date   Stack   Field  Optr      Information     ':"'L'"
      HEAD7='-------------------------------------------------------------------------------':"'L'"
      HED=HEAD1:HEAD2:HEAD3:HEAD4:HEAD5:HEAD6:HEAD7
      PAGE 1
      HEADING HED
      FOR LINE.NUM=1 TO NUM.RULES
         GOSUB FORMAT.LINE
         PRINT FORMATTED.LINE
      NEXT
      PRINTER OFF
      PRINTER CLOSE
      CALL ELINE('DIVISION table spooled to printer.')     
         
      RETURN

*************************************************************
DNLD.DIVISIONS: *** Download rules to spreadsheet 
*************************************************************
      DA=''                              
      L.TAB=CTR-(LEN(PROG.DESC)/2)       
      L.TAB=L.TAB-LEN(PROG.NAME)         
      TEMP=PROG.NAME:SPACE(L.TAB):PROG.DESC        
      R.TAB=WIDTH-LEN(TEMP)              
      R.TAB=R.TAB-LEN(TIMEDATE())        
      DA<1>=PROG.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE()   
      TITLE='DIVISION Entries'            
      L.TAB=CTR-(LEN(TITLE)/2)           
      L.TAB=L.TAB-LEN(CO.NAME)           
      TEMP=CO.NAME:SPACE(L.TAB):TITLE    
      R.TAB=(WIDTH-LEN(TEMP))-20         
      DA<2>=TEMP:SPACE(R.TAB):USER.NAME'L(#10 )'   
      DA<3>=STR('=',WIDTH)               
      DA<4>='CLIENT  : ':CLIENT.ID'R#5':' ':CLIENT.NAME:' (':CLIENT.CITY:', ':CLIENT.STATE:')'       
      DA<5>='CARRIER : ':CARRIER.ID'R#5'           
      IF CARRIER.ID#'ALL' THEN           
         DA<5>:=' ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'        
      END                                
      DA<6,1>='##'                       
      DA<6,2>='Grp'                      
      DA<6,3>='SubGrp'                   
      DA<6,4>='Beg Date'                 
      DA<6,5>='End Date'                 
      DA<6,6>='Stack'                    
      DA<6,7>='Field'                    
      DA<6,8>='Optr'                     
      DA<6,9>='Information'              
      DA<7,1>='--'                       
      DA<7,2>='---'                      
      DA<7,3>='---'                      
      DA<7,4>='--------'                 
      DA<7,5>='--------'                 
      DA<7,6>='-----'                    
      DA<7,7>='-----'                    
      DA<7,8>='----'                     
      DA<7,9>='-----------'              

      FOR LINE.NUM=1 TO NUM.RULES        
         GOSUB FORMAT.DNLD.LINE          
         DA<-1>=FORMATTED.DNLD.LINE      
      NEXT                               

      DA.ID=CLIENT.ID:'-':CARRIER.ID:'-DIVISIONS.XLS'         
      DA=CHANGE(DA,@VM,TAB)              
      WRITE DA ON F.BILLDATA,DA.ID       
      CALL ELINE('DIVISION table downloaded to ':DA.ID:' on your user drive.')  
        
      RETURN                             

*************************************************************
ASSIGN.FIELDS.IN: *** Grab a rule for editing
*************************************************************
      DIVISION.REC<6,EDIT.NUMBER>=GROUP'L#2'
      DIVISION.REC<14,EDIT.NUMBER>=SUBGROUP'R%2'
      DIVISION.REC<1,EDIT.NUMBER>=BEGIN.DATE
      IF END.DATE THEN
         DIVISION.REC<2,EDIT.NUMBER>=END.DATE
      END ELSE
         DIVISION.REC<2,EDIT.NUMBER>=PLACE.HOLDER
         DIVISION.REC<2,EDIT.NUMBER>=END.DATE
      END
      DIVISION.REC<7,EDIT.NUMBER>=DIV.CODE
      IF FIELD='ALL' OR FIELD='INTRA' OR FIELD='INTER' OR FIELD='FLAT' OR FIELD='EDI' FIELD='NO-EDI' THEN
         DIVISION.REC<4,EDIT.NUMBER>=PLACE.HOLDER
         DIVISION.REC<5,EDIT.NUMBER>=PLACE.HOLDER
         OPERATOR=''
         INFO=''
         DIVISION.REC<4,EDIT.NUMBER>=OPERATOR
         DIVISION.REC<5,EDIT.NUMBER>=INFO
      END
      DIVISION.REC<3,EDIT.NUMBER>=FIELD
      DIVISION.REC<4,EDIT.NUMBER>=OPERATOR
      LOCATE DIVISION.REC<3,EDIT.NUMBER> IN DIVISION.FIELDS<1> SETTING POS THEN
         TYPE=DIVISION.FIELDS<4,POS>
         IF CLIENT.ID='01644' AND  DIVISION.REC<3,EDIT.NUMBER>='DIV' THEN
            TYPE='R%6'
         END
         IF TYPE='' THEN TYPE='MCU'
      END
      IF FIELD='DIV' THEN
         IF INDEX(INFO,'[',1) OR INDEX(INFO,']',1) THEN
            TYPE=''
         END
      END
      IF TYPE='R%5' OR TYPE='R%6' THEN
         DIVISION.REC<5,EDIT.NUMBER>=INFO TYPE
      END ELSE
         DIVISION.REC<5,EDIT.NUMBER>=INFO         
      END
      
      RETURN

*************************************************************
ASSIGN.FIELDS.OUT: *** Assign a rule to the array
*************************************************************
      GROUP=DIVISION.REC<6,EDIT.NUMBER>
      SUBGROUP=DIVISION.REC<14,EDIT.NUMBER>
      BEGIN.DATE=DIVISION.REC<1,EDIT.NUMBER>
      END.DATE=DIVISION.REC<2,EDIT.NUMBER>
      DIV.CODE=DIVISION.REC<7,EDIT.NUMBER>
      FIELD=DIVISION.REC<3,EDIT.NUMBER>
      OPERATOR=DIVISION.REC<4,EDIT.NUMBER>
      INFO=DIVISION.REC<5,EDIT.NUMBER>
      
      RETURN

*************************************************************
PROCESS.DATA: *** Go through all fields for adding or editing of one rule (line on the screen)
*************************************************************
      DONE=FALSE
      FIELD.POS=1
      LOOP WHILE NOT(DONE)
         BEGIN CASE
            CASE FIELD.POS=0             ; * Done
               DONE=TRUE
            CASE FIELD.POS=1             ; * Group
               GOSUB GET.GROUP
               IF NOT(BACK.FLAG) THEN
                  IF GROUP.FIRST.EXISTS.AT#0 AND EDIT.NUMBER>GROUP.FIRST.EXISTS.AT THEN
                     DIV.CODE=DIVISION.REC<7,GROUP.FIRST.EXISTS.AT>
                     CRT @(17,Y.POS):DIV.CODE'L#30'
                  END
               END
            CASE FIELD.POS=2             ; * Subgroup
               GOSUB GET.SUBGROUP
            CASE FIELD.POS=3             ; * Audit Review
               IF GROUP.FIRST.EXISTS.AT=0 OR EDIT.NUMBER<=GROUP.FIRST.EXISTS.AT THEN
                  GOSUB GET.DIV.CODE
               END
            CASE FIELD.POS=4             ; * Field
               GOSUB GET.FIELD
               IF NOT(BACK.FLAG) THEN
                  IF FIELD='ALL' OR FIELD='INTRA' OR FIELD='INTER' OR FIELD='FLAT' OR FIELD='EDI' OR FIELD='NO-EDI' THEN
                     OPERATOR=''
                     INFO=''
                     FIELD.POS=6
                  END
               END
            CASE FIELD.POS=5             ; * Operator
               GOSUB GET.OPERATOR
            CASE FIELD.POS=6             ; * Information
               GOSUB GET.INFO
            CASE FIELD.POS=7             ; * Done
               DONE=TRUE
               GOSUB FIELD.CHECK
         END CASE
         IF BACK.FLAG THEN
            FIELD.POS-=1
         END ELSE
            FIELD.POS+=1
         END
      REPEAT
      
      RETURN

*************************************************************
GET.GROUP: ***
*************************************************************
      BACK.FLAG=FALSE
      X.POS=5
      IF GROUP THEN
         SAVE.GROUP=GROUP'L#2'
         DEFAULT.GROUP=GROUP
      END ELSE
         SAVE.GROUP=SPACE(2)
         DEFAULT.GROUP=DIVISION.REC<6,NUM.RULES>
         IF DEFAULT.GROUP='' THEN
            DEFAULT.GROUP='AA'
         END
      END
      LOCATE DEFAULT.GROUP IN DIVISION.REC<6> BY 'AL' SETTING POS THEN
         FIRST.OCCURRENCE.OF.DEFAULT=POS
      END ELSE
         FIRST.OCCURRENCE.OF.DEFAULT=0
      END
      EDIT.MASK=DEFAULT.GROUP:STR(EDIT.MASK.CHAR,2-LEN(DEFAULT.GROUP))
      HELP='OPTIONS: [X]=Back [EX]it'
GG1:  CRT @(0,22):'Enter group letter (AA-ZZ).':@(-4)
      CALL GEN.IN(X.POS,Y.POS,EDIT.MASK,'',Q,0,2,'','',2,X.POS,Y.POS,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF GROUP#'' THEN
         IF QI='' THEN QI=GROUP
      END ELSE
         IF QI='' THEN QI=DEFAULT.GROUP
      END
      BEGIN CASE
         CASE QI='EX'
            GOTO LAST.CHANCE.TO.SAVE
         CASE QI='X'
            BACK.FLAG=TRUE
            CRT @(2,Y.POS):@(-4)
            RETURN
         CASE ALPHA(QI) AND LEN(QI)=2
            LOCATE QI IN DIVISION.REC<6> BY 'AL' SETTING POS THEN
               GROUP.FIRST.EXISTS.AT=POS
               IF GROUP.FIRST.EXISTS.AT#FIRST.OCCURRENCE.OF.DEFAULT THEN
                  CALL ELINE('Warning: Group ':QI:' already exists.')
               END
            END ELSE
               GROUP.FIRST.EXISTS.AT=0   ; * Doesn't exist: it's a new group
            END
            GROUP=QI
            CRT @(X.POS,Y.POS):GROUP'L#2'
            RETURN
         CASE 1
            CALL ELINE('Invalid entry. Try again.')
            GOTO GG1
      END CASE

*************************************************************
GET.SUBGROUP: ***
*************************************************************
      BACK.FLAG=FALSE
      X.POS=10                           
      IF NOT(GROUP.FIRST.EXISTS.AT) THEN
         DEFAULT.SUBGROUP=1
      END ELSE
         DEFAULT.SUBGROUP=DIVISION.REC<14,GROUP.FIRST.EXISTS.AT>
         FOR RULE=GROUP.FIRST.EXISTS.AT+1 TO NUM.RULES
            IF GROUP=DIVISION.REC<6,RULE> THEN
               IF DIVISION.REC<14,RULE> GT DEFAULT.SUBGROUP THEN
                  DEFAULT.SUBGROUP=DIVISION.REC<14,RULE>
               END
            END
         NEXT RULE
         DEFAULT.SUBGROUP+=1
      END
      IF SUBGROUP THEN
         SAVE.SUBGROUP=SUBGROUP'R%2'
         EDIT.MASK=SUBGROUP:STR(EDIT.MASK.CHAR,2-LEN(SUBGROUP))
      END ELSE
         SAVE.SUBGROUP=SPACE(2)
         EDIT.MASK=DEFAULT.SUBGROUP:STR(EDIT.MASK.CHAR,2-LEN(DEFAULT.SUBGROUP))
      END
      HELP='OPTIONS: [X]=Back [EX]it'
GS1:  CRT @(0,22):'Enter subgroup number (01-99).':@(-4)
      CALL GEN.IN(X.POS,Y.POS,EDIT.MASK,'',Q,0,2,'','',2,X.POS,Y.POS,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF SUBGROUP#'' THEN
         IF QI='' THEN QI=SUBGROUP
      END ELSE
         IF QI='' THEN QI=DEFAULT.SUBGROUP
      END
      BEGIN CASE
         CASE QI='EX'
            GOTO LAST.CHANCE.TO.SAVE
         CASE QI='X'
            BACK.FLAG=TRUE
            CRT @(X.POS,Y.POS):SAVE.SUBGROUP
            RETURN
         CASE NUM(QI) AND QI#'' AND QI>0 AND QI<100
            SUBGROUP=QI
            CRT @(X.POS,Y.POS):SUBGROUP'R%2'
            RETURN
         CASE 1
            CALL ELINE('Invalid entry. Try again.')
            GOTO GS1
      END CASE

*************************************************************
GET.DIV.CODE: ***
*************************************************************
      BACK.FLAG=FALSE
      
*************************************************************      
ENTER.DIV.CODE: ***
*************************************************************
      X.POS=15                           
      CRT @(0,22):'Enter the Division Code.':@(-4)
      IF DIV.CODE THEN
         SAVE.DIV.CODE=DIV.CODE'L#35'    
         EDIT.MASK=DIV.CODE:STR(EDIT.MASK.CHAR,3-LEN(DIV.CODE))
      END ELSE
         SAVE.DIV.CODE=SPACE(35)         
         EDIT.MASK=STR(EDIT.MASK.CHAR,30)
      END
      HELP ='Enter the division code'
   ***   CALL GEN.IN(X.POS,Y.POS,EDIT.MASK,'',Q,0,35,'','',2,X.POS,Y.POS,0,QI,HELP,0,23)      
       CALL GEN.IN(X.POS,Y.POS,EDIT.MASK,'',Q,0,45,'','',2,X.POS,Y.POS,0,QI,HELP,0,23)      
      QI=OCONV(QI,'MCU')
      IF DIV.CODE AND QI='' THEN QI=DIV.CODE
      BEGIN CASE
         CASE QI='EX'
            GOTO LAST.CHANCE.TO.SAVE
         CASE QI='X'
            BACK.FLAG=TRUE
            CRT @(X.POS,Y.POS):SAVE.DIV.CODE
            RETURN
         CASE 1
            IF USER.NAME='DAVID' THEN CALL ELINE('PRESS BREAK')
            DIV.CODE=QI
            IF INDEX(DIV.CODE,'{',1) THEN          
               DUMMY.DIVISION.CODE=FIELD(DIV.CODE,'{',2)      
               DUMMY.DIVISION.CODE=FIELD(DUMMY.DIVISION.CODE,'}',1)      
               IF INDEX(DUMMY.DIVISION.CODE,"[",1) THEN       
                  CODE.ID=FIELD(DUMMY.DIVISION.CODE,"[",1)    
               END ELSE                  
                  CODE.ID=DUMMY.DIVISION.CODE       
               END                       
               LOCATE CODE.ID IN DIVISION.FIELDS<1> SETTING XX.POS ELSE           
                  CALL ELINE(CODE.ID:' Is invalid')          
                  GOTO ENTER.DIV.CODE    
               END                       
               IF INDEX(DUMMY.DIVISION.CODE,"[",1) THEN       
                  RANGE=FIELD(DUMMY.DIVISION.CODE,"[",2)      
                  RANGE="[":RANGE        
                  IF RANGE[LEN(RANGE),1]#']' THEN  
                     CALL ELINE(RANGE:' Is not valid. It must end with a ]')     
                     GOTO ENTER.DIV.CODE           
                  END                    
                  IF INDEX(RANGE,",",1) ELSE       
                     CALL ELINE(RANGE: ' Is not valid. It must have a comma in it')        
                     GOTO ENTER.DIV.CODE           
                  END                    
                  ACTUAL=1               
               END                       
            END ELSE                     
               IF INDEX(DIV.CODE,"~",1) THEN
                  DUMMY.DIVISION.CODE=CHANGE(DIV.CODE,"~",@AM)
                  NUM.OF.ITEMS=DCOUNT(DUMMY.DIVISION.CODE,@AM)
                  ACTUAL=1
                  FOR XX = 1 TO NUM.OF.ITEMS
                     IF ACTUAL THEN
                        ACTUAL=0
                     END ELSE
                        IF INDEX(DUMMY.DIVISION.CODE<XX>,"[",1) THEN
                           CODE.ID=FIELD(DUMMY.DIVISION.CODE<XX>,"[",1)
                        END ELSE
                           CODE.ID=DUMMY.DIVISION.CODE<XX>
                        END
                        LOCATE CODE.ID IN DIVISION.FIELDS<1> SETTING XX.POS ELSE
                           CALL ELINE(CODE.ID:' Is invalid')
                           GOTO ENTER.DIV.CODE
                        END
                        IF INDEX(DUMMY.DIVISION.CODE<XX>,"[",1) THEN
                           RANGE=FIELD(DUMMY.DIVISION.CODE<XX>,"[",2)
                           RANGE=RANGE[1,LEN(RANGE)-1]
                           RANGE="[":RANGE
                           IF RANGE[1,LEN(RANGE)-1]#']' THEN
                              CALL ELINE(RANGE:' Is not valid. It must end with a ]')
                              GOTO ENTER.DIV.CODE
                           END
                           IF INDEX(RANGE,",",1) ELSE
                              CALL ELINE(RANGE: ' Is not valid. It must have a comma in it')
                              GOTO ENTER.DIV.CODE
                           END
                           ACTUAL=1
                        END
                     END
                  NEXT XX
               END ELSE
                  READ TEMP FROM F.DIV,DIV.CODE THEN
                     IF TEMP<5>='I' THEN
                        CALL ELINE(DIV.CODE:' Is Inactive')
                        GOTO ENTER.DIV.CODE
                     END
                  END ELSE
                     CALL ELINE(DIV.CODE:' Is Not on File')
                     GOTO ENTER.DIV.CODE
                  END
               END
            END                          
            CRT @(X.POS,Y.POS):DIV.CODE'L#35':@(-4)       
            RETURN
      END CASE

*************************************************************
GET.FIELD: ***
*************************************************************
      BACK.FLAG=FALSE
      X.POS=48                           
      CRT @(0,22):'Enter an DIVISION field.':@(-4)
      IF FIELD#'' THEN
         SAVE.FIELD=FIELD'L#6'            
         EDIT.MASK=FIELD:STR(EDIT.MASK.CHAR,6-LEN(FIELD))     
      END ELSE
         SAVE.FIELD=SPACE(6)              
         EDIT.MASK=STR(EDIT.MASK.CHAR,6)            
      END
      HELP='OPTIONS: [L]ist Fields [X]=Back [EX]it'
      CALL GEN.IN(X.POS,Y.POS,EDIT.MASK,'',Q,0,6,'','',2,X.POS,Y.POS,0,QI,HELP,0,23)        
      QI=OCONV(QI,'MCU')
      IF FIELD#'' AND QI='' THEN QI=FIELD
      TYPE=''
      BEGIN CASE
         CASE QI='EX'
            GOTO LAST.CHANCE.TO.SAVE
         CASE QI='X'
            BACK.FLAG=TRUE
            CRT @(X.POS,Y.POS):SAVE.FIELD
            RETURN
         CASE QI='L'
            CALL LIST.DIV.FIELDS('',CODE.RETURNED)
            FIELD=CODE.RETURNED<1>
            TYPE=CODE.RETURNED<4>
            IF CLIENT.ID='01644' AND FIELD='DIV' THEN
               TYPE='R%6'
            END
            IF TYPE='' THEN TYPE='MCU'
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.PAGE
            CRT @(5,Y.POS):GROUP'L#2'
            CRT @(10,Y.POS):SUBGROUP'R%2'          
            CRT @(15,Y.POS):DIV.CODE'L#35'         
            CRT @(X.POS,Y.POS):FIELD'L#5'          
            RETURN
         CASE NUM(QI) AND QI#''
            IF QI<1 OR QI>NUM.FIELDS THEN
               CALL ELINE('Invalid field. Try again.')
               GOTO GET.FIELD
            END
            FIELD=DIVISION.FIELDS<1,QI>
            TYPE=DIVISION.FIELDS<4,QI>
            IF CLIENT.ID='01644' AND FIELD='DIV' THEN
               TYPE='R%6'
            END
            IF TYPE='' THEN TYPE='MCU'
            CRT @(X.POS,Y.POS):FIELD'L#5'          
            RETURN
         CASE 1
            LOCATE QI IN DIVISION.FIELDS<1> SETTING POS THEN
               FIELD=QI
               TYPE=DIVISION.FIELDS<4,POS>
               IF CLIENT.ID='01644' AND FIELD='DIV' THEN
                  TYPE='R%6'
               END
               IF TYPE='' THEN TYPE='MCU'
               CRT @(X.POS,Y.POS):FIELD'L#5'       
               RETURN
            END ELSE
               CALL ELINE('Invalid entry. Try again.')
               GOTO GET.FIELD
            END
      END CASE

*************************************************************
GET.OPERATOR: ***
*************************************************************
      BACK.FLAG=FALSE
      X.POS=55                           
      CRT @(0,22):'Enter an DIVISION operator.':@(-4)
      IF OPERATOR THEN
         SAVE.OPERATOR=OPERATOR'L#2'
         EDIT.MASK=OPERATOR:STR(EDIT.MASK.CHAR,2-LEN(OPERATOR))
      END ELSE
         SAVE.OPERATOR=SPACE(2)
         EDIT.MASK=STR(EDIT.MASK.CHAR,2)
      END
      HELP=OPERATOR.HELP:' [X]=Back [EX]it'
      CALL GEN.IN(X.POS,Y.POS,EDIT.MASK,'',Q,0,2,'','',2,X.POS,Y.POS,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF OPERATOR AND QI='' THEN QI=OPERATOR
      BEGIN CASE
         CASE QI='EX'
            GOTO LAST.CHANCE.TO.SAVE
         CASE QI='X'
            BACK.FLAG=TRUE
            CRT @(X.POS,Y.POS):SAVE.OPERATOR
            RETURN
         CASE NUM(QI) AND QI#''
            IF QI<1 OR QI>NUM.OPERATORS THEN
               CALL ELINE('Invalid operator. Try again.')
               GOTO GET.OPERATOR
            END
            OPERATOR=DIVISION.OPERATORS<1,QI>
            CRT @(X.POS,Y.POS):OPERATOR'L#2'
            RETURN
         CASE 1
            LOCATE QI IN DIVISION.OPERATORS<1> SETTING POS THEN
               OPERATOR=QI
               CRT @(X.POS,Y.POS):OPERATOR'L#2'
               RETURN
            END ELSE         
               CALL ELINE('Invalid entry. Try again.')
               GOTO GET.OPERATOR
            END
      END CASE

*************************************************************
GET.INFO: ***
*************************************************************
      BACK.FLAG=FALSE
      X.POS=59
      BEGIN CASE
         CASE FIELD = 'SADDR'            
            SPECIAL.FLAG=1               
         CASE FIELD = 'CADDR'            
            SPECIAL.FLAG=1       
         CASE FIELD = 'SNAME'            
            SPECIAL.FLAG=1               
         CASE FIELD = 'CNAME'            
            SPECIAL.FLAG=1                                   
         CASE 1
            SPECIAL.FLAG=0
      END CASE
      IF OPERATOR='EQ' OR OPERATOR='AP' THEN
         IF SPECIAL.FLAG THEN
            CRT @(0,22):'Wildcard Matching options: [Anywhere], [Right side, or Left side]':@(-4)
         END ELSE
            CRT @(0,22):'Enter DIVISION information.':@(-4)
         END
      END ELSE
         CRT @(0,22):'Enter DIVISION information.':@(-4)
      END
      IF INFO THEN
         SAVE.INFO=INFO'L#20'
         EDIT.MASK=OCONV(INFO,TYPE):STR(EDIT.MASK.CHAR,20-LEN(INFO))
      END ELSE
         SAVE.INFO=SPACE(20)
         EDIT.MASK=STR(EDIT.MASK.CHAR,20)
      END
      BEGIN CASE
         CASE TYPE[1,2]='MR'
            GENIN.TYPE='AMT':TYPE[3,1]
         CASE TYPE='D2/'
            GENIN.TYPE='DATE'
         CASE 1
            GENIN.TYPE=''
      END CASE
      HELP='OPTIONS: "NULL"=Leave Field Blank [X]=Back [EX]it'
      CALL GEN.IN(X.POS,Y.POS,EDIT.MASK,GENIN.TYPE,Q,0,20,'','',2,X.POS,Y.POS,0,QI,HELP,0,23)
      QI=TRIM(OCONV(QI,'MCU'))
      IF INFO AND QI='' THEN
         Q=INFO
         QI=INFO
      END
      BEGIN CASE
         CASE QI='EX'
            GOTO LAST.CHANCE.TO.SAVE
         CASE QI='X'
            BACK.FLAG=TRUE
            CRT @(X.POS,Y.POS):SAVE.INFO
            RETURN
         CASE 1
            IF QI='' THEN
               CALL ELINE('Invalid entry. Try again.')
               GOTO GET.INFO
            END
            IF INDEX(QI,'[',1) OR INDEX(QI,']',1) THEN
               IF OPERATOR # 'EQ' AND OPERATOR # 'AP' THEN
                  CALL ELINE('You cannot use a [ or ] with this operator')
                  GOTO GET.INFO
               END ELSE
                  IF NOT(SPECIAL.FLAG) THEN
                     CALL ELINE('You cannot use a [ or ] with this field')
                     GOTO GET.INFO
                  END
                  IF FIELD='DIV' THEN TYPE=''
               END
            END
            IF GENIN.TYPE='' THEN
               INFO=QI
            END ELSE
               INFO=Q
            END
            IF TYPE='R%5' OR TYPE='R%6' THEN
               CRT @(X.POS,Y.POS):INFO TYPE
            END ELSE
               TEMP=OCONV(INFO,TYPE)
               CRT @(X.POS,Y.POS):TEMP
            END
            RETURN
      END CASE

*************************************************************
FIELD.CHECK: *** Check fields and perform rounding
*************************************************************
      IF FIELD='CLASS' THEN
         IF INFO='77.5' THEN
            INFO='77'
            CALL ELINE('CLASS 77.5 changed to 77')
         END
         IF INFO='92.5' THEN
            INFO='92'
            CALL ELINE('CLASS 92.5 changed to 92')
         END
      END
      
      RETURN

*************************************************************
FAILSAFE.CHECK: *** Things to make sure are correct before saving
*************************************************************
      FAILSAFE.OK=TRUE                   ; * Assume no problems and try to find problems

* Enforce same begin date, end date, and auditor for same groups
      OLD.GROUP='* THIS WILL NEVER OCCUR *(&*^$%%#$'
      NUM.RULES=DCOUNT(DIVISION.REC<6>,@VM)
      FOR RULE=1 TO NUM.RULES
         GROUP=DIVISION.REC<6,RULE>
         IF GROUP#OLD.GROUP THEN
            OLD.GROUP=GROUP
            SUBGROUP.NUMBER=1
            DIV.CODE=DIVISION.REC<7,RULE>
         END ELSE
            DIVISION.REC<7,RULE>=DIV.CODE
         END
      NEXT RULE

* Nothing must follow an "ALL" rule
      LOCATE 'ALL' IN DIVISION.REC<3> SETTING POS THEN
         IF POS<NUM.RULES THEN
            FAILSAFE.OK=FALSE
            CALL ELINE('Any rules following an "ALL" will never be executed. Please fix.')
         END
      END

      RETURN

*************************************************************
SAVE.DIVISION.REC: *** Save DIVISION record
*************************************************************
* Insert the user information
      IF DIVISION.REC<8>='' THEN          ; * This is a new record. Put in original creation info.
         DIVISION.REC<8>=USER.NAME
         DIVISION.REC<9>=DATE()
         DIVISION.REC<10>=TIME()
      END ELSE                           ; * Not a new record. Put in update info.
         IF DIVISION.REC<11>='' THEN
            DIVISION.REC<11>=USER.NAME
            DIVISION.REC<12>=DATE()
            DIVISION.REC<13>=TIME()
         END ELSE
            DIVISION.REC<11>=DIVISION.REC<11>:@VM:USER.NAME
            DIVISION.REC<12>=DIVISION.REC<12>:@VM:DATE()
            DIVISION.REC<13>=DIVISION.REC<13>:@VM:TIME()
         END
      END

* Write data to file
      IF DIVISION.REC<6>#'' THEN
         WRITE DIVISION.REC ON F.DIVISION,DIVISION.ID
         OLD.DIVISION.REC=DIVISION.REC
      END ELSE
         DELETE F.DIVISION,DIVISION.ID
         DIVISION.REC=''
         OLD.DIVISION.REC=''
      END

      RETURN

*************************************************************
SEND.EMAIL.ALERT: ***
*************************************************************
      EMAIL=1                            
      DIVISION.MSG='This is to confirm that changes in DIVISIONs were made for '
      DIVISION.MSG<1,-1>='CLIENT  : ':CLIENT.ID'R#5':' ':CLIENT.NAME:' (':CLIENT.CITY:', ':CLIENT.STATE:')'
      DIVISION.MSG<1,-1>='CARRIER : ':CARRIER.ID'R#5'
      IF CARRIER.ID#'ALL' THEN
         DIVISION.MSG:=' ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      END
      DIVISION.MSG<1,-1>=''
      DIVISION.MSG<1,-1>='##  Grp  SubGrp  Beg Date  End Date   Stack   Field                         Optr         Information     '          
      DIVISION.MSG<1,-1>='---------------------------------------------------------------------------------------------------------'          
      DIVISION.MSG<1,-1>='From : '
      HOLD.DIVISION.REC=DIVISION.REC
      DIVISION.REC=OLD.DIVISION.REC
      NUM.RULES=DCOUNT(DIVISION.REC<6>,@VM)
      FOR LINE.NUM=1 TO NUM.RULES
         GOSUB FORMAT.LINE
         DIVISION.MSG<1,-1>=FORMATTED.LINE
         IF DIVISION.REC<6,LINE.NUM>#DIVISION.REC<6,LINE.NUM+1> THEN     
            DIVISION.MSG<1,-1>=' '        
         END                             
      NEXT
      DIVISION.REC=HOLD.DIVISION.REC
      DIVISION.MSG<1,-1>=''
      DIVISION.MSG<1,-1>='To   : '
      NUM.RULES=DCOUNT(DIVISION.REC<6>,@VM)
      FOR LINE.NUM=1 TO NUM.RULES
         GOSUB FORMAT.LINE
         DIVISION.MSG<1,-1>=FORMATTED.LINE
         IF DIVISION.REC<6,LINE.NUM>#DIVISION.REC<6,LINE.NUM+1> THEN     
            DIVISION.MSG<1,-1>=' '        
         END                             
      NEXT
      READV USER.EMAIL FROM F.BCTRL,USER.NAME,20 ELSE USER.EMAIL=''
      EMAIL.OUT=''                       
      EMAIL.OUT<1>=USER.EMAIL            
      EMAIL.OUT<2>='BBarker@afs.net'
      EMAIL.OUT<2,-1>='SMatthews@afs.net'
      IF TESTING THEN                    
         EMAIL.OUT<2>='mkerbow@afs.net'   
      END                                
      EMAIL.OUT<5>='DIVISION Update for ':CLIENT.NAME:' - ':CARRIER.NAME'L#25'    
      IF TESTING THEN                    
         EMAIL.OUT<5>='DIVISION Update TEST for ':CLIENT.NAME'L#25':'-':CARRIER.NAME'L#25'  
      END                                
      EMAIL.OUT<6>=DIVISION.MSG           
      EMAIL.OUT<7>=1                     
      CALL SENDMAIL(EMAIL.OUT,RESULT)    
      EMAIL=0     
                             
      RETURN

*************************************************************
DISPLAY.DIVISIONS: ***
*************************************************************
      CRT @(0,0):@(-1)
      STMT='SORT FB.DIVISION'
      IF LIST.CLIENT#'' THEN STMT:=' WITH CLIENT# = "':LIST.CLIENT:'"'
      STMT:=' CLIENT# CLIENT CARRIER# CARRIER ID-SUPP'
      EXECUTE STMT
      CALL ELINE('')
      
      RETURN

*************************************************************
ASK.FOR.NUM: *** A general number prompt routine
*************************************************************
      AFN.ANSWER=''

*************************************************************
AFN.1:
*************************************************************
      CRT @(0,22):AFN.MSG:@(-4)
      HELP='Entry Options: [':AFN.MIN:'-':AFN.MAX:'] [X]=Back'
      EDIT.MASK=AFN.MASK:' '
      CALL GEN.IN(LEN(AFN.MSG)+1,22,EDIT.MASK,'',Q,0,LEN(AFN.MAX),'','',2,LEN(AFN.MSG)+1,22,0,QI,HELP,0,23)
      QI=TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=TRIM(EDIT.MASK)
      BEGIN CASE
         CASE QI='X'
         CASE QI>=AFN.MIN AND QI<=AFN.MAX
         CASE 1
            CALL ELINE('Invalid entry. Try again.')
            GOTO AFN.1
      END CASE
      AFN.ANSWER=QI
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      
      RETURN

*************************************************************
ASK.Y.OR.N: ***
*************************************************************
      YN.ANSWER=''

Y.OR.N:
      CRT @(0,22):YN.MSG:@(-4)
      HELP='Entry Options: [Y]es [N]o'
      EDIT.MASK=YN.MASK'L#1'
      CALL GEN.IN(LEN(YN.MSG)+1,22,EDIT.MASK,'',Q,0,1,'','',2,LEN(YN.MSG)+1,22,0,QI,HELP,0,23)
      QI=TRIM(OCONV(QI,'MCU'))
      IF QI='' THEN QI=TRIM(EDIT.MASK)
      BEGIN CASE
         CASE QI='Y'
         CASE QI='N'
         CASE 1
            CALL ELINE('Invalid entry. Try again.')
            GOTO Y.OR.N
      END CASE
      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      YN.ANSWER=QI
      
      RETURN

*************************************************************
CHECK.FOR.DUPLICATES: ***
*************************************************************

      SORT.ARRAY=''                      ; * holds sort keys and pointers into DIVISION.REC
      SORTED.DIVISION.REC=''              ; * sorted version of DIVISION.REC
      NUM.RULES=DCOUNT(DIVISION.REC<6>,@VM)
      FOR RULE=1 TO NUM.RULES
         SORT.KEY =DIVISION.REC<6,RULE>'L#2'        ; * Group
         SORT.KEY:=DIVISION.REC<14,RULE>'R%2'       ; * Subgroup
         SORT.KEY:=DIVISION.REC<3,RULE>   ; *'L#6';  * Field
         SORT.KEY:=DIVISION.REC<4,RULE>   ; *'L#2';  * Operator
         SORT.KEY:=DIVISION.REC<5,RULE>   ; *'L#20'; * Info
         LOCATE SORT.KEY IN SORT.ARRAY<1> BY 'AL' SETTING SORT.POS THEN
            CALL ELINE('You have entered a duplicate rule.')
            GROUP=''
            SUBGROUP=''
            BEGIN.DATE=''
            END.DATE=''
            DIV.CODE=''
            FIELD=''
            OPERATOR=''
            INFO=''
            IF ADD.RULE THEN
               GOSUB REMOVE.DUPLICATE
            END ELSE
               GOSUB RESTORE.RULE
            END 
            GOSUB DISPLAY.PAGE                        
         END ELSE
            INS SORT.KEY BEFORE SORT.ARRAY<1,SORT.POS>
            INS RULE BEFORE SORT.ARRAY<2,SORT.POS>
         END
      NEXT RULE
      
      RETURN

*************************************************************
REMOVE.DUPLICATE:
*************************************************************
      LINE.NUM=EDIT.NUMBER
      GOSUB FORMAT.LINE
      DELETE.LINE=REVERSE.ON:FORMATTED.LINE:REVERSE.OFF

      DEL DIVISION.REC<1,EDIT.NUMBER>
      DEL DIVISION.REC<2,EDIT.NUMBER>
      DEL DIVISION.REC<3,EDIT.NUMBER>
      DEL DIVISION.REC<4,EDIT.NUMBER>
      DEL DIVISION.REC<5,EDIT.NUMBER>
      DEL DIVISION.REC<6,EDIT.NUMBER>
      DEL DIVISION.REC<7,EDIT.NUMBER>
      DEL DIVISION.REC<14,EDIT.NUMBER>
      NUM.RULES-=1
      IF NUM.RULES=0 THEN
         NUM.PAGES=0
         PAGE.NUMBER=0
      END ELSE
         NUM.PAGES=INT(NUM.RULES/PAGE.SIZE)
         IF REM(NUM.RULES,PAGE.SIZE) THEN NUM.PAGES+=1
         IF REM(NUM.RULES,PAGE.SIZE)=0 AND EDIT.NUMBER=NUM.RULES+1 THEN
            PAGE.NUMBER-=12
            
         END
      END
      IF LAST.EDIT.MASK>NUM.RULES THEN LAST.EDIT.MASK=NUM.RULES
      IF LAST.EDIT.MASK=0 THEN LAST.EDIT.MASK=1
      
      RETURN

*************************************************************      
RESTORE.RULE:
*************************************************************
      DIVISION.REC<1> = OLD.DIVISION.REC<1>
      DIVISION.REC<2> = OLD.DIVISION.REC<2>
      DIVISION.REC<3> = OLD.DIVISION.REC<3>
      DIVISION.REC<4> = OLD.DIVISION.REC<4>
      DIVISION.REC<5> = OLD.DIVISION.REC<5>
      DIVISION.REC<6> = OLD.DIVISION.REC<6>
      DIVISION.REC<7> = OLD.DIVISION.REC<7>
      DIVISION.REC<14> = OLD.DIVISION.REC<14>                                          
      GOSUB DISPLAY.PAGE
            
      RETURN            

*************************************************************
LAST.CHANCE.TO.SAVE: ***
*************************************************************
* If you tried to EX out and there are unsaved changes - falls thru to THE.END

      IF DIVISION.REC#OLD.DIVISION.REC THEN
         YN.MSG='You have unsaved changes. Save before exiting?'
         YN.MASK=''
         GOSUB ASK.Y.OR.N
         IF YN.ANSWER='Y' THEN
            CRT @(0,22):'Saving...':@(-3)
            SLEEP 1
            GOSUB SORT.DIVISION.REC
            GOSUB FAILSAFE.CHECK
            IF FAILSAFE.OK THEN
               GOSUB SORT.DIVISION.REC
               GOSUB SAVE.DIVISION.REC
               GOSUB DISPLAY.PAGE
            END ELSE
               GOSUB DISPLAY.PAGE
               GOTO MAIN.START
            END
         END
      END

*************************************************************
THE.END: ***
*************************************************************
      CRT @(0,22):@(-3):
      STOP                               ; * End program
