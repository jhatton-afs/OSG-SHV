*******************************************************************
* Program name : SMARTY
* Author       : GREG BINO
* Date written : 05-20-2023
* Library      : FBBP
* COPYRIGHT (c) : AFS, LLC 2021, All Rights Reserved.
*
* GET RES/COMMERCIAL INDICATOR FROM SMARTY.COM
*
* Last updated by afs (AFSLOGISTICS\gbino) at 08:19:55 on 02/25/2021.

* Start modification history

* End modification history
*
*******************************************************************************
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE UDO.H
      CALL GET.USER.NEW(USER,CH.NUM)

      OPEN "GRB" TO F.GRB ELSE STOP
      READ PROCDATA2 FROM F.GRB,"PROCDATA4" ELSE PROCDATA2 = ""

      OPEN '','CONTROL' TO CONTROL.FILE ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END

      VIN=''
      VOUT = ''
      CLIENT = VIN<1>
      CLIENT.ID = OCONV(CLIENT,'MD0')
      ***    SCAC = VIN<2>
      SHIP.DATE = VIN<3>
      WEIGHT = VIN<4>
      CITY1 = VIN<5>
      COUNTRY.CODE1 = VIN<6>
      POSTAL1 = VIN<7>
      STATE.PROVINCE1 = VIN<8>
      CITY2 = VIN<9>
      COUNTRY.CODE2 = VIN<10>
      POSTAL2 = VIN<11>
      STATE.PROVINCE2 = VIN<12>
      DIRECTION = VIN<13>
      LCC.ERR.KEY = VIN<14>
      IF COUNTRY.CODE2 = '' THEN
         COUNTRY.CODE2 = "USA"
      END

      logfile="restsmarty"

      STAT = protocolLogging(logfile, "ON", 27)
      ADDRESS = 13636
      STREET = "NE%20SHAVER"
      CITY = "PORTLAND"
      STATE = "OR"
      ZIP = 97230
      ADDRESS = 2428
      STREET = "NE%202ND%20TERRACE"
      CITY = "BLUE%20SPRINGS"
      STATE = "MO"

     
      URL = "https://us-street.api.smartystreets.com/street-address?auth-id=28d98044-d233-41cf-d641-1956ec762522&auth-token=XqeleBDZQ268En7GenHi&street=13636+ne%20shaver+portland+or"
      URL = "https://us-street.api.smartystreets.com/street-address?auth-id=28d98044-d233-41cf-d641-1956ec762522&auth-token=XqeleBDZQ268En7GenHi&street=":ADDRESS:"+":STREET:"+":CITY:"+":STATE
      METHOD = "GET"
      *
     
      STAT = SETHTTPDEFAULT("VERSION", "1.1")
      STAT = CREATESECURITYCONTEXT(CTX, "TLSv1.2")
      STAT = CREATESECUREREQUEST(URL, METHOD, RESTGET,CTX)
      STAT = SETREQUESTHEADER(RESTGET, "Content-Type", "application/json;charset=utf-8")
      STAT = SUBMITREQUEST(RESTGET, 30000, "", HEADER, RESTDATA, HTTPSTATUS)

      GB =FIELD(RESTDATA,":",26)

      GOSUB PARSE.RESULTS
   DEBUG
      RETURN

************************************************************************
PARSE.RESULTS:
************************************************************************

      UDOTYPE = ''
      RESTLEN = LEN(RESTDATA)
      UDOHANDLE = ""
      RESP = ''
      RESP.CNT = 1
      STATUS =UDORead(RESTDATA, UDOFORMAT_JSON, UDOHANDLE )
      IF STATUS # 0 AND RESTDATA > "" AND LCC.ERR.KEY # "" THEN
         GOSUB REPORT.JSON.ERR
      END
      ST = UDOArrayGetSize(UDOHANDLE, ITEM_SIZE) ; IF ST NE UDO_SUCCESS THEN
         ITEM_SIZE = 1
      END
   
      FOR I = 1 TO ITEM_SIZE
         TEMP.ARRAY = ''
         ST = UDOArrayGetItem(UDOHANDLE, I, result_udo, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         ST = UDOGetProperty(result_udo, "input_index", IINDEX, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         ST = UDOGetProperty(result_udo, "candidate_index", cindex, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         ST = UDOGetProperty(result_udo, "delivery_line_1", ADDRESS, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         ST = UDOGetProperty(result_udo, "last_line", CSZ, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         ST = UDOGetProperty(result_udo, "delivery_point_barcode", ZIP, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
            ST = UDOGetProperty(result_udo, "components", COMPONENTS, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         LOOP
            GETSTAT = UDOGetNextProperty(COMPONENTS, W.UDO, W.VALUE, W.TYPE)
         WHILE GETSTAT = UDO_SUCCESS DO
            BEGIN CASE
               CASE W.UDO = 'primary_number'
                  PRIMARY.NUMBER = W.VALUE
               CASE W.UDO = 'street_predirection'
                  STREET.PREDIRECTION = W.VALUE
               CASE W.UDO = 'street_name'
                  STREET.NAME = W.VALUE
               CASE W.UDO = 'street_suffix'
                  STREET.SUFFIX = W.TYPE
               CASE W.UDO = 'city_name'
                  CITY.NAME = W.VALUE
               CASE W.UDO = 'city_name'
                  CITY.NAME = W.VALUE
               CASE W.UDO = 'state_abbreviation'
                  STATE.ABBR = W.VALUE
               CASE W.UDO = 'zipcode'
                  ZIPCODE = W.VALUE
               CASE W.UDO = 'plus4_code'
                  PLUS4 = W.VALUE
               CASE W.UDO = 'delivery_point'
                  DEV.POINT = W.VALUE
               CASE W.UDO = 'delivery_point_check_digit'
                  DELIVERY.PT.CHECK.DIGIT = W.VALUE
            END CASE
         REPEAT
         ST = UDOGetProperty(result_udo, "metadata", METADATA, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         LOOP
            GETSTAT = UDOGetNextProperty(METADATA, W.UDO, W.VALUE, W.TYPE)
         WHILE GETSTAT = UDO_SUCCESS DO
            BEGIN CASE
               CASE W.UDO = 'record_type' 
                  REC.TYPE = W.VALUE 
               CASE W.UDO = 'zip_type'
                  ZIP.TYPE = W.VALUE
               CASE W.UDO = 'county_fips'
                  CFIPS = W.VALUE    
               CASE W.UDO = 'county_name'
                  COUNTY = W.TYPE    
               CASE W.UDO = 'carrier_route'
                  CARRIER.ROUTE = W.VALUE
               CASE W.UDO = 'congressional_district' 
                 CONG.DISTRICT = W.VALUE
               CASE W.UDO = 'rdi'
                 RES.COMM.INDICATOR = W.VALUE
               CASE W.UDO = 'elot_sequence' 
                 LOT.SEQ = W.VALUE   
               CASE W.UDO = 'latitude' 
                 LATITUDE = W.VALUE
               CASE W.UDO = 'longitude'
                  LONGITUDE = W.VALUE
               CASE W.UDO = 'precision' 
                 PRECISION = W.VALUE    
                  CASE W.UDO = 'time_zone' 
                 TIME.ZONE = W.VALUE
               CASE W.UDO = 'utc_offset'
                 UTC = W.VALUE
               CASE W.UDO = 'dst' 
                 DAYLIGHTSAVINGS = W.VALUE         
             END CASE
         REPEAT
         ST = UDOGetProperty(result_udo, "analysis", ANALYSIS, UDOTYPE) ; IF ST NE UDO_SUCCESS THEN GOSUB ERR.HANDLER
         LOOP
            GETSTAT = UDOGetNextProperty(COMPONENTS, W.UDO, W.VALUE, W.TYPE)
         WHILE GETSTAT = UDO_SUCCESS DO
            BEGIN CASE
              CASE W.UDO = 'dpv_match_code' 
                  DPV.CODE = W.VALUE 
               CASE W.UDO = 'dpv_footnotes'
                  DPV.FOOTNOTES = W.VALUE
               CASE W.UDO = 'dpv_cmra'
                  DPV.CMRA = W.VALUE    
               CASE W.UDO = 'dpv_vacant'
                  DPV.VACANT = W.TYPE    
               CASE W.UDO = 'dpv_no_stat'
                  DPV.NO.STAT = W.VALUE
               CASE W.UDO = 'active' 
                 DPV.ACTIVE = W.VALUE
               CASE W.UDO = 'footnotes'
                  FOOTNOTES = W.VALUE
            END CASE
         REPEAT
      NEXT I

      RETURN
****************************************************
ERR.HANDLER:
*****************************************************
      ERRCODE = "" ; ERRMSG = ""
      S = UDOGetLastError(ERRCODE, ERRMSG)
      ERROR = "UDO ERROR: (":ERRCODE:") ":ERRMSG
      VOUT<8> =ERROR
      RETURN

************************************************************************
REPORT.JSON.ERR:
************************************************************************
   **      LAST.LCC.ERR.REC = ''
      
   **      READ LAST.LCC.ERR.REC FROM LAST.LCC.ERR, LCC.ERR.KEY THEN
     **       IF RESTDATA = LAST.LCC.ERR.REC<1> THEN
    **           LAST.LCC.ERR.REC<2> += 1
    **           WRITEV LAST.LCC.ERR.REC<2> ON LAST.LCC.ERR, LCC.ERR.KEY, 2
  **          END
    **     END ELSE
    **        LAST.LCC.ERR.REC<1> = RESTDATA
   **         LAST.LCC.ERR.REC<2> = '1'
  **       WRITE LAST.LCC.ERR.REC ON LAST.LCC.ERR, LCC.ERR.KEY
   **         TEXT =''
    **        TEXT<1,-1>= 'ERROR: ':RESTDATA
    **        TEXT<1,-1>=' '
   **         TEXT<1,-1>='Please see the following for a total count of errors during this process. Note: Error count is ALL errors incured during this process. Not just the one reported on this email.'
    **        TEXT<1,-1>='Filename: LAST.LCC.ERR'
    **        TEXT<1,-1>='Record ID: ':LCC.ERR.KEY
    **        TEXT<1,-1>='Attribute: 2'
   **         SUBJ='RESTDATA data error from SMARTY'
   **         MVIN=''
*         MVIN<1,-1>='gbino@afs.net'
*         MVIN<1,-1>='nmeddaugh@afs.net'
   **         MVIN<4>='AFS'
    **        MVIN<5>=SUBJ
   **         MVIN<6>=TEXT
    **        CALL SENDMAIL(MVIN,MVOUT)
   **      END

      RETURN

************************************************************************
REPORT.INTERNAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()

      EMAIL.OUT<6, -1> = 'URL = ':URL
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'CLIENT = ':CLIENT.ID
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'ERROR = ':ERROR
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '

      EVIN=EMAIL.OUT
      EVOUT=''
      **     CALL SENDMAIL(EVIN,EVOUT)
****      VOUT<1> = "ERROR"
      VOUT<1> = 0
      RETURN
************************************************************************
REPORT.FATAL.ERROR:
************************************************************************
      EMAIL.START.TIME = TIME()
      **** EMAIL.OUT<1>=EMAIL.RECIP
      EMAIL.OUT<1,-1> = 'gbino@afs.net'
      EMAIL.OUT<1,-1> = 'dfriend@afs.net'
      EMAIL.OUT<1,-1> = 'nmeddaugh@afs.net'
      FATAL.ERROR.SUBJ = 'REST TEMPO REQUEST ERROR'
      EMAIL.OUT<5>=FATAL.ERROR.SUBJ
      EMAIL.OUT<6,-1> = 'URL = ':URL
      EVIN=EMAIL.OUT
      EVOUT=''
      **   CALL SENDMAIL(EVIN,EVOUT)
      IDATE=DATE()
      ITIME=TIME()
      TIME.BLOCK=INT(ITIME/600)
      *  VOUT<1> = "ERROR"
      RETURN

   END
