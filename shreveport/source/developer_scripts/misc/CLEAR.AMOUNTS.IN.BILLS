* PROGRAM TO CLEAR AMOUNT ON BILLS THAT HAVE ALREADY BEEN PROCESSED
*
* FREIGHT BILL PACKAGE
*
**********************************************************************
*                       
*
$INCLUDE FILE.DEFS INC_CLIENTS
     OPEN '','CLIENTS' TO F.CLIENTS ELSE
       CALL OPEN.ABORT("CLIENTS","CLEAR.AMOUNT.IN.BILL")
     END
     CLIENT.ID='01170'
     MATREAD CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
       CALL ELINE("Invalid client number ":CLIENT.ID)
       STOP
     END
     OPEN '','AR-BRIDGE' TO F.BRIDGE ELSE
       CALL OPEN.ABORT("AR-BRIDGE","CLEAR.AMOUNT.IN.BILL")
     END
     READ DUMMY FROM F.BRIDGE,CLIENT.ID THEN
       CALL ELINE('AR Has to be posted before you can run this')
       STOP
     END ELSE
       NULL
     END
     OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.HIST ELSE
       CALL OPEN.ABORT("FB.BILLS.HIST,":CLIENT.ID,"CLEAR.AMOUNT.IN.BILL")
     END
     OPEN '','FB.BILLS.CRX' TO F.CRX ELSE
       CALL OPEN.ABORT("FB.BILLS.CRX","CLEAR.AMOUNT.IN.BILL")
     END
     OPEN '','FB.MODS' TO F.MODS ELSE
       CALL OPEN.ABORT("FB.MODS","CLEAR.AMOUNT.IN.BILL")
     END
     OPEN '','FB.ADJUSTS' TO F.ADJUSTS ELSE
        CALL OPEN.ABORT("FB.ADJUSTS",PROG.NAME)
     END
     OPEN '','FB.ADJUST.HIST' TO F.ADJUST.HIST ELSE
       CALL OPEN.ABORT('FB.ADJUST.HIST',"CLEAR.AMOUNT.IN.BILL")
     END
     OPEN '','FB.OPEN.BILLS' TO F.OPEN ELSE
       CALL OPEN.ABORT("FB.OPEN","CLEAR.AMOUNT.IN.BILL")
     END
      OPEN '','FB.OPEN.DATE.XREF,':CLIENT.ID TO F.OPEN.DATE.XREF ELSE
       CALL OPEN.ABORT("FB.OPEN.DATE.XREF,":CLIENT.ID,"CLEAR.AMOUNT.IN.BILL")
      END
     EXECUTE "GET-LIST BILLS.TO.CLEAR"
     DONE=0
     LOOP
       READNEXT PRO.ID ELSE DONE = 1
     UNTIL DONE DO
       READ PRO.REC FROM F.HIST,PRO.ID ELSE 
         CALL ELINE('Pro ':PRO.ID:' missing call programming')
         GO GET.NEXT.ID
       END
       OPEN.ID=CLIENT.ID:"*":PRO.ID
       READ DUMMY FROM F.OPEN,OPEN.ID ELSE
         CALL ELINE('Open item ':OPEN.ID:' missing call programming')
         GO GET.NEXT.ID
       END
       OLD.PRO.REC=PRO.REC
       PRO.REC<7>=1+ (0 - PRO.REC<10> - PRO.REC<11> - PRO.REC<12>)
*DF       PRO.REC<7>=3618
      ORIG.OVERCHARGE=0-PRO.REC<11>
*DF       PRO.REC<7>=1
       PRO.REC<8>=0
*DF       PRO.REC<8>=3617
*DF       PRO.REC<10>=0
*DF       PRO.REC<10>=0
       PRO.REC<11>=PRO.REC<11>-1
*DF       PRO.REC<11>=-1
*DF       PRO.REC<11>=0
*DF       PRO.REC<12>=0
       IF PRO.REC<12>+0#'0' THEN
         PRO.REC<29>='OC'
       END ELSE
         PRO.REC<29>='O'
       END
       IF PRO.REC<10>+0#'0' THEN
         PRO.REC<29>='D':PRO.REC<29>
       END
*DF       PRO.REC<32>=0
       PRO.REC<33>=0
*DF       PRO.REC<33>=3617
*DF       PRO.REC<42>=0
*DF       PRO.REC<43>=0
*DF       PRO.REC<44>=0
       IF PRO.REC<41,2>='' THEN
*DF*df         PRO.REC<41,2>='Changed from 59.83 to 36.03 per Mark Goldman and conversion to US funds'
*DF         PRO.REC<41,2>='Will be reprocessed because of incorrect billing'
         PRO.REC<41,2>='Client Paid Direct'
*DF         PRO.REC<41,2>='To be Reprocessed at a Later Date'
*DAVID         PRO.REC<41,2>='Bad debt'
*DF*DF         PRO.REC<41,2>='Paid in Canadian Funds of 90.00 which was converted to US Funds of 59.83'
       END ELSE
*DF         PRO.REC<41,2>=PRO.REC<41,2>:' for ':ORIG.OVERCHARGE'R26':', Will be reprocessed because of incorrect billing'
         PRO.REC<41,2>=PRO.REC<41,2>:' for ':ORIG.OVERCHARGE'R26':', Client Paid Direct'
*DF         PRO.REC<41,2>=PRO.REC<41,2>:' for ':ORIG.OVERCHARGE'R26':', Bankruptcy Case'
       END
*DF       PRO.REC<41,2>=''
       WRITE PRO.REC ON F.HIST,PRO.ID
       WRITE PRO.REC ON F.OPEN,OPEN.ID
       READ D.OPEN.XREF FROM F.OPEN.DATE.XREF,PRO.REC<37> THEN
         LOCATE OPEN.ID IN D.OPEN.XREF SETTING XREF.POS THEN
           DEL D.OPEN.XREF<XREF.POS>
           IF D.OPEN.XREF='' THEN
              DELETE F.OPEN.DATE.XREF,PRO.REC<37>
           END ELSE
             WRITE D.OPEN.XREF ON F.OPEN.DATE.XREF,PRO.REC<37>
           END
         END
       END
       DELETE F.OPEN,OPEN.ID
       REC = ''
       REC<1> = CLIENT.ID
       REC<2> = PRO.REC<1>
       REC<7> = PRO.REC<7>
       REC<8> = PRO.REC<8>
       REC<10> = PRO.REC<10>
       REC<11> = PRO.REC<11>
       REC<12> = PRO.REC<12>
       REC<30> = PRO.REC<30>
       REC<37> = PRO.REC<37>
       REC<41> = PRO.REC<41>
       REC<53> = PRO.REC<53>
       REC<54> = PRO.REC<54>
       REC<55> = PRO.REC<55>
       REC<63> = PRO.REC<63>
       IF CLIENT.ID[1,2]='99' ELSE
         WRITE REC ON F.CRX,PRO.ID
*NPR00 012510CALL UPD.CRX.DF.FILE(PROG.NAME,"",PRO.ID,REC);*NPR00
       END
       ADJ.REC = ''
       ADJ.REC<1> = DATE()
       ADJ.REC<2> = PRO.REC<8>-OLD.PRO.REC<8>
       ADJ.REC<3> = FIELD(PRO.ID,'*',1)
       ADJ.REC<4> = CLIENT.ID
       ADJ.REC<5> = FIELD(PRO.ID,'*',2)
       ADJ.DONE = 0
*DF       SEQ = 1
*DF       LOOP
*DF          ADJ.ID = DATE():'*':CLIENT.ID:'*':SEQ
*DF          READ DUMMY FROM F.ADJUSTS,ADJ.ID ELSE ADJ.DONE = 1
*DF       UNTIL ADJ.DONE DO
*DF          SEQ = SEQ+1
*DF       REPEAT
*DF       WRITE ADJ.REC ON F.ADJUSTS,ADJ.ID
       MOD.DONE = 0
       SEQ = 1
       LOOP
          ADJ.ID = DATE():'*':CLIENT.ID:'*':SEQ
          READ DUMMY FROM F.MODS,ADJ.ID ELSE MOD.DONE = 1
       UNTIL MOD.DONE DO
          SEQ = SEQ+1
       REPEAT
       WRITE ADJ.REC ON F.MODS,ADJ.ID
       POST.YTD='A'
       T.DATE=DATE()
       T.TIME=TIME()
       ADJUST.HIST.ID=CLIENT.ID:'*':PRO.ID:'*':T.DATE:'*':T.TIME:'*OLD'
       WRITE OLD.PRO.REC ON F.ADJUST.HIST,ADJUST.HIST.ID
       ADJUST.HIST.ID=CLIENT.ID:'*':PRO.ID:'*':T.DATE:'*':T.TIME:'*NEW'
       WRITE PRO.REC ON F.ADJUST.HIST,ADJUST.HIST.ID
       ADJUST.VIN=POST.YTD
       ADJUST.VIN<2>=PRO.ID
       ADJUST.VIN<3>=CLIENT.ID
       CALL FB.ADJUST(ADJUST.VIN,ADJUST.VOUT,MAT CLIENT.REC,OLD.PRO.REC,PRO.REC)
GET.NEXT.ID:***
     REPEAT
