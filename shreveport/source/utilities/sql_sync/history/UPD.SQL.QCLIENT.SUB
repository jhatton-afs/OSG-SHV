      SUBROUTINE UPD.SQL.QCLIENT.SUB(VIN,VOUT,CLIENT.REC,F.SLSMAN)
***********************************************************************
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.QCLIENT.SUB' ; UPL.VOUT = ''       ; * NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
* Analyze bills acted upon by auditors
* Copyright (c) AFS Logistics, LLC., 2002
*
* AUTHOR : Owen Holman
* Date   : January 2002
***********************************************************************
* 061912 - JMK01 - Choose development SQL server if not production server AFS
*************************************************************************
*
*
!
* Include the ODBC definitions
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01

      USER=VIN<1>
      CLIENT.ID=VIN<2>

      DOW=""
      DOW<1,1>="Sun"
      DOW<1,2>="Mon"
      DOW<1,3>="Tue"
      DOW<1,4>="Wed"
      DOW<1,5>="Thu"
      DOW<1,6>="Fri"
      DOW<1,7>="Sat"
      form = "T##########"
      dash = "----------"
      Expect = ""
      NULL=""
      EOL=CHAR(13):CHAR(10)
      ERROR.CNT=0
10:   ERRORS=''

      GOSUB SETUP.SQL
      INI.SLS=CLIENT.REC<114>
      READ INI.SLS.REC FROM F.SLSMAN,INI.SLS ELSE INI.SLS.REC=''
      SVC.SLS=CLIENT.REC<115>
      READ SVC.SLS.REC FROM F.SLSMAN,SVC.SLS ELSE SVC.SLS.REC=''
      ACCT.MGR=CLIENT.REC<264>
      READ ACCT.MGR.REC FROM F.SLSMAN,ACCT.MGR ELSE ACCT.MGR.REC=''
      AUDITOR=CLIENT.REC<71>

* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE
      NVAL=DCOUNT(CLIENT.REC<84>,@VM)
      FOR VAL=1 TO NVAL

         QV.CLIENT.ID=CLIENT.ID'R%5'     ; * Client ID
         QV.CLIENT.EFF.DT=CLIENT.REC<84,VAL>'D4/'  ; * OverChg %
         QV.CLIENT.NAME=CLIENT.REC<2>    ; * Name
         QV.CLIENT.CITY=CLIENT.REC<4>    ; * City
         QV.CLIENT.ST=CLIENT.REC<5>      ; * State
         QV.CLIENT.ZIP=CLIENT.REC<6>     ; * Zip Code
         QV.CLIENT.STATUS=CLIENT.REC<30>           ; * Active
         IF QV.CLIENT.STATUS#'I' THEN QV.CLIENTS.STATUS='A'
         QV.CLIENT.PREAUDIT.DT=CLIENT.REC<27>'D4/'           ; * PreAudit Start
         QV.CLIENT.INI.SLS.ID=INI.SLS    ; * Init Slsrep
         QV.CLIENT.INI.SLS.NAME=INI.SLS.REC<1>     ; * Name
         QV.CLIENT.SVC.SLS.ID=SVC.SLS    ; * Svc Slsrep
         QV.CLIENT.SVC.SLS.NAME=SVC.SLS.REC<1>     ; * Name
         QV.CLIENT.ACCT.MGR.ID=ACCT.MGR  ; * Acct Manager
         QV.CLIENT.ACCT.MGR.NAME=ACCT.MGR.REC<1>   ; * Name
         QV.CLIENT.AUDITOR=AUDITOR       ; * Auditor
         QV.CLIENT.OCHG.COMM.PCT=CLIENT.REC<33,VAL>'R26'     ; * OverChg %
         IF NUM(CLIENT.REC<88,VAL>) THEN
            QV.CLIENT.UPS.COMM.OCHG.PCT=CLIENT.REC<88,VAL>'R26'        ; * UPS OverChg %
         END ELSE
            QV.CLIENT.UPS.COMM.OCHG.PCT=0'R26'     ; * UPS OverChg %
         END
         QV.CLIENT.MAX.COMM.OCHG.AMT=CLIENT.REC<131,VAL>'R26'          ; * Max OverChg
         QV.CLIENT.LOC.COMM.PCT=CLIENT.REC<85,VAL>'R26'      ; * Logistics %
         QV.CLIENT.DISC.COMM.PCT=CLIENT.REC<34,VAL>'R26'     ; * Discount %
         QV.CLIENT.CLAIMS.PCT=CLIENT.REC<39,VAL>'R26'        ; * Claims %
         QV.CLIENT.PSTG.REIMB.AMT=CLIENT.REC<35,VAL>'R26'    ; * Pstg Reimb
         IF NUM(CLIENT.REC<73,VAL>) THEN
            QV.CLIENT.PB.RATE=CLIENT.REC<73,VAL>'R37'        ; * Per Bill Rate
         END ELSE
            QV.CLIENT.PB.RATE=0'R37'     ; * Per Bill Rate
         END
         IF NUM(CLIENT.REC<122,VAL>) THEN
            QV.CLIENT.EDI.PB.RATE=CLIENT.REC<122,VAL>'R37'   ; * EDI Per Bill Rate
         END ELSE
            QV.CLIENT.EDI.PB.RATE=0 'R37'          ; * EDI Per Bill Rate
         END
         IF NUM(CLIENT.REC<172,VAL>) THEN
            QV.CLIENT.PCL.PB.RATE=CLIENT.REC<172,VAL>'R37'   ; * PCL Per Bill Rate
         END ELSE
            QV.CLIENT.PCL.PB.RATE=0 'R37'          ; * PCL Per Bill Rate
         END
         QV.CLIENT.WKLY.FLAT.FEE=CLIENT.REC<40,VAL>'R26'     ; * Wkly Flat Fee
         QV.CLIENT.WKLY.PH.FEE=CLIENT.REC<129,VAL>'R26'      ; * Wkly Proc & Hndl
         QV.CLIENT.WKLY.UPS.SVC.FEE=CLIENT.REC<113,VAL>'R26'           ; * Wkly UPS Svc Fee
         QV.CLIENT.WKLY.AFSI.FEE=CLIENT.REC<130,VAL>'R26'    ; * Wkly AFSi Fee
         QV.CLIENT.MONTH.FEE=CLIENT.REC<32,VAL>'R26'         ; * Monthly Fee
         QV.CLIENT.MIN.MONTH.FEE=CLIENT.REC<36,VAL>'R26'     ; * Min Monthly Fee
         QV.CLIENT.MONTH.LOG.FEE=CLIENT.REC<128,VAL>'R26'    ; * Monthly Logis Fee
         IF CLIENT.REC<177,VAL,1>="0" THEN
            QV.CLIENT.TRAN.MODE.ID.1=""  ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.1=""           ; * Traffic Svc %
         END ELSE
            QV.CLIENT.TRAN.MODE.ID.1=CLIENT.REC<177,VAL,1>   ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.1=CLIENT.REC<178,VAL,1>'R26'       ; * Traffic Svc %
         END
         IF CLIENT.REC<177,VAL,2>="0" THEN
            QV.CLIENT.TRAN.MODE.ID.2=""  ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.2=""           ; * Traffic Svc %
         END ELSE
            QV.CLIENT.TRAN.MODE.ID.2=CLIENT.REC<177,VAL,2>   ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.2=CLIENT.REC<178,VAL,2>'R26'       ; * Traffic Svc %
         END
         IF CLIENT.REC<177,VAL,3>="0" THEN
            QV.CLIENT.TRAN.MODE.ID.3=""  ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.3=""           ; * Traffic Svc %
         END ELSE
            QV.CLIENT.TRAN.MODE.ID.3=CLIENT.REC<177,VAL,3>   ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.3=CLIENT.REC<178,VAL,3>'R26'       ; * Traffic Svc %
         END
         IF CLIENT.REC<177,VAL,4>="0" THEN
            QV.CLIENT.TRAN.MODE.ID.4=""  ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.4=""           ; * Traffic Svc %
         END ELSE
            QV.CLIENT.TRAN.MODE.ID.4=CLIENT.REC<177,VAL,4>   ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.4=CLIENT.REC<178,VAL,4>'R26'       ; * Traffic Svc %
         END
         IF CLIENT.REC<177,VAL,5>="0" THEN
            QV.CLIENT.TRAN.MODE.ID.5=""  ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.5=""           ; * Traffic Svc %
         END ELSE
            QV.CLIENT.TRAN.MODE.ID.5=CLIENT.REC<177,VAL,5>   ; * Tran Mode
            QV.CLIENT.TRAN.MODE.PCT.5=CLIENT.REC<178,VAL,5>'R26'       ; * Traffic Svc %
         END
         QV.CLIENT.REJ.PB.PSTG.AMT=CLIENT.REC<185,VAL>'R26'  ; * Rjct Per Bill Pstg
         QV.CLIENT.AUDIT.PC.RATE=CLIENT.REC<132,VAL>'R37'    ; * Aud Per Bill Rate
         IF NUM(CLIENT.REC<187,VAL>) THEN
            QV.CLIENT.FEDEX.GROUND.OCHG=CLIENT.REC<187,VAL>'R26'       ; * FedEx Grnd Ovrchg
         END ELSE
            QV.CLIENT.FEDEX.GROUND.OCHG="0"'R26'   ; * FedEx Grnd Ovrchg
         END
         QV.CLIENT.PR.PB.RATE=CLIENT.REC<190,VAL>'R37'       ; * PR Per Bill Rate
         QV.CLIENT.FSC.BM.CALC=CLIENT.REC<189>     ; * FSC BM Calc
         QV.CLIENT.UPS.TRACK.PB.RATE=CLIENT.REC<199,VAL>'R37'          ; * UPS Trk # Per Bill Rate
         QV.CLIENT.FEDEX.AIR.OCHG.PCT=CLIENT.REC<200,VAL>'R26'         ; * FEDX Air OverChg %
         QV.CLIENT.LOG.FLG=CLIENT.REC<93>          ; * Logistics Client
         QV.CLIENT.LOG.START.DT=OCONV(CLIENT.REC<149>,"D4/")           ; * Logistics Start Date
         QV.CLIENT.AFSI.STATUS=CLIENT.REC<206>     ; * AFSi Status
         QV.CLIENT.AFS.RANKING=CLIENT.REC<240>     ; * JMK23 ; * AFS Ranking
         DOW.DESC=''
         IF CLIENT.REC<151>#'' THEN
            DOW.DESC='-':DOW<1,CLIENT.REC<151>+1>
         END
         QV.CLIENT.PROCESS.DOW=CLIENT.REC<151>:DOW.DESC      ; * Day to Process
         QV.CLIENT.PYMT.TYPE=CLIENT.REC<152>       ; * Payment Type
         QV.CLIENT.CO.CODE=CLIENT.REC<92>+0'R%5'   ; * Co Code
         QV.CLIENT.INI.CONTRACT.DT=CLIENT.REC<234>'D4/'      ; * Initial Contract Date
         QV.CLIENT.INI.CONTRACT.TRMS=CLIENT.REC<235>         ; * Initial Contract Terms (MTHS)
         QV.CLIENT.REN.CONTRACT.DT=CLIENT.REC<236>'D4/'      ; * Renewal Contract Date
         QV.CLIENT.REN.CONTRACT.TRMS=CLIENT.REC<237>         ; * Renewal Contract Terms (MTHS)
         QV.CLIENT.LOG.CANCEL.DT=CLIENT.REC<238>'D4/'        ; * Logistics Cancel Date
         QV.CLIENT.MAX.AUDIT.LTL.WT=CLIENT.REC<150>          ; * Max Audit LTL Wt

         Fn = "SQLExecute"
         STATUS = SQLExecute(CLIENTENV)
         STMTENV=CLIENTENV
         ENVSRC='CLIENT'
         GOSUB CKSTMTENV
      NEXT VAL


THE.END:***
*     End of program
*
* Now just clean up the environment and leave
*
      Fn = "SQLFreeStmt"
      STATUS = SQLFreeStmt(CLIENTENV, SQL.DROP)
      STMTMENV=CLIENTENV
      ENVSRC='CLIENT'
      GOSUB CKSTMTENV

      Fn = "SQLDisconnect"
      STATUS = SQLDisconnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeConnect"
      STATUS = SQLFreeConnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeEnv"
      STATUS = SQLFreeEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1>='UPD.SQL.Group@afs.net'
            MVIN<4>='AFS_UPD.SQL.CLIENT.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:' ':CLIENT.REC<2>:' but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP

SETUP.SQL:*
!
* Create an ODBC environment & a connection environment. Use the
* SSQLSetConnectOption to specify the Operating system user ID and
* password.

      STATUS = SQLAllocEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLAllocConnect(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* Gather the data source name, userid and password for the server O/S and
* information for the DBMS at the server. The DBMS info is often also
* a user name and password, but not in all cases.
*
*     SQLSVR.INFO=OCONV('SQLSVR','TFB.TABLES;X;;1')          ; * JMK01
*     SOURCE=FIELD(SQLSVR.INFO<1>,' ',1)           ; * JMK01
*     UID=FIELD(SQLSVR.INFO<1>,' ',2)    ; * JMK01
*     PWD=FIELD(SQLSVR.INFO<1>,' ',3)    ; * JMK01
      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='PRODQV'              ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVQV'               ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* Establish a session to the specified data source
*
*     PRINT "Connecting to data source: ": SOURCE
      Fn = "SQLConnect"
      STATUS = SQLConnect(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV
*
* Now allocate an SQL statement environment
* to be used for executing SQL statements
*
      Fn = "SQLAllocStmt"
      STATUS = SQLAllocStmt(CONENV,CLIENTENV)
      GOSUB CKCONENV

*
* Note that we are using parameter markers in the SQL statement to facilitate
* loading multiple rows of data efficiently
*
      OPT.STR = STR(' ?,',62)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdClientCharges (":OPT.STR:")}"     ; * 24 PLACEHOLDERS

      ROWNUM = 0
      Fn = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(CLIENTENV, 1, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.EFF.DT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 3, SQL.B.BASIC, SQL.VARCHAR, 50, 0, QV.CLIENT.NAME) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 4, SQL.B.BASIC, SQL.VARCHAR, 50, 0, QV.CLIENT.CITY) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 5, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.ST) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 6, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.ZIP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 7, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.STATUS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 8, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.PREAUDIT.DT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 9, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.INI.SLS.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,10, SQL.B.BASIC, SQL.VARCHAR, 50, 0, QV.CLIENT.INI.SLS.NAME) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,11, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.SVC.SLS.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,12, SQL.B.BASIC, SQL.VARCHAR, 50, 0, QV.CLIENT.SVC.SLS.NAME) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,13, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.ACCT.MGR.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,14, SQL.B.BASIC, SQL.VARCHAR, 50, 0, QV.CLIENT.ACCT.MGR.NAME) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,15, SQL.B.BASIC, SQL.VARCHAR, 50, 0, QV.CLIENT.AUDITOR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,16, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.OCHG.COMM.PCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,17, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.UPS.COMM.OCHG.PCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,18, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.MAX.COMM.OCHG.AMT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,19, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.LOC.COMM.PCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,20, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.DISC.COMM.PCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,21, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.CLAIMS.PCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,22, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.PSTG.REIMB.AMT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,23, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.PB.RATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,24, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.EDI.PB.RATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,25, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.PCL.PB.RATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,26, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.WKLY.FLAT.FEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,27, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.WKLY.PH.FEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,28, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.WKLY.UPS.SVC.FEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,29, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.WKLY.AFSI.FEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,30, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.MONTH.FEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,31, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.MIN.MONTH.FEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,32, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.MONTH.LOG.FEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,33, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.ID.1) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,34, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.PCT.1) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,35, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.ID.2) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,36, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.PCT.2) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,37, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.ID.3) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,38, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.PCT.3) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,39, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.ID.4) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,40, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.PCT.4) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,41, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.ID.5) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,42, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.TRAN.MODE.PCT.5) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,43, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.REJ.PB.PSTG.AMT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,44, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.AUDIT.PC.RATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,45, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.FEDEX.GROUND.OCHG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,46, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.PR.PB.RATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,47, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.FSC.BM.CALC) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,48, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.UPS.TRACK.PB.RATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,49, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.FEDEX.AIR.OCHG.PCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,50, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.LOG.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,51, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.LOG.START.DT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,52, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.AFSI.STATUS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,53, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.AFS.RANKING) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,54, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.PROCESS.DOW) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,55, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.PYMT.TYPE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,56, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.CO.CODE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,57, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.INI.CONTRACT.DT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,58, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.INI.CONTRACT.TRMS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,59, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.REN.CONTRACT.DT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,60, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.REN.CONTRACT.TRMS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,61, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.LOG.CANCEL.DT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV,62, SQL.B.BASIC, SQL.VARCHAR, 10, 0, QV.CLIENT.MAX.AUDIT.LTL.WT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV


      Fn = "SQLPrepare"
      STATUS = SQLPrepare(CLIENTENV, INST1)
      STMTENV=CLIENTENV
      ENVSRC='CLIENT'
      GOSUB CKSTMTENV

      RETURN

CKCONENV:

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.CLIENT.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN

CKSTMTENV:
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.CLIENT.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
