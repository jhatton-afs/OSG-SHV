************************************************************************
* Program name : FB.AUD.ACC.ENTRY
* Author       : Neil C.G. Pratt
* Date written : October 2009
* Library      : FBBP
* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* calc ltl markup minimum
* Last updated by AFS (gbino) at 07:57:18 on 12/12/2017.
*
* Start modification history
* 040710 - NPR01 - T99999 - Allow zero Calculation rates as per Sandra Selman .
* 040810 - NPR02 - T99999 - Add routine to update Program Log file.
* 011411 - JMK01 - T110035 - Accessorial code maintenance
* 083112 - RLM01 - SysAid#3073 - Replace former employees' email addresses with current employees' email addresses
* 100715 - DRF01 - SysAid 19926 - Added Tonie and Natalie to be able to
*                  delete
* 040418 - GRB01 - Add audit log and record locking
* 101718 - DRF02 - Ticket ACCU-173 Check for substitute client

* End modification history
**********************************************************************


$INCLUDE PROG.ADMIN INC_OPTIONS

      EQU TRUE TO 1
      EQU FALSE TO 0

*
* Initialize app variables
*

      CALL GET.USER.NEW(USER,CH.NUM)
      PROMPT''
      PROG.NAME='FB.AUD.ACC.ENTRY'
      PROG.DESC='Audit Assessorial Maint.'
      PACK.NAME='User :':USER
      CO.NAME='AFS Logistics, LLC'
   UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'CALC.FSC' ; UPL.VOUT = ''   
   UPL.VIN<3> = USER
   UPL.VIN<4> = CH.NUM    
   CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       
      ERR.MSG = ''
      TABLE.DESC=''

      TYPE.ARRAY = "F" :@VM: "C" :@VM: "P" :@VM: "A"
      TYPE.ARRAY<2> = "Flat" :@VM: "CWT" :@VM: "Percent" :@VM: "Ask"
      OPEN '','OPERATOR' TO F.OP ELSE CALL OPEN.ABORT("OPERATOR",PROG.NAME)      ; * GRB01
      READV OP.FLG FROM F.OP,USER,22 ELSE
         OP.FLG = "N"
      END
      IF OP.FLG = "Y" THEN
         
         *****    BEGIN CASE
*
* Authorized users
*
         *****       CASE USER = 'DAVID'
         *****      CASE USER = 'GBINO'
         *****       CASE USER = "PBASS"
         *****       CASE USER = "SSHAFER"
         *****        CASE USER = "TBURNS"            ; * JMK01
*        CASE USER = "AHICKS"  ; * TICKET 3092 - DRF 07/06/12
         *****        CASE USER = "NKELLY"  ; * TICKET 5817 - DRF 05/03/13
*
* Restrict everyone else
*
      END ELSE
         *****       CASE 1
         SUBJ="Unauthorized  Access Attempt by ":USER
         TEXT=''
         TEXT<1,-1>=USER:' ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):' ':PROG.NAME
         TEXT<1,-1>='User ':USER:' tried to access Audit Assesorial Maintenance program'
         TEXT<1,-1>="(This user's name was not included in the program to allow access)"
         MVIN=''
         MVIN<1>='SMatthews@afs.net'     ; * RLM01
         MVIN<2>=''
         MVIN<4>='AFS'
         MVIN<5>=SUBJ
         MVIN<6>=TEXT

         CALL FB.PRINT.CENT(1,80,12,'Restricted Access Application')
         CALL FB.PRINT.CENT(1,80,14,'Access Denied! See the Logistics Manager for Access')
         CALL ELINE('')
         STOP
         **   END CASE
      END
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT("CARRIERS",PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS.CODES ELSE
         CALL OPEN.ABORT("ZIPS.CODES",PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT("FB.TABLES",PROG.NAME)
      END
      OPEN '','FB.AUDIT.ACC' TO F.AUDIT.ACC ELSE
         CALL OPEN.ABORT("FB.AUDIT.ACC",PROG.NAME)
      END
      READ LI.CODES FROM F.TABLES,'LI.CODES' ELSE LI.CODES=''
10:
      GOSUB INITIALIZE.VARIABLES

***********************************************************
100:* ASK FOR CARRIER
***********************************************************

      GOSUB INPUT.SCREEN
      CARRIER.NAME = ''
      CARRIER.CITY = '' ; CARRIER.STATE = ''
      CHANGES.MADE = ''
      CRT @(13,03):@(-4)
      HELP="Enter carrier number, 'name' for search,  [EX]it."
      IF CARRIER.ID THEN
         MASK = CARRIER.ID
      END ELSE
         MASK = '#####'
      END

150:
      CALL GEN.IN(13,3,MASK,'',Q,0,20,'','',2,13,3,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI=OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI='X'
            STOP
         CASE QI='EX'
            STOP
         CASE NUM(QI)
            CARRIER.ID=QI'R%5'
            CRT @(13,3):CARRIER.ID
         CASE 1
            CALL SOUNDEX.DISPLAY(Q,'CARRIERS','SDX.CARRIER,NAME','1,3,4',QX)
            CT=DCOUNT(QX<1>,@VM)
            IF CT=1 THEN
               DATA QX<1,1>
            END
            GOSUB INPUT.SCREEN
            GOSUB DSP.SCREEN.DATA
            GOTO 150
         CASE 1
            CALL ELINE('Invalid Entry.')
      END CASE

*
* Open Carrier Records
*
      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE
         CALL ELINE('"':CARRIER.ID:'" is an invalid Carrier Number. Try Again.')
         GOTO 100
      END

      CARRIER.NAME = CARRIER.REC<1>
      CARRIER.CITY = CARRIER.REC<3>
      CARRIER.STATE = CARRIER.REC<4>
      GOSUB DSP.SCREEN.DATA


***********************************************************
200:* Code
***********************************************************
      HELP = "Enter Code to setup. ''=Select [EX] = Exit"
      IF ASS.CODE THEN
         MASK = ASS.CODE
      END ELSE
         MASK = '#####'
      END
      CRT @(13,4):@(-4)

210:
      CALL GEN.IN(13,4,MASK,'',Q,0,20,'','',2,13,4,1,QI,HELP,0,23)

      QI = TRIM(OCONV(QI,'MCU'))
      BEGIN CASE
         CASE QI = 'EX'
            STOP
         CASE QI='X'
            GOTO 100
         CASE QI=''
            IF ASS.CODE = '' THEN
               CALL ELINE("Invalid selection")
               GOTO 200
            END ELSE
               Q = ASS.CODE
            END
         CASE 1
            LOCATE QI IN LI.CODES<1> SETTING CPOS ELSE
               CALL ELINE('Invalid Code, Try Again.')
               GOTO 210
            END
            ASS.CODE = QI
            CODE.DESC = LI.CODES<2,CPOS>
      END CASE

      GOSUB DSP.SCREEN.DATA


***********************************************************
300:* ENTER CLIENT NAME/NUMBER
***********************************************************
      HELP = "Enter client name or number to setup. [EX] = Exit"
      IF CLIENT.ID THEN
         MASK = CLIENT.ID
      END ELSE
         MASK = '#####'
      END
      CRT @(13,5):@(-4)
310:
      CALL GEN.IN(13,5,MASK,'',Q,0,20,'','',2,13,5,1,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI = "ALL" OR CLIENT.ID = 'ALL' THEN
         CLIENT.REC = ''
         GOTO 325
      END

      BEGIN CASE
         CASE QI = ''
            IF CLIENT.ID = '' THEN
               CALL ELINE("Invalid selection")
               GOTO 300
            END ELSE
               Q = CLIENT.ID
            END
         CASE QI='EX'
            STOP
         CASE NUM(QI) AND QI # ''
            CLIENT.ID = QI'R%5'
         CASE NOT(QI MATCHES "0N") AND QI # ''
            CALL SOUNDEX.DISPLAY(QI,'BCUST','SDX.CLIENTS,NAME',2,ITEM.LIST)
            GOSUB INPUT.SCREEN
            BEGIN CASE
               CASE ITEM.LIST = ''
                  GOTO 300               ; * START OVER
               CASE DCOUNT(ITEM.LIST,@AM) GT 1
                  GOTO 300               ; * START OVER
               CASE 1
                  DATA ITEM.LIST
                  GOTO 300               ; * START OVER
            END CASE
         CASE 1
            CALL ELINE('Invalid Client Name, Try Again.')
            GOTO 300
      END CASE

*
* Open Client Records
*
      READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
         CALL ELINE("Client number ":CLIENT.ID:" is not a valid client #")
         GOTO 100
      END
      OPEN '','FB.AUDIT,':CLIENT.ID TO F.AUDIT THEN     ; * DRF02
         READV SUB.CLIENT FROM F.AUDIT,'SUBSTITUTE',1 THEN     ; * DRF02
            CALL ELINE("Client number ":CLIENT.ID:" is substituted to client ":SUB.CLIENT:" Please use ":SUB.CLIENT)     ; * DRF02
              GOTO 300     ; * DRF02
         END     ; * DRF02
      END     ; * DRF02
***********************************************************
325:* Get Client info
***********************************************************

      IF QI = "ALL" THEN
         CLIENT.ID = 'ALL'
         CL.NAME = "All Clients"
         CL.ADDR = ""
         CL.CITY = ""
         CL.ST = ""
         CL.ZIP = ""
      END ELSE
         CL.NAME = CLIENT.REC<2>
         CL.ADDR = CLIENT.REC<3>
         CL.CITY = CLIENT.REC<4>
         CL.ST = CLIENT.REC<5>
         CL.ZIP = CLIENT.REC<6>
      END

      GOSUB DSP.SCREEN.DATA

***********************************************************
400:  *** Get Zip Code
***********************************************************
      HELP="Enter ZIP Code [ALL] 'X'=Back. 'EX'=Exit."
      IF ZIP.CODE THEN
         MASK = ZIP.CODE
      END ELSE
         MASK = '######'
      END
      CALL GEN.IN(12,6,'','',Q,0,6,'','',0,12,6,0,QI,HELP,0,23)
      IF QI='' THEN QI=MASK
      QI=OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI='X'
            GOTO 300
         CASE QI='EX'
            STOP
         CASE QI EQ 'ALL'
            ZIP.CODE = 'ALL' ; ZIP.DESC = 'All Zip Codes'
         CASE NUM(QI)
            ZIP.CODE=QI'R%5'
            READ ZIP.REC FROM F.ZIPS.CODES, ZIP.CODE ELSE
               CALL ELINE("Invalid Zip Code":ZIP.CODE)
               GOTO 400
            END
            ZIP.DESC = ZIP.REC<1>:", ":ZIP.REC<2>

         CASE QI MATCHES '1A1N1A1N1A1N'
            STATE=''
            ZIP.CODE=QI
            CALL FB.READ.ZIP(ZIP.CODE,CITY,STATE)
            IF STATE='' THEN             ; * JMK02
               BACK.FLAG=1               ; * JMK02
               GOTO 100                  ; * JMK02
            END                          ; * JMK02
            ZIP.DESC = CITY:", ":STATE
         CASE 1
            CALL ELINE('Invalid Entry.')
            GOTO 400
      END CASE

410:

      GOSUB DSP.SCREEN.DATA

*** Read FB.AUDIT.ACC record

      ID.AUDIT.ACC = CARRIER.ID:"*":ASS.CODE:"*":CLIENT.ID:"*":ZIP.CODE
    
       * Begin GRB01
         READU AUD.REC FROM F.AUDIT.ACC,ID.AUDIT.ACC LOCKED
            IF RECORDLOCKED(F.AUDIT.ACC,ID.AUDIT.ACC) THEN
               LOCK.USER = STATUS()"R%5"
               VIN=''
               VIN<1> = LOCK.USER
               CALL LOCK.USER(VIN,VOUT)
               CALL ELINE("This record is currently locked by ":VOUT<1>)
               CARRIER.ID = ""
               RETURN TO 10
            END
         END ELSE
            AUD.REC = ''
         END	
         
         * End GRB01
      	ORIG.AUD.REC = AUD.REC

      IF AUD.REC = '' THEN
         HELP='Enter a new effective date for a new Assesorial pg. [X]=Back [EX]it'
         CALL GEN.IN(0,22,'New Effective Date: ':DATE()'D2/','DATE',Q,0,8,'','',2,-8,22,0,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI = 'EX'
               STOP
            CASE QI='X'
               GOTO 400
            CASE QI=''
               Q=DATE()
         END CASE
         CRT @(0,22):@(-3)

         AUD.REC<1> = Q
         EFF.FROM.DT = Q
         CRT @(29,08):OCONV(EFF.FROM.DT,"D2/") : @(-4)
         IF EFF.TO.DT NE '' THEN
            CRT @(38,08):" thru ":OCONV(EFF.TO.DT,"D2/")
         END ELSE
            CRT @(38,08):" thru [OPEN]"
         END
         PG.NO = 1 ; PG.CNT = 1
         CRT @(65,08):"Page ":PG.NO:" of ":PG.CNT : @(-4)

         FOR VX = 1 TO 7
            ON VX GOSUB 1000, 2000, 3000, 4000, 5000, 6000, 7000
         NEXT VX
      END

      PG.CNT = DCOUNT(AUD.REC<1>,@VM)
      PG.NO = PG.CNT                     ; * Page/Value position in MV Array

********************************************************************************
500:  ****     Start of Page 1: Charge Page
********************************************************************************
      GOSUB EXTRACT.DETAIL.DATA
      GOSUB DSP.DETAIL.DATA

********************************************************************************
510:  **** Get selection
********************************************************************************

      HELP='Enter number to edit. [B]ack [F]orward [N]ew [D]elete [CR]=Next [U]pdate [EX]it'
      CALL GEN.IN(0,22,'Enter Selection: --','',Q,0,2,'','',2,-2,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'                    ; * Exit without changes (abandon all changes)
            STOP
         CASE QI=''
            GOTO 10
         CASE QI='U'                     ; * Update record
            YN.MSG = "Update Assessorial codes"
            GOSUB ASK.Y.OR.N
            BEGIN CASE
               CASE YN.ANSWER = 'Y'
                  CONTR.TYPE = AUD.REC<3,PG.NO>
                  BENCH.TYPE = AUD.REC<10,PG.NO>
                  IF CONTR.TYPE = "A" OR CONTR.TYPE = "F" THEN
                     IF CONTR.TYPE = "A" THEN
                        AUD.REC<4,PG.NO> = ""
                        AUD.REC<5,PG.NO> = ""
                        AUD.REC<6,PG.NO> = ""
                        CALL ELINE("NOTE : Calc. Rate, minimim and maximum amts. set to null for type 'A'sk")
                     END ELSE
                        AUD.REC<5,PG.NO> = ""
                        AUD.REC<6,PG.NO> = ""
                        CALL ELINE("NOTE : Minimim and maximum amts. set to null for type 'F'lat")
                     END
                     GOSUB EXTRACT.DETAIL.DATA
                     GOSUB DSP.DETAIL.DATA
                  END
                  IF BENCH.TYPE = "A" OR BENCH.TYPE = "F" THEN
                     IF BENCH.TYPE = "A" THEN
                        AUD.REC<11,PG.NO> = ""
                        AUD.REC<12,PG.NO> = ""
                        AUD.REC<13,PG.NO> = ""
                        CALL ELINE("NOTE : Calc. Rate, minimim and maximum amts. set to null for type 'A'sk")
                     END ELSE
                        AUD.REC<12,PG.NO> = ""
                        AUD.REC<13,PG.NO> = ""
                        CALL ELINE("NOTE : Minimim and maximum amts. set to null for type 'F'lat")
                     END
                     GOSUB EXTRACT.DETAIL.DATA
                     GOSUB DSP.DETAIL.DATA
                  END
                  IF CONTR.TYPE = "C" OR CONTR.TYPE = "P" THEN
                     IF AUD.REC<4,PG.NO> = "" THEN
                        CALL ELINE("Contract Calc. rate may not be null for type ":CONTR.TYPE)
                        GOTO 500
                     END
                  END
                  IF BENCH.TYPE = "C" OR BENCH.TYPE = "P" THEN
                     IF AUD.REC<11,PG.NO> = "" THEN
                        CALL ELINE("Benchmark Calc. rate may not be null for type ":BENCH.TYPE)
                        GOTO 500
                     END
                  END
                  WRITE AUD.REC ON F.AUDIT.ACC, ID.AUDIT.ACC
                  RELEASE F.AUDIT.ACC, ID.AUDIT.ACC   ; * GRB01
                  GOSUB UPDATE.LOG              ; * GRB01
               CASE YN.ANSWER = 'N'
                  CALL ELINE("No updates performed")
                  GOTO 500
               CASE 1
                  GOTO 500
            END CASE
         CASE QI='N'                     ; * New Assesorial pg
            IF DISPLAY.MODE THEN
               CALL ELINE('Invalid entry - You may view only.')
               GOTO 510
            END ELSE
               IF ALREADY.DELETED THEN
                  CALL ELINE('To properly track changes, you may not add and delete pages at one time.')
                  GOTO 510
               END
               IF PG.NO < DCOUNT(AUD.REC<1>,@VM) THEN
               END
520:           HELP='[Y]es [N]o'
               CALL GEN.IN(0,22,'Create a new page of configurations? N','',Q,0,1,'','',2,-1,22,1,QI,HELP,0,23)
               QI=OCONV(QI,'MCU')
               BEGIN CASE
                  CASE QI='Y'
530:                 HELP='Enter a new effective date for a new Assesorial pg. [X]=Back [EX]it'
                     CALL GEN.IN(0,22,'New Effective Date: ':DATE()'D2/','DATE',Q,0,8,'','',2,-8,22,0,QI,HELP,0,23)
                     QI=OCONV(QI,'MCU')
                     BEGIN CASE
                        CASE QI = 'EX'
                           STOP
                        CASE QI='X'
                           GOTO 520
                        CASE QI=''
                           Q=DATE()
                     END CASE
                     CRT @(0,22):@(-3)
                     EFF.DATE=Q
                     IF EFF.DATE LE AUD.REC<1,PG.NO> THEN
540:                    HELP='[Y]es [N]o'
                        CALL GEN.IN(0,22,'New Effective Date is on or before the last Effective Date. Continue? N','',Q,0,1,'','',2,-1,22,1,QI,HELP,0,23)
                        QI=OCONV(QI,'MCU')
                        IF QI='' THEN QI='N'
                        IF NOT(QI='Y' OR QI='N') THEN GOTO 540
                        IF QI='N' THEN GOTO 530
                        LOCATE EFF.DATE IN AUD.REC<1> BY 'AR' SETTING NEW.DATE.POS THEN
                           CALL ELINE('This date already exists. Press ENTER to see that date.')
                           PG.NO=NEW.DATE.POS
                        END ELSE
                           CALL ELINE('Date does not exist. Press ENTER to insert that date.')
                           GOSUB INSERT.ASSESOR.PAGE         ; * Insert effective date and zero configurations
                           PG.NO=NEW.DATE.POS
                           IF PG.NO>1 THEN GOSUB COPY.EXISTING.ASSESS.FORWARD
                           ALREADY.ADDED=1
                        END
                        GOTO 500
                     END ELSE
                        AUD.REC<2,PG.NO>=EFF.DATE-1
                        PG.NO+=1
                        AUD.REC<1,PG.NO>=EFF.DATE
                        AUD.REC<2,PG.NO>=""
                        GOSUB COPY.EXISTING.ASSESS.FORWARD
                        PG.CNT = DCOUNT(AUD.REC<1>,@VM)
                        ALREADY.ADDED=1
                        GOTO 500
                     END
                  CASE QI='N' OR QI=''
                     GOTO 510
                  CASE 1
                     GOTO 520
               END CASE
            END
         CASE QI='D'
            IF DISPLAY.MODE THEN
               CALL ELINE('Invalid entry - You may view only.')
               GOTO 510
            END ELSE
               IF USER='WPARDUE' OR USER='MDARLINGTON' OR USER = 'DAVID'  THEN      ; * DRFZZ  ;GRB
                  IF ALREADY.ADDED THEN
                     CALL ELINE('To properly track changes, you may not add and delete pages at one time.')
                     GOTO 510
                  END
550:              HELP='[Y]es [N]o'
                  CALL GEN.IN(0,22,'Delete Assesorial pg ':PG.NO:'? N','',Q,0,1,'','',2,-1,22,1,QI,HELP,0,23)
                  QI=OCONV(QI,'MCU')
                  IF QI='' THEN QI='N'
                  IF NOT(QI='Y' OR QI='N') THEN GOTO 550
                  IF QI='N' THEN
                     GOTO 510
                  END ELSE
                     GOSUB DELETE.ASSESOR.PAGE
                     ALREADY.DELETED=1
                     IF DCOUNT(AUD.REC<1>,@VM)=0 THEN
                        CRT @(0,3):@(-3)
                        TEMP='All Assesorial pgs for this client will be deleted'
                        CALL CENTER(TEMP,80)
                        CRT @(0,8):TEMP
560:                    HELP='[U]pdate [EX]it'
                        CALL GEN.IN(0,20,'Update or Exit without updating?  ','',Q,0,2,'','',2,-1,20,1,QI,HELP,0,23)
                        QI=OCONV(QI,'MCU')
                        IF NOT(QI='U' OR QI='EX') THEN GOTO 560
                        IF QI='EX' THEN AUD.REC=SAVED.AUD.REC
                        IF QI='U' THEN
                           DELETE F.AUDIT.ACC, ID.AUDIT.ACC
                           CALL ELINE('All Assesorial pgs for this client have been deleted')
                        END
                        RETURN
                     END
                     IF PG.NO>DCOUNT(AUD.REC<1>,@VM) THEN PG.NO=DCOUNT(AUD.REC<1>,@VM)
                     EFF.DATE=AUD.REC<1,PG.NO>
                     GOTO 500
                  END
               END ELSE
                  CALL ELINE('You are not authorized to delete Assesorial pgs. See Neil.')
                  GOTO 510
               END
            END
         CASE QI='F'                     ; * Forward a page
            IF PG.NO=DCOUNT(AUD.REC<1>,@VM) THEN
               CALL ELINE('** Displaying Last Page **')
               GOTO 510
            END ELSE
               PG.NO+=1
               GOTO 500
            END
         CASE QI='B'                     ; * Back a page
            IF PG.NO=1 THEN
               CALL ELINE('** Displaying First Page **')
               GOTO 510
            END ELSE
               PG.NO-=1
               GOTO 500
            END
         CASE NUM(QI)                    ; * Edit numbered item
            IF QI LT 1 OR QI GT 7 THEN
               CALL ELINE('Invalid entry - Number out of range.')
               GOTO 510
            END ELSE
               IF DISPLAY.MODE THEN
                  CALL ELINE('Invalid entry - You may view only.')
                  GOTO 510
               END ELSE
                  ON QI GOSUB 1000, 2000, 3000, 4000, 5000, 6000, 7000
                  GOTO 500
               END
            END
         CASE 1
            CALL ELINE('Invalid entry - Command not recognized.')
            GOTO 510
      END CASE

      GOTO 100
********************************************************************************
1000: * Enter Contract Calculation Type
********************************************************************************
      HELP = "Contract Calc. type Options: [P]ercent [C]WT [F]lat [A]sk [X]-Back [EX]-Exit"
      MASK = AUD.REC<3,PG.NO>:" "
      CONTR.TYPE.DESC = ''
      Q=''
      CALL GEN.IN(37,12,MASK,'',Q,0,2,'','',2,37,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      IF QI='' THEN QI=TRIM(MASK)
      BEGIN CASE
         CASE QI = 'P' OR QI = 'C' OR QI = 'F' OR QI = 'A'
            IF QI = "A" THEN AUD.REC<4,PG.NO> = ''
            LOCATE QI IN TYPE.ARRAY<1> SETTING TPOS THEN
               CONTR.TYPE.DESC = TYPE.ARRAY<2,TPOS>
            END
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            RETURN
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 1000
      END CASE

      AUD.REC<3,PG.NO> = QI
      CRT @(37,12) : AUD.REC<3,PG.NO> : "  " : CONTR.TYPE.DESC : SPACE(6)
********************************************************************************
1100: * Enter Benchmark Calculation Type
********************************************************************************
      HELP = "Benchmark Calc. type Options: [P]ercent [C]WT [F]lat [A]sk [X]-Back [EX]-Exit"

      MASK = AUD.REC<10,PG.NO>:" "
      BENCH.TYPE.DESC = ""

      Q=''
      CALL GEN.IN(63,12,MASK,'',Q,0,2,'','',2,63,12,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      IF QI='' THEN QI=TRIM(MASK)
      BEGIN CASE
         CASE QI = 'P' OR QI = 'C' OR QI = 'F' OR QI = 'A'
            IF QI = "A" THEN AUD.REC<11,PG.NO> = ''
            LOCATE QI IN TYPE.ARRAY<1> SETTING TPOS THEN
               BENCH.TYPE.DESC = TYPE.ARRAY<2,TPOS>
            END
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            GOTO 1000
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 1100
      END CASE
      AUD.REC<10,PG.NO> = QI
      CRT @(63,12) : AUD.REC<10,PG.NO> : "  " : BENCH.TYPE.DESC : SPACE(6)

      RETURN
********************************************************************************
2000: * Enter Contract Calculation Rate
********************************************************************************
      CONTR.TYPE = AUD.REC<3,PG.NO>
      IF CONTR.TYPE = "A" THEN
         CALL ELINE("No rate required for Contract type A calculations")
         AUD.REC<4,PG.NO> = ''
         CRT @(29,13) : "N/A" "R#9" : SPACE(6)
         GOTO 2100
      END
      IF AUD.REC<4,PG.NO> = "" THEN MASK = '' ELSE MASK=OCONV(AUD.REC<4,PG.NO>,"MR2") 'R#9'
      HELP='Enter Contract Calculation Rate [X]=Back [EX]-Exit'
      CALL GEN.IN(29,13,MASK,'AMT2',Q,0,9,'','',2,29,13,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')

      IF QI='EX' THEN STOP
      IF QI='X' THEN RETURN
      IF QI='' THEN Q=AUD.REC<4,PG.NO>
      IF QI=' ' THEN Q=''
      IF NOT(NUM(Q)) THEN GOTO 2000

      IF Q#'' AND Q<0 THEN
         CALL ELINE('ERROR : Amount cannot be negative.')
         GOTO 2000
      END
      AUD.REC<4,PG.NO>=Q
      IF Q = '' THEN
         CRT @(29,13) : "N/A" "R#9" : SPACE(6)
      END ELSE
         CRT @(29,13) : OCONV(Q,"MR2,") "R#9"
      END
********************************************************************************
2100: * Enter Benchmark Calculation Rate
********************************************************************************
      BENCH.TYPE = AUD.REC<10,PG.NO>
      IF BENCH.TYPE = "A" THEN
         CALL ELINE("No rate required for Benchmark type A calculations")
         AUD.REC<11,PG.NO> = ''
         CRT @(55,13) : "N/A" "R#9" : SPACE(6)
         RETURN
      END
      IF AUD.REC<11,PG.NO> = "" THEN MASK = '' ELSE MASK=OCONV(AUD.REC<11,PG.NO>,"MR2") 'R#9'
      HELP='Enter Contract Calculation Rate [ ]=Clear [X]=Back'
      CALL GEN.IN(55,13,MASK,'AMT2',Q,0,8,'','',2,55,13,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='X' THEN GOTO 2000
      IF QI='' THEN Q=AUD.REC<11,PG.NO>
      IF QI=' ' THEN Q=''
      IF NOT(NUM(Q)) THEN GOTO 2100

      IF Q#'' AND Q<0 THEN
         CALL ELINE('ERROR : Amount cannot be negative.')
         GOTO 2100
      END
      AUD.REC<11,PG.NO>=Q
      IF Q = '' THEN
         CRT @(55,13) : "N/A" "R#9" : SPACE(6)
      END ELSE
         CRT @(55,13) : OCONV(Q,"MR2,") "R#9"
      END

      RETURN
********************************************************************************
3000: * Enter Contract Calculation Minimum Amount
********************************************************************************
      CONTR.TYPE = AUD.REC<3,PG.NO>
      IF CONTR.TYPE = "A" THEN
         CALL ELINE("No Contract Minimum required for type 'A'sk")
         AUD.REC<5,PG.NO> = ''
         CRT @(29,14) : "N/A" "R#9" : SPACE(6)
         GOTO 3100
      END
      IF AUD.REC<5,PG.NO> = "" THEN MASK = '' ELSE MASK=OCONV(AUD.REC<5,PG.NO>,"MR2") 'R#9'
      HELP='Enter Contract Minimum Amount [ ]=Clear [X]=Back [EX]-Exit'
      CALL GEN.IN(29,14,MASK,'AMT2',Q,0,8,'','',2,29,14,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='EX' THEN STOP
      IF QI='X' THEN RETURN
      IF QI='' THEN Q=AUD.REC<5,PG.NO>
      IF QI=' ' THEN Q=''
      IF NOT(NUM(Q)) THEN GOTO 2000
      IF Q#'' AND Q=0 THEN
         CALL ELINE('ERROR : Amount cannot be zero.')
         GOTO 3000
      END
      IF Q#'' AND Q<0 THEN
         CALL ELINE('ERROR : Amount cannot be negative.')
         GOTO 3000
      END
      AUD.REC<5,PG.NO>=Q
      IF Q = '' THEN
         CRT @(29,14) : "N/A" "R#9" : SPACE(6)
      END ELSE
         CRT @(29,14) : OCONV(Q,"MR2,") "R#9"
      END

********************************************************************************
3100: * Enter Benchmark Minimum Amount
********************************************************************************
      BENCH.TYPE = AUD.REC<10,PG.NO>
      IF BENCH.TYPE = "A" THEN
         CALL ELINE("No Benchmark Minimum required for type 'A'sk")
         AUD.REC<12,PG.NO> = ''
         CRT @(55,14) : "N/A" "R#9" : SPACE(6)
         RETURN
      END
      IF AUD.REC<12,PG.NO> = "" THEN MASK = '' ELSE MASK=OCONV(AUD.REC<12,PG.NO>,"MR2") 'R#9'
      HELP='Enter Benchmark Minimum Amount [ ]=Clear [X]=Back'
      CALL GEN.IN(55,14,MASK,'AMT2',Q,0,8,'','',2,55,14,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='X' THEN GOTO 3000
      IF QI='' THEN Q=AUD.REC<12,PG.NO>
      IF QI=' ' THEN Q=''
      IF NOT(NUM(Q)) THEN GOTO 3100
      IF Q#'' AND Q=0 THEN
         CALL ELINE('ERROR : Amount cannot be zero.')
         GOTO 3100
      END
      IF Q#'' AND Q<0 THEN
         CALL ELINE('ERROR : Amount cannot be negative.')
         GOTO 3100
      END
      AUD.REC<12,PG.NO>=Q

      IF Q = '' THEN
         CRT @(55,14) : "N/A" "R#9" : SPACE(6)
      END ELSE
         CRT @(55,14) : OCONV(Q,"MR2,") "R#9"
      END

      RETURN
********************************************************************************
4000: * Enter Contract Calculation Maximum Amount
********************************************************************************
      CONTR.TYPE = AUD.REC<3,PG.NO>
      IF CONTR.TYPE = "A" THEN
         CALL ELINE("No Contract Maximum required for type 'A'sk")
         AUD.REC<6,PG.NO> = ''
         CRT @(29,15) : "N/A" "R#9" : SPACE(6)
         GOTO 4100
      END
      IF AUD.REC<6,PG.NO> = "" THEN MASK = '' ELSE MASK=OCONV(AUD.REC<6,PG.NO>,"MR2") 'R#9'
      HELP='Enter Contract Minimum Amount [ ]=Clear [X]=Back [EX]-Exit'
      CALL GEN.IN(29,15,MASK,'AMT2',Q,0,8,'','',2,29,15,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')

      IF QI='EX' THEN STOP
      IF QI='X' THEN RETURN
      IF QI='' THEN Q=AUD.REC<6,PG.NO>
      IF QI=' ' THEN Q=''
      IF NOT(NUM(Q)) THEN GOTO 4000
      IF Q#'' AND Q=0 THEN
         CALL ELINE('ERROR : Amount cannot be zero.')
         GOTO 4000
      END
      IF Q#'' AND Q<0 THEN
         CALL ELINE('ERROR : Amount cannot be negative.')
         GOTO 4000
      END
      AUD.REC<6,PG.NO>=Q
      IF Q = '' THEN
         CRT @(29,15) : "N/A" "R#9" : SPACE(6)
      END ELSE
         CRT @(29,15) : OCONV(Q,"MR2,") "R#9"
      END
********************************************************************************
4100: * Enter Benchmark Maximum Amount
********************************************************************************
      BENCH.TYPE = AUD.REC<10,PG.NO>
      IF BENCH.TYPE = "A" THEN
         CALL ELINE("No Benchmark Maximum required for type 'A'sk")
         AUD.REC<13,PG.NO> = ''
         CRT @(55,15) : "N/A" "R#9" : SPACE(6)
         RETURN
      END
      IF AUD.REC<13,PG.NO> = "" THEN MASK = '' ELSE MASK=OCONV(AUD.REC<13,PG.NO>,"MR2") 'R#9'
      HELP='Enter Benchmark Maximum Amount [ ]=Clear [X]=Back'
      CALL GEN.IN(55,15,MASK,'AMT2',Q,0,8,'','',2,55,15,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='X' THEN GOTO 4000
      IF QI='' THEN Q=AUD.REC<13,PG.NO>
      IF QI=' ' THEN Q=''
      IF NOT(NUM(Q)) THEN GOTO 4100
      IF Q#'' AND Q=0 THEN
         CALL ELINE('ERROR : Amount cannot be zero.')
         GOTO 4100
      END
      IF Q#'' AND Q<0 THEN
         CALL ELINE('ERROR : Amount cannot be negative.')
         GOTO 4100
      END
      AUD.REC<13,PG.NO>=Q
      IF Q = '' THEN
         CRT @(55,15) : "N/A" "R#9" : SPACE(6)
      END ELSE
         CRT @(55,15) : OCONV(Q,"MR2,") "R#9"
      END

      RETURN
********************************************************************************
5000: * Enter Contract Calculation Basis  (G or N)
********************************************************************************
      HELP = "Contract Calculation Basis Options: [G]ross [N]et [X]-Back [EX]-Exit"
      MASK = AUD.REC<7,PG.NO>
      Q=''
      CALL GEN.IN(37,16,MASK,'',Q,0,1,'','',2,37,16,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = 'G' OR QI = 'N'
            NULL
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            RETURN
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 5000
      END CASE
      AUD.REC<7,PG.NO> = QI
      CRT @(37,16) : AUD.REC<7,PG.NO> : "  "
********************************************************************************
5100: * Enter Benchmark Calculation Basis  (G or N)
********************************************************************************
      HELP = "Benchmark Calculation Basis Options: [G]ross [N]et [X]-Back [EX]-Exit"
      MASK = AUD.REC<14,PG.NO>
      Q=''
      CALL GEN.IN(55,16,MASK,'',Q,0,1,'','',2,55,16,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = 'G' OR QI = 'N'
            NULL
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            GOTO 5000
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 5100
      END CASE
      AUD.REC<14,PG.NO> = QI
      CRT @(55,16) : AUD.REC<14,PG.NO> "R#9" : "  "
      RETURN
********************************************************************************
6000: * Enter whether to 'I'nclude or 'E'xclude FSC
********************************************************************************
      HELP = "Contract -- 'I'nclude or 'E'xclude FSC : [I] [E] [X]-Back [EX]-Exit"
      MASK = AUD.REC<8,PG.NO>
      Q=''
      CALL GEN.IN(37,17,MASK,'',Q,0,1,'','',2,37,17,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = 'I' OR QI = 'E'
            NULL
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            RETURN
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 6000
      END CASE

      AUD.REC<8,PG.NO> = QI
      CRT @(37,17) : AUD.REC<8,PG.NO> : "  "
********************************************************************************
6100: * Enter whether to 'I'nclude or 'E'xclude FSC
********************************************************************************
      HELP = "Benchmark -- 'I'nclude or 'E'xclude FSC : [I] [E] [X]-Back [EX]-Exit"
      MASK = AUD.REC<15,PG.NO>
      Q=''
      CALL GEN.IN(55,17,MASK,'',Q,0,1,'','',2,55,17,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = 'I' OR QI = 'E'
            NULL
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            GOTO 6000
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 6100
      END CASE

      AUD.REC<15,PG.NO> = QI
      CRT @(55,17) : AUD.REC<15,PG.NO> "R#9" : "  "


      RETURN
********************************************************************************
7000: * Enter whether to 'I'nclude or 'E'xclude ACC
********************************************************************************
      HELP = "Contract -- 'I'nclude or 'E'xclude ACC : [I] [E] [X]-Back [EX]-Exit"
      MASK = AUD.REC<9,PG.NO>
      Q=''
      CALL GEN.IN(37,18,MASK,'',Q,0,1,'','',2,37,18,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = 'I' OR QI = 'E'
            NULL
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            RETURN
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 7000
      END CASE

      AUD.REC<9,PG.NO> = QI
      CRT @(37,18) : AUD.REC<9,PG.NO> : "  "
********************************************************************************
7100: * Enter Benchmark Calculation Basis  (G or N)
********************************************************************************
      HELP = "Benchmark -- 'I'nclude or 'E'xclude ACC : [I] [E] [X]-Back [EX]-Exit"
      MASK = AUD.REC<16,PG.NO>
      Q=''
      CALL GEN.IN(55,18,MASK,'',Q,0,1,'','',2,55,18,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')

      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = 'I' OR QI = 'E'
            NULL
         CASE QI = 'EX'
            STOP
         CASE QI = 'X'
            GOTO 7000
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO 7100
      END CASE

      AUD.REC<16,PG.NO> = QI
      CRT @(55,18) : AUD.REC<16,PG.NO> "R#9" : "  "

      RETURN

********************************************************************************
INIT.SCREEN:***
********************************************************************************
      CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('-',79) ; 

      RETURN

********************************************************************************
INPUT.SCREEN:***
********************************************************************************
      GOSUB INIT.SCREEN

      CRT @(0,03):'Carrier :':@(-4)
      CRT @(0,04):'Code    :':@(-4)
      CRT @(0,05):'Client  :':@(-4)
      CRT @(0,06):'Zip     :':@(-4)

      CRT @(0,08):"Configuration Effective Date "
      CRT @(0,09):STR("-",79)
      CRT @(30,10):"Contract" : @(55,10):"Benchmark"
      CRT @(30,11):"--------" : @(55,11):"---------"

      CRT @(0,12):"1. Calculation Type         : ":@(-4)
      CRT @(0,13):"2. Calculation Rate         : ":@(-4)
      CRT @(0,14):"3. Calculation Minimum Amt. : ":@(-4)
      CRT @(0,15):"4. Calculation Maximum Amt. : ":@(-4)
      CRT @(0,16):"5. Calculation Basis        : ":@(-4)
      CRT @(0,17):"6. Include/Exclude FSC      : ":@(-4)
      CRT @(0,18):"7. Include/Exclude ACC      : ":@(-4)

      RETURN

********************************************************************************
DSP.SCREEN.DATA:***
********************************************************************************
*
* Display Carrier Information
*
      IF CARRIER.ID THEN
         CRT @(13,03):CARRIER.ID:'  ':CARRIER.NAME:@(-4)
      END ELSE
         CRT @(13,03):@(-4)
      END

*
* Display Code
*
      IF ASS.CODE THEN
         CRT @(13,04):ASS.CODE "R#5" :"  ":CODE.DESC : @(-4)
      END ELSE
         CRT @(13,04):@(-4)
      END

*
* Display Client Information
*
      IF CLIENT.ID THEN
         CRT @(13,05):CLIENT.ID "R#5" :'  ':CL.NAME:@(-4)
      END

*
* Display Zip Code
*
      IF ZIP.CODE THEN
         CRT @(12,06):ZIP.CODE 'R#6':'  ':ZIP.DESC'L#25' : @(-4)
      END ELSE
         CRT @(12,06):@(-4)
      END

      RETURN

********************************************************************************
EXTRACT.DETAIL.DATA:***
********************************************************************************

      EFF.FROM.DT = AUD.REC<1,PG.NO>
      EFF.TO.DT = AUD.REC<2,PG.NO>
      CONTR.TYPE = AUD.REC<3,PG.NO>
      CONTR.RATE = AUD.REC<4,PG.NO>
      CONTR.MIN = AUD.REC<5,PG.NO>
      CONTR.MAX = AUD.REC<6,PG.NO>
      CONTR.BASE = AUD.REC<7,PG.NO>
      CONTR.FSC = AUD.REC<8,PG.NO>
      CONTR.ACC = AUD.REC<9,PG.NO>
      BENCH.TYPE = AUD.REC<10,PG.NO>
      BENCH.RATE = AUD.REC<11,PG.NO>
      BENCH.MIN = AUD.REC<12,PG.NO>
      BENCH.MAX = AUD.REC<13,PG.NO>
      BENCH.BASE = AUD.REC<14,PG.NO>
      BENCH.FSC = AUD.REC<15,PG.NO>
      BENCH.ACC = AUD.REC<16,PG.NO>

      CONTR.TYPE.DESC = ''
      LOCATE CONTR.TYPE IN TYPE.ARRAY<1> SETTING TPOS THEN
         CONTR.TYPE.DESC = TYPE.ARRAY<2,TPOS>
      END

      BENCH.TYPE.DESC = ''
      LOCATE BENCH.TYPE IN TYPE.ARRAY<1> SETTING TPOS THEN
         BENCH.TYPE.DESC = TYPE.ARRAY<2,TPOS>
      END

      RETURN

********************************************************************************
DSP.DETAIL.DATA:***
********************************************************************************
      CRT @(29,08):OCONV(EFF.FROM.DT,"D2/") : @(-4)
      IF EFF.TO.DT NE '' THEN
         CRT @(38,08):" thru ":OCONV(EFF.TO.DT,"D2/")
      END ELSE
         CRT @(38,08):" thru [OPEN]"
      END
      CRT @(65,08):"Page ":PG.NO:" of ":PG.CNT : @(-4)
      CRT @(29,12) : CONTR.TYPE "R#9" : " " : CONTR.TYPE.DESC : SPACE(6)
      IF CONTR.RATE NE "" THEN
         CRT @(29,13) : OCONV(CONTR.RATE,"MR2,") "R#9"
      END ELSE
         CRT @(29,13): "N/A" "R#9"
      END
      IF CONTR.MIN NE "" THEN
         CRT @(29,14) : OCONV(CONTR.MIN,"MR2,") "R#9"
      END ELSE
         CRT @(29,14): "N/A" "R#9"
      END
      IF CONTR.MAX NE "" THEN
         CRT @(29,15) : OCONV(CONTR.MAX,"MR2,") "R#9"
      END ELSE
         CRT @(29,15): "N/A" "R#9"
      END
      CRT @(29,16) : CONTR.BASE "R#9"
      CRT @(29,17) : CONTR.FSC "R#9"
      CRT @(29,18) : CONTR.ACC "R#9"
      CRT @(55,12) : BENCH.TYPE "R#9" : " " : BENCH.TYPE.DESC : SPACE(6)
      IF BENCH.RATE NE "" THEN
         CRT @(55,13) : OCONV(BENCH.RATE,"MR2,") "R#9"
      END ELSE
         CRT @(55,13): "N/A" "R#9"
      END
      IF BENCH.MIN NE "" THEN
         CRT @(55,14) : OCONV(BENCH.MIN,"MR2,") "R#9"
      END ELSE
         CRT @(55,14): "N/A" "R#9"
      END
      IF BENCH.MAX NE "" THEN
         CRT @(55,15) : OCONV(BENCH.MAX,"MR2,") "R#9"
      END ELSE
         CRT @(55,15): "N/A" "R#9"
      END
      CRT @(55,16) : BENCH.BASE "R#9"
      CRT @(55,17) : BENCH.FSC "R#9"
      CRT @(55,18) : BENCH.ACC "R#9"

      RETURN
********************************************************************************
INSERT.ASSESOR.PAGE:***
********************************************************************************
      TO.DATE = AUD.REC<1,NEW.DATE.POS> - 1
      INS EFF.DATE BEFORE AUD.REC<1,NEW.DATE.POS>
      INS TO.DATE BEFORE AUD.REC<2,NEW.DATE.POS>
      FOR ATTRX=3 TO 16
         INS '' BEFORE AUD.REC<ATTRX,NEW.DATE.POS>
      NEXT X
      PG.NO = NEW.DATE.POS
      FOR VX = 1 TO 7
         ON VX GOSUB 1000, 2000, 3000, 4000, 5000, 6000, 7000
      NEXT VX

      RETURN

********************************************************************************
COPY.EXISTING.ASSESS.FORWARD:***
********************************************************************************
      FOR X=3 TO 16
         ATTRIBUTE=X
         AUD.REC<ATTRIBUTE,PG.NO>=AUD.REC<ATTRIBUTE,PG.NO-1>
      NEXT X
      RETURN
********************************************************************************
DELETE.ASSESOR.PAGE:***
********************************************************************************
      FOR X=1 TO 16
         DEL AUD.REC<X,PG.NO>
      NEXT X
      PG.CNT = DCOUNT(AUD.REC<1>,@VM)
      PG.NO = PG.CNT

      RETURN

********************************************************************************
ASK.Y.OR.N:***
********************************************************************************
      YN.ANSWER = ''
Y.OR.N:

      HELP = "Entry Options: [Y]-Yes [N]-No [X]-Back [EX]it"
      CRT @(0,22):YN.MSG:@(-4)
      MASK = YN.MASK'L#1'
      Q=''
      CALL GEN.IN(LEN(YN.MSG)+1,22,MASK,'',Q,0,1,'','',2,LEN(YN.MSG)+1,22,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='' THEN QI=MASK
      BEGIN CASE
         CASE QI = '1'
            QI='Y'
         CASE QI = '0'
            QI='N'
         CASE QI = 'Y'
            YN.ANSWER = 'Y'
         CASE QI = 'N'
            YN.ANSWER = 'N'
         CASE QI = 'X'
            YN.ANSWER = 'X'
         CASE QI = 'EX'
            STOP
         CASE 1
            CALL ELINE('Invalid entry.')
            GOTO Y.OR.N
      END CASE

      CRT @(0,22):@(-4):
      CRT @(0,23):@(-4):
      YN.ANSWER = QI
      RETURN
********************************************************************************
INITIALIZE.VARIABLES:* ...
********************************************************************************
      CLIENT.REC = ''
      ASS.CODE = ''
      CLIENT.ID = ''
      CARRIER.ID = ''
      ZIP.CODE = ''
      ZIP.DESC = ''
      CODE.DESC = ''

      AUD.REC = ''

      EFF.FROM.DT = ""
      EFF.TO.DT = ""
      CONTR.TYPE = ""
      CONTR.RATE = ""
      CONTR.MIN = ""
      CONTR.MAX = ""
      CONTR.BASE = ""
      CONTR.FSC = ""
      CONTR.ACC = ""
      BENCH.TYPE = ""
      BENCH.RATE = ""
      BENCH.MIN = ""
      BENCH.MAX = ""
      BENCH.BASE = ""
      BENCH.FSC = ""
      BENCH.ACC = ""
      PG.NO = 1                          ; * Page/Value position in MV Array
      PG.CNT = 1
      DISPLAY.MODE = 0
      ASSES.LIST = ''                    ; * NPR May not be needed
      POSITION.HOLDER='* Holds Position in Array *'
      MASK.CHAR='-'
      ALREADY.ADDED=0
      ALREADY.DELETED=0

      SAVED.AUD.REC = ''

      YN.MSG = ''
      YN.MASK = 'N'

      RETURN
      * Begin GRB01
***************************************************
UPDATE.LOG:
****************************************************
      IF ORIG.AUD.REC # AUD.REC THEN
         SYS.TME = TIME()
         PROC.DTE =DATE()
         VIN=""
         VOUT=""
         VIN<1> = PROC.DTE
         VIN<2> = SYS.TME
         VIN<6> = USER
****VIN<7> = CLIENT.ID:",":DIV.ID
         VIN<10> = CH.NUM
         VIN<8> = "FB.AUD.ACC.ENTRY"
         VIN<11> = "FBADACC":"*":CARRIER.ID:"*":ASS.CODE:"*":CLIENT.ID:"*":ZIP.CODE
         ATT.CNT = DCOUNT(AUD.REC,@AM)
         FOR I = 1 TO ATT.CNT
            IF AUD.REC<I> # ORIG.AUD.REC<I> THEN
               VIN<3> = I
               IF DCOUNT(ORIG.AUD.REC<I>,@VM) GT 1 THEN
                  TMP = ORIG.AUD.REC<I>
                  CONVERT @VM TO @SVM IN TMP
                  VIN<4> = TMP
               END ELSE
                  VIN<4> = ORIG.AUD.REC<I>
               END
               IF DCOUNT(AUD.REC<I>,@VM) GT 1 THEN
                  TMP = AUD.REC<I>
                  CONVERT @VM TO @SVM IN TMP
                  VIN<5> = TMP
               END ELSE
                  VIN<5> = AUD.REC<I>
               END
               CALL UPD.AUD.LOG(VIN,VOUT)
            END
         NEXT I
      END
      * SOURCE.FILE = VIN<9>
      RETURN
* End GRB01
