$OPTIONS HEADER.EJECT
ERRMSG=''
*
$OPTIONS EXEC.EQ.PERF
$OPTIONS INFO.ABORT
*
* PROGRAM CARRIER.COMMODITY.RATER
*
* Front end query routine to input values to be used in calculating a carrier Commodity rate.
*
*  Originally for FedEx
*
* FREIGHT BILLING PACKAGE
*
* AUTHOR: N.C.G. Pratt
* DATE  :   August 2009

OPEN '','FB.COMMRATES.HDR' TO F.FB.COMMRATES.HDR ELSE STOP 'CANT OPEN FB.COMMRATES.HDR'

OPEN '','FB.COMMRATES.DTL' TO F.FB.COMMRATES.DTL ELSE STOP 'CANT OPEN FB.COMMRATES.DTL'

PROMPT''
PROG.NAME='CARRIER.COMMODITY.RATER'
PROG.DESC='Carrier Commodity Rater'
PACK.NAME='Freight Billing'
*
 UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'CARRIER.COMMODITY.RATER' ; UPL.VOUT = ''                    ;* NPR_UPL 04/22/2010
 CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/22/2010
CALL GET.USER(USER)

*************************************************
*

WEIGHT   = ''
EFF.DATE = ''
ORIG.ZIP = ''
DEST.ZIP = ''
ORIG.AIRPORT = ''
ORIG.AIRPORT = ''
RATE = ""

10 :
*
GOSUB BUILD.SCREEN.LAYOUT

ID.CARRIER = "00212"

ID.HDR = ID.CARRIER
READ HDR.REC FROM F.FB.COMMRATES.HDR, ID.HDR ELSE
   CALL ELINE("Carrier 00212 header record not set up")
   STOP
END
*

GET.ORIG.ZIP :

      BACK.FLAG = 0
      ZIP.LEN   = 5

      HELP = "Enter the Origination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                                                                     ; * Starting Zip Character Count
      VIN<2>=18                                                                 ; * Column For Input
      VOUT=''

      CALL FB.2.1.CSZ.NEW(VIN,VOUT,4,ORIG.ZIP,HELP,ZIP.LEN,BACK.FLAG,ORIG.CITY,ORIG.STATE)
      IF BACK.FLAG THEN
         STOP
      END
      ORIG.ZIP=OCONV(ORIG.ZIP,'MCU')
      IF HELP = 'S' ! HELP = '' THEN
         CRT SCR
         CALL AFS.SCR.HEAD(CO.ID,FILE.ID,PERIOD,PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,0)
      END
      IF ORIG.CITY # '' THEN
         ORIG.DESC = ORIG.CITY:', ':ORIG.STATE
      END ELSE
         ORIG.DESC = ORIG.STATE
      END

*         CRT SCR

      CRT @(18,4):ORIG.ZIP'L#6':' ':ORIG.DESC'L#25'

GET.DEST.ZIP :

      HELP = "Enter the Destination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                              ; * Starting Zip Character Count
      VIN<2>=18                          ; * Column For Input
      VOUT=''

      CALL FB.2.1.CSZ.NEW(VIN,VOUT,5,DEST.ZIP,HELP,ZIP.LEN,BACK.FLAG,DEST.CITY,DEST.STATE)
      IF BACK.FLAG THEN
         BACK.FLAG=''
         GO GET.ORIG.ZIP
      END
      DEST.ZIP=OCONV(DEST.ZIP,'MCU')
      IF HELP = 'S' ! HELP = '' THEN
         CRT SCR
         CALL AFS.SCR.HEAD(CO.ID,FILE.ID,PERIOD,PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,0)
         CRT @(18,4):ORIG.ZIP'L#6':' ':ORIG.DESC'L#25'
      END
      IF DEST.CITY # '' THEN
         DEST.DESC = DEST.CITY:', ':DEST.STATE
      END ELSE
         DEST.DESC = DEST.STATE
      END

*         CRT SCR

      CRT @(18,5):DEST.ZIP'L#6':' ':DEST.DESC'L#25'
      IF DEST.ZIP = ORIG.ZIP THEN
         CALL ELINE('Warning - Origin and destination zip are the same.')
         GOTO GET.DEST.ZIP
      END


*****************************************************************************************

GET.EFF.DATE :

      IF EFF.DATE # '' THEN
         MASK = EFF.DATE'D2.'
      END ELSE
         MASK = DATE()'D2.'
      END
      BACK.FLAG=0

      HELP = "Enter the Effective Date. [T]=Today [X]=Back to Destination Zip [EX]=Exit"
    
      CALL GEN.IN(18,7,MASK,'DATE',Q,0,8,'','',2,-8,7,0,QI,HELP,0,23)

      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE EFF.DATE NE "" & QI = ''
            Q = EFF.DATE
         CASE QI = 'T'
            Q = DATE()
         CASE QI = 'X'
            CRT @(18,7):@(-4):
            BACK.FLAG=1
            GOTO GET.DEST.ZIP
         CASE QI = 'EX'
            STOP
         CASE NOT( NUM(Q) )
            CALL ELINE("Invalid date selection")
            GOTO GET.EFF.DATE
      END CASE

      EFF.DATE = Q
      CRT @(18,7):EFF.DATE'D2/' "R#10"

      LOCATE EFF.DATE IN HDR.REC<1> SETTING POS THEN
         HDR.EFF.DATE = HDR.REC<1,POS>
      END ELSE
         N.DATES = DCOUNT(HDR.REC<1>,@VM)
         FND = '0'
         FOR DT = 1 TO N.DATES
            W.FROM.DT = HDR.REC<1,DT>
            W.TO.DT   = HDR.REC<2,DT>
            IF W.FROM.DT LE EFF.DATE THEN
               IF W.TO.DT = "" OR W.TO.DT GE EFF.DATE THEN
                  HDR.EFF.DATE = HDR.REC<1,DT>
                  FND = 1 ; DT = N.DATES
               END
            END
         NEXT DT

         IF NOT(FND) THEN
            CALL ELINE("Effective date not found on Carrier Header record")
            GOTO GET.EFF.DATE
         END
      END


      CRT @(68,7) : HDR.EFF.DATE'D2/' "R#10"

      GOSUB GET.DETAIL

      IF DTL.REC = "" THEN GOTO 10

      W.ORIG.AIRPORT = ORIG.AIRPORT.CD
      CONVERT @VM TO " " IN W.ORIG.AIRPORT
      W.DEST.AIRPORT = DEST.AIRPORT.CD
      CONVERT @VM TO " " IN W.DEST.AIRPORT

      CRT @(68,04) : W.ORIG.AIRPORT
      CRT @(68,05) : W.DEST.AIRPORT

*****************************************************************************************

GET.WEIGHT :

         BACK.FLAG = 0
         HELP = 'Enter the shipment Weight'
         REQ = 0

         IF WEIGHT # '' THEN
            MASK = WEIGHT
         END ELSE
            MASK = ""
         END         

         CALL GEN.IN(18,8,WEIGHT'R#9','',Q,REQ,8,'','',2,-9,8,0,QI,HELP,0,23)

         QI = OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI = 'X'
               CRT @(18,8):'       ':
               BACK.FLAG = 1
               GOTO GET.EFF.DATE
            CASE QI = 'EX'
               STOP
            CASE QI = ''
               Q = WEIGHT
            CASE NUM(QI)
               IF QI LT "1" THEN
                  CALL ELINE("Rates available for 1 lbs and up - RETURN/ENTER to continue")
                  QI = "1.00"
               END
               Q = QI
            CASE 1
               CALL ELINE("Invalid weight selection")
               GOTO GET.WEIGHT
         END CASE

         WT.TEST = Q

         IF NUM(WT.TEST) THEN
            NULL
         END ELSE
            WT.TEST = "0" ; * Prevent non numeric data error
         END

         IF NUM(WT.TEST) AND WT.TEST GT "0" THEN
            IF WT.TEST LT "1" THEN
               CALL ELINE("Rates available for 1 lb. and up only!!")
               GOTO GET.WEIGHT
            END
         END ELSE
            CALL ELINE("Invalid weight (":WT.TEST:") -- Weight Should be a positive value!!")
            GOTO GET.WEIGHT
         END

         WEIGHT = OCONV(Q*100,"MR2")
         CRT @(18,8):OCONV(Q*100,"MR2,") "R#10"

***         GOSUB GET.RATE

         VIN = '' ; VOUT = '' ; ERRORS = ''

         VIN    = ID.CARRIER
         VIN<2> = ORIG.ZIP
         VIN<3> = DEST.ZIP
         VIN<4> = EFF.DATE
         VIN<5> = WEIGHT
         VIN<6> = HDR.EFF.DATE

         CALL CALC.COMMODITY.RATE(VIN,VOUT,DTL.REC,ERRORS)

         IF ERRORS NE "" THEN
            CALL ELINE(ERRORS)
         END ELSE
            RATE.TO.USE   = VOUT<1>
            AMOUNT.TO.USE = VOUT<2>
            WGHT.DEFICIT  = VOUT<3>
            GOSUB DISP.RATE
            CALL ELINE("")
         END

GOTO 10
*
GET.DETAIL :

   ID.DTL = ID.CARRIER:"*":HDR.EFF.DATE:"*":ORIG.ZIP:"*":DEST.ZIP

   READ DTL.REC FROM F.FB.COMMRATES.DTL, ID.DTL ELSE 
      DTL.REC = ""
      CALL ELINE("Rate record not found")
      RETURN
   END

   WEIGHT.STRING        = DTL.REC<1>
   W.RATE.ARRAY         = DTL.REC<2>
   ABS.MIN.CHARGE       = DTL.REC<3>
   ORIG.AIRPORT.CD      = DTL.REC<4>
   DEST.AIRPORT.CD      = DTL.REC<5>
   ALL.RATES            = DTL.REC<6>
   ALL.ABS.MIN.CHARGES  = DTL.REC<7>
   ORIG.FXF.DOCK        = DTL.REC<8>
   DEST.FXF.DOCK        = DTL.REC<9>
  
   RETURN

GET.RATE :

   CONVERT @SVM TO @AM IN W.RATE.ARRAY

   CONVERT @SVM TO @AM IN WEIGHT.STRING
   N.WTS1 = DCOUNT(WEIGHT.STRING,@AM)

   WT.POS1       = ""
   RATE          = ""
   NEXT.RATE     = ""
   AMOUNT1       = ""
   AMOUNT2       = ""
   WGHT.DEFICIT  = "0"
   RATE.TO.USE   = ""
   AMOUNT.TO.USE = ""

   LOCATE WEIGHT IN WEIGHT.STRING BY 'AR' SETTING WT.POS1 ELSE NULL

   IF WT.POS1 NE "" AND WT.POS1 LE N.WTS1 THEN
      RATE = W.RATE.ARRAY<WT.POS1>
      AMOUNT1 = (WEIGHT * RATE)/100      ;* Rates are per 100 weight
      RATE.TO.USE = RATE
      AMOUNT.TO.USE = AMOUNT1
   END

* DEBUG

   IF RATE NE "" THEN
      IF WT.POS1 LT N.WTS1 THEN
         NEXT.WEIGHT = WEIGHT.STRING<WT.POS1> + 1        
         NEXT.RATE   = W.RATE.ARRAY<WT.POS1 + 1>         
      END
   END

   IF NEXT.RATE NE "" THEN
      AMOUNT2 = (NEXT.WEIGHT * NEXT.RATE)/100      ;* Rates are per 100 weight
      WGHT.DEFICIT = NEXT.WEIGHT - WEIGHT
      IF AMOUNT2 LT AMOUNT1 AND WGHT.DEFICIT GT "0" THEN
         RATE.TO.USE = NEXT.RATE
         AMOUNT.TO.USE = AMOUNT2
      END
   END

   RETURN

DISP.RATE :

   MIN.STR = ""
   IF AMOUNT.TO.USE LT ABS.MIN.CHARGE THEN
      AMOUNT.TO.USE = ABS.MIN.CHARGE
      MIN.STR = "(Minimum Charge)"
   END

   IF WGHT.DEFICIT NE "0" THEN
      CRT @(50,08):"Deficit Weight  : ": WGHT.DEFICIT "R#10"
   END
   CRT @(18,09): OCONV(RATE.TO.USE,"MR2,") "R#10"
   CRT @(18,10): OCONV(AMOUNT.TO.USE,"MR2,") "R#10" :" ":MIN.STR


RETURN
*
*
BUILD.SCREEN.LAYOUT:
*
CRT @(-1)

CALL AFS.SCR.HEAD(CO.ID,FILE.ID,PERIOD,PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)

SCR = @(-1)
SCR  = @(0,03):"Carrier #       : 00212 Fedex Freight"
SCR := @(0,04):"Origination Zip : "
SCR := @(0,05):"Destination Zip : "
SCR := @(0,07):"Rate  Date      : "
SCR := @(0,08):"Weight          : "
SCR := @(0,09):"Rate            : "
SCR := @(0,10):"Quote Amount    : "


SCR := @(50,04):"Orig. Airport/s : "
SCR := @(50,05):"Dest. Airport/s : "
SCR := @(50,07):"Effective Date  : "
* SCR := @(50,08):"Deficit Weight  : "

CRT SCR
CALL AFS.SCR.HEAD(CO.ID,FILE.ID,PERIOD,PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,0)
*
RETURN
