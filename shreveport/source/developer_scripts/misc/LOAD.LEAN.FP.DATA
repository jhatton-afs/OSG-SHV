***************************************************
* Program name : LOAD.LEAN.FP.DATA
* Author       : David Friend
* Date written : May 09, 2023
* Library      : FBBP
* COPYRIGHT (C) 2023 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* Load client  invoices for carrier
*
* Last updated by afs (AFSLOGISTICS\gbino) at 07:32:26 on 06/27/2023.
*
* Start modification history

* End modification history.
*******************************************************

INITIALIZE.VARIABLES:*
      OTODAY=OCONV(DATE(),'D4/')
      OBDAY=OCONV(DATE()-6,'D4/')
      PROG.NAME='LOAD.LEAN.FP.DATA'
      PROG.DESC="Load invoices for carrier "
      PACK.NAME="FAP"
      CEOL=@(-4)
      CALL GET.USER.NEW(USER,CH.NUM)

      TB=CHAR(9)
      GOSUB OPEN.FILES
      READV OP.FLG FROM F.OP,USER,38 ELSE
         OP.FLG = "N"
      END
      IF OP.FLG # "Y" THEN
         CALL ELINE('UNAUTHORIZED ACCESS')
         STOP
      END
      RPT.SVC.PREFIX=CHAR(239):CHAR(187):CHAR(191)
      BAD.CARRIER.HDR='Carrier#''L#10 ':'Name''L#35 ':'Status''L#6'

      PREV.TEST=''
10:   *
      CALL AFS.SCR.HEAD(CO.ID, FILE.ID, '', PROG.NAME, PROG.DESC, PACK.NAME, CO.NAME, TIME.DATE, 1)
      CRT @(0,03):@(-3):
      CRT @(0,05):'Instructions for use BEFORE Continuing:'
      CRT @(0,06):' 1 This data load is for carrier FEDEX Freight 00212'
      CRT @(0,07):' 2 The file must be in the Text (Tab Delimited)(*.txt) format'
      CRT @(0,08):' 3 The file must be in the pre determined template layout already given '
      CRT @(0,09):" 4 The file must be in user's BILLDATA folder "

100:  HELP='Enter the File Name to process or [EX]it'
      CALL GEN.IN(0,3,'Enter File Name #########################','',Q,0,25,'','',1,-25,3,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')

      BEGIN CASE
         CASE QI='' ! QI='EX' ! QI='X'
            STOP
         CASE 1
            RAW.ID=QI
      END CASE
VERIFY.SELECTION:***
      HELP="X=Change. EX=Exit. ''=Continue."
      CALL GEN.IN(0,22,'Enter selection please. ------------','',Q,0,12,'','',0,-12,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='X'
            CRT @(0,19):@(-3):
            GOTO 100
         CASE QI='EX'
            STOP
         CASE QI=''
            NULL
         CASE 1
            CALL ELINE('Invalid entry. Must be [X], [EX], or <RTN>.')
            GOTO VERIFY.SELECTION
      END CASE

      FP.ID='REC_02451_':FIELD(OTODAY,'/',3):FIELD(OTODAY,'/',1):FIELD(OTODAY,'/',2):'.TXT'


START.PROCESSING.LOOP:*
      FP.ID = RAW.ID
      READ TEST FROM F.FP,FP.ID THEN
         GOSUB CHECK.FILE.FORMAT
         TEST.NVAL=DCOUNT(TEST,@AM)
      END ELSE
         CALL ELINE('File NOT Found ':RAW.ID)
         GO 10
      END
      BAD.CARRIER.LIST=''
READ.IMPORT.RECORD:*
      FP.ID = RAW.ID
      READ FP.REC FROM F.FP,FP.ID THEN

         FILE.DATE=FIELD(FP.ID,'-',3)
         PROC.DATE=ICONV(FILE.DATE[5,2]:'-':FILE.DATE[7,2]:'-':FILE.DATE[1,4],'D')
         FP.ORG=FP.REC
         FP.REC=CHANGE(FP.REC,CHAR(9),@VM)
         IF FP.REC[1,3]=RPT.SVC.PREFIX THEN
            LREC=LEN(FP.REC)
            FP.REC=FP.REC[4,LREC]
         END
         IMP.NATT=DCOUNT(FP.REC,@AM)
         FP.REC<1,74>='AFSProID'
         IMP.PER=''
         FOR IMP.ATT=1 TO IMP.NATT
            CALL PROG.BAR(22,IMP.ATT,IMP.NATT,IMP.PER)
            IF IMP.ATT=1 THEN GO NEXT.IMP.ATT

            FP.LINE=TRIM(FP.REC<IMP.ATT>)
            IF FP.LINE='' THEN GO NEXT.IMP.ATT
            IF FP.LINE=' ' THEN GO NEXT.IMP.ATT
 IF FP.LINE<1,1>=' ' THEN GO NEXT.IMP.ATT
 	 IF FP.LINE<1,1>='' THEN GO NEXT.IMP.ATT	
            IMP.REC=FP.LINE
            GOSUB DEFINE.IMPORT.FIELDS
            GOSUB READ.CLIENT.RECORD
            HIST.CLIENT=0
            FP.CLIENT=1
            GOSUB READ.CARRIER.RECORD
            GOSUB CREATE.ADDITIONAL.FIELDS
            GOSUB WRITE.FB.REC
NEXT.IMP.ATT:*
         NEXT IMP.ATT
         WRITE FP.ORG ON F.LHIST,'RAN_':FP.ID
         FP.REC=CHANGE(FP.REC,@VM,CHAR(9))
         DELETE F.FP,FP.ID
      END
NEXT.IMPORT:*

      STOP

*******************************************************
DEFINE.IMPORT.FIELDS:*
*******************************************************
      ImpSCAC='DDDN'
      ImpCarrierName=IMP.REC<1,2>
      ImpMode='LTL'
      ImpInvoice_ProNo=IMP.REC<1,7>
      ImpDirection=IMP.REC<1,6>
      ImpSenderName=IMP.REC<1,1>
      ImpSenderZip=IMP.REC<1,5>
      ImpSenderCity=IMP.REC<1,3>
      ImpSenderState=IMP.REC<1,4>
      ImpReceiverCity=IMP.REC<1,14>
      ImpReceiverZip=IMP.REC<1,16>
      ImpReceiverState=IMP.REC<1,15>
      TEMP.NUM = IMP.REC<1,18>
      TEMP.NUM = CHANGE(TEMP.NUM,',','')
      TEMP.NUM = CHANGE(TEMP.NUM,'"','')
      TEMP.NUM=TRIM(TEMP.NUM)
      ImpBilledWeight=ICONV(TEMP.NUM,'MR0')
      ImpReceiverName=IMP.REC<1,12>

      IF IMP.REC<1,11> # '' THEN
         ImpShipDate=ICONV(IMP.REC<1,11>[1,10],'D')
      END ELSE
         ImpShipDate=ICONV(IMP.REC<1,10>[1,10],'D')
      END

      ImpBOL_PONo=IMP.REC<1,8>

      TEST.NUM=IMP.REC<1,21>
      GOSUB CONVERT.NUMBER
      ImpGrossCharge=ICONV(TEST.NUM,'MR2,')

      TEST.NUM=IMP.REC<1,20>
      GOSUB CONVERT.NUMBER
      ImpFuel=ICONV(TEST.NUM,'MR2,')
      TEST.NUM=IMP.REC<1,19>
      GOSUB CONVERT.NUMBER
      ImpFreight=ICONV(TEST.NUM,'MR2,')

      RETURN
*******************************************************
READ.CLIENT.RECORD:*
*******************************************************
      CLIENT.ID='01630'
      **     CLIENT.ID=FP.ID[1,5]
      READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE CLIENT.REC=''

OPEN.CLIENT.FILES:*
      OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
         CALL OPEN.ABORT('FB.BILLS,':CLIENT.ID,PROG.NAME)
      END
      OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.HIST ELSE
         CALL OPEN.ABORT('FB.BILLS.HIST,':CLIENT.ID,PROG.NAME)
      END

      OPEN '','ZIP.DIV.XREF,':CLIENT.ID TO F.ZDX ELSE
         CALL OPEN.ABORT('ZIP.DIV.XREF,':CLIENT.ID,PROG.NAME)
      END
      RETURN
*******************************************************
READ.CARRIER.RECORD:*
*******************************************************
      CARRIER.SCAC=ImpSCAC
      READV CARRIER.ID FROM F.SCAC,ImpSCAC,1 ELSE CARRIER.ID=''
      IF CARRIER.ID='' AND ImpSCAC='SCLJ' THEN CARRIER.ID='27706'
      IF CARRIER.ID='' AND ImpSCAC='TNFK' THEN CARRIER.ID='23129'
      IF CARRIER.ID='' AND ImpSCAC='TQYL' THEN CARRIER.ID='16540'
      IF CARRIER.ID='' AND ImpSCAC='RSLS' THEN CARRIER.ID='11311'
      IF CARRIER.ID='' AND ImpSCAC='TMCD' THEN CARRIER.ID='04456'
      IF CARRIER.ID='' AND ImpSCAC='LGKK' THEN CARRIER.ID='30898'
      IF CARRIER.ID='' AND ImpSCAC='CHSL' THEN CARRIER.ID='10313'
      IF CARRIER.ID='' AND ImpSCAC='UPTS' THEN CARRIER.ID='00014'
      IF CARRIER.ID='' AND ImpSCAC='KHNN' THEN CARRIER.ID='31167'
      IF CARRIER.ID#'' THEN
         CARRIER.ID=CARRIER.ID'R%5'
      END ELSE
         CARRIER.ID=''
      END
      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE CARRIER.REC=''
      RETURN
*******************************************************
CREATE.ADDITIONAL.FIELDS:*
*******************************************************
      LCC.ARRAY=''
      BILL.DATE=ImpShipDate
      IN.OUT=ImpDirection[1,6]
      BEGIN CASE
         CASE IN.OUT = "PPD"
            IN.OUT = "O"
            **	CASE IN.OUT = "COL"
            ** 	IN.OUT = "I"
         CASE 1
            CALL ELINE('CHECK DIRECTION')
      END CASE

      ORIG.ZIP=ImpSenderZip
      IF NUM(ORIG.ZIP) AND LEN(ORIG.ZIP)>5 THEN
         ORIG.ZIP=ORIG.ZIP[1,5]
      END
      READV ORIG.COUNTRY.CD FROM F.ZIPS,ORIG.ZIP,3 ELSE ORIG.COUNTRY.CD=''
      DEST.ZIP=ImpReceiverZip
      IF NUM(DEST.ZIP) AND LEN(DEST.ZIP)>5 THEN
         DEST.ZIP=DEST.ZIP[1,5]
      END
      READV DEST.COUNTRY.CD FROM F.ZIPS,DEST.ZIP,3 ELSE DEST.COUNTRY.CD=''
      DIVISION=''

      IF DIVISION='' THEN
         BEGIN CASE
            CASE IN.OUT='I'
               READ ZDX.REC FROM F.ZDX,DEST.ZIP THEN
                  DIVISION=ZDX.REC<1,1>
               END
               IF DIVISION='' THEN
                  READ ZDX.REC FROM F.ZDX,ORIG.ZIP THEN
                     DIVISION=ZDX.REC<1,1>
                  END
               END
            CASE IN.OUT='O'
               READ ZDX.REC FROM F.ZDX,ORIG.ZIP THEN
                  DIVISION=ZDX.REC<1,1>
               END
               IF DIVISION='' THEN
                  READ ZDX.REC FROM F.ZDX,DEST.ZIP THEN
                     DIVISION=ZDX.REC<1,1>
                  END
               END
            CASE IN.OUT='T'
               READ ZDX.REC FROM F.ZDX,ORIG.ZIP THEN
                  DIVISION=ZDX.REC<1,1>
               END
               IF DIVISION='' THEN
                  READ ZDX.REC FROM F.ZDX,DEST.ZIP THEN
                     DIVISION=ZDX.REC<1,1>
                  END
               END
         END CASE
         IF DIVISION='' THEN DIVISION='99999'
      END
      IF CLIENT.ID='01630' THEN
         IF IN.OUT='O' THEN
            IF ImpSenderName = ImpReceiverName THEN
               EXP.CODE=DIVISION[3,3]:"-61035"
            END ELSE
               EXP.CODE=DIVISION[3,3]:"-61025"
            END
         END

         **    IF IN.OUT='I' THEN EXP.CODE='282000.7575'	

         **  IF IN.OUT='T' THEN EXP.CODE='282000.7575'
      END
      WEIGHT=ImpBilledWeight
      CARRIER.CHG=ImpGrossCharge
      ACTUAL.CHG=ImpGrossCharge
      VAR.ARR=''

      CHECK.AMT=''
      CHECK.NUM=''
      CHECK.DATE=''
      BOL=ImpBOL_PONo
      VC.ID=ImpReceiverName
      ZIP.ARR=''
      MILEAGE=0

      BEGIN CASE
         CASE ImpMode='LTL' ; T.MODE.BY.WGT=1
         CASE ImpMode='Rail' ; T.MODE.BY.WGT=2
         CASE ImpMode='Courier' ; T.MODE.BY.WGT=4
         CASE ImpMode='Truckload' ; T.MODE.BY.WGT=6
         CASE ImpMode='Ocean' ; T.MODE.BY.WGT=8
         CASE ImpMode='Misc' ; T.MODE.BY.WGT=11
         CASE ImpMode='ReMail' ; T.MODE.BY.WGT=11
         CASE ImpMode='Air Freight' ; T.MODE.BY.WGT=12
         CASE ImpMode='Fleet' ; T.MODE.BY.WGT=15
         CASE ImpMode='Intermodal' ; T.MODE.BY.WGT=18
         CASE 1 ; T.MODE.BY.WGT=CARRIER.REC<44>
      END CASE
      MISROUTE.ARRAY=''
      DISC.PERC=''
      ORIG.STATE=ImpSenderState
      DEST.STATE=ImpReceiverState
      ORIG.CITY=ImpSenderCity
      DEST.CITY=ImpReceiverCity
      ZIP.ARR<1,1>=ORIG.ZIP
      ZIP.ARR<2,1>=ORIG.CITY
      ZIP.ARR<3,1>=ORIG.STATE
      ZIP.ARR<1,2>=DEST.ZIP
      ZIP.ARR<2,2>=DEST.CITY
      ZIP.ARR<3,2>=DEST.STATE
      DUE.DATE=''
      E.DATE=ImpShipDate
      DTAB=''
      DTAB<1>=EXP.CODE
      DTAB<3>=ACTUAL.CHG
      BANK.ID=CLIENT.REC<81>
      VERIFIED=''
      BILL.STATUS='O'
      INV.NUM=''
      OVERRIDE.FIELD=''
      OVERRIDE.OPERATOR=''
      OVERRIDE.INFO=''
      OVERRIDE.STATUS=''
      FLAT.RATE=''
      MIN.CHG=''
      AIR.PIECES=''
      DTL.CHRG.CODES=''
      DTL.CHRG.AMTS=''
      IF ImpFreight+0#0 THEN
         DTL.CHRG.CODES<1,-1>='FRT'
         DTL.CHRG.AMTS<1,-1>=ImpFreight
      END

      IF ImpFuel+0#0 THEN
         DTL.CHRG.CODES<1,-1>='FSC'
         DTL.CHRG.AMTS<1,-1>=ImpFuel
      END

      VERSION='0'
      DUP.FLAG=0                         ; * JMK06
      BD.FLAG=0
      SLASH.FLAG=0                       ; * JMK06
      SLASH.CNT=0                        ; * JMK06
      REJECT.REASONS=''
      PRO=ImpInvoice_ProNo
      PRO=TRIM(PRO)
      BEGIN CASE

         CASE CARRIER.ID='39726'
            *    PRO=PRO[1,5]:'-':PRO[6,2]

      END CASE
      SERVICE.LEVEL=''
      MISROUTE.AMOUNT=''
      MISROUTE.CARRIER=''
      CLASSES=''
      WEIGHTS=''

      ADDRESS.CORRECTION.CHARGE=''

      HANDLING.UNITS=''
      FB.NOTE=''

      EDI.PPR=''
      RETURN
*******************************************************
WRITE.FB.REC:*
*******************************************************
      PRO.ID=CARRIER.ID:'*':PRO:'*':VERSION
      IF BD.FLAG THEN
         PRO.ID=CARRIER.ID:'*':PRO:'BD*':VERSION
      END
      IF SLASH.FLAG AND SLASH.CNT#"0" THEN         ; * JMK06
         PRO.ID=CARRIER.ID:'*':PRO:'/':SLASH.CNT:'*':VERSION           ; * JMK06
      END                                ; * JMK06
      READ TEST.REC FROM F.HIST,PRO.ID ELSE TEST.REC=''
      READ TEST.REC FROM F.CRX,PRO.ID ELSE TEST.REC=''
      IF TEST.REC#'' AND HIST.CLIENT=1 THEN RETURN
      IF TEST.REC#'' THEN                ; * JMK06
         IF TEST.REC<8>=ACTUAL.CHG THEN
            RETURN
         END
         SLASH.FLAG=1                    ; * JMK06
         SLASH.CNT+=1                    ; * JMK06

         GO WRITE.FB.REC                 ; * JMK06
      END                                ; * JMK06
      T.DATE=DATE()
      T.TIME=TIME()
      USER='CLIENT-IMPORT'
      PRO.REC = ''
      PRO.REC<1> = BILL.DATE
      PRO.REC<2> = IN.OUT

      PRO.REC<3>=ORIG.ZIP
      PRO.REC<4>=DEST.ZIP

      PRO.REC<5> = EXP.CODE
      PRO.REC<6> = WEIGHT
      PRO.REC<7> = CARRIER.CHG
      PRO.REC<8> = ACTUAL.CHG
      PRO.REC<9> = DIVISION
      PRO.REC<10> = 0-VAR.ARR<1>
      PRO.REC<11> = 0-VAR.ARR<2>
      PRO.REC<12> = 0-VAR.ARR<3>
      PRO.REC<13> = CHECK.AMT
      PRO.REC<14> = CHECK.NUM
      PRO.REC<15> = CHECK.DATE

      PRO.REC<17> = VC.ID
      PRO.REC<18> = ZIP.ARR<1>
      NUM.ZIPS = DCOUNT(PRO.REC<18>, @VM)
      IF NUM.ZIPS > 1 THEN
         DEL PRO.REC<18,NUM.ZIPS>
         DEL PRO.REC<18,1>
      END

      PRO.REC<20> = CARRIER.ID
      PRO.REC<21> = T.MODE.BY.WGT
      IF PRO.REC<21>#'1' AND PRO.REC<21>#'6' THEN PRO.REC<19>=''       ; * JMK162
      IF PRO[LEN(PRO)-1,2]='AD' THEN PRO.REC<19>=''          ; * JMK162
      IF PRO[LEN(PRO)-1,2]='BD' THEN PRO.REC<19>=''          ; * JMK162
      PRO.REC<22> = MISROUTE.ARRAY<1>
      PRO.REC<23> = MISROUTE.ARRAY<2>
      PRO.REC<24> = DISC.PERC

      PRO.REC<25>=ORIG.STATE
      PRO.REC<26>=DEST.STATE
      PRO.REC<27>=ORIG.CITY
      PRO.REC<28>=DEST.CITY

      VAR.CODE = ''

      IF VAR.ARR<1>'R0' # 0 ! VAR.ARR<4>'R0' NE 0 THEN
         VAR.CODE = VAR.CODE:'D'
      END
      IF VAR.ARR<2>'R0' # 0 ! VAR.ARR<5>'R0' NE 0 THEN
         VAR.CODE = VAR.CODE:'O'
      END
      IF VAR.ARR<3>'R0' # 0 ! VAR.ARR<6>'R0' NE 0 THEN
         VAR.CODE = VAR.CODE:'C'
      END
      PRO.REC<29> = VAR.CODE
      PRO.REC<30> = E.DATE
      PRO.REC<31> = DTAB<1>
      PRO.REC<33> = DTAB<3>
      PRO.REC<34> = 0-VAR.ARR<4>
      PRO.REC<35> = 0-VAR.ARR<5>
      PRO.REC<36> = 0-VAR.ARR<6>
      IF HIST.CLIENT THEN
         PRO.REC<37> = PROC.DATE
      END
      PRO.REC<38> = DUE.DATE
      PRO.REC<39> = 'O'
      PRO.REC<40> = BANK.ID
      PRO.REC<45> = VERIFIED
      PRO.REC<53> = USER
      PRO.REC<54> = USER
      IF EDI.PPR='EDI' THEN
         PRO.REC<53>='EDI:':USER
         PRO.REC<88>=CLIENT.ID:'*':PRO.ID
      END
      PRO.REC<68> = BILL.STATUS
      FRT.ARRAY=''                       ; * JMK14
      MIS.ARRAY=''                       ; * JMK14
      DTL.OUT=''                         ; * JMK17
      DTL.OUT<40>=DTL.CHRG.CODES         ; * JMK17
      DTL.OUT<44>=DTL.CHRG.AMTS          ; * JMK17
      GOSUB RECALC.FB.DETAILS            ; * JMK18
      PRO.REC<94>=OCONV(INV.NUM,'MCU')
      PRO.REC<96>=OVERRIDE.STATUS
      PRO.REC<116>=OVERRIDE.FIELD
      PRO.REC<117>=OVERRIDE.OPERATOR
      PRO.REC<118>=OVERRIDE.INFO
      PRO.REC<119>=FLAT.RATE
      IF VERSION > 0 THEN PRO.REC<37>=''
      PRO.REC<41,1> = VAR.ARR<7>
      PRO.REC<41,2> = VAR.ARR<8>
      PRO.REC<41,3> = VAR.ARR<9>
      PRO.REC<46> = MIN.CHG
      CALC = 0
      PRO.REC<84,-1>=USER                ; * Update Each Time bill is Filed
      PRO.REC<85,-1>=T.TIME              ; * Update Each Time bill is Filed   ;*NPR06
      PRO.REC<86,-1>=DATE()              ; * Update Each Time bill is Filed
      IF PRO.REC<53> = '' THEN PRO.REC<53> = USER
      PRO.REC<55> = LEN(PRO.REC)-LEN(USER)
      PRO.REC<59> = REJECT.REASONS<1>
      PRO.REC<60> = REJECT.REASONS<2>
      PRO.REC<61> = REJECT.REASONS<3>
      PRO.REC<62> = REJECT.REASONS<4>
      PRO.REC<65> = SERVICE.LEVEL
      PRO.REC<63> = MISROUTE.AMOUNT
      PRO.REC<69> = MISROUTE.CARRIER
      PRO.REC<183> = BOL
      PRO.REC<189>=MISROUTE.AMOUNT       ; * JMK126
      PRO.REC<190>=MISROUTE.CARRIER      ; * JMK126
      IF VERSION GT 0 THEN PRO.REC<39> = 'O'
      PRO.REC<100>= VC.ID                ; * Item ID for Cust.Vend
      PRO.REC<74> = CLASSES
      PRO.REC<75> = WEIGHTS
      MISC.CHG.POS=DCOUNT(CLASSES<1>,@VM)          ; * Find out how many
      PRO.REC<120>=ZIP.ARR<1>            ; * MV Zips
      PRO.REC<121>=ZIP.ARR<2>            ; * MV Cities
      PRO.REC<122>=ZIP.ARR<3>            ; * MV States
      PRO.REC<149>=ZIP.ARR<7>            ; * MV Miles JMK12
      PRO.REC<123>=ADDRESS.CORRECTION.CHARGE       ; * For United Parcel Service
                                         ; * NPR057
      IF DTL.CHRG.CODES #'' THEN         ; * JMK81  ; * NPR031
         PRO.REC<151>=DTL.CHRG.CODES     ; * JMK12
         PRO.REC<152>=DTL.CHRG.AMTS      ; * JMK12
         FRT.ARRAY=''                    ; * JMK149
         MIS.ARRAY=''                    ; * JMK149
         GOSUB RECALC.FB.DETAILS         ; * JMK149
      END                                ; * JMK81
      IF FRT.ARRAY<1>='' THEN            ; * JMK81
         IF DTL.CHRG.CODES#'' THEN       ; * JMK81
            DTL.OUT<40>=DTL.CHRG.CODES   ; * JMK81
            DTL.OUT<44>=DTL.CHRG.AMTS    ; * JMK81
            GOSUB RECALC.FB.DETAILS      ; * JMK19
         END                             ; * JMK81
      END                                ; * JMK19
      FOR ATT=1 TO 6                     ; * JMK14
         PRO.REC<152+ATT>=FRT.ARRAY<ATT>           ; * JMK14
         PRO.REC<158+ATT>=MIS.ARRAY<ATT>           ; * JMK14
      NEXT ATT                           ; * JMK14
      PRO.REC<202>=MISROUTE.ARRAY<3>     ; * JMK62
      PRO.REC<213>=FB.NOTE               ; * JMK111
      PRO.REC<217>=VAR.ARR<10>           ; * JMK154 - DISCOUNT CLASS
      PRO.REC<217>=VAR.ARR<11>           ; * JMK154 - OVERCHARGE CLASS WILL REPLACE ANY DISCOUNT CLASS
      PRO.REC<221>=''                    ; * JMK227
      PRO.REC<224>=LCC.ARRAY<7>          ; * JMK159
      PRO.REC<222>=ORIG.COUNTRY.CD
      PRO.REC<223>=DEST.COUNTRY.CD
      PRO.REC<235>=HANDLING.UNITS        ; * NPR35
***      DEBUG
      WRITE PRO.REC ON F.HIST,PRO.ID
      IF FP.CLIENT THEN
         WRITE PRO.REC ON F.BILLS,PRO.ID
      END
      FP.REC<IMP.ATT,74>=PRO.ID
*
* Update Fedex invoice file
*
      IF VERSION=0 THEN
         IF PRO.REC<94>#'' THEN
            READ DINV.XREF FROM F.INV.XREF,PRO.REC<94> ELSE DINV.XREF=''
            LOCATE PRO.ID IN DINV.XREF BY 'AR' SETTING INV.POS ELSE
               INS PRO.ID BEFORE DINV.XREF<INV.POS>
               WRITE DINV.XREF ON F.INV.XREF,PRO.REC<94>
            END
         END
      END
*
* Update freight bill cross reference (skeletal) record
*

      REC = ''
      REC<1> = CLIENT.ID
      REC<2> = BILL.DATE
      REC<7> = PRO.REC<7>
      REC<8> = PRO.REC<8>
      REC<10> = PRO.REC<10>
      REC<11> = PRO.REC<11>
      REC<12> = PRO.REC<12>
      REC<30> = PRO.REC<30>
      REC<37> = PRO.REC<37>
      REC<39> = PRO.REC<39>
      REC<41> = PRO.REC<41>
      REC<53> = PRO.REC<53>
      REC<54> = PRO.REC<54>
      REC<55> = PRO.REC<55>
      REC<63> = PRO.REC<63>

      WRITE REC ON F.CRX,PRO.ID

      RETURN
*******************************************************
RECALC.FB.DETAILS:*
*******************************************************
      NVAL=DCOUNT(DTL.OUT<40>,@VM)       ; * JMK14
      FOR VAL=1 TO NVAL                  ; * JMK14
         TRAN.TYPE=DTL.OUT<40,VAL>       ; * JMK14
         BEGIN CASE                      ; * JMK14
            CASE TRAN.TYPE='FRT' OR TRAN.TYPE = 1 OR TRAN.TYPE = 2     ; * JMK14  ;* NPR031
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK14
               FOR ATT=1 TO 6            ; * JMK14
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK14
               NEXT ATT                  ; * JMK14
            CASE TRAN.TYPE='MIN'         ; * JMK14
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK14
               FOR ATT=1 TO 6            ; * JMK14
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK14
               NEXT ATT                  ; * JMK14
            CASE TRAN.TYPE='DEF'         ; * JMK14
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK14
               FOR ATT=1 TO 6            ; * JMK14
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK14
               NEXT ATT                  ; * JMK14
            CASE TRAN.TYPE='BASE'        ; * JMK81
               NXT.VAL=DCOUNT(FRT.ARRAY<1>,@VM)+1  ; * JMK81
               FOR ATT=1 TO 6            ; * JMK81
                  FRT.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>           ; * JMK81
               NEXT ATT                  ; * JMK81
            CASE 1                       ; * JMK14
               LOCATE(TRAN.TYPE,MIS.ARRAY,1;MPOS) THEN       ; * JMK14
                  FOR ATT=5 TO 6         ; * JMK14
                     IF NUM(DTL.OUT<39+ATT,VAL>) THEN        ; * JMK14
                        MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0     ; * JMK14
                     END                 ; * JMK14
                  NEXT ATT               ; * JMK14
               END ELSE                  ; * JMK14
                  NXT.VAL=DCOUNT(MIS.ARRAY<1>,@VM)+1         ; * JMK14
                  FOR ATT=1 TO 4         ; * JMK14
                     MIS.ARRAY<ATT,NXT.VAL>=DTL.OUT<39+ATT,VAL>        ; * JMK14
                  NEXT ATT               ; * JMK14
                  FOR ATT=5 TO 6         ; * JMK14
                     IF NUM(DTL.OUT<39+ATT,VAL>) THEN        ; * JMK14
                        MIS.ARRAY<ATT,MPOS>+=DTL.OUT<39+ATT,VAL>+0     ; * JMK14
                     END                 ; * JMK14
                  NEXT ATT               ; * JMK14
               END                       ; * JMK14
         END CASE                        ; * JMK14
      NEXT VAL                           ; * JMK14
      RETURN
*******************************************************
CONVERT.NUMBER:*
*******************************************************
      TEST.NUM=CHANGE(TEST.NUM,'($','-')
      TEST.NUM=CHANGE(TEST.NUM,')','')
      TEST.NUM=CHANGE(TEST.NUM,'$','')
      TEST.NUM=CHANGE(TEST.NUM,'"','')
      TEST.NUM=CHANGE(TEST.NUM,',','')
      RETURN
**********************************************************************
CHECK.FILE.FORMAT:
**********************************************************************
      FORMAT.FAIL = 0
      COLUMN.MISMATCH = ''

      CK.STR2 ="ORIGNAME	ORIGADDR1	ORIGCITY	ORIGPROV	ORIGPC	FREIGHT_TERMS	BILL_NUMBER	BOL	STMT_NUM	STMT_DATE	ACTUAL_PICKUP	DESTNAME	DESTADDR1	DESTCITY	DESTPROV	DESTPC	PIECES	WEIGHT	CHARGES	FSC	TOTAL_CHARGES"

      IF USER = 'GBINO' THEN DEBUG
      FIELD.CNT = DCOUNT(CK.STR2,TB)
      FIELD.CNT2 = DCOUNT(TEST<1>,TB)
      CONVERT TB TO @AM IN CK.STR2
      CONVERT TB TO @AM IN TEST<1>
      FOR I = 1 TO FIELD.CNT
         IF TEST<I> # CK.STR2<I> THEN
            FORMAT.FAIL = 1
            IF COLUMN.MISMATCH = '' THEN
               COLUMN.MISMATCH = I
            END ELSE
               COLUMN.MISMATCH = COLUMN.MISMATCH:",":I
            END
         END
      NEXT I

      IF FORMAT.FAIL THEN
         MVIN=''
         SUBJ='Carrier posting file  failed format validation'
         TEXT=USER:' attempted to import the Data file '
         TEXT<1,-1>='which appears to have invalid format. See Columns ':COLUMN.MISMATCH
         TEXT<1,-1>='on ':DATE()'D2/':' ':OCONV(TIME(),'MTHS')
         TEXT<1,-1>=' '
         TEXT<1,-1>='File ':FP.ID
         TEXT<1,-1>=' '
         MVIN=''
         MVIN<1> = USER:'@afs.net'
         MVIN<2,-1>='DFriend@afs.net'
         MVIN<2,-1>='gbino@afs.net'
         MVIN<4>='AFS'
         MVIN<5>=SUBJ
         MVIN<6>=TEXT
         CALL SENDMAIL(MVIN,MVOUT)
         CALL ELINE('Carrier invoice file failed validation check. Hit return to continue')
      END ELSE
         RETURN
      END
      STOP
*******************************************************
OPEN.FILES:*
*******************************************************
      OPEN '','BILLDATA.':USER TO F.FP ELSE
         CALL OPEN.ABORT('BILLDATA',PROG.NAME)
      END
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','FB.BILLS.CRX' TO F.CRX ELSE
         CALL OPEN.ABORT('FB.BILLS.CRX',PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS ELSE
         CALL OPEN.ABORT('ZIPS.CODES',PROG.NAME)
      END
      OPEN '','FED.INV.XREF' TO F.INV.XREF ELSE
         CALL OPEN.ABORT("FED.INV.XREF",PROG.NAME)
      END
      OPEN '','EDI.CAR.ACNT.XREF' TO F.ECAX ELSE
         CALL OPEN.ABORT("EDI.CAR.ACNT.XREF",PROG.NAME)
      END
      OPEN '','SCAC.XREF' TO F.SCAC ELSE
         CALL OPEN.ABORT("SCAC.XREF",PROG.NAME)
      END
      OPEN '','OPERATOR' TO F.OP ELSE CALL OPEN.ABORT("OPERATOR",PROG.NAME)
      OPEN '','VIRGINIA.TILE.HISTORY' TO F.LHIST ELSE
         CALL OPEN.ABORT('VIRGINA.TILE.HISTORY',PROG.NAME)
      END
      RETURN
   END
