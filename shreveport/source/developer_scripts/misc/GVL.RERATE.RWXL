      SUBROUTINE RWXL(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)
******************************************************************************
*
* FREIGHT BILLING PACKAGE
*
* AUTHOR:      STEVE BARBEE
* DATE:        AUGUST 2013
* DESCRIPTION: THIS PROGRAM WILL SUBMIT A TEXT FILE TO THE RateWareXL
*              WEB-SERVICE TO RATE A BILL AND EXTRACT THE RESULTS
*
* DIN - Data Sent In to Be Processed
* DOUT - Data Returned that was processed (Answers)
* NOTE:  On Mode READ DIN MUST BE SUPPLIED for DOUT to be Created!
*
* THIS PROGRAM IS A PROPRIETARY PRODUCT OF AUTOMATED FREIGHT SYSTEMS
* AND MAY NOT BE USED, COPIED OR MODIFIED WITHOUT THE EXPRESS
* WRITTEN CONSENT OF SAME.
*
************************************************************************
* 082913 - JMK01 - Add TIME.LINE variable to track 6 points of timing for activities
* 110714 - JMK02 - CHANGE ERROR REPORTING TO CORRECT SOURCE
* 111214 - JMK03 - SysAid#12868 - Portal not working internaly and externaly for client: Springs Windows Fashion
* 111314 - JMK04 - SysAid#13570 - The error that was resolved on ticket #13489 is happening again
* 082114 - SWB01 - SysAid# 19516 - Handle Czarlite/LITECZ needing to use
*                  RWS most of the time and RWXL some of the time
* 072717 - NKH01 - ME# 5494 Modified email handling of errors
************************************************************************
*
*
* Initialize variables
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE XML.H
      COMMON PROG.PARAMS(24)
      EQU CH.NUM TO PROG.PARAMS(1)
      EQU USER TO PROG.PARAMS(2)
      EQU SERVER.NAME TO PROG.PARAMS(3)
****      CALL CHANNEL(CH.NUM)
      CRLF=CHAR(13):CHAR(10)
      CALL GET.USER.NEW(USER,CH.NUM)
      VOUT=''
      DOUT=''
      LINE.OUT=''
      TIME.LINE=''                       ; * JMK26
      TIME.LINE<1,1,1>=TIME()            ; * JMK26 ; * START TIME
      PROMPT ''
      NULL.STRING = ''
      REQ.PFX.REC = SPACE(10)            ; * 10 Character Long
      REQ.HDR.REC = SPACE(104)           ; * 104 Characters Long
      REQ.DDSC.REC = SPACE(50)           ; * 50 Characters Long Spaces Unless Used
      REQ.IDSC.REC = SPACE(50)           ; * 50 Characters Long Spaces Unless Used
      REQ.DTL.REC = ""                   ; * 9 Characters Long Up To 20 Di_seqments Can Be Used
      PROG.NAME='RWXL'
      DTL.CNT=0
      ERROR.MODE='F'
      RATE.MODE='1'
      EMAIL.SAVE = ''                    ; * NKH01
      SEND.EMAIL = 1                     ; * NKH01
      TARIFF.LIST=''
      NO.CLASS.FLG = 0
     

      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'RWXL' ; UPL.VOUT = ''
  **    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
 **     CALL UPD.RATE.ACTIVITY(UPL.VIN,UPL.VOUT)

      SMC.WEB.LICENSE.KEY = 'btDW617cPhbi'
      SMC.WEB.PASSWORD = 'xc5qgtVs'
      SMC.WEB.USERNAME = 'bfranklin@afs.net'

      DETAILS.ELEMENT = '<LTLResponseDetail>'
      LAST.ELEMENT.NAME = 'weightBreak_Discount_9'

      RTN.HDR.REC = SPACE(168)
      RTN.DTL.REC = ''
      SMC.ERROR.TABLE = ''
      SMC.POST.ERROR.CNT = ''
      MAX.SMC.POST.ERROR.TRYS = 3
      LOGFILE = "RWXLP.LOG"
      READ RW.DAT FROM F.TABLES,"RWXL" ELSE RW.DAT = ""
      PRO.LOG = RW.DAT<1>                ; * create log file
      CAP.REJECTS = RW.DAT<2>            ; * capture rejects
      TEST.EXAMPLE = RW.DAT<3>           ; * use test file for input in RWXL.T
      URL.TO.USE = RW.DAT<4>
      URL1 = RW.DAT<5>
      URL2 = RW.DAT<6>
      URL3 = RW.DAT<7>
      URL4 = RW.DAT<8>
      IF PRO.LOG = "Y" THEN
         LOG.RET = PROTOCOLLOGGING(LOGFILE,"ON",10)
      END
      TESTING = 0
      TESTING.URL = 0
      IF TESTING.URL THEN
         URL = "http://demo.smc3.com/AdminManager/services/RateWareXL"
      END ELSE
         URL = "http://applications-atl.smc3.com/AdminManager/services/RateWareXL"

      END
      BEGIN CASE
         CASE URL.TO.USE = 1
            URL = URL1
         CASE URL.TO.USE = 2
            URL = URL2
         CASE URL.TO.USE = 3
            URL = URL3
         CASE URL.TO.USE = 4
            URL = URL4
      END CASE
     
      SoapAction = 'http://www.w3.org/2001/XMLSchema-instance'
      SoapAction = ""
      NIL.STRING = ' xsi:nil="true" xmlns:xsi="':SoapAction:'"/>'
      RESULTS.DTL.RAW = ''
      RESULTS.DTL = ''
      RESULTS.HDR = ''
      EMAIL.OUT=''
      EMAIL.OUT<1,-1>='HelpDesk@afs.net'
      EMAIL.OUT<2,-1>='david@afs.net'
      EMAIL.OUT<2,-1> = 'nmeddaugh@afs.net'
      EMAIL.OUT<4>='FBBP_RWXL@afs.net'
      EMAIL.OUT<5>='Error while trying trying to access SMC Web-Service Rating Engine.'
      GOSUB LOAD.SUB.ZIP
      ST.TIME = TIME()
      TIMEOUT = 10000

      Ret = setHTTPDefault( "BUFSIZE" , 16384 )
******       Ret = setHTTPDefault( "VERSION" , "1.0" )    ; * required with this webservice
      Ret = setHTTPDefault( "VERSION" , "1.1" )    ; * required with this webservice
******      Ret = setHTTPDefault("HEADERS","Connection":@VM:"close")
************************************************************************
OPEN.SOAP.CONNECTION:
************************************************************************
      MAX.TRIES = 5
      ATTEMPTS = 0
      LOOP
         ATTEMPTS = ATTEMPTS + 1
         START.FUNCTION.TIME = TIME()
         SOAP.RET = SoapCreateRequest(URL , SoapAction , SoapReq)
      UNTIL SOAP.RET = 0 OR ATTEMPTS > MAX.TRIES DO
         IF SOAP.RET <> 0 THEN
            FATAL.ERROR.SUBJ = 'Cannot connect to SMC web-service'
            EMAIL.OUT<6>='FBBP RWXL could not connect for user ':USER:' on ':OCONV(DATE(),'D2/'):' at ':OCONV(TIME(),'MTHS'):'.'
            EMAIL.OUT<6>:='  Please confirm rating engine servers are working correctly.'
            GOSUB REPORT.FATAL.ERROR
            GO 9999
         END
      REPEAT

      MODE=VIN<1>
      MAX.DISC.WEIGHT=VIN<2>
      CLIENT=VIN<3>
      CARRIER=VIN<4>
      RATE.TYPE=VIN<5>
      RATE.TYPE=VIN<5>
     
      CLIENT.NAME=''
      CARRIER.NAME=''
*
* Create TDIN (Multi-Lines for Weights > MAX.DISC.WEIGHT)
*
      BILLS=DCOUNT(DIN,@AM)
      TDIN=''                            ; * RWXL DIN
* <1,10> = Attribute of DIN bill Belongs To
* <1,11> = Value of DIN bill Belongs To
* <1,12> = Y-Special Calculations, N-Report Bill As Stated
      FOR BC = 1 TO BILLS
         LINE=DIN<BC>
         BILL.WEIGHT=SUM(LINE<1,5>)
         IF BILL.WEIGHT > MAX.DISC.WEIGHT THEN
            TEMP.LINE=LINE               ; * To Save Orig, Dest, Tariff, Eff Date, Factor
            DET.TIMES=DCOUNT(LINE<1,4>,@SVM)       ; * Number of Classes
            FOR DET = 1 TO DET.TIMES
               TEMP.LINE<1,4>=LINE<1,4,DET>        ; * Class
               TEMP.LINE<1,5>=MAX.DISC.WEIGHT
               TEMP.LINE<1,10>=BC        ; * Attribute of DIN Source
               TEMP.LINE<1,11>=DET       ; * Value of DIN Source
               TEMP.LINE<1,12>='Y'       ; * Perform the Weight * Rate Extension
               TDIN<-1>=TEMP.LINE
            NEXT DET
         END ELSE
            LINE<1,10>=BC                ; * Attribute of DIN that this bill comes from
            LINE<1,12>='N'               ; * Don't Perform the Weight * Rate Extension
            TDIN<-1>=LINE
         END
      NEXT BC

* Build Record to submit
      BILLS=DCOUNT(DIN,@AM)
      REQ.ARRAY=''
      RTN.ARRAY=''
      LINE.OUT=''
      FOR BC = 1 TO BILLS
         BILL=DIN<BC>
         PRO=BILL<1,1>
         ORIG.ZIP=VIN<3>
         LOCATE ORIG.ZIP IN CHK.ZIP<1> SETTING OZPOS THEN
            ORIG.ZIP=SUB.ZIP<1,OZPOS>
         END
         ORIG.ST=''
         ORIG.CITY=''
         DEST.ZIP=VIN<4>
         LOCATE DEST.ZIP IN CHK.ZIP<1> SETTING DZPOS THEN
            DEST.ZIP=SUB.ZIP<1,DZPOS>
         END
         DEST.ST=''
         DEST.CITY=''
         ORIG.CNTRY = ''
         DEST.CNTRY = ''
          RWS.TARIFF = 'AFS50002'
         TARIFF.NAME = RWS.TARIFF
     
         BEGIN CASE
        **    CASE LEN(ORIG.ZIP)=6
            CASE NOT(NUM(ORIG.ZIP[1,1]))
               ORIG.CITY=OCONV(ORIG.ZIP,'TCAN.ZIP.CODES;X;;1')
               ORIG.ST=OCONV(ORIG.ZIP,'TCAN.ZIP.CODES;X;;2')
               ORIG.COUNTRY='CAN'
*              ORIG.ZIP=ORIG.ZIP[1,3]:' ':ORIG.ZIP[4,3]      ; * JMK02
 RWS.TARIFF = 'AFS52502'
         TARIFF.NAME = RWS.TARIFF
            CASE LEN(ORIG.ZIP)=5
               ORIG.CITY=OCONV(ORIG.ZIP,'TZIPS.CODES;X;;1')
               ORIG.ST=OCONV(ORIG.ZIP,'TZIPS.CODES;X;;2')
               ORIG.CNTRY=OCONV(ORIG.ZIP,'TZIPS.CODES;X;;3')
               BEGIN CASE
                  CASE ORIG.CNTRY = 'US'
                     ORIG.COUNTRY = 'USA'
                  CASE ORIG.CNTRY = 'MX'
                     ORIG.COUNTRY = 'MEX'
                  CASE 1
                     ORIG.COUNTRY = 'UNKNOWN'
               END CASE
         END CASE
         BEGIN CASE
          **  CASE LEN(DEST.ZIP)=6
            CASE NOT(NUM(DEST.ZIP[1,1]))
               DEST.CITY=OCONV(DEST.ZIP,'TCAN.ZIP.CODES;X;;1')
               DEST.ST=OCONV(DEST.ZIP,'TCAN.ZIP.CODES;X;;2')
               DEST.COUNTRY='CAN'
*              DEST.ZIP=DEST.ZIP[1,3]:' ':DEST.ZIP[4,3]      ; * JMK02
RWS.TARIFF = 'AFS52502'
         TARIFF.NAME = RWS.TARIFF
            CASE LEN(DEST.ZIP)=5
               DEST.CITY=OCONV(DEST.ZIP,'TZIPS.CODES;X;;1')
               DEST.ST=OCONV(DEST.ZIP,'TZIPS.CODES;X;;2')
               DEST.CNTRY=OCONV(DEST.ZIP,'TZIPS.CODES;X;;3')
               BEGIN CASE
                  CASE DEST.CNTRY = 'US'
                     DEST.COUNTRY = 'USA'
                  CASE DEST.CNTRY = 'MX'
                     DEST.COUNTRY = 'MEX'
                  CASE 1
                     CRT 'DEST.ZIP=':DEST.ZIP:' Not for US or Mexico'
                     DEST.COUNTRY = 'UNKNOWN'
               END CASE
         END CASE
         INTRASTATE='N'
         IF ORIG.ST#'' AND DEST.ST#'' THEN
            IF ORIG.ST=DEST.ST THEN INTRASTATE='Y'
         END

    ***     TARIFF.NAME=BILL<1,7>           ; * Tariff Name
     ***       LEN.TARIFF.NAME=LEN(TARIFF.NAME)          ; * SWB01
      ***      IF TARIFF.NAME[LEN.TARIFF.NAME - 1, 2] = 'XL' THEN  ; * SWB01
       ***        TARIFF.NAME=TARIFF.NAME[1, LEN.TARIFF.NAME - 2]  ; * SWB01
      ***      END                             ; * SWB01
     ***       LOCATE(TARIFF.NAME,TARIFF.LIST,1;TPOS) THEN
      ***         RWS.TARIFF=TARIFF.LIST<2,TPOS>
        ***    END ELSE
      ***        RWS.TARIFF=TARIFF.NAME
      ***      END
        
         TARIFF.EFF.DT = '19950101'
         TARIFF.ADJ.FACTOR =1
         VIN<1> = 'RWXL'
         VIN<2> = TARIFF.NAME
         VOUT = ''
      ***   CALL UPD.TARIFF.ACTIVITY(VIN,VOUT)

      ***      TARIFF.EFF.DT=BILL<1,8>'D4/'    ; * Tariff effective date
     ***       TARIFF.EFF.DT=TARIFF.EFF.DT[7, 4]:TARIFF.EFF.DT[1, 2]:TARIFF.EFF.DT[4, 2]
    ***        TARIFF.ADJ.FACTOR=BILL<1,9>
      ***      TARIFF.ADJ.FACTOR = TARIFF.ADJ.FACTOR / 1000000

         DTL.CNT=DCOUNT(BILL<1,5>,@SVM)
         IF DTL.CNT > 20 THEN
            VOUT<1>="Error on bill ":PRO:" Exceeded Maximum of 20 detail lines!"
            RETURN
         END
         SCAC=''
         CARRIER.TYPE='A'
         SEND.CNT=0
         GOSUB BUILD.XML.REQUEST
*
         * why send the same request twice
         GB.SKIP = 0
         IF BC = 1 THEN
            GB = ""
            GB<BC> = XML.REQUEST
         END
         IF BC = 2 AND GB<1> = XML.REQUEST THEN
            GB.SKIP = 1
            GO PAST
         END
         SETREQUEST.TYPE = 1
         SETREQUEST.STATUS = soapSetRequestContent(SoapReq, XML.REQUEST, SETREQUEST.TYPE)

         BEGIN CASE
            CASE SETREQUEST.STATUS = 0   ; * Successful
               START.FUNCTION.TIME = TIME()
               GOSUB SUBMIT.REQUEST
               IF SMC.POST.ERROR.CNT THEN
                  IF SMC.POST.ERROR.CNT < MAX.SMC.POST.ERROR.TRYS THEN
*Start over on this request
                     GO OPEN.SOAP.CONNECTION
                  END
               END
            CASE 1
               BEGIN CASE
                  CASE SETREQUEST.STATUS = 1
                     SETREQUEST.DESC = 'Invalid request handle.'
                  CASE SETREQUEST.TYPE = 1
                     SETREQUEST.DESC = '1'
                  CASE SETREQUEST.STATUS = 2
                     SETREQUEST.DESC = 'Unable to Open the file named ':XML.REQUEST
                  CASE SETREQUEST.STATUS = 3
                     SETREQUEST.DESC = 'Unable to Read the file named ':XML.REQUEST
                  CASE 1
                     SETREQUEST.DESC = 'Undefined Status'
               END CASE

               DOM.STEP = 'SoapRequestContent'
               EMAIL.OUT<5>='RWXL soapSetRequest returned the following error - ': SETREQUEST.DESC
               EMAIL.OUT<6>='FBBP RWXL could not SetRequestContent for user ':USER:' on ':OCONV(DATE(),'D2/'):' at ':OCONV(TIME(),'MTHS'):'.'
               EMAIL.OUT<6>:='  Please confirm rating engine servers are working correctly.'
               EMAIL.OUT<6>:= 'SETREQUEST.STATUS = ':SETREQUEST.STATUS:' - ':SETREQUEST.DESC
               GOSUB REPORT.INTERNAL.ERROR

               GO 9999
         END CASE
*Retrieve Results
         GET.CNT=0
         GOSUB PARSE.RESULTS
DEBUG
        
       
         FACTOR='1000000'                ; * Rateware does this-no longer needed.
         DETAILS=''
         FACTOR.TOTAL.CHARGE=0
         FOR X = 1 TO DTL.CNT
            DETAIL=RTN.DTL.REC[((X-1)*16)+1,16]
            IF FACTOR="" THEN FACTOR="1000000"
          **  DETAIL.RATE=ICONV(TRIM(DETAIL[1,7]),'MR2')       ; * Detail Rate
          **  DETAIL.CHARGE=ICONV(TRIM(DETAIL[8,9]),'MR2')     ; * Detail Chrg
            DETAIL.RATE=TRIM(DETAIL[1,7])      ; * Detail Rate
           DETAIL.CHARGE=TRIM(DETAIL[8,9])     ; * Detail Chrg
             TOTAL.CHARGE=ICONV(TRIM(RTN.HDR.REC[62,9]),'MR2')
         TARIFF.MINIMUM=ICONV(TRIM(RTN.HDR.REC[33,7]),'MR2')
             VOUT<1> = DETAIL.RATE
         VOUT<2> = DETAIL.CHARGE
         VOUT<3> = TARIFF.MINIMUM
         RETURN
            IF FACTOR=1000000 AND TDIN<BC,12>='N' THEN       ; * Take as Stated
               LINE.OUT<1,1,X>=DETAIL.RATE
               LINE.OUT<1,2,X>=DETAIL.CHARGE
            END ELSE
               FACTOR.DETAIL.RATE=OCONV(DETAIL.RATE*FACTOR/1000000,'MR0')
               LINE.OUT<1,1,X>=FACTOR.DETAIL.RATE
               WEIGHT=DIN<1,5,X>
               FACTOR.DETAIL.CHARGE=OCONV(WEIGHT*FACTOR.DETAIL.RATE/100,'MR0')
               LINE.OUT<1,2,X>=FACTOR.DETAIL.CHARGE
               FACTOR.TOTAL.CHARGE=SUM(LINE.OUT<1,2>)
            END
         NEXT X
       
         IF FACTOR#1000000 THEN
            FACTOR.TARIFF.MINIMUM=ICONV(TARIFF.MINIMUM*FACTOR/1000000,'MR0')
         END

         DEFICIT.WEIGHT=TRIM(RTN.HDR.REC[47,6])+0
         BEGIN CASE
            CASE DEFICIT.WEIGHT > 0
               BILL.TYPE='DEFICIT'
               IF FACTOR=1000000 THEN
                  BILL.CHARGE=TOTAL.CHARGE
               END ELSE
                  BILL.CHARGE=FACTOR.TOTAL.CHARGE
               END
            CASE TOTAL.CHARGE < TARIFF.MINIMUM
               BILL.TYPE='MINIMUM'
               IF FACTOR=1000000 THEN
                  BILL.CHARGE=TARIFF.MINIMUM
               END ELSE
                  BILL.CHARGE=FACTOR.TARIFF.MINIMUM
               END
            CASE 1
               BILL.TYPE='ACTUAL'
               IF FACTOR=1000000 AND TDIN<BC,12>='N' THEN
                  BILL.CHARGE=TOTAL.CHARGE
               END ELSE
                  BILL.CHARGE=FACTOR.TOTAL.CHARGE
               END
         END CASE
         LINE.OUT<1,3>=BILL.TYPE

         IF TDIN<BC,12>='Y' THEN
            LINE.OUT<1,4>+=BILL.WEIGHT+0           ; * Billed Weight
         END ELSE
            LINE.OUT<1,4>=TRIM(RTN.HDR.REC[27,6])+0          ; * Billed Weight
         END
         LINE.OUT<1,5>=BILL.CHARGE
         DEFICIT.WEIGHT=TRIM(RTN.HDR.REC[47,6])+0  ; * Deficit Weight
         LINE.OUT<1,7>=DEFICIT.WEIGHT
         DEFICIT.RATE=ICONV(TRIM(RTN.HDR.REC[40,7]),'MR2')   ; * Deficit Rate
         IF FACTOR=1000000 THEN
            LINE.OUT<1,8>=DEFICIT.RATE
            LINE.OUT<1,9>=ICONV(TRIM(RTN.HDR.REC[53,9]),'MR2')         ; * Deficit Charge
         END ELSE
            FACTOR.DEFICIT.RATE=OCONV(DEFICIT.RATE*FACTOR/1000000,'MR0')
            FACTOR.DEFICIT.CHARGE=OCONV(FACTOR.DEFICIT.RATE*DEFICIT.WEIGHT/100,'MR0')
            LINE.OUT<1,5>+=FACTOR.DEFICIT.CHARGE
            LINE.OUT<1,8>=FACTOR.DEFICIT.RATE
            LINE.OUT<1,9>=FACTOR.DEFICIT.CHARGE
         END

         IF SMC.ERROR.CODE=0 THEN SMC.ERROR.CODE=''          ; * JMK02
         LINE.OUT<1,10>=SMC.ERROR.CODE   ; * JMK02

         IF LINE.OUT<1,10> # '' THEN
            RWS.ERROR=LINE.OUT<1,10>
            RWS.ERRMSG='WEB-':OCONV(LINE.OUT<1,10>,'TRWS.ERRMSG;X;;1')
            ADD.INFO = OCONV(LINE.OUT<1,10>,'TRWS.ERRMSG;X;;2')
            LINE.OUT<1,10>=RWS.ERRMSG

            BEGIN CASE
               CASE RWS.ERROR='10' OR RWS.ERROR = 12         ; * 212 in RWS
                  RWS.ZIP=1
                  ERR.INFO = RWS.ERRMSG
               CASE RWS.ERROR='11'       ; * 216 in RWS
                  RWS.ZIP=1
                  IF ORIG.ST='HI' THEN RWS.ZIP=0
                  IF ORIG.ST='AK' THEN RWS.ZIP=0
                  ERR.INFO = RWS.ERRMSG
               CASE RWS.ERROR='13'       ; * 217 in RWS
                  RWS.ZIP=1
                  IF DEST.ST='HI' THEN RWS.ZIP=0
                  IF ORIG.ST='AK' THEN RWS.ZIP=0
                  ERR.INFO = RWS.ERRMSG
               CASE RWS.ERROR='14'       ; * 218 in RWS
                  RWS.ZIP=1
                  ERR.INFO = RWS.ERRMSG
               CASE 1
                  RWS.ZIP=0
                  ADD.INFO=''
            END CASE

            IF BC > 1 AND DIN<BC>=DIN<1> THEN RWS.ZIP=0

            IF ORIG.ZIP MATCH('1A1N1A1N1A1N') AND DEST.ZIP MATCH('1A1N1A1N1A1N') THEN RWS.ZIP = 0

            IF RWS.ZIP=1 AND RATE.TYPE#'B' AND TARIFF.NAME[1,3]='AFS' THEN
               EMAIL.OUT=''
               EMAIL.OUT<1,-1>='nmeddaugh@afs.net'
               EMAIL.OUT<4>='FBBP_RWXL@afs.net'
               EMAIL.OUT<5>='RateWare Rating Engine Origin or Destination Shipping Point Problem'
               EMAIL.OUT<6,-1>=' '
               IF CLIENT#'' THEN
                  CLIENT.NAME=OCONV(CLIENT,'TCLIENTS;X;;2')
                  EMAIL.OUT<6,-1>='Client is      :':CLIENT:' - ':CLIENT.NAME
               END
               IF CARRIER#'' THEN
                  CARRIER.NAME=OCONV(CARRIER,'TCARRIERS;X;;1')
                  EMAIL.OUT<6,-1>='Carrier is     :':CARRIER:' - ':CARRIER.NAME
               END
               IF PRO#'' THEN
                  EMAIL.OUT<6,-1>='Pro Number is  :':PRO
               END
               EMAIL.OUT<6,-1>='Origin is      :':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.ST
               EMAIL.OUT<6,-1>='Destination is :':DEST.ZIP:' - ':DEST.CITY:', ':DEST.ST
               EMAIL.OUT<6,-1>='Tariff is      :':TARIFF.NAME:' effective date ':TARIFF.EFF.DT'D2/'
               EMAIL.OUT<6,-1>='RateWare Error :':RWS.ERROR:' - ':RWS.ERRMSG
               EMAIL.OUT<6,-1>='User Logon     :':USER
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>=ADD.INFO
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>="This may be resolved by using a valid substitute postal code recognized by the tariff for the problem location."
               EVIN=EMAIL.OUT
               EVOUT=''
               CALL SENDMAIL(EVIN,EVOUT)
            END
         END
PAST:
         DOUT<-1>=LINE.OUT
      NEXT BC
      CONTR.BILL=DIN<1>
      BENCH.BILL=DIN<2>
      IF DIN<1>=DIN<2> THEN
         DOUT<2>=DOUT<1>
      END
      TIME.LINE<1,1,6>=TIME()            ; * JMK26 ; * END TIME


      GO 9999

************************************************************************
BUILD.XML.REQUEST:
************************************************************************
      TIME.LINE<1,1,2>=TIME()            ; * JMK26 ; * BUILD REQUEST
DTL.CNT = 1
      XML.REQUEST = ''
      XML.REQUEST := '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://webservices.smc.com" xmlns:web1="http://web.ltl.smc.com">'
      XML.REQUEST := '<soapenv:Header>'
      XML.REQUEST := '<web:AuthenticationToken>'
      XML.REQUEST := '<web:licenseKey>':SMC.WEB.LICENSE.KEY:'</web:licenseKey>'
      XML.REQUEST := '<web:password>':SMC.WEB.PASSWORD:'</web:password>'
      XML.REQUEST := '<web:username>':SMC.WEB.USERNAME:'</web:username>'
      XML.REQUEST := '</web:AuthenticationToken>'
      XML.REQUEST := '</soapenv:Header>'
      XML.REQUEST := '<soapenv:Body>'
      XML.REQUEST := '<web:LTLRateShipment>'
      XML.REQUEST := '<web:LTLRateShipmentRequest>'
      XML.REQUEST := '<web1:destinationCountry>':DEST.COUNTRY:'</web1:destinationCountry>'
      XML.REQUEST := '<web1:destinationPostalCode>':DEST.ZIP:'</web1:destinationPostalCode>'
      XML.REQUEST := '<web1:details>'
      NO.CLASS.FLG = 0
      FOR DC = 1 TO DTL.CNT
         XML.REQUEST := '<web1:LTLRequestDetail>'
         XML.REQUEST := '<web1:nmfcClass>':VIN<5>:'</web1:nmfcClass>'
         IF TRIM(BILL<1, 4, DC>) = "" THEN
            NO.CLASS.FLG = 1
         END
         XML.REQUEST := '<web1:weight>':VIN<6>:'</web1:weight>'
         XML.REQUEST := '</web1:LTLRequestDetail>'
      NEXT DC
      XML.REQUEST := '</web1:details>'
      XML.REQUEST := '<web1:originCountry>':ORIG.COUNTRY:'</web1:originCountry>'
      XML.REQUEST := '<web1:originPostalCode>':ORIG.ZIP:'</web1:originPostalCode>'
      IF TARIFF.ADJ.FACTOR+1#"1" THEN    ; * JMK03
         XML.REQUEST := '<web1:rateAdjustmentFactor>':TARIFF.ADJ.FACTOR:'</web1:rateAdjustmentFactor>'         ; * JMK03
      END                                ; * JMK03
      XML.REQUEST := '<web1:shipmentDateCCYYMMDD>':TARIFF.EFF.DT:'</web1:shipmentDateCCYYMMDD>'
      XML.REQUEST := '<web1:tariffName>':RWS.TARIFF:'</web1:tariffName>'
      XML.REQUEST := '</web:LTLRateShipmentRequest>'
      XML.REQUEST := '</web:LTLRateShipment>'
      XML.REQUEST := '</soapenv:Body>'
      XML.REQUEST := '</soapenv:Envelope>'

      RETURN
************************************************************************
SUBMIT.REQUEST:***
************************************************************************

      TIME.LINE<1,1,3>=TIME()            ; * JMK26 ; * SUBMIT REQUEST
      Ret = SoapSubmitRequest(SoapReq, TIMEOUT, RESULTS.HDR, RESULTS.DTL.RAW, RESULTS.STATUS)
      IF Ret <> 0 THEN
         FATAL.ERROR.SUBJ = 'RWXL received a fatal error while submitting a web-service request'
         FAULT.INFO = ''
         SOAP.FAULT.STATUS = SOAPGetFault(RESULTS.DTL.RAW, FAULT.INFO)

         BEGIN CASE
            CASE SOAP.FAULT.STATUS = 0
*No problem to report
               SMC.POST.ERROR.CNT = ''
            CASE SOAP.FAULT.STATUS = 1
               BEGIN CASE

                  CASE RESULTS.DTL.RAW[1, 4] = 'POST'
*Some of the time, we get back a response that has text starting with the word 'POST'
*before the XML string. Besides fouling up the parsing of the response using the uv
*DOM functions, it apparently indicates some sort of error happened although there is
*no obvious error code or message. When we get these, treat them as an error and circle
*back to open the connection and try again. The 3rd consecutive time we get the error on
*a given bill we will send an email and send a message back to the calling program that
*we were 'Unable to rate' the bill.
                     SMC.POST.ERROR.CNT += 1
                     IF SMC.POST.ERROR.CNT < MAX.SMC.POST.ERROR.TRYS THEN
*Find our way back to try the whole request again until the # of Max Trys has been reached.
*Once Max Trys has been reached, treat it as a non-fatal error and pass back a message
*that we were unable to rate the bill.

*****                        GO SUBMIT.REQUEST.RETURN
                        RETURN TO 9999
                     END

                     EMAIL.OUT<6>='RWXL reports a Soap Fault of 1 with unusual Detail Results'
                     EMAIL.OUT<6,-1>=' '
                     EMAIL.OUT<6,-1>='XML.REQUEST=':XML.REQUEST
                     EMAIL.OUT<6,-1>=' '
                     EMAIL.OUT<6,-1>='RESULTS.DTL.RAW=':RESULTS.DTL.RAW
                     EMAIL.OUT<6,-1>=' '
                  CASE 1
                     EMAIL.OUT<6>='RWXL reports a Soap Fault of 1'
                     EMAIL.OUT<6,-1>='A SOAP.FAULT.STATUS OF ':SOAP.FAULT.STATUS:' was returned for User ':USER:' on ':OCONV(DATE(),'D2/'):' at ':OCONV(TIME(),'MTHS'):'.'
                     EMAIL.OUT<6,-1>=' '
                     EMAIL.OUT<6,-1>='XML.REQUEST=':XML.REQUEST
                     EMAIL.OUT<6,-1>=' '
                     EMAIL.OUT<6,-1>='RESULTS.DTL.RAW=':RESULTS.DTL.RAW
                     EMAIL.OUT<6,-1>=' '
                     SMC.POST.ERROR.CNT = ''
               END CASE
            CASE SOAP.FAULT.STATUS = 2
               EMAIL.OUT<6>='RWXL reports a Soap Fault of 2'
               EMAIL.OUT<6,-1>='A SOAP.FAULT.STATUS OF ':SOAP.FAULT.STATUS:' was returned for User ':USER:' on ':OCONV(DATE(),'D2/'):' at ':OCONV(TIME(),'MTHS'):'.'
               EMAIL.OUT<6,-1> = 'SOAP Fault not found in response data.'
               SMC.POST.ERROR.CNT = ''
            CASE 1
*Unidentified cause
               EMAIL.OUT<6>='RWXL reports an Unknown Soap Fault'
               EMAIL.OUT<6,-1>='SOAP.FAULT.STATUS=':SOAP.FAULT.STATUS:' FAULT.INFO=':FAULT.INFO
         END CASE
         IF SOAP.FAULT.STATUS # 0 THEN
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>='Ret=':Ret
            EMAIL.OUT<6,-1>='RESULTS.STATUS=':RESULTS.STATUS
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>='Fault Code=':FAULT.INFO<1>
            EMAIL.OUT<6,-1>='Fault String=':FAULT.INFO<2>
            EMAIL.OUT<6,-1>='Fault Detail=':FAULT.INFO<3>
            EMAIL.OUT<6,-1>='Fault Actor=':FAULT.INFO<4>
            EMAIL.OUT<6,-1>=' '
            SMC.POST.ERROR.CNT = ''

            GOSUB REPORT.FATAL.ERROR
            IF SMC.POST.ERROR.CNT THEN
               ERROR.LINE.OUT = 'WEB-':'POST_Unable to rate'
               DOUT<-1> = ERROR.LINE.OUT
            END
            GO 9999
         END

      END ELSE
         RESULTS.STATUS = ''
         SMC.POST.ERROR.CNT = ''
      END
************************************************************************
SUBMIT.REQUEST.RETURN:
************************************************************************
      TIME.LINE<1,1,4>=TIME()            ; * JMK26 ; * RETRIEVE RESPONSE
      RETURN
************************************************************************
PARSE.RESULTS:
************************************************************************
      RESULTS.DTL = RESULTS.DTL.RAW
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<soap:Body>' ,'')
      RESULTS.DTL = CHANGE(RESULTS.DTL, ' xmlns="http://web.ltl.smc.com"', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, ' xsi:nil="true"', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<ns1:LTLRateShipmentResponse xmlns:ns1="http://webservices.smc.com">', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<ns1:LTLRateShipmentResponse>', '<LTLRateShipmentResponse>', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</ns1:LTLRateShipmentResponse>', '</LTLRateShipmentResponse>', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, ' xmlns:ns1="http://webservices.smc.com"', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</LTLRateShipmentResponse>', '', 99, 2)
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</soap:Body>', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</soap:Envelope>', '')

****CRT "RWXL ":RESULTS.DTL
      NODENAME = ''

*Get the handle for the RESULTS.DTL string
      STATUS = XDOMOpen(RESULTS.DTL, XML.FROM.STRING, MYDOM)
      DOM.STEP = 1
      GOSUB CHECK.STATUS
*Take us to the 'LTLRateShipmentResponse'....
      STATUS = XDOMLocate(MYDOM, '/LTLRateShipmentResponse', "", DOM.HANDLE)
      DOM.STEP = 2
      GOSUB CHECK.STATUS

      PREV.NODENAME = '*&$*'             ; * Assign it to something it won't be
      ELEMENT.HANDLE = DOM.HANDLE
      NODE.DIRECTION = XDOM.CHILD
      LOOP
*Find the next 'Child' under LTLRateShipmentResponse
         STATUS = XDOMLocateNode(ELEMENT.HANDLE, NODE.DIRECTION, XDOM.FIRST.CHILD, XDOM.ELEMENT.NODE, NEXT.ELEMENT.HANDLE)
         DOM.STEP = 3
         GOSUB CHECK.STATUS
         STATUS = XDOMGetNodeName(NEXT.ELEMENT.HANDLE, NODENAME)
         DOM.STEP = 11
         GOSUB CHECK.STATUS
         NODE.VALUE = ''
         errCode = ''

      UNTIL NODENAME = PREV.NODENAME DO
         BEGIN CASE
            CASE NODENAME = 'details'
               DETAILS.HANDLE = NEXT.ELEMENT.HANDLE
               GOSUB PARSE.DETAILS
            CASE 1
*This is for the elements other than the 'details'.
*Get the answer. To do that, go to the child of this element which is the 'Text Node'
               STATUS = XDOMLocateNode(NEXT.ELEMENT.HANDLE, XDOM.CHILD, XDOM.FIRST.CHILD, XDOM.TEXT.NODE, DATA.HANDLE)
               DOM.STEP = 12
               GOSUB CHECK.STATUS

*errCode 12 occurs when we don't get an answer back for a particular element.
*Until proven otherwise, if we get a 12, assume it is because there was no
*answer to retrive for that element and move on.
               IF errCode # 12 THEN
                  STATUS = XDOMGetNodeVAlue(DATA.HANDLE, NODE.VALUE)
                  DOM.STEP = 13
                  GOSUB CHECK.STATUS
               END

               BEGIN CASE

                  CASE NODENAME='LHGrossCharge'
                     RTN.HDR.REC[62,9] = NODE.VALUE 'MR%9'
                  CASE NODENAME='LTL_Surcharge'
                  CASE NODENAME='RBNO'
                     RTN.HDR.REC[10,10] = ABS(NODE.VALUE) 'R#10'
                  CASE NODENAME='TL_Surcharge'
                  CASE NODENAME='absoluteMCFloor'
                  CASE NODENAME='actualWgt'
                     RTN.HDR.REC[21,6] = NODE.VALUE 'MR%6'
                  CASE NODENAME='billedWgt'
                     RTN.HDR.REC[27,6] = NODE.VALUE 'MR%6'
                  CASE NODENAME='deficitCharge'
                     RTN.HDR.REC[53,9] = NODE.VALUE 'MR%9'
                  CASE NODENAME='deficitRate'
                     RTN.HDR.REC[40,7] = NODE.VALUE 'MR%7'
                  CASE NODENAME='deficitWeight'
                     RTN.HDR.REC[47,6] = NODE.VALUE 'MR%6'
                  CASE NODENAME='destinationCity'
                     RTN.HDR.REC[92,17] = NODE.VALUE
                  CASE NODENAME='destinationCountry'
                  CASE NODENAME='destinationPostalCode'
                  CASE NODENAME='destinationState'
                     RTN.HDR.REC[90,2] = NODE.VALUE
                  CASE NODENAME='details'
                  CASE NODENAME='discountAmount'
                     RTN.HDR.REC[153,9] = OCONV(NODE.VALUE, 'MD2') 'R#9'
                  CASE NODENAME='discountApplication'
                  CASE NODENAME='discountPctUsed'
                     RTN.HDR.REC[135,5] = OCONV(NODE.VALUE, 'MD2') 'MR%5'
                  CASE NODENAME='effectiveDate'
                     RTN.EFF.DT = NODE.VALUE[5,2]:'-':NODE.VALUE[7,2]:'-':NODE.VALUE[1,4]
                     RTN.HDR.REC[125,10] = RTN.EFF.DT
                  CASE NODENAME='errorCode'
                     IF NODE.VALUE > "" THEN       ; * NKH01
                        SEND.EMAIL = 0   ; * NKH01
                        GO 9999          ; * NKH01
                     END                 ; * NKH01
                  CASE NODENAME='mcDiscount'
                     RTN.HDR.REC[162,7] = OCONV(NODE.VALUE + 0, 'MD2') 'R#7'
                  CASE NODENAME='minimumCharge'
                     RTN.HDR.REC[33,7] = NODE.VALUE 'MR%7'
DEBUG
                  CASE NODENAME='orgDestToGateWayPointFlag'
                  CASE NODENAME='originCity'
                     RTN.HDR.REC[73,17] = NODE.VALUE 'L#17'
                  CASE NODENAME='originCountry'
                  CASE NODENAME='originPostalCode'
                  CASE NODENAME='originState'
                     RTN.HDR.REC[71,2] = NODE.VALUE
                  CASE NODENAME='rateAdjustmentFactor'
                  CASE NODENAME='rateApplication'
                  CASE NODENAME='shipmentDateCCYYMMDD'
                  CASE NODENAME='shipmentID'
                  CASE NODENAME='stopAlternationWeight'
                  CASE NODENAME='suffix'
                     RTN.HDR.REC[20,1] = NODE.VALUE
                  CASE NODENAME='surchargeAmount'
                  CASE NODENAME='surchargeApplication'
                  CASE NODENAME='surchargePercentUsed'
                  CASE NODENAME='tariffName'
                     RTN.HDR.REC[2,8] = NODE.VALUE 'L#8'
                  CASE NODENAME='tblno'
                  CASE NODENAME='totalCharge'
                  CASE NODENAME='useDiscounts'
                  CASE NODENAME='useSingleShipmentCharges'
                  CASE NODENAME='userMinimumChargeFloor'
                  CASE NODENAME='weightBreak_Discount_1'
                  CASE NODENAME='weightBreak_Discount_10'
                  CASE NODENAME='weightBreak_Discount_11'
                  CASE NODENAME='weightBreak_Discount_2'
                  CASE NODENAME='weightBreak_Discount_3'
                  CASE NODENAME='weightBreak_Discount_4'
                  CASE NODENAME='weightBreak_Discount_5'
                  CASE NODENAME='weightBreak_Discount_6'
                  CASE NODENAME='weightBreak_Discount_7'
                  CASE NODENAME='weightBreak_Discount_8'
                  CASE NODENAME='weightBreak_Discount_9'
                  CASE 1
               END CASE
         END CASE

         ELEMENT.HANDLE = NEXT.ELEMENT.HANDLE
         NODE.DIRECTION = XDOM.NEXT.SIBLING
         PREV.NODENAME = NODENAME
      REPEAT
THE.END:      CLOSE.STATUS = XDOMClose(MYDOM)

      RETURN
************************************************************************
PARSE.DETAILS:
************************************************************************
      TIME.LINE<1,1,5>=TIME()            ; * JMK26 ; * PARSE RESPONSE
      RSP.DETAIL.CNT = COUNT(RESULTS.DTL, '<LTLResponseDetail>')
      END.OF.DETAILS = 0
      FIRST = 1
      RSP.DTL.CNT = 0

      LOOP
         RSP.DTL.CNT = RSP.DTL.CNT + 1
      WHILE RSP.DTL.CNT <= RSP.DETAIL.CNT DO

*This finds the first CHILD under 'details', which is the Node Name of 'details'.
         STATUS = XDOMLocateNode(DETAILS.HANDLE, XDOM.CHILD, RSP.DTL.CNT, XDOM.ELEMENT.NODE, RESPONSE.DETAIL.HANDLE)
         DOM.STEP = 21
         GOSUB CHECK.STATUS
         LTL.RESP.DTL.HANDLE = RESPONSE.DETAIL.HANDLE

         DTL.RATE = 0
         DTL.CHARGE = 0
         FOR DCC = 1 TO 5
*5 'tags' for each LTLResponseDetail are expected
            IF DCC = 1 THEN
               ***** IF USER = 'GBINO' THEN DEBUG
               STATUS = XDOMGetNodeName(RESPONSE.DETAIL.HANDLE, NODENAME)
               DOM.STEP = 22
               GOSUB CHECK.STATUS
               STATUS = XDOMLocateNode(RESPONSE.DETAIL.HANDLE, XDOM.CHILD, DCC, XDOM.ELEMENT.NODE, RESPONSE.DETAIL.CHILD.HANDLE)
               DOM.STEP = 23
               GOSUB CHECK.STATUS
            END ELSE
               STATUS = XDOMLocateNode(RESPONSE.DETAIL.HANDLE, XDOM.NEXT.SIBLING, XDOM.FIRST.CHILD, XDOM.ELEMENT.NODE, RESPONSE.DETAIL.CHILD.HANDLE)
               DOM.STEP = 24
               GOSUB CHECK.STATUS
            END

*In this example, the following will return 'LTLResponseDetail', presumably the first instance
            STATUS = XDOMGetNodeName(RESPONSE.DETAIL.CHILD.HANDLE, NODENAME)
            DOM.STEP = 25
            GOSUB CHECK.STATUS

*This finds the first CHILD under 'LTLResponseDetail', which is the Node Name of 'charge'.
*1 and XDOM.FIRST.CHILD both seem to work in line 114.

            DETAIL.CHILD.NODE = RESPONSE.DETAIL.CHILD.HANDLE
*This returns the Name of the Node that is the parent of the Text Node which holds the answer.
*This is the Node Name that we will use to determine where to put the answer in RTN.DTL.REC.
            STATUS = XDOMGetNodeName(DETAIL.CHILD.NODE, NODENAME)
            DOM.STEP = 26
            GOSUB CHECK.STATUS

*The following gets the handle for the 'Text Node' which is a child of the 'charge node'
            STATUS = XDOMLocateNode(DETAIL.CHILD.NODE, XDOM.CHILD, 1, XDOM.TEXT.NODE, DETAIL.VALUE.NODE)
            DOM.STEP = 27
            IF USER = 'GBINO' THEN
               IF NODENAME = 'charge' AND DCC = 1 AND STATUS = -1 THEN
                  SEND.EMAIL = 0

                  RETURN TO 9999
               END
            END
            GOSUB CHECK.STATUS

*This retrieves the data from the 'Text Node' of (the first) 'charge'
            STATUS = XDOMGetNodeVAlue(DETAIL.VALUE.NODE, NODE.VALUE)
            DOM.STEP = 28
            GOSUB CHECK.STATUS

            BEGIN CASE
               CASE NODENAME = 'charge'
                  DTL.CHARGE = OCONV(ICONV(NODE.VALUE, 'MD2') * 10, 'MD3')
               CASE NODENAME = 'error'
                  SMC.ERROR.CODE = NODE.VALUE
                  IF SMC.ERROR.CODE # 0 THEN
                     GOSUB REPORT.SMC.ERROR
                  END
               CASE NODENAME = 'nmfcClass'
               CASE NODENAME = 'rate'
                  DTL.RATE = OCONV(ICONV(NODE.VALUE, 'MD2') * 10, 'MD3')
               CASE NODENAME = 'weight'
               CASE 1
            END CASE
            RESPONSE.DETAIL.HANDLE = RESPONSE.DETAIL.CHILD.HANDLE
         NEXT DCC
*Convert the MD2 output from the web-service to the (apparently) MD3 output
*from the web service so we can use the same logic as RWS
         RTN.DTL.REC := DTL.RATE 'MR%7':DTL.CHARGE 'MR%9'
      REPEAT

      RETURN
************************************************************************
CHECK.STATUS:
************************************************************************
      IF STATUS <> XML.SUCCESS THEN
         ***** IF USER = 'GBINO' THEN DEBUG
         G.E.STATUS = XMLGetError(errCode,errMsg)
         BEGIN CASE
            CASE NODENAME = 'details'
            CASE NODENAME = 'errorCode' and errCode # 12
               SMC.ERROR.CODE = errCode
               IF SMC.ERROR.CODE # 0 THEN
                  EMAIL.OUT<5>='RWXL reports an error with NODENAME ':errCode
                  EMAIL.OUT<6>='A STATUS OF ':STATUS:' was returned for User ':USER:' on ':OCONV(DATE(),'D2/'):' at ':OCONV(TIME(),'MTHS'):'.'
                  EMAIL.OUT<6,-1>='G.E.STATUS=':G.E.STATUS
                  EMAIL.OUT<6,-1>='errMsg=':errMsg
                  EMAIL.OUT<6,-1>='DOM.STEP=':DOM.STEP
                  EMAIL.OUT<6,-1>= XML.REQUEST
                  ***** IF USER = 'GBINO' THEN DEBUG
                  EMAIL.OUT<6,-1>= RESULTS.DTL.RAW
                  EMAIL.OUT<6,-1>="client ":CLIENT
                  EMAIL.OUT<6,-1>="CARRIER ":CARRIER
                  EMAIL.OUT<6,-1>="RATE.TYPE ":RATE.TYPE
                  EMAIL.OUT<6,-1>="MODE ":MODE
                  GOSUB REPORT.INTERNAL.ERROR
               END

            CASE errCode = 12
*errCode 12 occurs when we don't get an answer back for a particular element.
*Until proven otherwise, if we get a 12, assume it is because there was no
*answer to retrieve for that element and move on.
            CASE 1
               FATAL.ERROR.SUBJ = 'RWXL returned an Unknown error'
               SMC.ERROR.CODE = 'Internal Unknown error'
               EMAIL.OUT<6>='A STATUS OF ':STATUS:' was returned for User ':USER:' on ':OCONV(DATE(),'D2/'):' at ':OCONV(TIME(),'MTHS'):'.'
               EMAIL.OUT<6,-1>='NODENAME=':NODENAME
               EMAIL.OUT<6,-1>='G.E.STATUS=':G.E.STATUS
               EMAIL.OUT<6,-1>='errMsg=':errMsg
               EMAIL.OUT<6,-1>='DOM.STEP=':DOM.STEP
               EMAIL.OUT<6,-1> = "REQUEST"
               EMAIL.OUT<6,-1>= XML.REQUEST
               EMAIL.OUT<6,-1> = "RESPONSE"
               EMAIL.OUT<6,-1>= RESULTS.DTL.RAW
               EMAIL.OUT<6,-1>="client ":CLIENT
               EMAIL.OUT<6,-1>="CARRIER ":CARRIER
               EMAIL.OUT<6,-1>="RATE.TYPE ":RATE.TYPE
               EMAIL.OUT<6,-1>="MODE ":MODE
               T.ID = DATE():"*":TIME()[1,5]       ; * GRB02
               WRITE XML.REQUEST ON F.PCOUT,T.ID   ; * GRB02
               IF NO.CLASS.FLG = 0 THEN
                  ***** IF USER = 'GBINO' THEN DEBUG
                  GOSUB REPORT.FATAL.ERROR
****
                  RETURN TO 9999
****
               END
         END CASE
      END

      RETURN
************************************************************************
LOAD.SUB.ZIP:
************************************************************************
*
      CHK.ZIP=''
      SUB.ZIP=''
      READ ZIP.SUBST.ARRAY FROM F.TABLES, 'ZIP.SUBSTITUTIONS' THEN
         CHK.ZIP=ZIP.SUBST.ARRAY<1>
         SUB.ZIP=ZIP.SUBST.ARRAY<2>
      END
      CHK.NVAL=DCOUNT(CHK.ZIP,@VM)
      SUB.NVAL=DCOUNT(SUB.ZIP,@VM)

      RETURN
************************************************************************
REPORT.SMC.ERROR:
************************************************************************

      SMC.ERROR.DESC=OCONV(SMC.ERROR.CODE,'TRWS.ERRMSG;X;;2')          ; * JMK02
      SMC.ERROR.TYPE=OCONV(SMC.ERROR.CODE,'TRWS.ERRMSG;X;;3')          ; * JMK02

      IF SMC.ERROR.TYPE='Server' THEN    ; * JMK02
*This is considered a fatal error
         FATAL.ERROR.SUBJ = 'SMC web-service Server errors'
         EMAIL.OUT<6>='FBBP RWXL received errors from the SMC web-service for ':USER:' on ':OCONV(DATE(),'D2/'):' at ':OCONV(TIME(),'MTHS'):'.'
         EMAIL.OUT<6>:='  Please confirm rating engine servers are working correctly.'
         GOSUB REPORT.FATAL.ERROR

      END ELSE
*These are non-fatal errors and should be passed back to the calling program
*        IF SMC.ERROR.TABLE = '' THEN    ; * JMK02
*           READ SMC.ERROR.TABLE FROM F.TABLES, 'RATEWAREXL_ERROR' ELSE NULL     ; * JMK02
*           LOCATE SMC.ERROR.CODE IN SMC.ERROR.TABLE<1> BY 'AR' SETTING ERR.POS THEN       ; * JMK02
*              SMC.ERROR.SHORT.DESC = SMC.ERROR.TABLE<2, ERR.POS>      ; * JMK02
*              SMC.ERROR.ACTION = SMC.ERROR.TABLE<3, ERR.POS>          ; * JMK02
*              CRT 'SMC.ERROR.SHORT.DESC'          ; * JMK02
*           END ELSE                     ; * JMK02
*              CALL ELINE('SMC Error Code ':SMC.ERROR.CODE:' not found in SMC.ERROR.TABLE.')         ; * Replace me before install ; * JMK02
*           END                          ; * JMK02
*        END                             ; * JMK02
      END

      RETURN
************************************************************************
REPORT.INTERNAL.ERROR:
************************************************************************

      EMAIL.START.TIME = TIME()
      BEGIN CASE
         CASE DOM.STEP = 'SoapRequestContent'
         CASE NUM(DOM.STEP) AND DOM.STEP # ''
            EMAIL.OUT<6,-1> = 'The above error was generated by the function related to DOM.STEP ':DOM.STEP
         CASE 1
            EMAIL.OUT<6,-1> = 'The above error occurred at an unidentifed place in RWXL'

      END CASE
      EMAIL.OUT<6, -1> = 'URL = ':URL
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'XML.REQUEST = ':XML.REQUEST
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'RESULTS.HDR = ':RESULTS.HDR
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'RESULTS.DTL.RAW = ':RESULTS.DTL.RAW
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = ' '
      EMAIL.OUT<6, -1> = 'RESULTS.DTL = ':RESULTS.DTL
      EVIN=EMAIL.OUT
      EVOUT=''
      EMAIL.SAVE<6> = EMAIL.SAVE<6>:EMAIL.OUT<6>   ; * NKH01
*      CALL SENDMAIL(EVIN,EVOUT)                      ; * NKH01

      RETURN
************************************************************************
REPORT.FATAL.ERROR:
************************************************************************

      EMAIL.START.TIME = TIME()

      EMAIL.OUT<1>='URGENT_RWS_ERRORS@afs.net'
      EMAIL.OUT<4>='FBBP_RWXL@afs.net'
      EMAIL.OUT<5>=FATAL.ERROR.SUBJ
      EMAIL.OUT<6,-1> = 'URL = ':URL
      EVIN=EMAIL.OUT
      EVOUT=''
      EMAIL.SAVE<6> = EMAIL.SAVE<6>:EMAIL.OUT<6>   ; * NKH01
*      CALL SENDMAIL(EVIN,EVOUT)                      ; * NKH01

      IDATE=DATE()
      ITIME=TIME()
      TIME.BLOCK=INT(ITIME/600)
      L.IN = PROG.NAME
      L.OUT = ST.TIME
      ELAPSED.TIME = TIME() - ST.TIME
      L.OUT<2> = ELAPSED.TIME
      L.OUT<3> = "ERROR on SMC webservice - ":SOAP.RET
      ******  CALL UPD.PROCESS.LOG(L.IN,L.OUT)

      RETURN
   ************************************************************************
9995: *** Error - Problem with data
*
*************************************************************************
9999: *** Exit Program
*************************************************************************

* Begin NKH01
*************************************************************************
EMAIL.ERRORS:
*************************************************************************
      IF SEND.EMAIL THEN
         IF EMAIL.SAVE > '' THEN
            EMAIL.OUT<6>=EMAIL.SAVE<6>
            EVIN=EMAIL.OUT
            CALL SENDMAIL(EVIN,EVOUT)
         END
      END
  ****    RETURN
* End NKH01

      LOG.RET = PROTOCOLLOGGING(LOGFILE,"OFF",10)
      VOUT<3>=TIME.LINE                  ; * RETURN TIMING TO HOST PROCESS
 ****     RETURN
*
      ST.TIME = TIME()   
   END
