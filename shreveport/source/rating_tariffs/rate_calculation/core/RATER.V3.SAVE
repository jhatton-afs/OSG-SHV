***********************************************************************
* Program name :  RATER.V3
* Author       :  Nicole Hennick
* Date written :  02/19/2021
* Library      :  FBBP
$* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* FREIGHT BILL RATING PROGRAM
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 09:23:01 on 02/19/2021.
*
* Start modification history
* 121620 - NKH00 - ACCU-1074 Tempo Rater
* End modification history
***********************************************************************
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE FILE.DEFS INC_FB.AUDIT
$INCLUDE FILE.DEFS INC_CLIENTS
      COMMON PROGPARAMS(24)
      EQU PROGFROM TO PROGPARAMS(1)
      EQU USER TO PROGPARAMS(2)
      EQU PROCDATE TO PROGPARAMS(3)
      PROGFROM = 'RATER.V3'
      VALID.CLASSES=50:@VM:55:@VM:60:@VM:65:@VM:70:@VM:77:@VM:85:@VM:92:@VM:100:@VM:110:@VM:125:@VM:150:@VM:175:@VM:200:@VM:250:@VM:300:@VM:400:@VM:500
      CLIENT.MODE = 0      

      * Initialize variables
      INPUT PROCESS.MODE
      NULL = ''
      OPT='' 
      CLIENT.ID = ''  
      CARRIER.ID = ''  
      CARRIER.NAME = ''
      BILL.DATE = DATE()
      IOT = ''
      ORIG.ZIP = ''
      DEST.ZIP = ''
      FGC = 0 
      CW.MODE = 'INPUT'
      MC.MODE = 'INPUT'
      GOSUB RESET.VARIABLES
      
      PROMPT ''
      PROG.NAME = 'RATER.V3'             
      PROG.DESC='Freight Bill ':OCONV(PROCESS.MODE,'MCT'):'r'
      PACK.NAME = 'AFS Freight Billing System'

      CALL GET.USER.NEW(USER,CH.NUM)
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'RATER.V2' ; UPL.VOUT = ''     
      UPL.VIN<3> = USER
      UPL.VIN<4> = CH.NUM
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       
      
      RL.FERRY.ZIP=''                    
      RL.FERRY.ZIP<1,-1>='27915'         
      RL.FERRY.ZIP<1,-1>='27920'         
      RL.FERRY.ZIP<1,-1>='27936'         
      RL.FERRY.ZIP<1,-1>='27943'         
      RL.FERRY.ZIP<1,-1>='27960'         
      RL.FERRY.ZIP<1,-1>='27968'         
      RL.FERRY.ZIP<1,-1>='27972'         
      RL.FERRY.ZIP<1,-1>='27982'         
      RL.FERRY.ZIP<1,-1>='48028'         
      RL.FERRY.ZIP<1,-1>='98261'         
      RL.FERRY.ZIP<1,-1>='98243'         
      RL.FERRY.ZIP<1,-1>='98245'         
      RL.FERRY.ZIP<1,-1>='98279'         
      RL.FERRY.ZIP<1,-1>='98280'         
      RL.FERRY.ZIP<1,-1>='98297'         
      RL.FERRY.ZIP<1,-1>='98286'         
      RL.FERRY.ZIP<1,-1>='98250'         
      RL.FERRY.ZIP<1,-1>='98070'         
      RL.FERRY.ZIP<1,-1>='98110'               
            
      * Open general files
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT("CARRIERS",PROG.NAME)
      END
      OPEN '','ZIP.LINE.ITEM' TO F.ZIP.LINE.ITEM ELSE        
         CALL OPEN.ABORT('ZIP.LINE.ITEM',PROG.NAME)                   
      END                                
      OPEN '','SCAC.XREF' TO SCAC.XREF ELSE                  
         CALL OPEN.ABORT('SCAC.XREF',PROG.NAME)              
      END  
      OPEN '','ZIPS' TO ZIPS ELSE     
         CALL OPEN.ABORT('ZIPS',PROG.NAME)    
      END                                           
      

*********************************************************************
* MAIN PROCESSING
*********************************************************************
      GOSUB GET.SCREEN.DSP

*********************************************************************
50:   * Enter client number
*********************************************************************
      PRINT SCREEN.DSP:
      IF CLIENT.MODE THEN GOTO 55
      SEQ.FLAG = 0
      GOT.ACC.CODES=0                    
      HELP = "Enter the client number [X] = Exit [EX] = Exit"
      IF CLIENT.ID = '' THEN MASK = '#####' ELSE MASK = CLIENT.ID
      CALL GEN.IN(9,2,MASK,'',Q,0,20,'','',2,-5,2,1,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'EX' ! QI = 'X'
            STOP
         CASE QI = '' & CLIENT.ID = ''
            STOP
         CASE QI = ''
            Q = CLIENT.ID
         CASE NOT(QI MATCHES "0N")
            VIN=0                        ; * Starting Chars In
            VOUT=''
            CALL SOUNDEX.DISPLAY.NEW(VIN,VOUT,QI,'BCUST','SDX.CLIENTS,NAME',2,ITEM.LIST)
            PRINT SCREEN.DSP:
            BEGIN CASE
               CASE ITEM.LIST = ''
                  IF CLIENT.MODE THEN STOP ELSE GOTO 50
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
                  IF CLIENT.MODE THEN STOP ELSE GOTO 50
               CASE 1
                  DATA ITEM.LIST<1>
                  IF CLIENT.MODE THEN STOP ELSE GOTO 50
            END CASE
         CASE NUM(QI)
            Q = QI'R%5'
         CASE 1
            IF CLIENT.MODE THEN STOP ELSE GOTO 50
      END CASE

      IF CLIENT.ID # Q THEN CLIENT.ID = Q'R%5'

*********************************************************************
55:   * Client Info
*********************************************************************
      MATREAD CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
         CALL ELINE("ERROR - Client ":CLIENT.ID:" not on file.")
         CLIENT.ID = ''
      END
      VENDOR.QUOTE.LIMIT.PERC=''               
      CLIENT.AUDIT=1
      CLIENT.NAME = CL.NAME
      CLIENT.CITY = CL.CITY
      CLIENT.STATE = CL.ST
      ZIP.LEN = CL.ZIP.FLAG
      ZIP.LEN='C'                        ; * Force Canadian option so Jen can check rates
      IF ZIP.LEN=6 OR ZIP.LEN=5 OR ZIP.LEN='C' ELSE
         CALL ELINE("Cannot Use Bill ":PROCESS.MODE:"r! Zip in Client Maintenance is not 5, 6, or C")
         CLIENT.ID = ''
         IF CLIENT.MODE THEN STOP ELSE GOTO 50
      END
      IN.QUOTE.PERC = CLIENT.REC(136)<1,1>
      OUT.QUOTE.PERC = CLIENT.REC(137)<1,1>
      TP.QUOTE.PERC = CLIENT.REC(138)<1,1>
      FORCE.BENCH.MIN=CLIENT.REC(188)    
      IF PROCESS.MODE = 'Quote' AND (IN.QUOTE.PERC = 'NO' OR OUT.QUOTE.PERC='NO' OR TP.QUOTE.PERC='NO') THEN
         CALL ELINE("Cannot Use Quoter on Client ":CLIENT.ID:" ":CLIENT.NAME:", please call Auditor for quote!")
         CLIENT.ID = ''
         GO 50
      END
      IF PROCESS.MODE = 'Quote' AND (IN.QUOTE.PERC = '' OR OUT.QUOTE.PERC = '' OR TP.QUOTE.PERC = '') THEN
         CALL ELINE("Client ":CLIENT.ID:" ":CLIENT.NAME:" has not been set up for quotes!")
         CLIENT.ID = ''
         GO 50
      END
      HIN = CLIENT.REC(240) ; HOUT = ""  
      CALL CLIENT.HL(HIN,HOUT) ; HLB = HOUT<1,1> ; HLA = HOUT<1,2>     
      CRT @(9,2):CLIENT.ID:' ':HLB:CLIENT.NAME:HLA:@(-4):
      IF CL.AUDITOR='' THEN
         CALL ELINE("Client: ":CLIENT.ID:" ":CLIENT.NAME:" Does Not Have an Auditor")
         AUDITOR.TEXT='None-Assigned'
      END ELSE
         AUDITOR.TEXT=CL.AUDITOR
      END
      CRT @(32,0):AUDITOR.TEXT'L#20'

*********************************************************************
100:  * Carrier Info
*********************************************************************
      IF FGC=1 THEN
         GOSUB RESET.VARIABLES           ; * (Reset In-Loop Variables)
         PRINT SCREEN.DSP:
         GOSUB PAINT.SCR.DATA
         FGC=0
      END
      IF CARRIER.ID # '' THEN MASK = CARRIER.ID'R%5' ELSE MASK = '#####'
      HELP = "Car Number [Enter]-All Carriers [X]=Back [EX]it [L]ist On-Line Audit Carriers"
      CALL GEN.IN(9,3,MASK,'',Q,0,20,'','',2,-5,3,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            CRT @(9,3):@(-4):
            IF CLIENT.MODE THEN STOP ELSE GOTO 50
         CASE QI = 'EX'
            STOP
         CASE QI = ' '
            Q=''
            CARRIER.TEXT=''
*         CASE QI = "L"
*            EXECUTE 'SORT FB.AUDIT,':AUDIT.CLIENT.ID:' BY CARRIER.NAME CARRIER.NAME CARRIER.CITY CARRIER.STATE 13 11'
*            CALL ELINE('')
*            PRINT SCREEN.DSP:
*            GOSUB PAINT.SCR.DATA
*            GOTO 100
         CASE NOT(QI MATCHES "0N")
            VIN=0                        ; * Starting Chars In
            VOUT=''
            CALL SOUNDEX.DISPLAY.NEW(VIN,VOUT,QI,'CARRIERS','SDX.CARRIER,NAME','1,2,3,4',ITEM.LIST)
            PRINT SCREEN.DSP:
            GOSUB PAINT.SCR.DATA
            BEGIN CASE
               CASE ITEM.LIST = ''
                  GOTO 100
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
                  GOTO 100
               CASE ITEM.LIST # ''
                  DATA ITEM.LIST<1>
                  GOTO 100
            END CASE
         CASE QI = ''
            Q = CARRIER.ID
         CASE NUM(QI)
            Q = QI'R%5'
         CASE 1
            GOTO 100
      END CASE
      CARRIER.ID = Q
      
      IF CARRIER.ID='' THEN FGC=1 ELSE FGC=0
      * All Carriers
      IF FGC THEN
         CRT @(9,3):"All Carriers Setup For On-Line Audit"
         GO 200                          ; * Bill Date
      END      
      
      * Single Carrier
      CALL CLR.CONTROL(CARRIER.ID)
      GOT.ACC.CODES=0                    
      READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE
         CALL ELINE("ERROR - Carrier ":CARRIER.ID:" not on file.")
         CARRIER.ID=''
         GOTO 100
      END
      LTL.CAR=CARRIER.REC<44>=1
      CARRIER.NAME = CARRIER.REC<1>
      CARRIER.STREET = TRIM(CHANGE(CARRIER.REC<2>,@VM,' '))
      CARRIER.CITY = CARRIER.REC<3>
      CARRIER.STATE = CARRIER.REC<4>
      CARRIER.TEXT=TRIM(CARRIER.ID:' ':CARRIER.NAME:' ':CARRIER.STREET:' ':CARRIER.CITY)
      CRT @(9,3):CARRIER.TEXT[1,70]:
      CARRIER.SCAC=CARRIER.REC<12>       
      CARRIER.TYPE='A'                   
      IF CARRIER.REC<44>='6' THEN        
         CARRIER.TYPE='B'                
      END                                

*********************************************************************
200:  * Get Bill Date
*********************************************************************
      IF BILL.DATE='' THEN
         BILL.DATE=DATE()
         MASK=BILL.DATE'D2/'
      END ELSE
         MASK=BILL.DATE'D2/'
      END
      HELP="Enter the Pro Date (Shipment Date)"
      CALL GEN.IN(6,5,MASK,'DATE',Q,0,8,'L','',2,6,5,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      IF QI='X' THEN GOTO 100
      IF QI='EX' THEN GOTO 9000
      IF QI='' THEN
         IF PROCESS.MODE = 'Quote' THEN BILL.DATE=DATE()
         IF BILL.DATE#'' THEN Q=BILL.DATE ELSE
            CALL ELINE('Entry is Required')
            GOTO 200
         END
      END
      IF Q > DATE() THEN
         CALL ELINE('Warning - This date is in the Future!!!! Be Careful!')
      END
      IF Q < DATE()-182 THEN
         CALL ELINE("Warning - This date is older than 6 months")
      END
      BILL.DATE=Q
      PRINT @(6,5):(BILL.DATE'D2/')'L#8':
      LOGISTICS=(CL.LOGISTICS="Y") & (BILL.DATE >= CLIENT.REC(149))   

*********************************************************************
300:  * Get Inbound or Outbound
*********************************************************************
      MASK = IOT'L#2'
      HELP = 'Enter [I]=Inbound, [O]Outbound, or [T]hird Party [X]=Back [EX]=Exit'
      CALL GEN.IN(22,5,MASK,'',Q,0,2,'','',2,-2,5,0,QI,HELP,0,23)
      QI = OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI = 'X'
            CRT @(22,5):IOT:
            GOTO 200
         CASE QI = 'EX'
            GOTO 9000
         CASE QI = 1 ! QI = 'I'
            Q = 'I'
            TEXT = 'Inbound'
            IOT.AUDIT = 'I'
         CASE QI = 3 ! QI = 'T'

            Q = 'T'
            TEXT = 'Third Party'
            IOT.AUDIT = 'I'
         CASE QI = 0 ! QI = 'O'

            Q = 'O'
            TEXT = 'Outbound'
            IOT.AUDIT = 'O'
         CASE QI = ''
            IF IOT # '' THEN Q = IOT ELSE
               CALL ELINE('Entry is Required')
               GOTO 300
            END
         CASE 1
            CALL ELINE('Must be <I>nbound or <O>utbound or <T>hird party')
            GOTO 300
      END CASE
      BEGIN CASE                        
         CASE Q='I' ; SAVINGS.QUOTE.PERC=IN.QUOTE.PERC       
         CASE Q='O' ; SAVINGS.QUOTE.PERC=OUT.QUOTE.PERC      
         CASE Q='T' ; SAVINGS.QUOTE.PERC=TP.QUOTE.PERC       
      END CASE                        
      IF PROCESS.MODE = 'Quote' AND SAVINGS.QUOTE.PERC = 'NO' THEN
         PRINT @(22,5):Q'L#2':
         CALL ELINE("Cannot Use Quoter on ":TEXT:" has not been set up, please call Auditor!")
         GOTO 300
      END
      IOT = Q
      PRINT @(22,5):IOT'L#2':

*********************************************************************
400:  * Get Origin Zip Code
*********************************************************************
      HELP = "Enter the Origination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                              ; * Starting Zip Character Count
      VIN<2>=6                           ; * Column For Input
      VOUT=''
      CALL FB.2.1.CSZ.NEW(VIN,VOUT,6,ORIG.ZIP,HELP,ZIP.LEN,BACK.FLAG,ORIG.CITY,ORIG.STATE)
      IF BACK.FLAG THEN
         BACK.FLAG=''
         GO 300
      END
      ORIG.ZIP=OCONV(ORIG.ZIP,'MCU')
      IF HELP = 'S' ! HELP = '' THEN
         PRINT SCREEN.DSP:
         GOSUB PAINT.SCR.DATA
      END
      IF ORIG.CITY # '' THEN
         ORIG.DESC = ORIG.CITY:', ':ORIG.STATE
      END ELSE
         ORIG.DESC = ORIG.STATE
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00114' THEN    
         LOCATE ORIG.ZIP IN RL.FERRY.ZIP<1> SETTING RLPOS THEN         
            CALL ELINE('Cannot Quote. ':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' requires a Ferry Fee for R&L')        
            GOTO 400                   
         END                           
      END                              

      IF PROCESS.MODE='Quote' AND CARRIER.ID='00171' AND ORIG.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' No service for FedEx Economy')
         GOTO 400
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00212' AND ORIG.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' No service for FedEx Priority')
         GOTO 400
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00018' AND ORIG.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' No service for Saia')
         GOTO 400
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00014' AND ORIG.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' No service for UPS Freight')
         GOTO 400
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00601' AND ORIG.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':ORIG.ZIP:' - ':ORIG.CITY:', ':ORIG.STATE:' No service for Estes')
         GOTO 400
      END
      CRT @(6,6):ORIG.ZIP'L#6':' ':ORIG.DESC'L#25'           

*********************************************************************
500:  * Get Destination Zip Code
*********************************************************************
      HELP = "Enter the Destination Zip Code. [S]=Search. [X]=Back. [EX]=Exit."
      VIN=0                              ; * Starting Zip Character Count
      VIN<2>=6                           ; * Column For Input
      VOUT=''
      CALL FB.2.1.CSZ.NEW(VIN,VOUT,7,DEST.ZIP,HELP,ZIP.LEN,BACK.FLAG,DEST.CITY,DEST.STATE)
      IF BACK.FLAG THEN
         BACK.FLAG=''
         GO 400
      END
      DEST.ZIP=OCONV(DEST.ZIP,'MCU')
      IF HELP = 'S' ! HELP = '' THEN
         PRINT SCREEN.DSP:
         GOSUB PAINT.SCR.DATA
      END
      IF DEST.CITY # '' THEN
         DEST.DESC = DEST.CITY:', ':DEST.STATE
      END ELSE
         DEST.DESC = DEST.STATE
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00114' THEN   
         LOCATE DEST.ZIP IN RL.FERRY.ZIP<1> SETTING RLPOS THEN        
            CALL ELINE('Cannot Quote. ':DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' requires a Ferry Fee for R&L')       
            GOTO 500                   
         END                           
      END                              
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00171' AND DEST.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' No service for FedEx Economy')
         GOTO 500
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00212' AND DEST.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' No service for FedEx Priority')
         GOTO 500
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00018' AND DEST.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' No service for Saia')
         GOTO 500
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00014' AND DEST.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' No service for UPS Freight')
         GOTO 500
      END
      IF PROCESS.MODE='Quote' AND CARRIER.ID='00601' AND DEST.ZIP='98250' AND CLIENT.ID='01862' THEN
         CALL ELINE('Cannot Quote. ':DEST.ZIP:' - ':DEST.CITY:', ':DEST.STATE:' No service for Estes')
         GOTO 500
      END
      CRT @(6,7):DEST.ZIP'L#6':' ':DEST.DESC'L#25'       
      IF DEST.ZIP = ORIG.ZIP THEN
         CALL ELINE('Warning - Origin and destination zip are the same.')
      END
      CDN.ROUTE=0                        
      IF NOT(NUM(ORIG.ZIP)) THEN CDN.ROUTE=1 
      IF NOT(NUM(DEST.ZIP)) THEN CDN.ROUTE=1 
      IF ORIG.ZIP MATCHES '1A1N1A1N1A1N' THEN
         ORG.CAN=1                   
      END ELSE                       
         ORG.CAN=0                   
      END                            
      IF DEST.ZIP MATCHES '1A1N1A1N1A1N' THEN   
         DST.CAN=1                   
      END ELSE                       
         DST.CAN=0                   
      END                            

*********************************************************************
590:  * Get Freight Bill Details (Class & Weights) of each line item
*    * Just Enter The Data for Misroutes
*********************************************************************
      CW.SEL = 0
      MC.SEL = 0
      RWS.TIMES = 0                  
      FOR X=1 TO 14
         LINE=REM(X,7)
         IF LINE=0 THEN LINE=7
         LINE=LINE+10
         IF X < 8 THEN OFFSET=0 ELSE OFFSET=18
         IF CLASS.WGT<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(0+OFFSET,LINE):SPACE(15):
            END ELSE
               PRINT @(0+OFFSET,LINE):X'R%2':SPACE(13):
            END
         END ELSE
            PRINT @(0+OFFSET,LINE):X'R(%2 )':      ; * Selection
            PRINT @(3+OFFSET,LINE):CLASS.WGT<1,X>'R(#5 )':   ; * Class
            PRINT @(9+OFFSET,LINE):CLASS.WGT<2,X>'R(#6 )':   ; * Weight
         END
      NEXT X

*********************************************************************
600:  * Enter Line Number for Class Weight
*********************************************************************
      IF CW.MODE='INPUT' THEN
         CW.SEL=CW.SEL+1
         QI=CW.SEL
         IF CW.SEL GT 14 THEN
            CW.MODE='EDIT'
            GO 700
         END
      END ELSE
         HELP="Enter Class-Weight Line Number, <RETURN>=Done, 'X'=Back, 'EX'=Exit."
         CALL GEN.IN(0,22,'Enter Class-Weight line number. ##','',Q,0,2,'','',0 ,-2,22,0,QI,HELP,0,23)
      END
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            GO 700                       ; *** Done with Line Items
         CASE QI='X'
            GO 500
         CASE QI='EX'
            X.EX.FLAG='EX'
            GO 9000
         CASE NUM(QI)
*            IF INQUIRE THEN
*               CALL ELINE('Can not access detail in inquiry!')
*            END ELSE
               IF QI > 1 THEN
                  IF CLASS.WGT<1,QI-1>='' THEN
                     CALL ELINE("Cannot Skip a line.  You must select the next blank line")
                     GO 600
                  END
               END
               IF QI > 14 THEN
                  CALL ELINE("Maximum line number is 14")
                  GO 700
               END
               CW.SEL=QI
               GOSUB 620
               IF QI='X' AND CW.SEL=1 THEN GO 500
               IF OPT='V' & QI='' THEN GO 700      ; ** Done with Class Weight
*            END
      END CASE
      GO 600

*********************************************************************
620:  * Enter Class Weight Line Items
*********************************************************************
      IF CW.SEL LT 1 ! CW.SEL GT 14 THEN
         CALL ELINE('Invalid entry.')
         RETURN
      END
      LINE=REM(CW.SEL,7)
      IF LINE=0 THEN LINE=7
      IF CW.SEL < 8 THEN OFFSET=0 ELSE OFFSET=18
      LINE=LINE+10

*********************************************************************
640:  * Enter the Line Item Class
*********************************************************************
      HELP="Enter the Class ''=ACCEPT 'X'=Back 'EX'=Exit [SPACE]=Clear"
      IF OPT='V' THEN MASK=SPACE(5) ELSE MASK=CLASS.WGT<1,CW.SEL>'R#5'
      IF CW.MODE='EDIT' AND CLASS.WGT<1,CW.SEL>='' THEN CW.MODE='INPUT'
      CALL GEN.IN(3+OFFSET,LINE,MASK,'',Q,0,5,'','',2,-5,LINE,0,QI,HELP,0,23)
      IF QI=' ' THEN CLASS.WGT<1,CW.SEL>='' ; QI=''
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=CLASS.WGT<1,CW.SEL>
            IF Q='' THEN                 ; ** Done with Line Items
               IF CW.SEL=1 THEN
                  CALL ELINE('Error! You Must Enter at Least One Class & Weight!')
                  GO 640
               END
               CW.SEL=CW.SEL-1           ; * Reset Entry Point for X-Back From Misc Chg
               RETURN TO 700
            END
         CASE QI='X'
            CRT @(3+OFFSET,LINE):CLASS.WGT<1,CW.SEL>'R(#5 )'
            IF CW.SEL=1 THEN
               RETURN TO 500
            END ELSE
               CW.SEL=CW.SEL-1
               LINE=REM(CW.SEL,7)
               IF LINE=0 THEN LINE=7
               IF CW.SEL < 8 THEN OFFSET=0 ELSE OFFSET=18
               LINE=LINE+10
               GO 660
            END
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NUM(QI)
            IF QI LE 0 THEN
               CALL ELINE('Must be a number greater than 0')
               GO 640
            END
         CASE QI MATCHES "2N" OR QI MATCHES "2N.1N" OR QI MATCHES "3N"
            Q=QI
         CASE 1
            CALL ELINE("Must be NN or NNN or NN.N")
            GO 640
      END CASE
      IF Q=77.5 THEN Q=77
      IF Q=92.5 THEN Q=92
      LOCATE Q IN VALID.CLASSES<1> SETTING POS ELSE
         CALL ELINE("Invalid Class")
         GO 640
      END
      CLASS.WGT<1,CW.SEL>=Q
      PRINT @(3+OFFSET,LINE):Q'R(#5 )'

*********************************************************************
660:  * Enter the Line Item Weight
*********************************************************************
      HELP="Enter the Weight ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF OPT='V' THEN MASK=SPACE(6) ELSE MASK=CLASS.WGT<2,CW.SEL>'R#6'
      CALL GEN.IN(9+OFFSET,LINE,MASK,'',Q,0,6,'','',2,-6,LINE,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=CLASS.WGT<2,CW.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               GO 660
            END
         CASE QI='X'
            CRT @(9+OFFSET,LINE):CLASS.WGT<2,CW.SEL>'R(#6 )'
            GO 640
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NUM(QI)
            IF QI LE 0 OR INDEX(QI,'.',1) THEN
               CALL ELINE('Must be a Whole Number greater than 0')
               GO 660
            END
         CASE QI MATCHES "0N"
            Q=QI
         CASE 1
            CALL ELINE("Must be a positive whole number")
            GO 660
      END CASE
      CLASS.WGT<2,CW.SEL>=Q
      PRINT @(9+OFFSET,LINE):Q'R(#6 )'
      RETURN

**********************************************************************
700:  * Get Line Number for Misc Charge Entry
**********************************************************************
      GOSUB CLEAR.MC.WINDOW             

      IF NOT(FGC) THEN                   
         TOT.WEIGHT=SUM(CLASS.WGT<2>)    
         LOCATE TOT.WEIGHT IN CARRIER.REC<70> BY "AR" SETTING WEIGHT.POS ELSE NULL         
         TRANSPORT.MODE = OCONV(CARRIER.REC<71,WEIGHT.POS>,'MCU')      
         ZIP.LINE.ID=CARRIER.ID:'*':CLIENT.ID:'*':TRANSPORT.MODE:'*':IOT         
         READ DZIP.LINE FROM F.ZIP.LINE.ITEM,ZIP.LINE.ID ELSE          
            ZIP.LINE.ID=CARRIER.ID:'*ALL*':TRANSPORT.MODE:'*':IOT      
            READ DZIP.LINE FROM F.ZIP.LINE.ITEM,ZIP.LINE.ID ELSE DZIP.LINE=''    
         END                             
         IF DZIP.LINE#'' THEN            
            LOCATE ORIG.ZIP IN DZIP.LINE<1> BY 'AR' SETTING ZIP.POS THEN         
               ZIP.POS=ZIP.POS+1         
            END                          
            IF ZIP.POS > 1 THEN          
               ZIP.POS=ZIP.POS-1         
               IF DZIP.LINE<2,ZIP.POS> >= ORIG.ZIP THEN      
                  NUM.OF.SVM = DCOUNT(DZIP.LINE<3,ZIP.POS>,@SVM)       
                  FOR Z = 1 TO NUM.OF.SVM          
                     IF DZIP.LINE<4,ZIP.POS,Z>='O' OR DZIP.LINE<4,ZIP.POS,Z>='B' THEN      
                        LOCATE DZIP.LINE<3,ZIP.POS,Z> IN MISC.CHG<1> SETTING DUMMY.POS ELSE          
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MISC.CHG<1,1>       
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MANDITORY.CHG<1,1>  
                        END              
                     END                 
                  NEXT Z                 
               END                       
            END                          
            LOCATE DEST.ZIP IN DZIP.LINE<1> BY 'AR' SETTING ZIP.POS THEN         
               ZIP.POS=ZIP.POS+1         
            END                          
            IF ZIP.POS > 1 THEN          
               ZIP.POS=ZIP.POS-1         
               IF DZIP.LINE<2,ZIP.POS> >= DEST.ZIP THEN      
                  NUM.OF.SVM = DCOUNT(DZIP.LINE<3,ZIP.POS>,@SVM)       
                  FOR Z = 1 TO NUM.OF.SVM          
                     IF DZIP.LINE<4,ZIP.POS,Z>='D' OR DZIP.LINE<4,ZIP.POS,Z>='B' THEN      
                        LOCATE DZIP.LINE<3,ZIP.POS,Z> IN MISC.CHG<1> SETTING DUMMY.POS ELSE          
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MISC.CHG<1,1>       
                           INS DZIP.LINE<3,ZIP.POS,Z> BEFORE MANDITORY.CHG<1,1>  
                        END              
                     END                 
                  NEXT Z                 
               END                       
            END                          
         END                             
      END                                
      IF MC.MODE='INPUT' THEN
         MC.SEL=MC.SEL+1
         QI=MC.SEL
         IF MC.SEL GT 7 THEN             
            MC.MODE='EDIT'
            GO 700                       
         END
      END ELSE
         HELP="Enter Misc Charge Line Number, <RETURN>=Done, 'X'=Back, 'EX'=Exit."
         CALL GEN.IN(0,22,'Enter Misc Charge line number. ##','',Q,0,2,'','',0,-2,22,0,QI,HELP,0,23)
      END
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI=''
            GOSUB CLEAR.MC.WINDOW       
            GO 1000                      ; *** Done with Line Items
         CASE QI='X'
            GO 600
         CASE QI='EX'
            X.EX.FLAG='EX'
            GO 9000
         CASE NUM(QI)
*            IF INQUIRE THEN
*               CALL ELINE('Can not access detail in inquiry!')
*            END ELSE
               IF QI > 1 THEN
                  IF MISC.CHG<1,QI-1>='' THEN
                     CALL ELINE("Cannot Skip a line.  You must select the next blank line")
                     GO 700
                  END
               END
               IF QI > 7 THEN
                  CALL ELINE("Maximum line number is 7") 
                  GO 700
               END
               MC.SEL=QI
               LU.LINE = 1              
               GOSUB 720
               IF QI='X' AND MC.SEL=1 THEN GO 600
               IF OPT='V' & QI='' THEN GO 1000     ; ** Done with Line Items
*            END
      END CASE
      GO 700

*********************************************************************
720:  * Get Charge Code, Contract Amount, & Benchmark Amount
*********************************************************************
      IF MC.SEL LT 1 ! MC.SEL GT 7 THEN  
         CALL ELINE('Invalid entry. Enter a number between 1 and 7')  
         RETURN
      END
      LINE=MC.SEL ; OFFSET=0
      LINE=LINE+10
      PAGE = 1                           
      
**********************************************************************
740:  * Enter the Misc Charge Code
**********************************************************************
      HELP="Enter the Misc Charge Code, 'L'IST ''=ACCEPT [SPACE]=Clear 'X'=Back 'EX'=Exit"          
      IF OPT='V' THEN MASK=SPACE(4) ELSE MASK=MISC.CHG<1,MC.SEL>'L#4'
      IF MC.MODE='EDIT' AND MISC.CHG<1,MC.SEL>='' THEN MC.MODE='INPUT'
      CHOICE.STR=''
      CHOICE.ARRAY = ''                  
      
*      BEGIN CASE
*         CASE MAX.CHOICE=1
*            CRT @(0,22):@(-4):("Choices:":CHOICE.STR)[1,79]
*         CASE MAX.CHOICE>1
*         CASE 1
*            NULL
*      END CASE

*      IF NOT(GOT.ACC.CODES) THEN GOSUB GET.ACC.CHARGES      
*      GOSUB SETUP.MC.DISPLAY            
      MC.ATTR = 1                        
      IF NOT(FGC) THEN GOSUB DISP.MISC.CHARGES     

*********************************************************************
745:  *
*********************************************************************
      HELP="Code  OR line No. ''=End. 'B'=Back Pg. 'F'=Fwd Pg. 'X'=Back. 'EX'=Exit."
      CALL GEN.IN(39+OFFSET,LINE,MASK,'',Q,0,4,'','',0,39+OFFSET,LINE,0,QI,HELP,0,23)      
      QI = OCONV(QI,"MCU")
      Q = OCONV(Q,"MCU")
      BEGIN CASE
         CASE QI='B'
            MC.ATTR = MC.ATTR - 14
            IF MC.ATTR LE 8 THEN MC.ATTR=1
            GOSUB DISP.MISC.CHARGES
            GOSUB 745
         CASE QI='F'
            IF CHOICE.ARRAY<MC.ATTR+1> = "" THEN
               IF MC.ATTR GT 8 THEN MC.ATTR = MC.ATTR - 8
               CALL ELINE("No more pages!")
               GOSUB DISP.MISC.CHARGES
               GOTO 745
            END
            GOSUB DISP.MISC.CHARGES
            GOTO 745
      END CASE
      CRT @(0,22):@(-4):
      QI=OCONV(QI,'MCU')
      IF QI=' ' THEN
         IF MISC.CHG<1,MC.SEL>#'' THEN   
            LOCATE MISC.CHG<1,MC.SEL> IN MANDITORY.CHG<1> SETTING DUMMY.POS THEN          
               CALL ELINE('This is a manditory charge for this zip code. It cannot be deleted')      
               GOTO 720                 
            END                         
         END                             
         IF MC.SEL<4 AND MISC.CHG<1,MC.SEL+1>#'' THEN
            CALL ELINE('Error!  You can only CLEAR the last charge listed')
            GO 720
         END
         MISC.CHG<1,MC.SEL>=''
         MISC.CHG<2,MC.SEL>=''
         MISC.CHG<3,MC.SEL>=''
         MISC.CHG<4,MC.SEL>=''           
         PRINT @(44,LINE):SPACE(13):     ; * Clear the Amounts
         QI=''
         Q=''
      END
      IF QI#'' AND QI MATCHES '0N' THEN
*         IF QI > 0 AND QI LE (MAX.CHOICE+ACC.CNT) THEN       
*            Q=CHOICE.ARRAY<QI>           
*            QI=CHOICE.ARRAY<QI>          
*            IF QI='' THEN CALL ELINE("Invalid Choice") ; GO 740
*            CRT @(39+OFFSET,LINE):QI:
*         END
         LOCATE Q IN MISC.CHG<1> SETTING MPOS THEN          
            CALL ELINE(Q:" has already been used")          
            GO 740
         END                             
      END
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<1,MC.SEL>
            IF Q='' THEN
               GOSUB CLEAR.MC.WINDOW     
               MC.SEL=MC.SEL-1
               RETURN TO 1000
            END
         CASE QI='X'
            CRT @(39+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'
            IF MC.SEL=1 THEN
               MC.SEL=MC.SEL-1
               RETURN TO 600
            END ELSE
               MC.SEL=MC.SEL-1
               LINE=REM(MC.SEL,2)
               IF LINE=0 THEN LINE=2
               IF MC.SEL < 3 THEN OFFSET=0 ELSE OFFSET=25
               LINE=LINE+10
               GO 720                    ; * Previous Code Line
            END
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
      END CASE

      IF FGC=1 THEN
         MISC.CHG<1,MC.SEL>=Q
         RETURN                          ; * No need to "Get Amounts" Just Need Code
      END
      MISC.CHG<4,MC.SEL>=0             
      AUDIT.ACC=0                      
      CRT @(39+OFFSET,LINE):MISC.CHG<1,MC.SEL>'L(#4 )'
*      CRT @(44+OFFSET,LINE):CUR.CONTR.MISC.AMT'R26(#6 )'
*      CRT @(51+OFFSET,LINE):CUR.BENCH.MISC.AMT'R26(#6 )'
      GOSUB CLEAR.MC.WINDOW            

      RETURN                             ; * Go Get Next Code

*********************************************************************
760:  * Enter the Misc Charge Contract Amount
*********************************************************************
      HELP="Enter Contract (Carrier) Amount for this code ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF OPT='V' THEN MASK=SPACE(6) ELSE MASK=MISC.CHG<2,MC.SEL>'R26#6'
      CALL GEN.IN(44+OFFSET,LINE,MASK,'AMT2',Q,0,6,'','',2,-6,LINE,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<2,MC.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               GO 760
            END
         CASE QI='X'
            CRT @(44+OFFSET,LINE):MISC.CHG<2,MC.SEL>'R26(#6 )'
            GO 740
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NOT(NUM(QI))
            CALL ELINE("Must be Numeric")
            GO 760
         CASE CLIENT.ID='00664' & CARRIER.ID='00377'
            IF Q < 1 OR Q > 25000 THEN
               CALL ELINE("Must be Greater than 0 and less than 250.00 for Liberto-Benton")
               GO 760
            END
         CASE CLIENT.ID='00886' & CARRIER.ID='00001'
            IF Q < 1 OR Q > 25000 THEN
               CALL ELINE("Must be Greater than 0 and less than 250.00 for Liberto-Benton")
               CC+=1
               GO 760
            END
         CASE Q < 1 OR Q > 9999
            CALL ELINE("Must be Greater than 0 and less than 100.00")
            GO 760
      END CASE
      MISC.CHG<2,MC.SEL>=Q
      PRINT @(44+OFFSET,LINE):Q'R26(#6 )'
      
      RETURN

*********************************************************************
780:  * Enter the Misc Charge Benchmark Amount
*********************************************************************
      HELP="Enter Benchmark (Logistics) Amount for this code ''=ACCEPT 'X'=Back 'EX'=Exit"
      IF MISC.CHG<3,MC.SEL>='' THEN MISC.CHG<3,MC.SEL>=MISC.CHG<2,MC.SEL>        ; * Default to Contr
      IF OPT='V' THEN MASK=SPACE(6) ELSE MASK=MISC.CHG<3,MC.SEL>'R26#6'
      CALL GEN.IN(51+OFFSET,LINE,MASK,'AMT2',Q,0,6,'','',2,-6,LINE,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' & OPT NE 'V'
            Q=MISC.CHG<3,MC.SEL>
            IF Q='' THEN
               CALL ELINE("Entry is required")
               GO 780
            END
         CASE QI='X'
            CRT @(51+OFFSET,LINE):MISC.CHG<3,MC.SEL>'R26(#6 )'
            GO 760
         CASE QI='EX'
            X.EX.FLAG='EX'
            RETURN TO 9000
         CASE NOT(NUM(QI))
            CALL ELINE("Must be Numeric")
            GO 780
         CASE CLIENT.ID='00664' & CARRIER.ID='00377'
            IF Q < 1 OR Q > 25000 THEN
               CALL ELINE("Must be Greater than 0 and less than 250.00 for Liberto-Benton")
               GO 760
            END
         CASE Q < 1 OR Q > 9999
            CALL ELINE("Must be Greater than 0 and less than 100.00")
            GO 780
         CASE Q < MISC.CHG<2,MC.SEL>     ; * Less than Contract
            CALL ELINE("Cannot Be Less than Contract Amount!")
            GO 780
      END CASE
      MISC.CHG<3,MC.SEL>=Q
      PRINT @(51+OFFSET,LINE):Q'R26(#6 )'
      
      RETURN

* End of Details

*********************************************************************
1000: 
*********************************************************************
      CLASSES=CLASS.WGT<1>
      WEIGHTS=CLASS.WGT<2>
      
      GOSUB CALL.TEMPO.RATER
      
* Need to take the value that have come back from Tempo and plug them into the the WHY display      
      GOSUB WHY.CALCS
      PRINT WHY   
      
      CRT
      CRT
      CRT "Press [ENTER] to Continue...": 
      INPUT NUL    
      
* Display non approved carriers      
      
        
      GOSUB RESET.VARIABLES
      PRINT SCREEN.DSP:
      GOSUB PAINT.SCR.DATA
      GO 200

*********************************************************************
GET.ACC.CHARGES:
*********************************************************************
*      STMT = \SSELECT FB.AUDIT.ACC WITH CARRIER = "\:CARRIER.ID:\" AND WITH CLIENT = "\:AUDIT.CLIENT.ID:\" OR WITH CARRIER = "\:CARRIER.ID:\" AND WITH CLIENT = "ALL"\    
*      EXECUTE STMT CAPTURING OUTPUT
*      ACC.CNT = 0

*      IF @SELECTED GT 0 THEN
*         EOF = "N"
*         LOOP
*            READNEXT ACC.ID ELSE EOF = "Y"
*         UNTIL EOF = "Y" DO
*            W.ACC.CODE = FIELD(ACC.ID,"*",2)
*            LOCATE W.ACC.CODE IN CHOICE.ARRAY SETTING POSA ELSE
*               CHOICE.ARRAY<-1> = W.ACC.CODE
*               ACC.CNT += 1
*            END
*         REPEAT
*      END

      RETURN

*********************************************************************
CLEAR.MC.WINDOW:
*********************************************************************
      FOR LN = 18 TO 22
         CRT @(0,LN):@(-4)
      NEXT LN

      RETURN

*********************************************************************
DISP.MISC.CHARGES:* Display available misc charges/Assesorials for the table.  
*********************************************************************
DISP.ARRAY = ''
      CRT @(0,18):STR("-",31):' Available codes ':STR("-",32)      
      ROW.CNT = 0
      MLN = 19
      FOR LNX = 1 TO 4
         CRT @(0,MLN):MC.ATTR'L#3':' ':DISP.ARRAY<MC.ATTR>[1,33] "L#33"
         MC.ATTR += 1
         MLN += 1
      NEXT LNX

      MLN = 19
      FOR LNX = 1 TO 4

         IF LNX = 4 AND CHOICE.ARRAY<MC.ATTR+1> NE '' THEN
            CRT @(40,MLN):"'F' to see more codes"
         END ELSE
            CRT @(40,MLN):MC.ATTR'L#3':' ':DISP.ARRAY<MC.ATTR>[1,33] "L#33"
            MC.ATTR += 1
         END
         MLN += 1
      NEXT LNX

      RETURN

*********************************************************************
GET.SCREEN.DSP:* Display screen to send to subroutine
*********************************************************************
      SCREEN.DSP = @(-1)
      SCREEN.DSP := @( 0, 0):PROG.DESC
      SCREEN.DSP := @(24, 0):'Auditor:'
      CL=78-LEN(PACK.NAME[1,26])
      SCREEN.DSP := @(CL, 0):PACK.NAME[1,26]
      SCREEN.DSP := @(0 , 2):'Client : '
      SCREEN.DSP := @(0 , 3):'Carrier: '
      SCREEN.DSP := @(0 , 4):STR('-',79)
      SCREEN.DSP := @(0 , 5):'Date: '
      SCREEN.DSP := @(15, 5):'I-O-T:'
      SCREEN.DSP := @(0 , 6):'Orig: '
      SCREEN.DSP := @(15, 6):'Range:'    
      SCREEN.DSP := @(0 , 7):'Dest: '
      SCREEN.DSP := @(39, 5):'Substitute Zip: '
      SCREEN.DSP := @(39, 6):'Routing Zip   : '
      SCREEN.DSP := @(39, 7):'Effective Date: '
      SCREEN.DSP := @(66, 5):'Flag    : '
      SCREEN.DSP := @(66, 6):'Table # : '
      SCREEN.DSP := @(66, 7):'Ship Pnt: '
      SCREEN.DSP := @(0 , 9):'Ln Class Weight'
      SCREEN.DSP := @(0 ,10):'-- ----- ------'
      SCREEN.DSP := @(18, 9):'Ln Class Weight'
      SCREEN.DSP := @(18,10):'-- ----- ------'
      SCREEN.DSP := @(36, 9):'Ln Code Contr  Bench'
      SCREEN.DSP := @(36,10):'-- ---- ------ ------'
      FOR X = 1 TO 7
         SCREEN.DSP := @(0,X+10):X'R%2'
         SCREEN.DSP := @(18,X+10):(X+7)'R%2'
         SCREEN.DSP := @(36,X+10):X'R%2'           
      NEXT X

      IF PROCESS.MODE = 'Quote' THEN
         IF CLIENT.MODE THEN
            SCREEN.DSP := @(58,17):'Client Cost: '
         END
         SCREEN.DSP := @(58,18):'Quote Amt  : '
      END ELSE
         SCREEN.DSP := @(58,10):'Benchmark  : '
         SCREEN.DSP := @(58,11):'Cons Var   : '
         SCREEN.DSP := @(70,12):STR('-',9)
         SCREEN.DSP := @(58,13):'Contract   : '
      END

      RETURN
      
*********************************************************************
PAINT.SCR.DATA:*
*********************************************************************
      CRT @(34, 0):AUDITOR.TEXT:
      CRT @( 9, 2):CLIENT.ID:' ':HLB:CLIENT.NAME:HLA:
*      CRT @( 9, 3):CARRIER.TEXT[1,70]:
      CRT @( 6, 5):(BILL.DATE'D2/')'L#8':
      CRT @(22, 5):IOT:
      CRT @( 6, 6):ORIG.ZIP'L#6':' ':ORIG.DESC[1,25]:        
      CRT @(22, 6):VENDOR.QUOTE.LIMIT.PERC 'L#2' :           
      CRT @( 6, 7):DEST.ZIP'L#6':' ':DEST.DESC[1,25]:        
      CRT @(55, 5):SUBST.ZIP:
      CRT @(55, 6):LOOKUP.ZIP:
      IF EFF.DATE#'' THEN CRT @(55, 7):EFF.DATE'D2/':
      FOR X=1 TO 7                       
         LINE=REM(X,2)
         IF LINE=0 THEN LINE=2
         LINE=LINE+10
         IF X < 6 THEN OFFSET=0 ELSE OFFSET=23   
         IF MISC.CHG<1,X>='' OR OPT='V' THEN
            IF OPT='V' THEN
               PRINT @(37+OFFSET,LINE):SPACE(18):
            END ELSE
               PRINT @(39+OFFSET,LINE):SPACE(18):
            END
         END ELSE
            PRINT @(39+OFFSET,LINE):MISC.CHG<1,X>'R(#4 )':   ; * Charge Code
            PRINT @(42+OFFSET,LINE):MISC.CHG<2,X>'R26(#6 )':           ; *Contr Amount
            PRINT @(49+OFFSET,LINE):MISC.CHG<3,X>'R26(#6 )':           ; *Bench Amount
         END
      NEXT X
      
      RETURN

*********************************************************************
RESET.VARIABLES:*
*********************************************************************
      CONSULTING.AMT=''
      MISC.CHG=''
      MANDITORY.CHG=''               
      SUBST.ZIP=''
      LOOKUP.ZIP=''
      EFF.DATE=''
      TEXT=''
      CLASS.WGT=''

      RETURN

*********************************************************************
CALL.TEMPO.RATER:
*********************************************************************      
*PALLETS = 0
*MODE = 'LTL'
*DEBUG
      
      B.DATE = OCONV(BILL.DATE,'D4/')
      B.MM = FIELD(B.DATE,'/',1,1)
      B.DD = FIELD(B.DATE,'/',2,1)
      B.YYYY = FIELD(B.DATE,'/',3,1)
      TEMPO.BILL.DATE = B.YYYY:'-':B.MM:'-':B.DD:'T00:00:00.000Z'
      
      BEGIN CASE
         CASE IOT = "I"
            IN.OUT = 'INBOUND'
         CASE IOT = 'O'
            IN.OUT = 'OUTBOUND'
         CASE IOT = 'T'
            IN.OUT = 'THIRD_PARTY'
      END CASE
            
      READV ORIG.COUNTRY FROM ZIPS, ORIG.ZIP, 3 ELSE
         IF NUM(ORIG.ZIP[1,1]) THEN
            ORIG.COUNTRY = 'US'
         END ELSE
            ORIG.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE ORIG.COUNTRY = 'US'
            ORIG.COUNTRY = 'USA'
         CASE ORIG.COUNTRY = 'CA'
            ORIG.COUNTRY = 'CAN'
         CASE ORIG.COUNTRY = 'MX'
            ORIG.COUNTRY = 'MEX'
      END CASE
      READV DEST.COUNTRY FROM ZIPS, DEST.ZIP, 3 ELSE
         IF NUM(DEST.ZIP[1,1]) THEN
            DEST.COUNTRY = 'US'
         END ELSE
            DEST.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE DEST.COUNTRY = 'US'
            DEST.COUNTRY = 'USA'
         CASE DEST.COUNTRY = 'CA'
            DEST.COUNTRY = 'CAN'
         CASE DEST.COUNTRY = 'MX'
            DEST.COUNTRY = 'MEX'
      END CASE

      IF CARRIER.ID # "" THEN
         SCAC = CARRIER.REC<12>
      END ELSE
         SCAC = ''
      END
      
      * TEMPO.V5
      T.VIN = ''
      T.VIN<1> = CLIENT.ID
      T.VIN<2> = SCAC
      T.VIN<3> = TEMPO.BILL.DATE
      T.VIN<4> = WEIGHTS
      T.VIN<5> = ORIG.CITY
      T.VIN<6> = ORIG.COUNTRY
      T.VIN<7> = ORIG.ZIP
      T.VIN<8> = ORIG.STATE
      T.VIN<9> = DEST.CITY
      T.VIN<10> = DEST.COUNTRY
      T.VIN<11> = DEST.ZIP
      T.VIN<12> = DEST.STATE
      T.VIN<13> = IN.OUT
      T.VIN<15> = CLASSES      
*      T.VIN<16> = SCAC
      
      CALL TEMPO.V5(T.VIN,T.VOUT)

      T.SCAC = T.VOUT<1>
      T.MODE = T.VOUT<2> 
      T.GROSS.RATE = T.VOUT<3> 
      T.UNDISCOUNTED.GROSS = T.VOUT<5>
      T.FUEL.AMT = T.VOUT<7> 
      T.TRANSIT.DAYS = T.VOUT<8>
      T.TARIFF.NAME = T.VOUT<9> 
      T.TARIFF.DATE = T.VOUT<10>
      T.DIRECT = T.VOUT<11>           ; * True/False
      T.FUEL.OFFSET = T.VOUT<12>
      T.MILEAGE = T.VOUT<13>
      T.CHARGE.FLOOR = T.VOUT<14>
      T.CHARGE.MIN.DISCOUNT = T.VOUT<15>
      T.CONTRACT.ID = T.VOUT<16>
      T.EFFECTIVE = T.VOUT<17>
      T.EXPIRATION = T.VOUT<18>
      T.CURRENCY = T.VOUT<19>  
      T.CHARGES = T.VOUT<21>
      T.RATES = T.VOUT<22>
      T.FAKS = T.VOUT<23>
      T.WEIGHTS = T.VOUT<24>
      T.FREIGHT.CLASSES = T.VOUT<25>
      T.DISCOUNT.PCT.USED = T.VOUT<26>
      T.DISCOUNT.RATE = T.VOUT<27>
      T.ACTUAL.WGT = T.VOUT<28>
      T.DEFICIT.WGT = T.VOUT<29>
      T.BILLED.WGT = T.VOUT<30>
      T.MIN.CHARGE = T.VOUT<31>
      T.TOTAL.CHARGE = T.VOUT<32>
      T.DEFICIT.RATE = T.VOUT<33>
      T.DEFICIT.CHARGE = T.VOUT<34>
      T.DISCOUNT.AMT = T.VOUT<35>
      T.EFF.DATE = T.VOUT<36>            

      RETURN

*********************************************************************
WHY.CALCS:
*********************************************************************
      WHY=''
      WHY:=@(38,01):' Eff Dt :':EFF.DATE'D2-':@(56,01):'Rt Zip:':LOOKUP.ZIP:@(70,01)
      WHY:=@(0,01):'Ship Dt: ':BILL.DATE'D2-'
      WHY:=@(0,02):@(-3):'Origin : ':ORIG.ZIP:' ':ORIG.CITY:', ':ORIG.STATE
      WHY:=@(39,02):@(-3):'Client : ':CLIENT.ID:' ':HLB:CLIENT.NAME:HLA          ; * NPR05
      WHY:=@(0,03):'Dest   : ':DEST.ZIP:' ':DEST.CITY:', ':DEST.STATE
      WHY:=@(39,03):@(-3):'Carrier: ':CARRIER.ID:' ':CARRIER.NAME
      BEGIN CASE
         CASE IOT='I' ; IOT.WORDS='--IB---'
         CASE IOT='O' ; IOT.WORDS='--OB---'
         CASE IOT='T' ; IOT.WORDS='--TP---'
      END CASE
      WHY:=@(0,4):IOT.WORDS
      CONTR.STRING='|':STR('-',34):'|'
*      L.CONTR.STRING=LEN(CONTR.STRING)
*      CONTR.WORDS="Contract-":CONTR.TARIFF
*      IF CDN.ROUTE THEN CONTR.WORDS=CHANGE(CONTR.WORDS,'AFS50002','AFS52502')    ; * NKH11
*      L.CONTR.TARIFF=LEN(CONTR.WORDS)
*      CONTR.START=INT((L.CONTR.STRING-L.CONTR.TARIFF)/2)
*      CONTR.STRING[CONTR.START+1,L.CONTR.TARIFF]=CONTR.WORDS
      WHY:=@(7,4):CONTR.STRING:NULL
*      IF LOGISTICS THEN
*         BENCH.STRING='|':STR('-',33):'|'
*         L.BENCH.STRING=LEN(BENCH.STRING)
*         BENCH.WORDS="Benchmark-":BENCH.TARIFF
*         IF CDN.ROUTE THEN BENCH.WORDS=CHANGE(BENCH.WORDS,'AFS50002','AFS52502')           ; * NKH11
*         L.BENCH.TARIFF=LEN(BENCH.WORDS)
*         BENCH.START=INT((L.BENCH.STRING-L.BENCH.TARIFF)/2)
*         BENCH.STRING[BENCH.START+1,L.BENCH.TARIFF]=BENCH.WORDS
*         WHY:=@(45,4):BENCH.STRING:NULL
*      END
      WHY:=@(00,05):"Ln":NULL
      WHY:=@(03,05):"Cls":NULL
      WHY:=@(07,05):"Ctr":NULL
      WHY:=@(12,05):"Wgt":NULL
      WHY:=@(17,05):"Rate":NULL
      WHY:=@(23,05):"Charge":NULL
      WHY:=@(30,05):"Disc":NULL
      WHY:=@(37,05):"Amount":NULL

*      IF LOGISTICS THEN
*         WHY:=@(45,05):"Bch":NULL
*         WHY:=@(51,05):"Wgt":NULL
*         WHY:=@(55,05):"Rate":NULL
*         WHY:=@(61,05):"Charge":NULL
*         WHY:=@(68,05):"Disc":NULL
*         WHY:=@(74,05):"Amount":NULL
*      END
      CAR.CHARGE = 0
      CAR.COUNT = DCOUNT(T.SCAC<1>,@VM)
*DEBUG      
      FOR SC = 1 TO CAR.COUNT
         READV T.CARRIER FROM SCAC.XREF, T.SCAC<1,SC>,1 ELSE T.CARRIER = ' '
*         IF T.CARRIER = CARRIER.ID THEN 
*            CAR.CHARGE = T.VOUT<4,SC>
*         END
      NEXT SC

      LINE = 5
*DEBUG      
      LOCATE(CARRIER.SCAC,T.SCAC,1;S.POS) THEN

         WGT = T.WEIGHTS<1,S.POS>
         LN.TIMES = DCOUNT(WGT,@SM)
         FOR DET.CNT = 1 TO LN.TIMES
            LINE=LINE+1
            LI.TOT =  T.CHARGES ; *T.CHARGES<1,S.POS,DET.CNT> -  T.CHARGE.MIN.DISCOUNT<1,S.POS,DET.CNT>            
            WHY:=@(00,LINE):DET.CNT'R%2':NULL         
            WHY:=@(11,LINE):T.WEIGHTS<1,S.POS,DET.CNT>'R#4':NULL 
            WHY:=@(01,LINE):T.FREIGHT.CLASSES<1,S.POS,DET.CNT>'R#5':NULL 
            WHY:=@(16,LINE):T.RATES<1,S.POS,DET.CNT>'R#5':NULL 
            WHY:=@(22,LINE):T.CHARGES<1,S.POS,DET.CNT>'R#7':NULL 
            WHY:=@(29,LINE):T.CHARGE.MIN.DISCOUNT<1,S.POS,DET.CNT>'R#5':NULL  

            WHY:=@(34,LINE):LI.TOT'R#7':NULL                    
*DEBUG
         NEXT DET.CNT
*DEBUG         
LINE+=2
WHY:=@(10,LINE):'Fuel Charge from Tempo: ':T.FUEL.AMT<1,S.POS>:NULL
LINE+=1
WHY:=@(10,LINE):'Total charge from Tempo: ':T.GROSS.RATE<1,S.POS>:NULL    
         
      END
      
*      CONTR.TIMES=DCOUNT(CONTR.DOUT<1,1>,@SVM)
*      TIMES=DETAIL.TIMES
*      IF CONTR.TIMES > TIMES THEN TIMES=CONTR.TIMES
*      IF LOGISTICS THEN
*         BENCH.TIMES=DCOUNT(BENCH.DOUT<1,1>,@SVM)
*         IF BENCH.TIMES > TIMES THEN TIMES=BENCH.TIMES
*      END
*      LINE=5
*      TOT.CONTR.DISC=0                   ; ** Contract Discount Accumulator
*      TOT.BENCH.DISC=0                   ; ** Benchmark Discount Accumulator
*      FOR DET.CNT = 1 TO TIMES
*         LINE=LINE+1
*         WHY:=@(00,LINE):DET.CNT'R%2':NULL
*         WHY:=@(02,LINE):CLASSES<1,DET.CNT>'R#4':NULL
*         WHY:=@(06,LINE):CONTR.CLASSES<1,1,DET.CNT>'R#4':NULL
*         WHY:=@(10,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
*         WHY:=@(15,LINE):CONTR.DOUT<1,1,DET.CNT>'R26#6':NULL           ; * Contr Rate
*         IF CONTR.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN           ; * Catch Zero Rates
*            CALL ELINE("Error $0 Rate on Contract Calculations Line ":DET.CNT)
*
*            AUDIT='U'
*            ERR='' ; GOSUB 8000
*            GO 500
*
*         END
*         CUR.CONTR.CHARGE=CONTR.DOUT<1,2,DET.CNT>
*         CUR.CONTR.DISC=CONTR.DISC<CONTR.DISC.ATT,DET.CNT>
*         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
*         TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
*         CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
*         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Contr Charge
*         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Contract Disc %
*         WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL           ; * Amt (Chg-Disc Amt)
*         IF LOGISTICS THEN
*            WHY:=@(45,LINE):BENCH.CLASSES<1,1,DET.CNT>'R#3':NULL
*            WHY:=@(48,LINE):WEIGHTS<1,DET.CNT>'R#5':NULL
*            WHY:=@(53,LINE):BENCH.DOUT<1,1,DET.CNT>'R26#6':NULL        ; * Rate
*            IF BENCH.DOUT<1,1,DET.CNT>+0=0 AND 0 THEN        ; * Catch Zero Rates
*               CALL ELINE("Error $0 Rate on Benchmark Calculations Line ":DET.CNT)
*               AUDIT='U'
*               ERR='' ; GOSUB 8000
*               GO 500
*            END
*            CUR.BENCH.CHARGE=BENCH.DOUT<1,2,DET.CNT>
*            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Charge
*            CUR.BENCH.DISC=BENCH.DISC<BENCH.DISC.ATT,DET.CNT>          ; * JMK54
*            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
*            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
*            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL
*            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
*            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Bench Amount (Chg-Disc Amt)
*         END
*      NEXT DET.CNT
*      IF CONTR.BILL.TYPE='DEFICIT' OR BENCH.BILL.TYPE='DEFICIT' THEN
*         LINE=LINE+1
*         IF CONTR.BILL.TYPE='DEFICIT' THEN
*            CUR.CONTR.CHARGE=CONTR.DOUT<1,9>
*            CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
*            CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
*            TOT.CONTR.DISC+=CUR.CONTR.DISC.AMT
*            CUR.CONTR.AMT=CUR.CONTR.CHARGE-OCONV((CUR.CONTR.DISC.AMT/10000),'MR0')
*            WHY:=@(3,LINE):'DEFICIT':NULL
*            WHY:=@(10,LINE):CONTR.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
*            WHY:=@(15,LINE):CONTR.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
*            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * Deficit Charge
*            WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
*            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
*         END
*         IF BENCH.BILL.TYPE='DEFICIT' THEN
*            CUR.BENCH.CHARGE=BENCH.DOUT<1,9>
*            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK54
*            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
*            TOT.BENCH.DISC+=CUR.BENCH.DISC.AMT
*            CUR.BENCH.AMT=CUR.BENCH.CHARGE-OCONV((CUR.BENCH.DISC.AMT/10000),'MR0')
*            WHY:=@(48,LINE):BENCH.DOUT<1,7>'R#5':NULL        ; * Deficit Weight
*            WHY:=@(53,LINE):BENCH.DOUT<1,8>'R26#6':NULL      ; * Deficit Rate
*            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Deficit Charge
*            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; * Def Disc (Disc on Lowest Class)
*            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * Def Amt (Def Chg-Def Disc Amt)
*         END
*      END
*      IF CONTR.BILL.TYPE='FLATRATE' OR BENCH.BILL.TYPE='FLATRATE' THEN           ; * JMK20
*         LINE=LINE+1                     ; * JMK20
*         IF CONTR.BILL.TYPE='FLATRATE' THEN        ; * JMK20
*            CUR.CONTR.CHARGE=CONTR.FLAT<1,5>       ; * JMK20
*            CUR.CONTR.AMT=CONTR.FLAT<1,5>          ; * JMK20
*            TOT.CONTR.DISC=0             ; * JMK20
*            WHY:=@(3,LINE):CONTR.FLAT<1,6>:NULL    ; * JMK20
*            WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL     ; * JMK20
*            WHY:=@(35,LINE):CUR.CONTR.AMT'R26#8':NULL        ; * JMK20
*         END                             ; * JMK20
*         IF BENCH.BILL.TYPE='FLATRATE' THEN        ; * JMK20
*            CUR.BENCH.CHARGE=BENCH.FLAT<1,5>       ; * JMK20
*            CUR.BENCH.AMT=BENCH.FLAT<1,5>          ; * JMK20
*            TOT.BENCH.DISC=0             ; * JMK20
*            WHY:=@(45,LINE):BENCH.FLAT<1,6>:NULL   ; * JMK24
*            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * JMK20
*            WHY:=@(73,LINE):CUR.BENCH.AMT'R26#7':NULL        ; * JMK20
*         END                             ; * JMK20
*      END                                ; * JMK20
*      LINE=LINE+1
*      WHY:=@(0,LINE):'BILL TOTAL':NULL
*      WHY:=@(10,LINE):CONTR.DOUT<1,4>'R#5':NULL    ; * Total Weight
*      IF CONTR.BILL.TYPE='MINIMUM' THEN
*         CUR.CONTR.CHARGE=CONTR.DOUT<1,5>
*         CUR.CONTR.DISC=LOWEST.CONTR.CLASS.DISC<CONTR.DISC.ATT>
*         CUR.CONTR.DISC.AMT=CUR.CONTR.CHARGE*CUR.CONTR.DISC
*         TOT.CONTR.DISC=CUR.CONTR.DISC.AMT
*         WHY:=@(15,LINE):"TMIN"'R#6':NULL
*         WHY:=@(21,LINE):CUR.CONTR.CHARGE'R26#8':NULL        ; * Tariff Minimum Charge
*         WHY:=@(29,LINE):CUR.CONTR.DISC'R26#6':NULL          ; * Disc (on Lowest Class)
*      END ELSE
*         WHY:=@(21,LINE):CONTR.DOUT<1,5>'R26#8':NULL         ; * Total Charges
*      END
*      TOT.CONTR.DISC.AMT=(TOT.CONTR.DISC/10000)'R0'
*      TOT.CONTR.AMT=CONTR.DOUT<1,5>-TOT.CONTR.DISC.AMT
*      WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
*      TOT.BENCH.AMT=TOT.CONTR.AMT        ; * JMK14
*      IF LOGISTICS THEN
*         WHY:=@(48,LINE):BENCH.DOUT<1,4>'R#5':NULL           ; * Total Weight
*         IF BENCH.BILL.TYPE='MINIMUM' THEN
*            CUR.BENCH.CHARGE=BENCH.DOUT<1,5>
*            CUR.BENCH.DISC=LOWEST.BENCH.CLASS.DISC<BENCH.DISC.ATT>     ; * JMK54
*            CUR.BENCH.DISC.AMT=CUR.BENCH.CHARGE*CUR.BENCH.DISC
*            TOT.BENCH.DISC=CUR.BENCH.DISC.AMT
*            WHY:=@(53,LINE):"TMIN"'R#6':NULL
*            WHY:=@(59,LINE):CUR.BENCH.CHARGE'R26#8':NULL     ; * Tariff Minimum Charge
*            WHY:=@(67,LINE):CUR.BENCH.DISC'R26#6':NULL       ; *Disc (on Lowest Class)
*         END ELSE
*            WHY:=@(59,LINE):BENCH.DOUT<1,5>'R26#8':NULL      ; * Total Charges
*         END
*         TOT.BENCH.AMT=BENCH.DOUT<1,5>-OCONV((TOT.BENCH.DISC/10000),'MR0')
*         WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
*      END
*      IF TOT.CONTR.AMT+0=0 THEN
*         CALL ELINE("Contract Side of Bill Not Rated, Try an adjacent zip code")
*         AUDIT='U'
*         ERR='' ; GOSUB 8000
*         GO 500
*      END
*      IF LOGISTICS THEN
*         IF TOT.BENCH.AMT+0=0 THEN
*            CALL ELINE("Benchmark Side of Bill Not Rated, Try an adjacent zip code")
*            AUDIT='U'
*            ERR='' ; GOSUB 8000
*            GO 500
*         END
*      END
*
*      * Minimum Charge Logic
*      IF ORIG.STATE=DEST.STATE THEN OFFSET=0 ELSE OFFSET=3
*      LOCATE TOT.WEIGHT IN DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING WGT.POS ELSE NULL
*      CONTR.MIN=DAUDIT.TABLES<38+OFFSET,WGT.POS>
*      BENCH.MIN=DAUDIT.TABLES<39+OFFSET,WGT.POS>
*      IF JL.FLAG THEN                    ; * JMK49
*         LOCATE TOT.WEIGHT IN JL.DAUDIT.TABLES<37+OFFSET> BY 'AR' SETTING JL.WGT.POS ELSE NULL       ; * JMK49
*         CONTR.MIN=JL.DAUDIT.TABLES<38+OFFSET,JL.WGT.POS>    ; * JMK49
*      END                                ; * JMK49
*      CONTR.ABS.MIN=0                    ; * Contract Absolute Minimum Flag
*      BENCH.ABS.MIN=0                    ; * Benchmark Absolute Minimum Flag
*      IF TOT.CONTR.AMT < CONTR.MIN AND CONTR.BILL.TYPE#'FLATRATE' THEN           ; * JMK28
*         TOT.CONTR.AMT=CONTR.MIN
*         CONTR.ABS.MIN=1
*      END
*      IF LOGISTICS THEN
*         IF TOT.BENCH.AMT < BENCH.MIN AND BENCH.BILL.TYPE#'FLATRATE' THEN        ; * JMK28
*            TOT.BENCH.AMT=BENCH.MIN
*            BENCH.ABS.MIN=1
*         END
*         FORCED.WORD=''
*         IF CONTR.ABS.MIN THEN
*            BEGIN CASE
*               CASE FORCE.BENCH.MIN="Y"  ; * JMK07
*                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK07
*                  BENCH.ABS.MIN=1        ; * JMK07
*                  FORCED.WORD='Forced '  ; * JMK07
*               CASE NUM(FORCE.BENCH.MIN) AND TOT.WEIGHT <= FORCE.BENCH.MIN       ; * JMK07
*                  TOT.BENCH.AMT=BENCH.MIN          ; * JMK07
*                  BENCH.ABS.MIN=1        ; * JMK07
*                  FORCED.WORD='Forced '  ; * JMK07
*            END CASE
*         END
*      END
*      IF CONTR.ABS.MIN OR BENCH.ABS.MIN THEN
*         LINE+=1
*         IF CONTR.ABS.MIN THEN
*            WHY:=@(0,LINE):"CONTRACT MINIMUM":NULL
*            WHY:=@(35,LINE):TOT.CONTR.AMT'R26#8':NULL
*         END
*         IF BENCH.ABS.MIN THEN
*            WHY:=@(45,LINE):FORCED.WORD:"BENCHMARK MINIMUM":NULL
*            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
*         END
*      END

*********************************************************************
SKIP.MINIMUM:* Bring Benchmark up to Contract Amount BEFORE FSC and ACC calculations
*********************************************************************
*      IF LOGISTICS THEN
*         IF TOT.BENCH.AMT < TOT.CONTR.AMT THEN
*            TOT.BENCH.AMT=TOT.CONTR.AMT
*            LINE+=1
*            WHY:=@(45,LINE):"ADJ! Less than Contract Amt":NULL
*            WHY:=@(73,LINE):TOT.BENCH.AMT'R26#7':NULL
*         END
*      END

*********************************************************************
1225: * Fuel Surcharge Calculations
*********************************************************************
*      CONTR.FSC.PARMS=''                 ; * JMK10
*      BENCH.FSC.PARMS=''                 ; * JMK10
*      AFSO.BENCH.FSC.PARMS=''            ; * JMK37
*      AFS.FSC.PARMS=''                   ; * JMK10
*      FSC.MIN = 0
*      IF BENCH.DFSC='' OR CONTR.DFSC='' THEN GO 1250
*      CONTR.FSC.MIN = 0
*      BENCH.FSC.MIN = 0
*      CONTR.FSC.AMT=0
*      BENCH.FSC.AMT=0

*********************************************************************
1250: * Have FSC.PERC Calculate Charge
*********************************************************************
*      IF BENCH.DFSC='' OR CONTR.DFSC='' THEN
*         CONTR.FSC.AMT=0
*         BENCH.FSC.AMT=0
*         GO 1275
*      END
*      IF USER='DAVID' THEN CALL ELINE('PRESS BREAK')
*      VIN=BILL.DATE
*      VIN<2>=TOT.WEIGHT
*
*      VIN<6>=TOT.CONTR.AMT
*      VIN<7>=ORIG.STATE                  ; * Special for Xpedx & AFS
*      VIN<8>=DEST.STATE                  ; * Special for AFS
*
*      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)
*
*      CONTR.FSC.PARMS<1,1>=VIN<1>        ; * JMK10 - BILL DATE
*      CONTR.FSC.PARMS<1,2>=VIN<2>        ; * JMK10 - WEIGHT
*      CONTR.FSC.PARMS<1,3>=VIN<3>        ; * JMK10 - MILES
*      CONTR.FSC.PARMS<1,4>=VIN<6>        ; * JMK10 - FREIGHT AMOUNT
*      CONTR.FSC.PARMS<1,5>=VIN<7>        ; * JMK10 - ORIGIN ST
*      CONTR.FSC.PARMS<1,6>=VIN<8>        ; * JMK10 - DESTINATION ST
*      CONTR.FSC.PARMS<1,7>=VOUT<1>       ; * JMK10 - FSC AMT
*      CONTR.FSC.PARMS<1,8>=VOUT<2>       ; * JMK10 - MIN FLG
*      CONTR.FSC.PARMS<1,9>=VOUT<3>       ; * JMK10 - CALC PERC
*      CONTR.FSC.PARMS<1,10>=VOUT<7>      ; * JMK10 - OVERAGE AMT
*      CONTR.FSC.PARMS<1,11>=VOUT<8>      ; * JMK10 - OVERAGE STEPS
*      CONTR.FSC.PARMS<1,12>=VOUT<9>      ; * JMK10 - BASE PERC
*      CONTR.FSC.PARMS<1,13>=VOUT<10>     ; * JMK10 - OVERAGE PERC
*      CONTR.FSC.PARMS<1,14>=VOUT<11>     ; * JMK10 - DELAY DAYS
*      CONTR.FSC.PARMS<1,15>=VOUT<12>     ; * JMK10 - SHIFT DATE
*      CONTR.FSC.PARMS<1,16>=VOUT<13>     ; * JMK10 - NATL FUEL PRICE
*      CONTR.FSC.PARMS<1,17>=VOUT<14>     ; * JMK10 - CONV FUEL PRICE
*      CONTR.FSC.PARMS<1,18>=VOUT<15>     ; * JMK10 - BEGIN EFF DATE
*      CONTR.FSC.PARMS<1,19>=VOUT<16>     ; * JMK10 - FORMULA
*      CONTR.FSC.PARMS<1,20>=VOUT<17>     ; * JMK10 - MODE
*      CONTR.FSC.PARMS<1,21>=VOUT<18>     ; * JMK10 - BASE FUEL PRICE
*      CONTR.FSC.PARMS<1,22>=VOUT<19>     ; * JMK10 - NATL INDEX NAME
*      CONTR.FSC.PARMS<1,23>=VOUT<20>     ; * JMK10 - MAX SETUP PRICE
*      CONTR.FSC.PARMS<1,24>=VOUT<21>     ; * JMK51 - AFS CONTRACT FSC TABLE
*
*      CONTR.FSC.PARMS<1,25>=VOUT<30>     ; * NPR07 - DESCRIPTION
*
*      CONTR.FSC.AMT=VOUT<1>
*      CONTR.FSC.MIN=VOUT<2>
*      CONTR.FSC.PERC=VOUT<3>
*      CALC.FSC=VOUT<1>
*      VIN=BILL.DATE
*      VIN<2>=TOT.WEIGHT
*      VIN<6>=TOT.BENCH.AMT
*      VIN<7>=ORIG.STATE                  ; * Special for Xpedx & AFS
*      VIN<8>=DEST.STATE                  ; * Special for AFS
*      CALL CALC.FSC(VIN,VOUT,BENCH.DFSC,F.TABLES)
*      * Capture carrier benchmark FSC parameters for later review
*      BENCH.FSC.PARMS<1,1>=VIN<1>        ; * JMK10 - BILL DATE
*      BENCH.FSC.PARMS<1,2>=VIN<2>        ; * JMK10 - WEIGHT
*      BENCH.FSC.PARMS<1,3>=VIN<3>        ; * JMK10 - MILES
*      BENCH.FSC.PARMS<1,4>=VIN<6>        ; * JMK10 - FREIGHT AMOUNT
*      BENCH.FSC.PARMS<1,5>=VIN<7>        ; * JMK10 - ORIGIN ST
*      BENCH.FSC.PARMS<1,6>=VIN<8>        ; * JMK10 - DESTINATION ST
*      BENCH.FSC.PARMS<1,7>=VOUT<1>       ; * JMK10 - FSC AMT
*      BENCH.FSC.PARMS<1,8>=VOUT<2>       ; * JMK10 - MIN FLG
*      BENCH.FSC.PARMS<1,9>=VOUT<3>       ; * JMK10 - CALC PERC
*      BENCH.FSC.PARMS<1,10>=VOUT<7>      ; * JMK10 - OVERAGE AMT
*      BENCH.FSC.PARMS<1,11>=VOUT<8>      ; * JMK10 - OVERAGE STEPS
*      BENCH.FSC.PARMS<1,12>=VOUT<9>      ; * JMK10 - BASE PERC
*      BENCH.FSC.PARMS<1,13>=VOUT<10>     ; * JMK10 - OVERAGE PERC
*      BENCH.FSC.PARMS<1,14>=VOUT<11>     ; * JMK10 - DELAY DAYS
*      BENCH.FSC.PARMS<1,15>=VOUT<12>     ; * JMK10 - SHIFT DATE
*      BENCH.FSC.PARMS<1,16>=VOUT<13>     ; * JMK10 - NATL FUEL PRICE
*      BENCH.FSC.PARMS<1,17>=VOUT<14>     ; * JMK10 - CONV FUEL PRICE
*      BENCH.FSC.PARMS<1,18>=VOUT<15>     ; * JMK10 - BEGIN EFF DATE
*      BENCH.FSC.PARMS<1,19>=VOUT<16>     ; * JMK10 - FORMULA
*      BENCH.FSC.PARMS<1,20>=VOUT<17>     ; * JMK10 - MODE
*      BENCH.FSC.PARMS<1,21>=VOUT<18>     ; * JMK10 - BASE FUEL PRICE
*      BENCH.FSC.PARMS<1,22>=VOUT<19>     ; * JMK10 - NATL INDEX NAME
*      BENCH.FSC.PARMS<1,23>=VOUT<20>     ; * JMK10 - MAX SETUP PRICE
*      BENCH.FSC.PARMS<1,24>=VOUT<21>     ; * JMK51 - AFS CONTRACT FSC TABLE
*      BENCH.FSC.PARMS<1,25>=VOUT<30>     ; * NPR07 - DESCRIPTION
*      * Setup call to calculate old AFS benchmark FSC Charges
*      CALL CALC.FSC(VIN,VOUT,AFSO.BENCH.DFSC,F.TABLES)       ; * JMK37
*      * Capture carrier benchmark FSC parameters for later review
*      AFSO.BENCH.FSC.PARMS<1,1>=VIN<1>   ; * JMK37 - BILL DATE
*      AFSO.BENCH.FSC.PARMS<1,2>=VIN<2>   ; * JMK37 - WEIGHT
*      AFSO.BENCH.FSC.PARMS<1,3>=VIN<3>   ; * JMK37 - MILES
*      AFSO.BENCH.FSC.PARMS<1,4>=VIN<6>   ; * JMK37 - FREIGHT AMOUNT
*      AFSO.BENCH.FSC.PARMS<1,5>=VIN<7>   ; * JMK37 - ORIGIN ST
*      AFSO.BENCH.FSC.PARMS<1,6>=VIN<8>   ; * JMK37 - DESTINATION ST
*      AFSO.BENCH.FSC.PARMS<1,7>=VOUT<1>  ; * JMK37 - FSC AMT
*      AFSO.BENCH.FSC.PARMS<1,8>=VOUT<2>  ; * JMK37 - MIN FLG
*      AFSO.BENCH.FSC.PARMS<1,9>=VOUT<3>  ; * JMK37 - CALC PERC
*      AFSO.BENCH.FSC.PARMS<1,10>=VOUT<7>           ; * JMK37 - OVERAGE AMT
*      AFSO.BENCH.FSC.PARMS<1,11>=VOUT<8>           ; * JMK37 - OVERAGE STEPS
*      AFSO.BENCH.FSC.PARMS<1,12>=VOUT<9>           ; * JMK37 - BASE PERC
*      AFSO.BENCH.FSC.PARMS<1,13>=VOUT<10>          ; * JMK37 - OVERAGE PERC
*      AFSO.BENCH.FSC.PARMS<1,14>=VOUT<11>          ; * JMK37 - DELAY DAYS
*      AFSO.BENCH.FSC.PARMS<1,15>=VOUT<12>          ; * JMK37 - SHIFT DATE
*      AFSO.BENCH.FSC.PARMS<1,16>=VOUT<13>          ; * JMK37 - NATL FUEL PRICE
*      AFSO.BENCH.FSC.PARMS<1,17>=VOUT<14>          ; * JMK37 - CONV FUEL PRICE
*      AFSO.BENCH.FSC.PARMS<1,18>=VOUT<15>          ; * JMK37 - BEGIN EFF DATE
*      AFSO.BENCH.FSC.PARMS<1,19>=VOUT<16>          ; * JMK37 - FORMULA
*      AFSO.BENCH.FSC.PARMS<1,20>=VOUT<17>          ; * JMK37 - MODE
*      AFSO.BENCH.FSC.PARMS<1,21>=VOUT<18>          ; * JMK37 - BASE FUEL PRICE
*      AFSO.BENCH.FSC.PARMS<1,22>=VOUT<19>          ; * JMK37 - NATL INDEX NAME
*      AFSO.BENCH.FSC.PARMS<1,23>=VOUT<20>          ; * JMK37 - MAX SETUP PRICE
*      AFSO.BENCH.FSC.PARMS<1,24>=VOUT<21>          ; * JMK51 - AFS CONTRACT FSC TABLE
*      AFSO.BENCH.FSC.PARMS<1,25>=VOUT<30>          ; * NPR07 - DESCRIPTION
*
*      * Setup call to calculate AFS benchmark FSC charges
*      CALL CALC.FSC(VIN,VOUT,CONTR.DFSC,F.TABLES)  ; * JMK10
*
*      * Capture AFS benchmark FSC parameters for later review
*      AFS.FSC.PARMS<1,1>=VIN<1>          ; * JMK10 - BILL DATE
*      AFS.FSC.PARMS<1,2>=VIN<2>          ; * JMK10 - WEIGHT
*      AFS.FSC.PARMS<1,3>=VIN<3>          ; * JMK10 - MILES
*      AFS.FSC.PARMS<1,4>=VIN<6>          ; * JMK10 - FREIGHT AMOUNT
*      AFS.FSC.PARMS<1,5>=VIN<7>          ; * JMK10 - ORIGIN ST
*      AFS.FSC.PARMS<1,6>=VIN<8>          ; * JMK10 - DESTINATION ST
*      AFS.FSC.PARMS<1,7>=VOUT<1>         ; * JMK10 - FSC AMT
*      AFS.FSC.PARMS<1,8>=VOUT<2>         ; * JMK10 - MIN FLG
*      AFS.FSC.PARMS<1,9>=VOUT<3>         ; * JMK10 - CALC PERC
*      AFS.FSC.PARMS<1,10>=VOUT<7>        ; * JMK10 - OVERAGE AMT
*      AFS.FSC.PARMS<1,11>=VOUT<8>        ; * JMK10 - OVERAGE STEPS
*      AFS.FSC.PARMS<1,12>=VOUT<9>        ; * JMK10 - BASE PERC
*      AFS.FSC.PARMS<1,13>=VOUT<10>       ; * JMK10 - OVERAGE PERC
*      AFS.FSC.PARMS<1,14>=VOUT<11>       ; * JMK10 - DELAY DAYS
*      AFS.FSC.PARMS<1,15>=VOUT<12>       ; * JMK10 - SHIFT DATE
*      AFS.FSC.PARMS<1,16>=VOUT<13>       ; * JMK10 - NATL FUEL PRICE
*      AFS.FSC.PARMS<1,17>=VOUT<14>       ; * JMK10 - CONV FUEL PRICE
*      AFS.FSC.PARMS<1,18>=VOUT<15>       ; * JMK10 - BEGIN EFF DATE
*      AFS.FSC.PARMS<1,19>=VOUT<16>       ; * JMK10 - FORMULA
*      AFS.FSC.PARMS<1,20>=VOUT<17>       ; * JMK10 - MODE
*      AFS.FSC.PARMS<1,21>=VOUT<18>       ; * JMK10 - BASE FUEL PRICE
*      AFS.FSC.PARMS<1,22>=VOUT<19>       ; * JMK10 - NATL INDEX NAME
*      AFS.FSC.PARMS<1,23>=VOUT<20>       ; * JMK10 - MAX SETUP PRICE
*      AFS.FSC.PARMS<1,24>=VOUT<21>       ; * JMK51 - AFS CONTRACT FSC TABLE
*      AFS.FSC.PARMS<1,25>=VOUT<30>       ; * NPR07 - DESCRIPTION
*      IF LOGISTICS THEN                  ; * JMK10
*         BENCH.FSC.AMT=AFS.FSC.PARMS<1,7>          ; * JMK10
*         BENCH.FSC.MIN=AFS.FSC.PARMS<1,8>          ; * JMK10
*         BENCH.FSC.PERC=AFS.FSC.PARMS<1,9>         ; * JMK10
*         IF CARR.ONLY.FSC='Y' OR CARR.ONLY.FSC='C' THEN      ; * JMK10 ; * JMK37
*            BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>     ; * JMK10
*            BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>     ; * JMK10
*            BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>    ; * JMK10
*         END                             ; * JMK10
*         IF CARR.ONLY.FSC='O' THEN       ; * JMK37
*            BENCH.FSC.AMT=AFSO.BENCH.FSC.PARMS<1,7>          ; * JMK37
*            BENCH.FSC.MIN=AFSO.BENCH.FSC.PARMS<1,8>          ; * JMK37
*            BENCH.FSC.PERC=AFSO.BENCH.FSC.PARMS<1,9>         ; * JMK37
*            IF CONTR.FSC.PARMS<1,24>[1,2]#'AF' THEN          ; * JMK51
*               BENCH.FSC.AMT=BENCH.FSC.PARMS<1,7>  ; * JMK51
*               BENCH.FSC.MIN=BENCH.FSC.PARMS<1,8>  ; * JMK51
*               BENCH.FSC.PERC=BENCH.FSC.PARMS<1,9>           ; * JMK51
*            END                          ; * JMK51
*         END                             ; * JMK37
*         IF NO.LOG.FSC THEN BENCH.FSC.AMT=0        ; * Set to Zero
*      END
*
*      IF CONTR.FSC.AMT+BENCH.FSC.AMT+0#0 THEN
*         LINE+=1
*         IF CONTR.FSC.MIN THEN
*            WHY:=@(3,LINE):'Fuel Sur Charge Min':NULL
*         END ELSE
*            CONTR.NAT.IDX = CONTR.FSC.PARMS<1,22>
*            CONTR.AFS.AFN = CONTR.FSC.PARMS<1,24>
*            CONTR.AFS.DESC = CONTR.FSC.PARMS<1,25>           ; * NPR07
*            IF CONTR.AFS.AFN = "AFN" THEN CONTR.AFS.AFN = "AFS Supp A FSC"
*            IF CONTR.AFS.AFN = "AFS" THEN CONTR.AFS.AFN = "AFS FSC"
*            IF CONTR.AFS.DESC NE "" THEN CONTR.AFS.AFN = CONTR.AFS.DESC          ; * NPR07
*            CONTR.FSC.DETAIL = ""
*            IF CONTR.AFS.AFN NE "" THEN
*               CONTR.FSC.DETAIL = CONTR.AFS.AFN
*            END
*            IF CONTR.NAT.IDX NE "" THEN
*               IF CONTR.FSC.DETAIL = '' THEN CONTR.FSC.DETAIL := CONTR.NAT.IDX ELSE CONTR.FSC.DETAIL := " - ":CONTR.NAT.IDX
*            END
*            IF CONTR.AFS.DESC NE "" THEN CONTR.FSC.DETAIL = CONTR.AFS.DESC       ; * NPR07
*            IF CONTR.FSC.DETAIL = "" THEN
*               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% Fuel Sur Charge':NULL
*            END ELSE
*               WHY:=@(3,LINE):CONTR.FSC.PERC'R17':'% FSC (':CONTR.FSC.DETAIL:') ':NULL
*            END
*
*         END
*         WHY:=@(35,LINE):CONTR.FSC.AMT'R26#8':NULL
*         IF LOGISTICS THEN
*            BEGIN CASE
*               CASE NO.LOG.FSC
*                  WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'Logistics FSC = N':NULL
*               CASE BENCH.FSC.MIN
*                  WHY:=@(45,LINE):'Fuel Sur Charge Min':NULL
*               CASE 1
*                  BENCH.NAT.IDX = BENCH.FSC.PARMS<1,22>
*                  BENCH.AFS.AFN = BENCH.FSC.PARMS<1,24>
*                  BENCH.AFS.DESC = BENCH.FSC.PARMS<1,25>     ; * NPR07
*                  IF BENCH.AFS.AFN = "AFN" THEN BENCH.AFS.AFN = "AFS Supp A FSC"
*                  IF BENCH.AFS.AFN = "AFS" THEN BENCH.AFS.AFN = "AFS FSC"
*                  IF BENCH.AFS.DESC NE "" THEN BENCH.AFS.AFN = BENCH.AFS.DESC    ; * NPR07
*                  BENCH.FSC.DETAIL = ""
*                  IF BENCH.AFS.AFN NE "" THEN
*                     BENCH.FSC.DETAIL = BENCH.AFS.AFN
*                  END
*                  IF BENCH.NAT.IDX NE "" THEN
*                     IF BENCH.FSC.DETAIL = '' THEN BENCH.FSC.DETAIL := BENCH.NAT.IDX ELSE BENCH.FSC.DETAIL := " - ":BENCH.NAT.IDX
*                  END
*                  IF BENCH.AFS.DESC NE "" THEN BENCH.FSC.DETAIL = BENCH.AFS.DESC           ; * NPR07
*
*                  IF BENCH.FSC.DETAIL = "" THEN
*                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% Fuel Sur Charge':NULL
*                  END ELSE
*                     WHY:=@(45,LINE):BENCH.FSC.PERC'R17':'% FSC (':BENCH.FSC.DETAIL:') ':NULL
*                  END
*            END CASE
*            WHY:=@(73,LINE):BENCH.FSC.AMT'R26#7':NULL
*         END
*      END

      RETURN      
*********************************************************************
9000: * Exit Program
*********************************************************************
      STOP
