      SUBROUTINE UPD.SQL.FEDEX.EDI.SUB(VIN,VOUT,EDI.REC)
***********************************************************************
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.FEDEX.EDI.SUB' ; UPL.VOUT = ''    ; * NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
* SEND FEDEX GROUND BILL TO SQL FOR AUDITING
* COPYRIGHT (C) AFS LOGISTICS, LLC., 2002
*
* AUTHOR : DAVID R. FRIEND
* DATE   : MARCH 2011
*************************************************************************
* 061912 - JMK01 - Choose development SQL server if not production server AFS
*************************************************************************
!
* INCLUDE THE ODBC DEFINITIONS
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01

      USER=VIN<1>
      CLIENT.ID=VIN<2>
      BILL.ID=VIN<3>
      UPD.SHIP=1

      FORM = "T##########"
      DASH = "----------"
      EXPECT = ""
      NULL=""
      TOT.NUM.BILLS=0


      ERROR.CNT=0
10:   ERRORS=''
      GOSUB SETUP.SQL

* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE
      CLIENT.ID=FIELD(BILL.ID,'*',1)
      CARRIER.ID=FIELD(BILL.ID,'*',2)
      SQL.CARRIERNUMBER=CARRIER.ID
      SQL.CLIENTNUMBER=CLIENT.ID
      SQL.INVOICENUMBER=EDI.REC<1>[1,30]
      SQL.PRONUMBER=EDI.REC<2>[1,30]
      SQL.BILLTONAME=TRIM(EDI.REC<10>)[1,50]
      SQL.BILLTOCOMPANYNAME=TRIM(EDI.REC<11>)[1,50]
      SQL.BILLTOADDRESS1=TRIM(EDI.REC<12>)[1,50]
      SQL.BILLTOADDRESS2=TRIM(EDI.REC<13>)[1,50]
      SQL.BILLTOCITY=TRIM(EDI.REC<14>)[1,20]
      SQL.BILLTOSTATE=TRIM(EDI.REC<15>)[1,20]
      SQL.BILLTOZIP=TRIM(FIELD(EDI.REC<16>,'-',1))[1,20]
      SQL.BILLTOCOUNTRY=TRIM(EDI.REC<17>)[1,20]
      SQL.BILLTOACCTNUMBER=TRIM(EDI.REC<18>)[1,50]
      SQL.SHIPPERNAME=TRIM(EDI.REC<19>)[1,50]
      SQL.SHIPPERCOMPANYNAME=TRIM(EDI.REC<20>)[1,50]
      SQL.SHIPPERADDRESS1=TRIM(EDI.REC<21>)[1,50]
      SQL.SHIPPERADDRESS2=TRIM(EDI.REC<22>)[1,50]
      SQL.SHIPPERCITY=TRIM(EDI.REC<23>)[1,20]
      SQL.SHIPPERSTATE=TRIM(EDI.REC<24>)[1,20]
      SQL.SHIPPERZIP=TRIM(FIELD(EDI.REC<25>,'-',1))[1,20]
      SQL.SHIPPERCOUNTRY=TRIM(EDI.REC<26>)[1,20]
      SQL.SHIPPERACCTNUMBER=TRIM(EDI.REC<27>)[1,50]
      SQL.CONSIGNEENAME=TRIM(EDI.REC<28>)[1,50]
      SQL.CONSIGNEECOMPANYNAME=TRIM(EDI.REC<29>)[1,50]
      SQL.CONSIGNEEADDRESS1=TRIM(EDI.REC<30>)[1,50]
      SQL.CONSIGNEEADDRESS2=TRIM(EDI.REC<31>)[1,50]
      SQL.CONSIGNEECITY=TRIM(EDI.REC<32>)[1,20]
      SQL.CONSIGNEESTATE=TRIM(EDI.REC<33>)[1,20]
      SQL.CONSIGNEEZIP=TRIM(FIELD(EDI.REC<34>,'-',1))[1,20]
      SQL.CONSIGNEECOUNTRY=TRIM(EDI.REC<35>)[1,20]
      SQL.CONSIGNEEACCTNUMBER=TRIM(EDI.REC<36>)[1,50]
      SQL.PICKUPDATE=EDI.REC<39>'D4/'
      SQL.DELIVERYDATE=EDI.REC<41>'D4/'
      SQL.BILLDATE=EDI.REC<77>'D4/'
      IF SQL.PICKUPDATE='' THEN
         SQL.PICKUPDATE=SQL.BILLDATE
      END
      IF SQL.DELIVERYDATE='' THEN
         SQL.DELIVERYDATE=SQL.BILLDATE
      END
      SQL.LENGTH=EDI.REC<48>
      SQL.WIDTH=EDI.REC<49>
      SQL.HEIGHT=EDI.REC<50>
      SQL.ACTUALWEIGHT=EDI.REC<53>
      SQL.BILLEDWEIGHT=EDI.REC<58>
      SQL.WEIGHTINDICATOR=EDI.REC<60>
      SQL.QUANTITY=EDI.REC<56>
      SQL.TOTALCHARGES=EDI.REC<67>'R26'
      SQL.SHIPMENTMETHOD=EDI.REC<90>[1,2]
      SQL.DELIVERYSCHEDULECODE=EDI.REC<91>[1,2]
      SQL.DELAYREASON=EDI.REC<92>[1,3]
      SQL.REGIONCODE=EDI.REC<93>[1,3]
      SQL.MASTERACCTNUMBER=EDI.REC<132>
      SQL.PACKAGETYPE=EDI.REC<133>[1,5]
      SQL.SERVICETYPE=EDI.REC<134>[1,3]
      SQL.CARRIERREFNUMBER=EDI.REC<135>[1,30]
      SQL.BATCHBUNDLENUMBER=EDI.REC<140>[1,30]
      NUM.OF.CODE=DCOUNT(EDI.REC<65>,@VM)
      SPECIAL.CHAR=''
      CODE.LIST=''
      FOR XX = 1 TO NUM.OF.CODE
         CODE.LIST=CODE.LIST:SPECIAL.CHAR:EDI.REC<65,XX>:' ':EDI.REC<64,XX>'R26'
         SPECIAL.CHAR='; '
      NEXT XX
      SQL.SERVICECHARGEINFO=CODE.LIST
      IF UPD.SHIP THEN
         FN = "SQLExecute"
         STATUS = SQLEXECUTE(UPDSHIPENV)
         STMTENV=UPDSHIPENV
         GOSUB CKSTMTENV
      END

THE.END:***
*     END OF PROGRAM
*
* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1>='UPD.SQL.Group@afs.net'
            MVIN<1>='DFriend@afs.net'
            MVIN<4>='AFS_UPD.SQL.FBHIST.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP

SETUP.SQL:*
!
* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLALLOCENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLALLOCCONNECT(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*
*     SQLSVR.INFO=OCONV('SQLSVR','TFB.TABLES;X;;1')          ; * JMK01
*     SOURCE=FIELD(SQLSVR.INFO<1>,' ',1)           ; * JMK01
*     UID=FIELD(SQLSVR.INFO<1>,' ',2)    ; * JMK01
*     PWD=FIELD(SQLSVR.INFO<1>,' ',3)    ; * JMK01
      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='DEVAUDIT'            ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVAUDIT'            ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLCONNECT(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV

UPDATE.SQL.SHIPMENT:*
      IF UPD.SHIP THEN
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
         FN = "SQLAllocStmt"
         STATUS = SQLALLOCSTMT(CONENV,UPDSHIPENV)
         GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
         OPT.STR = STR(' ?,',52)         ; * JMK03 ; * JMK04 ; * JMK06 ;  JMK07
         OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
         INST1 = "{CALL AU_UpdAuditStaging (":OPT.STR:")}"   ; * 64 PLACEHOLDERS

         ROWNUM = 0
         FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
         STATUS = SQLSETPARAM(UPDSHIPENV, 1, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CARRIERNUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENTNUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 3, SQL.B.BASIC, SQL.VARCHAR, 30, 0, SQL.INVOICENUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 4, SQL.B.BASIC, SQL.VARCHAR, 30, 0, SQL.PRONUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 5, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.BILLTONAME) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 6, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.BILLTOCOMPANYNAME) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 7, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.BILLTOADDRESS1) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 8, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.BILLTOADDRESS2) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 9, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.BILLTOCITY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 10, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.BILLTOSTATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 11, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.BILLTOZIP) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 12, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.BILLTOCOUNTRY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 13, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.BILLTOACCTNUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 14, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.SHIPPERNAME) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 15, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.SHIPPERCOMPANYNAME) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 16, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.SHIPPERADDRESS1) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 17, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.SHIPPERADDRESS2) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 18, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.SHIPPERCITY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 19, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.SHIPPERSTATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 20, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.SHIPPERZIP) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 21, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.SHIPPERCOUNTRY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 22, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.SHIPPERACCTNUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 23, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CONSIGNEENAME) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 24, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CONSIGNEECOMPANYNAME) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 25, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CONSIGNEEADDRESS1) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 26, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CONSIGNEEADDRESS2) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 27, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONSIGNEECITY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 28, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONSIGNEESTATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 29, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONSIGNEEZIP) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 30, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONSIGNEECOUNTRY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 31, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CONSIGNEEACCTNUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 32, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.PICKUPDATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 33, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.DELIVERYDATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 34, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.BILLDATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 35, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.LENGTH) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 36, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.WIDTH) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 37, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.HEIGHT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 38, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.ACTUALWEIGHT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 39, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.BILLEDWEIGHT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 40, SQL.B.BASIC, SQL.VARCHAR, 5, 0, SQL.WEIGHTINDICATOR) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 41, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.QUANTITY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 42, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.TOTALCHARGES) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 43, SQL.B.BASIC, SQL.VARCHAR, 2, 0, SQL.SHIPMENTMETHOD) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 44, SQL.B.BASIC, SQL.VARCHAR, 2, 0, SQL.DELIVERYSCHEDULECODE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 45, SQL.B.BASIC, SQL.VARCHAR, 3, 0, SQL.DELAYREASON) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 46, SQL.B.BASIC, SQL.VARCHAR, 3, 0, SQL.REGIONCODE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 47, SQL.B.BASIC, SQL.VARCHAR, 30, 0, SQL.MASTERACCTNUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 48, SQL.B.BASIC, SQL.VARCHAR, 5, 0, SQL.PACKAGETYPE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 49, SQL.B.BASIC, SQL.VARCHAR, 3, 0, SQL.SERVICETYPE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 50, SQL.B.BASIC, SQL.VARCHAR, 30, 0, SQL.CARRIERREFNUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 51, SQL.B.BASIC, SQL.VARCHAR, 30, 0, SQL.BATCHBUNDLENUMBER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDSHIPENV, 52, SQL.B.BASIC, SQL.VARCHAR, 1000, 0, SQL.SERVICECHARGEINFO) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV

         FN = "SQLPrepare"
         STATUS = SQLPREPARE(UPDSHIPENV, INST1)
         STMTENV=UPDSHIPENV
         ENVSRC='UPDSHIP'
         GOSUB CKSTMTENV

         FN = "SQLSetParam"
      END


      RETURN

CKCONENV:

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN

CKSTMTENV:
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
