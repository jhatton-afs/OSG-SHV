********************************************************************************
* Program : EBILL.IMPORT
*
* Author  : James Barberousse
* Date    : September 2002
*
* Copyright (c) 2002 by AFS Logistics, LLC. - All Rights Reserved
********************************************************************************
* This program reads in the UPS e-Bill file in CSV (comma separated value) format,
* converts it into pick format, and does various processing on it updating several
* files, creating new files, and sending an email.
*
* About the e-Bill File
* ---------------------
* AFS receives an email from UPS early in the week (Monday or Tuesday) containing
* a link to download the e-Bill data file.  The file should be saved in the
* BILLDATA\E-BILL folder with a filename of the form cccccccccc_mm_dd_yyyy.cvs, where
*
*   cccccccccc is the 10 digit plan number
*   mm is the 2 digit month
*   dd is the 2 digit day
*   yyyy is the 4 digit year.
*
* The name that UPS has already given the file gives this date, but the filename format
* must be put into this new format to be read by this program, EBILL.IMPORT.
*
* The date on each file represents the bill date (invoice date) of all packages in the
* file.  Each line (row) of the file represents a package with a unique tracking number.
* Each package contains a shipper number, which is a UPS number designating a single
* location, which for AFS is a single client-division.  Multiple shipper numbers may
* potentially exist in each file, but one shipper number comprises a single invoice.  And
* a single client, such as Watlow St. Louis (00913) may have multiple shipper numbers
* (billing accounts with UPS).  Thus, an e-Bill file consists of all packages shipped on
* a certain date to various shipper numbers, which represent AFS clients.
*
* About the Output produced by EBILL.IMPORT
* -----------------------------------------
* EBILL.IMPORT performs the following tasks creating the following output:
*  1) Get carrier number (for generality - defaults to UPS)
*  2) Get an e-Bill file out of BILLDATA\E-BILL
*
* 022803 - JMK01 - ADD EBILL.HDR TO CSV FILE PRIOR TO SENDING TO CLIENTS
* 042806 - DRF   - Insert the company name addr city state and zip in the UPSDATA file that
*                  is sent to the client in the process program. The address info come out
*                  of the division unless no division is assign then it come out of the client record.
* 051005 - JCW01 - CHANGES TO @SELECTED, CLEARSELECT, AND STMT<X>
* 091206 - JMK02 - REMOVE EMAIL NOTICES FROM SCREEN IF NO ERRORS
* 100406 - JMK03 - ADD PROCESSING BLOCK FOR FILES WITH ERROR CONDITIONS
* 113006 - JMK04 - REMOVE THE DISPLAY OF SHIPPER AND SERVICE IF ALL GOOD
* 121506 - JMK05 - T200612150002 / * priority 4 * /  UPS 12/9 CHECK FOR DUPLICATION IN UPSDATA
* 072312 - RLM01 - Sysaid #3073 - Replace former employees' email addresses with those of current employees
* 100813 - JMK06 - SysAId#7322 - FBBP CREATE.UPSDATA has an error in lines 1223 and 1437
********************************************************************************
$INCLUDE FILE.DEFS INC_ADDS60.CODES
$INCLUDE PROG.ADMIN INC_OPTIONS

* Initialize variables
      PROMPT''
      CALL CHANNEL(CH.NUM)
      CALL GET.USER(USER.NAME)
      CO.NAME='AFS Logistics, LLC.'
      PROG.NAME='EBILL.IMPORT.NEW'
      PROG.DESC='e-Bill Freight Bill Entry System'
      PACK.NAME='Freight Payment'
      TAB=CHAR(9)
       UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'CREATE.UPSDATA' ; UPL.VOUT = ''                    ;* NPR_UPL 04/22/2010
       CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                                           ;* NPR_UPL 04/22/2010
      ESC=CHAR(27)
      MIN.CHARGE=362
      MIN.CHARGE=380
*
* Changed per email from Brain P Barker on 1/6/06. DRF
*
      REV.NORMAL=TERM.ESC.SEQ:CHAR(TERM.REV+TERM.DIM)
      REV.HILITE=TERM.ESC.SEQ:CHAR(TERM.REV)
      REV.OFF=TERM.ESC.SEQ:CHAR(TERM.NORMAL)
      MASK.CHAR='-'
      PLACE.HOLDER='!@#$%^&*()'

      CARRIER.ID='00041'                 ; * UPS - This is the default carrier
      EBILL.FOLDER='U:\E-BILL'           ; * Folder where e-Bill files are placed to be imported
      EBILL.FILENAME=''                  ; * Filename of e-Bill file to import as comma separated values (CSV)
      EBILL.SAVE.FILENAME=''             ; * Filename of e-Bill file to save as tab-delimited (XLS)

      EBILL.IMPORT=''                    ; * Original e-Bill file read in (CSV format)
      EBILL=''                           ; * Converted form of e-Bill file in pick format
      EBILL.SAVE=''                      ; * Saved copy of EBILL for writing to archive directory

      SHIPPER.LIST=''                    ; * List of unique shipper numbers found
      * <1>=shipper number <2>=client id <3>=division id
      SHIPPER.FOUND.LIST=''              ; * Shipper numbers found in cross-reference file
      SHIPPER.FOUND=0                    ; * Number of shipper numbers found in cross-reference
      SHIPPER.NOTFOUND.LIST=''           ; * Shipper numbers not found in cross-reference file
      SHIPPER.NOTFOUND=0                 ; * Number of shipper numbers not found in cross-reference

      UPS.SERVICE.DESCRIPTIONS=''        ; * List of service descriptions
      SERVICE.FOUND.LIST=''              ; * Service descriptions found in FB.TABLES item
      SERVICE.FOUND=0                    ; * Number of service descriptions found in FB.TABLES
      SERVICE.NOTFOUND.LIST=''           ; * Service descriptions not found in FB.TABLES item
      SERVICE.NOTFOUND=0                 ; * Number of service descriptions not found in FB.TABLES

      DATA.SCR.DA=''                     ; * Pick-list display variables
      HEADING.SCR.DA=''                  ; * The external subroutine POP.UP.LIST IN GEN.PROGS
      START.SCR.DA=0                     ; * pops up a screen list, but does not allow printing
      END.SCR.DA=0                       ; * This internal version allows printing
      DATA.PRT.DA=''
      HEADING1.PRT.DA=''
      HEADING2.PRT.DA=''

      SHIP.DATE.LIST=''                  ; * List of ship dates by shipper number

      BILL.REC=''
      GSR.AUDIT=''
*
* Accessorial Codes
*
      ACC.REC=''
*
* Made changes to the ACC.REC to match email from Brian P Barker on
* 01/14/05. - DRF
*
*df      ACC.REC<39,1>='Insured Value'
      ACC.REC<39,1>='Declared Value'
*df      ACC.REC<39,2>=35
*df      ACC.REC<39,2>=40
*df      ACC.REC<39,2>=120
      ACC.REC<39,2>=150
*df      ACC.REC<39,3>=35
*df      ACC.REC<39,3>=40
*df      ACC.REC<39,3>=120
      ACC.REC<39,3>=150
*df      ACC.REC<40,1>='Saturday Charge (Pickup and Delivery)'
      ACC.REC<40,1>='Saturday Charge Delivery'
*df      ACC.REC<40,2>=1000
      ACC.REC<40,2>=1250
*df      ACC.REC<40,3>=1000
      ACC.REC<40,3>=1250
      ACC.REC<41,1>='COD'
*df      ACC.REC<41,2>=600
*df      ACC.REC<41,2>=750
      ACC.REC<41,2>=850
*df      ACC.REC<41,3>=600
*df      ACC.REC<41,3>=750
      ACC.REC<41,3>=850
      ACC.REC<42,1>='Additional Handling'
*df      ACC.REC<42,2>=500
      ACC.REC<42,2>=600
*df      ACC.REC<42,3>=500
      ACC.REC<42,3>=600
      ACC.REC<43,1>='Hazardous Materials Surcharge Air/Ground'
      ACC.REC<43,2>=3000
      ACC.REC<43,3>=2000
      ACC.REC<44,1>='Early AM Surcharge'
*df      ACC.REC<44,2>=2850
*df      ACC.REC<44,3>=2850
      ACC.REC<45,1>='Delivery Confirmation Response'
*df      ACC.REC<45,2>=100
      ACC.REC<45,2>=125
*df      ACC.REC<45,3>=100
      ACC.REC<45,3>=125
*df      ACC.REC<46,1>='Saturday Charge (Pickup and Delivery)'
      ACC.REC<46,1>='Saturday Charge Pickup'
*DF      ACC.REC<46,2>=1000
*DF      ACC.REC<46,3>=1000
      ACC.REC<46,2>=1250
      ACC.REC<46,3>=1250
* Changed from 10.00 to 12.50 per email from Brian P Barker. DRF 5/6/05
*df      ACC.REC<47,1>='UPS Returns'
      ACC.REC<47,1>='Call Tag'
*df      ACC.REC<47,2>=25
*df      ACC.REC<47,2>=575
      ACC.REC<47,2>=700
*df      ACC.REC<47,3>=25
*df      ACC.REC<47,3>=575
      ACC.REC<47,3>=700
*df      ACC.REC<48,1>='International Surcharge'
      ACC.REC<48,1>='Extended Destination Surcharge'
      ACC.REC<48,2>=2000
      ACC.REC<48,3>=2000
      ACC.REC<49,1>='Missing/Invalid Account # Charge'
      ACC.REC<49,2>=1000
      ACC.REC<49,3>=1000
      ACC.REC<50,1>='Delivery Area Surcharge'
      ACC.REC<50,2>=150
      ACC.REC<50,3>=150
*
* Added below code on 01/14/05 per email from Brian P Barker. - DRF
*
      ACC.REC<52,1>='Chargeback Surcharge'
      ACC.REC<52,2>=1000
      ACC.REC<52,3>=1000
*
* Added the two codes below on 05/06/05 per email from Brian P Barker. DRF
*
      ACC.REC<53,1>='Pickup fee'
      ACC.REC<53,2>=400
      ACC.REC<53,3>=400
      ACC.REC<54,1>='Billing option'
*df      ACC.REC<54,2>=1500
      ACC.REC<54,2>=1000
*df      ACC.REC<54,3>=1500
      ACC.REC<54,3>=1000
      ACC.REC<56,1>='Split Duty Tax'
      ACC.REC<56,2>=1500
      ACC.REC<56,3>=1500

* Open files
      * Where the .CSV e-Bill file is saved after being downloaded from UPS
      * From here, it will read by EBILL.IMPORT
      * This pick file is known under Windows as BILLDATA\E-BILL
      OPEN '','BILLDATA.EBILL' TO F.BILLDATA.EBILL ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL',PROG.NAME)
      END

      * Where the .XLS e-Bill file is saved following importing for archival purposes
      * This pick file is known under Windows as BILLDATA\E-BILL HIST
      OPEN '','BILLDATA.EBILL.HIST' TO F.BILLDATA.EBILL.HIST ELSE
         CALL OPEN.ABORT('BILLDATA.EBILL.HIST',PROG.NAME)
      END

      * This is the location for the e-bill header line for output; * JMK01
      OPEN '','BILLDATA.FORMS' TO F.FORMS ELSE     ; * JMK01
         CALL OPEN.ABORT('BILLDATA.FORMS',PROG.NAME)         ; * JMK01
      END                                ; * JMK01

      * Cross-reference for shipper numbers and AFS client/division numbers
      OPEN '','EDI.CAR.ACNT.XREF' TO F.XREF ELSE
         CALL OPEN.ABORT('EDI.CAR.ACNT.XREF',PROG.NAME)
      END

      * Where the service descriptions for e-Bill file packages are stored
      * under the ID "UPS.EBILL.SERVICE.DESCRIPTIONS"
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END

      * Where old benchmarks are stored multivalued by service descriptions
      * This is used to calculate the logistics variance
      * It is also used as a work file to store net and incentive amounts between passes
      * When used as a work file, the ID is SHIPPER_NUMBER*TEMP
      * At the end of the program (at the THE.END label), all *TEMP items are deleted
      OPEN '','UPS.BM' TO F.UPS.BM ELSE
         CALL OPEN.ABORT('UPS.BM',PROG.NAME)
      END

      * AFS clients
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END

      * Carriers
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END

      * Bills cross reference - other bills files are comma files and are opened when
      * a client ID is available
      OPEN '','FB.BILLS.CRX' TO F.BILLS.CRX ELSE
         CALL OPEN.ABORT('FB.BILLS.CRX',PROG.NAME)
      END

      * Transportation mode file used to read transportation mode names
      OPEN '','FB.TRANSPORT' TO F.TRANSPORT ELSE
         CALL OPEN.ABORT('FB.TRANSPORT',PROG.NAME)
      END

      * Where client-division specific files are stored for inclusion in process emails
      * They are picked up from here by FB.3.1.NEW after the account is processed
      OPEN '','UPSDATA' TO F.UPSDATA ELSE
         CALL OPEN.ABORT('F.UPSDATA',PROG.NAME)
      END

      * Where the UPS GSR audit files are written to
      * UPS.IN is the VOC name for the directory BILLDATA\UPS
      OPEN '','UPS.IN' TO F.UPS.IN ELSE
         CALL OPEN.ABORT('F.UPS.IN',PROG.NAME)
      END

      * Write the GSR spreadsheet here before emailing
      OPEN '','EMAILDATA' TO F.EMAILDATA ELSE
         CALL OPEN.ABORT('EMAILDATA',PROG.NAME)
      END

      * Where the GSR spreadsheet is written to if the email cannot be sent
      * The user is notified if this is the case
      OPEN '','BILLDATA.':USER.NAME TO F.BILLDATA.USER ELSE
         CALL OPEN.ABORT('BILLDATA.':USER.NAME,PROG.NAME)
      END

      * Work file used to hold bill records until it is certain that they can all
      * be written
      WORK.FILE='FBWORK':CH.NUM
      OPEN '',WORK.FILE TO F.WORK ELSE
         EXECUTE 'CREATE-FILE ':WORK.FILE:' 1 1001' PASSLIST CAPTURING OUTPUT
         OPEN '',WORK.FILE TO F.WORK ELSE
            CALL OPEN.ABORT(WORK.FILE,PROG.NAME)
         END
      END
      CLEARFILE F.WORK                   ; * Clear any possible data in this file before using

* Show screen
      GOSUB DISPLAY.SCREEN

* Restrict program usage
      BEGIN CASE
         CASE USER.NAME='J-AMES'
         CASE USER.NAME='MYRA'
         CASE USER.NAME='MDODSON'
         CASE USER.NAME='DAVID'
*        CASE USER.NAME='KMESSENGER'     ; * JMK02
         CASE USER.NAME='MKERBOW'
         CASE USER.NAME='CDYSON'
         CASE 1
            TEMP='**  This is a restricted access application - Access Denied  **'
            CALL CENTER(TEMP,80)
            CRT @(0,12):TEMP
            CALL ELINE('')
            GOTO THE.END
      END CASE

* Get carrier
100:***
      MASK=CARRIER.ID:STR(MASK.CHAR,5-LEN(CARRIER.ID)):@(-4)
      HELP='Enter carrier ID or letters for search. [EX]it'
      CALL GEN.IN(11,4,MASK,'',Q,0,20,'','',2,11,4,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='' AND CARRIER.ID THEN QI=CARRIER.ID
      BEGIN CASE
         CASE QI='EX'
            GOTO THE.END
         CASE NOT(QI MATCHES '0N')
            CALL SOUNDEX.DISPLAY(QI,'CARRIERS','SDX.CARRIER,NAME','1,3,4',ITEM.LIST)
            BEGIN CASE
               CASE ITEM.LIST=''
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
               CASE ITEM.LIST#''
                  IF NUM(ITEM.LIST<1,1>) THEN DATA ITEM.LIST<1,1>
            END CASE
            GOSUB DISPLAY.SCREEN
            GOTO 100
         CASE NUM(QI) AND QI#''
            QI=QI'R%5'
            READ CARRIER.REC FROM F.CARRIERS,QI THEN
               CARRIER.ID=QI
               CARRIER.NAME=CARRIER.REC<1>
               CARRIER.CITY=CARRIER.REC<3>
               CARRIER.STATE=CARRIER.REC<4>
               CARRIER.MODE=CARRIER.REC<44>
            END ELSE
               CALL ELINE('ERROR - Carrier ':QI:' is not a valid carrier.')
               GOTO 100
            END
         CASE 1
            GOTO 100
      END CASE
      GOSUB DISPLAY.DATA

* GET EBILL HEADER REC ; * JMK01
      READ HDR.REC FROM F.FORMS,'UPS_EBILL_HEADER.TXT' THEN  ; * JMK01
         EBILL.HDR=HDR.REC<1>            ; * JMK01
         CONVERT CHAR(9) TO @VM IN EBILL.HDR       ; * JMK01
*DF         EBILL=EBILL.HDR                 ; * JMK01
      END                                ; * JMK01
* Show e-Bill files in BILLDATA\E-BILL directory for the selected carrier
* and let user select one to import
200:***
*      EXECUTE 'SSELECT BILLDATA.EBILL.HIST' CAPTURING OUTPUT
      EXECUTE 'GET-LIST EBILL.UPSDATA.LIST'
      NUM.FILES=@SELECTED
*     IF NUM.FILES=0 THEN   ; * JCW01
      IF NUM.FILES < 1 THEN              ; * JCW01
         GOSUB FILENAME.SAVE.INSTRUCTIONS
         GOTO THE.END
      END
      FILENAME.LIST=''
      DONE=0
      LOOP
         READNEXT FILENAME ELSE DONE=1
      UNTIL DONE=1
*DF         F1=FIELD(FILENAME,'-',1); * Carrier ID
         F1=FIELD(FILENAME,'_',1)        ; * Plan number
*DF         F2=FIELD(FILENAME,'-',2); * MM_DD_YYYY.CSV
         F2=FILENAME[12,999]
*DF         IF (F1=CARRIER.ID) AND (F2 MATCHES "2N'_'2N'_'4N'.CSV'") THEN
         IF (LEN(F1)=10) AND (F2 MATCHES "2N'_'2N'_'4N'.csv'") THEN
            FILENAME.LIST<-1>=FILENAME
         END
      REPEAT
      NUM.FILES=DCOUNT(FILENAME.LIST,@AM)
      IF NUM.FILES=0 THEN
         GOSUB FILENAME.SAVE.INSTRUCTIONS
         GOTO THE.END
      END
      FOR X=1 TO NUM.FILES
         FILENAME.LIST<X>=SPACE(1):FILENAME.LIST<X>:SPACE(78-LEN(FILENAME.LIST<X>))
      NEXT X
      HEADING=' ':EBILL.FOLDER:'$(contains e-Bill files waiting to be imported) '
      HEADING=CHANGE(HEADING,'$',SPACE(80-LEN(HEADING)))
      SELECTION=''
      CRT @(0,23):'Select an e-Bill file to import. [X]=Back [E]xit':@(-4):
      CALL POP.UP.LIST(FILENAME.LIST,HEADING,10,14,SELECTION)
      BEGIN CASE
         CASE SELECTION='E'
            GOTO THE.END
         CASE SELECTION='X'
            GOTO 100
         CASE 1
            EBILL.FILENAME=TRIM(FILENAME.LIST<SELECTION>)
            EBILL.SAVE.FILENAME=EBILL.FILENAME[1,LEN(EBILL.FILENAME)-3]:'XLS'
      END CASE
      GOSUB DISPLAY.DATA

* Verify that user is ready to start
300:***
      LN='Are you ready to import this e-Bill file? '
      MASK='N-'
      HELP='[Y]es [N]o [X]=Back [EX]it'
      CALL GEN.IN(0,20,LN:MASK,'',Q,0,2,'','',2,-2,20,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX' OR QI='N' OR QI='' OR QI='0'
            GOTO THE.END
         CASE QI='X'
            GOTO 200
         CASE QI='Y' OR QI='1'
            NULL
         CASE 1
            GOTO 300
      END CASE

* Read in the existing CSV e-Bill file
      CRT @(0,8):@(-3):@(0,8):'Reading e-Bill file...':
      READ EBILL.IMPORT FROM F.BILLDATA.EBILL.HIST,EBILL.FILENAME ELSE
         CRT @(0,20):EBILL.FOLDER:'\':EBILL.FILENAME:' not found.':@(-4)
         GOTO THE.END
      END

* Prepare the file by converting to pick format (values, subvalues)
      CRT @(0,8):@(-3):@(0,8):'Preparing e-Bill file for importation and processing...':
      * Check for existence of data within the file
      IF DCOUNT(EBILL.IMPORT,@AM)=0 THEN
         CRT @(0,20):'No data found in e-Bill file ':EBILL.FILENAME:'.':@(-4)
         GOTO THE.END
      END
      * Convert CSV format to pick format
      LINE.NUM=1
      LOOP WHILE EBILL.IMPORT#''
         LINE=EBILL.IMPORT<1>
         IF USER.NAME='DAVID' AND LINE.NUM=2690 THEN CALL ELINE(LINE.NUM:' ':LINE)
         LINE.NUM+=1
         IF INDEX(LINE,'"',1) THEN
            FOUND.QUOTE=0
            NEW.LINE=''
            FOR X=1 TO LEN(LINE)
               BEGIN CASE
                  CASE LINE[X,1]='"'
                     FOUND.QUOTE=NOT(FOUND.QUOTE)
                  CASE LINE[X,1]=','
                     IF FOUND.QUOTE THEN
                        NEW.LINE:=LINE[X,1]
                     END ELSE
                        NEW.LINE:=@VM
                     END
                  CASE 1
                     NEW.LINE:=LINE[X,1]
               END CASE
            NEXT X
            IF FOUND.QUOTE THEN
               CRT @(0,10):LINE
               CRT @(0,20):'Unmatched quote on line ':LINE.NUM:'.'
               CRT @(0,21):'Select:':@(-4)
               HELP='[C]ontinue and ignore extra quote [EX]it and fix'
               MASK='----'
FQ1:           CALL GEN.IN(8,21,MASK,'',Q,0,4,'','',2,8,21,1,QI,HELP,0,23)
               QI=OCONV(QI,'MCU')
               BEGIN CASE
                  CASE QI='EX' OR QI='EXIT'
                     GOTO THE.END
                  CASE QI#'C'
                     GOTO FQ1
               END CASE
               CRT @(0,10):@(-3)
            END
            LINE=NEW.LINE
         END ELSE
            LINE=CHANGE(LINE,',',@VM)
         END
         * Trim potential spaces off
         LINE=TRIM(LINE)
         LOOP WHILE INDEX(LINE,' ':@VM,1)
            LINE=CHANGE(LINE,' ':@VM,@VM)
         REPEAT
         LOOP WHILE INDEX(LINE,@VM:' ',1)
            LINE=CHANGE(LINE,@VM:' ',@VM)
         REPEAT
         EBILL<-1>=LINE
         DEL EBILL.IMPORT<1>
      REPEAT

* Check for good format in first row since this has been a problem recently
* If bad format, give a warning, delete that first row and continue
      IF EBILL<1,3>='' AND EBILL<1,4>='' AND EBILL<1,5>='' THEN
         CRT @(0,20):'Warning: First row of e-Bill data file is not in proper format.':@(-4)
         CRT @(0,21):'...Deleting first row of the file before continuing...':@(-4)
         CALL ELINE('')
         DEL EBILL<1>
         LINE.NUM-=1
      END

      CRT @(50,6):'(Total Lines = ':LINE.NUM:')'


* Save a copy of the raw e-Bill file in tab-delimited pick format for archiving in
* BILLDATA\E-BILL HIST folder (pick name in VOC is BILLDATA.EBILL.HIST)
      EBILL.SAVE=EBILL

      NUM.PACKAGES=DCOUNT(EBILL,@AM)     ; * Number of packages shipped=number of rows of file

* Read service description table
      READ UPS.SERVICE.DESCRIPTIONS FROM F.TABLES,'UPS.EBILL.SERVICE.DESCRIPTIONS' ELSE UPS.SERVICE.DESCRIPTIONS=''

* Pass 1:
*   Update list of service descriptions in FB.TABLES with contents of actual e-Bill file
*
PASS1:***
      PASS.NUMBER=1
      CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Updating Service Description table in FB.TABLES...':
      NEED.TO.UPDATE=0
      FOR X=1 TO NUM.PACKAGES
         SERVICE.DESCRIPTION=OCONV(EBILL<X,21>,'MCU')
         LOCATE SERVICE.DESCRIPTION IN UPS.SERVICE.DESCRIPTIONS<1> BY 'AL' SETTING POS ELSE
            INS SERVICE.DESCRIPTION BEFORE UPS.SERVICE.DESCRIPTIONS<1,POS>
            NEED.TO.UPDATE=1
         END
      NEXT X
      IF NEED.TO.UPDATE THEN
*        WRITE UPS.SERVICE.DESCRIPTIONS ON F.TABLES,'UPS.EBILL.SERVICE.DESCRIPTIONS'
      END
      NUM.SD=DCOUNT(UPS.SERVICE.DESCRIPTIONS<1>,@VM)

* Pass 2:
*   Build an array of unique shipper numbers and their corresponding clients/divisions
*   Build lists of shipper numbers found and not found for display
*   Build lists of service descriptions found and not found for display
*
PASS2:***
      PASS.NUMBER=2
      PLAN.AMOUNT=0
      READ DUPSBILL.CODES FROM F.TABLES,'UPSBILL.CODES' ELSE
         CALL ELINE('Cannot locate the UPSBILL.CODES in the FB.TABLES')
         GOTO THE.END
      END
      CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Checking Shipper Numbers and Service Descriptions...':
      CRT @(5,10):'Shipper Number      :'
      CRT @(5,11):'Service Description :'
      FOR X=1 TO NUM.PACKAGES
         BEGIN CASE
            CASE CARRIER.ID='00041'
               * e-bill format allows 10 digits, but only use last 6 for UPS
               IF LEN(EBILL<X,3>)=10 THEN
                  SHIPPER.NUMBER=EBILL<X,3>[5,6]
               END ELSE
*DF                 IF EBILL<X,3>=7920000 THEN EBILL<X,3>='7919E3'
*DF                  IF EBILL<X,3>='2.36E+60' THEN EBILL<X,3>='236E58'
*DF                  IF EBILL<X,3>='5.06E+95' THEN EBILL<X,3>='506E93'
*DF                  IF EBILL<X,3>='6370000' THEN EBILL<X,3>='6365E3'
*DF                  IF EBILL<X,3>[1,9]='186000000' THEN EBILL<X,3>='186E18'
*DF                  IF EBILL<X,3>='1.86E+20' THEN EBILL<X,3>='186E18'
*DF                  IF EBILL<X,3>='7.33E+45' THEN EBILL<X,3>='733E43'
*DF                   IF EBILL<X,3>='7.04E+11' THEN EBILL<X,3>='7035E8'
*DF                   IF EBILL<X,3>='390E+03' THEN EBILL<X,3>='3899E0'
*DF                   IF EBILL<X,3>='3900' THEN EBILL<X,3>='3899E0'
                  SHIPPER.NUMBER=EBILL<X,3>'R%6'
               END
* Get file date from first row and put in YYYYMMDD format for easy sorting
* This is the format used by items in the UPSDATA file
* Changed to get the date out of each line as more than one invoice
* shipper number might be in the file with different dates
               FILE.DATE=EBILL<X,5>
               PLAN.AMOUNT=PLAN.AMOUNT+ICONV(EBILL<X,37>,'MR2')+ICONV(EBILL<X,38>,'MR2')
               BEGIN CASE
                  CASE EBILL<X,22>='1' OR EBILL<X,22>='4'
                     FILE.TYPE='O'
                  CASE EBILL<X,22>='2'
                     FILE.TYPE='I'
                  CASE EBILL<X,22>='3'
                     FILE.TYPE='T'
                  CASE EBILL<X,22>=''
                     LOCATE EBILL<X,20> IN DUPSBILL.CODES<1> BY 'AL' SETTING XX.POS THEN
                        FILE.TYPE=DUPSBILL.CODES<3,XX.POS>
                        IF FILE.TYPE#'I' AND FILE.TYPE#'O' AND FILE.TYPE#'T' AND FILE.TYPE#'S' THEN
                           CALL ELINE('Invalid type for ':DUPSBILL.CODES<1,XX.POS>:' Using a code of <S>')
                           EMAIL.OUT=''
                           EMAIL.OUT<1>='JDarwin@afs.net':@VM:'parcel@afs.net':@VM:'BPBarker@afs.net'   ; * GRB01
                           EMAIL.OUT<2>='DFriend@afs.net':@VM:'MDodson@afs.net':@VM:'OHolman@afs.net'
                           EMAIL.OUT<3>=''         ; * BCC: Email addresses
                           EMAIL.OUT<4>='Reports@afs.net'     ; * From Email address
                           EMAIL.OUT<5>='Invalid type for ':DUPSBILL.CODES<1,XX.POS>:' Using a code of <S>'

                           * Email body
                           EMAIL.OUT<6,-1>='Invalid type of ':DUPSBILL.CODES<3,XX.POS>:' for ':DUPSBILL.CODES<1,XX.POS>:' in shipper number ':SHIPPER.NUMBER
                           VIN=EMAIL.OUT
                           VOUT=''
*                           CALL SENDMAIL(VIN,VOUT)
                           IF VOUT<1>='ERROR' THEN
                              CALL ELINE('Email failure occurred for the invalid type for shipper ':SHIPPER.NUMBER)
                           END ELSE
*                           CALL ELINE('Invalid type email to ':EMAIL.OUT<1>:'.') ; * JMK02
                           END
                           DUPSBILL.CODES<3,XX.POS>='S'
*                           WRITE DUPSBILL.CODES ON F.TABLES,'UPSBILL.CODES'
                        END
                     END ELSE
                        INS EBILL<X,20> BEFORE DUPSBILL.CODES<1,XX.POS>
                        INS EBILL<X,21> BEFORE DUPSBILL.CODES<2,XX.POS>
                        INS 'S' BEFORE DUPSBILL.CODES<3,XX.POS>
                        EMAIL.OUT=''
                        EMAIL.OUT<1>='JDarwin@afs.net':@VM:'parcel@afs.net':@VM:'BPBarker@afs.net'   ; * GRB01
*                       EMAIL.OUT<2>='DFriend@afs.net':@VM:'MDodson@afs.net':@VM:'OHolman@afs.net'  ; * RLM01
                        EMAIL.OUT<2>='DFriend@afs.net':@VM:'MDodson@afs.net':@VM:'BFranklin@afs.net'  ; * RLM01
                        EMAIL.OUT<3>=''  ; * BCC: Email addresses
                        EMAIL.OUT<4>='Reports@afs.net'        ; * From Email address
                        EMAIL.OUT<5>='New type for ':DUPSBILL.CODES<1,XX.POS>:' Using a code of <S>'

                        * Email body
                        EMAIL.OUT<6,-1>='New type for ':DUPSBILL.CODES<1,XX.POS>:' in shipper number ':SHIPPER.NUMBER
                        VIN=EMAIL.OUT
                        VOUT=''
*                        CALL SENDMAIL(VIN,VOUT)
                        IF VOUT<1>='ERROR' THEN
                           CALL ELINE('Email failure occurred for the new type for shipper ':SHIPPER.NUMBER)
                        END ELSE
*                         CALL ELINE('New type email to ':EMAIL.OUT<1>:'.') ; * JMK02
                        END
*                        WRITE DUPSBILL.CODES ON F.TABLES,'UPSBILL.CODES'
                     END
               END CASE
               UPS.INVOICE.AMOUNT=ICONV(EBILL<X,6>,'MR2')
               IF LEN(FILE.DATE)=7 THEN FILE.DATE=0:FILE.DATE
               IF LEN(FILE.DATE)#8 THEN
                  CRT @(0,20):'File Date from e-Bill file is invalid.':@(-4)
                  GOTO THE.END
               END ELSE
                  FILE.DATE=FILE.DATE[1,2]:'-':FILE.DATE[3,2]:'-':FILE.DATE[5,4]
                  FILE.DATE=ICONV(FILE.DATE,'D')
                  IF FILE.DATE='' OR MOD(FILE.DATE,7)#6 THEN
                     CRT @(0,20):'File Date from e-Bill file is invalid.':@(-4)
                     GOTO THE.END
                  END ELSE
                     BILL.DATE=FILE.DATE           ; * Used for call to GET.EXPENSE and Bills file
                     FILE.DATE=EBILL<X,5>
                     IF LEN(FILE.DATE)=7 THEN FILE.DATE=0:FILE.DATE
*df                    FILE.DATE=FILE.DATE[5,4]:FILE.DATE[1,2]:FILE.DATE[3,2]
                  END
               END
            CASE 1
               * Use entire 10 digits
               SHIPPER.NUMBER=EBILL<X,3>
         END CASE
         EBILL<X,3>=SHIPPER.NUMBER       ; * Write it back for later comparison
         CRT @(27,10):SHIPPER.NUMBER:@(-4)
         LOCATE SHIPPER.NUMBER:FILE.DATE IN SHIPPER.LIST<5> BY 'AL' SETTING POS ELSE
            INS SHIPPER.NUMBER BEFORE SHIPPER.LIST<1,POS>
            ITEM.ID=CARRIER.ID:'*':SHIPPER.NUMBER
            READ SHIP.REC FROM F.XREF,ITEM.ID THEN
               SHIPPER.FOUND+=1
               INS SHIPPER.NUMBER BEFORE SHIPPER.FOUND.LIST<POS>
               INS SHIP.REC<1> BEFORE SHIPPER.LIST<2,POS>    ; * AFS Client ID
               INS SHIP.REC<2> BEFORE SHIPPER.LIST<3,POS>    ; * AFS Division ID
               INS FILE.DATE BEFORE SHIPPER.LIST<4,POS>      ; * Date of invoice
               INS SHIPPER.NUMBER:FILE.DATE BEFORE SHIPPER.LIST<5,POS>           ; * New ID
               INS UPS.INVOICE.AMOUNT BEFORE SHIPPER.LIST<6,POS>       ; * Invoice amount for comparison
               INS FILE.TYPE BEFORE SHIPPER.LIST<7,POS>
            END ELSE
               SHIPPER.NOTFOUND+=1
               INS SHIPPER.NUMBER BEFORE SHIPPER.NOTFOUND.LIST<POS>
               INS 'NOT FOUND' BEFORE SHIPPER.LIST<2,POS>    ; * AFS Client ID
               INS 'NOT FOUND' BEFORE SHIPPER.LIST<3,POS>    ; * AFS Division ID
               INS FILE.DATE BEFORE SHIPPER.LIST<4,POS>      ; * Date of invice
               INS SHIPPER.NUMBER:FILE.DATE BEFORE SHIPPER.LIST<5,POS>           ; * New ID
               INS UPS.INVOICE.AMOUNT BEFORE SHIPPER.LIST<6,POS>       ; * Invoice amount for comparison
               INS FILE.TYPE BEFORE SHIPPE.LIST<7,POS>
            END
         END
         SERVICE.DESCRIPTION=OCONV(EBILL<X,21>,'MCU')
         CRT @(27,11):SERVICE.DESCRIPTION:@(-4)
         LOCATE SERVICE.DESCRIPTION IN UPS.SERVICE.DESCRIPTIONS<1> BY 'AL' SETTING POS THEN
            LOCATE SERVICE.DESCRIPTION IN SERVICE.FOUND.LIST BY 'AL' SETTING POS ELSE
               SERVICE.FOUND+=1
               INS SERVICE.DESCRIPTION BEFORE SERVICE.FOUND.LIST<POS>
            END
         END ELSE
            LOCATE SERVICE.DESCRIPTION IN SERVICE.NOTFOUND.LIST BY 'AL' SETTING POS ELSE
               SERVICE.NOTFOUND+=1
               INS SERVICE.DESCRIPTION BEFORE SERVICE.NOTFOUND.LIST<POS>
            END
         END
      NEXT X

* Display found and not found shipper numbers
      * Screen parameters
      DATA.SCR.DA=''
      T=LEN(SHIPPER.FOUND)+LEN('  Shipper Numbers Found')-20
      FOR X=1 TO SHIPPER.FOUND
         DATA.SCR.DA<X>=SPACE(T):SHIPPER.FOUND.LIST<X>'R#20'
      NEXT X
      T=38-T
      FOR X=1 TO SHIPPER.NOTFOUND
         IF DATA.SCR.DA<X>='' THEN
            DATA.SCR.DA<X>:=SPACE(58)
         END ELSE
            DATA.SCR.DA<X>:=SPACE(T)
         END
         DATA.SCR.DA<X>:=SHIPPER.NOTFOUND.LIST<X>'R#20'
      NEXT X

      HEADING.SCR.DA=' ':SHIPPER.FOUND:' Shipper Numbers Found$':SHIPPER.NOTFOUND:' Shipper Numbers Not Found '
      HEADING.SCR.DA=CHANGE(HEADING.SCR.DA,'$',SPACE(80-LEN(HEADING.SCR.DA)))
      START.SCR.DA=11
      END.SCR.DA=20

      * Printer parameters
      DATA.PRT.DA=DATA.SCR.DA
      HEADING1.PRT.DA=CARRIER.ID:' ':CARRIER.NAME:' e-Bill Shipper Number Report'
      HEADING2.PRT.DA=HEADING.SCR.DA

      TOTAL.SHIPPER=SHIPPER.FOUND+SHIPPER.NOTFOUND
      TOTAL.SHIPPER.STMT=TOTAL.SHIPPER:' unique Shipper Numbers detected in e-Bill file'
      CALL CENTER(TOTAL.SHIPPER.STMT,80)
      CRT @(0,8):@(-3):@(0,8):TOTAL.SHIPPER.STMT
      IF SHIPPER.NOTFOUND THEN
         CRT @(0,22):'Shipper numbers not found must first be added to file EDI.CAR.ACNT.XREF.'
         GOSUB SETUP.DISPLAY.DA          ; * JMK04
      END
*     GOSUB SETUP.DISPLAY.DA             ; * JMK04

* Display found and not/found service descriptions
      * Screen parameters
      DATA.SCR.DA=''
      T=LEN(SERVICE.FOUND)+LEN('  Service Descriptions Found')-24
      FOR X=1 TO SERVICE.FOUND
         DATA.SCR.DA<X>=SPACE(T):SERVICE.FOUND.LIST<X>'R#24'
      NEXT X
      T=42-T
      FOR X=1 TO SERVICE.NOTFOUND
         IF DATA.SCR.DA<X>='' THEN
            DATA.SCR.DA<X>:=SPACE(62)
         END ELSE
            DATA.SCR.DA<X>:=SPACE(T)
         END
         DATA.SCR.DA<X>:=SERVICE.NOTFOUND.LIST<X>'R#24'
      NEXT X

      HEADING.SCR.DA=' ':SERVICE.FOUND:' Service Descriptions Found$':SERVICE.NOTFOUND:' Service Descriptions Not Found '
      HEADING.SCR.DA=CHANGE(HEADING.SCR.DA,'$',SPACE(80-LEN(HEADING.SCR.DA)))
      START.SCR.DA=11
      END.SCR.DA=20

      * Printer parameters
      DATA.PRT.DA=DATA.SCR.DA
      HEADING1.PRT.DA=CARRIER.ID:' ':CARRIER.NAME:' e-Bill Service Description Report'
      HEADING2.PRT.DA=HEADING.SCR.DA

      TOTAL.SERVICE=SERVICE.FOUND+SERVICE.NOTFOUND
      TOTAL.SERVICE.STMT=TOTAL.SERVICE:' unique Service Descriptions detected in e-Bill file'
      CALL CENTER(TOTAL.SERVICE.STMT,80)
      CRT @(0,8):@(-3):@(0,8):TOTAL.SERVICE.STMT
      CRT @(0,22):'Service Descriptions not found must first be added to file FB.TABLES.'
      IF SERVICE.NOTFOUND>0 THEN         ; * JMK04
         GOSUB SETUP.DISPLAY.DA
      END                                ; * JMK04
      GOSUB BLOCK.CLIENTS                ; * JMK03

      IF (SHIPPER.NOTFOUND+SERVICE.NOTFOUND)>0 THEN
         CRT @(0,20):'Enter the Shipper Numbers and/or Service Descriptions that were not found.':@(-4)
         GOTO THE.END
      END

* Assign number of unique shippers in e-Bill file
      NUM.SHIPPERS=DCOUNT(SHIPPER.LIST<1>,@VM)

* Pass 3
*   Check all client numbers and make sure that all BILLS and BILLS.HIST files will open
*   Read the BM.ARRAY record for each client and update it from the master list in FB.TABLES, if needed
*   For each shipper number in the list, pass through the entire e-Bill data file and do the following:
*     Sum up net and incentive amounts per service description per client and write to UPS.BM as a temp item (this is later deleted)
*     Build a list of all ship dates for each shipper number
*
PASS3:***
      PASS.NUMBER=3
      CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Checking clients, Identifying ship dates, Adding nets/incentives...':
      SHIP.DATE.LIST=''
      FOR X=1 TO NUM.SHIPPERS
         SHIPPER.NUMBER=SHIPPER.LIST<1,X>
         FILE.DATE=SHIPPER.LIST<4,X>
         CLIENT.ID=SHIPPER.LIST<2,X>
         DIVISION.ID=SHIPPER.LIST<3,X>
         READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
            CRT @(0,20):'Client ':CLIENT.ID:' not on file - Aborting.':@(-4)
            GOTO THE.END
         END
         OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
            CRT @(0,20):'Open failed for FB.BILLS,':CLIENT.ID:' - Aborting.':@(-4)
            GOTO THE.END
         END
         OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILLS.HIST ELSE
            CRT @(0,20):'Open failed for FB.BILLS.HIST,':CLIENT.ID:' - Aborting.':@(-4)
            GOTO THE.END
         END
         IN.FILE=0
         OUT.FILE=0
         BOTH.FILE=0
         BM.ARRAY=''
         READ BM.ARRAY.I FROM F.UPS.BM,CLIENT.ID:'-I' THEN
            * Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
            * Don't insert - Give warning and end program instead
            FOR Y=1 TO NUM.SD
               SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>
               LOCATE SERVICE.DESCRIPTION IN BM.ARRAY.I<1> BY 'AL' SETTING POS ELSE
                  * INS SERVICE.DESCRIPTION BEFORE BM.ARRAY<1,POS>
                  * INS '' BEFORE BM.ARRAY<2,POS>
                  CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-I.':@(-4)
                  CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)
                  GOTO THE.END
               END
            NEXT Y
            BM.ARRAY<21>=BM.ARRAY.I<1>
            BM.ARRAY<22>=BM.ARRAY.I<2>
            BM.ARRAY<23>=BM.ARRAY.I<3>
            BM.ARRAY<41>=BM.ARRAY.I<1>
            BM.ARRAY<42>=BM.ARRAY.I<2>
            BM.ARRAY<43>=BM.ARRAY.I<3>
            IN.FILE=1
            * WRITE BM.ARRAY ON F.UPS.BM,CLIENT.ID; * Write new record with added service descriptions
         END
         READ BM.ARRAY.O FROM F.UPS.BM,CLIENT.ID:'-O' THEN
            * Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
            * Don't insert - Give warning and end program instead
            FOR Y=1 TO NUM.SD
               SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>
               LOCATE SERVICE.DESCRIPTION IN BM.ARRAY.O<1> BY 'AL' SETTING POS ELSE
                  * INS SERVICE.DESCRIPTION BEFORE BM.ARRAY<1,POS>
                  * INS '' BEFORE BM.ARRAY<2,POS>
                  CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'-O.':@(-4)
                  CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)
                  GOTO THE.END
               END
            NEXT Y
            BM.ARRAY<1>=BM.ARRAY.O<1>
            BM.ARRAY<2>=BM.ARRAY.O<2>
            BM.ARRAY<3>=BM.ARRAY.O<3>
            BM.ARRAY<61>=BM.ARRAY.O<1>
            BM.ARRAY<62>=BM.ARRAY.O<2>
            BM.ARRAY<63>=BM.ARRAY.O<3>
            OUT.FILE=1
            * WRITE BM.ARRAY ON F.UPS.BM,CLIENT.ID; * Write new record with added service descriptions
         END
         IF IN.FILE#OUT.FILE THEN
            IF IN.FILE=0 THEN
               CRT @(0,20):'Logistics benchmarks not on file for client ':CLIENT.ID:'-I - Aborting.':@(-4)
            END ELSE
               CRT @(0,20):'Logistics benchmarks not on file for client ':CLIENT.ID:'-O - Aborting.':@(-4)
            END
            CRT @(0,21):'Run UPS.BM.SETUP for this client to establish old benchmark percents.':@(-4)
            GOTO THE.END
         END ELSE
            IF IN.FILE=1 THEN
*DF             BM.ARRAY=BM.ARRAY.O
            END ELSE
               READ BM.ARRAY FROM F.UPS.BM,CLIENT.ID THEN
                  * Insert any service descriptions in FB.TABLES that are not in client's UPS.BM item
                  * Don't insert - Give warning and end program instead
                  FOR Y=1 TO NUM.SD
                     SERVICE.DESCRIPTION=UPS.SERVICE.DESCRIPTIONS<1,Y>
                     LOCATE SERVICE.DESCRIPTION IN BM.ARRAY<1> BY 'AL' SETTING POS ELSE
                        * INS SERVICE.DESCRIPTION BEFORE BM.ARRAY<1,POS>
                        * INS '' BEFORE BM.ARRAY<2,POS>
                        CRT @(0,20):'Service description "':SERVICE.DESCRIPTION:'" not in UPS.BM for client ':CLIENT.ID:'.':@(-4)
                        CRT @(0,21):'Run UPS.BM.SETUP for this client to enter old benchmark percent.':@(-4)
                        GOTO THE.END
                     END
                  NEXT Y
                  BM.ARRAY<21>=BM.ARRAY<1>
                  BM.ARRAY<22>=BM.ARRAY<2>
                  BM.ARRAY<23>=BM.ARRAY<3>
                  BM.ARRAY<41>=BM.ARRAY<1>
                  BM.ARRAY<42>=BM.ARRAY<2>
                  BM.ARRAY<43>=BM.ARRAY<3>
                  BM.ARRAY<61>=BM.ARRAY<1>
                  BM.ARRAY<62>=BM.ARRAY<2>
                  BM.ARRAY<63>=BM.ARRAY<3>
                  BOTH.FILE=1
                  * WRITE BM.ARRAY ON F.UPS.BM,CLIENT.ID; * Write new record with added service descriptions
               END ELSE
                  CRT @(0,20):'Logistics benchmarks not on file for client ':CLIENT.ID:' - Aborting.':@(-4)
                  CRT @(0,21):'Run UPS.BM.SETUP for this client to establish old benchmark percents.':@(-4)
                  GOTO THE.END
               END
            END
         END
         GOSUB ZERO.OUT.OTHER.ATTRIBUTES.IN.BM.ARRAY
         ADDR.CORR.ARRAY=''
         VOID.ARRAY=''
         FOR Y=1 TO NUM.PACKAGES
            IF EBILL<Y,3>=SHIPPER.NUMBER AND EBILL<Y,5>=FILE.DATE THEN
               SERVICE.DESCRIPTION=EBILL<Y,21>
               TRACKING.NUMBER=EBILL<Y,7>
               FILE.TYPE=''
               IF EBILL<Y,22>='1' OR EBILL<Y,22>='4' THEN
                  FILE.TYPE=1
               END
               IF EBILL<Y,22>='2' THEN
                  FILE.TYPE=2
               END
               IF EBILL<Y,22>='3' THEN
                  FILE.TYPE=3
               END
               IF FILE.TYPE # '' THEN
                  ATT.SETTING=(FILE.TYPE-1)*20+19
                  BM.ARRAY<ATT.SETTING>=BM.ARRAY<ATT.SETTING>+1
               END
               IF FILE.TYPE='' THEN
                  LOCATE EBILL<Y,20> IN DUPSBILL.CODES<1> BY 'AL' SETTING XX.POS THEN
                     FILE.CODE=DUPSBILL.CODES<3,XX.POS>
                  END
                  BEGIN CASE
                     CASE FILE.CODE='O'
                        FILE.TYPE='1'
                     CASE FILE.CODE='I'
                        FILE.TYPE=2
                     CASE FILE.CODE='T'
                        FILE.TYPE=3
                     CASE FILE.CODE='S'
                        FILE.TYPE=4
                     CASE 1
                        CALL ELINE('Invalid code using the S code')
                        FILE.TYPE=4
                  END CASE
               END
               ATT.SETTING=(FILE.TYPE-1)*20
               LOCATE SERVICE.DESCRIPTION IN BM.ARRAY<ATT.SETTING+1> BY 'AL' SETTING BM.POS THEN
                  BEGIN CASE
                     CASE SERVICE.DESCRIPTION='2ND AIR AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='2ND DAY AIR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='3DAY SELECT'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='EARLY AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='EXPEDITED'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='EXPRESS'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT 2ND AIR AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT 2ND DAY AI'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT 3DAY SELEC'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT NEXT DAY A'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='HUNDREDWEIGHT NEXT DAY S'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='NEXT DAY AIR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='NEXT DAY AIR SAVER'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='SONIC AIR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='2ND DAY AIR HUNDREDWT'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='3DAY SELECT HUNDREDWT'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='NEXT DAY AIR HUNDREDWT'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='NEXT DAY AIR SAVER HUNDR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='ADDR. CORR. 2ND AIR AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='ADDR. CORR. 2ND DAY AI'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='ADDR. CORR. 3DAY SELEC'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='ADDR. CORR. EARLY AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='ADDR. CORR. EXPEDITED'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='ADDR. CORR. EXPRESS'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='ADDR. CORR. NEXT DAY A'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='COM. 2ND AIR AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='COM. 2ND DAY AIR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='COM. 3DAY SELECT'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='COM. EARLY AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='COM. NEXT DAY AIR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='COM. NEXT DAY AIR SAVER'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='RES. 2ND AIR AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='RES. 2ND DAY AIR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='RES. 3DAY SELECT'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='RES. EARLY AM'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='RES. NEXT DAY AIR'
                        ACC.SUB.POS=2
                     CASE SERVICE.DESCRIPTION='RES. NEXT DAY AIR SAVER'
                        ACC.SUB.POS=2
                     CASE 1
                        ACC.SUB.POS=3
                  END CASE
                  PACKAGE.TYPE=EBILL<Y,13>
                  IF INDEX(SERVICE.DESCRIPTION,'VOID',1) ELSE
                     LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS ELSE
                        INS TRACKING.NUMBER BEFORE VOID.ARRAY<1,TEMP.POS>
                        INS SERVICE.DESCRIPTION BEFORE VOID.ARRAY<2,TEMP.POS>
                        INS ICONV(EBILL<Y,37>,'MR2') BEFORE VOID.ARRAY<3,TEMP.POS>
                        INS BM.POS BEFORE VOID.ARRAY<4,TEMP.POS>
                        INS ATT.SETTING BEFORE VOID.ARRAY<5,TEMP.POS>
                        INS ACC.SUB.POS BEFORE VOID.ARRAY<6,TEMP.POS>
                        INS PACKAGE.TYPE BEFORE VOID.ARRAY<7,TEMP.POS>
                     END
                  END
                  IF PACKAGE.TYPE='LTR' THEN
                     NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                     IF SHIPPER.NUMBER='1XW847' OR SHIPPER.NUMBER='318778' OR CLIENT.ID='01181' OR CLIENT.ID='00861' OR CLIENT.ID='00888' OR CLIENT.ID='00913' OR CLIENT.ID='00928' OR CLIENT.ID='00929' OR CLIENT.ID='01085' OR CLIENT.ID='01196' OR CLIENT.ID='01132' OR SHIPPER.NUMBER='784421' OR CLIENT.ID='01222' OR SHIPPER.NUMBER='675394' OR CLIENT.ID='00392' OR SHIPPER.NUMBER='179747' OR SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' OR CLIENT.ID='01157' OR CLIENT.ID='01368' OR CLIENT.ID='01483' OR CLIENT.ID='01484' OR CLIENT.ID='01286' OR (CLIENT.ID='01338' AND DIVISION.ID#'00010') OR CLIENT.ID='01352' OR CLIENT.ID='01292' OR CLIENT.ID='01273' OR CLIENT.ID='01363' OR CLIENT.ID='01066' OR CLIENT.ID='01223' OR CLIENT.ID='01256' OR CLIENT.ID='01428' THEN
                        IF (CLIENT.ID='01157' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) OR (SHIPPER.NUMBER='179747' AND EBILL<Y,20>='WWS') OR (CLIENT.ID='01428' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) THEN
                           BM.ARRAY<ATT.SETTING+18>=BM.ARRAY<ATT.SETTING+18>+NET.CHARGE
                        END ELSE
                           IF SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' THEN
                              IF ACC.SUB.POS='2' THEN
                                 BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                              END
                           END
                        END
                     END
                     ACC.CHARGE=0
                     FOR XX = 39 TO 56
                        IF EBILL<Y,XX>='Y' THEN
                           IF NET.CHARGE > ACC.REC<XX,ACC.SUB.POS> THEN
                              NET.CHARGE=NET.CHARGE-ACC.REC<XX,ACC.SUB.POS>
                              ACC.CHARGE=ACC.CHARGE+ACC.REC<XX,ACC.SUB.POS>
                           END ELSE
                              ACC.CHARGE=ACC.CHARGE+NET.CHARGE
                              NET.CHARGE=0
                           END
                        END
                     NEXT XX
*DF                    BM.ARRAY<8,BM.POS>+=ICONV(EBILL<Y,37>,'MR2'); * Net per service description
                     IF SERVICE.DESCRIPTION='GUARANTEED SERVICE REFUN' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                     END
                     IF SERVICE.DESCRIPTION='HOST MANIFEST VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='UPS ONL WORLDSHIP VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='VENDOR MANIFEST VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='CAMPUS SHIP VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='UPS INTERNET VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='MANIFEST EDI VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='CREDIT ADJUSTMENTS' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        IF EBILL<Y,59>[1,3]='ADD' OR EBILL<Y,59>[1,4]='RESI' OR EBILL<Y,59>[1,15]='BILLED FOR VOID' OR EBILL<Y,60>[1.3]='ADD' OR EBILL<Y,60>[1,4]='RESI' OR EBILL<Y,60>[1,15]='BILLED FOR VOID' ELSE
*DF                        IF EBILL<Y,59>[1,12]='LATE PAYMENT' OR EBILL<Y,59>[1,8]='LATE FEE' OR EBILL<Y,60>[1,12]='LATE PAYMENT' OR EBILL<Y,60>[1,8]='LATE FEE' THEN
                           NET.CHARGE=0
                        END
*DF*
*DF* If it is a late payment fee do not use for overcharge per Brian P Barker
*DF* DRF 06/23/05
*DF*
*
* Change to only get overcharge for bills that start with ADD RESI or
* VOID in column 59 or 69, Per Brian P Barker. DRF 02/23/06
*
                        IF NET.CHARGE < 0 THEN
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
*DF*
*DF* Put the net charges back to calculate the rest of the bill. DRF 06/23/05
*DF*
                     END
                     IF SHIPPER.NUMBER='E79490' THEN
                        IF SERVICE.DESCRIPTION[1,11]='ADDR. CORR.' AND NET.CHARGE+0 > 0 THEN
*                          IF SERVICE.DESCRIPTION[1,18]'ADDR. CORR. GROUND' THEN           ; * JMK06
                           IF SERVICE.DESCRIPTION[1,18]='ADDR. CORR. GROUND' THEN          ; * JMK06
                              MAX.ADDR.CORR='500'
                           END ELSE
                              MAX.ADDR.CORR='1000'
                           END
                           ADDR.CORR.ID=EBILL<Y,32>:'*':EBILL<Y,35>
                           LOCATE ADDR.CORR.ID IN ADDR.CORR.ARRAY<1> BY 'AL' SETTING ADDR.CORR.POS THEN
                              ADDR.CORR.ARRAY<3,ADDR.CORR.POS>=ADDR.CORR.ARRAY<3,ADDR.CORR.POS>+NET.CHARGE
                              ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE
                              IF EBILL<Y,33>#'' THEN
                                 ADDR.CORR.ARRAY<6,ADDR.CORR.POS>=EBILL<Y,33>
                              END
                              IF EBILL<Y,34>#'' THEN
                                 ADDR.CORR.ARRAY<7,ADDR.CORR.POS>=EBILL<Y,34>
                              END
                              NET.CHARGE=0
                           END ELSE
                              INS ADDR.CORR.ID BEFORE ADDR.CORR.ARRAY<1,ADDR.CORR.POS>
                              INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<3,ADDR.CORR.POS>
                              IF NET.CHARGE > MAX.ADDR.CORR THEN
                                 ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE-MAX.ADDR.CORR
                                 NET.CHARGE = MAX.ADDR.CORR
                              END
                              INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<2,ADDR.CORR.POS>
                              INS EBILL<Y,32> BEFORE ADDR.CORR.ARRAY<5,ADDR.CORR.POS>
                              INS EBILL<Y,33> BEFORE ADDR.CORR.ARRAY<6,ADDR.CORR.POS>
                              INS EBILL<Y,34> BEFORE ADDR.CORR.ARRAY<7,ADDR.CORR.POS>
                              INS EBILL<Y,35> BEFORE ADDR.CORR.ARRAY<8,ADDR.CORR.POS>
                           END
                        END
                     END
                     BM.ARRAY<ATT.SETTING+8,BM.POS>+=NET.CHARGE        ; * Net per service description
                     BM.ARRAY<ATT.SETTING+14,BM.POS>+=ACC.CHARGE       ; * Accessorial Charge
                     GROSS.CHARGE=NET.CHARGE+ICONV(EBILL<Y,38>,'MR2')
                     IF GROSS.CHARGE > MIN.CHARGE + (MIN.CHARGE*BM.ARRAY<3,BM.POS>/10000)'R0' OR BM.ARRAY<3,BM.POS>=10000 THEN
                        BM.ARRAY<ATT.SETTING+9,BM.POS>+=ICONV(EBILL<Y,38>,'MR2')           ; * Incentive per service description for LTL
                        BM.ARRAY<ATT.SETTING+10,BM.POS>+=GROSS.CHARGE
                     END
                     BM.ARRAY<ATT.SETTING+20>=BM.ARRAY<ATT.SETTING+20>+ICONV(EBILL<Y,37>,'MR2')
                  END ELSE
                     NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                     IF SHIPPER.NUMBER='1XW847' OR SHIPPER.NUMBER='318778' OR CLIENT.ID='01181' OR CLIENT.ID='00861' OR CLIENT.ID='00888' OR CLIENT.ID='00913' OR CLIENT.ID='00928' OR CLIENT.ID='00929' OR CLIENT.ID='01085' OR CLIENT.ID='01196' OR CLIENT.ID='01132' OR SHIPPER.NUMBER='784421' OR CLIENT.ID='01222' OR SHIPPER.NUMBER='675394' OR CLIENT.ID='00392' OR SHIPPER.NUMBER='179747' OR SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' OR CLIENT.ID='01157' OR CLIENT.ID='01368' OR CLIENT.ID='01483' OR CLIENT.ID='01484' OR CLIENT.ID='01286' OR (CLIENT.ID='01338' AND DIVISION.ID#'00010') OR CLIENT.ID='01352' OR CLIENT.ID='01292' OR CLIENT.ID='01273' OR CLIENT.ID='01363' OR CLIENT.ID='01066' OR CLIENT.ID='01223' OR CLIENT.ID='01256' OR CLIENT.ID='01428' THEN
                        IF (CLIENT.ID='01157' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) OR (SHIPPER.NUMBER='179747' AND EBILL<Y,20>='WWS') OR (CLIENT.ID='01428' AND (EBILL<Y,20>='RSV' OR EBILL<Y,20>='RSL')) THEN
                           BM.ARRAY<ATT.SETTING+18>=BM.ARRAY<ATT.SETTING+18>+NET.CHARGE
                        END ELSE
                           IF SHIPPER.NUMBER='09154W' OR SHIPPER.NUMBER='22W9A9' OR SHIPPER.NUMBER='22W9A7' OR SHIPPER.NUMBER='750841' OR SHIPPER.NUMBER='084E1W' THEN
                              IF ACC.SUB.POS='2' THEN
                                 BM.ARRAY<ATT.SETTING+15>=BM.ARRAY<ATT.SETTING+15>+NET.CHARGE
                              END
                           END
                        END
                     END
                     ACC.CHARGE=0
                     FOR XX = 39 TO 56
                        IF EBILL<Y,XX>='Y' THEN
                           IF NET.CHARGE > ACC.REC<XX,ACC.SUB.POS> THEN
                              NET.CHARGE=NET.CHARGE-ACC.REC<XX,ACC.SUB.POS>
                              ACC.CHARGE=ACC.CHARGE+ACC.REC<XX,ACC.SUB.POS>
                           END ELSE
                              ACC.CHARGE=ACC.CHARGE+NET.CHARGE
                              NET.CHARGE=0
                           END
                        END
                     NEXT XX
*DF                    BM.ARRAY<4,BM.POS>+=ICONV(EBILL<Y,37>,'MR2'); * Net per service description for packages
                     IF SERVICE.DESCRIPTION='GUARANTEED SERVICE REFUN' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                     END
                     IF SERVICE.DESCRIPTION='HOST MANIFEST VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='UPS ONL WORLDSHIP VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='VENDOR MANIFEST VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='CAMPUS SHIP VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='UPS INTERNET VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='MANIFEST EDI VOID' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        LOCATE TRACKING.NUMBER IN VOID.ARRAY<1> BY 'AR' SETTING TEMP.POS THEN
                           IF VOID.ARRAY<2,TEMP.POS>='SHIPPING CHRG CORRECTION' ELSE
                              IF INDEX(VOID.ARRAY<2,TEMP.POS>,'HUNDR',1) ELSE
                                 IF NET.CHARGE*-1 # VOID.ARRAY<3,TEMP.POS> THEN
                                    CALL ELINE('Voided tr# ':TRACKING.NUMBER:' does not match ':NET.CHARGE:' ':VOID.ARRAY<3,TEMP.POS>)
                                    GOTO THE.END
                                 END
                                 BM.POS=VOID.ARRAY<4,TEMP.POS>
                                 ATT.SETTING=VOID.ARRAY<5,TEMP.POS>
                                 ACC.SUB.POS=VOID.ARRAY<6,TEMP.POS>
                                 PACKAGE.TYPE=VOID.ARRAY<7,TEMP.POS>
                              END
                           END
                        END ELSE
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                     END
                     IF SERVICE.DESCRIPTION='CREDIT ADJUSTMENTS' THEN
                        ACC.CHARGE=0
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
                        IF EBILL<Y,59>[1,3]='ADD' OR EBILL<Y,59>[1,4]='RESI' OR EBILL<Y,59>[1,15]='BILLED FOR VOID' OR EBILL<Y,60>[1.3]='ADD' OR EBILL<Y,60>[1,4]='RESI' OR EBILL<Y,60>[1,15]='BILLED FOR VOID' ELSE
*DF                        IF EBILL<Y,59>[1,12]='LATE PAYMENT' OR EBILL<Y,59>[1,8]='LATE FEE' OR EBILL<Y,60>[1,12]='LATE PAYMENT' OR EBILL<Y,60>[1,8]='LATE FEE' THEN
                           NET.CHARGE=0
                        END
*DF*
*DF* If it is a late payment fee do not use for overcharge per Brian P Barker
*DF* DRF 06/23/05
*DF*
*
* Change to only get overcharge for bills that start with ADD RESI or
* VOID in column 59 or 69, Per Brian P Barker. DRF 02/23/06
*
                        IF NET.CHARGE < 0 THEN
                           BM.ARRAY<ATT.SETTING+17,BM.POS>=BM.ARRAY<ATT.SETTING+17,BM.POS>+NET.CHARGE
                        END
                        NET.CHARGE=ICONV(EBILL<Y,37>,'MR2')
*
* Put the net charges back to calculate the rest of the bill. DRF 06/23/05
*
                     END
                     IF SHIPPER.NUMBER='E79490' THEN
                        IF SERVICE.DESCRIPTION[1,11]='ADDR. CORR.' AND NET.CHARGE+0 > 0 THEN
*                          IF SERVICE.DESCRIPTION[1,18]'ADDR. CORR. GROUND' THEN           ; * JMK06
                           IF SERVICE.DESCRIPTION[1,18]='ADDR. CORR. GROUND' THEN          ; * JMK06
                              MAX.ADDR.CORR='500'
                           END ELSE
                              MAX.ADDR.CORR='1000'
                           END
                           ADDR.CORR.ID=EBILL<Y,32>:'*':EBILL<Y,35>
                           LOCATE ADDR.CORR.ID IN ADDR.CORR.ARRAY<1> BY 'AL' SETTING ADDR.CORR.POS THEN
                              ADDR.CORR.ARRAY<3,ADDR.CORR.POS>=ADDR.CORR.ARRAY<3,ADDR.CORR.POS>+NET.CHARGE
                              ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE
                              IF EBILL<Y,33>#'' THEN
                                 ADDR.CORR.ARRAY<6,ADDR.CORR.POS>=EBILL<Y,33>
                              END
                              IF EBILL<Y,34>#'' THEN
                                 ADDR.CORR.ARRAY<7,ADDR.CORR.POS>=EBILL<Y,34>
                              END
                              NET.CHARGE=0
                           END ELSE
                              INS ADDR.CORR.ID BEFORE ADDR.CORR.ARRAY<1,ADDR.CORR.POS>
                              INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<3,ADDR.CORR.POS>
                              IF NET.CHARGE > MAX.ADDR.CORR THEN
                                 ADDR.CORR.ARRAY<4>=ADDR.CORR.ARRAY<4>+NET.CHARGE-MAX.ADDR.CORR
                                 NET.CHARGE = MAX.ADDR.CORR
                              END
                              INS NET.CHARGE BEFORE ADDR.CORR.ARRAY<2,ADDR.CORR.POS>
                              INS EBILL<Y,32> BEFORE ADDR.CORR.ARRAY<5,ADDR.CORR.POS>
                              INS EBILL<Y,33> BEFORE ADDR.CORR.ARRAY<6,ADDR.CORR.POS>
                              INS EBILL<Y,34> BEFORE ADDR.CORR.ARRAY<7,ADDR.CORR.POS>
                              INS EBILL<Y,35> BEFORE ADDR.CORR.ARRAY<8,ADDR.CORR.POS>
                           END
                        END
                     END
                     BM.ARRAY<ATT.SETTING+4,BM.POS>+=NET.CHARGE        ; * Net per service description for packages
                     BM.ARRAY<ATT.SETTING+13,BM.POS>+=ACC.CHARGE       ; * Accessioral Charge
                     GROSS.CHARGE=NET.CHARGE+ICONV(EBILL<Y,38>,'MR2')
                     BM.ARRAY<ATT.SETTING+20>=BM.ARRAY<ATT.SETTING+20>+ICONV(EBILL<Y,37>,'MR2')
                     IF GROSS.CHARGE > MIN.CHARGE + (MIN.CHARGE*BM.ARRAY<2,BM.POS>/10000)'R0' OR BM.ARRAY<2,BM.POS>=10000 THEN
                        BM.ARRAY<ATT.SETTING+5,BM.POS>+=ICONV(EBILL<Y,38>,'MR2')           ; * Incentive per service description for packages
                        BM.ARRAY<ATT.SETTING+6,BM.POS>+=GROSS.CHARGE
*
* Calculate hundredweight using percent in old pck benchmark or amount
* in old ltr benchmark - net charges. Take the higher of the two for
* logitics and store it in BM.ARRAY<16,pos>.
*
*DF                          IF SERVICE.DESCRIPTION[1,13]='HUNDREDWEIGHT' OR SERVICE.DESCRIPTION='GROUND HUNDREDWT' OR SERVICE.DESCRIPTION='2ND DAY AIR HUNDREDWT' OR SERVICE.DESCRIPTION='3DAY SELECT HUNDREDWT' OR SERVICE.DESCRIPTION='NEXT DAY AIR HUNDREDWT' OR SERVICE.DESCRIPTION='NEXT DAY AIR SAVER HUNDR' THEN
                        IF SERVICE.DESCRIPTION[1,13]='HUNDREDWEIGHT' AND SERVICE.DESCRIPTION#'HUNDREDWEIGHT RES. ADJ.' THEN
                           HUN.LOG=ICONV(EBILL<Y,38>,'MR2')-((GROSS.CHARGE*BM.ARRAY<ATT.SETTING+2,BM.POS>/10000)'R0')
                           MIN.HUN.LOG=BM.ARRAY<ATT.SETTING+3,BM.POS>-NET.CHARGE
                           IF ((CLIENT.ID='00883' AND (SHIPPER.NUMBER='733E43' OR SHIPPER.NUMBER='751766' OR SHIPPER.NUMBER='0A4V07')) OR CLIENT.ID#'00883') THEN
*
* Only use the min hundred weight for shipper 733E43, 751766, and 0A4V07
* for Pollock and for all of our other clients. - 07/24/03 DRF
*
                              IF HUN.LOG > MIN.HUN.LOG THEN
                                 BM.ARRAY<ATT.SETTING+16,BM.POS>+=HUN.LOG
                              END ELSE
                                 BM.ARRAY<ATT.SETTING+16,BM.POS>+=MIN.HUN.LOG
                              END
                           END ELSE
                              BM.ARRAY<ATT.SETTING+16,BM.POS>+=HUN.LOG
                           END
                        END
                     END
                  END
               END ELSE
                  CRT @(0,20):'Service description read with no logistics benchmark on file - Aborting.':@(-4)
                  CRT @(0,21):'Run UPS.BM.SETUP and provide a benchmark % for client: ':CLIENT.ID:' and service':@(-4)
                  CRT @(0,22):'description: ':SERVICE.DESCRIPTION:'.':@(-4)
                  GOTO THE.END
               END
               LOCATE EBILL<Y,23> IN SHIP.DATE.LIST<1,X> BY 'AL' SETTING POS ELSE
                  INS EBILL<Y,23> BEFORE SHIP.DATE.LIST<1,X,POS>
               END
            END
         NEXT Y
*         WRITE BM.ARRAY ON F.UPS.BM,SHIPPER.NUMBER:FILE.DATE:'*TEMP'   ; * This is deleted before this program ends
      NEXT X

* Pass 4:
*   Build pro number and bills ID, calculate variances and display on screen for each shipper number
*   Build the BILL.REC item and write it to the work file
*   (Don't write any bill records anything until it is certain that all can be written)
*
PASS4:***
      PASS.NUMBER=4
      CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Building bill items, calculating variances, writing to temp files...':
      BILLS.WRITTEN=0
      FOR X=1 TO NUM.SHIPPERS
         SHIPPER.NUMBER=SHIPPER.LIST<1,X>
         FILE.DATE=SHIPPER.LIST<4,X>
         FILE.DATE=FILE.DATE[1,2]:'-':FILE.DATE[3,2]:'-':FILE.DATE[5,4]
         FILE.DATE=ICONV(FILE.DATE,'D')
         BILL.DATE=FILE.DATE             ; * Used for call to GET.EXPENSE and Bills file
         FILE.DATE=SHIPPER.LIST<4,X>
*DF         FILE.DATE=FILE.DATE[5,4]:FILE.DATE[1,2]:FILE.DATE[3,2]
         CLIENT.ID=SHIPPER.LIST<2,X>
         DIVISION.ID=SHIPPER.LIST<3,X>
         UPS.INVOICE.AMOUNT=SHIPPER.LIST<6,X>
         BEGIN CASE
            CASE CARRIER.ID='00041'
               PRO.NUMBER=SHIPPER.NUMBER[1,3]:'-':SHIPPER.NUMBER[4,3]
*DF               PRO.NUMBER:=FILE.DATE[5,2]:FILE.DATE[7,2]:FILE.DATE[3,2]
               PRO.NUMBER:=FILE.DATE[1,2]:FILE.DATE[3,2]:FILE.DATE[7,2]
            CASE 1
               PRO.NUMBER=SHIPPER.NUMBER
         END CASE
         BILLS.ID=CARRIER.ID:'*':PRO.NUMBER:'*0'   ; * Same ID used for Bills, Bills Hist, and CRX

         READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
            CRT @(0,20):'Client file could not be read - Aborting.':@(-4)
            GOTO THE.END
         END
         CLIENT.NAME=CLIENT.REC<2>
         USE.EXPENSE=CLIENT.REC<13>      ; * 'Y' for yes, anything else for 'N'

         OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
            CRT @(0,20):'FB.BILLS for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
            GOTO THE.END
         END
         OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILLS.HIST ELSE
            CRT @(0,20):'FB.BILLS.HIST for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
            GOTO THE.END
         END

         READ BILL.REC FROM F.BILLS,BILLS.ID THEN
            CALL ELINE('Pro Number ':PRO.NUMBER:' is already in FB.BILLS,':CLIENT.ID:' file - skipping.')
            GOTO SKIP.BILL               ; * Bill is already in file - Skip
         END
         READ BILL.REC FROM F.BILLS.HIST,BILLS.ID THEN
            CALL ELINE('Pro Number ':PRO.NUMBER:' is already in FB.BILLS.HIST,':CLIENT.ID:' file - skipping.')
            GOTO SKIP.BILL               ; * Bill is already in file - Skip
         END

         BILLS.WRITTEN+=1                ; * Add up the number of bills written (not skipped)

         ENTRY.DATE=CLIENT.REC<82>+1     ; * Last processed + 1 day
         IF ENTRY.DATE<DATE() THEN
            ENTRY.DATE=DATE()
         END

         GOSUB CALCULATE.CHARGES

         FOR ZZZ = 1 TO 3
            IF ZZZ = 1 THEN
               NEW.PRO.NUMBER=PRO.NUMBER:'-O'
            END
            IF ZZZ = 2 THEN
               NEW.PRO.NUMBER=PRO.NUMBER:'-I'
            END
            IF ZZZ = 3 THEN
               NEW.PRO.NUMBER=PRO.NUMBER:'-T'
            END
            BILLS.ID=CARRIER.ID:'*':NEW.PRO.NUMBER:'*0'
1348:
            ATT.SETTING=(ZZZ-1)*20
            GOSUB CALCULATE.TOTALS
            CRT @(3,10):'Shipper Number  : ':SHIPPER.NUMBER:@(-4)
            CRT @(3,11):'Client Number   : ':CLIENT.ID:@(-4)
            CRT @(3,12):'Client Name     : ':CLIENT.NAME:@(-4)
            CRT @(3,13):'Division Number : ':DIVISION.ID:@(-4)
            CRT @(3,14):'Pro Number      : ':NEW.PRO.NUMBER:@(-4)
            CRT @(3,15):'Total Invoice Amount      : $ ':TOTAL.INVOICE.AMOUNT'R26#9':@(-4)
            CRT @(3,16):'Total Logistics Variance  : $ ':TOTAL.LOGISTICS.VARIANCE'R26#9':@(-4)
            CRT @(3,17):'Total Overcharge Variance : $ ':TOTAL.OVERCHARGE.VARIANCE'R26#9':@(-4)
            CRT @(3,18):'Total Discount Variance   : $ ':TOTAL.DISCOUNT.VARIANCE'R26#9':@(-4)
*DF           CALL ELINE('')
            IF USER.NAME='DAVID' THEN CALL ELINE('')
            IF TOTAL.INVOICE.AMOUNT < 0 THEN
               READ BLOCK.IT FROM F.TABLES,'NO-PROCESS*':CLIENT.ID ELSE BLOCK.IT=''
               BLOCK.IT<1>='Negative UPS Bill. See David ':BLOCK.IT<1>
*DF              WRITE BLOCK.IT ON F.TABLES,'NO-PROCESS*':CLIENT.ID
               EMAIL.OUT=''
*DF               EMAIL.OUT<1>='JDarwin@afs.net':@VM:'NRath@afs.net':@VM:'BPBarker@afs.net':@VM:'DFriend@afs.net'
               EMAIL.OUT<1>='JDarwin@afs.net':@VM:'parcel@afs.net':@VM:'DFriend@afs.net'    ; * GRB01
*DF               EMAIL.OUT<2>='MKrishnan@afs.net':@VM:'MDodson@afs.net':@VM:'MButts@afs.net':@VM:'OHolman@afs.net':@VM:'MMcKay@afs.net':@VM:'MKerbow@AFSLogistics.COM'
               EMAIL.OUT<3>=''           ; * BCC: Email addresses
               EMAIL.OUT<4>='Reports@afs.net'       ; * From Email address
               EMAIL.OUT<5>='Negative Invoice Amount for pro ':PRO.NUMBER:' for Client ':CLIENT.ID

               * Email body
               EMAIL.OUT<6,-1>='Negative Invoice Amount of ':TOTAL.INVOICE.AMOUNT'R26#9':' For Pro Number ':PRO.NUMBER
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>='Client: ':CLIENT.ID:' ':CLIENT.NAME
               EMAIL.OUT<6,-1>='Carrier: ':CARRIER.ID:' ':CARRIER.NAME
               VIN=EMAIL.OUT
               VOUT=''
*               CALL SENDMAIL(VIN,VOUT)
               IF VOUT<1>='ERROR' THEN
                  CALL ELINE('Email failure occurred for the negative amount for pro ':PRO.NUMBER)
               END ELSE
*                CALL ELINE('Negative amount email to ':EMAIL.OUT<1>:'.') ; * JMK02
               END
            END
*DF           IF TOTAL.INVOICE.AMOUNT+ADDR.CORR.ARRAY<4> # UPS.INVOICE.AMOUNT THEN
            IF BM.ARRAY<20>+BM.ARRAY<40>+BM.ARRAY<60>+ADDR.CORR.ARRAY<4> # UPS.INVOICE.AMOUNT THEN
               EMAIL.OUT=''
               EMAIL.OUT<1>='DFriend@afs.net'       ; * To: Email addresses
               EMAIL.OUT<2>='MKrishnan@afs.net':@VM:'MDodson@afs.net'
               EMAIL.OUT<3>=''           ; * BCC: Email addresses
               EMAIL.OUT<4>='Reports@afs.net'       ; * From Email address
               EMAIL.OUT<5>='Amounts do not match for pro ':PRO.NUMBER:' for Client ':CLIENT.ID

               * Email body
               EMAIL.OUT<6,-1>='Amount on ups bill of ':UPS.INVOICE.AMOUNT'R26#9':' Does not match the sum we calculated of ':(TOTAL.INVOICE.AMOUNT+ADDR.CORR.ARRAY<4>)'R26#9'
               VIN=EMAIL.OUT
               VOUT=''
*               CALL SENDMAIL(VIN,VOUT)
               IF VOUT<1>='ERROR' THEN
                  CALL ELINE('Email failure occurred for the amount mismatch for pro ':PRO.NUMBER)
               END ELSE
*                CALL ELINE('Amount mismatch email to ':EMAIL.OUT<1>:'.') ; * JMK02
               END
            END
            IF TOTAL.LOGISTICS.VARIANCE+0 # 0 AND (CLIENT.ID='00354' OR CLIENT.ID='00392' OR CLIENT.ID='00761' OR CLIENT.ID='00919' OR CLIENT.ID='00933' OR CLIENT.ID='00981' OR CLIENT.ID='01015' OR CLIENT.ID='01029' OR CLIENT.ID='01034' OR CLIENT.ID='01045' OR CLIENT.ID='01057' OR CLIENT.ID='01075' OR CLIENT.ID='01085' OR CLIENT.ID='01109' OR CLIENT.ID='01132' OR CLIENT.ID='01139' OR CLIENT.ID='01163' OR CLIENT.ID='01196' OR CLIENT.ID='01222' OR CLIENT.ID='01271' OR CLIENT.ID='01289' OR CLIENT.ID='01292' OR CLIENT.ID='01310' OR CLIENT.ID='01315' OR CLIENT.ID='01329' OR CLIENT.ID='01330' OR CLIENT.ID='01338' OR CLIENT.ID='01357' OR CLIENT.ID='10225' OR CLIENT.ID='10272' OR CLIENT.ID='10356' OR CLIENT.ID='00857' OR CLIENT.ID='01273' OR CLIENT.ID='01326' OR CLIENT.ID='00863' OR CLIENT.ID='01393' OR CLIENT.ID='00978' OR CLIENT.ID='01361' OR CLIENT.ID='01148' OR CLIENT.ID='01410' OR CLIENT.ID='01066' OR CLIENT.ID='00936' OR CLIENT.ID='01179' OR CLIENT.ID='01013' OR CLIENT.ID='01274' OR CLIENT.ID='01027' OR CLIENT.ID='01371' OR CLIENT.ID='01071' OR CLIENT.ID='01381' OR CLIENT.ID='01380' OR CLIENT.ID='01448' OR CLIENT.ID='01446' OR CLIENT.ID='01398' OR CLIENT.ID='01419' OR CLIENT.ID='01471' OR CLIENT.ID='01445' OR CLIENT.ID='01476' OR CLIENT.ID='01475' OR CLIENT.ID='01489' OR CLIENT.ID='01490' OR CLIENT.ID='01478' OR CLIENT.ID='01058' OR CLIENT.ID='01506' OR CLIENT.ID='01518' OR CLIENT.ID='01192' OR CLIENT.ID='01420' OR CLIENT.ID='01466' OR CLIENT.ID='01084' OR CLIENT.ID='01461' OR CLIENT.ID='01211' OR CLIENT.ID='01113' OR CLIENT.ID='01482' OR CLIENT.ID='01151' OR CLIENT.ID='01328' OR CLIENT.ID='01266' OR CLIENT.ID='01515' OR CLIENT.ID='01499' OR CLIENT.ID='01521' OR CLIENT.ID='01508' OR SHIPPER.NUMBER='530333' OR SHIPPER.NUMBER='5E0791' OR SHIPPER.NUMBER='624443' OR SHIPPER.NUMBER='A2V569' OR SHIPPER.NUMBER='X543W3') THEN
*
* Removed 01157 Clore Automotive. We are starting to take logistics
* commission on 10/15/05. DRF 10/17/05
*
               EMAIL.OUT=''
               EMAIL.OUT<1>='DFriend@afs.net'       ; * To: Email addresses
*              EMAIL.OUT<2>='MKrishnan@afs.net':@VM:'MDodson@afs.net':@VM:'MButts@afs.net':@VM:'OHolman@afs.net':@VM:'MMcKay@afs.net':@VM:'MKerbow@AFSLogistics.COM' ; * RLM01
               EMAIL.OUT<2>='MKrishnan@afs.net':@VM:'MDodson@afs.net':@VM:'BFranklin@afs.net':@VM:'MMcKay@afs.net':@VM:'MKerbow@AFSLogistics.COM'  ; * RLM01
               EMAIL.OUT<3>=''           ; * BCC: Email addresses
               EMAIL.OUT<4>='Reports@afs.net'       ; * From Email address
               EMAIL.OUT<5>='Logistics Amount for pro ':PRO.NUMBER:' for Client ':CLIENT.ID

               * Email body
               EMAIL.OUT<6,-1>='A UPS (00041) bill was placed into freight payment with a'
               EMAIL.OUT<6,-1>='Logistics Amount of ':TOTAL.LOGISTICS.VARIANCE'R26#9':' For Pro Number ':PRO.NUMBER
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>='Client: ':CLIENT.ID:' ':CLIENT.NAME
               EMAIL.OUT<6,-1>='Carrier: ':CARRIER.ID:' ':CARRIER.NAME
               EMAIL.OUT<6,-1>=' '
               EMAIL.OUT<6,-1>='This client/shipper number is set to not have logistics.'
               VIN=EMAIL.OUT
               VOUT=''
*               CALL SENDMAIL(VIN,VOUT)
               IF VOUT<1>='ERROR' THEN
                  CALL ELINE('Email failure occurred for the logistics amount for pro ':PRO.NUMBER)
               END ELSE
*                CALL ELINE('Logistics amount email to ':EMAIL.OUT<1>:'.') ; * JMK02
               END
            END
            IF TOTAL.INVOICE.AMOUNT#0 OR TOTAL.LOGISTICS.VARIANCE#0 OR TOTAL.OVERCHARGE.VARIANCE#0 OR TOTAL.DISCOUNT.VARIANCE#0 THEN
               IF CLIENT.ID='01410' THEN
                  TOTAL.INVOICE.AMOUNT=0
               END
*DF             IF CLIENT.ID='01148' THEN
*DF               TOTAL.INVOICE.AMOUNT=0
*DF             END
*
* Removed per conversion with Sly and Owen on 10/08/05. DRF
*
               IF CLIENT.ID='01090' THEN
                  TOTAL.INVOICE.AMOUNT=0
               END
               IF UPS.INVOICE.AMOUNT < 0 THEN
                  TOTAL.INVOICE.AMOUNT=0
               END
               GOSUB SETUP.BILL.REC
* Write bills record to a work file for each client
               WRITE BILL.REC ON F.WORK,CLIENT.ID:'*':BILLS.ID         ; * append client ID to the regular Bills item ID for the purpose of the work file
            END

            IF SHIPPER.NUMBER='E79490' AND ADDR.CORR.ARRAY<4>+0#0 THEN
               GOSUB EMAIL.ADDR.CORR.INFO
            END
         NEXT ZZZ

SKIP.BILL:***
      NEXT X

      CALL ELINE('Number of bills to be written to FB.BILLS and FB.BILLS.HIST files = ':BILLS.WRITTEN)
      IF USER.NAME='DAVID' THEN CALL ELINE('PRESS BREAK')

      IF BILLS.WRITTEN=0 THEN
         CRT @(0,20):'All e-Bills already exist - No bills were written.'
         CRT @(0,21):'This file has been imported before - Moving it to archive folder.'
*         GOSUB DELETE.AND.ARCHIVE.EXISTING.EBILL.FILE
         GOTO THE.END
      END ELSE
         CRT @(0,8):@(-3):@(0,8):'Writing ':BILLS.WRITTEN:' items to bill files...':

         * Read bills from temp file and rewrite to FB.BILLS, FB.BILLS.HIST, and FB.BILLS.CRX
         EXECUTE 'SSELECT ':WORK.FILE CAPTURING OUTPUT
         NUM.FILES=@SELECTED
*        IF NUM.FILES=0 THEN   ; * JCW01
         IF NUM.FILES < 1 THEN           ; * JCW01
            CRT @(0,20):'No bills exist in work file to write to bills files - Aborting.':@(-4)
            GOTO THE.END
         END
         DONE=0
         LOOP
            READNEXT CLIENT.BILL.ID ELSE DONE=1
         UNTIL DONE=1
            READ BILL.REC FROM F.WORK,CLIENT.BILL.ID ELSE NULL
            CLIENT.ID=FIELD(CLIENT.BILL.ID,'*',1)  ; * Client number
            BILLS.ID=CLIENT.BILL.ID[7,LEN(CLIENT.BILL.ID)-6]
            OPEN '','FB.BILLS,':CLIENT.ID TO F.BILLS ELSE
               CRT @(0,20):'FB.BILLS for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
               GOTO THE.END
            END
            OPEN '','FB.BILLS.HIST,':CLIENT.ID TO F.BILLS.HIST ELSE
               CRT @(0,20):'FB.BILLS.HIST for client ':CLIENT.ID:' could not be opened - Aborting.':@(-4)
               GOTO THE.END
            END
*            READ BILL.REC FROM F.BILLS,BILLS.ID ELSE
*               CALL ELINE('Pro Number ':PRO.NUMBER:' is not in FB.BILLS,':CLIENT.ID:' file - skipping.')
*               GOTO SKIP.WRITE           ; * Bill is already in file - Skip
*            END
            READ BILL.REC FROM F.BILLS.HIST,BILLS.ID ELSE
               CALL ELINE('Pro Number ':PRO.NUMBER:' is NOT in FB.BILLS.HIST,':CLIENT.ID:' file - skipping.')
               GOTO SKIP.WRITE           ; * Bill is not in file - Skip
            END
*            WRITE BILL.REC ON F.BILLS,BILLS.ID
*            WRITE BILL.REC ON F.BILLS.HIST,BILLS.ID
*            GOSUB SETUP.CRX.BILL.REC
*            WRITE CRX.BILL.REC ON F.BILLS.CRX,BILLS.ID
SKIP.WRITE:***
         REPEAT
      END

      GOTO PASS6                         ; * We are outsourcing the GSR audit according to Chad Hebert 09-30-02 - don't build GSR audit file

* Pass 5:
*   Build and write GSR audit file to UPS.IN (BILLDATA\UPS) file
*
PASS5:***
      PASS.NUMBER=5
      CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Building and writing GSR audit files...':
      FOR X=1 TO NUM.SHIPPERS
         SHIPPER.NUMBER=SHIPPER.LIST<1,X>
         CLIENT.ID=SHIPPER.LIST<2,X>
         DIVISION.ID=SHIPPER.LIST<3,X>
         CLIENT.DIVISION=CLIENT.ID
         IF DIVISION.ID#'' THEN CLIENT.DIVISION:='_':DIVISION.ID
         NUM.DATES=DCOUNT(SHIP.DATE.LIST<1,X>,@SVM)
         FOR Y=1 TO NUM.DATES
            SHIP.DATE=SHIP.DATE.LIST<1,X,Y>        ; * Date format: MMDDYYYY
            GSR.AUDIT.FILENAME='UPS':CLIENT.DIVISION:'-':SHIP.DATE[7,2]:SHIP.DATE[1,2]:SHIP.DATE[3,2]:'.XLS'
            GSR.AUDIT=''
            FOR Z=1 TO NUM.PACKAGES
               IF (EBILL<Z,3>=SHIPPER.NUMBER) AND (EBILL<Z,23>=SHIP.DATE) THEN
                  IF GSR.AUDIT='' THEN
                     GOSUB BUILD.GSR.AUDIT.HEADING           ; * Result returned in LINE
                     GSR.AUDIT<-1>=LINE
                  END
                  GOSUB BUILD.GSR.AUDIT.DETAIL     ; * Result returned in LINE
                  GSR.AUDIT<-1>=LINE
               END
            NEXT Z
            IF GSR.AUDIT#'' THEN
               READ EXISTING.GSR.AUDIT FROM F.UPS.IN,GSR.AUDIT.FILENAME THEN
                  NUM.GSR=DCOUNT(GSR.AUDIT,@AM)
                  FOR Z=2 TO NUM.GSR
                     EXISTING.GSR.AUDIT<-1>=GSR.AUDIT<Z>
                  NEXT Z
                  EXISTING.GSR.AUDIT=CHANGE(EXISTING.GSR.AUDIT,@VM,TAB)
*                  WRITE EXISTING.GSR.AUDIT ON F.UPS.IN,GSR.AUDIT.FILENAME
               END ELSE
                  GSR.AUDIT=CHANGE(GSR.AUDIT,@VM,TAB)
*                  WRITE GSR.AUDIT ON F.UPS.IN,GSR.AUDIT.FILENAME
               END
            END
         NEXT Y
      NEXT X

* Pass 6:
*   Extract packages for each client to create separate client_division specific
*   e-Bill files to include with the client's process emails and write to UPSDATA
*   Build GSR spreadsheet for all GSR refunds and email to Wendy Cartolano who processes
*   UPS service refunds
*
PASS6:***
      PASS.NUMBER=6
      CRT @(0,8):@(-3):@(0,8):'Pass ':PASS.NUMBER:': Building and writing client/division specific e-Bill files...':
      GSR.SPREADSHEET=''
      OLD.SHIPPER.NUMBER='**********'
      FOR X=1 TO NUM.SHIPPERS
         SHIPPER.NUMBER=SHIPPER.LIST<1,X>
         FILE.DATE=SHIPPER.LIST<4,X>
         FILE.DATE=FILE.DATE[5,4]:FILE.DATE[1,2]:FILE.DATE[3,2]
         CLIENT.ID=SHIPPER.LIST<2,X>
         DIVISION.ID=SHIPPER.LIST<3,X>
         IF OLD.SHIPPER.NUMBER # SHIPPER.NUMBER THEN
            READ DCLIENT FROM F.CLIENTS,CLIENT.ID ELSE DCLIENT=''
            COMPANY.NAME=DCLIENT<2>
            IF DIVISION.ID='' THEN
               COMPANY.ADDR=DCLIENT<3,1>
               COMPANY.CITY=DCLIENT<4>
               COMPANY.ST=DCLIENT<5>
               COMPANY.ZIP=DCLIENT<6>
            END ELSE
               OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV THEN
                  READ DIV.REC FROM F.DIV,DIVISION.ID ELSE
                     DIV.REC=''
                  END
               END ELSE
                  DIV.REC=''
               END
               COMPANY.ADDR=DIV.REC<14>
               COMPANY.CITY=DIV.REC<16>
               COMPANY.ST=DIV.REC<17>
               COMPANY.ZIP=DIV.REC<1>
            END
            OLD.SHIPPER.NUMBER=SHIPPER.NUMBER
         END
         CLIENT.DIVISION.HOLD.REC=''
         EXISTING.CLIENT.DIVISION.HOLD.REC=''
         EXISTING.CLIENT.HOLD.REC=''
         CLIENT.DIVISION.ITEM.ID=CLIENT.ID
         IF DIVISION.ID#'' THEN CLIENT.DIVISION.ITEM.ID:='_':DIVISION.ID
         CLIENT.DIVISION.ITEM.ID:='*':FILE.DATE
         FOR Y=1 TO NUM.PACKAGES
            IF EBILL<Y,3>=SHIPPER.NUMBER THEN
               IF EBILL<Y,20>='GSR' OR EBILL<Y,20>='VOD' THEN
                  IF GSR.SPREADSHEET='' THEN
                     GOSUB BUILD.GSR.SPREADSHEET.HEADING     ; * Result returned in LINE
                     GSR.SPREADSHEET<-1>=LINE
                  END
                  GOSUB BUILD.GSR.SPREADSHEET.DETAIL         ; * Result returned in LINE
                  GSR.SPREADSHEET<-1>=LINE
               END
               TEMP.LINE=EBILL<Y>
               IF TEMP.LINE#'' THEN
                  TEMP.LINE<1,3>="'":EBILL<Y,3>
                  TEMP.LINE<1,4>="'":EBILL<Y,4>
                  NUM.OF.COL=DCOUNT(TEMP.LINE<1>,@VM)
                  FOR YY = 1 TO NUM.OF.COL
                     IF TEMP.LINE<1,YY>[1,1]='-' OR TEMP.LINE<1,YY>[1,1]='+' OR TEMP.LINE<1,YY>[1,1]='=' OR TEMP.LINE<1,YY>[1,1]='*' OR TEMP.LINE<1,YY>[1,1]='/' AND NOT(NUM(TEMP.LINE<1,YY>)) THEN
                        TEMP.LINE<1,YY>="'":TEMP.LINE<1,YY>
                     END
                  NEXT YY
                  IF TEMP.LINE<1,21>='GROUND HUNDREDWT' OR TEMP.LINE<1,21>='2ND DAY AIR HUNDREDWT' OR TEMP.LINE<1,21>='3DAY SELECT HUNDREDWT' OR TEMP.LINE<1,21>='NEXT DAY AIR HUNDREDWT' OR TEMP.LINE<1,21>='NEXT DAY AIR SAVER HUNDR' THEN
                     HUNDWEIGHT=1
                  END ELSE
                     HUNDWEIGHT=0
                  END
                  IF TEMP.LINE<1,22>='1' THEN
                     IF NOT(HUNDWEIGHT) THEN
                        IF TEMP.LINE<1,25>='' AND TEMP.LINE<1,26>='' AND TEMP.LINE<1,27>='' AND TEMP.LINE<1,28>='' AND TEMP.LINE<1,29>='' THEN
                           TEMP.LINE<1,25>=COMPANY.NAME
                           TEMP.LINE<1,26>=COMPANY.ADDR
                           TEMP.LINE<1,27>=COMPANY.CITY
                           TEMP.LINE<1,28>=COMPANY.ST
                           TEMP.LINE<1,29>=COMPANY.ZIP
                        END
                     END
                  END
*DF                 TEMP.LINE=CHANGE(TEMP.LINE,@VM:"-",@VM:"'-")
*DF                 TEMP.LINE=CHANGE(TEMP.LINE,@VM:"+",@VM:"'+")
*DF                 TEMP.LINE=CHANGE(TEMP.LINE,@VM:"=",@VM:"'=")
*DF                 TEMP.LINE=CHANGE(TEMP.LINE,@VM:"*",@VM:"'*")
*DF                 TEMP.LINE=CHANGE(TEMP.LINE,@VM:"/",@VM:"'/")
               END
*DF               CLIENT.DIVISION.HOLD.REC<-1>=EBILL<Y>
               CLIENT.DIVISION.HOLD.REC<-1>=TEMP.LINE
            END
         NEXT Y
         IF CLIENT.DIVISION.HOLD.REC#'' THEN
*DF            READ EXISTING.CLIENT.DIVISION.HOLD.REC FROM F.UPSDATA,CLIENT.DIVISION.ITEM.ID THEN
            UPSDATA.DIV.DUP=1            ; * JMK05
            READ EXISTING.CLIENT.DIVISION.HOLD.REC FROM F.UPSDATA,CLIENT.DIVISION.ITEM.ID ELSE
               EXISTING.CLIENT.DIVISION.HOLD.REC=EBILL.HDR
               UPSDATA.DIV.DUP=0         ; * JMK05
            END
            IF UPSDATA.DIV.DUP THEN      ; * JMK05
               LOCATE CLIENT.DIVISION.HOLD.REC<1> IN EXISTING.CLIENT.DIVISION.HOLD.REC SETTING DPOS ELSE       ; * JMK05
                  UPSDATA.DIV.DUP=0      ; * JMK05
               END                       ; * JMK05
            END                          ; * JMK05
            IF UPSDATA.DIV.DUP=0 THEN    ; * JMK05
               NUM.HOLD=DCOUNT(CLIENT.DIVISION.HOLD.REC,@AM)
               FOR Y=1 TO NUM.HOLD
                  EXISTING.CLIENT.DIVISION.HOLD.REC<-1>=CLIENT.DIVISION.HOLD.REC<Y>
               NEXT Y
               WRITE EXISTING.CLIENT.DIVISION.HOLD.REC ON F.UPSDATA,CLIENT.DIVISION.ITEM.ID
            END                          ; * JMK05
*DF            END ELSE
*DF               WRITE CLIENT.DIVISION.HOLD.REC ON F.UPSDATA,CLIENT.DIVISION.ITEM.ID
*DF            END
            IF DIVISION.ID#'' THEN
               CLIENT.ITEM.ID=CLIENT.ID:'*':FILE.DATE
*DF              READ EXISTING.CLIENT.HOLD.REC FROM F.UPSDATA,CLIENT.ITEM.ID THEN
               UPSDATA.DUP=1             ; * JMK05
               READ EXISTING.CLIENT.HOLD.REC FROM F.UPSDATA,CLIENT.ITEM.ID ELSE
                  EXISTING.CLIENT.HOLD.REC=EBILL.HDR
                  UPSDATA.DUP=0          ; * JMK05
               END
               IF UPSDATA.DUP THEN       ; * JMK05
                  LOCATE CLIENT.DIVISION.HOLD.REC<1> IN EXISTING.CLIENT.HOLD.REC SETTING DPOS ELSE             ; * JMK05
                     UPSDATA.DUP=0       ; * JMK05
                  END                    ; * JMK05
               END                       ; * JMK05
               IF UPSDATA.DUP=0 THEN     ; * JMK05
                  NUM.HOLD=DCOUNT(CLIENT.DIVISION.HOLD.REC,@AM)
                  FOR Y=1 TO NUM.HOLD
                     EXISTING.CLIENT.HOLD.REC<-1>=CLIENT.DIVISION.HOLD.REC<Y>
                  NEXT Y
                  WRITE EXISTING.CLIENT.HOLD.REC ON F.UPSDATA,CLIENT.ITEM.ID
               END                       ; * JMK05
*DF              END ELSE
*DF                 WRITE CLIENT.DIVISION.HOLD.REC ON F.UPSDATA,CLIENT.ITEM.ID
*DF              END
            END
         END
      NEXT X

      IF GSR.SPREADSHEET#'' THEN
*         GOSUB EMAIL.GSR.SPREADSHEET     ; * Write file to EMAILDATA, then email it
      END

      CRT @(0,20):'e-Bill file successfully imported and processed.'

*      GOSUB DELETE.AND.ARCHIVE.EXISTING.EBILL.FILE
      GOTO THE.END

********************************************************************************

DISPLAY.SCREEN:***
      CALL AFS.SCR.HEAD(CO.ID,FILE.ID,'',PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('=',79)
      CRT @(0,4):'Carrier  : '
      CRT @(0,6):'Filename : '
      RETURN

********************************************************************************

DISPLAY.DATA:***
      CRT @(11,4):CARRIER.ID'R%5':' ':CARRIER.NAME:' (':CARRIER.CITY:', ':CARRIER.STATE:')'
      IF EBILL.FILENAME#'' THEN
         CRT @(11,6):EBILL.FOLDER:'\':EBILL.FILENAME
      END
      RETURN

********************************************************************************

FILENAME.SAVE.INSTRUCTIONS:***
      CRT @(0,12):'There are no e-Bill files in folder ':EBILL.FOLDER:' to select from.'
      CRT @(0,14):'Save e-Bill files in ':EBILL.FOLDER:' with filename format: cccccccccc_mm_dd_yyyy.csv'
      CRT @(0,16):'  cccccccccc = 10 digit plan number'
      CRT @(0,17):'          mm =  2 digit month'
      CRT @(0,18):'          dd =  2 digit day'
      CRT @(0,19):'        yyyy =  4 digit year'
      RETURN

********************************************************************************

ZERO.OUT.OTHER.ATTRIBUTES.IN.BM.ARRAY:***
      NUM.ATT=DCOUNT(BM.ARRAY<1>,@VM)
      FOR I=1 TO NUM.ATT
         BM.ARRAY<4,I>=0                 ; * Net Packages
         BM.ARRAY<5,I>=0                 ; * Incentive Packages
         BM.ARRAY<6,I>=0                 ; * Gross Packages
         BM.ARRAY<7,I>=0                 ; * Old Total Incentive Packages
         BM.ARRAY<8,I>=0                 ; * Net Letters
         BM.ARRAY<9,I>=0                 ; * Incentive Letters
         BM.ARRAY<10,I>=0                ; * Gross Letters
         BM.ARRAY<11,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<12,I>=0                ; * New Logistics Variance
         BM.ARRAY<13,I>=0                ; * Package Accessorial
         BM.ARRAY<14,I>=0                ; * LTL Accessorial
         BM.ARRAY<16,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<17,I>=0                ; * Overcharge amounts
         BM.ARRAY<24,I>=0                ; * Net Packages
         BM.ARRAY<25,I>=0                ; * Incentive Packages
         BM.ARRAY<26,I>=0                ; * Gross Packages
         BM.ARRAY<27,I>=0                ; * Old Total Incentive Packages
         BM.ARRAY<28,I>=0                ; * Net Letters
         BM.ARRAY<29,I>=0                ; * Incentive Letters
         BM.ARRAY<30,I>=0                ; * Gross Letters
         BM.ARRAY<31,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<32,I>=0                ; * New Logistics Variance
         BM.ARRAY<33,I>=0                ; * Package Accessorial
         BM.ARRAY<34,I>=0                ; * LTL Accessorial
         BM.ARRAY<36,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<37,I>=0                ; * Overcharge amounts
         BM.ARRAY<44,I>=0                ; * Net Packages
         BM.ARRAY<45,I>=0                ; * Incentive Packages
         BM.ARRAY<46,I>=0                ; * Gross Packages
         BM.ARRAY<47,I>=0                ; * Old Total Incentive Packages
         BM.ARRAY<48,I>=0                ; * Net Letters
         BM.ARRAY<49,I>=0                ; * Incentive Letters
         BM.ARRAY<50,I>=0                ; * Gross Letters
         BM.ARRAY<51,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<52,I>=0                ; * New Logistics Variance
         BM.ARRAY<53,I>=0                ; * Package Accessorial
         BM.ARRAY<54,I>=0                ; * LTL Accessorial
         BM.ARRAY<56,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<57,I>=0                ; * Overcharge amounts
         BM.ARRAY<64,I>=0                ; * Net Packages
         BM.ARRAY<65,I>=0                ; * Incentive Packages
         BM.ARRAY<66,I>=0                ; * Gross Packages
         BM.ARRAY<67,I>=0                ; * Old Total Incentive Packages
         BM.ARRAY<68,I>=0                ; * Net Letters
         BM.ARRAY<69,I>=0                ; * Incentive Letters
         BM.ARRAY<70,I>=0                ; * Gross Letters
         BM.ARRAY<71,I>=0                ; * Old Total Incentive Letters
         BM.ARRAY<72,I>=0                ; * New Logistics Variance
         BM.ARRAY<73,I>=0                ; * Package Accessorial
         BM.ARRAY<74,I>=0                ; * LTL Accessorial
         BM.ARRAY<76,I>=0                ; * Hundredweight Incentive or Minimum Charge which ever is higher
         BM.ARRAY<77,I>=0                ; * Overcharge amounts
      NEXT I
      BM.ARRAY<15>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<18>=0
      BM.ARRAY<19>=0                     ; * Number of tracking items
      BM.ARRAY<20>=0                     ; * Total net of all packages
      BM.ARRAY<35>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<38>=0
      BM.ARRAY<39>=0                     ; * Number of tracking items
      BM.ARRAY<40>=0                     ; * Total net of all packages
      BM.ARRAY<55>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<58>=0
      BM.ARRAY<59>=0                     ; * Number of tracking items
      BM.ARRAY<60>=0                     ; * Total net of all packages
      BM.ARRAY<75>=0                     ; * Break down on inbound and outbound for most client for certain shipper number for Alcon it breakdown air from ground
      BM.ARRAY<78>=0
      BM.ARRAY<79>=0                     ; * Number of tracking items
      BM.ARRAY<80>=0                     ; * Total net of all packages
      RETURN

********************************************************************************

CALCULATE.CHARGES:***
      BM.ARRAY=''
      BOTH.FILE=1
      READ BM.ARRAY FROM F.UPS.BM,SHIPPER.NUMBER:FILE.DATE:'*TEMP' ELSE NULL
      IF BM.ARRAY<21>#BM.ARRAY<1> THEN
         CRT @(0,20):'Services do not match for the inbound and outbound code':@(-4)
         GOTO THE.END
      END
      NUM.SD=DCOUNT(BM.ARRAY<1>,@VM)
*DF      FOR Y=1 TO NUM.SD
*DF         * Gross charge = net + incentive
*DF         BM.ARRAY<6,Y>=BM.ARRAY<4,Y>+BM.ARRAY<5,Y>
*DF         BM.ARRAY<10,Y>=BM.ARRAY<8,Y>+BM.ARRAY<9,Y>
*DF      NEXT Y
      FOR Y=1 TO NUM.SD
         * Old total incentive = gross * old BM %
         BM.ARRAY<7,Y>=(BM.ARRAY<6,Y>*BM.ARRAY<2,Y>/10000)'R0'
         BM.ARRAY<11,Y>=(BM.ARRAY<10,Y>*BM.ARRAY<3,Y>/10000)'R0'
         BM.ARRAY<27,Y>=(BM.ARRAY<26,Y>*BM.ARRAY<22,Y>/10000)'R0'
         BM.ARRAY<31,Y>=(BM.ARRAY<30,Y>*BM.ARRAY<23,Y>/10000)'R0'
         BM.ARRAY<47,Y>=(BM.ARRAY<46,Y>*BM.ARRAY<42,Y>/10000)'R0'
         BM.ARRAY<51,Y>=(BM.ARRAY<50,Y>*BM.ARRAY<43,Y>/10000)'R0'
         BM.ARRAY<67,Y>=(BM.ARRAY<66,Y>*BM.ARRAY<62,Y>/10000)'R0'
         BM.ARRAY<71,Y>=(BM.ARRAY<70,Y>*BM.ARRAY<63,Y>/10000)'R0'
         IF SHIPPER.NUMBER='245E36' OR SHIPPER.NUMBER='620E47' OR SHIPPER.NUMBER='6AT521' OR SHIPPER.NUMBER='736552' OR SHIPPER.NUMBER='75910E' OR SHIPPER.NUMBER='766673' OR SHIPPER.NUMBER ='A066X5' OR SHIPPER.NUMBER='X00731' OR SHIPPER.NUMBER='A77T49' THEN
*
* Pollock paper on the account number we are taking all of the incentive
* per contract see Chad Hebert 1/31/03 DRF
*
            BM.ARRAY<7,Y>=0
            BM.ARRAY<11,Y>=0
            BM.ARRAY<27,Y>=0
            BM.ARRAY<31,Y>=0
            BM.ARRAY<47,Y>=0
            BM.ARRAY<51,Y>=0
            BM.ARRAY<67,Y>=0
            BM.ARRAY<71,Y>=0
         END
         IF SHIPPER.NUMBER='268YY2' OR SHIPPER.NUMBER='7X7705' OR SHIPPER.NUMBER='75W348' OR SHIPPER.NUMBER='76WA87' OR SHIPPER.NUMBER='E7E699' OR SHIPPER.NUMBER='79A55V' OR SHIPPER.NUMBER='79AV98' THEN
*
* T D Williamson on the account number we are taking all of the
* incentive per contract see Chad Hebert 4/03/03 DRF
*
            BM.ARRAY<7,Y>=0
            BM.ARRAY<11,Y>=0
            BM.ARRAY<27,Y>=0
            BM.ARRAY<31,Y>=0
            BM.ARRAY<47,Y>=0
            BM.ARRAY<51,Y>=0
            BM.ARRAY<67,Y>=0
            BM.ARRAY<71,Y>=0
         END
*DF         IF SHIPPER.NUMBER='3A87T4' OR SHIPPER.NUMBER='698207' THEN
*DF*
*DF* Moridge on the account number we are taking all of the incentive
*DF* per contract see Chad Hebert 5/20/03 DRF
*DF*
*DF            BM.ARRAY<7,Y>=0
*DF            BM.ARRAY<11,Y>=0
*DF         END
*
* Removed the above per Chad Hebert on 7/24/03. - DRF
*
         IF SHIPPER.NUMBER='702766' THEN
*
* Alloy on the account number we are taking none of the incentive
* per contract see Chad Hebert 6/02/03 DRF
*
            BM.ARRAY<7,Y>=BM.ARRAY<5,Y>
            BM.ARRAY<11,Y>=BM.ARRAY<9,Y>
            BM.ARRAY<27,Y>=BM.ARRAY<25,Y>
            BM.ARRAY<31,Y>=BM.ARRAY<29,Y>
            BM.ARRAY<47,Y>=BM.ARRAY<45,Y>
            BM.ARRAY<51,Y>=BM.ARRAY<49,Y>
            BM.ARRAY<67,Y>=BM.ARRAY<65,Y>
            BM.ARRAY<71,Y>=BM.ARRAY<69,Y>
         END
         IF SHIPPER.NUMBER='6198X5' THEN
*
* T D Williamson on the account number we are taking all of the
* incentive on ground shipments per contract see Chad Hebert 4/03/03 DRF
*
            IF INDEX(BM.ARRAY<1,Y>,'GROUND',1) THEN
               BM.ARRAY<7,Y>=0
               BM.ARRAY<11,Y>=0
               BM.ARRAY<27,Y>=0
               BM.ARRAY<31,Y>=0
               BM.ARRAY<47,Y>=0
               BM.ARRAY<51,Y>=0
               BM.ARRAY<67,Y>=0
               BM.ARRAY<71,Y>=0
            END
         END
         IF SHIPPER.NUMBER='525223' OR SHIPPER.NUMBER='66E850' OR SHIPPER.NUMBER='715219' OR SHIPPER.NUMBER='728W46' OR SHIPPER.NUMBER='757702' OR SHIPPER.NUMBER='780479' OR SHIPPER.NUMBER='79029X' OR SHIPPER.NUMBER='YF1561' THEN
*
* Estes on the account number we are taking none of the incentive
* per contract see Chad Hebert 09/05/03 DRF
*
            BM.ARRAY<7,Y>=BM.ARRAY<5,Y>
            BM.ARRAY<11,Y>=BM.ARRAY<9,Y>
            BM.ARRAY<27,Y>=BM.ARRAY<25,Y>
            BM.ARRAY<31,Y>=BM.ARRAY<29,Y>
            BM.ARRAY<47,Y>=BM.ARRAY<45,Y>
            BM.ARRAY<51,Y>=BM.ARRAY<49,Y>
            BM.ARRAY<67,Y>=BM.ARRAY<65,Y>
            BM.ARRAY<71,Y>=BM.ARRAY<69,Y>
         END
         IF SHIPPER.NUMBER='634294' OR SHIPPER.NUMBER='680267' OR SHIPPER.NUMBER='681463' OR SHIPPER.NUMBER='84T40T' OR SHIPPER.NUMBER='X55384' OR SHIPPER.NUMBER='XX9172' THEN
*
* Consolidated on the account number we are taking all of the
* incentive on all shipments per contract see Chad Hebert 9/15/03 DRF
*
            BM.ARRAY<7,Y>=0
            BM.ARRAY<11,Y>=0
            BM.ARRAY<27,Y>=0
            BM.ARRAY<31,Y>=0
            BM.ARRAY<47,Y>=0
            BM.ARRAY<51,Y>=0
            BM.ARRAY<67,Y>=0
            BM.ARRAY<71,Y>=0
         END
*DF         IF SHIPPER.NUMBER='38231E' OR SHIPPER.NUMBER='973456' THEN
*DF         IF SHIPPER.NUMBER='973456' THEN
*DF*
*DF* Trim Systmes on the account number we are taking none of the incentive
*DF* per email from Nick on 5/08/06. DRF
*DF*
*DF            BM.ARRAY<7,Y>=BM.ARRAY<5,Y>
*DF            BM.ARRAY<11,Y>=BM.ARRAY<9,Y>
*DF            BM.ARRAY<27,Y>=BM.ARRAY<25,Y>
*DF            BM.ARRAY<31,Y>=BM.ARRAY<29,Y>
*DF            BM.ARRAY<47,Y>=BM.ARRAY<45,Y>
*DF            BM.ARRAY<51,Y>=BM.ARRAY<49,Y>
*DF            BM.ARRAY<67,Y>=BM.ARRAY<65,Y>
*DF            BM.ARRAY<71,Y>=BM.ARRAY<69,Y>
*DF         END
* The above was changed on 10/21/06. We now take whatever is setup for
* this client 01480 CVG / Trim System and all other shipper number for
* this client we take all the incentives. DRF 10/16/06.
*
         IF SHIPPER.NUMBER='202819' OR SHIPPER.NUMBER='38231E' OR SHIPPER.NUMBER='39256W' OR SHIPPER.NUMBER='71982W' OR SHIPPER.NUMBER='8E410F' THEN
*
* CVG Trim System on the account number above we are taking all of the
* incentive per per Nick Rath 10/16/06 DRF
*
            BM.ARRAY<7,Y>=0
            BM.ARRAY<11,Y>=0
            BM.ARRAY<27,Y>=0
            BM.ARRAY<31,Y>=0
            BM.ARRAY<47,Y>=0
            BM.ARRAY<51,Y>=0
            BM.ARRAY<67,Y>=0
            BM.ARRAY<71,Y>=0
         END
         IF SHIPPER.NUMBER='456422' OR SHIPPER.NUMBER='V8897F' THEN
*
* American Fan on the account number we are taking none of the incentive
* per email from Nick on 3/16/06. DRF
*
            BM.ARRAY<7,Y>=BM.ARRAY<5,Y>
            BM.ARRAY<11,Y>=BM.ARRAY<9,Y>
            BM.ARRAY<27,Y>=BM.ARRAY<25,Y>
            BM.ARRAY<31,Y>=BM.ARRAY<29,Y>
            BM.ARRAY<47,Y>=BM.ARRAY<45,Y>
            BM.ARRAY<51,Y>=BM.ARRAY<49,Y>
            BM.ARRAY<67,Y>=BM.ARRAY<65,Y>
            BM.ARRAY<71,Y>=BM.ARRAY<69,Y>
         END
         IF SHIPPER.NUMBER='9E92V4' THEN
*
* CVG Monona Wire on the account number 9E92V4 we are taking all of the
* incentive per per Nick Rath 7/14/06 DRF
*
            BM.ARRAY<7,Y>=0
            BM.ARRAY<11,Y>=0
            BM.ARRAY<27,Y>=0
            BM.ARRAY<31,Y>=0
            BM.ARRAY<47,Y>=0
            BM.ARRAY<51,Y>=0
            BM.ARRAY<67,Y>=0
            BM.ARRAY<71,Y>=0
         END
         IF CLIENT.ID='01499' OR CLIENT.ID='01521' THEN
*
* Bray Controls and Flow Tek we are taking none of the incentive
* right now. see Nick 12/01/06. DRF
*
            BM.ARRAY<7,Y>=BM.ARRAY<5,Y>
            BM.ARRAY<11,Y>=BM.ARRAY<9,Y>
            BM.ARRAY<27,Y>=BM.ARRAY<25,Y>
            BM.ARRAY<31,Y>=BM.ARRAY<29,Y>
            BM.ARRAY<47,Y>=BM.ARRAY<45,Y>
            BM.ARRAY<51,Y>=BM.ARRAY<49,Y>
            BM.ARRAY<67,Y>=BM.ARRAY<65,Y>
            BM.ARRAY<71,Y>=BM.ARRAY<69,Y>
         END
         IF CLIENT.ID='01508' THEN
*
* Case Supplies we are taking none of the incentive
* right now. see Nick 12/06/06. DRF
*
            BM.ARRAY<7,Y>=BM.ARRAY<5,Y>
            BM.ARRAY<11,Y>=BM.ARRAY<9,Y>
            BM.ARRAY<27,Y>=BM.ARRAY<25,Y>
            BM.ARRAY<31,Y>=BM.ARRAY<29,Y>
            BM.ARRAY<47,Y>=BM.ARRAY<45,Y>
            BM.ARRAY<51,Y>=BM.ARRAY<49,Y>
            BM.ARRAY<67,Y>=BM.ARRAY<65,Y>
            BM.ARRAY<71,Y>=BM.ARRAY<69,Y>
         END
      NEXT Y
      FOR Y=1 TO NUM.SD
         * New logistics variance = incentive - old total incentive
         BM.ARRAY<12,Y>=BM.ARRAY<5,Y>-BM.ARRAY<7,Y>+BM.ARRAY<9,Y>-BM.ARRAY<11,Y>
         BM.ARRAY<32,Y>=BM.ARRAY<25,Y>-BM.ARRAY<27,Y>+BM.ARRAY<29,Y>-BM.ARRAY<31,Y>
         BM.ARRAY<52,Y>=BM.ARRAY<45,Y>-BM.ARRAY<47,Y>+BM.ARRAY<49,Y>-BM.ARRAY<51,Y>
         BM.ARRAY<72,Y>=BM.ARRAY<65,Y>-BM.ARRAY<67,Y>+BM.ARRAY<69,Y>-BM.ARRAY<71,Y>
      NEXT Y
      SPLIT.AMOUNT=BM.ARRAY<20>+BM.ARRAY<40>+BM.ARRAY<60>
      IF SPLIT.AMOUNT=0 THEN
         T.PERCENT=.3333
         I.PERCENT=.3333
      END ELSE
         T.PERCENT=BM.ARRAY<60>/SPLIT.AMOUNT
         I.PERCENT=BM.ARRAY<40>/SPLIT.AMOUNT
      END
      FOR Y=1 TO NUM.SD
         * Calculate split codes
         FOR ZZ=4 TO 14
            T.AMOUNT=T.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<40+ZZ,Y>=BM.ARRAY<40+ZZ,Y>+OCONV(T.AMOUNT,'MR0')
            I.AMOUNT=I.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<20+ZZ,Y>=BM.ARRAY<20+ZZ,Y>+OCONV(I.AMOUNT,'MR0')
            AMT.LEFT=BM.ARRAY<60+ZZ,Y>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
            BM.ARRAY<ZZ,Y>=BM.ARRAY<ZZ,Y>+AMT.LEFT
         NEXT ZZ
         FOR ZZ=16 TO 17
            T.AMOUNT=T.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<40+ZZ,Y>=BM.ARRAY<40+ZZ,Y>+OCONV(T.AMOUNT,'MR0')
            I.AMOUNT=I.PERCENT*BM.ARRAY<60+ZZ,Y>
            BM.ARRAY<20+ZZ,Y>=BM.ARRAY<20+ZZ,Y>+OCONV(I.AMOUNT,'MR0')
            AMT.LEFT=BM.ARRAY<60+ZZ,Y>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
            BM.ARRAY<ZZ,Y>=BM.ARRAY<ZZ,Y>+AMT.LEFT
         NEXT ZZ
      NEXT Y
*DFIF USER.NAME='DAVID' THEN CALL ELINE('PRESS BREAK')
      T.AMOUNT=T.PERCENT*BM.ARRAY<75>
      BM.ARRAY<55>=BM.ARRAY<55>+OCONV(T.AMOUNT,'MR0')
      I.AMOUNT=I.PERCENT*BM.ARRAY<75>
      BM.ARRAY<35>=BM.ARRAY<35>+OCONV(I.AMOUNT,'MR0')
      AMT.LEFT=BM.ARRAY<75>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
      BM.ARRAY<15>=BM.ARRAY<15>+AMT.LEFT
      T.AMOUNT=T.PERCENT*BM.ARRAY<78>
      BM.ARRAY<58>=BM.ARRAY<58>+OCONV(T.AMOUNT,'MR0')
      I.AMOUNT=I.PERCENT*BM.ARRAY<78>
      BM.ARRAY<38>=BM.ARRAY<38>+OCONV(I.AMOUNT,'MR0')
      AMT.LEFT=BM.ARRAY<78>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
      BM.ARRAY<18>=BM.ARRAY<18>+AMT.LEFT
      T.AMOUNT=T.PERCENT*BM.ARRAY<80>
      BM.ARRAY<60>=BM.ARRAY<60>+OCONV(T.AMOUNT,'MR0')
      I.AMOUNT=I.PERCENT*BM.ARRAY<80>
      BM.ARRAY<40>=BM.ARRAY<40>+OCONV(I.AMOUNT,'MR0')
      AMT.LEFT=BM.ARRAY<80>-OCONV(T.AMOUNT,'MR0')-OCONV(I.AMOUNT,'MR0')
      BM.ARRAY<20>=BM.ARRAY<20>+AMT.LEFT
CHECK.AGAIN:***
      IF UPS.INVOICE.AMOUNT >= 0 THEN
         IF BM.ARRAY<20> < 0 OR BM.ARRAY<40> < 0 OR BM.ARRAY<60> < 0 THEN
            IF BM.ARRAY<20> < 0 THEN
               IF BM.ARRAY<40> > BM.ARRAY<60> THEN
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<24,Y>=BM.ARRAY<24,Y>+BM.ARRAY<4,Y>
                     BM.ARRAY<28,Y>=BM.ARRAY<28,Y>+BM.ARRAY<8,Y>
                     BM.ARRAY<33,Y>=BM.ARRAY<33,Y>+BM.ARRAY<13,Y>
                     BM.ARRAY<34,Y>=BM.ARRAY<34,Y>+BM.ARRAY<14,Y>
                     BM.ARRAY<4,Y>=0
                     BM.ARRAY<8,Y>=0
                     BM.ARRAY<13,Y>=0
                     BM.ARRAY<14,Y>=0
                  NEXT Y
                  BM.ARRAY<40>=BM.ARRAY<40>+BM.ARRAY<20>
                  BM.ARRAY<20>=0
               END ELSE
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<44,Y>=BM.ARRAY<44,Y>+BM.ARRAY<4,Y>
                     BM.ARRAY<48,Y>=BM.ARRAY<48,Y>+BM.ARRAY<8,Y>
                     BM.ARRAY<53,Y>=BM.ARRAY<53,Y>+BM.ARRAY<13,Y>
                     BM.ARRAY<54,Y>=BM.ARRAY<54,Y>+BM.ARRAY<14,Y>
                     BM.ARRAY<4,Y>=0
                     BM.ARRAY<8,Y>=0
                     BM.ARRAY<13,Y>=0
                     BM.ARRAY<14,Y>=0
                  NEXT Y
                  BM.ARRAY<60>=BM.ARRAY<60>+BM.ARRAY<20>
                  BM.ARRAY<20>=0
               END
            END
            IF BM.ARRAY<40> < 0 THEN
               IF BM.ARRAY<20> > BM.ARRAY<60> THEN
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<4,Y>=BM.ARRAY<4,Y>+BM.ARRAY<24,Y>
                     BM.ARRAY<8,Y>=BM.ARRAY<8,Y>+BM.ARRAY<28,Y>
                     BM.ARRAY<13,Y>=BM.ARRAY<13,Y>+BM.ARRAY<33,Y>
                     BM.ARRAY<14,Y>=BM.ARRAY<14,Y>+BM.ARRAY<34,Y>
                     BM.ARRAY<24,Y>=0
                     BM.ARRAY<28,Y>=0
                     BM.ARRAY<33,Y>=0
                     BM.ARRAY<34,Y>=0
                  NEXT Y
                  BM.ARRAY<20>=BM.ARRAY<20>+BM.ARRAY<40>
                  BM.ARRAY<40>=0
               END ELSE
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<44,Y>=BM.ARRAY<44,Y>+BM.ARRAY<24,Y>
                     BM.ARRAY<48,Y>=BM.ARRAY<48,Y>+BM.ARRAY<28,Y>
                     BM.ARRAY<53,Y>=BM.ARRAY<53,Y>+BM.ARRAY<33,Y>
                     BM.ARRAY<54,Y>=BM.ARRAY<54,Y>+BM.ARRAY<34,Y>
                     BM.ARRAY<24,Y>=0
                     BM.ARRAY<28,Y>=0
                     BM.ARRAY<33,Y>=0
                     BM.ARRAY<34,Y>=0
                  NEXT Y
                  BM.ARRAY<60>=BM.ARRAY<60>+BM.ARRAY<40>
                  BM.ARRAY<40>=0
               END
            END
            IF BM.ARRAY<60> < 0 THEN
               IF BM.ARRAY<20> > BM.ARRAY<40> THEN
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<4,Y>=BM.ARRAY<4,Y>+BM.ARRAY<44,Y>
                     BM.ARRAY<8,Y>=BM.ARRAY<8,Y>+BM.ARRAY<48,Y>
                     BM.ARRAY<13,Y>=BM.ARRAY<13,Y>+BM.ARRAY<53,Y>
                     BM.ARRAY<14,Y>=BM.ARRAY<14,Y>+BM.ARRAY<54,Y>
                     BM.ARRAY<44,Y>=0
                     BM.ARRAY<48,Y>=0
                     BM.ARRAY<53,Y>=0
                     BM.ARRAY<54,Y>=0
                  NEXT Y
                  BM.ARRAY<20>=BM.ARRAY<20>+BM.ARRAY<60>
                  BM.ARRAY<60>=0
               END ELSE
                  FOR Y = 1 TO NUM.SD
                     BM.ARRAY<24,Y>=BM.ARRAY<24,Y>+BM.ARRAY<44,Y>
                     BM.ARRAY<28,Y>=BM.ARRAY<28,Y>+BM.ARRAY<48,Y>
                     BM.ARRAY<33,Y>=BM.ARRAY<33,Y>+BM.ARRAY<53,Y>
                     BM.ARRAY<34,Y>=BM.ARRAY<34,Y>+BM.ARRAY<54,Y>
                     BM.ARRAY<44,Y>=0
                     BM.ARRAY<48,Y>=0
                     BM.ARRAY<53,Y>=0
                     BM.ARRAY<54,Y>=0
                  NEXT Y
                  BM.ARRAY<40>=BM.ARRAY<40>+BM.ARRAY<60>
                  BM.ARRAY<60>=0
               END
            END
            GOTO CHECK.AGAIN
         END
         T.NET=0
         T.INCENTIVE=0
         FOR Y=1 TO NUM.SD
            * Check to make sure that the incentive is at least 3 percent
            * the gross charges if not send an email out to everyone
            T.NET=T.NET+BM.ARRAY<4,Y>+BM.ARRAY<8,Y>+BM.ARRAY<13,Y>+BM.ARRAY<14,Y>
            T.NET=T.NET+BM.ARRAY<24,Y>+BM.ARRAY<28,Y>+BM.ARRAY<33,Y>+BM.ARRAY<34,Y>
            T.NET=T.NET+BM.ARRAY<44,Y>+BM.ARRAY<48,Y>+BM.ARRAY<53,Y>+BM.ARRAY<54,Y>
            T.INCENTIVE=T.INCENTIVE+BM.ARRAY<5,Y>+BM.ARRAY<9,Y>
            T.INCENTIVE=T.INCENTIVE+BM.ARRAY<25,Y>+BM.ARRAY<29,Y>
            T.INCENTIVE=T.INCENTIVE+BM.ARRAY<45,Y>+BM.ARRAY<49,Y>
         NEXT Y
         IF ((T.NET+T.INCENTIVE)*.09) > T.INCENTIVE THEN
            IF PLAN.AMOUNT > 99999 OR (T.NET+T.INCENTIVE) > 9999 THEN
               EMAIL.OUT=''
*DF               EMAIL.OUT<1>='JDarwin@afs.net':@VM:'BPBarker@afs.net'
               EMAIL.OUT<1>='JDarwin@afs.net'
               *DF           EMAIL.OUT<2>='DFriend@afs.net':@VM:'OHolman@afs.net'
               EMAIL.OUT<2>='RRaney@afs.net':@VM:'parcel@afs.net'   ; * GRB01
               EMAIL.OUT<3>=''           ; * BCC: Email addresses
               EMAIL.OUT<4>='Reports@afs.net'       ; * From Email address
               EMAIL.OUT<5>='Incentive are less than 9% for client ':CLIENT.ID:' ':CLIENT.NAME

               * Email body
               EMAIL.OUT<6,-1>='Total gross of the bill is ':(T.NET+T.INCENTIVE)'R26':' on ':FILE.DATE[1,2]:'-':FILE.DATE[3,2]:'-':FILE.DATE[5,4]:' while the incentive is only ':T.INCENTIVE'R26':' for shipper number ' :SHIPPER.NUMBER:' in Ebill ':EBILL.FILENAME:' which has a total of ':PLAN.AMOUNT'R26'
               VIN=EMAIL.OUT
               VOUT=''
*               CALL SENDMAIL(VIN,VOUT)
               IF VOUT<1>='ERROR' THEN
                  CALL ELINE('Email failure occurred for the incentive less than 9% shipper ':SHIPPER.NUMBER)
               END ELSE
*             CALL ELINE('Incentive less than 9% to ':EMAIL.OUT<1>:'.') ; * JMK02
               END
            END
         END
      END
      RETURN
CALCULATE.TOTALS:***

      TOTAL.INVOICE.AMOUNT=0
      FOR Y=1 TO NUM.SD
         * Add up net charges across all service descriptions to get total
*DF         TOTAL.INVOICE.AMOUNT+=BM.ARRAY<4,Y>+BM.ARRAY<8,Y>
         TOTAL.INVOICE.AMOUNT+=BM.ARRAY<ATT.SETTING+4,Y>+BM.ARRAY<ATT.SETTING+8,Y>+BM.ARRAY<ATT.SETTING+13,Y>+BM.ARRAY<ATT.SETTING+14,Y>
      NEXT Y
      IF TOTAL.INVOICE.AMOUNT#BM.ARRAY<ATT.SETTING+20> THEN
         CALL ELINE('Total Invoice ':TOTAL.INVOICE.AMOUNT:' and ':BM.ARRAY<ATT.SETTING+20>:' do not match')
*df        GOTO THE.END
      END

      TOTAL.LOGISTICS.VARIANCE=0
      FOR Y=1 TO NUM.SD
         * Add up logistics variance across all service descriptions to get total
         * NEW use 16 for hundredweight and 12 for everybody else.
*DF         IF BM.ARRAY<1,Y>[1,13]='HUNDREDWEIGHT' OR BM.ARRAY<1,Y>='GROUND HUNDREDWT' OR BM.ARRAY<1,Y>='2ND DAY AIR HUNDREDWT' OR BM.ARRAY<1,Y>='3DAY SELECT HUNDREDWT' OR BM.ARRAY<1,Y>='NEXT DAY AIR HUNDREDWT' OR BM.ARRAY<1,Y>='NEXT DAY AIR SAVER HUNDR' THEN
         IF BM.ARRAY<ATT.SETTING+1,Y>[1,13]='HUNDREDWEIGHT' AND BM.ARRAY<ATT.SETTING+1,Y>#'HUNDREDWEIGHT RES. ADJ.' THEN
            IF BM.ARRAY<ATT.SETTING+16,Y> GT 0 THEN
               TOTAL.LOGISTICS.VARIANCE+=BM.ARRAY<ATT.SETTING+16,Y>
            END
         END ELSE
            IF BM.ARRAY<ATT.SETTING+1,Y>#'HUNDREDWEIGHT RES. ADJ.' AND BM.ARRAY<ATT.SETTING+1,Y>#'CREDIT ADJUSTMENTS' THEN
               IF BM.ARRAY<ATT.SETTING+12,Y> GT 0 THEN
                  TOTAL.LOGISTICS.VARIANCE+=BM.ARRAY<ATT.SETTING+12,Y>
               END
            END
         END
      NEXT Y
      TOTAL.LOGISTICS.VARIANCE=ABS(TOTAL.LOGISTICS.VARIANCE)

      TOTAL.OVERCHARGE.VARIANCE=0
      LOCATE 'GUARANTEED SERVICE REFUN' IN BM.ARRAY<ATT.SETTING+1> BY 'AL' SETTING POS THEN
         TOTAL.OVERCHARGE.VARIANCE=BM.ARRAY<ATT.SETTING+4,POS>+BM.ARRAY<ATT.SETTING+8,POS>
      END
      IF CLIENT.ID#'01410' AND CLIENT.ID#'01475' THEN
*
* Do not calculate overcharges for Voids and Credit Adjustments. Per
* Joe Darwin on client 01410 Omaha Fixtures. DRF 07/26/05
*
* Added 01475 The Lamar Group to not calculate for Voids/Credit
* Adjustment on 5/18/06. DRF
*
         LOCATE 'HOST MANIFEST VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
*DF         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<4,POS>+BM.ARRAY<8,POS>
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'UPS ONL WORLDSHIP VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
*DF         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<4,POS>+BM.ARRAY<8,POS>
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'VENDOR MANIFEST VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
*DF         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<4,POS>+BM.ARRAY<8,POS>
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'CAMPUS SHIP VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
*DF         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<4,POS>+BM.ARRAY<8,POS>
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'UPS INTERNET VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
*DF         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<4,POS>+BM.ARRAY<8,POS>
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
         LOCATE 'MANIFEST EDI VOID' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
*DF         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<4,POS>+BM.ARRAY<8,POS>
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
*
* Removed the voids as overcharges per Brain P Barker AFS Dallas.
* DRF 11/18/05
*
*
* Reinstated the voids as overcharges per Brain P Barker AFS Dallas.
* DRF 02/28/06
*
         LOCATE 'CREDIT ADJUSTMENTS' IN BM.ARRAY<1> BY 'AL' SETTING POS THEN
            TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+BM.ARRAY<ATT.SETTING+17,POS>
         END
      END
      TOTAL.OVERCHARGE.VARIANCE=ABS(TOTAL.OVERCHARGE.VARIANCE)
      IF SHIPPER.NUMBER='E79490' AND ADDR.CORR.ARRAY<4>+0#0 THEN
         TOTAL.OVERCHARGE.VARIANCE=TOTAL.OVERCHARGE.VARIANCE+1
      END

      IF CLIENT.ID='01151' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01315' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01310' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01338' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01352' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01292' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01289' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01305' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01329' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01330' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01288' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01326' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01148' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END
      IF CLIENT.ID='01371' THEN
         TOTAL.OVERCHARGE.VARIANCE=0
      END

      TOTAL.DISCOUNT.VARIANCE=0
      TOTAL.DISCOUNT.VARIANCE=ABS(TOTAL.DISCOUNT.VARIANCE)

      TOTAL.ADDRESS.CORRECTION=0
      FOR Y=1 TO NUM.SD
         IF BM.ARRAY<ATT.SETTING+1,Y>[1,11]='ADDR. CORR.' THEN
            TOTAL.ADDRESS.CORRECTION+=BM.ARRAY<ATT.SETTING+4,Y>+BM.ARRAY<ATT.SETTING+8,Y>
         END
      NEXT Y


      TOTAL.LATE.PAYMENT.FEE=0
      FOR Y=1 TO NUM.SD
         IF BM.ARRAY<ATT.SETTING+1,Y>[1,16]='LATE PAYMENT FEE' THEN
            TOTAL.LATE.PAYMENT.FEE+=BM.ARRAY<ATT.SETTING+4,Y>+BM.ARRAY<ATT.SETTING+8,Y>
         END
      NEXT Y

* Debugging printout of all numbers by service level
*      CRT @(0,0):@(-3)
*      CRT 'SHIPPER = ':SHIPPER.NUMBER:SPACE(10):'CLIENT = ':CLIENT.ID
*      FOR Y=1 TO NUM.SD
*         CRT BM.ARRAY<1,Y>'L#24':SPACE(2):BM.ARRAY<2,Y>'R#4':SPACE(2):BM.ARRAY<3,Y>'R#5':SPACE(2):BM.ARRAY<4,Y>'R#5':SPACE(2):BM.ARRAY<5,Y>'R#7':SPACE(2):BM.ARRAY<6,Y>'R#8':SPACE(2):BM.ARRAY<7,Y>'R#8'
*      NEXT Y
*      INPUT J-AMES

      RETURN

********************************************************************************

SETUP.BILL.REC:***
      BILL.REC=''
      BILL.REC<1>=BILL.DATE              ; * Bill Date - same throughout the file
      BILL.REC<2>='O'                    ; * UPS always Outbound
      IF ZZZ = 2 THEN
         BILL.REC<2>='I'
      END
      IF ZZZ = 3 THEN
         BILL.REC<2>='T'
         IF CLIENT.ID='10356' THEN
*
* Alcon does not allow third party so I use inbound. DRF 08/29/05
*
            BILL.REC<2>='I'
         END
      END
      BILL.REC<3>='99999'                ; * Origin City ZIP
      BILL.REC<4>='99999'                ; * Destination City ZIP
      IF USE.EXPENSE='Y' THEN
         GOSUB CALL.GET.EXPENSE          ; * Call GET.EXPENSE to return EXPENSE.CODE
      END ELSE
         EXPENSE.CODE=''                 ; * Use null
      END
      BILL.REC<5>=EXPENSE.CODE           ; * Assign expense code
      BILL.REC<6>=0                      ; * Weight always 0 for UPS
      BILL.REC<7>=TOTAL.INVOICE.AMOUNT
      BILL.REC<7>+=TOTAL.LOGISTICS.VARIANCE
      BILL.REC<7>+=TOTAL.OVERCHARGE.VARIANCE
      BILL.REC<7>+=TOTAL.DISCOUNT.VARIANCE         ; * Amount client would have paid without AFS
      BILL.REC<8>=TOTAL.INVOICE.AMOUNT   ; * Amount we pay (amount to cut check for)
      BILL.REC<9>=DIVISION.ID            ; * Division
      BILL.REC<10>=-TOTAL.DISCOUNT.VARIANCE        ; * Discount variance
      BILL.REC<11>=-TOTAL.OVERCHARGE.VARIANCE      ; * Overcharge Variance
      BILL.REC<12>=-TOTAL.LOGISTICS.VARIANCE       ; * Consulting (logistics) variance
      BILL.REC<13>=''                    ; * Check amount - leave blank
      BILL.REC<14>=''                    ; * Check number - leave blank
      BILL.REC<15>=''                    ; * Check Date - leave blank
      BILL.REC<16>=''                    ; * BOL - leave blank
      IF CLIENT.ID='00857' THEN
         BILL.REC<16>='82200001'
      END
      BEGIN CASE
         CASE CLIENT.ID='00861'          ; * Watlow Hannibal
            TEMP='02376'
         CASE CLIENT.ID='00888'          ; * Watlow Batavia
            TEMP='00460'
         CASE CLIENT.ID='00889'          ; * Watlow Columbia
            TEMP='00671'
         CASE CLIENT.ID='00913'          ; * Watlow St. Louis
            TEMP='00540'
         CASE CLIENT.ID='00914'          ; * Watlow Pacific
            TEMP='00052'
         CASE CLIENT.ID='00928'          ; * Watlow Winona
            TEMP='00306'
         CASE CLIENT.ID='00929'          ; * Watlow Richmond
            TEMP='00850'
         CASE CLIENT.ID='00936'          ; * Encon
            TEMP='00160'
         CASE CLIENT.ID='01061'          ; * Ohi
            TEMP='00002'
         CASE CLIENT.ID='01096'          ; * Benrock
            TEMP='03999'
         CASE CLIENT.ID='01182'          ; * Enginetech
            TEMP='00000'
         CASE CLIENT.ID='00883'          ; * Pollock Paper
            TEMP='27106'
         CASE CLIENT.ID='00614'          ; * National Seating
            TEMP='00058'
         CASE CLIENT.ID='00865'          ; * National Parts CCC of FL
            TEMP=''
* No Customer/Vendor for National Parts CCC of FL
         CASE CLIENT.ID='01095'          ; * Commercial Vehicle System
            TEMP='00024'
            IF SHIPPER.NUMBER='945869' THEN
               TEMP='00011'
            END
         CASE CLIENT.ID='01097'          ; * Commercial Vehicle Canby
            TEMP='01605'
         CASE CLIENT.ID='00962'          ; * T D Williamson
            TEMP='01787'
         CASE CLIENT.ID='00841'          ; * Moridge
            TEMP='01393'
         CASE CLIENT.ID='01109'          ; * Timber Blind
            TEMP='00100'
         CASE CLIENT.ID='00244'          ; * Indel-Davis
            TEMP='00071'
         CASE CLIENT.ID='00981'          ; * Quincy Compressor
            TEMP='01060'
            IF SHIPPER.NUMBER='X74748' THEN
               TEMP='18781'
            END
         CASE CLIENT.ID='01045'          ; * BFG De-Icing
            TEMP='00231'
         CASE CLIENT.ID='01023'          ; * Samson
            TEMP='00590'
            IF SHIPPER.NUMBER='02R9V9' OR SHIPPER.NUMBER='7X3844' THEN
               TEMP='02314'
            END
            IF SHIPPER.NUMBER='312473' THEN
               TEMP='00773'
            END
            IF SHIPPER.NUMBER='384274' THEN
               TEMP='01088'
            END
            IF SHIPPER.NUMBER='566E82' THEN
               TEMP='01374'
            END
            IF SHIPPER.NUMBER='9XW851' THEN
               TEMP='00925'
            END
         CASE CLIENT.ID='01163'          ; * M D Building
            TEMP='00216'
         CASE CLIENT.ID='01071'          ; * Ergo Genesis
            TEMP='01969'
         CASE CLIENT.ID='00057'          ; * Alloy
            TEMP='10548'
            IF SHIPPER.NUMBER='709555' THEN
               TEMP='12748'
            END
         CASE CLIENT.ID='00846'          ; * Power Flame
            TEMP='00757'
         CASE CLIENT.ID='00866'          ; * Great Plains
            TEMP='04266'
         CASE CLIENT.ID='01152'          ; * Interstate Logos
            TEMP='00000'
            IF SHIPPER.NUMBER='2AW686' THEN
               TEMP='00001'
            END
         CASE CLIENT.ID='01088'          ; * Hi-Lo Industries
            TEMP='00021'
         CASE CLIENT.ID='01181'          ; * Watlow St. Louis
            TEMP='00022'
         CASE CLIENT.ID='00761'          ; * Leisure Arts
            TEMP='03203'
         CASE CLIENT.ID='01037'          ; * Unity
            TEMP='00149'
         CASE CLIENT.ID='00984'          ; * Orscheln
            TEMP='00098'
         CASE CLIENT.ID='00999'          ; * Felsted
            TEMP='00117'
         CASE CLIENT.ID='01000'          ; * Qualico
            TEMP='00063'
         CASE CLIENT.ID='01063'          ; * Estes
            TEMP='01028'
         CASE CLIENT.ID='10334'          ; * The Massey Company
            TEMP='00191'
         CASE CLIENT.ID='00843'          ; * Consolidated
            TEMP='10035'
            IF SHIPPER.NUMBER='681463' OR SHIPPER.NUMBER='691928' OR SHIPPER.NUMBER='84T40T' OR SHIPPER.NUMBER='1F4357' THEN
               TEMP='10100'
            END
         CASE CLIENT.ID='00839'          ; * Newell Coach
            TEMP=''
* No Customer/Vendor for Newell Coach
         CASE CLIENT.ID='00939'          ; * Krause Corp
            TEMP='01239'
         CASE CLIENT.ID='00895'          ; * Exline
            TEMP='00669'
         CASE CLIENT.ID='01057'          ; * H & K Dallas
            TEMP='00136'
         CASE CLIENT.ID='01166'          ; * Webster Engineering
            TEMP='00061'
         CASE CLIENT.ID='00957'          ; * Intercontinental Art
            TEMP='01730'
         CASE CLIENT.ID='01029'          ; * Enpro/Texolon
            TEMP='00363'
         CASE CLIENT.ID='01085'          ; * Knappco
            TEMP='06647'
            IF SHIPPER.NUMBER='406778' OR SHIPPER.NUMBER='9302X6' THEN
               TEMP='06639'
            END
         CASE CLIENT.ID='01189'          ; * PDMA Corp
            TEMP='00000'
         CASE CLIENT.ID='01174'          ; * Point Eight Power
            TEMP='00004'
         CASE CLIENT.ID='01172'          ; * American Warrior
            TEMP='00002'
         CASE CLIENT.ID='01175'          ; * Reagan Equipment
            TEMP='00027'
         CASE CLIENT.ID='10225'          ; * R & M Energy
            TEMP='00240'
         CASE CLIENT.ID='00919'          ; * Miracle Recreation - Monett
            TEMP='08523'
            IF SHIPPER.NUMBER='9R43V7' THEN
               TEMP='01417'
            END
         CASE CLIENT.ID='00920'          ; * Miracle Recreation - Mt. Ayr
            TEMP='01828'
         CASE CLIENT.ID='00933'          ; * Cobalt Boats
            TEMP='01024'
         CASE CLIENT.ID='01139'          ; * Davis Paint Co
            TEMP='00302'
         CASE CLIENT.ID='00979'          ; * Heatron
            TEMP='00024'
            IF SHIPPER.NUMBER='242202' THEN
               TEMP='00412'
            END
         CASE CLIENT.ID='01075'          ; * Superior Gearbox
            TEMP='00034'
         CASE CLIENT.ID='00873'          ; * Southland Dealers
            TEMP='01757'
         CASE CLIENT.ID='01196'          ; * JM Clipper
            TEMP='02604'
            IF SHIPPER.NUMBER='703517' THEN
               TEMP='02610'
            END
         CASE CLIENT.ID='01132'          ; * Li-Cor Biosciences
            TEMP='00827'
         CASE CLIENT.ID='00909'          ; * Dealers Engine Sales
            TEMP='01413'
         CASE CLIENT.ID='00354'          ; * CCC Parts
            TEMP='00631'
            IF SHIPPER.NUMBER='E06641' OR SHIPPER.NUMBER='3252E4' OR SHIPPER.NUMBER='730534' THEN
               TEMP='00630'
            END
            IF SHIPPER.NUMBER='801625' THEN
               TEMP='00649'
            END
            IF SHIPPER.NUMBER='821613' THEN
               TEMP='01626'
            END
            IF SHIPPER.NUMBER='54V551' THEN
               TEMP='02259'
            END
         CASE CLIENT.ID='01034'          ; * CCC National Fleet Services
            TEMP='00034'
            IF SHIPPER.NUMBER='R04336' THEN
               TEMP='00186'
            END
            IF SHIPPER.NUMBER='1R078E' THEN
               TEMP='00257'
            END
         CASE CLIENT.ID='01231'          ; * Jasco Products
            TEMP='00000'
         CASE CLIENT.ID='01160'          ; * Hunt Engine
            TEMP='00042'
            IF SHIPPER.NUMBER='705912' THEN
               TEMP='00060'
            END
         CASE CLIENT.ID='01177'          ; * Watlow Headquaters
            TEMP='00001'
         CASE CLIENT.ID='00701'          ; * Giacona Container
            TEMP='00120'
         CASE CLIENT.ID='10272'          ; * AAR Aircraft
            TEMP='00126'
            IF SHIPPER.NUMBER='73EW18' THEN
               TEMP='00250'
            END
         CASE CLIENT.ID='01015'          ; * Hillyard
            TEMP='01526'
         CASE CLIENT.ID='01155'          ; * VLP Holding Company
            TEMP='01566'
         CASE CLIENT.ID='01222'          ; * L & J Fasteners
            TEMP='00333'
         CASE CLIENT.ID='01235'          ; * Guard Line
            TEMP='00066'
            IF SHIPPER.NUMBER='A0V443' THEN
               TEMP='00080'
            END
         CASE CLIENT.ID='01184'          ; * All Fax
            TEMP='00219'
         CASE CLIENT.ID='01114'          ; * Mechanical Equipment
            TEMP='02082'
            IF SHIPPER.NUMBER='707810' THEN
               TEMP='02160'
            END
         CASE CLIENT.ID='01032'          ; * Gray Automotive
            TEMP='00512'
         CASE CLIENT.ID='10340'          ; * Shurtape
            TEMP='02222'
            IF SHIPPER.NUMBER='1R997W' OR SHIPPER.NUMBER='578E14' THEN
               TEMP='04123'
            END
         CASE CLIENT.ID='00392'          ; * Liebherr Mining Truck Inc.
            TEMP='03323'
         CASE CLIENT.ID='00963'          ; * DBT America Inc
            TEMP='01556'
         CASE CLIENT.ID='01223'          ; * BDI Marketing
            TEMP='00546'
         CASE CLIENT.ID='10356'          ; * Alcon
            TEMP='01897'
         CASE CLIENT.ID='01271'          ; * Airgas East
            TEMP='00291'
            IF SHIPPER.NUMBER='2096E2' THEN
               TEMP='00738'
            END
            IF SHIPPER.NUMBER='17X901' OR SHIPPER.NUMBER='180570' OR SHIPPER.NUMBER='253340' OR SHIPPER.NUMBER='63W515' THEN
               TEMP='00739'
            END
            IF SHIPPER.NUMBER='182084' THEN
               TEMP='00740'
            END
            IF SHIPPER.NUMBER='236569' OR SHIPPER.NUMBER='295220' OR SHIPPER.NUMBER='297811' OR SHIPPER.NUMBER='168782' THEN
               TEMP='00741'
            END
            IF SHIPPER.NUMBER='298450' THEN
               TEMP='00742'
            END
            IF SHIPPER.NUMBER='014940' OR SHIPPER.NUMBER='030E37' OR SHIPPER.NUMBER='040168' OR SHIPPER.NUMBER='040189' OR SHIPPER.NUMBER='042903' OR SHIPPER.NUMBER='043200' OR SHIPPER.NUMBER='046007' OR SHIPPER.NUMBER='0E2811' OR SHIPPER.NUMBER='1X8714' OR SHIPPER.NUMBER='2X6681' OR SHIPPER.NUMBER='X13578' THEN
               TEMP='00744'
            END
            IF SHIPPER.NUMBER='296268' THEN
               TEMP='00780'
            END
            IF SHIPPER.NUMBER='07X319' OR SHIPPER.NUMBER='X12001' THEN
               TEMP='00825'
            END
         CASE CLIENT.ID='01157'          ; * Clore Automotive
            TEMP='13154'
         CASE CLIENT.ID='01315'          ; * Iron Age
            TEMP='00141'
         CASE CLIENT.ID='01310'          ; * Rittal
            TEMP='00407'
         CASE CLIENT.ID='01368'          ; * Watlow Germany
            TEMP='00000'
         CASE CLIENT.ID='01286'          ; * Livers Bronze
            TEMP='00000'
         CASE CLIENT.ID='01357'          ; * Douglas Quikut
            TEMP='00040'
            IF SHIPPER.NUMBER='72X340' THEN
               TEMP='00039'
            END
         CASE CLIENT.ID='01338'          ; * Lewis Goetz
            TEMP='10404'
         CASE CLIENT.ID='01352'          ; * General Wire Spring
            TEMP='00154'
         CASE CLIENT.ID='01289'          ; * Draeger
            TEMP='00777'
         CASE CLIENT.ID='01292'          ; * Vesuvius
            TEMP='05163'
         CASE CLIENT.ID='01329'          ; * Timken Latrobe Steel
            TEMP='00389'
         CASE CLIENT.ID='01330'          ; * Timken Latrobe Distribution
            TEMP='00419'
         CASE CLIENT.ID='01288'          ; * Marmon / Keystone
            TEMP='02289'
         CASE CLIENT.ID='01021'          ; * Republic Industries
            TEMP='00349'
         CASE CLIENT.ID='01064'          ; * Republic Industries
            TEMP='00349'
         CASE CLIENT.ID='01500'          ; * Alliant
            TEMP='00003'
         CASE CLIENT.ID='01256'          ; * Rubber Products
            TEMP='06844'
         CASE CLIENT.ID='01263'          ; * Cookshack
            TEMP='00664'
         CASE CLIENT.ID='00857'          ; * Enpro/Stemco
            TEMP='00843'
            IF SHIPPER.NUMBER = '7E4467' THEN
               TEMP=''
            END
         CASE CLIENT.ID='01273'          ; * Peels Salon Services
            TEMP='00042'
         CASE CLIENT.ID='00903'          ; * PT Coupling
            TEMP='34096'
            IF SHIPPER.NUMBER='A8985V' THEN
               TEMP='36179'
            END
            IF SHIPPER.NUMBER='F608X3' THEN
               TEMP='36180'
            END
            IF SHIPPER.NUMBER='206205' THEN
               TEMP='36181'
            END
            IF SHIPPER.NUMBER='233E67' THEN
               TEMP='36182'
            END
            IF SHIPPER.NUMBER='29X8X6' THEN
               TEMP='36183'
            END
            IF SHIPPER.NUMBER='318556' THEN
               TEMP='36181'
            END
            IF SHIPPER.NUMBER='7AT310' THEN
               TEMP='36184'
            END
            IF SHIPPER.NUMBER='731361' THEN
               TEMP='36185'
            END
            IF SHIPPER.NUMBER='801835' THEN
               TEMP='36186'
            END
            IF SHIPPER.NUMBER='814683' THEN
               TEMP='36182'
            END
            IF SHIPPER.NUMBER='9W204A' THEN
               TEMP='36187'
            END
            IF SHIPPER.NUMBER='929239' THEN
               TEMP='36188'
            END
         CASE CLIENT.ID='01326'          ; * Calgon Carbon
            TEMP='01384'
         CASE CLIENT.ID='00863'          ; * Quiltcraft Industries
            TEMP='01419'
         CASE CLIENT.ID='01363'          ; * Parker Products
            TEMP='00028'
         CASE CLIENT.ID='01393'          ; * Rawling
            TEMP='00000'
         CASE CLIENT.ID='01283'          ; * SRI Surgical
            TEMP='00207'
         CASE CLIENT.ID='01120'          ; * Metzeler
            TEMP='00016'
         CASE CLIENT.ID='01377'          ; * Danuser
            TEMP='00000'
         CASE CLIENT.ID='00978'          ; * Enpro/Garlock Palmyra
            TEMP='23451'
         CASE CLIENT.ID='01361'          ; * Enpro/Fairbanks Morse
            TEMP='00027'
            IF SHIPPER.NUMBER='582969' THEN
               TEMP='00546'
            END
            IF SHIPPER.NUMBER='890321' THEN
               TEMP='00334'
            END
            IF SHIPPER.NUMBER='X53561' THEN
               TEMP='00476'
            END
         CASE CLIENT.ID='01148'          ; * Bell Sports
            TEMP='15774'
         CASE CLIENT.ID='01410'          ; * Omaha Fixture
            TEMP='00000'
         CASE CLIENT.ID='01066'          ; * PowerSeal Pipeline
            TEMP='02090'
         CASE CLIENT.ID='01396'          ; * Cummins Wagner
            TEMP='00021'
         CASE CLIENT.ID='01390'          ; * Oenophilia
            TEMP='00004'
         CASE CLIENT.ID='01404'          ; * Novatron
            TEMP='00000'
         CASE CLIENT.ID='01394'          ; * Odessa Pumps
            TEMP='00001'
         CASE CLIENT.ID='01179'          ; * Tuboscope
            TEMP='01188'
            IF SHIPPER.NUMBER='1WE245' THEN
               TEMP='03619'
            END
         CASE CLIENT.ID='01274'          ; * Varco LP
            TEMP='00117'
            IF SHIPPER.NUMBER='773E56' THEN
               TEMP='00116'
            END
            IF SHIPPER.NUMBER='05R65X' THEN
               TEMP='01264'
            END
            IF SHIPPER.NUMBER='E6E165' THEN
               TEMP='00164'
            END
         CASE CLIENT.ID='01159'          ; * National Spencer
            TEMP='00062'
         CASE CLIENT.ID='01309'          ; * Minster Machines
            TEMP='00235'
         CASE CLIENT.ID='01013'          ; * Merit Seatings
            TEMP='00376'
         CASE CLIENT.ID='01027'          ; * Robert Madden
            TEMP='00143'
            IF SHIPPER.NUMBER='9E15E1' THEN
               TEMP='00142'
            END
         CASE CLIENT.ID='01424'          ; * Putnam Plastics UPS
            TEMP='00000'
         CASE CLIENT.ID='01261'          ; * Inovar
            TEMP='00219'
            IF SHIPPER.NUMBER='637840' THEN
               TEMP='00527'
            END
            IF SHIPPER.NUMBER='R3817W' THEN
               TEMP='00568'
            END
         CASE CLIENT.ID='01400'          ; * Deep South Equipment
            TEMP='00025'
         CASE CLIENT.ID='01351'          ; * HBD Industries
            TEMP='00088'
         CASE CLIENT.ID='01168'          ; * Neese Industries
            TEMP='00257'
         CASE CLIENT.ID='01423'          ; * UMC Automation
            TEMP='00000'
         CASE CLIENT.ID='01250'          ; * Newmans Valve
            TEMP='00043'
         CASE CLIENT.ID='01435'          ; * Skinner Brothers
            TEMP='00113'
            IF SHIPPER.NUMBER='731035' THEN
               TEMP='00114'
            END
         CASE CLIENT.ID='01371'          ; * Riddell
            TEMP='41738'
            IF SHIPPER.NUMBER='A9759E' THEN
               TEMP='41739'
            END
         CASE CLIENT.ID='01441'          ; * American Fan
            TEMP='00008'
            IF SHIPPER.NUMBER='468354' THEN
               TEMP='00007'
            END

         CASE CLIENT.ID='00850'          ; * Darling - Paragould
            TEMP='22272'
         CASE CLIENT.ID='01151'          ; * Par Way Tryson
            TEMP='00398'
         CASE CLIENT.ID='01171'          ; * Louisiana Fish Fry
            TEMP='00208'
         CASE CLIENT.ID='01173'          ; * Cycle Country
            TEMP='00707'
         CASE CLIENT.ID='01270'          ; * Darling Store Fixtures, Wood
            TEMP='01471'
         CASE CLIENT.ID='01305'          ; * Future Metals
            TEMP='00295'
         CASE CLIENT.ID='01380'          ; * Pfaudler
            TEMP='00018'
         CASE CLIENT.ID='01381'          ; * Fein Power Tools
            TEMP='00301'
         CASE CLIENT.ID='01397'          ; * Electric Supply of Tampa
            TEMP='00173'
         CASE CLIENT.ID='01398'          ; * Chicago Riddell
            TEMP='00243'
         CASE CLIENT.ID='01414'          ; * Ellen Equipment
            TEMP='00000'
         CASE CLIENT.ID='01419'          ; * Virginia Linen
            TEMP='00084'
         CASE CLIENT.ID='01428'          ; * Sub-Technologies
            TEMP='00051'
         CASE CLIENT.ID='01433'          ; * Darling - Corning
            TEMP='00123'
         CASE CLIENT.ID='01442'          ; * Voto Mfg Sales
            TEMP='00064'
         CASE CLIENT.ID='01443'          ; * Mayflower
            TEMP='00045'
         CASE CLIENT.ID='01445'          ; * Biddiscombe
            TEMP='00102'
         CASE CLIENT.ID='01446'          ; * Magnum Magnetics
            TEMP='00000'
         CASE CLIENT.ID='01448'          ; * Alumaline
            TEMP='00000'
         CASE CLIENT.ID='01456'          ; * FD Lawrence
            TEMP='00000'
         CASE CLIENT.ID='01459'          ; * Pittsburgh Wire
            TEMP='00144'
         CASE CLIENT.ID='01466'          ; * FD Lawrence
            TEMP='00000'
         CASE CLIENT.ID='01084'          ; * Daws
            TEMP='00127'
         CASE CLIENT.ID='01461'          ; * STD RESTAURANT
            TEMP='00024'
         CASE CLIENT.ID='01468'          ; * Shepherd Color
            TEMP='00000'
         CASE CLIENT.ID='01187'          ; * Allied Plastic Supply
            TEMP='00665'
         CASE CLIENT.ID='01211'          ; * Mountain Coin
            TEMP='00616'
         CASE CLIENT.ID='01185'          ; * Professional Bakeware
            TEMP='00221'
         CASE CLIENT.ID='01467'          ; * Best and Donovan
            TEMP='00000'
         CASE CLIENT.ID='01450'          ; * Universal Electric
            TEMP='00393'
         CASE CLIENT.ID='01348'          ; * Polder, Inc
            TEMP='00150'
         CASE CLIENT.ID='01090'          ; * Aquaculture
            TEMP='00244'
         CASE CLIENT.ID='01110'          ; * Tony Chacere's
            TEMP='00000'
         CASE CLIENT.ID='01113'          ; * Airgas West
            TEMP='00710'
         CASE CLIENT.ID='01482'          ; * CVG Corp
            TEMP='00151'
         CASE CLIENT.ID='01493'          ; * CVG Monona
            TEMP='00035'
         CASE CLIENT.ID='01439'          ; * Flodraulic Group, Inc.
            TEMP='00000'
         CASE CLIENT.ID='01469'          ; * Durbin Industrial Valve
            TEMP='00000'
         CASE CLIENT.ID='01475'          ; * Lamar Corporation
            TEMP='00000'
         CASE CLIENT.ID='01521'          ; * Flow-Tek
            TEMP='00000'
         CASE CLIENT.ID='01508'          ; * Case Supply
            TEMP='00015'
         CASE CLIENT.ID='01499'          ; * Lamar Corporation
            TEMP='00121'
         CASE CLIENT.ID='01489'          ; * Lamar Corporation
            TEMP='00006'
         CASE CLIENT.ID='01490'          ; * Weatherford Aerospace
            TEMP='00027'
         CASE CLIENT.ID='01478'          ; * Targus
            TEMP='00429'
         CASE CLIENT.ID='01058'          ; * Enpro France Compressor
            TEMP='00153'
         CASE CLIENT.ID='01506'          ; * Franklynn Ind.
            TEMP='00025'
         CASE CLIENT.ID='01505'          ; * Marlite
            TEMP='00001'
         CASE CLIENT.ID='01518'          ; * Air-Pro
            TEMP='00000'
         CASE CLIENT.ID='01511'          ; * Womack Mach Supp
            TEMP='00015'
         CASE CLIENT.ID='01192'          ; * Applied Energy
            TEMP='00083'
         CASE CLIENT.ID='01420'          ; * VEKTEK
            TEMP='00052'
         CASE CLIENT.ID='01494'          ; * Cabarrus Plastics/CVG
            TEMP='00000'
         CASE CLIENT.ID='01497'          ; * Picture And Frame
            TEMP='00001'
         CASE CLIENT.ID='01487'          ; * Layflat Products
            TEMP='00000'
         CASE CLIENT.ID='01476'          ; * Lipsey's
            TEMP='00000'
         CASE CLIENT.ID='01485'          ; * Feintool Cincinatti
            TEMP='00000'
         CASE CLIENT.ID='01480'          ; * Trim Systems
            TEMP='00052'

            IF SHIPPER.NUMBER='1YR030' THEN
               TEMP='00092'
            END
            IF SHIPPER.NUMBER='43X670' THEN
               TEMP='00085'
            END
            IF SHIPPER.NUMBER='287333' THEN
               TEMP='00086'
            END
            IF SHIPPER.NUMBER='291584' THEN
               TEMP='00084'
            END
            IF SHIPPER.NUMBER='Y530R6' THEN
               TEMP='00087'
            END
            IF SHIPPER.NUMBER='34T6T2' THEN
               TEMP='00088'
            END
            IF SHIPPER.NUMBER='660668' OR SHIPPER.NUMBER='13T07T' THEN
               TEMP='00089'
            END
            IF SHIPPER.NUMBER='119Y4W' THEN
               TEMP='00090'
            END
            IF SHIPPER.NUMBER='A3R996' THEN
               TEMP='00091'
            END
         CASE CLIENT.ID='01471'          ; * Magnetic Specialty
            TEMP='00000'
         CASE CLIENT.ID='01483'          ; * Watlow Chesterfield
            TEMP='00000'
         CASE CLIENT.ID='01484'          ; * Watlow Fenton
            TEMP='00000'
         CASE CLIENT.ID='01491'          ; * Forms + Surfaces
            TEMP='00000'
         CASE CLIENT.ID='01266'          ; * Magnatek
            TEMP='00105'
         CASE CLIENT.ID='01328'          ; * PBM Inc
            TEMP='00001'
         CASE CLIENT.ID='01515'          ; * Leader Global Technologies
            TEMP='02604'
            IF SHIPPER.NUMBER='703517' THEN
               TEMP='02610'
            END
         CASE 1
            CALL ELINE('Client ':CLIENT.ID:' needs to be setup for cust vend codes - Aborting.')
            GOTO THE.END
      END CASE
      BILL.REC<17>=TEMP                  ; * Customer-Vendor code
      BILL.REC<18>=''                    ; * Route - leave blank
      BILL.REC<19>=''                    ; * Miles - leave blank
      BILL.REC<20>=CARRIER.ID            ; * AFS Carrier ID
      BEGIN CASE
         CASE CARRIER.ID='00041'         ; * UPS
            TEMP='15'                    ; * Parcel Ground from FB.TRANSPORT file
         CASE 1
            CALL ELINE('Client ':CLIENT.ID:' needs to be setup for transportation mode - Aborting.')
            GOTO THE.END
      END CASE
      BILL.REC<21>=TEMP                  ; * Transportation mode
      BILL.REC<22>=''                    ; * Disc Det
      BILL.REC<23>=''                    ; * Disc Det
      BILL.REC<24>=0                     ; * Disc % ?
      BILL.REC<25>='ZZ'                  ; * Orig state
      BILL.REC<26>='ZZ'                  ; * Dest state
      BILL.REC<27>='UPS'                 ; * Orig city
      BILL.REC<28>='UPS'                 ; * Dest city
      TEMP=''
      IF TOTAL.OVERCHARGE.VARIANCE#0 THEN TEMP:='O'
      IF TOTAL.LOGISTICS.VARIANCE#0 THEN TEMP:='C'
      IF TOTAL.DISCOUNT.VARIANCE#0 THEN TEMP:='D'
      BILL.REC<29>=TEMP                  ; * OCD (Overcharge, Consulting, Discount)
      BILL.REC<30>=ENTRY.DATE            ; * Entry date in the next processing period
      BEGIN CASE
            * All Watlows use just one expense code
         CASE CLIENT.ID='00861' OR CLIENT.ID='00888' OR CLIENT.ID='00889' OR CLIENT.ID='00913' OR CLIENT.ID='00914' OR CLIENT.ID='00928' OR CLIENT.ID='00929' OR CLIENT.ID='00936' OR CLIENT.ID='01368' OR CLIENT.ID='01483' OR CLIENT.ID='01484'
*DF            TEMP=BILL.REC<5> ;
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>=BILL.REC<5>[1,3]:'-7430-41'
*DF            END
         CASE CLIENT.ID='01061'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01096'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01182'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00883'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00614'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='200006'
*DF            END
         CASE CLIENT.ID='00865'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01095'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01097'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00962'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00841'
            TEMP=''
         CASE CLIENT.ID='01109'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00244'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00981'
            TEMP=''
         CASE CLIENT.ID='01045'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01023'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01163'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01071'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00057'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00846'
            TEMP=''
         CASE CLIENT.ID='00866'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01152'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01088'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01181'
            TEMP=BILL.REC<5>
            IF BM.ARRAY<15>+0#0 THEN
               TEMP<1,2>=BILL.REC<5>[1,3]:'-7430-41'
            END
         CASE CLIENT.ID='00761'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01037'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00984'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00999'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01000'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01063'
            IF DTAB#'' THEN
               TEMP=DTAB<1>
            END ELSE
               TEMP=BILL.REC<5>
            END
         CASE CLIENT.ID='10334'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00843'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00839'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00939'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00895'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01057'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01166'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00957'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01029'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01085'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='03.0.0603.53600.0000.0000'
*DF            END
         CASE CLIENT.ID='01189'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01174'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01172'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01175'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='10225'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00919'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00920'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00933'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01139'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00979'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01075'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00873'
            TEMP=''
         CASE CLIENT.ID='01196'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              BEGIN CASE
*DF                CASE SHIPPER.NUMBER='726039'
*DF                  NULL
*DF                CASE SHIPPER.NUMBER='726980'
*DF                  TEMP<1,2>=BILL.REC<5>[1,6]:'12250'
*DF                CASE SHIPPER.NUMBER='703517'
*DF                  TEMP<1,2>=BILL.REC<5>[1,6]:'12241'
*DF                CASE SHIPPER.NUMBER='6E4175'
*DF                  TEMP<1,2>=BILL.REC<5>[1,6]:'12241'
*DF              END CASE
*DF            END
         CASE CLIENT.ID='01132'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='6490-3':BILL.REC<5>[7,3]
*DF            END
         CASE CLIENT.ID='00909'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00354'
            TEMP=''
         CASE CLIENT.ID='01034'
            TEMP=''
         CASE CLIENT.ID='01231'
            TEMP=''
         CASE CLIENT.ID='01160'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01177'
            TEMP=BILL.REC<5>
*DF            IF SHIPPER.NUMBER='784421' THEN
*DF               IF BM.ARRAY<15>+0#0 THEN
*DF                  TEMP<1,2>=BILL.REC<5>[1,3]:'-7430-41'
*DF               END
*DF            END
         CASE CLIENT.ID='00701'
            TEMP=''
         CASE CLIENT.ID='10272'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01015'
            TEMP=''
         CASE CLIENT.ID='01155'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01222'
            TEMP=BILL.REC<5>
            IF BM.ARRAY<15>+0#0 THEN
               TEMP<1,2>='42231'
            END
         CASE CLIENT.ID='01235'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01184'
            TEMP=''
         CASE CLIENT.ID='01114'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01032'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='10340'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00392'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='396000'
*DF            END
         CASE CLIENT.ID='00963'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01223'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='10356'
            TEMP=BILL.REC<5>
            IF BM.ARRAY<ATT.SETTING+15>+0#0 THEN
               BEGIN CASE
*DF                CASE SHIPPER.NUMBER='179747'
*DF                  TEMP<1,2>='9668111580.6610.0'
                  CASE SHIPPER.NUMBER='09154W'
*DF                  TEMP<1,2>='9990224000.6620.13'
                     TEMP<1,2>='9990224000.6620.23'
                  CASE SHIPPER.NUMBER='22W9A9'
                     TEMP<1,2>='9990224000.6620.80'
                  CASE SHIPPER.NUMBER='22W9A7'
                     TEMP<1,2>='9990224000.6620.40'
                  CASE SHIPPER.NUMBER='750841'
                     TEMP<1,2>='9990224000.6620.23'
                  CASE SHIPPER.NUMBER='084E1W'
*DF                  TEMP<1,2>='9990224000.6620.33'
                     TEMP<1,2>='9990224000.6620.23'
               END CASE
            END
            IF SHIPPER.NUMBER='179747' THEN
               IF BILL.REC<2>='I' THEN
                  TEMP='9668111580.6610.0'
                  BILL.REC<5>=TEMP
               END
               IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+15>-BM.ARRAY<ATT.SETTING+18>=0 THEN
                  IF BM.ARRAY<ATT.SETTING+15>+0#0 THEN
                     TEMP='9668111580.6610.0'
                     BILL.REC<5>='9668111580.6610.0'
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP<1,2>='9990016100.5310.1'
                     END
                  END ELSE
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP='9990016100.5310.1'
                     END ELSE
                        TEMP='9668111580.6610.0'
                     END
                  END
               END ELSE
                  TEMP=BILL.REC<5>
                  IF BM.ARRAY<ATT.SETTING+15>+0#0 THEN
                     TEMP<1,2>='9668111580.6610.0'
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP<1,3>='9990016100.5310.1'
                     END
                  END ELSE
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP<1,2>='9990016100.5310.1'
                     END
                  END
               END
            END
         CASE CLIENT.ID='01271'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01157'
*DF            IF BILL.REC<8>-BM.ARRAY<15>-BM.ARRAY<18>=0 THEN
*DF              IF BM.ARRAY<15>+0#0 THEN
*DF                TEMP='50.20825'
*DF                BILL.REC<2>='I'
*DF                BILL.REC<5>='50.20825'
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP<1,2>='50.22025'
*DF                END
*DF              END ELSE
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP='50.22025'
*DF                END ELSE
*DF                  TEMP='50.20830'
*DF                END
*DF              END
*DF            END ELSE
*DF              TEMP=BILL.REC<5>
*DF              IF BM.ARRAY<15>+0#0 THEN
*DF                TEMP<1,2>='50.20825'
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP<1,3>='50.22025'
*DF                END
*DF              END ELSE
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP<1,2>='50.22025'
*DF                END
*DF              END
*DF            END
            IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>=0 THEN
               TEMP='50.22025'
            END ELSE
               TEMP=BILL.REC<5>
               IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                  TEMP<1,2>='50.22025'
               END
            END
         CASE CLIENT.ID='01315'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01310'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01286'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='5401'
*DF            END
         CASE CLIENT.ID='01357'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01338'
            IF DIVISION.ID='00010' THEN
               TEMP=BILL.REC<5>
            END ELSE
               TEMP=BILL.REC<5>
*DF              IF BM.ARRAY<15>+0#0 THEN
*DF                 TEMP<1,2>='325':BILL.REC<5>[4,5]
*DF              END
            END
         CASE CLIENT.ID='01352'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>=BILL.REC<5>[1,4]:'5010'
*DF            END
         CASE CLIENT.ID='01289'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01292'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='INBOUND'
*DF            END
         CASE CLIENT.ID='01329'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01330'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01288'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01021'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01064'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01256'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='4110-1'
*DF            END
         CASE CLIENT.ID='01263'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00857'
            TEMP=''
         CASE CLIENT.ID='01273'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='71402010'
*DF            END
         CASE CLIENT.ID='00903'
            TEMP=''
         CASE CLIENT.ID='01326'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='00863'
            TEMP=''
         CASE CLIENT.ID='01363'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='43500'
*DF            END
         CASE CLIENT.ID='01393'
            TEMP=''
         CASE CLIENT.ID='01283'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01120'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01377'
            TEMP=''
         CASE CLIENT.ID='00978'
            TEMP=''
            *  Distribute BFG-Garlock Palmyra automatically....
            TEMP<1,1>='MLD'
            TEMP<1,2>='KLZ'
            TEMP<1,3>='CMP'
            TEMP<1,4>='GYL'
            TEMP<1,5>='SHT'
            TEMP<1,6>='FAB'
            TEMP<1,7>='EJT'
            TEMP<1,8>='HYD'
            TEMP<1,9>='DIV'
            IF BILL.REC<2>='I' THEN
               TEMP<1,10>='RIM'
*DF            END ELSE
*DF              TEMP<1,9>='DIV'
            END
         CASE CLIENT.ID='01361'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01148'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01410'
            TEMP=''
         CASE CLIENT.ID='01066'
            TEMP=BILL.REC<5>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP<1,2>='6515-150'
*DF            END
         CASE CLIENT.ID='01396'
            TEMP=''
         CASE CLIENT.ID='01390'
            TEMP=''
         CASE CLIENT.ID='01404'
            TEMP=''
         CASE CLIENT.ID='01394'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01179'
            TEMP=''
         CASE CLIENT.ID='01274'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01151'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01159'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01309'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01013'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01027'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01424'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01261'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01400'
            TEMP=''
         CASE CLIENT.ID='01351'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01168'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01423'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01250'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01435'
            TEMP=''
         CASE CLIENT.ID='01371'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01441'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01459'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01461'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01466'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01084'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01500'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01468'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01187'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01211'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01185'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01467'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01450'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01348'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01090'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01110'
            TEMP=''
         CASE CLIENT.ID='01113'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01482'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01493'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01439'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01485'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01305'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01456'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01480'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01414'
            TEMP=''
         CASE CLIENT.ID='01428'
            IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>=0 THEN
               TEMP='E1018'
            END ELSE
               TEMP=BILL.REC<5>
               IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                  TEMP<1,2>='E1018'
               END
            END
*  BILL.REC<5> FOR EXPENSE CODES OR NULL FOR NO EXPENSE CODES SETUP
         CASE CLIENT.ID='01173'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01443'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01171'
            TEMP=''
         CASE CLIENT.ID='00850'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01058'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01192'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01270'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01433'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01381'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01380'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01448'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01446'
            TEMP=''
         CASE CLIENT.ID='01397'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01398'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01419'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01420'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01442'
            TEMP=''
         CASE CLIENT.ID='01445'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01469'
            TEMP=''
         CASE CLIENT.ID='01471'
            TEMP=''
         CASE CLIENT.ID='01490'
            TEMP=''
         CASE CLIENT.ID='01475'
            TEMP=''
         CASE CLIENT.ID='01521'
            TEMP=''
         CASE CLIENT.ID='01508'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01499'
            TEMP=BILL.REC<5
         CASE CLIENT.ID='01489'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01478'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01505'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01506'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01518'
            TEMP=''
         CASE CLIENT.ID='01511'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01494'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01497'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01487'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01476'
            TEMP=''
         CASE CLIENT.ID='01491'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01266'
            TEMP=BILL.REC<5>
         CASE CLIENT.ID='01328'
            TEMP=''
         CASE CLIENT.ID='01515'
            TEMP=BILL.REC<5>




         CASE 1
            CALL ELINE('Client ':CLIENT.ID:' needs to be setup for mv expense codes - Aborting.')
            GOTO THE.END
      END CASE
      BILL.REC<31>=TEMP                  ; * This is mv expense code
      BILL.REC<32>=''                    ; * Expense Distribution code ?
      BEGIN CASE
            * All Watlows use just one amount to pay
         CASE CLIENT.ID='00861' OR CLIENT.ID='00888' OR CLIENT.ID='00889' OR CLIENT.ID='00913' OR CLIENT.ID='00914' OR CLIENT.ID='00928' OR CLIENT.ID='00929' OR CLIENT.ID='00936' OR CLIENT.ID='01368' OR CLIENT.ID='01483' OR CLIENT.ID='01484'
*DF            TEMP=BILL.REC<8>
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF               TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01061'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01096'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01182'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00883'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00614'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF               TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='00865'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01095'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01097'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00962'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00841'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01109'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00244'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00981'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01045'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01023'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01163'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01071'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00057'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00846'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00866'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01152'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01088'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01181'
            IF BM.ARRAY<15>+0#0 THEN
               TEMP=BILL.REC<8>-BM.ARRAY<15>
               TEMP<1,2>=BM.ARRAY<15>
            END ELSE
               TEMP=BILL.REC<8>
            END
         CASE CLIENT.ID='00761'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01037'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00984'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00999'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01000'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01063'
            IF DTAB#'' THEN
               TEMP=DTAB<3>
            END ELSE
               TEMP=BILL.REC<8>
            END
         CASE CLIENT.ID='10334'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00843'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00839'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00939'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00895'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01057'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01166'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00957'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01029'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01085'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF               TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01189'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01174'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01172'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01175'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='10225'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00919'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00920'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00933'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01139'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00979'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01075'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00873'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01196'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              BEGIN CASE
*DF                CASE SHIPPER.NUMBER='726039'
*DF                  TEMP=BILL.REC<8>
*DF                CASE SHIPPER.NUMBER='703517'
*DF                  TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF                  TEMP<1,2>=BM.ARRAY<15>
*DF                CASE SHIPPER.NUMBER='6E4175'
*DF                  TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF                  TEMP<1,2>=BM.ARRAY<15>
*DF                CASE SHIPPER.NUMBER='726980'
*DF                  TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF                  TEMP<1,2>=BM.ARRAY<15>
*DF              END CASE
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01132'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF              TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='00909'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00354'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01034'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01231'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01160'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01177'
            TEMP=BILL.REC<8>
*DF            IF SHIPPER.NUMBER='784421' THEN
*DF               IF BM.ARRAY<15>+0#0 THEN
*DF                  TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF                  TEMP<1,2>=BM.ARRAY<15>
*DF               END ELSE
*DF                  TEMP=BILL.REC<8>
*DF               END
*DF            END
         CASE CLIENT.ID='00701'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='10272'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01015'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01155'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01222'
            IF BM.ARRAY<15>+0#0 THEN
               TEMP=BILL.REC<8>-BM.ARRAY<15>
               TEMP<1,2>=BM.ARRAY<15>
            END ELSE
               TEMP=BILL.REC<8>
            END
         CASE CLIENT.ID='01235'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01184'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01114'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01032'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='10340'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00392'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF              TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='00963'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01223'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='10356'
            IF BM.ARRAY<ATT.SETTING+15>+0#0 THEN
               TEMP=BILL.REC<8>-BM.ARRAY<ATT.SETTING+15>
               TEMP<1,2>=BM.ARRAY<ATT.SETTING+15>
            END ELSE
               TEMP=BILL.REC<8>
            END
            IF SHIPPER.NUMBER='179747' THEN
               IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+15>-BM.ARRAY<ATT.SETTING+18>=0 THEN
                  IF BM.ARRAY<ATT.SETTING+15>+0#0 THEN
                     TEMP=BM.ARRAY<ATT.SETTING+15>
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP<1,2>=BM.ARRAY<ATT.SETTING+18>
                     END
                  END ELSE
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP=BM.ARRAY<ATT.SETTING+18>
                     END ELSE
                        TEMP=BILL.REC<8>-BM.ARRAY<ATT.SETTING+15>-BM.ARRAY<ATT.SETTING+18>
                     END
                  END
               END ELSE
                  TEMP=BILL.REC<8>-BM.ARRAY<ATT.SETTING+15>-BM.ARRAY<ATT.SETTING+18>
                  IF BM.ARRAY<ATT.SETTING+15>+0#0 THEN
                     TEMP<1,2>=BM.ARRAY<ATT.SETTING+15>
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP<1,3>=BM.ARRAY<ATT.SETTING+18>
                     END
                  END ELSE
                     IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                        TEMP<1,2>=BM.ARRAY<ATT.SETTING+18>
                     END
                  END
               END
            END
         CASE CLIENT.ID='01271'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01157'
*DF            IF BILL.REC<8>-BM.ARRAY<15>-BM.ARRAY<18>=0 THEN
*DF              IF BM.ARRAY<15>+0#0 THEN
*DF                TEMP=BM.ARRAY<15>
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP<1,2>=BM.ARRAY<18>
*DF                END
*DF              END ELSE
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP=BM.ARRAY<18>
*DF                END ELSE
*DF                  TEMP=BILL.REC<8>-BM.ARRAY<15>-BM.ARRAY<18>
*DF                END
*DF              END
*DF            END ELSE
*DF              TEMP=BILL.REC<8>-BM.ARRAY<15>-BM.ARRAY<18>
*DF              IF BM.ARRAY<15>+0#0 THEN
*DF                TEMP<1,2>=BM.ARRAY<15>
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP<1,3>=BM.ARRAY<18>
*DF                END
*DF              END ELSE
*DF                IF BM.ARRAY<18>+0#0 THEN
*DF                  TEMP<1,2>=BM.ARRAY<18>
*DF                END
*DF              END
*DF            END
            IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>=0 THEN
               TEMP=BM.ARRAY<ATT.SETTING+18>
            END ELSE
               TEMP=BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>
               IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                  TEMP<1,2>=BM.ARRAY<ATT.SETTING+18>
               END
            END
         CASE CLIENT.ID='01315'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01310'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01286'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF              TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01357'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01338'
            IF DIVISION.ID='00010' THEN
               TEMP=BILL.REC<8>
            END ELSE
*DF              IF BM.ARRAY<15>+0#0 THEN
*DF                TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF                TEMP<1,2>=BM.ARRAY<15>
*DF              END ELSE
               TEMP=BILL.REC<8>
*DF              END
            END
         CASE CLIENT.ID='01352'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF              TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01289'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01292'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF              TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01329'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01330'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01288'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01021'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01064'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01256'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF              TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF              TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01263'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00857'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01273'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF               TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='00903'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01326'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00863'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01363'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF               TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01393'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01283'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01120'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01377'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00978'
            BASE.AMT=BILL.REC<8>
            EXP.ARRAY=''
            *  Distribute BFG-Garlock Palmyra automatically....
            *  Distribute change for Inbound and Outbound 01/31/06 - DRF
            IF BILL.REC<2>='I' THEN
               EXP.ARRAY<1,1>='MLD' ; EXP.ARRAY<2,1>=16.5
               EXP.ARRAY<1,2>='KLZ' ; EXP.ARRAY<2,2>=15.6
               EXP.ARRAY<1,3>='CMP' ; EXP.ARRAY<2,3>=8.9
               EXP.ARRAY<1,4>='GYL' ; EXP.ARRAY<2,4>=7.2
               EXP.ARRAY<1,5>='SHT' ; EXP.ARRAY<2,5>=16.9
               EXP.ARRAY<1,6>='FAB' ; EXP.ARRAY<2,6>=5.9
               EXP.ARRAY<1,7>='EJT' ; EXP.ARRAY<2,7>=5.0
               EXP.ARRAY<1,8>='HYD' ; EXP.ARRAY<2,8>=3.2
               EXP.ARRAY<1,9>='DIV' ; EXP.ARRAY<2,9>=11.9
               EXP.ARRAY<1,10>='RIM' ; EXP.ARRAY<2,10>=8.9
            END ELSE
               EXP.ARRAY<1,1>='MLD' ; EXP.ARRAY<2,1>=5.5
               EXP.ARRAY<1,2>='KLZ' ; EXP.ARRAY<2,2>=11.7
               EXP.ARRAY<1,3>='CMP' ; EXP.ARRAY<2,3>=3.6
               EXP.ARRAY<1,4>='GYL' ; EXP.ARRAY<2,4>=2.5
               EXP.ARRAY<1,5>='SHT' ; EXP.ARRAY<2,5>=6.1
               EXP.ARRAY<1,6>='FAB' ; EXP.ARRAY<2,6>=1.4
               EXP.ARRAY<1,7>='EJT' ; EXP.ARRAY<2,7>=3.3
               EXP.ARRAY<1,8>='HYD' ; EXP.ARRAY<2,8>=1.4
               EXP.ARRAY<1,9>='DIV' ; EXP.ARRAY<2,9>=64.5
            END
            EXP.TIMES=DCOUNT(EXP.ARRAY<1>,@VM)
            EXP.CHECK=0
            AMT.LEFT=BASE.AMT
            DTAB=''
            FOR ZZ = 1 TO EXP.TIMES
               EXP.CHECK+=EXP.ARRAY<2,ZZ>
               IF ZZ = EXP.TIMES THEN
                  EXP.AMT=AMT.LEFT
               END ELSE
                  EXP.AMT=BASE.AMT*EXP.ARRAY<2,ZZ>/100
                  EXP.AMT=OCONV(EXP.AMT,'MR0')
               END
               DTAB<1,-1>=EXP.ARRAY<1,ZZ>
               DTAB<3,-1>=EXP.AMT
               AMT.LEFT-=EXP.AMT
            NEXT ZZ
            IF EXP.CHECK#100 THEN
               CALL ELINE('Automatic Expense Breakout for BFG Garlock is not 100% Update Refused!')
               GOTO THE.END
            END
            TEMP=DTAB<3>
         CASE CLIENT.ID='01361'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01148'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01410'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01066'
*DF            IF BM.ARRAY<15>+0#0 THEN
*DF               TEMP=BILL.REC<8>-BM.ARRAY<15>
*DF               TEMP<1,2>=BM.ARRAY<15>
*DF            END ELSE
            TEMP=BILL.REC<8>
*DF            END
         CASE CLIENT.ID='01396'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01390'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01404'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01394'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01179'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01274'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01159'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01309'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01013'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01027'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01424'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01261'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01400'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01351'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01168'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01423'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01250'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01435'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01371'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01441'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01459'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01461'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01466'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01084'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01500'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01468'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01187'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01211'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01185'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01467'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01450'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01348'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01090'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01110'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01113'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01482'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01493'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01439'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01485'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01305'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01456'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01480'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01414'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01151'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01428'
            IF BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>=0 THEN
               TEMP=BM.ARRAY<ATT.SETTING+18>
            END ELSE
               TEMP=BILL.REC<8>-BM.ARRAY<ATT.SETTING+18>
               IF BM.ARRAY<ATT.SETTING+18>+0#0 THEN
                  TEMP<1,2>=BM.ARRAY<ATT.SETTING+18>
               END
            END
         CASE CLIENT.ID='01173'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01443'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01171'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='00850'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01270'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01433'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01381'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01380'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01448'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01446'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01397'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01398'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01419'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01471'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01445'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01442'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01469'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01475'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01521'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01508'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01499'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01489'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01490'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01478'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01058'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01506'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01505'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01518'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01511'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01192'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01420'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01494'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01497'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01487'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01476'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01491'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01266'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01328'
            TEMP=BILL.REC<8>
         CASE CLIENT.ID='01515'
            TEMP=BILL.REC<8>

         CASE 1
            CALL ELINE('Client ':CLIENT.ID:' needs to be setup for mv amount to pay - Aborting.')
            GOTO THE.END
      END CASE
      BILL.REC<33>=TEMP                  ; * This is mv amount to pay
      BILL.REC<34>=0                     ; * BD Discount Variance
      BILL.REC<35>=0                     ; * BD Overcharge Variance
      BILL.REC<36>=0                     ; * BD Commission Variance
      BILL.REC<37>=''
      BILL.REC<38>=''
      BILL.REC<39>='O'                   ; * Status O for OK - needed for process program
      BILL.REC<40>=''                    ; * Bank ?
      BEGIN CASE
         CASE CARRIER.ID='00041'         ; * UPS Variance description
            IF TOTAL.DISCOUNT.VARIANCE#0 THEN
               BILL.REC<41,1>='Discount Variance'
            END
            IF TOTAL.OVERCHARGE.VARIANCE#0 THEN
               IF SHIPPER.NUMBER='E79490' AND ADDR.CORR.ARRAY<4>+0#0 THEN
                  IF TOTAL.OVERCHARGE.VARIANCE-1#0 THEN
                     BILL.REC<41,2>=(TOTAL.OVERCHARGE.VARIANCE-1)'R26':' Guaranteed Service Refund/Voids,.01 Address Correction of ':ADDR.CORR.ARRAY<4>'R26'
                  END ELSE
                     BILL.REC<41,2>='.01 Address Correction ':ADDR.CORR.ARRAY<4>'R26'
                  END
               END ELSE
                  BILL.REC<41,2>='Guaranteed Service Refund/Voids'
               END
            END
            IF TOTAL.LOGISTICS.VARIANCE#0 THEN
               BILL.REC<41,3>='Logistics Variance'
            END
         CASE 1
            CALL ELINE('Carrier ':CARRIER.ID:' needs to be setup for variance description - Aborting.')
            GOTO THE.END
      END CASE
      BILL.REC<42>=''                    ; * Discount commission - leave blank for process program
      BILL.REC<43>=''                    ; * Overcharge commission - leave blank for process program
      BILL.REC<44>=''                    ; * Consulting commission - leave blank for process program
      BILL.REC<45>='LD'                  ; * Entry for Logistics Distribution
      BILL.REC<46>=''                    ; * Minimum charge ?
      BILL.REC<47>='N'                   ; * Approved carrier ?
      BILL.REC<48>=''                    ; * Carrier warning ?
      BILL.REC<49>='0'                   ; * CPM ?
      BILL.REC<50>=''                    ; * Update mode ?
      IF TOTAL.LOGISTICS.VARIANCE#0 THEN
         BILL.REC<51>=BILL.REC<21>       ; * Variance code (Transportation mode)
         BILL.REC<52>=TOTAL.LOGISTICS.VARIANCE     ; * Variance amount (Logistics variance)
         READV TEMP FROM F.TRANSPORT,BILL.REC<51>,1 ELSE TEMP=''
         BILL.REC<56>=TEMP               ; * Log Desc (Transportation mode name)
      END ELSE
         BILL.REC<51>=''                 ; * Variance code (Transportation mode)
         BILL.REC<52>=''                 ; * Variance amount (Logistics variance)
         BILL.REC<56>=''                 ; * Log Desc (Transportation mode name)
      END
      BILL.REC<53>=PROG.NAME             ; * Entered by
      BILL.REC<54>=PROG.NAME             ; * Verified by
      BILL.REC<55>=0                     ; * Size
      BILL.REC<57>=''
      BILL.REC<58>=''
      BILL.REC<59>=''
      BILL.REC<60>=''
      BILL.REC<61>=''
      BILL.REC<62>=''
      BILL.REC<63>='0'                   ; * Misrouting amount 0 for UPS
      BILL.REC<64>=''
      BILL.REC<65>=''
      BILL.REC<66>=''
      BILL.REC<67>=''
      BILL.REC<68>='1'                   ; * Stack 1 bill - Nothing to do by the auditor
      BILL.REC<69>=''
      BILL.REC<70>=''
      BILL.REC<71>=''
      BILL.REC<72>=''
      BILL.REC<73>=''
      BILL.REC<74>=''
      BILL.REC<75>=''
      BILL.REC<76>=''
      BILL.REC<77>=''
      BILL.REC<78>=''
      BILL.REC<79>=''
      BILL.REC<80>=''
      BILL.REC<81>=''
      BILL.REC<82>=''
      BILL.REC<83>=''
      BILL.REC<84>=PROG.NAME
      BILL.REC<85>=TIME()
      BILL.REC<86>=DATE()
      BILL.REC<87>=''
      BILL.REC<88>=''
      BILL.REC<89>=''                    ; * Leave auditor blank
      BILL.REC<90>=''
      BILL.REC<91>=''
      BILL.REC<92>=''
      BILL.REC<93>=''
      BILL.REC<94>=''
      BILL.REC<95>=DATE()
      BILL.REC<96>=''
      BILL.REC<97>=''
      BILL.REC<98>=BILL.REC<8>
      BILL.REC<99>=''
      BILL.REC<100>=BILL.REC<17>
      BILL.REC<101>=''
      BILL.REC<102>=''
      BILL.REC<103>=''
      BILL.REC<104>=''
      BILL.REC<105>=''
      BILL.REC<106>=''
      BILL.REC<107>=''
      BILL.REC<108>=''
      BILL.REC<109>=''
      BILL.REC<110>=''
      BILL.REC<111>=''
      BILL.REC<112>=''
      BILL.REC<113>=''
      BILL.REC<114>=''
      BILL.REC<115>=''
      BILL.REC<116>=''
      BILL.REC<117>=''
      BILL.REC<118>=''
      BILL.REC<119>=''
      BILL.REC<120>='99999'
      BILL.REC<121>='UPS'
      BILL.REC<122>='ZZ'
      BILL.REC<123>=TOTAL.ADDRESS.CORRECTION       ; * Address correction charge
      BILL.REC<124>=''
      BILL.REC<125>=''
      BILL.REC<126>=''
      BILL.REC<127>=''
      BILL.REC<128>=''
      BILL.REC<148>=TOTAL.LATE.PAYMENT.FEE
      BEGIN CASE
         CASE SHIPPER.NUMBER='184449'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='242243'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='242369'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='295378'
            BILL.REC<185>='CP'
            BILL.REC<186>='2100'
         CASE SHIPPER.NUMBER='5A991X'
            BILL.REC<185>='SP'
            BILL.REC<186>='2110'
         CASE 1
            BILL.REC<185>=''
            BILL.REC<186>=''
      END CASE
      IF CLIENT.ID='01326' THEN
         BILL.REC<187>='41'
      END ELSE
         BILL.REC<187>=''
      END
      BILL.REC<198>=BM.ARRAY<ATT.SETTING+19>
      RETURN

********************************************************************************

CALL.GET.EXPENSE:***
      OPEN '','DIVISION.CODES,':CLIENT.ID TO F.DIV THEN
         READ DIV.REC FROM F.DIV,DIVISION.ID ELSE
            DIV.REC=''
         END
      END ELSE
         DIV.REC=''
      END
      VIN=''
      VIN<1>=CLIENT.ID                   ; * Client
      VIN<2>=DIVISION.ID                 ; * Division
      VIN<3>=DIV.REC<8>                  ; *
      VIN<4>=CARRIER.ID                  ; * Carrier
      VIN<5>=CARRIER.NAME                ; * Name of carrier
      VIN<6>=CARRIER.MODE                ; * Transportation mode
*dF      VIN<7>='O'                         ; * UPS is always Outbound
      VIN<7>=BILL.REC<2>
      BEGIN CASE
            * All Watlows
         CASE CLIENT.ID='00861' OR CLIENT.ID='00888' OR CLIENT.ID='00889' OR CLIENT.ID='00913' OR CLIENT.ID='00914' OR CLIENT.ID='00928' OR CLIENT.ID='00929' OR CLIENT.ID='00936' OR CLIENT.ID='01368' OR CLIENT.ID='01483' OR CLIENT.ID='01484'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Watlow accounts
         CASE CLIENT.ID='01061'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Ohi
         CASE CLIENT.ID='01096'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Benrock
         CASE CLIENT.ID='01182'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Benrock
         CASE CLIENT.ID='00883'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Pollock
         CASE CLIENT.ID='00614'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for National Seating
         CASE CLIENT.ID='00865'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for National Parts CCC of FL
         CASE CLIENT.ID='01095'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Commercial Vehicle Systems
         CASE CLIENT.ID='01097'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Commercial Vehicle Canby
         CASE CLIENT.ID='00962'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for T D Williamson
         CASE CLIENT.ID='01109'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Timber Blind
         CASE CLIENT.ID='00244'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Indel-Davis
         CASE CLIENT.ID='01045'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for BFG De-Icing
         CASE CLIENT.ID='01023'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Samson Industries
         CASE CLIENT.ID='01163'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for M D Buildings
         CASE CLIENT.ID='01071'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Ergo Genesiss
         CASE CLIENT.ID='00057'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Alloy
         CASE CLIENT.ID='00866'
            VIN<8>='D'                   ; * Consignee code
            VIN<9>='Great Plains MFG'    ; * Consignee description
            VIN<22>='04266'              ; * Customer/Vendor ID
         CASE CLIENT.ID='01152'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Interstate Logos
         CASE CLIENT.ID='01088'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Hi-Lo Industries
         CASE CLIENT.ID='01181'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Watlow Control
         CASE CLIENT.ID='00761'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Leisure Arts
         CASE CLIENT.ID='01037'
            VIN<8>=DIVISION.ID[4,2]      ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
         CASE CLIENT.ID='00984'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Orscheln
         CASE CLIENT.ID='01000'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Qualico
         CASE CLIENT.ID='01063'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Estes
         CASE CLIENT.ID='10334'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for The Massey Company
         CASE CLIENT.ID='00843'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Consolidated
         CASE CLIENT.ID='00939'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Krause Corp
         CASE CLIENT.ID='00895'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Exline
         CASE CLIENT.ID='01057'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for H & K Dallas
         CASE CLIENT.ID='01166'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Webster Engineering
         CASE CLIENT.ID='00957'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Intercontinental Art
         CASE CLIENT.ID='01029'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Enpro/Texolon
         CASE CLIENT.ID='01085'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Knappco
         CASE CLIENT.ID='01174'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Point Eight Power
         CASE CLIENT.ID='01172'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for American Warrior
         CASE CLIENT.ID='01175'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Reagan Equipment
         CASE CLIENT.ID='10225'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for R & M Energy
         CASE CLIENT.ID='00919'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Miracle Recreation - Monett
         CASE CLIENT.ID='00920'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Miracle Recreation - Mt. Ayr
         CASE CLIENT.ID='00933'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Cobalt Boats
         CASE CLIENT.ID='01139'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Davis Paint Co
         CASE CLIENT.ID='00979'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Heatron
         CASE CLIENT.ID='01075'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Superior Gearbox
         CASE CLIENT.ID='01196'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for JM Clipper
         CASE CLIENT.ID='01132'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Li-Cor Biosciences
         CASE CLIENT.ID='00909'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Dealers Engine Sales
         CASE CLIENT.ID='01160'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Hunt Engine
         CASE CLIENT.ID='01177'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Watlow Headquarters
         CASE CLIENT.ID='10272'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Hunt Engine
         CASE CLIENT.ID='01155'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for VLP Holding Company
         CASE CLIENT.ID='01222'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for L & J Fasteners
         CASE CLIENT.ID='01235'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Guard Line
         CASE CLIENT.ID='01114'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Mechanical Equipment
         CASE CLIENT.ID='01032'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Gray Automotive
         CASE CLIENT.ID='10340'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Shurtape
         CASE CLIENT.ID='00392'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Liebherr Mining Truck Inc.
         CASE CLIENT.ID='00963'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for DBT America Inc
         CASE CLIENT.ID='01223'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for BDI Marketing
         CASE CLIENT.ID='10356'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Alcon
         CASE CLIENT.ID='01271'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Airgas East
         CASE CLIENT.ID='01157'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Clore Automotive
         CASE CLIENT.ID='01315'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Iron Age
         CASE CLIENT.ID='01310'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Rittal
         CASE CLIENT.ID='01286'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Livers Bronze
         CASE CLIENT.ID='01357'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Douglas Quikut
         CASE CLIENT.ID='01338'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Lewis Goetz
         CASE CLIENT.ID='01352'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for General Wire Spring
         CASE CLIENT.ID='01289'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Draeger
         CASE CLIENT.ID='01292'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Vesuvius
         CASE CLIENT.ID='01329'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Timken Latrobe Steel
         CASE CLIENT.ID='01330'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Timken Latrobe Distribution
         CASE CLIENT.ID='01288'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Marmon/Keystone
         CASE CLIENT.ID='01021'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Republic Industries
         CASE CLIENT.ID='01064'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Republic Industries
         CASE CLIENT.ID='01256'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Rubber Products
         CASE CLIENT.ID='01263'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Cookshack
         CASE CLIENT.ID='01273'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Peels Salon Services
         CASE CLIENT.ID='01326'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Calgon Carbon
         CASE CLIENT.ID='01363'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Parker Products
         CASE CLIENT.ID='01283'
            VIN<8>=''                    ; * Consignee code
            VIN<9>='SRI'                 ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
         CASE CLIENT.ID='01120'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Metzeler
         CASE CLIENT.ID='00978'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Enpro/Garlock Palmyra
         CASE CLIENT.ID='01361'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Enpro-Fairbanks Morse
         CASE CLIENT.ID='01148'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Bell Sports
         CASE CLIENT.ID='01066'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for PowerSeal Pipeline
         CASE CLIENT.ID='01394'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Odessa Pumps
         CASE CLIENT.ID='01159'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for National Spencer
         CASE CLIENT.ID='01309'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Minister Machines
         CASE CLIENT.ID='01013'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Merit Seating
         CASE CLIENT.ID='01274'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Varco LP
         CASE CLIENT.ID='01027'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Robert Madden
         CASE CLIENT.ID='01424'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Putnam Plastics UPS
         CASE CLIENT.ID='01261'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Inovar
         CASE CLIENT.ID='01351'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for HBD Industries
         CASE CLIENT.ID='01168'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Neese Industries
         CASE CLIENT.ID='01423'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for UMC Automation
         CASE CLIENT.ID='01250'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Newmans Valve
         CASE CLIENT.ID='01371'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Riddell
         CASE CLIENT.ID='01441'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for American Fan
         CASE CLIENT.ID='01428'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Sub-Technologies
         CASE CLIENT.ID='01173'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Cycle Country
         CASE CLIENT.ID='01443'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Mayflower
         CASE CLIENT.ID='00850'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Darling - Paragould
         CASE CLIENT.ID='01270'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Darling Store Fixtures, Wood
         CASE CLIENT.ID='01433'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Darling - Corning
         CASE CLIENT.ID='01381'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Fein Power Tools
         CASE CLIENT.ID='01380'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Pfaudler
         CASE CLIENT.ID='01448'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Alumaline
         CASE CLIENT.ID='01397'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Electric Supply of Tampa
         CASE CLIENT.ID='01398'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Chicago Riddell
         CASE CLIENT.ID='01419'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Virginia Linen
         CASE CLIENT.ID='01445'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Biddiscombe
         CASE CLIENT.ID='01442'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Voto Mfg Sales
         CASE CLIENT.ID='01459'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Pittsburgh Wire & Cable
         CASE CLIENT.ID='01469'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Durbin Industrial Valve
         CASE CLIENT.ID='01058'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Enpro France Compressor
         CASE CLIENT.ID='01475'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Lamar Corporation
         CASE CLIENT.ID='01521'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Flow-Tek
         CASE CLIENT.ID='01508'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Case Supply
         CASE CLIENT.ID='01499'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Bray USA
         CASE CLIENT.ID='01489'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Interstate Supply
         CASE CLIENT.ID='01490'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Weatherford Aerospace
         CASE CLIENT.ID='01478'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Targus, Inc.
         CASE CLIENT.ID='01506'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Franklynn Industries
         CASE CLIENT.ID='01505'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for MARLITE
         CASE CLIENT.ID='01518'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Air-Pro
         CASE CLIENT.ID='01511'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Womack Mach Supply
         CASE CLIENT.ID='01192'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Applied Energy
         CASE CLIENT.ID='01420'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for VEKTEK
         CASE CLIENT.ID='01494'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Cabarrus Plastics/CVG
         CASE CLIENT.ID='01497'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Picture & Frame
         CASE CLIENT.ID='01487'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Layflat Products
         CASE CLIENT.ID='01476'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Lipsey's
         CASE CLIENT.ID='01466'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for FD Lawrence
         CASE CLIENT.ID='01084'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Daws
         CASE CLIENT.ID='01500'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Alliant
         CASE CLIENT.ID='01461'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Std Restaurant
         CASE CLIENT.ID='01468'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Shepherd Color
         CASE CLIENT.ID='01187'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Allied Plastic
         CASE CLIENT.ID='01211'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Mountain Coin
         CASE CLIENT.ID='01185'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Professional Bakeware
         CASE CLIENT.ID='01467'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Best and Donovan
         CASE CLIENT.ID='01450'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Universal Electric
         CASE CLIENT.ID='01348'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Polder, Inc.
         CASE CLIENT.ID='01090'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Aquaculture
         CASE CLIENT.ID='01113'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Airgas West
         CASE CLIENT.ID='01482'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for CVG
         CASE CLIENT.ID='01493'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for CVG/Monona
         CASE CLIENT.ID='01439'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Flodraulic
         CASE CLIENT.ID='01485'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Feintool Cincinnati
         CASE CLIENT.ID='01151'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Par Way Tryson
         CASE CLIENT.ID='01305'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Future Metals
         CASE CLIENT.ID='01456'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for De Neef
         CASE CLIENT.ID='01480'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Trim Systems
         CASE CLIENT.ID='01491'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Forms + Surfaces
         CASE CLIENT.ID='01266'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Magnatek
         CASE CLIENT.ID='01515'
            VIN<8>=''                    ; * Consignee code
            VIN<9>=''                    ; * Consignee description
            VIN<22>=''                   ; * Customer/Vendor ID
            * These are not used in determining expense codes for Leader Global Technologies
         CASE 1
            CALL ELINE('Client ':CLIENT.ID:' needs to be setup for expense codes - Aborting.')
            GOTO THE.END
      END CASE
      VIN<10>='99999'                    ; * UPS always uses a zip of 99999
      VIN<11>='ZZ'                       ; * UPS always uses a state of ZZ
      VIN<12>='99999'                    ; * UPS always uses a zip of 99999
      VIN<13>='ZZ'                       ; * UPS always uses a state of ZZ
      VIN<14>='DEFAULT'                  ; * GET.EXPENSE internal operation mode
      VIN<15>=''                         ; * Default expense code
      VIN<16>=0                          ; * Back flag - Is this an input variable?
      VIN<17>=''                         ; * Used for EDI
      VIN<18>=''                         ; * Bill of Lading number - leave blank according to Myra
      VIN<19>= BILL.DATE                 ; * Bill date
      IF CARRIER.ID='00015' THEN
         VIN<20>=EBILL<Z,4>              ; * Invoice number
      END ELSE
         VIN<20>=''                      ; * All other carriers get null
      END
      VIN<21>=DIV.REC<11>
      VIN<23>=PRO.NUMBER                 ; * Pro number
      IF CLIENT.ID='00392' THEN
         VIN<14>='EDI'
      END

      VOUT=''
      CALL GET.EXPENSE(VIN,VOUT)
      EXPENSE.CODE=VOUT<1>
      MULTI.CODE=VOUT<8>
      MULTI.PERCENT=VOUT<9>

      IF CLIENT.ID='00889' AND SHIPPER.NUMBER='47X83X' THEN
         EXPENSE.CODE='015-005-4630-10'
      END
      IF CLIENT.ID='00936' THEN          ; * Encon
         EXPENSE.CODE='5230'
      END
      IF CLIENT.ID='01182' THEN          ; * Enginetech
         EXPENSE.CODE='91990.010'
      END
      IF CLIENT.ID='00883' THEN          ; * Pollock Paper
         EXPENSE.CODE=DIVISION.ID[4,2]:'7777777'
      END
      IF CLIENT.ID='00244' THEN
         BEGIN CASE
            CASE SHIPPER.NUMBER='703708'
               EXPENSE.CODE='5'
            CASE SHIPPER.NUMBER='731156'
               EXPENSE.CODE='1'
            CASE SHIPPER.NUMBER='756649'
               EXPENSE.CODE='4'
            CASE SHIPPER.NUMBER='7919E3'
               EXPENSE.CODE='2'
            CASE SHIPPER.NUMBER='X2W836'
               EXPENSE.CODE='3'
            CASE 1
               EXPENSE.CODE=''
         END CASE
      END
      IF CLIENT.ID='00057' THEN
         BEGIN CASE
            CASE SHIPPER.NUMBER='08W757'
               EXPENSE.CODE='6525-95-10'
            CASE SHIPPER.NUMBER='390384'
               EXPENSE.CODE='6525-30-10'
            CASE SHIPPER.NUMBER='702766'
               EXPENSE.CODE='6525-10-10'
            CASE SHIPPER.NUMBER='70478E'
               EXPENSE.CODE='6525-80-10'
            CASE SHIPPER.NUMBER='709555'
               EXPENSE.CODE='5050-95-10'
            CASE SHIPPER.NUMBER='728313'
               EXPENSE.CODE='6525-90-10'
            CASE SHIPPER.NUMBER='759592'
               EXPENSE.CODE='6525-20-10'
            CASE 1
               EXPENSE.CODE=''
         END CASE
      END
      IF CLIENT.ID='00984' THEN          ; * Orscheln
         EXPENSE.CODE='60571'
      END
      IF CLIENT.ID='01000' THEN          ; * Qualico
         EXPENSE.CODE='60571'
      END
      IF CLIENT.ID='00843' THEN
         BEGIN CASE
            CASE SHIPPER.NUMBER='681463'
               EXPENSE.CODE='680532'
            CASE SHIPPER.NUMBER='691928'
               EXPENSE.CODE='680531'
            CASE SHIPPER.NUMBER='X55384'
               EXPENSE.CODE='680541'
         END CASE
      END
      IF CLIENT.ID='01057' THEN          ; *  H & K Dallas
         EXPENSE.CODE='1322'
      END
      IF CLIENT.ID='10225' THEN          ; * R & M Energy
         BEGIN CASE
            CASE SHIPPER.NUMBER='401083'
*DF               EXPENSE.CODE='75100 RG SWO 100'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/15/06
*
               EXPENSE.CODE='75100 RG ARW 100'
            CASE SHIPPER.NUMBER='4X711X'
*DF               EXPENSE.CODE='75100 NA WA 100'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='75100 NA AWA 100'
            CASE SHIPPER.NUMBER='71709X'
*DF               EXPENSE.CODE='75100 NA USA 140'
* Changed per Mary on 1/20/05. - DRF
*DF               EXPENSE.CODE='75100 NA USA 840'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='75100 NA AUA 840'
            CASE SHIPPER.NUMBER='728148'
*DF               EXPENSE.CODE='75100 NA SOC 840'
* Changed per Mary on 1/20/05. - DRF
*DF               EXPENSE.CODE='75100 RG SOC 100'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='75100 RG ARO 100'
            CASE SHIPPER.NUMBER='758535'
*DF               EXPENSE.CODE='30610 OF BA'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='30610 OF ABA'
            CASE SHIPPER.NUMBER='777370'
*DF               EXPENSE.CODE='30610 CY TA'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='30610 CY ATA'
            CASE SHIPPER.NUMBER='822200'
*DF               EXPENSE.CODE='75100 RG SCA 100'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/15/06
*
               EXPENSE.CODE='75100 RG ARC 100'
            CASE SHIPPER.NUMBER='A708R2'
*DF               EXPENSE.CODE='30610 OF BA'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='30610 OF ABA'
            CASE SHIPPER.NUMBER='E02W43'
*DF               EXPENSE.CODE='75100 NA USA 420'
* Changed per Mary on 1/20/05. - DRF
*DF               EXPENSE.CODE='75100 NA USA 840'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='75100 NA AUA 840'
            CASE SHIPPER.NUMBER='E87788'
*DF               EXPENSE.CODE='75100 RG SOD 100'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='75100 RG ARD 100'
            CASE SHIPPER.NUMBER='X07316'
               EXPENSE.CODE='75100 RG SWI 100'
            CASE SHIPPER.NUMBER='XX7243'
               EXPENSE.CODE='75100 RG SMP 100'
            CASE SHIPPER.NUMBER='093F3V'
*DF               EXPENSE.CODE='75100 DH XTA 195'
*DF               EXPENSE.CODE='75100 NA XTA 195'
*
* Change of codes based on get expense as I do not have the email from
* Scott that was sent to Mary. DRF 09/08/06
*
               EXPENSE.CODE='75100 NA AXT 195'
            CASE 1
               EXPENSE.CODE=''
         END CASE
      END
      IF CLIENT.ID='00919' THEN          ; * Miracle Recreation - Monett
         EXPENSE.CODE='71000-000-6100'
      END
      IF CLIENT.ID='00920' THEN          ; * Miracle Recreation - Mt. Ayr
         EXPENSE.CODE='71000-000-6100'
      END
      IF CLIENT.ID='01196' AND SHIPPER.NUMBER='726039' THEN  ; * JM Clipper Nacogdoches TX Location
         EXPENSE.CODE='60000025050'
      END
      IF CLIENT.ID='00909' AND SHIPPER.NUMBER='0881X6' THEN  ; * Dealers Engine Sales Indiana Territory
         EXPENSE.CODE='6910-SH'
      END
      IF CLIENT.ID='00909' AND SHIPPER.NUMBER='428R8A' THEN  ; * Dealers Engine Sales Indiana Territory
         EXPENSE.CODE='6910-SH'
      END
      IF CLIENT.ID='01177' THEN
         BEGIN CASE
            CASE SHIPPER.NUMBER='63687E'
               EXPENSE.CODE='010-8015-6901'
            CASE SHIPPER.NUMBER='R6A832'
               EXPENSE.CODE='10-7420-7404'
            CASE SHIPPER.NUMBER='784421'
               EXPENSE.CODE='09-4630-10'
               IF BILL.REC<2>='I' THEN
*DF                 EXPENSE.CODE='09-7430-41'
                  EXPENSE.CODE='09-7430-24'
*
* Changed per email from Sylvester on 01/30/06. DRF
*
               END
            CASE SHIPPER.NUMBER='267A3R'
               EXPENSE.CODE='77-7777'
            CASE SHIPPER.NUMBER='680970'
               EXPENSE.CODE='77-7777'
            CASE SHIPPER.NUMBER='7X01X2'
               EXPENSE.CODE='10-7420-75'
            CASE 1
               EXPENSE.CODE=''
         END CASE
      END
      IF CLIENT.ID='01222' THEN          ; *  L & J Fasteners
         EXPENSE.CODE='42555'
      END
      IF CLIENT.ID='01288' THEN
         BEGIN CASE
            CASE SHIPPER.NUMBER='XX7130'
               EXPENSE.CODE='W65'
            CASE SHIPPER.NUMBER='044639'
               EXPENSE.CODE='W85'
            CASE SHIPPER.NUMBER='183594'
               EXPENSE.CODE='W80'
            CASE SHIPPER.NUMBER='2E0588'
               EXPENSE.CODE='W75'
            CASE SHIPPER.NUMBER='209319'
               EXPENSE.CODE='W70'
            CASE SHIPPER.NUMBER='243123'
               EXPENSE.CODE='W88'
            CASE SHIPPER.NUMBER='3Y364F'
               EXPENSE.CODE='W75'
            CASE SHIPPER.NUMBER='328797'
               EXPENSE.CODE='W20'
            CASE SHIPPER.NUMBER='35E514'
               EXPENSE.CODE='W10'
            CASE SHIPPER.NUMBER='455818'
               EXPENSE.CODE='W58'
            CASE SHIPPER.NUMBER='494810'
               EXPENSE.CODE='W67'
            CASE SHIPPER.NUMBER='548086'
               EXPENSE.CODE='W25'
            CASE SHIPPER.NUMBER='617918'
               EXPENSE.CODE='W60'
            CASE SHIPPER.NUMBER='670721'
               EXPENSE.CODE='W30'
            CASE SHIPPER.NUMBER='759867'
               EXPENSE.CODE='W35'
            CASE SHIPPER.NUMBER='805160'
               EXPENSE.CODE='W40'
            CASE SHIPPER.NUMBER='838165'
               EXPENSE.CODE='W45'
            CASE SHIPPER.NUMBER='840867'
               EXPENSE.CODE='W50'
            CASE SHIPPER.NUMBER='9E680W'
               EXPENSE.CODE='W49'
            CASE SHIPPER.NUMBER='963165'
               EXPENSE.CODE='W47'
            CASE SHIPPER.NUMBER='972762'
               EXPENSE.CODE='W55'
            CASE SHIPPER.NUMBER='1446R0'
               EXPENSE.CODE='W83'
            CASE 1
               EXPENSE.CODE=''
         END CASE
      END
      IF CLIENT.ID='01511' AND SHIPPER.NUMBER='56472W' THEN
         EXPENSE.CODE='01-00-01-6210000'
      END
*      IF CLIENT.ID='01021' THEN          ; * Republic Industries
*         EXPENSE.CODE='10-42000-':DIVISION.ID[4,2]
*      END
      IF CLIENT.ID='00978' THEN          ; * Enpro/Garlock Palmyra
         EXPENSE.CODE='MLD'
      END
      DTAB=''
      IF MULTI.CODE#'' THEN
         DTAB<1>=MULTI.CODE
         ACTUAL.CHG=TOTAL.INVOICE.AMOUNT
         CODE.COUNTER=DCOUNT(DTAB<1>,@VM)
         CODE.ACC = 0
         FOR XX = 1 TO CODE.COUNTER-1
            DTAB<3,XX> = OCONV(ACTUAL.CHG*MULTI.PERCENT<1,XX>/10000,'MR0')
            CODE.ACC = CODE.ACC + DTAB<3,XX>
         NEXT XX
         DTAB<3,CODE.COUNTER>=ACTUAL.CHG-CODE.ACC
         CHANGE.EXP=0
      END

      IF EXPENSE.CODE='' THEN
GET.EXPENSE1:
         CRT @(0,20):'Expense code could not be calculated. Please enter:':@(-4)
GET.EXPENSE2:
         MASK=EXPENSE.CODE:STR(MASK.CHAR,20-LEN(EXPENSE.CODE)):@(-4)
         HELP='Enter expense code. [EX]it'
         CALL GEN.IN(52,20,MASK,'',Q,0,20,'','',2,52,20,1,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         IF QI='' AND EXPENSE.CODE#'' THEN QI=EXPENSE.CODE
         BEGIN CASE
            CASE QI='EX' OR QI='EXIT'
               GOTO THE.END
            CASE QI=''
               GOTO GET.EXPENSE2
         END CASE
         EXPENSE.CODE=QI
         CRT @(0,20):'New expense code: ':EXPENSE.CODE:@(-4)
GET.YES.NO:
         MASK='Is this correct? ':STR(MASK.CHAR,4):@(-4)
         HELP='[Y]es [N]o [EX]it'
         CALL GEN.IN(0,22,MASK,'',Q,0,4,'','',2,17,22,1,QI,HELP,0,23)
         QI=OCONV(QI,'MCU')
         BEGIN CASE
            CASE QI='EX' OR QI='EXIT'
               GOTO THE.END
            CASE QI='N' OR QI='NO' OR QI='0'
               CRT @(0,20):@(-3)
               GOTO GET.EXPENSE1
            CASE QI='Y' OR QI='YES' OR QI='1'
               CRT @(0,19):@(-3)
            CASE 1
               GOTO GET.YES.NO
         END CASE
      END
      RETURN

********************************************************************************

SETUP.CRX.BILL.REC:***
* Setup CRX.BILL.REC from BILL.REC
      CRX.BILL.REC=''
      CRX.BILL.REC<1>=CLIENT.ID
      CRX.BILL.REC<2>=BILL.REC<1>
      CRX.BILL.REC<7>=BILL.REC<7>
      CRX.BILL.REC<8>=BILL.REC<8>
      CRX.BILL.REC<10>=BILL.REC<10>
      CRX.BILL.REC<11>=BILL.REC<11>
      CRX.BILL.REC<12>=BILL.REC<12>
      CRX.BILL.REC<30>=BILL.REC<30>
      CRX.BILL.REC<37>=BILL.REC<37>
      CRX.BILL.REC<41>=BILL.REC<41>
      CRX.BILL.REC<53>=BILL.REC<53>
      CRX.BILL.REC<54>=BILL.REC<54>
      CRX.BILL.REC<55>=BILL.REC<55>
      CRX.BILL.REC<63>=BILL.REC<63>
      RETURN

********************************************************************************

BUILD.GSR.AUDIT.HEADING:***
      LINE=''
      LINE<1,1>='TRACKING_NO'
      LINE<1,2>='NET_SHIPPER_CHG'
      LINE<1,3>='PICKUP_DATE'
      LINE<1,4>='SHIPTO_NAME'
      LINE<1,5>='POSTAL_CODE'
      RETURN

********************************************************************************

BUILD.GSR.AUDIT.DETAIL:***
      LINE=''
      LINE<1,1>=EBILL<Z,7>               ; * Tracking number

      LINE<1,2>=EBILL<Z,37>              ; * Net shipper charge

      TEMP=EBILL<Z,23>[1,2]:'/':EBILL<Z,23>[3,2]:'/':EBILL<Z,23>[5,4]
      LINE<1,3>=TEMP                     ; * Ship date or pickup date (MM/DD/YYYY)

      TEMP=EBILL<Z,30>
      IF TEMP='' THEN TEMP=EBILL<Z,31>
      LINE<1,4>=TEMP                     ; * Receiver name or receiver company name

      LINE<1,5>=EBILL<Z,35>              ; * Destination ZIP

      RETURN

********************************************************************************

BUILD.GSR.SPREADSHEET.HEADING:***
      LINE=''
      LINE<1,1>='Shipper Num'
      LINE<1,2>='Client Num'
      LINE<1,3>='Division Num'
      LINE<1,4>='Ship Date'
      LINE<1,5>='Tracking Num'
      LINE<1,6>='Refund Amount'
      RETURN

********************************************************************************

BUILD.GSR.SPREADSHEET.DETAIL:***
      LINE=''
      LINE<1,1>=SHIPPER.NUMBER           ; * UPS shipper number
      LINE<1,2>=CLIENT.ID                ; * AFS client number
      LINE<1,3>=DIVISION.ID              ; * AFS division number
      TEMP=EBILL<Y,23>[1,2]:'/':EBILL<Y,23>[3,2]:'/':EBILL<Y,23>[5,4]
      LINE<1,4>=TEMP                     ; * Ship date (MM/DD/YYYY)
      LINE<1,5>=EBILL<Y,7>               ; * Tracking number
      LINE<1,6>=EBILL<Y,37>              ; * Refund amount (net charge)
      RETURN

********************************************************************************

EMAIL.GSR.SPREADSHEET:***
      * Write the file to EMAILDATA first
      GSR.SPREADSHEET=CHANGE(GSR.SPREADSHEET,@VM,TAB)
      SS.NAME='EBILL_GSR_SPREADSHEET_':FILE.DATE:'.XLS'
*      WRITE GSR.SPREADSHEET ON F.EMAILDATA,SS.NAME

      EMAIL.OUT=''
      EMAIL.OUT<1>='MDodson@afs.net'      ; * To: Email addresses
*df      EMAIL.OUT<2>='DFriend@afs.net'
*     EMAIL.OUT<2>='J-ames@afs.net';                           * CC: Email addresses
      EMAIL.OUT<3>=''                    ; * BCC: Email addresses
      EMAIL.OUT<4>='Reports@afs.net'      ; * From Email address
      EMAIL.OUT<5>='UPS GSR Spreadsheet from e-Bill dated ':FILE.DATE  ; * Subject of Email

      * Email body
      EMAIL.OUT<6,-1>='UPS GSR spreadsheet report run by ':USER.NAME:' on ':DATE()'D4-':' at ':OCONV(TIME(),'MTHS')
      EMAIL.OUT<6,-1>='from UPS e-Bill file dated ':FILE.DATE:'.'
      EMAIL.OUT<7>=1                     ; * Auto format (add carriage returns to end of text)
      EMAIL.OUT<11,-1>='E:\ARDENT\PUBLIC\EMAILDATA\':SS.NAME
      VIN=EMAIL.OUT
      VOUT=''
*md      CALL SENDMAIL(VIN,VOUT)
      IF VOUT<1>='ERROR' THEN
*         WRITE GSR.SPREADSHEET ON F.BILLDATA.USER,SS.NAME
         CALL ELINE('Email failure occurred - GSR spreadsheet written to BILLDATA\':USER.NAME:'.')
      END ELSE
*        CALL ELINE('GSR spreadsheet emailed to ':EMAIL.OUT<1>:'.') ; * JMK02
      END
      RETURN

********************************************************************************

DELETE.AND.ARCHIVE.EXISTING.EBILL.FILE:***
*      DELETE F.BILLDATA.EBILL,EBILL.FILENAME
      EBILL.SAVE=CHANGE(EBILL.SAVE,@VM,TAB)
*      WRITE EBILL.SAVE ON F.BILLDATA.EBILL.HIST,EBILL.SAVE.FILENAME
      GOSUB UNBLOCK.CLIENTS              ; * JMK03
      RETURN

********************************************************************************

SETUP.DISPLAY.DA:***
* Data viewer
* Input: DATA.SCR.DA, HEADING.SCR.DA, START.SCR.DA, END.SCR.DA
IF USER.NAME='DAVID' THEN CALL ELINE('PRESS BREAK')
      CRT @(0,START.SCR.DA-1):REV.NORMAL:HEADING.SCR.DA:REV.OFF
      CRT @(0,END.SCR.DA+1):REV.NORMAL:' ':REV.HILITE:'U':REV.NORMAL:'p ':REV.HILITE:'D':REV.NORMAL:'own ':REV.HILITE:'T':REV.NORMAL:'op ':REV.HILITE:'B':REV.NORMAL:'ottom ':REV.HILITE:'P':REV.NORMAL:'rint ':REV.HILITE:'E':REV.NORMAL:'xit                                        Select:  ':REV.OFF
      NUM.ITEMS.DA=DCOUNT(DATA.SCR.DA,@AM)
      NUM.DISPLAY.ITEMS.DA=END.SCR.DA-START.SCR.DA+1
      START.ITEM.DA=1
      END.ITEM.DA=NUM.DISPLAY.ITEMS.DA
      IF END.ITEM.DA>NUM.ITEMS.DA THEN END.ITEM.DA=NUM.ITEMS.DA

DISPLAY.DA:
      FOR X=START.ITEM.DA TO END.ITEM.DA
         CRT @(0,START.SCR.DA+X-START.ITEM.DA):DATA.SCR.DA<X>:@(-4)
      NEXT X
      FOR X=START.SCR.DA+END.ITEM.DA-START.ITEM.DA+1 TO END.SCR.DA
         CRT @(0,X):@(-4)
      NEXT X

GET.KEY:
      CALL GEN.IN(77,END.SCR.DA+1,'','',Q,0,1,'','',1,77,END.SCR.DA+1,1,QI,'',0,23)
      CRT @(77,END.SCR.DA+1):REV.NORMAL:'  ':REV.OFF
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='E'
            FOR X=START.SCR.DA-1 TO END.SCR.DA+1
               CRT @(0,X):@(-4)
            NEXT X
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            RETURN
         CASE QI='P'
            CRT @(0,END.SCR.DA+2):'Printing...':@(-4):
            SLEEP 1
            GOSUB PRINT.DATA.DA
            GOSUB DISPLAY.SCREEN
            GOSUB DISPLAY.DATA
            RETURN
         CASE QI='B'
            IF END.ITEM.DA=NUM.ITEMS.DA THEN GOTO GET.KEY
            END.ITEM.DA=NUM.ITEMS.DA
            START.ITEM.DA=END.ITEM.DA-NUM.DISPLAY.ITEMS.DA+1
            IF START.ITEM.DA<1 THEN START.ITEM.DA=1
            GOTO DISPLAY.DA
         CASE QI='T'
            IF START.ITEM.DA=1 THEN GOTO GET.KEY
            START.ITEM.DA=1
            END.ITEM.DA=NUM.DISPLAY.ITEMS.DA
            IF END.ITEM.DA>NUM.ITEMS.DA THEN END.ITEM.DA=NUM.ITEMS.DA
            GOTO DISPLAY.DA
         CASE QI='D'
            IF END.ITEM.DA=NUM.ITEMS.DA THEN GOTO GET.KEY
            * Line at a time
            START.ITEM.DA=START.ITEM.DA+1
            END.ITEM.DA=END.ITEM.DA+1
            GOTO DISPLAY.DA
         CASE QI='U'
            IF START.ITEM.DA=1 THEN GOTO GET.KEY
            * Line at a time
            START.ITEM.DA=START.ITEM.DA-1
            END.ITEM.DA=END.ITEM.DA-1
            GOTO DISPLAY.DA
         CASE 1
            GOTO GET.KEY
      END CASE

PRINT.DATA.DA:
* Print report
* Input: DATA.PRT.DA, HEADING1.PRT.DA, HEADING2.PRT.DA, CO.NAME, PROG.DESC
      * Setup printer
      WIDTH=132
      LENGTH=60
      EXECUTE 'TERM ,,,,,,':WIDTH:',':LENGTH
      CTR=INT(WIDTH/2)
      PRINTER ON
      LASER=''
      LASER<1>=0                         ; * Portrait
      LASER<2>=6                         ; * Lines per inch
      LASER<3>=87                        ; * Page length
      LASER<4>=16.7                      ; * Characters per inch
      LASER<5>=0
      LASER<6>=0
      LASER<7>=1
      LASER<8>=0
      MARGIN=0
      PRINT ESC:"E"                      ; * Reset printer
      PRINT ESC:"&l":LASER<1>:"O":       ; * Set portrait
      PRINT ESC:"&l":LASER<2>:"D":       ; * Lines per inch
      PRINT ESC:"&l":LASER<3>:"F":       ; * Page length
      PRINT ESC:"(s":LASER<4>:"h":       ; * Set pitch
      PRINT LASER<5>:"p":                ; * Proportional printing
      PRINT LASER<6>:"s":                ; * Italics off
      PRINT "0T":                        ; * Line Printer Font
      PRINT ESC:"&l":LASER<7>:"H"        ; * Bin selection
      PRINT ESC:"&a":MARGIN:"L"
      PRINT ESC:'"g':LASER<8>:'F'        ; * Paper output

      L.TAB=CTR-(LEN(PROG.DESC)/2)
      L.TAB=L.TAB-LEN(CO.NAME)
      TEMP=CO.NAME:SPACE(L.TAB):PROG.DESC
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TIMEDATE())
      HEAD1=CO.NAME:SPACE(L.TAB):PROG.DESC:SPACE(R.TAB):TIMEDATE():"'L'"

      TITLE1=HEADING1.PRT.DA
      TITLE2=USER.NAME'L#10':' ':"PAGE 'PL'"

      L.TAB=CTR-(LEN(TITLE1)/2)
      L.TAB=L.TAB-LEN(PROG.NAME)
      TEMP=PROG.NAME:SPACE(L.TAB):TITLE1
      R.TAB=WIDTH-LEN(TEMP)
      R.TAB=R.TAB-LEN(TITLE2)
      HEAD2=PROG.NAME:SPACE(L.TAB):TITLE1:SPACE(R.TAB):TITLE2

      HEAD3=HEADING2.PRT.DA:"'L'"
      HEAD4=STR('-',132):"'L'"

      HEADING HEAD1:HEAD2:HEAD4:HEAD3:HEAD4

      NUM.PRT.ITEMS.DA=DCOUNT(DATA.PRT.DA,@AM)
      FOR X=1 TO NUM.PRT.ITEMS.DA
         PRINT DATA.PRT.DA<X>
      NEXT X
      PRINTER CLOSE
      RETURN

EMAIL.ADDR.CORR.INFO:***
* Email Address correct that are duplicated for Timber Blind to UPS
      NUM.OF.ADDR.CORR=DCOUNT(ADDR.CORR.ARRAY<1>,@VM)
      UPS.ADDR=''
      UPS.ADDR<-1>='Amt Billed  Amt Being Paid  Address City St Zip'
      FOR Y = 1 TO NUM.OF.ADDR.CORR
         IF ADDR.CORR.ARRAY<2,Y>#ADDR.CORR.ARRAY<3,Y> THEN
            UPS.ADDR<-1>=ADDR.CORR.ARRAY<3,Y>'R26#10':' ':ADDR.CORR.ARRAY<2,Y>'R26#11':'      ':ADDR.CORR.ARRAY<5,Y>:' ':ADDR.CORR.ARRAY<6,Y>:' ':ADDR.CORR.ARRAY<7,Y>:' ':ADDR.CORR.ARRAY<8,Y>
         END
      NEXT Y
      UPS.ADDR.ID=SHIPPER.NUMBER:'-ADDR-CORR-':BILL.DATE'D-4':'.txt'
*      WRITE UPS.ADDR ON F.EMAILDATA,UPS.ADDR.ID
      EMAIL.OUT=''
*DF         EMAIL.OUT<1>='sbrandon-moxley@ups.com'
*
* Changed per email from Susan Brandon-Moxley at UPS on 08/14/03 by DRF
*
*DF      EMAIL.OUT<1>='spierson@ups.com'
*
* Changed email address from spierson to nateam on 08/09/04. - DRF
*
      EMAIL.OUT<1>='nateam@ups.com'
*df         EMAIL.OUT<2>='CHebert@afs.net'
      EMAIL.OUT<2>='dfriend@afs.net'
      EMAIL.OUT<3>=''
      EMAIL.OUT<4>='CustomerService@afs.net'
      EMAIL.OUT<5>="Address corrections adjustment for shipper ":SHIPPER.NUMBER:" for week ending ":BILL.DATE'D2/'
      EMAIL.OUT<6,2>="The attached text file contains address corrections adjustment information for the invoice below:"
      EMAIL.OUT<6,3>="Shipper Number: ":SHIPPER.NUMBER
      EMAIL.OUT<6,4>="Billing Date: ":BILL.DATE'D4-'
      EMAIL.OUT<6,5>="Amount Billed: ":(TOTAL.INVOICE.AMOUNT+ADDR.CORR.ARRAY<4>)'R26,$'
      EMAIL.OUT<6,6>="Amount Adjusted: ":(-1*ADDR.CORR.ARRAY<4>)'R26,$'
      EMAIL.OUT<6,7>="Amount Being Paid: ":TOTAL.INVOICE.AMOUNT'R26,$'
      EMAIL.OUT<6,8>="If you have any questions please contact:"
      EMAIL.OUT<6,-1>="Customer Service"
      EMAIL.OUT<6,-1>="AFS Logistics, LLC."
      EMAIL.OUT<6,-1>="P.O. Box 18170"
      EMAIL.OUT<6,-1>="Shreveport, LA  71138"
      EMAIL.OUT<6,-1>="Phone: 318-798-2111 x1286"
      EMAIL.OUT<6,-1>='FAX: 318-797-3628'
      EMAIL.OUT<6,-1>='EMAIL: CustomerService@afs.net'
      EMAIL.OUT<11>='E:\ARDENT\PUBLIC\EMAILDATA\'
      EMAIL.OUT<11>:=UPS.ADDR.ID
      VIN=EMAIL.OUT
*      CALL SENDMAIL(VIN,VOUT)
      RETURN
BLOCK.CLIENTS:                           ; * JMK03
      CLIENT.LIST=''                     ; * JMK03
      NUM.ACCOUNTS=DCOUNT(SHIPPER.LIST<1>,@VM)     ; * JMK03
      FOR X=1 TO NUM.ACCOUNTS            ; * JMK03
         CLIENT.ID=SHIPPER.LIST<2,X>     ; * JMK03
         IF CLIENT.ID#'NOT FOUND' THEN   ; * JMK03
            LOCATE CLIENT.ID IN CLIENT.LIST SETTING CPOS ELSE          ; * JMK03
               CLIENT.LIST<-1>=CLIENT.ID           ; * JMK03
               TABLES.ID='NO-PROCESS*':CLIENT.ID   ; * JMK03
               READU TABLES.REC FROM F.TABLES,TABLES.ID ELSE           ; * JMK03
                  TABLES.REC='UPS Ebill Import Processing - See Matt.'           ; * JMK03
*                  WRITE TABLES.REC ON F.TABLES,TABLES.ID     ; * JMK03
               END                       ; * JMK03
               RELEASE F.TABLES,TABLES.ID          ; * JMK03
            END                          ; * JMK03
         END                             ; * JMK03
      NEXT X                             ; * JMK03
      RETURN                             ; * JMK03
UNBLOCK.CLIENTS:                         ; * JMK03
      NUM.ACCOUNTS=DCOUNT(SHIPPER.LIST<1>,@VM)     ; * JMK03
      FOR X=1 TO NUM.ACCOUNTS            ; * JMK03
         CLIENT.ID=SHIPPER.LIST<2,X>     ; * JMK03
         IF CLIENT.ID#'NOT FOUND' THEN   ; * JMK03
            TABLES.ID='NO-PROCESS*':CLIENT.ID      ; * JMK03
            READU TABLES.REC FROM F.TABLES,TABLES.ID THEN    ; * JMK03
               IF TABLES.REC='UPS Ebill Import Processing - See Matt.' THEN      ; * JMK03
*                  DELETE F.TABLES,TABLES.ID        ; * JMK03
               END                       ; * JMK03
            END                          ; * JMK03
         END                             ; * JMK03
         RELEASE F.TABLES,TABLES.ID      ; * JMK03
      NEXT X                             ; * JMK03
      RETURN                             ; * JMK03
********************************************************************************

THE.END:***
      * Delete any temporary work files in file UPS.BM before ending
      *   The temporary items have ID = SHIPPER_NUMBER*TEMP
      EXECUTE 'SSELECT UPS.BM' CAPTURING OUTPUT
      NUM.FILES=@SELECTED
*     IF NUM.FILES=0 THEN   ; * JCW01
      IF NUM.FILES < 1 THEN              ; * JCW01
         GOTO END.NOW
      END
      DONE=0
      LOOP
         READNEXT FILENAME ELSE DONE=1
      UNTIL DONE=1
         F1=FIELD(FILENAME,'*',1)        ; * Client number or shipper number
         F2=FIELD(FILENAME,'*',2)        ; * TEMP if it's a temporary work file
         IF F2='TEMP' THEN
*            DELETE F.UPS.BM,FILENAME
         END
      REPEAT
END.NOW:***
      CALL ELINE('Program ending.')
      CRT @(0,23):@(-4):
   END
