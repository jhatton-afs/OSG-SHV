      SUBROUTINE RWXL.V2(VIN,VOUT,DIN,TDIN,DOUT,F.PCIN,F.PCOUT,F.TABLES)
*****************************************************************************
* Program name : RWXL.V2
* Author       : Nicole Hennick
* Date written : 03/20/2018
* Library      : FBBP
* COPYRIGHT (C) 1998 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* Rateware Call to Webservice Interface
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 06:36:12 on 08/04/2021.
*
* Start modification history
* 08/03/18 : NKH00 : 0000 New Program
* 11/14/18 : NKH01 : Removed hard coded tariffs
* 07/19/19 : NKH02 : Corrected multiple calls to SOAP.CONNECT
* 03/31/21 : GRB01 : Init arrays
* 08/04/21 : NKH03 : ACCU-1304 Change heading on XML emails for testing
* 09/20/23 : GRB02 : ACCU-2336 Change to https connection
* End modification history
*
******************************************************************************
*
* Initialize variables
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE XML.H
      COMMON PROG.PARAMS(24)
      EQU CH.NUM TO PROG.PARAMS(1)
      EQU USER TO PROG.PARAMS(2)
      EQU SERVER.NAME TO PROG.PARAMS(3)
      PROG.NAME='RWXL.V2'
      CALL GET.USER.NEW(USER,CH.NUM)

      RESP.CNT = 1
      VOUT = ''
      BEG.TIME=TIME()
      CLIENT.NAME=''
      CARRIER.NAME=''
      TRY=''
      TEMP.ARRAY=''
      RESP=''
      DOUT=''
      FACTOR=''
      RTN.DTL.REC = ''
      SOAP.RET=''
      ORIG.CNTRY = ''
      DEST.CNTRY = ''
      LINE.OUT = ''
      ERR.REC = ''
      URL.CHANGED = 0
      SOAP.EMAIL.SENT = 0
      CONNECTION.MADE = 0
      RESPONSE.RETURNED = 0
      SEND.EMAIL = 0
      PROCESS.TRIES = 0
      MESSAGE = ''
      SMC.ERROR.CODE = ''
      TIME.REC = ''
      REQUEST.FAIL.COUNT = 0
      EMAIL.RECOVER = 0

      * VIN Input
      MODE=VIN<1>
      MAX.DISC.WEIGHT=VIN<2>
      CLIENT=VIN<3>
      CARRIER=VIN<4>
      RATE.TYPE=VIN<5>

      TARIFF.EFF.DT = DIN<1,8>
      TARIFF.ADJ.FACTOR = DIN<1,9>

* Begin NKH01
*      TARIFF.LIST = ''
*      TARIFF.LIST<1,-1>='AACTCZ'
*      TARIFF.LIST<2,-1>='AACTCZ02'
*      TARIFF.LIST<1,-1>='ABF504'
*      TARIFF.LIST<2,-1>='ABF50401'
*      TARIFF.LIST<1,-1>='AFS500'
*      TARIFF.LIST<2,-1>='AFS50002'
*      TARIFF.LIST<1,-1>='AFS525'
*      TARIFF.LIST<2,-1>='AFS52502'
*      TARIFF.LIST<1,-1>='AFS95'
*      TARIFF.LIST<2,-1>='AFS50002'
*      TARIFF.LIST<1,-1>='ARFW500'
*      TARIFF.LIST<2,-1>='ARF50001'
*      TARIFF.LIST<1,-1>='ARFWCZ'
*      TARIFF.LIST<2,-1>='ARFWCZ02'
*      TARIFF.LIST<1,-1>='CENFUS'
*      TARIFF.LIST<2,-1>='CENFUS01'
*      TARIFF.LIST<1,-1>='CFW555'
*      TARIFF.LIST<2,-1>='CFW55504'
*      TARIFF.LIST<1,-1>='CTS599'
*      TARIFF.LIST<2,-1>='CTS59901'
*      TARIFF.LIST<1,-1>='INTPCZ'
*      TARIFF.LIST<2,-1>='INTPCZ02'
*      TARIFF.LIST<1,-1>='LITECZ'
*      TARIFF.LIST<2,-1>='LITECZ02'
*      TARIFF.LIST<1,-1>='LINT'
*      TARIFF.LIST<2,-1>='LINT0002'
*      TARIFF.LIST<1,-1>='MASCCZ'
*      TARIFF.LIST<2,-1>='MASCCZ02'
*      TARIFF.LIST<1,-1>='ODF559'
*      TARIFF.LIST<2,-1>='ODF55901'
*      TARIFF.LIST<1,-1>='RDW507'
*      TARIFF.LIST<2,-1>='RDW50703'
*      TARIFF.LIST<1,-1>='SAI500'
*      TARIFF.LIST<2,-1>='SAI50001'
*      TARIFF.LIST<1,-1>='SMC519'
*      TARIFF.LIST<2,-1>='SMC51906'
*      TARIFF.LIST<1,-1>='VIKNIN'
*      TARIFF.LIST<2,-1>='VIKNIN02'
*      TARIFF.LIST<1,-1>='VIKNUS'
*      TARIFF.LIST<2,-1>='VIKNUS01'
*      TARIFF.LIST<1,-1>='YFS500'
*      TARIFF.LIST<2,-1>='YFS50001'
* End NKH01

      * Update Logs
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = PROG.NAME ; UPL.VIN<3> = USER ; UPL.VIN<4> = CH.NUM ; UPL.VOUT = ''
      **    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
*****      CALL UPD.RATE.ACTIVITY(UPL.VIN,UPL.VOUT)

      * Open Files
      * For testing - Used with FBBP RWXL.COMPARE
*      OPEN '','NKM.TEMP' TO NKM.TEMP ELSE STOP 201, 'NKM.TEMP'

      OPEN '','CONTROL' TO CONTROL ELSE
         CALL OPEN.ABORT('CONTROL',PROG.NAME)
      END
      OPEN '','RATE.ERROR.LOG' TO ERR.LOG ELSE
         CALL OPEN.ABORT('RATE.ERROR.LOG',PROG.NAME)
      END
      OPEN '','ZIPS' TO ZIPS ELSE
         CALL OPEN.ABORT('ZIPS',PROG.NAME)
      END
      OPEN '','RWXL.TIME.LOG' TO RWXL.TIME.LOG ELSE
         CALL OPEN.ABORT('RWXL.TIME.LOG',PROG.NAME)
      END
      OPEN '','RWXL.SMC.ERRORS' TO RWXL.SMC.ERRORS ELSE
         CALL OPEN.ABORT('RWXL.SMC.ERRORS',PROG.NAME)
      END

      * Read in parameters
      READ XMLPARAMS FROM CONTROL,"RWXML" THEN
         URL.TO.USE = XMLPARAMS<1>
         SERVER = XMLPARAMS<2>
         SOAPACTION = XMLPARAMS<3>
         LOGGING = XMLPARAMS<4>
         protlog = XMLPARAMS<5>
         EMAIL.RECIP = XMLPARAMS<6>
         SOAP.TIMEOUT = XMLPARAMS<8>
         URL1 = XMLPARAMS<9>
         URL2 = XMLPARAMS<10>
         URL3 = XMLPARAMS<11>
         USE.TIME.LOG = XMLPARAMS<12>
         MAX.TRIES = XMLPARAMS<13>
         MAX.PROCESS.TRIES = XMLPARAMS<14>
         SOAP.CONNECT.FAIL = XMLPARAMS<15>
         REQUEST.FAIL = XMLPARAMS<16>
         DEBUG.FLAG = XMLPARAMS<17>
         EMAIL.XML = XMLPARAMS<18>
      END ELSE
         URL.TO.USE = 1
         SERVER = 'gr91vrtpa05'
         SOAPACTION = ''
         LOGGING = "N"
         protlog = 'RWXL.LOG'
         EMAIL.RECIP = 'nmeddaugh@afs.net'
         SOAP.TIMEOUT = '30000'
         URL1 = 'https://applications.smc3.com/AdminManager/services/RateWareXL'
         URL2 = 'https://applications-atl.smc3.com/AdminManager/services/RateWareXL'
         URL3 = 'https://applications-dfw.smc3.com/AdminManager/services/RateWareXL'
         USE.TIME.LOG = 'N'
         MAX.TRIES = 3
         MAX.PROCESS.TRIES = 3
         SOAP.CONNECT.FAIL = 0
         REQUEST.FAIL = XMLPARAMS<16>
         DEBUG.FLAG = 'N'
         EMAIL.XML = '*'   ; * NKH03  
      END
      STAT = CREATESECURITYCONTEXT(Security_Context, "TLSv1.2")  ;* GRB02
      ***   Ret = setHTTPDefault( "PROXY_PORT" , 3128 )
      ***    Ret = setHTTPDefault( "PROXY_NAME" , "pladevdsm01.afslogistics.com" )
      Ret = setHTTPDefault( "PROXY_PORT" , "" )
      Ret = setHTTPDefault( "PROXY_NAME" , "" )
      
      Ret = SETHTTPDEFAULT("VERSION", "1.1")      

      * Production Credentials
      SMC.WEB.LICENSE.KEY = 'btDW617cPhbi'
***      SMC.WEB.PASSWORD = 'xc5qgtVs'
       SMC.WEB.PASSWORD = '8i4t8Gq6'
   ***   SMC.WEB.USERNAME = 'bfranklin@afs.net'
SMC.WEB.USERNAME = 'api_smc3@afs.net'

      * Email
      EMAIL.OUT=''
      EMAIL.OUT<1>=EMAIL.RECIP
      EMAIL.OUT<4>='FBBP_RWXL@afs.net'
      EMAIL.OUT<5>='Error with SMC Rateware Web-Service Rating Engine.'
      EMAIL.OUT<6,-1>='User:':USER:' Date:':OCONV(DATE(),'D2/'):' Time:':OCONV(TIME(),'MTHS')
      EMAIL.OUT<6,-1>=' ':@VM
      SEND.EMAIL=0

      IF DEBUG.FLAG = 'Y' THEN
         IF USER = 'NMEDDAUGH' OR USER = 'GBINO' OR USER = 'DAVID' THEN DEBUG
      END

*************************************************************************
MAIN.LOOP:
*************************************************************************
      GOSUB MAIN.LOGIC
      FOR ML = 1 TO 2                    ; * 3 possilbe URL's
         IF URL.CHANGED THEN
            URL.CHANGED = 0
            GOSUB MAIN.LOGIC
         END
      NEXT ML

      IF NOT(CONNECTION.MADE) THEN
         SOAP.CONNECT.FAIL = 1
         WRITEV SOAP.CONNECT.FAIL TO CONTROL, 'RWXML', 15
      END
      IF REQUEST.FAIL.COUNT = MAX.PROCESS.TRIES THEN
         REQUEST.FAIL = 1
         WRITEV REQUEST.FAIL ON CONTROL, 'RWXML', 16
      END

      IF DOUT<1> = '' THEN
         BEGIN CASE
            CASE SOAP.CONNECT.FAIL
               FOR D = 1 TO 2
                  DOUT<D,10> = "Unable to reach SMC rating server"
               NEXT D
            CASE REQUEST.FAIL
               FOR D = 1 TO 2
                  DOUT<D,10> = "SMC cannot process request at this time"
               NEXT D
         END CASE
      END
      Ret = setHTTPDefault( "PROXY_PORT" , "" )
      Ret = setHTTPDefault( "PROXY_NAME" , "" )
      RETURN

*************************************************************************
MAIN.LOGIC:
*************************************************************************
      SEND.EMAIL = 0

      * Turn protocol logging on
      IF LOGGING = 'Y' THEN
         stat = protocolLogging(protlog,"ON",10)
      END

      GOSUB OPEN.SOAP.CONNECTION

      * Send transit request or error email
      IF CONNECTION.MADE THEN            ; * Don't proceed if there is a connection error

         READV SOAP.CONNECT.FAIL FROM CONTROL, 'RWXML', 15 ELSE SOAP.CONNECT.FAIL = 0
         IF SOAP.CONNECT.FAIL = 1 THEN
            SOAP.CONNECT.FAIL = 0
            WRITEV SOAP.CONNECT.FAIL ON CONTROL, 'RWXML', 15
            GOSUB SEND.CONNECT.RECOVER.EMAIL
         END

         GOSUB CREATE.TDIN

         * Process LTLRateShipment to retreive rating
         XML.REQUEST=''
         RESULTS.DTL=''
         WEB.SERVICE = 'LTLRateShipment'
         BILLS=DCOUNT(DIN,@AM)
         DOUT=''
         FOR BC = 1 TO BILLS
            GOSUB SETUP.REQUEST.REQUIREMENTS
            GOSUB BUILD.LTL.RATE.SHIPMENT
            GOSUB PROCESS.REQUEST
*            IF URL.CHANGED THEN BC = BILLS
            IF RESPONSE.RETURNED THEN    ; * Don't proceed if there was an error processing request
               GOSUB PARSE.LTL.RATE.SHIPMENT
               GOSUB CREATE.DOUT
            END
            IF DIN<1>=DIN<2> THEN BC=BILLS
         NEXT BC

         * Populate Benchmark
         IF DIN<1>=DIN<2> THEN
            DOUT<2>=DOUT<1>
         END

         CLOSE.STATUS = XDOMClose(MYDOM)
      END

      * Turn protocol logging off
      IF LOGGING = 'Y' THEN
         stat = protocolLogging(protlog,"OFF",10)
      END

      * Time difference log
      END.TIME = TIME()
      TIME.DIFF = END.TIME - BEG.TIME
      IF USE.TIME.LOG = 'Y' THEN
         TIME.LOG.ID = BEG.TIME:"*":END.TIME:"*":USER
         TIME.REC<1> = TIME.DIFF
         TIME.REC<2> = XML.REQUEST
         TIME.REC<3> = RESPONSE.DATA
         WRITE TIME.REC ON RWXL.TIME.LOG, TIME.LOG.ID
      END

      * Send email if errors were encountered
      IF SEND.EMAIL THEN
         GOSUB SEND.EMAIL
      END

      * For testing - Used with FBBP RWXL.COMPARE
*      READV SEQ.NO FROM NKM.TEMP, 'SEQ', 1 ELSE SEQ.NO = '0'
*      SEQ.NO += 1
*      WRITEV SEQ.NO ON NKM.TEMP, 'SEQ', 1
*      WEIGHT.COMP = RESP<7>'R%6'
*      COMP.DOUT = VIN<3>:"|":VIN<4>:"|":ORIG.ZIP:"|":DEST.ZIP:"|":DIN<1,4>:"|":WEIGHT.COMP:"|":DOUT
*      CONVERT @AM TO "" IN COMP.DOUT
*      WRITE COMP.DOUT ON NKM.TEMP, SEQ.NO
*      COMP.DOUT= ''

      RETURN

*************************************************************************
OPEN.SOAP.CONNECTION:* Unsecured connection
*************************************************************************
      IF SOAP.EMAIL.SENT THEN RETURN
      SoapAction=''
      URL.TRIES = 0
      DONE=0
      * Will roll through all 3 URL's
      LOOP
         BEGIN CASE
            CASE URL.TRIES = MAX.TRIES
               DONE = 1
            CASE URL.TO.USE = 1
               URL = URL1
               NEXT.URL = 2
               URL.CHG = URL2
               FOR ZZ = 1 TO MAX.TRIES
                  IF NOT(DONE) THEN GOSUB SOAP.CONNECT       ; * NKH02
                  IF NOT(CONNECTION.MADE) THEN SLEEP 1
               NEXT ZZ
               URL.TRIES += 1
            CASE URL.TO.USE = 2
               URL = URL2
               NEXT.URL = 3
               URL.CHG = URL3
               FOR ZZ = 1 TO MAX.TRIES
                  IF NOT(DONE) THEN GOSUB SOAP.CONNECT       ; * NKH02
                  IF NOT(CONNECTION.MADE) THEN SLEEP 1
               NEXT ZZ
               URL.TRIES += 1
            CASE URL.TO.USE = 3
               URL = URL3
               NEXT.URL = 1
               URL.CHG = URL1
               FOR ZZ = 1 TO MAX.TRIES
                  IF NOT(DONE) THEN GOSUB SOAP.CONNECT       ; * NKH02
                  IF NOT(CONNECTION.MADE) THEN SLEEP 1
               NEXT ZZ
               URL.TRIES += 1
         END CASE
      UNTIL DONE
      REPEAT

      RETURN

*************************************************************************
SOAP.CONNECT:
*************************************************************************
      SOAP.RET = SoapCreateRequest(URL , SoapAction , SoapReq)
      SOAP.RET = SoapCreateSecureRequest(URL , SoapAction , SoapReq, Security_Context)  ;* GRB02
    
*SOAP.RET = 2
*IF URL.TO.USE # 3 THEN SOAP.RET=2
      IF SOAP.RET = 0 THEN
         DONE = 1
         CONNECTION.MADE = 1
         SOAP.EMAIL.SENT = 0
      END ELSE
         IF ZZ = MAX.TRIES THEN
            URL.TO.USE = NEXT.URL
            * Update the URL in the CONTROL file, RWXML record
            WRITEV URL.TO.USE ON CONTROL, 'RWXML', 1
            * Send email letting IT know the URL reference has been changed in CONTROL, CCXML
            EMAIL.OUT<6,-1>=@VM:'Cannot connect to SMC Rateware web-service on URL: '
            EMAIL.OUT<6,-1>=URL
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=@VM:'RWXL URL Reference changed to '
            EMAIL.OUT<6,-1>=URL.CHG
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=@VM:'Command: SoapCreateRequest' ; ERR.REC<1> = 'SoapCreateRequest'
            SEND.EMAIL=1
            BEGIN CASE
               CASE SOAP.RET = 1
                  EMAIL.OUT<6,-1>=@VM:'Error: Invalid URL syntax' ; ERR.REC<2> = 'Invalid URL syntax'
               CASE SOAP.RET = 2
                  EMAIL.OUT<6,-1>=@VM:'Error: Invalid HTTP method (indicates the POST method is not supported by the HTTP server)' ; ERR.REC<2> = 'Invalid HTTP method' ; GOSUB WRITE.ERR.LOG
            END CASE
            EMAIL.OUT<6,-1>=' '
            EMAIL.OUT<6,-1>=@VM:MAX.TRIES:' previous attempts to connect were made before changing the URL'
            EMAIL.OUT<6,-1>='_________________________________________________________ '
            SEND.EMAIL=1
         END
      END

      RETURN

*************************************************************************
CREATE.TDIN:* (Multi-Lines for Weights > MAX.DISC.WEIGHT)
*************************************************************************
      BILLS=DCOUNT(DIN,@AM)
      TDIN=''                            ; * RWXL DIN
      SAVE.TDIN = ''
      FOR BC = 1 TO BILLS
         LINE=DIN<BC>
         BILL.WEIGHT=SUM(LINE<1,5>)
         IF BILL.WEIGHT > MAX.DISC.WEIGHT THEN
            TEMP.LINE=LINE               ; * To Save Orig, Dest, Tariff, Eff Date, Factor
            DET.TIMES=DCOUNT(LINE<1,4>,@SVM)       ; * Number of Classes
            FOR DET = 1 TO DET.TIMES
               TEMP.LINE<1,4>=LINE<1,4,DET>        ; * Class
               TEMP.LINE<1,5>=MAX.DISC.WEIGHT
               TEMP.LINE<1,10>=BC        ; * Attribute of DIN Source
               TEMP.LINE<1,11>=DET       ; * Value of DIN Source
               TEMP.LINE<1,12>='Y'       ; * Perform the Weight * Rate Extension
               T.LINE = TEMP.LINE
               T.LINE<1,10> = ''
               IF SAVE.TDIN # T.LINE THEN
                  TDIN<-1>=TEMP.LINE
                  SAVE.TDIN = T.LINE
               END
            NEXT DET
         END ELSE
            LINE<1,10>=BC                ; * Attribute of DIN that this bill comes from
            LINE<1,12>='N'               ; * Don't Perform the Weight * Rate Extension
            T.LINE = LINE
            T.LINE<1,10> = ''
            IF SAVE.TDIN # T.LINE THEN
               TDIN<-1>=LINE
               SAVE.TDIN = T.LINE
            END
         END
      NEXT BC

      RETURN

*************************************************************************
SETUP.REQUEST.REQUIREMENTS:
*************************************************************************
      * Get Bill
      BILL=DIN<BC>
      PRO=BILL<1,1>
      DTL.CNT=DCOUNT(BILL<1,5>,@SVM)

      * Zip Substitutions
      GOSUB LOAD.SUB.ZIP
      ORIG.ZIP=BILL<1,2>
      LOCATE ORIG.ZIP IN CHK.ZIP<1> SETTING OZPOS THEN
         ORIG.ZIP=SUB.ZIP<1,OZPOS>
      END
      DEST.ZIP=BILL<1,3>
      LOCATE DEST.ZIP IN CHK.ZIP<1> SETTING DZPOS THEN
         DEST.ZIP=SUB.ZIP<1,DZPOS>
      END

      * Set Country Code
      READV ORIG.COUNTRY FROM ZIPS, ORIG.ZIP, 3 ELSE
         IF NUM(ORIG.ZIP[1,1]) THEN
            ORIG.COUNTRY = 'US'
         END ELSE
            ORIG.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE ORIG.COUNTRY = 'US'
            ORIG.COUNTRY = 'USA'
         CASE ORIG.COUNTRY = 'CA'
            ORIG.COUNTRY = 'CAN'
         CASE ORIG.COUNTRY = 'MX'
            ORIG.COUNTRY = 'MEX'
      END CASE
      READV DEST.COUNTRY FROM ZIPS, DEST.ZIP, 3 ELSE
         IF NUM(DEST.ZIP[1,1]) THEN
            DEST.COUNTRY = 'US'
         END ELSE
            DEST.COUNTRY = 'CAN'
         END
      END
      BEGIN CASE
         CASE DEST.COUNTRY = 'US'
            DEST.COUNTRY = 'USA'
         CASE DEST.COUNTRY = 'CA'
            DEST.COUNTRY = 'CAN'
         CASE DEST.COUNTRY = 'MX'
            DEST.COUNTRY = 'MEX'
      END CASE

      * Tariff Data
      TARIFF.NAME=BILL<1,7>
      LEN.TARIFF.NAME=LEN(TARIFF.NAME)
      IF TARIFF.NAME[LEN.TARIFF.NAME - 1, 2] = 'XL' THEN
         TARIFF.NAME=TARIFF.NAME[1, LEN.TARIFF.NAME - 2]
      END

*      LOCATE(TARIFF.NAME,TARIFF.LIST,1;TPOS) THEN ; * NKH01
*         RWS.TARIFF=TARIFF.LIST<2,TPOS>           ; * NKH01
*      END ELSE                                    ; * NKH01
      RWS.TARIFF=TARIFF.NAME
*      END                                         ; * NKH01

      TARIFF.EFF.DT=BILL<1,8>'D4/'
      TARIFF.EFF.DT=TARIFF.EFF.DT[7, 4]:TARIFF.EFF.DT[1, 2]:TARIFF.EFF.DT[4, 2]
      TARIFF.ADJ.FACTOR=BILL<1,9>
      TARIFF.ADJ.FACTOR = TARIFF.ADJ.FACTOR / 1000000

      * Update Tariff Activity
      T.VIN = ''
      T.VIN<1> = PROG.NAME
      T.VIN<2> = RWS.TARIFF
      T.VIN<3> = TARIFF.EFF.DT
      T.VOUT = ''
      CALL UPD.TARIFF.ACTIVITY(T.VIN,T.VOUT)

      VOUT<4> = RWS.TARIFF
      VOUT<5> = TARIFF.EFF.DT

      RETURN

*************************************************************************
PROCESS.REQUEST:* Unsecured request
*************************************************************************
      * Clear the http default header
      stat = setHTTPDefault("HEADERS","")
      stat = setHTTPDefault("HEADERS","Connection":@VM:"close")
******
      
       **********
      * Set SOAP request Content
      STATUS = soapSetRequestContent(SoapReq, XML.REQUEST, 1)

      IF STATUS # 0 THEN
         EMAIL.OUT<6,-1>=@VM:'Command: soapSetRequestContent' ; ERR.REC<1> = 'soapSetRequestContent '
         SEND.EMAIL=1
      END

      BEGIN CASE
         CASE STATUS = 0
         CASE STATUS = 1
            EMAIL.OUT<6,-1>=@VM:'Error: Invalid Request Handle' ; ERR.REC<2> = 'Invalid Request Handle' ; GOSUB WRITE.ERR.LOG
         CASE 1
            EMAIL.OUT<6,-1>=@VM:'Error: Undefined Error' ; ERR.REC<2> = 'Undefined Error' ; GOSUB WRITE.ERR.LOG
      END CASE

      * Submit the request and get the response - Try mutiple times before emailing error and changing URL
      PROCESS.TRIES = 0
      LOOP
         STATUS = SOAPSubmitRequest(SoapReq,SOAP.TIMEOUT,RESPONSE.HEADERS,RESPONSE.DATA,SOAP.STATUS)
*STATUS=1
         PROCESS.TRIES += 1
         BEGIN CASE
            CASE STATUS = 0
               PROCESS.TRIES = MAX.PROCESS.TRIES
               RESPONSE.RETURNED = 1
               READV REQUEST.FAIL FROM CONTROL, 'RWXML', 16 ELSE REQUEST.FAIL = 0
               IF REQUEST.FAIL = 1 THEN
                  REQUEST.FAIL = 0
                  WRITEV REQUEST.FAIL ON CONTROL, 'RWXML', 16
                  GOSUB SEND.REQ.RECOVER.EMAIL
               END
            CASE STATUS # 0 AND PROCESS.TRIES # MAX.PROCESS.TRIES
               SLEEP 1
            CASE 1
               SLEEP 1
               IF NOT(REQUEST.FAIL) THEN GOSUB CREATE.EMAIL
               RETURN
         END CASE
      UNTIL PROCESS.TRIES = MAX.PROCESS.TRIES
      REPEAT

      RETURN

*************************************************************************
CREATE.EMAIL:* Creates email if there was an error
*************************************************************************
      IF STATUS # '0' AND PROCESS.TRIES = MAX.PROCESS.TRIES THEN
         * Send email letting IT know the URL reference has been changed in CONTROL, RWXML
         EMAIL.OUT<6,-1>=@VM:'Cannot connect to SMC Rateware web-service on URL: '
         EMAIL.OUT<6,-1>=@VM:URL
         EMAIL.OUT<6,-1> = ' '
         URL.TO.USE = NEXT.URL
         BEGIN CASE
            CASE URL.TO.USE = 1
               URL = URL1
               NEXT.URL = 2
               URL.CHG = URL1
            CASE URL.TO.USE = 2
               URL = URL2
               NEXT.URL = 3
               URL.CHG = URL2
            CASE URL.TO.USE = 3
               URL = URL3
               NEXT.URL = 1
               URL.CHG = URL3
         END CASE
         * Update the URL in the CONTROL file, RWXML record
         WRITEV URL.TO.USE ON CONTROL, 'RWXML', 1
         URL.CHANGED = 1
         EMAIL.OUT<6,-1>=@VM:'URL changed to: '
         EMAIL.OUT<6,-1>=@VM:URL.CHG
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>=@VM:MAX.PROCESS.TRIES:' previous attempts to process the request were made before changing the URL'
         EMAIL.OUT<6,-1>=' '
         SEND.EMAIL=1
      END

      IF STATUS # '0' THEN
         EMAIL.OUT<6,-1> = @VM:'Web Service Method: ':WEB.SERVICE ; ERR.REC<3> = WEB.SERVICE
         EMAIL.OUT<6,-1> = @VM:'Command: SOAPSubmitRequest' ; ERR.REC<1> = 'SOAPSubmitRequest'
         SEND.EMAIL=1
      END

      BEGIN CASE
         CASE STATUS = 0
         CASE STATUS = 1
            EMAIL.OUT<6,-1>=@VM:'Error: Invalid Request Handle' ; ERR.REC<2> = 'Invalid Request Handle' ; GOSUB WRITE.ERR.LOG
         CASE STATUS = 2
            EMAIL.OUT<6,-1>=@VM:'Error: Timed Out' ; ERR.REC<2> = 'Timed Out' ; GOSUB WRITE.ERR.LOG
         CASE STATUS = 3
            EMAIL.OUT<6,-1>=@VM:'Error: Network Connectivity Error Occurred' ; ERR.REC<2> = 'Network Connectivity Error Occurred' ; GOSUB WRITE.ERR.LOG
         CASE STATUS = 4
            EMAIL.OUT<6,-1>=@VM:'Error: Other Error' ; ERR.REC<2> = 'Other Error' ; GOSUB WRITE.ERR.LOG
         CASE 1
            EMAIL.OUT<6,-1>=@VM:'Error: Undefined Error' ; ERR.REC<2> = 'Undefined Error' ; GOSUB WRITE.ERR.LOG
      END CASE

      IF STATUS # 0 THEN
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>='Client: ':VIN<3>
         EMAIL.OUT<6,-1>='Carrier: ':VIN<4>
         EMAIL.OUT<6,-1>='Class: ':DIN<1,4>
         EMAIL.OUT<6,-1>='Tariff: ':DIN<1,7>
         EMAIL.OUT<6,-1>='Eff Date: ':OCONV(DIN<1,8>,'D4/')
         EMAIL.OUT<6,-1>='Factor: ':OCONV(DIN<1,9>,'MD4')
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>="REQUEST"
         EMAIL.OUT<6,-1>= XML.REQUEST
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>="RESPONSE"
         EMAIL.OUT<6,-1>= RESPONSE.DATA
         EMAIL.OUT<6,-1>=' '
      END

      REQUEST.FAIL.COUNT += 1

      RETURN

************************************************************************
SEND.REQ.RECOVER.EMAIL:
************************************************************************
      EMAIL.OUT<6,-1>='Process Failure Recovered'
      EMAIL.OUT<6,-1>=URL
      EMAIL.RECOVER = 1

      GOSUB SEND.EMAIL

      RETURN

************************************************************************
SEND.CONNECT.RECOVER.EMAIL:
************************************************************************
      EMAIL.OUT<6,-1>='Connection Failure Recovered'
      EMAIL.OUT<6,-1>=URL
      EMAIL.RECOVER = 1

      GOSUB SEND.EMAIL

      RETURN

************************************************************************
BUILD.LTL.RATE.SHIPMENT:
************************************************************************
      XML.REQUEST = ''
      XML.REQUEST := '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://webservices.smc.com" xmlns:web1="http://web.ltl.smc.com">'
      XML.REQUEST := '<soapenv:Header>'
      XML.REQUEST := '<web:AuthenticationToken>'
      XML.REQUEST := '<web:licenseKey>':SMC.WEB.LICENSE.KEY:'</web:licenseKey>'
      XML.REQUEST := '<web:password>':SMC.WEB.PASSWORD:'</web:password>'
      XML.REQUEST := '<web:username>':SMC.WEB.USERNAME:'</web:username>'
      XML.REQUEST := '</web:AuthenticationToken>'
      XML.REQUEST := '</soapenv:Header>'
      XML.REQUEST := '<soapenv:Body>'
      XML.REQUEST := '<web:LTLRateShipment>'
      XML.REQUEST := '<web:LTLRateShipmentRequest>'
      XML.REQUEST := '<web1:destinationCountry>':DEST.COUNTRY:'</web1:destinationCountry>'
      XML.REQUEST := '<web1:destinationPostalCode>':DEST.ZIP:'</web1:destinationPostalCode>'
      XML.REQUEST := '<web1:details>'
      FOR DC = 1 TO DTL.CNT
         XML.REQUEST := '<web1:LTLRequestDetail>'
         XML.REQUEST := '<web1:nmfcClass>':BILL<1, 4, DC>:'</web1:nmfcClass>'
         XML.REQUEST := '<web1:weight>':BILL<1, 5, DC>:'</web1:weight>'
         XML.REQUEST := '</web1:LTLRequestDetail>'
      NEXT DC
      XML.REQUEST := '</web1:details>'
      XML.REQUEST := '<web1:originCountry>':ORIG.COUNTRY:'</web1:originCountry>'
      XML.REQUEST := '<web1:originPostalCode>':ORIG.ZIP:'</web1:originPostalCode>'
      IF TARIFF.ADJ.FACTOR+1#"1" THEN
         XML.REQUEST := '<web1:rateAdjustmentFactor>':TARIFF.ADJ.FACTOR:'</web1:rateAdjustmentFactor>'
      END
      XML.REQUEST := '<web1:shipmentDateCCYYMMDD>':TARIFF.EFF.DT:'</web1:shipmentDateCCYYMMDD>'
      XML.REQUEST := '<web1:tariffName>':RWS.TARIFF:'</web1:tariffName>'
      XML.REQUEST := '</web:LTLRateShipmentRequest>'
      XML.REQUEST := '</web:LTLRateShipment>'
      XML.REQUEST := '</soapenv:Body>'
      XML.REQUEST := '</soapenv:Envelope>'

      RETURN

************************************************************************
PARSE.LTL.RATE.SHIPMENT:
************************************************************************
      IF USER = EMAIL.XML AND USER # '' THEN                  ; * NKH03
         EMAIL.OUT<5>='XML email for research and testing'     ; * NKH03
         EMAIL.OUT<6,-1>="REQUEST"
         EMAIL.OUT<6,-1>=XML.REQUEST
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>="RESPONSE"
         EMAIL.OUT<6,-1>= RESPONSE.DATA
         GOSUB SEND.EMAIL
      END

      RESULTS.DTL = RESPONSE.DATA
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<soap:Body>' ,'')
      RESULTS.DTL = CHANGE(RESULTS.DTL, ' xmlns="http://web.ltl.smc.com"', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, ' xsi:nil="true"', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<ns1:LTLRateShipmentResponse xmlns:ns1="http://webservices.smc.com">', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '<ns1:LTLRateShipmentResponse>', '<LTLRateShipmentResponse>', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</ns1:LTLRateShipmentResponse>', '</LTLRateShipmentResponse>', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, ' xmlns:ns1="http://webservices.smc.com"', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</LTLRateShipmentResponse>', '', 99, 2)
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</soap:Body>', '')
      RESULTS.DTL = CHANGE(RESULTS.DTL, '</soap:Envelope>', '')

      NODE.VALUE = ''
      RESP='' ; * GRB01
      RTN.DTL.REC='' ; * GRB01
      errCode = ''

      RESULTS.DTL.CNT = (COUNT(RESULTS.DTL, 'LTLResponseDetail')) / 2

      STAT.VAL = 'LTLRateShipment Main Document'
      STATUS = XDOMOpen(RESULTS.DTL, XML.FROM.STRING, MYDOM)

      STAT.VAL = 'LTLRateShipmentResponse'
      STATUS = XDOMLocate(MYDOM, 'LTLRateShipmentResponse',"",LTL.RATE.SHIPMENT.RESPONSE.HANDLE)

      STAT.VAL = 'LHGrossCharge'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 1, XDOM.ELEMENT.NODE, LH.GROSS.CHARGE.HANDLE)
      STATUS = XDOMGetNodeVAlue(LH.GROSS.CHARGE.HANDLE, NODE.VALUE) ; STATUS = '58'
      RESP<1> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'LTL_Surcharge'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 2, XDOM.ELEMENT.NODE, LTL.SURCHARGE.HANDLE)
      STATUS = XDOMGetNodeVAlue(LTL.SURCHARGE.HANDLE, NODE.VALUE)
      RESP<2> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'RBNO'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 3, XDOM.ELEMENT.NODE, RBNO.HANDLE)
      STATUS = XDOMGetNodeVAlue(RBNO.HANDLE, NODE.VALUE)
      RESP<3> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'TL_Surcharge'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 4, XDOM.ELEMENT.NODE, TL.SURCHARGE.HANDLE)
      STATUS = XDOMGetNodeVAlue(TL.SURCHARGE.HANDLE, NODE.VALUE)
      RESP<4> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'absoluteMCFloor'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 5, XDOM.ELEMENT.NODE, ABSOLUTE.MC.FLOOR.HANDLE)
      STATUS = XDOMGetNodeVAlue(ABSOLUTE.MC.FLOOR.HANDLE, NODE.VALUE)
      RESP<5> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'actualWgt'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 6, XDOM.ELEMENT.NODE, ACTUAL.WGT.HANDLE)
      STATUS = XDOMGetNodeVAlue(ACTUAL.WGT.HANDLE, NODE.VALUE)
      RESP<6> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'billedWgt'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 7, XDOM.ELEMENT.NODE, BILLED.WGT.HANDLE)
      STATUS = XDOMGetNodeVAlue(BILLED.WGT.HANDLE, NODE.VALUE)
      RESP<7> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'deficitCharge'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 8, XDOM.ELEMENT.NODE, DEFICIT.CHARGE.HANDLE)
      STATUS = XDOMGetNodeVAlue(DEFICIT.CHARGE.HANDLE, NODE.VALUE)
      RESP<8> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'deficitRate'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 9, XDOM.ELEMENT.NODE, DEFICIT.RATE.HANDLE)
      STATUS = XDOMGetNodeVAlue(DEFICIT.RATE.HANDLE, NODE.VALUE)
      RESP<9> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'deficitWeight'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 10, XDOM.ELEMENT.NODE, DEFICIT.WEIGHT.HANDLE)
      STATUS = XDOMGetNodeVAlue(DEFICIT.WEIGHT.HANDLE, NODE.VALUE)
      RESP<10> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'destinationCity'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 11, XDOM.ELEMENT.NODE, DESTINATION.CITY.HANDLE)
      STATUS = XDOMGetNodeVAlue(DESTINATION.CITY.HANDLE, NODE.VALUE)
      RESP<11> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'destinationCountry'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 12, XDOM.ELEMENT.NODE, DESTINATION.COUNTRY.HANDLE)
      STATUS = XDOMGetNodeVAlue(DESTINATION.COUNTRY.HANDLE, NODE.VALUE)
      RESP<12> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'destinationPostalCode'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 13, XDOM.ELEMENT.NODE, DESTINATION.POSTAL.CODE.HANDLE)
      STATUS = XDOMGetNodeVAlue(DESTINATION.POSTAL.CODE.HANDLE, NODE.VALUE)
      RESP<13> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'destinationState'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 14, XDOM.ELEMENT.NODE, DESTINATION.STATE.HANDLE)
      STATUS = XDOMGetNodeVAlue(DESTINATION.STATE.HANDLE, NODE.VALUE)
      RESP<14> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'details'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 15, XDOM.ELEMENT.NODE, DETAILS.HANDLE)

      FOR X = 1 TO RESULTS.DTL.CNT
         STAT.VAL = 'LTLResponseDetail'
         STATUS = XDOMLocateNode(DETAILS.HANDLE, XDOM.CHILD, X, XDOM.ELEMENT.NODE, LTL.RESPONSE.DETAIL.HANDLE)

         STAT.VAL = 'charge'
         STATUS = XDOMLocateNode(LTL.RESPONSE.DETAIL.HANDLE, XDOM.CHILD, 1, XDOM.ELEMENT.NODE, CHARGE.HANDLE)
         STATUS = XDOMGetNodeVAlue(CHARGE.HANDLE, NODE.VALUE)
         DTL.CHARGE = OCONV(ICONV(NODE.VALUE, 'MD2') * 10, 'MD3')
         TEMP.ARRAY<15> = DTL.CHARGE
         NODE.VALUE = ''

         STAT.VAL = 'error'
         STATUS = XDOMLocateNode(LTL.RESPONSE.DETAIL.HANDLE, XDOM.CHILD, 2, XDOM.ELEMENT.NODE, ERROR.HANDLE)
         STATUS = XDOMGetNodeVAlue(ERROR.HANDLE, NODE.VALUE)
         TEMP.ARRAY<16> = NODE.VALUE ; NODE.VALUE = ''

         STAT.VAL = 'nmfcClass'
         STATUS = XDOMLocateNode(LTL.RESPONSE.DETAIL.HANDLE, XDOM.CHILD, 3, XDOM.ELEMENT.NODE, NMFC.CLASS.HANDLE)
         STATUS = XDOMGetNodeVAlue(NMFC.CLASS.HANDLE, NODE.VALUE)
         TEMP.ARRAY<17> = NODE.VALUE ; NODE.VALUE = ''

         STAT.VAL = 'rate'
         STATUS = XDOMLocateNode(LTL.RESPONSE.DETAIL.HANDLE, XDOM.CHILD, 4, XDOM.ELEMENT.NODE, RATE.HANDLE)
         STATUS = XDOMGetNodeVAlue(RATE.HANDLE, NODE.VALUE)
         DTL.RATE = OCONV(ICONV(NODE.VALUE, 'MD2') * 10, 'MD3')
         TEMP.ARRAY<18> = DTL.RATE
         NODE.VALUE = ''

         STAT.VAL = 'weight'
         STATUS = XDOMLocateNode(LTL.RESPONSE.DETAIL.HANDLE, XDOM.CHILD, 5, XDOM.ELEMENT.NODE, WEIGHT.HANDLE)
         STATUS = XDOMGetNodeVAlue(WEIGHT.HANDLE, NODE.VALUE)
         TEMP.ARRAY<19> = NODE.VALUE ; NODE.VALUE = ''

         * LTLResponseDetail end

         FOR R = 15 TO 19
            RESP<R,RESP.CNT> = TEMP.ARRAY<R>
         NEXT R
         RESP.CNT+=1

         RTN.DTL.REC := DTL.RATE 'MR%7':DTL.CHARGE 'MR%9'

      NEXT X

      * details end

      STAT.VAL = 'discountAmount'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 16, XDOM.ELEMENT.NODE, DISCOUNT.AMOUNT.HANDLE)
      STATUS = XDOMGetNodeVAlue(DISCOUNT.AMOUNT.HANDLE, NODE.VALUE)
      RESP<20> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'discountApplication'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 17, XDOM.ELEMENT.NODE, DISCOUNT.APPLICATION.HANDLE)
      STATUS = XDOMGetNodeVAlue(DISCOUNT.APPLICATION.HANDLE, NODE.VALUE)
      RESP<21> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'discountPctUsed'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 18, XDOM.ELEMENT.NODE, DISCOUNT.PCT.USED.HANDLE)
      STATUS = XDOMGetNodeVAlue(DISCOUNT.PCT.USED.HANDLE, NODE.VALUE)
      RESP<22> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'effectiveDate'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 19, XDOM.ELEMENT.NODE, EFFECTIVE.DATE.HANDLE)
      STATUS = XDOMGetNodeVAlue(EFFECTIVE.DATE.HANDLE, NODE.VALUE)
      RESP<23> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'errorCode'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 20, XDOM.ELEMENT.NODE, ERROR.CODE.HANDLE)
      STATUS = XDOMGetNodeVAlue(ERROR.CODE.HANDLE, NODE.VALUE)
      RESP<24> = NODE.VALUE ; NODE.VALUE = ''
*RESP<24>=32
      IF RESP<24> # 0 THEN
         READ RWXL.SMC.ERRORS.REC FROM RWXL.SMC.ERRORS, RESP<24> THEN
            VOUT<1>=RESP<24>
            SMC.ERROR.CODE=RESP<24>
         END
      END

      STAT.VAL = 'mcDiscount'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 21, XDOM.ELEMENT.NODE, MC.DISCOUNT.HANDLE)
      STATUS = XDOMGetNodeVAlue(MC.DISCOUNT.HANDLE, NODE.VALUE)
      RESP<25> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'minimumCharge'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 22, XDOM.ELEMENT.NODE, MINIMUM.CHARGE.HANDLE)
      STATUS = XDOMGetNodeVAlue(MINIMUM.CHARGE.HANDLE, NODE.VALUE)
      RESP<26> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'orgDestToGateWayPointFlag'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 23, XDOM.ELEMENT.NODE, ORG.DEST.TO.GATE.WAY.POINT.FLAG.HANDLE)
      STATUS = XDOMGetNodeVAlue(ORG.DEST.TO.GATE.WAY.POINT.FLAG.HANDLE, NODE.VALUE)
      RESP<27> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'originCity'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 24, XDOM.ELEMENT.NODE, ORIGIN.CITY.HANDLE)
      STATUS = XDOMGetNodeVAlue(ORIGIN.CITY.HANDLE, NODE.VALUE)
      RESP<28> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'OriginCountry'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 25, XDOM.ELEMENT.NODE, ORIGIN.COUNTRY.HANDLE)
      STATUS = XDOMGetNodeVAlue(ORIGIN.COUNTRY.HANDLE, NODE.VALUE)
      RESP<29> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'originPostalCode'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 26, XDOM.ELEMENT.NODE, ORIGIN.POSTAL.CODE.HANDLE)
      STATUS = XDOMGetNodeVAlue(ORIGIN.POSTAL.CODE.HANDLE, NODE.VALUE)
      RESP<30> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'originState'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 27, XDOM.ELEMENT.NODE, ORIGIN.STATE.HANDLE)
      STATUS = XDOMGetNodeVAlue(ORIGIN.STATE.HANDLE, NODE.VALUE)
      RESP<31> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'rateAdjustmentFactor'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 28, XDOM.ELEMENT.NODE, RATE.ADJUSTMENT.FACTOR.HANDLE)
      STATUS = XDOMGetNodeVAlue(RATE.ADJUSTMENT.FACTOR.HANDLE, NODE.VALUE)
      RESP<32> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'rateApplication'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 29, XDOM.ELEMENT.NODE, RATE.APPLICATION.HANDLE)
      STATUS = XDOMGetNodeVAlue(RATE.APPLICATION.HANDLE, NODE.VALUE)
      RESP<33> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'shipmentDate'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 30, XDOM.ELEMENT.NODE, SHIPMENT.DATE.HANDLE)
      STATUS = XDOMGetNodeVAlue(SHIPMENT.DATE.HANDLE, NODE.VALUE)
      RESP<34> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'shipmentID'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 31, XDOM.ELEMENT.NODE, SHIPMENT.ID.HANDLE)
      STATUS = XDOMGetNodeVAlue(SHIPMENT.ID.HANDLE, NODE.VALUE)
      RESP<35> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'stopAlternateWeight'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 32, XDOM.ELEMENT.NODE, STOP.ALTERNATE.WEIGHT.HANDLE)
      STATUS = XDOMGetNodeVAlue(STOP.ALTERNATE.WEIGHT.HANDLE, NODE.VALUE)
      RESP<36> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'suffix'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 33, XDOM.ELEMENT.NODE, SUFFIX.HANDLE)
      STATUS = XDOMGetNodeVAlue(SUFFIX.HANDLE, NODE.VALUE)
      RESP<37> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'surchargeAmount'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 34, XDOM.ELEMENT.NODE, SURCHARGE.AMOUNT.HANDLE)
      STATUS = XDOMGetNodeVAlue(SURCHARGE.AMOUNT.HANDLE, NODE.VALUE)
      RESP<38> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'surchargeApplication'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 35, XDOM.ELEMENT.NODE, SURCHARGE.APPLICATION.HANDLE)
      STATUS = XDOMGetNodeVAlue(SURCHARGE.APPLICATION.HANDLE, NODE.VALUE)
      RESP<39> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'surchargePercentUsed'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 36, XDOM.ELEMENT.NODE, SURCHARGE.PERCENT.USED.HANDLE)
      STATUS = XDOMGetNodeVAlue(SURCHARGE.PERCENT.USED.HANDLE, NODE.VALUE)
      RESP<40> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'tariffName'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 37, XDOM.ELEMENT.NODE, TARIFF.NAME.HANDLE)
      STATUS = XDOMGetNodeVAlue(TARIFF.NAME.HANDLE, NODE.VALUE)
      RESP<41> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'tblno'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 38, XDOM.ELEMENT.NODE, TBLNO.HANDLE)
      STATUS = XDOMGetNodeVAlue(TBLNO.HANDLE, NODE.VALUE)
      RESP<42> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'totalCharge'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 39, XDOM.ELEMENT.NODE, TOTAL.CHARGE.HANDLE)
      STATUS = XDOMGetNodeVAlue(TOTAL.CHARGE.HANDLE, NODE.VALUE)
      RESP<43> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'useDiscounts'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 40, XDOM.ELEMENT.NODE, USE.DISCOUNTS.HANDLE)
      STATUS = XDOMGetNodeVAlue(USE.DISCOUNTS.HANDLE, NODE.VALUE)
      RESP<44> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'useSingleShipmentCharges'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 41, XDOM.ELEMENT.NODE, USE.SINGLE.SHIPMENT.CHARGES.HANDLE)
      STATUS = XDOMGetNodeVAlue(USE.SINGLE.SHIPMENT.CHARGES.HANDLE, NODE.VALUE)
      RESP<45> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'useMinimumChargeFloor'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 42, XDOM.ELEMENT.NODE, USE.MINIMUM.CHARGE.FLOOR.HANDLE)
      STATUS = XDOMGetNodeVAlue(USE.MINIMUM.CHARGE.FLOOR.HANDLE, NODE.VALUE)
      RESP<46> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_1'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 43, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.1.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.1.HANDLE, NODE.VALUE)
      RESP<47> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_10'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 44, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.10.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.10.HANDLE, NODE.VALUE)
      RESP<48> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_11'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 45, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.11.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.11.HANDLE, NODE.VALUE)
      RESP<49> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_2'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 46, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.2.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.2.HANDLE, NODE.VALUE)
      RESP<50> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_3'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 47, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.3.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.3.HANDLE, NODE.VALUE)
      RESP<51> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_4'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 48, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.4.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.4.HANDLE, NODE.VALUE)
      RESP<52> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_5'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 49, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.5.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.5.HANDLE, NODE.VALUE)
      RESP<53> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_6'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 50, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.6.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.6.HANDLE, NODE.VALUE)
      RESP<54> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_7'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 51, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.7.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.7.HANDLE, NODE.VALUE)
      RESP<55> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_8'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 52, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.8.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.8.HANDLE, NODE.VALUE)
      RESP<56> = NODE.VALUE ; NODE.VALUE = ''

      STAT.VAL = 'weightBreak_Discount_9'
      STATUS = XDOMLocateNode(LTL.RATE.SHIPMENT.RESPONSE.HANDLE, XDOM.CHILD, 53, XDOM.ELEMENT.NODE, WEIGHT.BREAK.DISOUNT.9.HANDLE)
      STATUS = XDOMGetNodeVAlue(WEIGHT.BREAK.DISOUNT.9.HANDLE, NODE.VALUE)
      RESP<57> = NODE.VALUE ; NODE.VALUE = ''

      * LTLRateShipmentResponse end

      * LTLRateShipment Main Document end

      RETURN

************************************************************************
CREATE.DOUT:* Return Results for calling program
************************************************************************
      BILLS=DCOUNT(DIN,@AM)
      DETAILS=''
      FACTOR='1000000'
      FACTOR.TOTAL.CHARGE=0
      FOR X = 1 TO DTL.CNT
         DETAIL=RTN.DTL.REC[((X-1)*16)+1,16]
         IF FACTOR="" THEN FACTOR="1000000"
         DETAIL.RATE=ICONV(TRIM(DETAIL[1,7]),'MR2')          ; * Detail Rate
         DETAIL.CHARGE=ICONV(TRIM(DETAIL[8,9]),'MR2')        ; * Detail Charge
         IF FACTOR=1000000 AND TDIN<BC,12>='N' THEN          ; * Take as Stated
            LINE.OUT<1,1,X>=DETAIL.RATE
            LINE.OUT<1,2,X>=DETAIL.CHARGE
         END ELSE
            FACTOR.DETAIL.RATE=OCONV(DETAIL.RATE*FACTOR/1000000,'MR0')
            LINE.OUT<1,1,X>=FACTOR.DETAIL.RATE
            WEIGHT=DIN<1,5,X>
            FACTOR.DETAIL.CHARGE=OCONV(WEIGHT*FACTOR.DETAIL.RATE/100,'MR0')
            LINE.OUT<1,2,X>=FACTOR.DETAIL.CHARGE
            FACTOR.TOTAL.CHARGE=SUM(LINE.OUT<1,2>)
         END
      NEXT X
      TOTAL.CHARGE=ICONV(TRIM(RESP<1>),'MR2')
      TARIFF.MINIMUM=ICONV(TRIM(RESP<26>),'MR2')
      IF FACTOR#1000000 THEN
         FACTOR.TARIFF.MINIMUM=ICONV(TARIFF.MINIMUM*FACTOR/1000000,'MR0')
      END
      DEFICIT.WEIGHT=TRIM(RESP<10>)+0
      BEGIN CASE
         CASE DEFICIT.WEIGHT > 0
            BILL.TYPE='DEFICIT'
            IF FACTOR=1000000 THEN
               BILL.CHARGE=TOTAL.CHARGE
            END ELSE
               BILL.CHARGE=FACTOR.TOTAL.CHARGE
            END
         CASE TOTAL.CHARGE < TARIFF.MINIMUM
            BILL.TYPE='MINIMUM'
            IF FACTOR=1000000 THEN
               BILL.CHARGE=TARIFF.MINIMUM
            END ELSE
               BILL.CHARGE=FACTOR.TARIFF.MINIMUM
            END
         CASE 1
            BILL.TYPE='ACTUAL'
            IF FACTOR=1000000 AND TDIN<BC,12>='N' THEN
               BILL.CHARGE=TOTAL.CHARGE
            END ELSE
               BILL.CHARGE=FACTOR.TOTAL.CHARGE
            END
      END CASE
      LINE.OUT<1,3>=BILL.TYPE

      IF TDIN<BC,12>='Y' THEN
         LINE.OUT<1,4>+=BILL.WEIGHT+0    ; * Billed Weight
      END ELSE
         LINE.OUT<1,4>=TRIM(RESP<7>)+0   ; * Billed Weight
      END
      LINE.OUT<1,5>=BILL.CHARGE
      DEFICIT.WEIGHT=TRIM(RESP<10>)+0    ; * Deficit Weight
      LINE.OUT<1,7>=DEFICIT.WEIGHT
      DEFICIT.RATE=TRIM(RESP<9> * 100)   ; * Deficit Rate
      IF FACTOR=1000000 THEN
         LINE.OUT<1,8>=DEFICIT.RATE
         LINE.OUT<1,9>=TRIM(RESP<8> * 100)         ; * Deficit Charge
      END ELSE
         FACTOR.DEFICIT.RATE=OCONV(DEFICIT.RATE*FACTOR/1000000,'MR0')
         FACTOR.DEFICIT.CHARGE=OCONV(FACTOR.DEFICIT.RATE*DEFICIT.WEIGHT/100,'MR0')
         LINE.OUT<1,5>+=FACTOR.DEFICIT.CHARGE
         LINE.OUT<1,8>=FACTOR.DEFICIT.RATE
         LINE.OUT<1,9>=FACTOR.DEFICIT.CHARGE
      END

      LINE.OUT<1,10> = ''
      IF SMC.ERROR.CODE # '0' THEN
         GOSUB CHECK.SMC.ERROR
         LINE.OUT<1,10> = MESSAGE
         IF LINE.OUT<1,10> = 0 THEN LINE.OUT<1,10> = ''
      END
      DOUT<-1>=LINE.OUT
      LINE.OUT='' ; * GRB01

      RETURN

************************************************************************
LOAD.SUB.ZIP:
************************************************************************
      CHK.ZIP=''
      SUB.ZIP=''
      READ ZIP.SUBST.ARRAY FROM F.TABLES, 'ZIP.SUBSTITUTIONS' THEN
         CHK.ZIP=ZIP.SUBST.ARRAY<1>
         SUB.ZIP=ZIP.SUBST.ARRAY<2>
      END

      RETURN

************************************************************************
SEND.EMAIL:
************************************************************************
      END.TIME = TIME()
      TIME.DIFF = END.TIME - BEG.TIME

      IF NOT(EMAIL.RECOVER) THEN
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>='Begin Time: ':OCONV(BEG.TIME,'MTHS')
         EMAIL.OUT<6,-1>='End Time: ':OCONV(END.TIME,'MTHS')
         EMAIL.OUT<6,-1>='Time Diff: ':TIME.DIFF
      END ELSE
         EMAIL.OUT<6,-1>='Time: ':OCONV(BEG.TIME,'MTHS')
      END
      EMAIL.RECOVER=0
      EVIN=EMAIL.OUT
      EVOUT=''
      IF NOT(SOAP.CONNECT.FAIL) THEN CALL SENDMAIL(EVIN,EVOUT)
      EMAIL.OUT<6>='User:':USER:' Date:':OCONV(DATE(),'D2/'):' Time:':OCONV(TIME(),'MTHS')
      EMAIL.OUT<6,-1>=' ':@VM
      SEND.EMAIL=0

      RETURN

************************************************************************
CHECK.SMC.ERROR:
************************************************************************
      MESSAGE = ""
      READ RWXL.SMC.ERROR.REC FROM RWXL.SMC.ERRORS, SMC.ERROR.CODE THEN
         IF RWXL.SMC.ERROR.REC<4> = 'SMC' THEN
            MESSAGE=SMC.ERROR.CODE:' ':RWXL.SMC.ERRORS.REC<1>
            LINE.OUT<1,1>='' ; LINE.OUT<1,2> = ''
         END ELSE
            MESSAGE='Contact AFS. SMC Error Code: ':SMC.ERROR.CODE
            LINE.OUT<1,1>='' ; LINE.OUT<1,2> = ''
         END
      END

      IF SMC.ERROR.CODE = '32' THEN
         EMAIL.OUT<5>='SMC Error Code 32 - Tariff Not Found'
         EMAIL.OUT<6,-1>='Client: ':VIN<3>
         EMAIL.OUT<6,-1>='Carrier: ':VIN<4>
         EMAIL.OUT<6,-1>='Date: ':OCONV(VIN<7>,'D2/')
         EMAIL.OUT<6,-1>='IOT: ':VIN<6>
         EMAIL.OUT<6,-1>='Orig Zip: ':ORIG.ZIP
         EMAIL.OUT<6,-1>='Dest Zip:' :DEST.ZIP
         EMAIL.OUT<6,-1>='Class: ':DIN<1,4>
         EMAIL.OUT<6,-1>='Weight: ':DIN<1,5>
         EMAIL.OUT<6,-1>='Tariff: ':DIN<1,7>
         EMAIL.OUT<6,-1>='Eff Date: ':OCONV(DIN<1,8>,'D4/')
         EMAIL.OUT<6,-1>='Factor: ':OCONV(DIN<1,9>,'MD4')
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>="REQUEST"
         EMAIL.OUT<6,-1>= XML.REQUEST
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>="RESPONSE"
         EMAIL.OUT<6,-1>= RESPONSE.DATA
         EMAIL.OUT<6,-1>=' '
         GOSUB SEND.EMAIL
         EMAIL.OUT<5>='Error with SMC Rateware Web-Service Rating Engine.'
      END

      RETURN

************************************************************************
WRITE.ERR.LOG:
************************************************************************
      ERR.KEY = PROG.NAME:'*':DATE():'*':TIME()
*      WRITE ERR.REC ON ERR.LOG, ERR.KEY
      ERR.REC = ''

      RETURN

