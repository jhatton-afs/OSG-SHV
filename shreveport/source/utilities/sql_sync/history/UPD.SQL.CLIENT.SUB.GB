      SUBROUTINE UPD.SQL.CLIENT.SUB(VIN,VOUT,CLIENT.REC)
***********************************************************************
* Program name : UPD.SQL.CLIENT.SUB
* Author       : Owen Holman
* Date written : January 2002
* Library      : FBBP
$* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* This program TO ADD, CHANGE OR DELETE ZIPS CODES
*
* Last updated by afs (AFSLOGISTICS\gbino) at 06:56:37 on 05/08/2019.
*
* Start modification history
* Mod nn  mm/dd/yy, init, req #, description
* 101211 - RLM01 - PROJECT 80 - Retrieve Account Manager ID from CLIENTS file instead of salesman file
* 061912 - JMK01 - Choose development SQL server if not production server AFS
* 012413 - JMK02 - SHV/SLC System Integration
* 012914 - JMK03 - SysAid#8461 - Get Freight Data Flag from Accuterm
* 120915 - DRF01 - SysAid 21364 - Add a GVL Client Flg from Accuterm
* 160816 - TAG01 - SysAid 26248 Add Multimode Flag from Accuterm
* 032117 - TAG02 - SysAid 27263 & 29533 - SLC Parcel and UPS MNS Flags
* 100917 - GRB01 - ME - Add CM extract flg
* 101717 - GRB02 - ME - Add sales force id flg
* End modification history
*
************************************************************************
*
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.CLIENT.SUB' ; UPL.VOUT = ''       ; * NPR_UPL 04/23/2010
      ****    CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010

* Include the ODBC definitions

$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01

      USER=VIN<1>
      CLIENT.ID=VIN<2>

      form = "T##########"
      dash = "----------"
      Expect = ""
      NULL=""
      EOL=CHAR(13):CHAR(10)
      ERROR.CNT=0
10:   ERRORS=''

      GOSUB SETUP.SQL

* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE

      SQL.CLIENT.ID = CLIENT.ID+0        ; * CLIENT NUMBER
      SQL.CLIENT.NAME = CLIENT.REC<2>[1,50]        ; * NAME
      SQL.CLIENT.ADDR = CLIENT.REC<3>[1,200]       ; * ADDRESS
      SQL.CLIENT.CITY = CLIENT.REC<4>[1,50]        ; * CITY
      SQL.CLIENT.ST = CLIENT.REC<5>[1,20]          ; * STATE
      SQL.CLIENT.ZIP = CLIENT.REC<6>[1,20]         ; * ZIP
      SQL.CLIENT.PHONE = CLIENT.REC<31>[1,20]      ; * PHONE
      IF NUM(CLIENT.REC<136>) THEN
         SQL.CLIENT.IQUOTE = OCONV(CLIENT.REC<136>+0,'MR2')  ; * THIRD PARTY QUOTE %
      END ELSE
         SQL.CLIENT.IQUOTE = CLIENT.REC<136>       ; * INBOUND QUOTE %
      END
      IF NUM(CLIENT.REC<137>) THEN
         SQL.CLIENT.OQUOTE = OCONV(CLIENT.REC<137>+0,'MR2')  ; * THIRD PARTY QUOTE %
      END ELSE
         SQL.CLIENT.OQUOTE = CLIENT.REC<137>       ; * INBOUND QUOTE %
      END
      IF NUM(CLIENT.REC<138>) THEN
         SQL.CLIENT.TQUOTE = OCONV(CLIENT.REC<138>+0,'MR2')  ; * THIRD PARTY QUOTE %
      END ELSE
         SQL.CLIENT.TQUOTE = CLIENT.REC<138>       ; * INBOUND QUOTE %
      END
      SQL.CLIENT.EMAILTO = CHANGE(CLIENT.REC<125>,@VM,'|')[1,100]      ; * EMAILTO
      SQL.CLIENT.EMAILCC = CHANGE(CLIENT.REC<126>,@VM,'|')[1,100]      ; * EMAILCC
      SQL.CLIENT.ATTN = CLIENT.REC<44>[1,50]       ; * BILLATTN
      SQL.CLIENT.CONTACT = CLIENT.REC<46>[1,50]    ; * CONTACT
      SQL.CLIENT.FAX = CLIENT.REC<45>[1,50]        ; * FAX
      SQL.CLIENT.STATUS = CLIENT.REC<30>#'I'       ; * CLIENT STATUS
      SQL.CLIENT.SLSREP = CLIENT.REC<114>+0        ; * CURRENT SALESMAN
      SQL.CLIENT.PARENT.ID = CLIENT.REC<147>+0     ; * PARENT ID
      SQL.CLIENT.EXP = CLIENT.REC<13>='Y'          ; * DOES CLIENT HAVE EXPENSE CODES
      SQL.CLIENT.LOG = CLIENT.REC<93>='Y'          ; * INDICATES THAT A CLIENT IS OR IS NOT A LOGISTICS CLIENT
      SQL.CLIENT.CREATE.DATE = CLIENT.REC<22>'D2/'           ; * DATE CREATED
      SQL.CLIENT.COLL.EMAILTO = CLIENT.REC<222>[1,100]       ; * COLLECTIONS EMAILTO
      SQL.CLIENT.COLL.EMAILCC = CLIENT.REC<223>[1,100]       ; * COLLECTIONS EMAILCC
      SQL.CLIENT.ALIAS = CHANGE(CLIENT.REC<226>,@VM,'|')[1,500]
      SQL.CLIENT.INIT.SLSREP = CLIENT.REC<114>+0   ; * INITIAL SALESREP
      SQL.CLIENT.AM = ''                 ; * ACCOUNT MANAGER

      SQL.CLIENT.AM = CLIENT.REC<264>    ; * RLM01

      IF CLIENT.REC<234>#'' THEN
         SQL.CLIENT.AGREE.DATE = CLIENT.REC<234>'D2/'
      END ELSE
         SQL.CLIENT.AGREE.DATE = CLIENT.REC<22>'D2/'
      END

      SQL.SLC.CLIENTCODE = CLIENT.REC<275>[1,10]   ; * JMK02
      SQL.SLC.FEDEXGRDGSR = CLIENT.REC<276>='Y'    ; * JMK02
      SQL.SLC.FEDEXEXPGSR = CLIENT.REC<277>='Y'    ; * JMK02
      SQL.SLC.FREIGHTCLIENT = CLIENT.REC<278>='Y'  ; * JMK02
      SQL.SLC.ACTIVERNCLIENT = CLIENT.REC<279>='Y'           ; * JMK02
      SQL.SLC.RATINGID = CLIENT.REC<280>[1,25]     ; * JMK02
      SQL.SLC.BILLFREQID = CLIENT.REC<281>[1,10]   ; * JMK02
      SQL.SLC.BILLTERMID = CLIENT.REC<282>[1,10]   ; * JMK02
      SQL.SLC.CUSTPO = CLIENT.REC<283>[1,25]       ; * JMK02
      SQL.SLC.ACCTREPID = CLIENT.REC<284>[1,10]    ; * JMK02
      SQL.SLC.PARENTRESELLER = CLIENT.REC<285>='Y'           ; * JMK02
      SQL.SLC.ACTIVELTLRN = CLIENT.REC<286>='Y'    ; * JMK02
      SQL.SLC.ACTIVEGLCODING = CLIENT.REC<287>='Y'           ; * JMK02
      SQL.SLC.FBOCLIENT = CLIENT.REC<288>='Y'      ; * JMK02
      SQL.SLC.KEYACCT = CLIENT.REC<289>='Y'        ; * JMK02
      SQL.SLC.UPSGRDGSR = CLIENT.REC<290>='Y'      ; * JMK02
      SQL.SLC.UPSAIRGSR = CLIENT.REC<291>='Y'      ; * JMK02
      SQL.SLC.FEDEXRATEAUDIT = CLIENT.REC<292>='Y'           ; * JMK02
      SQL.SLC.UPSRATEAUDIT = CLIENT.REC<293>='Y'   ; * JMK02
      SQL.SLC.FEDEXBILLFREQ = CLIENT.REC<294>[1,10]          ; * JMK02
      SQL.SLC.UPSBILLFREQ = CLIENT.REC<295>[1,10]  ; * JMK02
      SQL.SLC.ESTSAVINGSPCT = OCONV(CLIENT.REC<296>+0,'MR2')           ; * JMK02
      SQL.SLC.COMPID = CLIENT.REC<297>[1,10]       ; * JMK02
      SQL.SLC.COMPFEE = OCONV(CLIENT.REC<298>+0,'MR2')       ; * JMK02
      SQL.SLC.LOGICAFEE = OCONV(CLIENT.REC<299>+0,'MR2')     ; * JMK02
      SQL.SLC.COMPWKLYSAVINGS = OCONV(CLIENT.REC<300>+0,'MR2')         ; * JMK02
      SQL.SLC.PARENTID = CLIENT.REC<274>[1,10]     ; * JMK02
      SQL.SLC.FRT.DATA.FLG = CLIENT.REC<241>       ; * JMK03
      SQL.GVL.CLIENT.FLG = CLIENT.REC<304>         ; * DRF01
      SQL.MULTIMODE.FLG = CLIENT.REC<305>          ; * TAG01
* Begin TAG02
      SQL.SLC.PARCEL.FLG=CLIENT.REC<311>='Y'
      SQL.SLC.UPSMNS.FLG=CLIENT.REC<314>='Y'
      SQL.SLC.CM.FLG=CLIENT.REC<315>     ; * GRB01
      SQL.SLC.EST.BY=CLIENT.REC<302>     ; * GRB01
      SQL.SLC.SALESFORCEID=TRIM(CLIENT.REC<313>)   ; * GRB02
      * End TAG02
      GOSUB SEND.DATA

************************************************************
THE.END:***
************************************************************
*     End of program
*
* Now just clean up the environment and leave
*
      Fn = "SQLFreeStmt"
      STATUS = SQLFreeStmt(CLIENTENV, SQL.DROP)
      STMTMENV=CLIENTENV
      ENVSRC='CLIENT'
      GOSUB CKSTMTENV

      Fn = "SQLDisconnect"
      STATUS = SQLDisconnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeConnect"
      STATUS = SQLFreeConnect(CONENV)
      GOSUB CKCONENV

      Fn = "SQLFreeEnv"
      STATUS = SQLFreeEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1>='UPD.SQL.Group@afs.net'
            MVIN<4>='AFS_UPD.SQL.CLIENT.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:' ':CLIENT.REC<2>:' but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP
************************************************************
SETUP.SQL:*
************************************************************
* Create an ODBC environment & a connection environment. Use the
* SSQLSetConnectOption to specify the Operating system user ID and
* password.

      STATUS = SQLAllocEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLAllocConnect(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END
*
* Gather the data source name, userid and password for the server O/S and
* information for the DBMS at the server. The DBMS info is often also
* a user name and password, but not in all cases.
*

      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='PRODODS'             ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVODS'              ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* Establish a session to the specified data source
*
      Fn = "SQLConnect"
      STATUS = SQLConnect(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV
*
* Now allocate an SQL statement environment
* to be used for executing SQL statements
*
      Fn = "SQLAllocStmt"
      STATUS = SQLAllocStmt(CONENV,CLIENTENV)
      GOSUB CKCONENV
      RETURN
**********************************************************
SEND.DATA:
***********************************************************8
*
* Note that we are using parameter markers in the SQL statement to facilitate
* loading multiple rows of data efficiently
*

* Begin TAG02
      OPT.STR = STR(' ?,',62)            ; * GRB02
* End TAG02
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdClient (":OPT.STR:")}"  ; * 24 PLACEHOLDERS  ; * This comment is obsolescent. As of 12/10/15, it is 56.

      ROWNUM = 0
      Fn = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(CLIENTENV, 1, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 2, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.NAME) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 3, SQL.B.BASIC, SQL.VARCHAR, 200, 0, SQL.CLIENT.ADDR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 4, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.CITY) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 5, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.ST) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 6, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.ZIP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 7, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.PHONE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 8, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.IQUOTE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 9, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.OQUOTE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 10, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.TQUOTE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 11, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.EMAILTO) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 12, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.EMAILCC) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 13, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.ATTN) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 14, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.CONTACT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 15, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.FAX) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 16, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.CLIENT.STATUS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 17, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.SLSREP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 18, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.CLIENT.EXP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 19, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.CLIENT.LOG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 20, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.COLL.EMAILTO) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 21, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.COLL.EMAILCC) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 22, SQL.B.BASIC, SQL.VARCHAR, 500, 0, SQL.CLIENT.ALIAS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 23, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.PARENT.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 24, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.CREATE.DATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 25, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.INIT.SLSREP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 26, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.AM) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 27, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.AGREE.DATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 28, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.CLIENTCODE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 29, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FEDEXGRDGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 30, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FEDEXEXPGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 31, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FREIGHTCLIENT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV       ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 32, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.ACTIVERNCLIENT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 33, SQL.B.BASIC, SQL.VARCHAR, 25, 0, SQL.SLC.RATINGID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 34, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.BILLFREQID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 35, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.BILLTERMID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 36, SQL.B.BASIC, SQL.VARCHAR, 25, 0, SQL.SLC.CUSTPO) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV   ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 37, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.ACCTREPID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV          ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 38, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.PARENTRESELLER) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 39, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.ACTIVELTLRN) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 40, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.ACTIVEGLCODING) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 41, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FBOCLIENT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 42, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.KEYACCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV   ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 43, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.UPSGRDGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 44, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.UPSAIRGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 45, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FEDEXRATEAUDIT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 46, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.UPSRATEAUDIT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV        ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 47, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.FEDEXBILLFREQ) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 48, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.UPSBILLFREQ) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV        ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 49, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.ESTSAVINGSPCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 50, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.COMPID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV   ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 51, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.COMPFEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV  ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 52, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.LOGICAFEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV          ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 53, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.COMPWKLYSAVINGS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV    ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 54, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.PARENTID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 55, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FRT.DATA.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV        ; * JMK06
      STATUS = SQLSETPARAM(CLIENTENV, 56, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.GVL.CLIENT.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV          ; * DRF01
      STATUS = SQLSETPARAM(CLIENTENV, 57, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.MULTIMODE.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * TAG01
* Begin TAG02
      STATUS = SQLSETPARAM(CLIENTENV, 58, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.PARCEL.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 59, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.UPSMNS.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      * End TAG02

      STATUS = SQLSETPARAM(CLIENTENV, 60, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.CM.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV    ; * GRB01
      STATUS = SQLSETPARAM(CLIENTENV, 61, SQL.B.BASIC, SQL.VARCHAR, 5, 0, SQL.SLC.EST.BY) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV    ; * GRB01
      STATUS = SQLSETPARAM(CLIENTENV, 62, SQL.B.BASIC, SQL.VARCHAR, 6, 0, SQL.SLC.SALESFORCEID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV        ; * GRB02

      Fn = "SQLPrepare"
      STATUS = SQLPrepare(CLIENTENV, INST1)
      STMTENV=CLIENTENV
      ENVSRC='CLIENT'
      GOSUB CKSTMTENV
      Fn = "SQLExecute"
      STATUS = SQLExecute(CLIENTENV)
      STMTENV=CLIENTENV
      ENVSRC='CLIENT'
      GOSUB CKSTMTENV


      RETURN
************************************************************
CKCONENV:
************************************************************
      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND GREGB UPD.SQL.CLIENT.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
****         IF STATE GT "1000" AND USER = 'GBINO' THEN DEBUG
****         IF USER = 'GBINO' THEN
****            CRT STATE
****         END
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN
************************************************************
CKSTMTENV:
************************************************************
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND GREGB UPD.SQL.CLIENT.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
         IF STATE GT "1000" AND USER = 'GBINO' THEN DEBUG
         IF USER = 'GBINO' THEN
            CRT STATE
         END
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
