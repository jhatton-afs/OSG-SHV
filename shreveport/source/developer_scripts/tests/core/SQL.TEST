!
* Include the ODBC definitions
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H

      form = "T##########"
      dash = "----------"
      Expect = ""
      NULL=""
      EOL=CHAR(13):CHAR(10)
      ERROR.CNT=0
10:   ERRORS=''

      GOSUB SETUP.SQL

SETUP.SQL:*
!
* Create an ODBC environment & a connection environment. Use the
* SSQLSetConnectOption to specify the Operating system user ID and
* password.

      STATUS = SQLAllocEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         STOP
      END

      STATUS = SQLAllocConnect(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         STOP
      END

*
      SVR.NAME = "TEST"
*****      SVR.NAME = "AFS"
* information for the DBMS at the server. The DBMS info is often also
* a user name and password, but not in all cases.
      BEGIN CASE
         CASE SVR.NAME='AFS'
            SOURCE='PRODODS'
            UID="uv_sql"
            PWD="4@gAbreg"
         CASE 1
****            SOURCE='DEVODS'
SOURCE = 'DEVODS1'
            UID="uv_sql"
            PWD="4@gAbreg"
      END CASE
*
* Establish a session to the specified data source
*
      PRINT "Connecting to data source: ": SOURCE
      Fn = "SQLConnect"
      STATUS = SQLConnect(CONENV,SOURCE,UID,PWD)
      CRT STATUS
      DEBUG
      GOSUB CKCONENV
*
* Now allocate an SQL statement environment
* to be used for executing SQL statements
*
      Fn = "SQLAllocStmt"
      STATUS = SQLAllocStmt(CONENV,CLIENTENV)
      GOSUB CKCONENV

*
* Note that we are using parameter markers in the SQL statement to facilitate
* loading multiple rows of data efficiently
*
*     OPT.STR = STR(' ?,',27)            ; * JMK02
*     OPT.STR = STR(' ?,',54)            ; * JMK02 ; * JMK03
*     OPT.STR = STR(' ?,',55)            ; * JMK02 ; * JMK03  ; * DRF01
      OPT.STR = STR(' ?,',56)            ; * DRF01
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdClient (":OPT.STR:")}"  ; * 24 PLACEHOLDERS  ; * This comment is obsolescent. As of 12/10/15, it is 56.

      ROWNUM = 0
      Fn = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(CLIENTENV, 1, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 2, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.NAME) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 3, SQL.B.BASIC, SQL.VARCHAR, 200, 0, SQL.CLIENT.ADDR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 4, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.CITY) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 5, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.ST) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 6, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.ZIP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 7, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.PHONE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 8, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.IQUOTE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 9, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.OQUOTE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 10, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.TQUOTE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 11, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.EMAILTO) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 12, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.EMAILCC) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 13, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.ATTN) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 14, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.CONTACT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 15, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.CLIENT.FAX) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 16, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.CLIENT.STATUS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 17, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.SLSREP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 18, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.CLIENT.EXP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 19, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.CLIENT.LOG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 20, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.COLL.EMAILTO) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 21, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.CLIENT.COLL.EMAILCC) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 22, SQL.B.BASIC, SQL.VARCHAR, 500, 0, SQL.CLIENT.ALIAS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 23, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.PARENT.ID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 24, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.CREATE.DATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 25, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.INIT.SLSREP) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 26, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CLIENT.AM) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(CLIENTENV, 27, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CLIENT.AGREE.DATE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV

      STATUS = SQLSETPARAM(CLIENTENV, 28, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.CLIENTCODE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 29, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FEDEXGRDGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 30, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FEDEXEXPGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 31, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FREIGHTCLIENT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV       ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 32, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.ACTIVERNCLIENT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 33, SQL.B.BASIC, SQL.VARCHAR, 25, 0, SQL.SLC.RATINGID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 34, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.BILLFREQID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 35, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.BILLTERMID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 36, SQL.B.BASIC, SQL.VARCHAR, 25, 0, SQL.SLC.CUSTPO) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV   ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 37, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.ACCTREPID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV          ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 38, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.PARENTRESELLER) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 39, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.ACTIVELTLRN) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV         ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 40, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.ACTIVEGLCODING) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 41, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FBOCLIENT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 42, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.KEYACCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV   ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 43, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.UPSGRDGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 44, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.UPSAIRGSR) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 45, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FEDEXRATEAUDIT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 46, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.UPSRATEAUDIT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV        ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 47, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.FEDEXBILLFREQ) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 48, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.UPSBILLFREQ) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV        ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 49, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.ESTSAVINGSPCT) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV      ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 50, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.COMPID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV   ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 51, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.COMPFEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV  ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 52, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.LOGICAFEE) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV          ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 53, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.COMPWKLYSAVINGS) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV    ; * JMK02
      STATUS = SQLSETPARAM(CLIENTENV, 54, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.SLC.PARENTID) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV           ; * JMK02

      STATUS = SQLSETPARAM(CLIENTENV, 55, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.SLC.FRT.DATA.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV        ; * JMK06
      STATUS = SQLSETPARAM(CLIENTENV, 56, SQL.B.BASIC, SQL.VARCHAR, 1, 0, SQL.GVL.CLIENT.FLG) ; STMTENV=CLIENTENV ; GOSUB CKSTMTENV          ; * DRF01

      Fn = "SQLPrepare"
      STATUS = SQLPrepare(CLIENTENV, INST1)
      STMTENV=CLIENTENV
      ENVSRC='CLIENT'
      GOSUB CKSTMTENV

      RETURN

CKCONENV:

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.CLIENT.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            STOP
         END
      END
299:  *
      RETURN

CKSTMTENV:
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.CLIENT.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF Expect NE 0 AND STATE = Expect AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":Fn
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":Fn:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            STOP
         END
      END
399:  *
      RETURN
