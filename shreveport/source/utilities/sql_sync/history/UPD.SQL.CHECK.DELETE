SUBROUTINE UPD.SQL.CHECK.DELETE(VIN,VOUT,BILL.REC)
****************************************************
* Program name : UPD.SQL.CHECK.DELETE
* Author       : Greg Bino
* Date written : 06-06-2020
* Library      : FBBP
* COPYRIGHT (C) 2020 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* DELETE POSTED CHECKS
*
* Last updated by AFS (gbino) at 07:57:18 on 09/30/2020.
*
* Start modification history
* End modification history
*
*******************************************************      

      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.FBPYMT.SUB' ; UPL.VOUT = ''       
 ****     CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)      


* INCLUDE THE ODBC DEFINITIONS

$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK02
      SVR.NAME=SVR.VOUT<1>               ; * JMK02

      USER=VIN<1>
      CLIENT.ID=VIN<2>
      BILL.ID=VIN<3>
      CLEAR.DATE=VIN<4>
      SEQ=FIELD(BILL.ID,'*',3)
      IF SEQ#0 THEN RETURN
      LI.CODES=''
      LI.CODES<1>=VIN<5>
      LI.CODES<2>=VIN<6>

      FORM = "T##########"
      DASH = "----------"
      EXPECT = ""
      NULL=""
      TOT.NUM.BILLS=0

      ERROR.CNT=0
10:   ERRORS=''

      GOSUB SETUP.SQL

* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE
      CARRIER.ID=FIELD(BILL.ID,'*',1)
      PRO=FIELD(BILL.ID,'*',2)
      IF BILL.REC<37>='' THEN
         ERRORS<-1>='Missing Process Date for ':BILL.ID
         RETURN TO THE.END
      END
      PROC.DT=BILL.REC<37>'D4/'
      SQL.UNIQUEKEY=CLIENT.ID:CARRIER.ID:PRO:PROC.DT[7,4]:PROC.DT[1,2]:PROC.DT[4,2]
      SQL.CARRIERNO=CARRIER.ID+0
      SQL.INVNO=TRIM(BILL.REC<94>)[1,50]
      SQL.CHECKNO=BILL.REC<14>
      SQL.CHECKAMT=BILL.REC<13>'R26'
      SQL.CHECKDATE=BILL.REC<15>'D2/'
      SQL.AUDITOR=BILL.REC<89>[1,50]
      SQL.DISCOUNTCOMMISSION=BILL.REC<42>'R26'
      SQL.OVERCHRGCOMMISSION=BILL.REC<43>'R26'
      SQL.CONSULTINGCOMMISSION=BILL.REC<44>'R26'
      SQL.DISCOUNTVARIANCE=BILL.REC<10>'R26'
      SQL.OVERCHRGVARIANCE=BILL.REC<11>'R26'
      SQL.CONSULTINGVARIANCE=BILL.REC<12>'R26'
      SQL.BALDUEDISCOUNT=BILL.REC<34>'R26'
      SQL.BALDUEOVERCHRG=BILL.REC<35>'R26'
      SQL.BALDUECONSULTING=BILL.REC<36>'R26'
      SQL.CUTBACKCODE=BILL.REC<41>[1,50]
      SQL.PRONO=PRO[1,50]
      SQL.CARRIERCHRG=BILL.REC<7>'R26'
      SQL.ACTUALCHRG=BILL.REC<8>'R26'
      SQL.APPROVEDCARRIERNO=''
      IF BILL.REC<69>#'' THEN
         SQL.APPROVEDCARRIERNO=BILL.REC<69>+0
      END
      SQL.MISROUTEAMT=''
      IF BILL.REC<63>+0#0 THEN
         SQL.MISROUTEAMT=BILL.REC<63>'R26'
      END
      SQL.LCCID=''
      SQL.LCCAMT=''
      IF BILL.REC<147>#'' THEN
         SQL.LCCID=BILL.REC<147>+0
         SQL.LCCAMT=BILL.REC<143>'R26'
      END
      SQL.FUNDSCLEARED=''
      IF CLEAR.DATE#'' THEN
         SQL.FUNDSCLEARED=CLEAR.DATE'D2/'
      END

      FN = "SQLExecute"
      STATUS = SQLEXECUTE(DELPYMTENV)
      STMTENV=DELPYMTENV
      GOSUB CKSTMTENV

********************************************************************
THE.END:***
********************************************************************
*     END OF PROGRAM
*
* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
MVIN<1> = 'nmeddaugh@afs.net'
            MVIN<4>='AFS_UPD.SQL.PYMT.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP
********************************************************************
SETUP.SQL:*
********************************************************************
* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLALLOCENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLALLOCCONNECT(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*

      BEGIN CASE                         ; * JMK02
         CASE SVR.NAME='AFS'             ; * JMK02
            SOURCE='PRODODS'             ; * JMK02
            UID="uv_sql"                 ; * JMK02
            PWD="4@gAbreg"               ; * JMK02
         CASE 1                          ; * JMK02
            SOURCE='DEVODS'              ; * JMK02
            UID="uv_sql"                 ; * JMK02
            PWD="4@gAbreg"               ; * JMK02
      END CASE                           ; * JMK02
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLCONNECT(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV


DELETE.SQL.PYMT:*
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
      FN = "SQLAllocStmt"
      STATUS = SQLALLOCSTMT(CONENV,DELPYMTENV)
      GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
      OPT.STR = STR(' ?,',2)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_DelPayment (":OPT.STR:")}"

      ROWNUM = 0
      FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(DELPYMTENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=DELPYMTENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(DELPYMTENV, 2, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CARRIERNO) ; STMTENV=DELPYMTENV ; GOSUB CKSTMTENV

      FN = "SQLPrepare"
      STATUS = SQLPREPARE(DELPYMTENV, INST1)
      STMTENV=DELPYMTENV
      ENVSRC='DELPYMT'
      GOSUB CKSTMTENV

      RETURN
********************************************************************
CKCONENV:
********************************************************************
      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND GREGB UPD.SQL.FBHIST.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN
********************************************************************
CKSTMTENV:
********************************************************************
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND GREGB UPD.SQL.FBHIST.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN

