      SUBROUTINE UPD.SQL.FBDTL.SUB(VIN,VOUT,CLIENT.REC,DIV.REC,VC.REC,BILL.REC,EDI.REC)
***********************************************************************
* ANALYZE BILLS ACTED UPON BY AUDITORS
* COPYRIGHT (C) AFS LOGISTICS, LLC., 2002
*
* AUTHOR : MIKE KERBOW
* DATE   : OCTOBER 2014
**********************************************************************
* INCLUDE THE ODBC DEFINITIONS
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.FBDTL.SUB' ; UPL.VOUT = ''
      CALL GET.USER.NEW(USER,CH.NUM)
      UPL.VIN<3> = USER
      UPL.VIN<4> = CH.NUM
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)
      SVR.NAME=SVR.VOUT<1>

      USER=VIN<1>
      CLIENT.ID=VIN<2>
      BILL.ID=VIN<3>
      SEQ=FIELD(BILL.ID,'*',3)
      IF SEQ#0 THEN RETURN
      UPD.FLAGS=VIN<4>
      UPD.FBDTL=1
      LI.CODES=''
      LI.CODES<1>=VIN<5>
      LI.CODES<2>=VIN<6>
      LOGISTICS=VIN<7>

      FORM = "T##########"
      DASH = "----------"
      EXPECT = ""
      NULL=""
      TOT.NUM.BILLS=0

      ERROR.CNT=0
10:   ERRORS=''
      IF BILL.REC<21>#'1' THEN RETURN
*     IF BILL.REC<252>='' THEN RETURN
      GOSUB SETUP.SQL

* DEFINE FIELDS TO UPDATE FROM CLIENT.REC HERE
      CARRIER.ID=FIELD(BILL.ID,'*',1)
      PRO=FIELD(BILL.ID,'*',2)
      IF BILL.REC<37>='' THEN
         ERRORS<-1>='Missing Process Date for ':BILL.ID
         RETURN TO THE.END
      END
      PROC.DT=BILL.REC<37>'D4/'
      SQL.UNIQUEKEY=CLIENT.ID:CARRIER.ID:PRO:PROC.DT[7,4]:PROC.DT[1,2]:PROC.DT[4,2]
      FN = "SQLExecute"
      STATUS = SQLEXECUTE(DELFBDTLENV)
      STMTENV=DELFBDTLENV
      GOSUB CKSTMTENV

      NVAL=DCOUNT(BILL.REC<252>,@VM)
      IF UPD.FBDTL THEN
         IF BILL.REC<252>='' THEN RETURN
         LOCATE 'AMIN' IN BILL.REC<252> SETTING AMIN.START ELSE AMIN.START=1
         LOCATE 'ABMIN' IN BILL.REC<252> SETTING ABMIN.START ELSE ABMIN.START=1
         LOCATE 'OMIN' IN BILL.REC<252> SETTING OMIN.START ELSE OMIN.START=1
         LOCATE 'TMIN' IN BILL.REC<252> SETTING TMIN.START ELSE TMIN.START=1
         IF AMIN.START>1 AND LOGISTICS THEN
            IF BILL.REC<265,AMIN.START>='' THEN
               IF TMIN.START>1 THEN
                  BILL.REC<265,AMIN.START>=BILL.REC<265,TMIN.START>
               END
               IF BILL.REC<265,AMIN.START>='' THEN
                  FOR VAL1=1 TO AMIN.START-1
                     BILL.REC<265,AMIN.START>+=BILL.REC<265,VAL1>
                  NEXT VAL1
               END
            END
         END
         COMM.START=1
         IF TMIN.START>COMM.START THEN COMM.START=TMIN.START
         IF ABMIN.START>COMM.START THEN COMM.START=ABMIN.START
         IF AMIN.START>COMM.START THEN COMM.START=AMIN.START
         IF OMIN.START>COMM.START THEN COMM.START=OMIN.START

         FOR VAL=1 TO NVAL
*
* INITIALIZE VARIABLES FIRST
*
            SQL.ACCLCODE=''
            SQL.ACCLDESC=''
            SQL.GROSSCLS=''
            SQL.GROSSWT=''
            SQL.GROSSRATE=''
            SQL.GROSSDISC=''
            SQL.GROSSCHG=''
            SQL.CONTRCLS=''
            SQL.CONTRWT=''
            SQL.CONTRRATE=''
            SQL.CONTRDISC=''
            SQL.CONTRCHG=''
            SQL.CMCOMM=''
            SQL.CMVAR=''
            SQL.CMPCT=''

            SQL.ACCLCODE=BILL.REC<252,VAL>
            LOCATE SQL.ACCLCODE IN LI.CODES<1> SETTING APOS THEN
               SQL.ACCLDESC=LI.CODES<2,APOS>
            END ELSE
               BEGIN CASE
                  CASE SQL.ACCLCODE='AMIN'
                     SQL.ACCLDESC='AFS Contract Minimum'
                  CASE SQL.ACCLCODE='ABMIN'
                     SQL.ACCLDESC='AFS Absolute Minimum'
                  CASE SQL.ACCLCODE='OMIN'
                     SQL.ACCLDESC='AFS Override Minimum'
                  CASE SQL.ACCLCODE='TMIN'
                     SQL.ACCLDESC='Tariff Minimum'
                  CASE 1
                     SQL.ACCLDESC='Unknown'
               END CASE
            END
            IF BILL.REC<260,VAL>#'' THEN
               SQL.GROSSCLS=BILL.REC<260,VAL>
            END
            IF BILL.REC<261,VAL>#'' THEN
               SQL.GROSSWT=BILL.REC<261,VAL>
            END
            IF BILL.REC<262,VAL>#'' THEN
               SQL.GROSSRATE=BILL.REC<262,VAL>'R26'
            END
            IF BILL.REC<264,VAL>#'' THEN
               SQL.GROSSDISC=BILL.REC<264,VAL>'R26'
            END
            IF BILL.REC<265,VAL>#'' THEN
               SQL.GROSSCHG=BILL.REC<265,VAL>'R26'
            END
            IF BILL.REC<254,VAL>#'' THEN
               SQL.CONTRCLS=BILL.REC<254,VAL>
            END
            IF BILL.REC<255,VAL>#'' THEN
               SQL.CONTRWT=BILL.REC<255,VAL>
            END
            IF BILL.REC<256,VAL>#'' THEN
               SQL.CONTRRATE=BILL.REC<256,VAL>'R26'
            END
            IF BILL.REC<258,VAL>#'' THEN
               SQL.CONTRDISC=BILL.REC<258,VAL>'R26'
            END
            IF BILL.REC<259,VAL>#'' THEN
               SQL.CONTRCHG=BILL.REC<259,VAL>'R26'
            END
            IF VAL>=COMM.START THEN
               IF LOGISTICS=0 THEN
                  SQL.CMCOMM='0'
                  SQL.CMVAR='0'
               END ELSE
                  IF BILL.REC<267,VAL>#'' THEN
                     SQL.CMCOMM=BILL.REC<267,VAL>'R26'
                  END
                  IF SQL.GROSSCHG#'' OR SQL.CONTRCHG#'' THEN
                     SQL.CMVAR=SQL.GROSSCHG-SQL.CONTRCHG
                  END
               END
            END
            IF BILL.REC<266>#'' THEN
               SQL.CMPCT=BILL.REC<266>'R26'
            END

            FN = "SQLExecute"
            STATUS = SQLEXECUTE(UPDFBDTLENV)
            STMTENV=UPDFBDTLENV
            GOSUB CKSTMTENV
         NEXT VAL
      END

THE.END:***
*     END OF PROGRAM
*
* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1> = 'nmeddaugh@afs.net'
            MVIN<4>='AFS_UPD.SQL.FBDTL.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP
*************************************************************************
SETUP.SQL:*
*************************************************************************
* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLAllocEnv(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLAllocConnect(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*
      BEGIN CASE
         CASE SVR.NAME='AFS'
            SOURCE='PRODQV'
            UID="uv_sql"
            PWD="4@gAbreg"
         CASE 1
            SOURCE='DEVDW'
            UID="uv_sql"
            PWD="4@gAbreg"
      END CASE
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLConnect(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV

UPDATE.SQL.CARRIER.INV.DETAIL:*
      IF UPD.FBDTL THEN
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
         FN = "SQLAllocStmt"
         STATUS = SQLAllocStmt(CONENV,UPDFBDTLENV)
         GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
         OPT.STR = STR(' ?,',16)
         OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
         INST1 = "{CALL PX_UpdAcclCharges (":OPT.STR:")}"    ; * 16 PLACEHOLDERS

         ROWNUM = 0
         FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
         STATUS = SQLSETPARAM(UPDFBDTLENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.ACCLCODE) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 3, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.ACCLDESC) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 4, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.GROSSCLS) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 5, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.GROSSWT) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 6, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.GROSSRATE) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 7, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.GROSSDISC) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 8, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.GROSSCHG) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV, 9, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.CONTRCLS) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV,10, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONTRWT) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV,11, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONTRRATE) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV,12, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONTRDISC) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV,13, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CONTRCHG) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV,14, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CMCOMM) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV,15, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CMVAR) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV
         STATUS = SQLSETPARAM(UPDFBDTLENV,16, SQL.B.BASIC, SQL.VARCHAR, 20, 0, SQL.CMPCT) ; STMTENV=UPDFBDTLENV ; GOSUB CKSTMTENV

         FN = "SQLPrepare"
         STATUS = SQLPrepare(UPDFBDTLENV, INST1)
         STMTENV=UPDFBDTLENV
         ENVSRC='UPDFBDTL'
         GOSUB CKSTMTENV

DELETE.SQL.CARRIER.INV.DETAIL:*
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
         FN = "SQLAllocStmt"
         STATUS = SQLAllocStmt(CONENV,DELFBDTLENV)
         GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
         OPT.STR = STR(' ?,',1)
         OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
         INST1 = "{CALL PX_DelAcclCharges (":OPT.STR:")}"    ; * 1 PLACEHOLDERS

         ROWNUM = 0
         FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
         STATUS = SQLSETPARAM(DELFBDTLENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=DELFBDTLENV ; GOSUB CKSTMTENV

         FN = "SQLPrepare"
         STATUS = SQLPrepare(DELFBDTLENV, INST1)
         STMTENV=DELFBDTLENV
         ENVSRC='DELFBDTL'
         GOSUB CKSTMTENV
      END

CKCONENV:

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBDTL.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN
*************************************************************************
CKSTMTENV:
*************************************************************************
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBDTL.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
*************************************************************************
CHECK.SQL.WEIGHT:*
*************************************************************************
      LI.CODE.TYPE=''
      IF SQL.RATINGCODE='' THEN SQL.RATINGCODE='FRT'
      IF LI.CODES<1>#'' THEN
         LOCATE SQL.RATINGCODE IN LI.CODES<1> SETTING RPOS THEN
            LI.CODE.TYPE=LI.CODES<2,RPOS>
            IF LI.CODE.TYPE#'F' THEN
               SQL.WEIGHT=0
            END
         END
      END
      RETURN
