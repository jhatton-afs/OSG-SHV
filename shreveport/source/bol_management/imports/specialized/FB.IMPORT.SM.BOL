************************************************************************
* Program name : FB.IMPORT.SM.BOL
* Author       : Nicole Hennick
* Date written : 08/20/2020
* Library      : FBBP
$* COPYRIGHT (C) 2016 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
* Load Swedish Match BOL from XML
*
* Last updated by afs (AFSLOGISTICS\nmeddaugh) at 13:59:00 on 08/20/2020.
*
* Start modification history
* 08/20/20 : NKH00 : ACCU-966 Rewrite of old program for XML vs text file
* End modification history
*
********************************************************************
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE UNIVERSE.INCLUDE XML.H

      * Initialize variables
      COMMON PROG.PARAMS(24)
      EQU CH.NUM TO PROG.PARAMS(1)
      EQU USER TO PROG.PARAMS(2)
      EQU SERVER.NAME TO PROG.PARAMS(3)
      PROG.NAME='FB.IMPORT.SM.BOL' 
      CALL GET.USER.NEW(USER,CH.NUM)
      
      RESP = ''
      RESP.CNT = 1
      TEMP.ARRAY = ''
      CLIENT.ID = "01344" 
      EMAIL.OUT=''  

      * Set counters 
      ALREADY.THERE=0
      ALREADY.THERE.BOTH.MATCH=0
      ALREADY.THERE.AMOUNTS.MATCH=0
      ALREADY.THERE.DATES.MATCH=0
      ALREADY.THERE.NEITHER.MATCH=0

      ALREADY.THERE.NULL=0
      NOT.THERE=0

      RESULTS.ARRAY=''
      ERROR.ARRAY=''
      PERC=0

      * Update Logs
      UPL.VIN = ''      
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'CCXL.V2' ; UPL.VOUT = ''
      UPL.VIN<3> = USER
      UPL.VIN<4> = CH.NUM
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)

      * Open Files
* Remove for prod      
*      OPEN '','BILLDATA.':USER TO F.BILLDATA ELSE
*         EMAIL.OUT<6,-1>='Cannot open BILLDATA file' ; GOSUB SEND.EMAIL
*         CALL OPEN.ABORT('BILLDATA',PROG.NAME)      
*      END
      OPEN '','OPERATOR' TO F.OP ELSE 
         EMAIL.OUT<6,-1>='Cannot open OPERATOR file' ; GOSUB SEND.EMAIL    
         CALL OPEN.ABORT("OPERATOR",PROG.NAME)
      END 
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         EMAIL.OUT<6,-1>='Cannot open CLIENTS file'  ; GOSUB SEND.EMAIL
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)     
      END          
* Include for prod
      OPEN '','FTP.':CLIENT.ID:'.HISTORY' TO F.FTP.HIST ELSE
         EMAIL.OUT<6,-1>='Cannot Open FTP.':CLIENT.ID:'.HISTORY File!'  ; GOSUB SEND.EMAIL
         CALL OPEN.ABORT('FTP.':CLIENT.ID:'.HISTORY'PROG.NAME)     
      END
      OPEN '','FB.BOL.CRX,':CLIENT.ID TO F.BOL ELSE
         EXECUTE 'CREATE-FILE DATA FB.BOL.CRX,':CLIENT.ID:' 503,1' CAPTURING OUTPUT
         OPEN '','FB.BOL.CRX,':CLIENT.ID TO F.BOL ELSE
            EMAIL.OUT<6,-1>='Cannot Open FB.BOL.CRX,':CLIENT.ID:' File!'  ; GOSUB SEND.EMAIL
            CALL OPEN.ABORT('FB.BOL.CRX,':CLIENT.ID,PROG.NAME)                 
         END
      END
* Include for prod      
      OPEN '','FTP.':CLIENT.ID TO F.FTP ELSE
         EMAIL.OUT<6,-1>='Cannot Open FTP.':CLIENT.ID:' File!'  ; GOSUB SEND.EMAIL
         CALL OPEN.ABORT('FTP.':CLIENT.ID,PROG.NAME)              
      END             
      OPEN '','CONTROL' TO CONTROL ELSE
         EMAIL.OUT<6,-1>='Cannot open CONTROL file' ; GOSUB SEND.EMAIL      
         CALL OPEN.ABORT('CONTROL',PROG.NAME)
      END         
           
      * Get XML Parameters
      READ XMLPARAMS FROM CONTROL,"SMXML" THEN
         EMAIL.RESULTS.RECIP = XMLPARAMS<1>
         XML.RESULTS.RECIP = XMLPARAMS<2>
      END ELSE
         EMAIL.RESULTS.RECIP = 'Holly.Wahl@SMNA.com'
*          XML.RESULTS.RECIP = 'nmeddaugh@afs.net':@VM:'gbino@afs.net':@VM:'dfriend@afs.net'
         XML.RESULTS.RECIP = 'nmeddaugh@afs.net':@VM:'dfriend@afs.net'
      END                        

      * Email
      XML.EMAIL.OUT=''
      XML.EMAIL.OUT<1>=XML.RESULTS.RECIP
      XML.EMAIL.OUT<4>='FBBP_FB.IMPORT.SM.BOL@afs.net'
      XML.EMAIL.OUT<5>='Error with Swedish Match BOL XML Load.'  
      XML.EMAIL.OUT<6,-1>='User:':USER:' Date:':OCONV(DATE(),'D2/'):' Time:':OCONV(TIME(),'MTHS') 
      XML.EMAIL.OUT<6,-1>=' ':@VM   
      XML.EMAIL.OUT<6,-1>=' '            
      SEND.XML.EMAIL=0 

      * Determine if Auto Run
      CMD.LINE=@SENTENCE
      NWORDS=DCOUNT(CMD.LINE,' ')
      IF NWORDS > 1 THEN
         AUTO=1
      END ELSE
         AUTO=0
      END

      * Restrict program usage
      BEGIN CASE
         CASE USER = 'OLEDBAFS' 
            OP.FLG = 'Y'
         CASE AUTO
            OP.FLG = 'Y'
         CASE 1
            READV OP.FLG FROM F.OP,USER,76 ELSE OP.FLG = 'N'             
      END CASE

      IF OP.FLG = 'Y' THEN
      END ELSE
         EMAIL.OUT<6,-1>=USER:' DOES NOT HAVE ACCESS TO LOAD SWEDISH MATCH BOL.'
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>='Restricted Access Application - Access Denied'
         GOSUB SEND.EMAIL
         GOTO PROGRAM.END                         
      END                            
      
*************************************************************************
MAIN.LOGIC:
*************************************************************************      
      READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE
         EMAIL.OUT<6,-1>='Could not read client information.'  ; GOSUB SEND.EMAIL
         GOTO PROGRAM.END
      END

      UPDATE.DATE=CLIENT.REC<82>+1       ; * Last processed + 1 day
      IF UPDATE.DATE<DATE() THEN
         UPDATE.DATE=DATE()
      END

      ST.DATE = DATE()   
      ST.TIME = TIME()   

* Include for prod
      CMND=\SSELECT FTP.\:CLIENT.ID:\ = "SM-]"\    
      EXECUTE CMND RTNLIST CAPTURING RESULTS       

      NITMS=@SELECTED                 
      IF NITMS=0 THEN                 
         EMAIL.OUT<6,-1>='No BOL file to process for ':CLIENT.REC<2>:'.'  ; GOSUB SEND.EMAIL
         GOTO PROGRAM.END
      END                              

* Remove for prod
*CMND = 'GET-LIST NKM'
*EXECUTE CMND

      EOF=0                              
      LOOP                               
         READNEXT FTPID ELSE EOF=1       
      UNTIL EOF DO  
         GOSUB READ.RESULTS               
         LOOK.FOR.END = 1   
                    
         END.TAG.FOUND = 0         
         LOOP 
            GOSUB CHECK.FOR.END.TAG
         UNTIL END.TAG.FOUND
            GOSUB READ.RESULTS
         REPEAT

         GOSUB PARSE.SM.BOL.RESULTS
         GOSUB CREATE.RECORD
      REPEAT
      
      GOSUB EMAIL.RESULTS               
      
      IF SEND.XML.EMAIL THEN   ;* Send email if errors were encountered with XML
         EMAIL.OUT = XML.EMAIL.OUT
         GOSUB SEND.EMAIL
      END               

      GOTO PROGRAM.END

*************************************************************************
READ.RESULTS:
*************************************************************************
* Remove for prod
*      BILLDATA.IN.ID = FTPID
*      READ SM.IMPORT FROM F.BILLDATA, BILLDATA.IN.ID ELSE
*         EMAIL.OUT<6,-1>=BILLDATA.IN.ID:' does not exist.'  ; GOSUB SEND.EMAIL
*         GOTO PROGRAM.END
*      END

* Include for prod
      READ SM.IMPORT FROM F.FTP, FTPID ELSE   
         EMIAL.OUT<6,-1>='Cannot read ':FTPID:'. Aborting process.'  ; GOSUB SEND.EMAIL
         GOTO PROGRAM.END                           
      END                                   

      RESULTS.DTL=SM.IMPORT
      
      RETURN

*************************************************************************
CHECK.FOR.END.TAG: * Make sure that we have read the file completely and it is not still transferring via FTP.                
*************************************************************************
      RESULTS.END.TAG.CNT = (COUNT(RESULTS.DTL,'int0129_d365fo_fbp_freightbills'))          
      IF RESULTS.END.TAG.CNT # 2 THEN
         IF LOOK.FOR.END # 3 THEN
            LOOK.FOR.END += 1            
            SLEEP 60
         END ELSE
            EMAIL.OUT<6,-1>=FTPID:' may have been received incomplete. Please re-send.  Aborting process.'  ; GOSUB SEND.EMAIL
            GOTO PROGRAM.END
         END
      END ELSE
         END.TAG.FOUND = 1
      END

      RETURN
            
*************************************************************************
PARSE.SM.BOL.RESULTS:
*************************************************************************
      BOL.DTL.CNT = (COUNT(RESULTS.DTL,'value')) / 2
      RESULTS.DTL.CNT = (COUNT(RESULTS.DTL,'SM_FreightBillsPayableCodes')) / 2      

      RESULTS.DTL = CHANGE(RESULTS.DTL, '<?xml version="1.0" encoding="utf-8"?>', '')
*      RESULTS.DTL = CHANGE(RESULTS.DTL, '<ns0:int0129_d365fo_fbp_freightbills odata.context="https://sm-ussolutiontestadc65b02bf3a04dbdevaos.cloudax.dynamics.com/data/$metadata#SM_FreightBillsPayableLines" xmlns:ns0="http://INT0129.D365FO.FBP.FreightBills.PayableData">', '')      
*      RESULTS.DTL = CHANGE(RESULTS.DTL, '</ns0:int0129_d365fo_fbp_freightbills>', '')      
      RESULTS.DTL = CHANGE(RESULTS.DTL, 'ns0:','','')

      NODE.VALUE = ''
      errCode = ''
      SAVE.STAT.VAL = ''
      RESP = ''
      TEMP.ARRAY = ''
      RESP.CNT = 1

      CONVERT @AM TO '' IN RESULTS.DTL

      STAT.VAL = 'Swedish Match Main Document'
      ST = XDOMOpen(RESULTS.DTL, XML.FROM.STRING, MYDOM)  ; *GOSUB CHECK.XML.STATUS 

      ST = XDOMLocate(MYDOM,"/","",Main.Handle) ; *GOSUB CHECK.XML.STATUS
      
         ST = XDOMLocateNode(Main.Handle, XDOM.CHILD, XDOM.FIRST.CHILD, XDOM.ELEMENT.NODE, int0129_d365fo_fbp_freightbills.Handle) ; *GOSUB CHECK.XML.STATUS      

         FOR BC = 1 TO BOL.DTL.CNT
         
            STAT.VALUE = 'value'
            ST = XDOMLocateNode(int0129_d365fo_fbp_freightbills.Handle, XDOM.CHILD, BC, XDOM.ELEMENT.NODE, value.Handle) ; *GOSUB CHECK.XML.STATUS
            
               
               STAT.VAL = 'dataAreaId'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 1, XDOM.ELEMENT.NODE, dataAreaId.Handle) ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(dataAreaId.Handle, NODE.VALUE)  ; *GOSUB CHECK.XML.STATUS  
               RESP<1> = NODE.VALUE ; NODE.VALUE = ''              
               
               STAT.VAL = 'BatchExecutionId'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 2, XDOM.ELEMENT.NODE, BatchExecutionId.Handle) ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(BatchExecutionId.Handle, NODE.VALUE)  ; *GOSUB CHECK.XML.STATUS
               RESP<2> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'ToState'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 3, XDOM.ELEMENT.NODE, ToState.Handle) ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(ToState.Handle, NODE.VALUE)  ; *GOSUB CHECK.XML.STATUS 
               RESP<3> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'WhsName'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 4, XDOM.ELEMENT.NODE, WhsName.Handle) ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(WhsName.Handle, NODE.VALUE)  ; *GOSUB CHECK.XML.STATUS 
               RESP<4> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'ShipDate'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 5, XDOM.ELEMENT.NODE, ShipDate.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(ShipDate.Handle, NODE.VALUE) ; *GOSUB CHECK.XML.STATUS 
               RESP<5> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'Qty'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 6, XDOM.ELEMENT.NODE, Qty.Handle)  ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(Qty.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<6> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'FromState'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 7, XDOM.ELEMENT.NODE, FromState.Handle)  ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(FromState.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<7> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'ShipmentNumber'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 8, XDOM.ELEMENT.NODE, ShipmentNumber.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(ShipmentNumber.Handle, NODE.VALUE) ; *GOSUB CHECK.XML.STATUS 
               RESP<8> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'FromCity'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 9, XDOM.ELEMENT.NODE, FromCity.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(FromCity.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<9> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'Account'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 10, XDOM.ELEMENT.NODE, Account.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(Account.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<10> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'FromZip'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 11, XDOM.ELEMENT.NODE, FromZip.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(FromZip.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<11> = NODE.VALUE ; NODE.VALUE = ''              
   
               STAT.VAL = 'Carrier'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 12, XDOM.ELEMENT.NODE, Carrier.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(Carrier.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<12> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'ToCity'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 13, XDOM.ELEMENT.NODE, ToCity.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(ToCity.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<13> = NODE.VALUE ; NODE.VALUE = ''              

               STAT.VAL = 'DeliveryName'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 14, XDOM.ELEMENT.NODE, DeliveryName.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(DeliveryName.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<14> = NODE.VALUE ; NODE.VALUE = ''              
   
               STAT.VAL = 'ToZip'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 15, XDOM.ELEMENT.NODE, ToZip.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(ToZip.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS 
               RESP<15> = NODE.VALUE ; NODE.VALUE = ''              
   
               STAT.VAL = 'ShipmentType'
               ST = XDOMLocateNode(value.Handle, XDOM.CHILD, 16, XDOM.ELEMENT.NODE, ShipmentType.Handle)   ; *GOSUB CHECK.XML.STATUS
               ST = XDOMGetNodeValue(ShipmentType.Handle, NODE.VALUE)   ; *GOSUB CHECK.XML.STATUS             
               RESP<16> = NODE.VALUE ; NODE.VALUE = ''              
               

               idx = 16
               LOOP
               idx += 1
                  ST = XDOMLocateNode(value.Handle, XDOM.CHILD, idx, XDOM.ELEMENT.NODE, SM_FreightBillsPayableCodes.Handle) ; * GOSUB CHECK.XML.STATUS
               WHILE ST = XML.SUCCESS
                  ST = XDOMGetNodeValue(SM_FreightBillsPayableCodes.Handle, NODE.VALUE)  ; *GOSUB CHECK.XML.STATUS
                  IDX = 0
                  ARR.VAL=0
                  LOOP
                     IDX+=1
                     ARR.VAL+=1
                     ST = XDOMLocateNode(SM_FreightBillsPayableCodes.Handle, XDOM.CHILD, IDX, XDOM.ELEMENT.NODE, nodeHandle) ; * GOSUB CHECK.XML.STATUS
                  WHILE ST = XML.SUCCESS
                    ST = XDOMGetNodeValue(nodeHandle, NODE.VALUE)  ; *GOSUB CHECK.XML.STATUS
                    TEMP.ARRAY<ARR.VAL,-1> = NODE.VALUE
                  REPEAT                  
               REPEAT
               
               FOR R = 1 TO 4
                  RR = R+17
                  RESP<RR,RESP.CNT> = TEMP.ARRAY<R>
               NEXT R
               RESP.CNT+=1               
               
               GOSUB CREATE.RECORD
            
            NEXT BC
            
               * SM_FreightBillsPayableCodes end                           
            * value end
         * int0129_d365fo_fbp_freightbills end
      * TransitMethod Main Document end     

      RETURN


************************************************************************      
*CHECK.XML.STATUS: For testing if necessary
************************************************************************      
*      IF ST = XML.SUCCESS THEN
*      END ELSE
*         EC = XMLGetError(errorCode, errorMessage)
*         XML.EMAIL.OUT<6,-1> = STAT.VAL
*         XML.EMAIL.OUT<6,-1> = "ERROR CODE   :":errorCode
*         XML.EMAIL.OUT<6,-1> = "ERROR MESSAGE:":errorMessage
*         SEND.XML.EMAIL=1
*      END

*      RETURN  
                           
************************************************************************      
CREATE.RECORD:
************************************************************************
      SM.AMOUNT=0
      SM.SRTP1=""
      SM.SFTYP=RESP<16>    ; * ShipmentType
      SM.SFILL=""
      SM.SORDR=RESP<8>     ; * ShipmentNumber
      SM.SSCAC=RESP<12>    ; * Carrier
      SM.SCASE=RESP<6>     ; * Qty
      SM.SWHSE=RESP<4>     ; * WhsName
      SM.SOZIP=RESP<11>    ; * FromZip
      SM.SOCTY=RESP<9>     ; * FromCity
      SM.SOSTE=RESP<7>     ; * FromState
      SM.SRTP2=""
      SM.SNAME=RESP<14>    ; * DeliveryName
      SM.SDZIP=RESP<15>    ; * ToZip
      SM.SDCTY=RESP<13>    ; * ToCity
      SM.SDSTE=RESP<3>     ; * ToState
      SM.SACCT=RESP<10>    ; * Account
      SM.SRTP3=""
      SM.SCLS1=RESP<20>    ; * NMFCCode
      SM.SWGT1=RESP<21>    ; * Weight
      SM.SSDTE=RESP<5>     ; * ShipDate
      SM.SSDTE=SM.SSDTE[6,2]:'-':SM.SSDTE[9,2]:'-':SM.SSDTE[3,2]
***      SM.SSDTE=SM.SSDTE[6,2]:'-':SM.SSDTE[9,2]:'-':SM.SSDTE[1,2]
      SM.SSDTE=ICONV(SM.SSDTE,'D')                        

      IF SM.SORDR#'' THEN
         READ BOL.ITEM FROM F.BOL,SM.SORDR THEN
BOL.ITEM<8>=""
            ALREADY.THERE+=1
            BEGIN CASE
               CASE SM.SORDR=BOL.ITEM<8> AND SM.SSDTE=BOL.ITEM<2>
                  * Numbers match, and invoice dates match
                  ALREADY.THERE.BOTH.MATCH+=1

               CASE SM.SORDR=BOL.ITEM<8> AND SM.SSDTE#BOL.ITEM<2>
                  * Numbers match, but invoice dates do not match
                  ALREADY.THERE.AMOUNTS.MATCH+=1
                  LINE=''
                  LINE<1,1>='BOL ITEM.ID ':SM.SORDR
                  LINE<1,2>='Order numbers match, but Order Dates do not match. File not changed.'
                  LINE<1,3>='Sales Order Number    = ':SM.SORDR
                  LINE<1,4>='Existing Order Date   = ':BOL.ITEM<2>'D4-'
                  LINE<1,5>='New Order Date        = ':SM.SSDTE'D4-'
                  ERROR.ARRAY<-1>=LINE
                  ERROR.ARRAY<-1>=' '
                  ERROR.ARRAY<-1>=' '

               CASE SM.SORDR#BOL.ITEM<8> AND SM.SSDTE=BOL.ITEM<2>
                  * Numbers do not match, but invoice dates match
                  ALREADY.THERE.DATES.MATCH+=1
                  LINE=''
                  LINE<1,1>='BOL ITEM.ID ':SM.SORDR
                  LINE<1,2>='Numbers do not match, but Order Dates match. File not changed.'
                  LINE<1,3>='Existing Order Number = ':BOL.ITEM<8>
                  LINE<1,4>='New Order Number      = ':SM.SORDR
                  LINE<1,5>='Order Date            = ':BOL.ITEM<2>'D4-'
                  ERROR.ARRAY<-1>=LINE
                  ERROR.ARRAY<-1>=' '
                  ERROR.ARRAY<-1>=' '

               CASE SM.SORDR#BOL.ITEM<8> AND SM.SSDTE#BOL.ITEM<2>
                  * Numbers do not match, and invoice dates do not match
                  ALREADY.THERE.NEITHER.MATCH+=1
                  LINE=''
                  LINE<1,1>='BOL ITEM.ID ':SM.SORDR
                  LINE<1,2>='Numbers do not match, and Order Dates do not match. File not changed.'
                  LINE<1,3>='Existing Order Number = ':BOL.ITEM<8>
                  LINE<1,4>='New Order Number      = ':SM.SORDR
                  LINE<1,5>='Existing Order Date   = ':BOL.ITEM<2>'D4-'
                  LINE<1,6>='New Order Date        = ':SM.SSDTE'D4-'
                  ERROR.ARRAY<-1>=LINE
                  ERROR.ARRAY<-1>=' '
                  ERROR.ARRAY<-1>=' '
            END CASE

            IF (BOL.ITEM<8>)="" THEN         ; * Existing number is null
               ALREADY.THERE.NULL+=1
               LINE=''
               LINE<1,1>='BOL ITEM.ID ':SM.SORDR
               LINE<1,2>='Existing Number was null. Updated to New Number.'
               LINE<1,3>='Existing Order Number = ':BOL.ITEM<8>
               LINE<1,4>='New Order Number      = ':SM.SORDR
               ERROR.ARRAY<-1>=LINE
               ERROR.ARRAY<-1>=' '
               ERROR.ARRAY<-1>=' '
               BOL.ITEM<1>=SM.AMOUNT
               BOL.ITEM<2>=SM.SSDTE
               BOL.ITEM<4>=UPDATE.DATE
               BOL.ITEM<8>=SM.SORDR
               BOL.ITEM<9>=SM.SACCT
               BOL.ITEM<10>=SM.SFTYP
               BOL.ITEM<11>=SM.SSCAC
               BOL.ITEM<12>=SM.SCASE
               BOL.ITEM<13>=SM.SWHSE
               BOL.ITEM<14>=SM.SOZIP
               BOL.ITEM<15>=SM.SOCTY
               BOL.ITEM<16>=SM.SOSTE
               BOL.ITEM<17>=SM.SNAME
               BOL.ITEM<18>=SM.SDZIP
               BOL.ITEM<19>=SM.SDCTY
               BOL.ITEM<20>=SM.SDSTE
               BOL.ITEM<21>=SM.SCLS1
               BOL.ITEM<22>=SM.SWGT1
            END
         END ELSE
            NOT.THERE+=1
            BOL.ITEM=''
            BOL.ITEM<1>=SM.AMOUNT
            BOL.ITEM<2>=SM.SSDTE
            BOL.ITEM<4>=UPDATE.DATE
            BOL.ITEM<8>=SM.SORDR
            BOL.ITEM<9>=SM.SACCT
            BOL.ITEM<10>=SM.SFTYP
            BOL.ITEM<11>=SM.SSCAC
            BOL.ITEM<12>=SM.SCASE
            BOL.ITEM<13>=SM.SWHSE
            BOL.ITEM<14>=SM.SOZIP
            BOL.ITEM<15>=SM.SOCTY
            BOL.ITEM<16>=SM.SOSTE
            BOL.ITEM<17>=SM.SNAME
            BOL.ITEM<18>=SM.SDZIP
            BOL.ITEM<19>=SM.SDCTY
            BOL.ITEM<20>=SM.SDSTE
            BOL.ITEM<21>=SM.SCLS1
            BOL.ITEM<22>=SM.SWGT1
         END

         WRITE BOL.ITEM ON F.BOL,SM.SORDR
      END
      
      GOSUB UPDATE.FILES      
      
      NODE.VALUE = ''
      errCode = ''
      SAVE.STAT.VAL = ''
      RESP = ''
      TEMP.ARRAY = ''
      RESP.CNT = 1


      RETURN

*************************************************************************
UPDATE.FILES:
*************************************************************************                      
      * Update files
      FTP.YR=FTPID[4,4]             
      FTP.MO=FTPID[8,2]             
      FTP.DA=FTPID[10,2]  
      
* Include for prod and be sure this file is written to hist and deleted from ftp directory after they send first file.                
      WRITE SM.IMPORT ON F.FTP.HIST, 'SM-':FTP.MO:FTP.DA:FTP.YR:'.TXT' THEN                 
         DELETE F.FTP,FTPID                                                                      
      END ELSE  
         EMAIL.OUT<6,-1>='Could not write SM-LAST.TXT. Not deleting ':FTPID  ; GOSUB SEND.EMAIL
         GOTO PROGRAM.END                                                                                          
      END

      * Output of results
      LVIN    = ST.DATE     ; * Date started
      LVIN<2> = ST.TIME     ; * Time started
      LVIN<3> = PROG.NAME
      LVIN<4> = FTPID       ; * Raw data file worked with
      LVOUT   = ""
      CALL UPDATE.BOL.FTP.LOG(LVIN,LVOUT,CLIENT.ID)
         
      RETURN

*************************************************************************
EMAIL.RESULTS:
*************************************************************************                      
      * Email output of results
      RESULTS.ARRAY<-1>='Items already existing in the BOL cross reference file:'
      RESULTS.ARRAY<-1>='   1 Same Order Numbers, Same Order Dates             (not changed) = ':ALREADY.THERE.BOTH.MATCH'R#8'
      RESULTS.ARRAY<-1>='   2 Same Order Numbers, Different Order Dates        (not changed) = ':ALREADY.THERE.AMOUNTS.MATCH'R#8'
      RESULTS.ARRAY<-1>='   3 Different Order Numbers, Same Order Dates        (not changed) = ':ALREADY.THERE.DATES.MATCH'R#8'
      RESULTS.ARRAY<-1>='   4 Different Order Numbers, Different Order Dates   (not changed) = ':ALREADY.THERE.NEITHER.MATCH'R#8'
      RESULTS.ARRAY<-1>='---- Total items already in the file                                = ':ALREADY.THERE'R#8'
      RESULTS.ARRAY<-1>=' '
      RESULTS.ARRAY<-1>='   5 Zero or Null Order Number (occurs as 1-4 above)      (changed) = ':ALREADY.THERE.NULL'R#8'
      RESULTS.ARRAY<-1>='---- Total items not in the file                          (written) = ':NOT.THERE'R#8'

      EMAIL.OUT=''
      EMAIL.OUT<1,1>=EMAIL.RESULTS.RECIP   ; * To: Email addresses
      EMAIL.OUT<4>='Reports@afs.net'   ; * From Email address
      EMAIL.OUT<5>='Results From Running ':PROG.NAME:' - Import Of New BOL Data For ':CLIENT.ID:' ':CLIENT.REC<2>           ; * Subject of Email

      * Email body
      EMAIL.OUT<6,-1>=USER:' ran ':PROG.NAME:' (':PROG.NAME:') on ':DATE()'D2/':' at ':OCONV(TIME(),'MTHS'):' with the following results:'
      EMAIL.OUT<6,-1>=' '
      NUM=DCOUNT(RESULTS.ARRAY,@AM)
      FOR X=1 TO NUM
         EMAIL.OUT<6,-1>='   ':RESULTS.ARRAY<X>
      NEXT X

      IF ERROR.ARRAY#'' THEN
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>=' '
         EMAIL.OUT<6,-1>='The following conflicts occurred between existing data and new data:'
         EMAIL.OUT<6,-1>=' '
         NUM=DCOUNT(ERROR.ARRAY,@AM)
         FOR X=1 TO NUM
            EMAIL.OUT<6,-1>='   ':ERROR.ARRAY<X>
         NEXT X
      END

      EMAIL.OUT<7>=1                  ; * Auto format (add carriage returns to end of text)

      GOSUB SEND.EMAIL

      RETURN
      
*************************************************************************
SEND.EMAIL: * Creates email if there was an error
*************************************************************************                            
      EVIN=EMAIL.OUT
      EVOUT=''
      CALL SENDMAIL(EVIN,EVOUT)       
            
      RETURN

*************************************************************************
PROGRAM.END:
*************************************************************************                      
      STOP
      
END      
