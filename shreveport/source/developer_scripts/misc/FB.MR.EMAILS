*SUBROUTINE TO PRINT MISROUTE EMAILS
*
* FREIGHT BILLING PACKAGE
*
* AUTHOR: TAMI SEAGO
* DATE: AUGUST 2, 1999
*
* THIS PROGRAM IS A PROPRIETARY PRODUCT OF AUTOMATED FREIGHT SYSTEMS
* AND MAY NOT BE USED, COPIED OR MODIFIED WITHOUT THE EXPRESS
* WRITTEN CONSENT OF SAME.
*
****************************************************************
* 112202 - JMK01 - ADD DM DELAY FROM PROCESS END DATE
* 112202 - JMK02 - IGNORE MISROUTES PRIOR TO LOGISTICS START DATE
* 050203 - JMK03 - SETUP EMAIL INFORMATION FOR MISROUTE EMAILS
* 052703 - JMK04 - SETUP SUMMARY EMAIL PROCESSING
* 062403 - JMK05 - USE THE LETTER EVENT FOR ALL INBOUND EMAILS
* 062403 - JMK06 - ADD PREVIOUS WARNING INFORMATION TO LETTERS
* 082603 - JMK07 - PREVENT EMAILS FOR 0.00 OVERCHARGE
* 090803 - JMK08 - ADD FILES FOR MISROUTE ATTACHMENT PROCESSING
* 111003 - JMK09 - CORRECT MISROUTE ATTACHMENT FOR ALL VENDORS
* 111703 - JMK10 - CORRECT PROBLEM WITH NO EMAILS BEING SENT
* 041505 - JMK11 - DO NOT INCLUDE ZEROED PREVIOUS MISROUTES
* 072205 - JMK12 - CHANGE VCIR FROM "R" TO "V" TO AVOID PRINTING ISSUES
* 072805 - JMK13 - ADJUST MISROUTE EMAIL RECORD FORMAT AND ID
* 080205 - JMK14 - DISABLE ERROR REPORTING FOR MISROUTES PRIOR TO LOG START DATE
* 101704 - OH01 - CHANGED DEBIT MEMO EMAIL ADDRESS FROM AWEEKS TO SSHAFER
* 060106 - OH02 - CHANGED DEBIT MEMO EMAIL ADDRESS FROM SSHAFER TO LNJOHNSON
* 072506 - JMK15 - DO NOT SEND EMAIL TO BB OR OH IF LESS THAN 500.00
* 080306 - JMK16 - CONSOLIDATE THE EMAIL SHELL RECORD FOR FINAL SENDING
* 080706 - JMK17 - IGNORE ANY BLANK EMAIL ADDRESSES
* 082406 - JMK18 - ADD $20 MINIMUM TO DM COMMISSIONS
* 091506 - JMK19 - CORRECT EMAIL MINIMUMS WITH BRIAN AND OWEN
* 100506 - JMK20 - CHANGE DEBIT MEMO EMAIL ADDRESS FROM LNJOHNSON TO MSMITH
* 032307 - JMK21 - C200703220003 /  3/23/07 / Updating misroute letters and debit memos
* 050708 - JMK22 - CHANGE AFOOTS TO SSHAFER ON DM
* 052108 - JMK23 - CHANGE SSHAFER TO LLUTTRELL ON DM
* 091208 - JMK24 - C082057 - Add ability to take account off of troubleshoot temporarily for processing ; Post to AR program
* 101308 - JMK25 - C082312 - Debit Memo emails needs to be received by to Michael Statos
* 111808 - JMK26 - T081710 - Vendor not getting debit memo, misroute letters are going out. #396 Crane Carrier
* 042909 - JMK27 - USE TRUE COST FOR OVERCHARGE CALCULATION INSTEAD OF ACTUAL FREIGHT
* 092909 - JMK28 - C090669 - LCC Emails ; with transit times
* 090412 - JMK29 - SysAid#3784 - Debit Memo emails
* 061113 - JMK30 - SysAid#6159 - TEM Email - change ahicks email to nkelly email
* 103116 - GRB01 - SysAid 27947 - Debit / Credit Memo emails CHANGE
* 040119 - NKH01 - ACCU-316 Modified CREATE-FILE file sizes
****************************************************************
*
$INCLUDE PROG.ADMIN INC_OPTIONS
$INCLUDE FILE.DEFS INC_DIVISION.CODES
****************************************************************
* Initialize variables
****************************************************************
      PROG.NAME='FB.MR.EMAILS'
      PROG.DESC='WEEKLY MISROUTE EMAILS'
      PACK.NAME='FREIGHT PAYMENT'
      CALL CHANNEL(CH.NUM)
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'FB.MR.EMAILS' ; UPL.VOUT = ''   ; * NPR_UPL 04/23/2010
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
      GOSUB INITIALIZE.VARIABLES

*     INPUT PROGRAM.MODE                 ; * JMK01
*     PROCESS.TYPE=FIELD(PROGRAM.MODE,'-',1)       ; * JMK01
*     PROGRAM.MODE=FIELD(PROGRAM.MODE,'-',2)       ; * JMK01
      INPUT PGM.MODE                     ; * JMK01
      PROCESS.TYPE=FIELD(PGM.MODE,'-',1)           ; * JMK01
      ONCE=0                             ; * JMK24
      IF PROCESS.TYPE='ONCE' THEN        ; * JMK24
         PROCESS.TYPE='STD'              ; * JMK24
         ONCE=1                          ; * JMK24
      END                                ; * JMK24
      LOC.POS=''
      MR.UPD=0
      TESTING=0
      PROGRAM.MODE=FIELD(PGM.MODE,'-',2)           ; * JMK01
      PROCESS.END.DATE=FIELD(PGM.MODE,'-',3)       ; * JMK01
      IF PROCESS.END.DATE='' THEN PROCESS.END.DATE=LTR.DATE  ; * JMK01 ; * JMK03
      IF PROGRAM.MODE='FROM.PROCESS' THEN FROM.PROCESS=1 ELSE FROM.PROCESS=0

****************************************************************
* Open Files
****************************************************************
      OPEN '','EMAILDATA' TO EMAILDATA ELSE        ; * JMK28
         CALL OPEN.ABORT("EMAILDATA",PROG.NAME)    ; * JMK28
      END                                ; * JMK28
      TODAY=DATE()                       ; * JMK28
      PATH.ID='E:\ARDENT\PUBLIC\EMAILDATA\'        ; * JMK28
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT("CARRIERS",PROG.NAME)
      END
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT("CLIENTS",PROG.NAME)
      END
      OPEN '','FB.BILLS.YTD' TO F.YTD ELSE
         CALL OPEN.ABORT("FB.BILLS.YTD",PROG.NAME)
      END
      OPEN '','FB.LOGISTICS' TO F.LOGS ELSE
         CALL OPEN.ABORT("FB.LOGISTICS",PROG.NAME)
      END
      OPEN '','ZIPS.CODES' TO F.ZIPS ELSE
         CALL OPEN.ABORT("ZIPS",PROG.NAME)
      END

      OPEN '','FB.TABLES' TO F.TABLES ELSE
         CALL OPEN.ABORT('FB.TABLES',PROG.NAME)
      END
      OPEN '','FB.TRANSPORT' TO F.TRANSPORT ELSE   ; * JMK08
         CALL OPEN.ABORT('FB.TRANSPORT',PROG.NAME)           ; * JMK08
      END                                ; * JMK08
      OPEN '','FB.MISROUTE.EMAIL' TO F.MISROUTE.EMAIL ELSE   ; * JMK03
         CALL OPEN.ABORT('FB.MISROUTE.EMAIL',PROG.NAME)      ; * JMK03
      END                                ; * JMK03
*
      OPEN '','AR.SLSMAN.1000.1' TO F.SLSMAN ELSE  ; * JMK16
         CALL OPEN.ABORT('AR.SLSMAN.1000.1',PROG.NAME)       ; * JMK16
      END                                ; * JMK16
      CALL GET.USER(USER)

      IF FROM.PROCESS THEN
         INPUT CLIENT
         OPEN '','FB.UNPROCESS,':CLIENT TO F.UP ELSE
            EXECUTE 'CREATE-FILE DATA FB.UNPROCESS,':CLIENT:' 1009,1' CAPTURING OUTPUT    ; * NKH01
            OPEN '','FB.UNPROCESS,':CLIENT TO F.UP ELSE
               CALL OPEN.ABORT('FB.UNPROCESS,':CLIENT,PROG.NAME)
            END
         END
         GO START.EMAILS
      END

****************************************************************
* Enter client number.
****************************************************************
100:  CALL AFS.SCR.HEAD(CO.ID, FILE.ID, '', PROG.NAME, PROG.DESC, PACK.NAME, CO.NAME, TIME.DATE, 1)
      HELP="Enter client number. Word of name for search. X=Exit. EX=Exit."
      CALL GEN.IN(0,3,'Enter client number #####','',Q,0,20,'','',2,-5,3,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='' ! QI='EX' ! QI='X'
            STOP
         CASE NOT(QI MATCHES "0N")
            CALL SOUNDEX.DISPLAY(QI,'BCUST','SDX.CLIENTS,NAME',2,ITEM.LIST)
            CALL AFS.SCR.REFRESH(PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
            BEGIN CASE
               CASE ITEM.LIST=''
                  GOTO 100
               CASE DCOUNT(ITEM.LIST<1>,@VM) GT 1
                  GOTO 100
               CASE ITEM.LIST NE ''
                  IF NUM(ITEM.LIST<1,1>) THEN DATA ITEM.LIST<1,1>
                  GOTO 100
            END CASE
         CASE NUM(QI)
            Q=QI'R%5'
         CASE 1
            GOTO 100
      END CASE
      CLIENT=Q
***************************************************************
* Verify selection criteria is correct.
***************************************************************
300:  HELP="X=Change. EX=Exit. RETURN=Continue."
      CALL GEN.IN(0,22,'Enter selection please. --','',Q,0,2,'','',0,-2,22,1,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='X'
            CRT @(0,22):@(-3):
            GO 100
         CASE QI='EX'
            STOP
         CASE QI=''
            NULL
         CASE 1
            CALL ELINE('Invalid entry. Must be X, EX, or RETURN.')
            GOTO 300
      END CASE

START.EMAILS:***
****************************************************************
* Read Client Information
****************************************************************
      READ CLIENT.REC FROM F.CLIENTS,CLIENT ELSE
         ERROR = 'ERROR - Client ':CLIENT:' not on file.'
         IF FROM.PROCESS THEN
            ERROR.ARRAY<-1> = ERROR
            GO EXIT.PROGRAM
         END ELSE
            CALL ELINE(ERROR)
         END
         GOTO 100
      END
      PROCESS.MR.EMLS = CLIENT.REC<171>
      DIVISIONS = CLIENT.REC<12>

      IF PROCESS.MR.EMLS = 'N' THEN
         ERROR='NO MISROUTE EMAILS PROCESSED ON CLIENT ':CLIENT
         IF FROM.PROCESS THEN
            ERROR.ARRAY<-1> = ERROR
         END ELSE
            CALL ELINE(ERROR)
         END
         GO EXIT.PROGRAM
      END

      SLSMAN.ID=CLIENT.REC<115>          ; * JMK16
      READ SLSMAN.REC FROM F.SLSMAN,SLSMAN.ID ELSE SLSMAN.REC=''       ; * JMK16
      SLSMAN.EMAIL=SLSMAN.REC<8>         ; * JMK16
      IF OCONV(SLSMAN.EMAIL,'MCL')='none' THEN SLSMAN.EMAIL=''         ; * JMK19

      LOG.ST.DT = CLIENT.REC<149>        ; * JMK02
      COMPANY.NAME='AFS Logistics, LLC'
      CLIENT.NAME=CLIENT.REC<2>
      IF DIVISIONS = 'Y' THEN
         OPEN '','DIVISION.CODES,':CLIENT TO F.DIV ELSE
            ERROR="Cannot open DIVISION.CODES for client ":CLIENT'R%5'
            IF FROM.PROCESS THEN
               ERROR.ARRAY<-1> = ERROR
               GO EXIT.PROGRAM
            END ELSE
               CALL ELINE(ERROR)
            END
            GO 100                       ; * START OVER
         END
      END
      DATE.POS = DCOUNT(CLIENT.REC<84>,@VM)
      CONSULTING.COMM = CLIENT.REC<85,DATE.POS>
      NUM.WARNINGS = CLIENT.REC<140>
      MIN.DM.AMT = CLIENT.REC<141>
      TYPE.DM = CLIENT.REC<142>
      THROW.AWAY.AMT = CLIENT.REC<143>
      VERSION=CLIENT.REC<173>            ; * JMK28
      IF CLIENT[1.2]='99' THEN           ; * JMK28
         BEGIN CASE                      ; * JMK28
            CASE VERSION='8'             ; * JMK28
            CASE VERSION='733'           ; * JMK28
            CASE VERSION='734'           ; * JMK28
            CASE 1                       ; * JMK28
               VERSION=8                 ; * JMK28
         END CASE                        ; * JMK28
      END                                ; * JMK28
      SORT=CLIENT.REC<174>               ; * JMK28
      IF SORT='' THEN SORT=1             ; * JMK28

      OPEN '','FB.BILLS.HIST,':CLIENT TO F.BILLS.HIST ELSE
         CALL OPEN.ABORT('FB.BILLS.HIST,':CLIENT,PROG.NAME)
      END
      OPEN '','VEND.CUST,':CLIENT TO F.VC ELSE
         CALL OPEN.ABORT('VEND.CUST,':CLIENT,PROG.NAME)
      END
      OPEN '','FB.UNPROCESS,':CLIENT TO F.UP ELSE  ; * JMK28
         EXECUTE 'CREATE-FILE DATA FB.UNPROCESS,':CLIENT:' 1009,1' CAPTURING OUTPUT         ; * JMK28 NKH01
         OPEN '','FB.UNPROCESS,':CLIENT TO F.UP ELSE         ; * JMK28
            CALL OPEN.ABORT('FB.UNPROCESS,':CLIENT,PROG.NAME)          ; * JMK28
         END                             ; * JMK28
      END                                ; * JMK28
      READ DATE.LIST FROM F.UP,'PROCESS.DATES' ELSE DATE.LIST=''       ; * JMK28
      BEG.DATE=DATE.LIST<1>              ; * JMK28
      END.DATE=DATE.LIST<2>              ; * JMK28
      MSR.FLG=1                          ; * JMK28
      TOT.OVERCHARGE=0                   ; * JMK28
      MSR.ATTACH.ID=''                   ; * JMK28
      LCC.FLG=1                          ; * JMK28
      LCC.OVERCHARGE=0                   ; * JMK28
      LCC.ATTACH.ID=''                   ; * JMK28
      DFVIN=''                           ; * JMK28
      DFVIN<1>=CLIENT                    ; * JMK28
      DFVIN<2>='N'                       ; * JMK28
      DFVIN<3>='ALL'                     ; * JMK28
      DFVIN<4>=1                         ; * JMK28
      DFVIN<5>=2                         ; * JMK28
      DFVIN<6>=BEG.DATE                  ; * JMK28
      DFVIN<7>=END.DATE                  ; * JMK28
      DFVIN<8>=''                        ; * JMK28
      DFVIN<9>='N'                       ; * JMK28
      DFVIN<10>='N'                      ; * JMK28
      DFVIN<11>='N'                      ; * JMK28
      DFVIN<12>='N'                      ; * JMK28
      DFVIN<13>='522'                    ; * JMK28
      DFVIN<14>='STD'                    ; * JMK28
      DFVIN<15>=0                        ; * JMK28
      DFVIN<16>='ALL'                    ; * JMK28
      DFVIN<17>=SORT                     ; * JMK28
      DFVIN<18>=0                        ; * JMK28
      DFVIN<19>=''                       ; * JMK28
      DFVIN<20>=''                       ; * JMK28
      DFVIN<21>=USER                     ; * JMK28
      DFVIN<22>=CH.NUM                   ; * JMK28
      DFVIN<23>=0                        ; * JMK28
      DFVIN<24>=''                       ; * JMK28
      DFVIN<25>='FROM FB.3.1.NEW'        ; * JMK28
      DFVIN<26>=0                        ; * JMK28
      DFVIN<27>=0                        ; * JMK28
      DFVIN<28>=0                        ; * JMK28
      DFVIN<29>='I'                      ; * JMK28
      DFVIN<30>=''                       ; * JMK28
      CALL BUILD.DF.SUB(F.CLIENTS,F.CARRIERS,F.TRANSPORT,F.TABLES,EMAILDATA,DFVIN,DFVOUT)  ; * JMK28
      IF DFVOUT<1>#'' THEN               ; * JMK28
         LCC.ATTACH.ID=DFVOUT<1>         ; * JMK28
         READ LCC.REC FROM EMAILDATA,LCC.ATTACH.ID ELSE LCC.REC=''     ; * JMK28
         LCC.REC=CHANGE(LCC.REC,CHAR(9),@VM)       ; * JMK28
         LCC.NATT=DCOUNT(LCC.REC,@AM)    ; * JMK28
         FOR LCC.ATT=4 TO LCC.NATT       ; * JMK28
            LCC.OVERCHARGE+=ICONV(LCC.REC<LCC.ATT,24>,'MR2')           ; * JMK28
         NEXT LCC.ATT                    ; * JMK28
      END ELSE                           ; * JMK28
         LCC.FLG=0                       ; * JMK28
      END                                ; * JMK28
      LCC.FLG=0                          ; * TURNED OFF UNTIL RESOLUTION WITH MANY ISSUES
      LCC.OVERCHARGE=0                   ; * DITTO
      LCC.ATTACH.ID=''                   ; * DITTO
***************************************************************
* Start Processing the Misroute EMAILs.
***************************************************************
*     STMT='SSELECT FB.MISROUTE.EMAIL BY CLIENT BY VC WITH CLIENT = "':CLIENT:'"' ; * JMK13
      STMT='SSELECT FB.MISROUTE.EMAIL BY CLIENT WITH CLIENT = "':CLIENT:'"'      ; * JMK13
*DF      EXECUTE STMT PASSLIST CAPTURING OUTPUT
      EXECUTE STMT RTNLIST MISROUTE.LIST CAPTURING OUTPUT
      NUM.ITMS = @SELECTED
      IF NUM.ITMS = 0 THEN
         ERROR = 'NO ITEMS SELECTED FOR MISROUTE EMAILS'
         IF FROM.PROCESS THEN
            ERROR.ARRAY<-1> = ERROR
         END ELSE
            CALL ELINE(ERROR)
         END
         MSR.FLG=0                       ; * JMK28
         IF LCC.OVERCHARGE+0=0 THEN      ; * JMK28
            GO EXIT.PROGRAM              ; * JMK28
         END                             ; * JMK28
      END

      CC.LIST=''                         ; * JMK16

      CC.LIST<1,-1>='TEM@afs.net'        ; * JMK16 ; * JMK28
      IF SLSMAN.EMAIL#'' THEN            ; * JMK19
         CC.LIST<1,-1>=OCONV(SLSMAN.EMAIL,'MCL')   ; * JMK16
      END                                ; * JMK19
      ACC.LIST=''                        ; * JMK16
      ACC.LIST<1,-1>='bbarker@afs.net'   ; * JMK16

      BCC.LIST=''                        ; * JMK16
      BCC.LIST<1,-1>='nmeddaugh@afs.net'
      EOF=0                              ; * JMK04
      LOOP
         READNEXT MISROUTE.EMAIL.ID FROM MISROUTE.LIST ELSE EOF=1
      UNTIL EOF DO
*        READ EMAIL.REC FROM F.MISROUTE.EMAIL,MISROUTE.EMAIL.ID ELSE ; * JMK13
         READ EMAIL.SHELL FROM F.MISROUTE.EMAIL,MISROUTE.EMAIL.ID ELSE           ; * JMK13
            GO SKIP.EMAIL
         END
*
         EMAIL.ORG=EMAIL.SHELL           ; * JMK16
         COMB.EMAIL=''                   ; * JMK16
* PASS 1 - CONSOLIDATE ALL EMAIL ADDRESSES ; * JMK16
         NVAL=DCOUNT(EMAIL.SHELL<30>,@VM)          ; * JMK16
         FOR VAL=1 TO NVAL               ; * JMK16
            PROLIST=EMAIL.SHELL<8,VAL>   ; * JMK16
            ADD=EMAIL.SHELL<30,VAL>      ; * JMK16
            IF ADD='' THEN               ; * JMK17
               FOR ATT=1 TO 30           ; * JMK16
                  DEL EMAIL.SHELL<ATT,VAL>         ; * JMK16
               NEXT ATT                  ; * JMK16
               NVAL-=1                   ; * JMK16
               VAL-=1                    ; * JMK16
            END ELSE                     ; * JMK17
               LOCATE(PROLIST,COMB.EMAIL,1;PPOS) THEN        ; * JMK16
                  COMB.VAL=COMB.EMAIL<2,PPOS>      ; * JMK16
                  EMAIL.SHELL<30,COMB.VAL>:=';':ADD          ; * JMK16
                  FOR ATT=1 TO 30        ; * JMK16
                     DEL EMAIL.SHELL<ATT,VAL>      ; * JMK16
                  NEXT ATT               ; * JMK16
                  NVAL-=1                ; * JMK16
                  VAL-=1                 ; * JMK16
               END ELSE                  ; * JMK16
                  COMB.EMAIL<1,-1>=PROLIST         ; * JMK16
                  COMB.EMAIL<2,-1>=VAL   ; * JMK16
               END                       ; * JMK16
            END                          ; * JMK17
         NEXT VAL                        ; * JMK16
* PASS 2 - DISTRIBUTE EMAIL ADDRESSES TO TO:, CC: AND BCC: ; * JMK16
         NVAL=DCOUNT(EMAIL.SHELL<30>,@VM)          ; * JMK16
         FOR VAL=1 TO NVAL               ; * JMK16
            TO.ADD=''                    ; * JMK16
            CC.ADD=''                    ; * JMK16
            BCC.ADD=''                   ; * JMK16
            ADD.LIST=EMAIL.SHELL<30,VAL>           ; * JMK16
            TOT.OVERCHARGE=SUM(EMAIL.SHELL<7,VAL>)           ; * JMK16
            NVAL1=DCOUNT(ADD.LIST,';')   ; * JMK16
            FOR VAL1=1 TO NVAL1          ; * JMK16
               ADD=FIELD(ADD.LIST,';',VAL1)        ; * JMK16

               ADD.TEST=OCONV(ADD,'MCL')           ; * JMK19
               LOCATE(ADD.TEST,CC.LIST,1;CPOS) ELSE CPOS=0   ; * JMK16 ; * JMK19
               LOCATE(ADD.TEST,ACC.LIST,1;APOS) ELSE APOS=0  ; * JMK16 ; * JMK19
               LOCATE(ADD.TEST,BCC.LIST,1;BPOS) ELSE BPOS=0  ; * JMK16 ; * JMK19
               BEGIN CASE                ; * JMK16
                  CASE CPOS              ; * JMK16
                  CASE APOS              ; * JMK16
                     IF TOT.OVERCHARGE>=50000 THEN           ; * JMK16
                        IF BCC.ADD='' THEN         ; * JMK16
                           BCC.ADD=ADD   ; * JMK16
                        END ELSE         ; * JMK16
                           BCC.ADD:=';':ADD        ; * JMK16
                        END              ; * JMK16
                     END                 ; * JMK16
                  CASE BPOS              ; * JMK16
                     IF BCC.ADD='' THEN  ; * JMK16
                        BCC.ADD=ADD      ; * JMK16
                     END ELSE            ; * JMK16
                        BCC.ADD:=';':ADD           ; * JMK16
                     END                 ; * JMK16
                  CASE 1                 ; * JMK16
                     IF TO.ADD='' THEN   ; * JMK16
                        TO.ADD=ADD       ; * JMK16
                     END ELSE            ; * JMK16
                        TO.ADD:=';':ADD  ; * JMK16
                     END                 ; * JMK16
               END CASE                  ; * JMK16
            NEXT VAL1                    ; * JMK16
            CC.ADD=''                    ; * JMK16
            CC.ADD=CC.LIST<1,1>:';':CC.LIST<1,2>   ; * JMK16
            IF TO.ADD='' AND CC.ADD#'' THEN        ; * JMK16
               TO.ADD=CC.ADD             ; * JMK16
               CC.ADD=''                 ; * JMK16
            END                          ; * JMK16
            IF TO.ADD='' AND BCC.ADD#'' THEN       ; * JMK16
               TO.ADD=BCC.ADD            ; * JMK16
               CC.ADD=''                 ; * JMK16
               BCC.ADD=''                ; * JMK16
            END                          ; * JMK16
            EMAIL.SHELL<30,VAL>=TO.ADD:'|':CC.ADD:'|':BCC.ADD          ; * JMK16
         NEXT VAL                        ; * JMK16
*        VCID=FIELD(MISROUTE.EMAIL.ID,'|',5)       ; * JMK04 ; * JMK13
         VCID=''                         ; * JMK13
         VCID=TRIM(VCID)                 ; * JMK10
         IF VCID='' THEN SUMMARY=1 ELSE SUMMARY=0  ; * JMK04
         NADDS=DCOUNT(EMAIL.SHELL<30>,@VM)         ; * JMK13
         FOR ADDS=1 TO NADDS             ; * JMK13
            EMAIL.IDS=EMAIL.SHELL<30,ADDS>         ; * JMK13
            EMAIL.REC=''                 ; * JMK13
            FOR ATT=1 TO 29              ; * JMK13
               EMAIL.REC<ATT>=EMAIL.SHELL<ATT,ADDS>          ; * JMK13
*              EMAIL.REC<ATT>=CHANGE(EMAIL.SHELL<ATT,ADDS>,@SVM,@VM)          ; * JMK13
            NEXT ATT                     ; * JMK13
            EMAIL.REC=CHANGE(EMAIL.REC,@SVM,@VM)   ; * JMK13
            NATT=DCOUNT(EMAIL.REC,@AM)   ; * JMK03
            NVAL=DCOUNT(EMAIL.REC<1>,@VM)          ; * JMK03
            FOR VAL=1 TO NVAL            ; * JMK03
               PRO.ID=EMAIL.REC<8,VAL>   ; * JMK03
               READ PRO.REC FROM F.BILLS.HIST,PRO.ID ELSE    ; * JMK03
                  GO SKIP.PRO            ; * JMK03
               END                       ; * JMK03
               SHIP.DATE = PRO.REC<1>    ; * JMK02
               IF LOG.ST.DT # "" THEN    ; * JMK02
                  IF SHIP.DATE < LOG.ST.DT THEN    ; * JMK02

                     GO SKIP.PRO         ; * JMK02
                  END                    ; * JMK02
               END                       ; * JMK02
               IOT = PRO.REC<2>

               NEW.VC.ID = VCID          ; * JMK09
               IF NEW.VC.ID MATCHES "5N" ELSE
                  IF SUMMARY=0 THEN      ; * JMK10
                     GO SKIP.PRO
                  END                    ; * JMK10
               END
               PREV.VC.ID = VC.ID
               PREV.LOC.ZIP = LOC.ZIP
               NEW.LOC.ZIP = PRO.REC<4>
               NEW.DIV.ID = PRO.REC<9>
               NEW.VC = 0
               NEW.DIV.LOC = 0
****************************************************************
* Check division
****************************************************************
               IF SUMMARY=0 THEN         ; * JMK04
                  IF NEW.LOC.ZIP # PREV.LOC.ZIP THEN
                     NEW.DIV.LOC = 1
                  END
               END                       ; * JMK04

****************************************************************
* Check Vendor/Customer
****************************************************************
               IF SUMMARY=0 THEN         ; * JMK04
                  IF NEW.VC.ID # PREV.VC.ID THEN
                     NEW.VC = 1
                  END
               END                       ; * JMK04

****************************************************************
* Check for New Division/Location or New Vendor Customer
****************************************************************
               IF NEW.DIV.LOC OR NEW.VC THEN
                  IF SHIPMENT.ARRAY # '' THEN
                     GOSUB PRINT.STORE.LTR
                  END
                  VC.ID = NEW.VC.ID
                  LOC.ZIP = NEW.LOC.ZIP
                  DIV.ID = NEW.DIV.ID
                  READ VC.REC FROM F.VC,VC.ID ELSE
                     ERROR = 'ERROR - Vendor Customer ':VC.ID:' for ':CLIENT:' not on file.'
                     IF FROM.PROCESS THEN
                        ERROR.ARRAY<-1> = ERROR
                     END ELSE
                        CALL ELINE(ERROR)
                     END
                     GO SKIP.PRO
                  END
                  IF FROM.PROCESS THEN
                     UP.ARRAY=VC.REC
                     UP.ID='VEND.CUST,':CLIENT:'*':VC.ID ; GOSUB UPDATE.UP.FILE
                  END
                  IF NEW.VC THEN
                     GOSUB CHANGE.VENDORS
                  END ELSE
                     GOSUB CHANGE.LOC.DIV
                  END
               END
****************************************************************
* Set values and shipment info
****************************************************************
               SHIP.DATE = PRO.REC<1>
               PRO.NUM=FIELD(PRO.ID,'*',2)
*              TOTAL.FREIGHT = PRO.REC<8>          ; * JMK27
               TOTAL.FREIGHT = PRO.REC<8>+PRO.REC<44>        ; * JMK27
               CORRECT.FREIGHT = PRO.REC<63>
               PO.BOL = PRO.REC<16>
               OVERCHARGE = TOTAL.FREIGHT-CORRECT.FREIGHT
               IF OVERCHARGE LE 0 THEN GO SKIP.PRO

****************************************************************
* Get Carrier Information
****************************************************************
               CARRIER.ID=FIELD(PRO.ID,'*',1)
               READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE
                  ERROR="ERROR - Carrier ":CARRIER.ID:" not on file."
                  IF FROM.PROCESS THEN
                     ERROR.ARRAY<-1> = ERROR
                  END ELSE
                     CALL ELINE(ERROR)
                  END
                  GO SKIP.PRO
               END
               UNAPPR.CARRIER.NAME = CARRIER.REC<1>

               APPR.CARRIER = PRO.REC<69>
               READ CARRIER.REC FROM F.CARRIERS,APPR.CARRIER ELSE
                  ERROR="ERROR - Carrier ":APPR.CARRIER:" not on file."
                  IF FROM.PROCESS THEN
                     ERROR.ARRAY<-1> = ERROR
                  END ELSE
                     CALL ELINE(ERROR)
                  END
                  GO SKIP.PRO
               END
               APPR.CARRIER.NAME = CARRIER.REC<1>
               IF PREV.APPR.CARRIER = '' OR PREV.APPR.CARRIER = '00000' THEN
                  PREV.APPR.CARRIER = APPR.CARRIER
               END

               APPR.CARRIER.ARRAY = PRO.REC<23>
               APPR.CARR.AMT.ARRAY = PRO.REC<22>
               NUM.APPR.CARRIERS = DCOUNT(APPR.CARRIER.ARRAY,@VM)
               IF NUM.APPR.CARRIERS GT 1 THEN
                  FOR X = 2 TO NUM.APPR.CARRIERS
                     APPR.CARRIER.ID = APPR.CARRIER.ARRAY<1,X>
                     READV CARRIER.NAME FROM F.CARRIERS,APPR.CARRIER.ID,1 ELSE CARRIER.NAME = ''
                     APPR.CARRIER.NAME<1,1,-1> = CARRIER.NAME
                     CORRECT.FREIGHT<1,1,-1> = APPR.CARR.AMT.ARRAY<1,X>
                     OVERCHARGE<1,1,-1> = TOTAL.FREIGHT-APPR.CARR.AMT.ARRAY<1,X>
                  NEXT X
               END

****************************************************************
* Check to see if approved carriers have changed
****************************************************************
               IF APPR.CARRIER # PREV.APPR.CARRIER AND PREV.APPR.CARRIER#'' AND PREV.APPR.CARRIER#'00000' AND APPR.CARRIER # '' AND APPR.CARRIER#'00000' THEN
                  CARR.CHG.FLAG = 1
                  PREV.APPR.CARRIER = APPR.CARRIER
                  NEXT.EVENT = ''
                  NEXT.EVENT.DATE = ''
               END
               IF PRO.NUM='999-999999-9' THEN CALL ELINE('PRESS BREAK')
****************************************************************
* Check Vendor/Customer and Division to see if waived or new
****************************************************************
               IF VC.WAIVED = 'Y' OR DIV.WAIVED = 'Y' OR OVERCHARGE<1,1,1> < THROW.AWAY.AMT THEN
                  IF IOT='I' THEN        ; * JMK03
                     LOCATE PRO.ID IN VC.REC<16,LOC.POS> SETTING TEST ELSE       ; * JMK03
                        VC.REC<11,LOC.POS,1> = LOC.ZIP       ; * JMK03
                        IF VC.WAIVED = 'Y' OR DIV.WAIVED = 'Y' THEN    ; * JMK03
                           VC.REC<15,LOC.POS,-1> = 'WV'      ; * JMK03
                        END ELSE         ; * JMK03
                           VC.REC<15,LOC.POS,-1> = 'TA'      ; * JMK03
                        END              ; * JMK03
                        VC.REC<16,LOC.POS,-1> = PRO.ID       ; * JMK03
                        VC.REC<17,LOC.POS,-1> = LTR.DATE     ; * JMK03

                        VC.REC<19,LOC.POS,-1> = 0  ; * JMK03
                     END                 ; * JMK03
                  END ELSE               ; * JMK03
                     LOCATE PRO.ID IN VC.REC<47,LOC.POS> SETTING TEST ELSE       ; * JMK03
                        VC.REC<42,LOC.POS,1> = LOC.ZIP
                        IF VC.WAIVED = 'Y' OR DIV.WAIVED = 'Y' THEN
                           VC.REC<46,LOC.POS,-1> = 'WV'
                        END ELSE
                           VC.REC<46,LOC.POS,-1> = 'TA'
                        END
                        VC.REC<47,LOC.POS,-1> = PRO.ID
                        VC.REC<48,LOC.POS,-1> = LTR.DATE
*tbs                    VC.REC<49,LOC.POS,-1> = APPR.CARRIER
                        VC.REC<50,LOC.POS,-1> = 0
                     END                 ; * JMK03
                  END                    ; * JMK03
                  IF VC.ID#'' AND TESTING=0 THEN   ; * JMK09
                     WRITE VC.REC ON F.VC,VC.ID
                  END                    ; * JMK09
                  PREV.APPR.CARRIER = ''
                  GO SKIP.PRO
               END


****************************************************************
* Stores shipment information for later use
****************************************************************
               NXVAL=DCOUNT(SHIPMENT.ARRAY<1>,@VM)+1         ; * JMK03
               FOR ATT=1 TO NATT         ; * JMK03
                  SHIPMENT.ARRAY<ATT,NXVAL> = EMAIL.REC<ATT,VAL>       ; * JMK03
               NEXT ATT                  ; * JMK03
               TOTAL.MR.FRT = TOTAL.MR.FRT + TOTAL.FREIGHT
               TOTAL.CORRECT.FRT = TOTAL.CORRECT.FRT + CORRECT.FREIGHT<1,1,1>
               TOTAL.OVERCHARGE = TOTAL.OVERCHARGE + OVERCHARGE<1,1,1>
               IF TYPE.DM = 'T' THEN
                  DM.AMT = DM.AMT + TOTAL.FREIGHT
               END ELSE
                  DM.AMT = DM.AMT + OVERCHARGE<1,1,1>
               END
SKIP.PRO:      ***
            NEXT VAL                     ; * JMK03
            IF SHIPMENT.ARRAY # '' THEN  ; * JMK13
               GOSUB PRINT.STORE.LTR     ; * JMK13
            END                          ; * JMK13
         NEXT ADDS                       ; * JMK13
         IF TESTING=0 THEN
            DELETE F.MISROUTE.EMAIL,MISROUTE.EMAIL.ID
         END

         IF SHIPMENT.ARRAY # '' THEN     ; * JMK10
            GOSUB PRINT.STORE.LTR        ; * JMK10
         END                             ; * JMK10
                                         ; * JMK04
SKIP.EMAIL:***
      REPEAT
EXIT.PROGRAM:***
      IF FROM.PROCESS THEN
         CRT @(0,0):@(-3)
         ECOUNT = DCOUNT(ERROR.ARRAY,@VM)
         FOR X = 1 TO ECOUNT
*            CRT @(0,X+5):ERROR.ARRAY(X)  ; * SBARBEE CACHE SYNTAX FIXES
            CRT @(0,X+5):ERROR.ARRAY<X>  ; * SBARBEE CACHE SYNTAX FIXES
         NEXT X
         IF LCC.OVERCHARGE+0#0 THEN      ; * JMK28
            VC.NAME=''                   ; * JMK28
            VC.ADDR1=''                  ; * JMK28
            VC.ADDR2=''                  ; * JMK28
            VC.CITY=''                   ; * JMK28
            VC.ST=''                     ; * JMK28
            VC.ZIP=''                    ; * JMK28
            DM.TOTAL=''                  ; * JMK28
            LOC.DESC=''                  ; * JMK28
            VCI=''                       ; * JMK28
            CONF.LINE=''                 ; * JMK28
            EMAIL.IDS=''                 ; * JMK28
            EMAIL.SHELL=''               ; * JMK28
            GOSUB PRINT.STORE.LTR        ; * JMK28
         END                             ; * JMK28
         RETURN
      END ELSE
         IF LCC.OVERCHARGE+0#0 THEN      ; * JMK28
            VC.NAME=''                   ; * JMK28
            VC.ADDR1=''                  ; * JMK28
            VC.ADDR2=''                  ; * JMK28
            VC.CITY=''                   ; * JMK28
            VC.ST=''                     ; * JMK28
            VC.ZIP=''                    ; * JMK28
            DM.TOTAL=''                  ; * JMK28
            LOC.DESC=''                  ; * JMK28
            VCI=''                       ; * JMK28
            CONF.LINE=''                 ; * JMK28
            EMAIL.IDS=''                 ; * JMK28
            EMAIL.SHELL=''               ; * JMK28
            GOSUB PRINT.STORE.LTR        ; * JMK28
         END                             ; * JMK28
         STOP
      END

*****************************************************************
* CHANGE.VENDORS
*****************************************************************
CHANGE.VENDORS:***
      VC.NAME = VC.REC<1>
      VC.ADDR1 = VC.REC<3,1>
      VC.ADDR2 = VC.REC<3,2>
      VC.CITY = VC.REC<5>
      VC.ST = VC.REC<6>
      VC.ZIP = VC.REC<7>
      VC.WAIVED = OCONV(VC.REC<10>,'MCU')
      VCI = VC.REC<4>
      IF VCI='R' THEN VCI='V'            ; * JMK12
      NEW.VC=0
      LOC.ZIP=VC.ZIP

*****************************************************************
* CHANGE DIVISIONS AND LOCATIONS
*****************************************************************
CHANGE.LOC.DIV:***

      IF DIVISIONS = 'Y' THEN
         MATREAD DIV.REC FROM F.DIV,DIV.ID THEN
            DIV.ZIP = DIV.REC(1,1)
         END
      END ELSE
         DIV.ZIP = PRO.REC<4>
      END

      READ ZIP.REC FROM F.ZIPS,DIV.ZIP THEN
         DIV.DESC = ZIP.REC<1> :', ':ZIP.REC<2>:' ': DIV.ZIP
      END ELSE
         DIV.DESC = ''
      END

      READ ZIP.REC FROM F.ZIPS,LOC.ZIP THEN
         LOC.DESC = ZIP.REC<1> :', ':ZIP.REC<2>:' ':LOC.ZIP
      END ELSE
         LOC.DESC = ''
      END

      PREV.LOC.ZIP = LOC.ZIP
*
*CHECK DIVISIONAL INFORMATION
*
      IF IOT='I' THEN                    ; * JMK03
         LOCATE LOC.ZIP IN VC.REC<11> BY 'AL' SETTING LOC.POS ELSE     ; * JMK03
            INS LOC.ZIP BEFORE VC.REC<11,LOC.POS>  ; * JMK03
            INS '' BEFORE VC.REC<12,LOC.POS>       ; * JMK03
            INS '' BEFORE VC.REC<13,LOC.POS>       ; * JMK03
            INS '' BEFORE VC.REC<14,LOC.POS>       ; * JMK03
            INS '' BEFORE VC.REC<15,LOC.POS>       ; * JMK03
            INS '' BEFORE VC.REC<16,LOC.POS>       ; * JMK03
            INS '' BEFORE VC.REC<17,LOC.POS>       ; * JMK03
*tbs        INS '' BEFORE VC.REC<18,LOC.POS>; * JMK03
            INS '' BEFORE VC.REC<19,LOC.POS>       ; * JMK03
            INS '' BEFORE VC.REC<20,LOC.POS>       ; * JMK03
            INS 'N' BEFORE VC.REC<21,LOC.POS>      ; *JMK03
            IF VC.ID#'' AND TESTING=0 THEN         ; * JMK09
               WRITE VC.REC ON F.VC,VC.ID          ; * JMK03
            END                          ; * JMK09
         END                             ; * JMK03
         DIV.WAIVED = VC.REC<21,LOC.POS,1>         ; * JMK03
         NEXT.EVENT = VC.REC<12,LOC.POS,1>         ; * JMK03
         NEXT.EVENT.DATE = VC.REC<13,LOC.POS,1>    ; * JMK03
         NEXT.EVENT.OVERIDE = VC.REC<14,LOC.POS,1>           ; * JMK03
         LOCATE PRO.ID IN VC.REC<16,LOC.POS> SETTING PRO.POS THEN      ; * JMK05
            LTR.TYPE=VC.REC<15,LOC.POS,PRO.POS>    ; * JMK05
            MR.UPD=0                     ; * JMK26
         END ELSE                        ; * JMK26
            MR.UPD=1                     ; * JMK26
         END                             ; * JMK05
      END ELSE                           ; * JMK03
         LOCATE LOC.ZIP IN VC.REC<42> BY 'AL' SETTING LOC.POS ELSE
            INS LOC.ZIP BEFORE VC.REC<42,LOC.POS>
            INS '' BEFORE VC.REC<43,LOC.POS>
            INS '' BEFORE VC.REC<44,LOC.POS>
            INS '' BEFORE VC.REC<45,LOC.POS>
            INS '' BEFORE VC.REC<46,LOC.POS>
            INS '' BEFORE VC.REC<47,LOC.POS>
            INS '' BEFORE VC.REC<48,LOC.POS>
*tbs        INS '' BEFORE VC.REC<49,LOC.POS>
            INS '' BEFORE VC.REC<50,LOC.POS>
            INS '' BEFORE VC.REC<51,LOC.POS>
            INS 'N' BEFORE VC.REC<52,LOC.POS>
            IF VC.ID#'' AND TESTING=0 THEN         ; * JMK09
               WRITE VC.REC ON F.VC,VC.ID
            END                          ; * JMK09
         END
         DIV.WAIVED = VC.REC<52,LOC.POS,1>
         NEXT.EVENT = VC.REC<43,LOC.POS,1>
         NEXT.EVENT.DATE = VC.REC<44,LOC.POS,1>
         NEXT.EVENT.OVERIDE = VC.REC<45,LOC.POS,1>
         LOCATE PRO.ID IN VC.REC<47,LOC.POS> SETTING PRO.POS THEN      ; * JMK05
            LTR.TYPE=VC.REC<46,LOC.POS,PRO.POS>    ; * JMK05
            MR.UPD=0                     ; * JMK26
         END ELSE                        ; * JMK26
            MR.UPD=1                     ; * JMK26
         END                             ; * JMK05
      END                                ; * JMK03
      IF NEXT.EVENT.OVERIDE # '' THEN
         NEXT.EVENT = NEXT.EVENT.OVERIDE
         NEXT.EVENT.DATE = LTR.DATE
      END
      IF IOT='I' THEN                    ; * JMK03
         LTRS.SENT = VC.REC<15,LOC.POS>  ; * JMK03
         MR.PROS = VC.REC<16,LOC.POS>    ; * JMK03
         NUM.SHIPS = DCOUNT(MR.PROS,@SVM)          ; * JMK03
         LTR.DATES = VC.REC<17,LOC.POS>  ; * JMK03
         LAST.PRO = MR.PROS<1,1,NUM.SHIPS>         ; * JMK03
      END ELSE                           ; * JMK03
         LTRS.SENT = VC.REC<46,LOC.POS>
         MR.PROS = VC.REC<47,LOC.POS>
         NUM.SHIPS = DCOUNT(MR.PROS,@SVM)
         LTR.DATES = VC.REC<48,LOC.POS>
         LAST.PRO = MR.PROS<1,1,NUM.SHIPS>
      END                                ; * JMK03
      READV PREV.APPR.CARRIER FROM F.BILLS.HIST,LAST.PRO,69 ELSE PREV.APPR.CARRIER = ''
      CARR.CHG.FLAG = 0
      TOTAL.MR.FRT = 0
      TOTAL.CORRECT.FRT = 0
      TOTAL.OVERCHARGE = 0
      DM.AMT = 0
      SHIPMENT.ARRAY = ''
      MISROUTE.ARRAY = ''                ; * JMK06
      NEW.DIV.LOC = 0
      CONF.NUM = LTR.DATE:'*':CLIENT:'*':VC.ID:'*':LOC.ZIP
      CONF.LINE = SPACES(10):CONF.NUM
      RETURN

*****************************************************************
* PRINT AND STORE EMAIL
*****************************************************************
PRINT.STORE.LTR:***

*****************************************************************
* DECIDE.LTR.TYPE
*****************************************************************
*     IF SUMMARY=0 THEN                  ; * JMK04 ; * JMK26
*     IF LTR.TYPE='' THEN                ; * JMK05 ; * JMK26
      IF TOT.OVERCHARGE+0#0 THEN         ; * JMK28
         IF MR.UPD=1 THEN                ; * JMK05 ; * JMK26
            BEGIN CASE
               CASE VCI = 'C' OR VCI = 'I' OR NUM.WARNINGS = 'N'
                  BEGIN CASE
                     CASE NEXT.EVENT = '' OR NEXT.EVENT = 'LTR1'
                        LTR.TYPE = 'LTR1'
                        NEW.EVENT = 'LTR2'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR2' AND NEXT.EVENT.DATE = ''
                        LTR.TYPE = 'LTR1'
                        NEW.EVENT = 'LTR2'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR2' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR1'
                        NEW.EVENT = 'LTR2'
                     CASE NEXT.EVENT = 'LTR2' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'LTR3'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR3' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'LTR3'
                     CASE NEXT.EVENT = 'LTR3' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR3'
                        NEW.EVENT = 'LTR4'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR4' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR3'
                        NEW.EVENT = 'LTR4'
                     CASE NEXT.EVENT = 'LTR4' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR4'
                        NEW.EVENT = 'LTR5'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR5' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR4'
                        NEW.EVENT = 'LTR5'
                     CASE NEXT.EVENT = 'LTR5' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR5'
                        NEW.EVENT = 'LTR6'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR6' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR5'
                        NEW.EVENT = 'LTR6'
                     CASE NEXT.EVENT = 'LTR6' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR6'
                        NEW.EVENT = 'LTR6'
                     CASE NEXT.EVENT = 'DM'
                        LTR.TYPE = 'LTR3'
                        NEW.EVENT = 'LTR4'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS

                  END CASE

               CASE NUM.WARNINGS = 2
                  BEGIN CASE
                     CASE NEXT.EVENT = '' OR NEXT.EVENT = 'LTR1'
                        LTR.TYPE = 'LTR1'
                        NEW.EVENT = 'LTR2'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR2' AND NEXT.EVENT.DATE = ''
                        LTR.TYPE = 'LTR1'
                        NEW.EVENT = 'LTR2'
                        NEXT.EVENT.DATE = LTR.DATE + LTR2.DAYS
                     CASE NEXT.EVENT = 'LTR2' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR1'
                        NEW.EVENT = 'LTR2'
                     CASE NEXT.EVENT = 'LTR2' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'DM'
                        NEXT.EVENT.DATE = LTR.DATE + DM.DAYS
                     CASE NEXT.EVENT = 'LTR3' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'LTR3' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'DM'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'LTR4' OR NEXT.EVENT = 'LTR5' OR NEXT.EVENT = 'LTR6'
                        LTR.TYPE = 'DM'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'DM' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'DM' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'DM'
                        NEW.EVENT = 'DM'
                  END CASE
               CASE NUM.WARNINGS = 1
                  BEGIN CASE
                     CASE NEXT.EVENT = '' OR NEXT.EVENT = 'LTR2'
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'DM'
                        NEXT.EVENT.DATE = LTR.DATE + DM.DAYS
                     CASE NEXT.EVENT = 'LTR1'
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'DM'
                        NEXT.EVENT.DATE = LTR.DATE +DM.DAYS
                     CASE NEXT.EVENT = 'LTR3' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'LTR3' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'DM'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'LTR4' OR NEXT.EVENT = 'LTR5' OR NEXT.EVENT = 'LTR6'
                        LTR.TYPE = 'DM'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'DM' AND SHIP.DATE LT NEXT.EVENT.DATE
                        LTR.TYPE = 'LTR2'
                        NEW.EVENT = 'DM'
                     CASE NEXT.EVENT = 'DM' AND SHIP.DATE GE NEXT.EVENT.DATE
                        LTR.TYPE = 'DM'
                        NEW.EVENT = 'DM'
                  END CASE
               CASE NUM.WARNINGS = 0
                  LTR.TYPE = 'DM'
                  NEW.EVENT = 'DM'
               CASE 1
                  LTR.TYPE = 'LTR1'
                  NEW.EVENT = 'LTR2'
            END CASE
         END                             ; * JMK05
         IF DM.AMT LT MIN.DM.AMT THEN
            DM.TOTAL = MIN.DM.AMT
         END ELSE
            DM.TOTAL = DM.AMT
         END
         IF IOT='I' THEN                 ; * JMK03
            LOCATE PRO.ID IN VC.REC<16,LOC.POS> SETTING TEST ELSE      ; * JMK03
               VC.REC<11,LOC.POS,1> = LOC.ZIP      ; * JMK03
               VC.REC<12,LOC.POS,1> = NEW.EVENT    ; * JMK03
               VC.REC<13,LOC.POS,1> = NEXT.EVENT.DATE        ; * JMK03
               VC.REC<14,LOC.POS,1> = ''           ; * JMK03
               IF LTR.TYPE = 'DM' THEN   ; * JMK03
                  IF FROM.PROCESS THEN   ; * JMK03
                     UP.ARRAY<1> = '*NEW*'         ; * JMK03
                     UP.ID='FB.LOGISTICS*':CONF.NUM ; GOSUB UPDATE.UP.FILE       ; * JMK03
                  END                    ; * JMK03
*                 DM.REC<1> = LTR.DATE            ; * JMK01; * JMK03
                  DM.REC<1> = PROCESS.END.DATE+1   ; * JMK01; * JMK03
                  DM.COMM = DM.TOTAL*(CONSULTING.COMM/10000)'R0'       ; * JMK03
                  IF DM.COMM<2000 THEN DM.COMM=2000          ; * JMK18
                  DM.REC<2> = DM.COMM    ; * JMK03
                  DM.REC<3> = DIV.ID     ; * JMK03
                  DM.COMM = (DM.TOTAL*(CONSULTING.COMM/10000))'R0'     ; * JMK03
                  IF DM.COMM<2000 THEN DM.COMM=2000          ; * JMK18
                  DM.REC<4> = DM.COMM    ; * JMK03
                  DM.REC<5> = VC.ID      ; * JMK03
                  DM.REC<6> = LOC.ZIP    ; * JMK03
               END                       ; * JMK03
               SHIP.COUNT = DCOUNT(SHIPMENT.ARRAY<1>,@VM)    ; * JMK03
               FOR X = 1 TO SHIP.COUNT   ; * JMK03
                  VC.REC<15,LOC.POS,-1> = LTR.TYPE           ; * JMK03
                  VC.REC<16,LOC.POS,-1> = SHIPMENT.ARRAY<8,X>          ; *PRO.ID; * JMK03
                  VC.REC<17,LOC.POS,-1> = LTR.DATE           ; * JMK03
*tbs              VC.REC<18,LOC.POS,-1> = SHIPMENT.ARRAY<9,X>   ; *APPR.CARRIER; * JMK03
                  IF LTR.TYPE = 'DM' THEN          ; * JMK03
                     IF X = 1 THEN       ; * JMK03
                        VC.REC<19,LOC.POS,-1> = DM.TOTAL     ; * JMK03
                     END ELSE            ; * JMK03
                        VC.REC<19,LOC.POS,-1> = 0  ; * Only report the Full Amount Once; * JMK03
                     END                 ; * JMK03
                     DM.REC<7,-1> = SHIPMENT.ARRAY<8,X>      ; *PRO.ID; * JMK03
                     DM.REC<8,-1> = SHIPMENT.ARRAY<7,X>      ; *OVERCHAGE AMT; * JMK03
                     DM.AMT = SHIPMENT.ARRAY<7,X>  ; * JMK03
                  END ELSE               ; * JMK03
                     VC.REC<19,LOC.POS,-1> = 0     ; * JMK03
                  END                    ; * JMK03
               NEXT X                    ; * JMK03
               IF LTR.TYPE = 'DM' AND TESTING=0 THEN         ; * JMK03
                  MVIN = ''              ; * JMK03
                  WRITE DM.REC ON F.LOGS,CONF.NUM  ; * JMK03
                  SUBJ='Debit Memo'      ; * JMK03
                  TEXT='The following is a notification of a debit memo that will be added to your Invoice next week.'
                  TEXT<1,-1>='You will need to reduce your payment to this vendor in the amount of ':DM.TOTAL'R26,$':', and enclose a'
                  TEXT<1,-1>='copy of the debit memo when remitting your payment to the vendor.'
                  TEXT<1,-1>=' '
                  TEXT<1,-1>='This Vendor has been notified a minimum of three times instructing them to change their'
                  TEXT<1,-1>='routing on shipments to you, and they have failed to comply.'
                  TEXT<1,-1>='These misroutes have resulted in excessive freight charges to your company.'
                  TEXT<1,-1>=' '
                  TEXT<1,-1> = 'The following debit memo was sent out on :':DATE()'D2/'    ; * JMK03
                  TEXT<1,-1> = ' '       ; * JMK03
                  TEXT<1,-1> = 'Client            : ':CLIENT:' - ':CLIENT.REC<2>           ; * JMK03
                  TEXT<1,-1> = 'Vendor            : ':VC.ID:' - ':VC.NAME        ; * JMK03
*DF               TEXT<1,-1> = 'Debit Memo Amt    : ':DM.AMT<1,1>'R26#8'; * JMK03
                  TEXT<1,-1> = 'Debit Memo Amt    : ':DM.TOTAL'R26,$'  ; * JMK03
*DF                  TEXT<1,-1> = 'AFS commission    : ':DM.COMM'R26#8'   ; * JMK03
                  TEXT<1,-1> = 'Confirmation #    : ':CONF.NUM         ; * JMK03
                  TEXT<1,-1> = 'Carrier used      : ':CARRIER.ID: ' - ':UNAPPR.CARRIER.NAME          ; * JMK03
                  NUM.APPR.CARRIERS = DCOUNT(APPR.CARRIER.ARRAY,@VM)   ; * JMK03
                  FOR X = 1 TO NUM.APPR.CARRIERS   ; * JMK03
                     IF X = 1 THEN LINE = 'Approved carriers : ' ELSE LINE = SPACE(20)     ; * JMK03
                     LINE := APPR.CARRIER.ARRAY<1,X>:' - ':APPR.CARRIER.NAME<1,1,X>        ; * JMK03
                     TEXT<1,-1> = LINE   ; * JMK03
                  NEXT X                 ; * JMK03
                  TEXT<1,-1> = ' '       ; * JMK03
                  TEXT<1,-1>='If you have any questions, please call (877)531-2796 option 2.'
                  TEXT<1,-1>=' '
                  TEXT<1,-1>='Sincerely,'
                  TEXT<1,-1>=' '
* Begin GRB01
                 
                  TEXT<1,-1>='Customer Service Department'
                  TEXT<1,-1>='AFS Logistics, LLC'
                  TEXT<1,-1>='877-531-2796 option 2'
                  TEXT<1,-1>='FAX: 318-841-9286'
                  TEXT<1,-1>='CustomerService@afs.net'

                  MVIN<1>='ltlsupport@afs.net'     ; * NPR97
                  ADD.CNT = DCOUNT(CLIENT.REC<153>,@VM)
                  FOR JJ = 1 TO ADD.CNT
                     MVIN<1,-1>=CLIENT.REC<153,JJ>
                  NEXT JJ
                  MVIN<3> = 'nmeddaugh@afs.net'
                  * End GRB01
                  **** MVIN<2>='nkelly@afs.net'         ; * JMK29 ; * JMK30

                  MVIN<4>='AFS'          ; * JMK03
                  MVIN<5>=SUBJ           ; * JMK03
                  MVIN<6>=TEXT           ; * JMK03
                  CALL SENDMAIL(MVIN,MVOUT)        ; * JMK03
               END                       ; * JMK03
            END
         END ELSE                        ; * JMK03
            LOCATE PRO.ID IN VC.REC<47,LOC.POS> SETTING TEST ELSE      ; * JMK03
               VC.REC<42,LOC.POS,1> = LOC.ZIP
               VC.REC<43,LOC.POS,1> = NEW.EVENT
               VC.REC<44,LOC.POS,1> = NEXT.EVENT.DATE
               VC.REC<45,LOC.POS,1> = ''
               SHIP.COUNT = DCOUNT(SHIPMENT.ARRAY<1>,@VM)
               FOR X = 1 TO SHIP.COUNT
                  VC.REC<46,LOC.POS,-1> = LTR.TYPE
                  VC.REC<47,LOC.POS,-1> = SHIPMENT.ARRAY<8,X>          ; *PRO.ID
                  VC.REC<48,LOC.POS,-1> = LTR.DATE
                  VC.REC<50,LOC.POS,-1> = 0
               NEXT X
            END                          ; * JMK03
         END                             ; * JMK03
         IF VC.ID#'' AND TESTING=0 THEN  ; * JMK09
            WRITE VC.REC ON F.VC,VC.ID
         END                             ; * JMK09
         IF LTR.TYPE # '' AND LTR.TYPE # 'LTR1' THEN         ; * JMK06
            IF IOT='I' THEN              ; * JMK06
               NSVAL=DCOUNT(VC.REC<16,LOC.POS>,@SVM)         ; * JMK06
               FOR SVAL=1 TO NSVAL       ; * JMK06
                  IF VC.REC<17,LOC.POS,SVAL> < LTR.DATE THEN           ; * JMK06
                     PRV.PRO.ID=VC.REC<16,LOC.POS,SVAL>      ; * JMK06
                     READ PRV.FBH.REC FROM F.BILLS.HIST,PRV.PRO.ID THEN          ; * JMK06
                        PRV.UNAPPR.CARRIER.ID=FIELD(PRV.PRO.ID,'*',1)  ; * JMK06
                        READ PRV.UNAPPR.CARRIER.REC FROM F.CARRIERS,PRV.UNAPPR.CARRIER.ID ELSE PRV.UNAPPR.CARRIER.REC=''           ; * JMK06
                        PRV.UNAPPR.CARRIER.NAME=PRV.UNAPPR.CARRIER.REC<1>        ; * JMK06
                        PRV.APPR.CARRIER.ID=PRV.FBH.REC<69>  ; * JMK06
                        READ PRV.APPR.CARRIER.REC FROM F.CARRIERS,PRV.APPR.CARRIER.ID ELSE PRV.APPR.CARRIER.REC=''       ; * JMK06
                        PRV.APPR.CARRIER.NAME=PRV.APPR.CARRIER.REC<1>  ; * JMK06
                        PRV.PRO.NUM=FIELD(PRV.PRO.ID,'*',2)  ; * JMK06
                        PRV.SHIP.DATE=PRV.FBH.REC<1>         ; * JMK06
*                    PRV.TOTAL.FREIGHT=PRV.FBH.REC<8>     ; * JMK06 ; * JMK27
                        PRV.TOTAL.FREIGHT=PRV.FBH.REC<8>+PRV.FBH.REC<44>         ; * JMK06 ; * JMK27
                        PRV.CORRECT.FREIGHT=PRV.FBH.REC<63>  ; * JMK06
                        PRV.OVERCHARGE=PRV.TOTAL.FREIGHT-PRV.CORRECT.FREIGHT     ; * JMK06
                        PRV.PO.BOL=PRV.FBH.REC<16>           ; * JMK06
                        IF PRV.OVERCHARGE+0#0 THEN           ; * JMK11
                           MISROUTE.ARRAY<1,-1> = PRV.UNAPPR.CARRIER.NAME        ; * JMK06
                           MISROUTE.ARRAY<2,-1> = PRV.PRO.NUM          ; * JMK06
                           MISROUTE.ARRAY<3,-1> = PRV.SHIP.DATE        ; * JMK06
                           MISROUTE.ARRAY<4,-1> = PRV.TOTAL.FREIGHT    ; * JMK06
                           MISROUTE.ARRAY<5,-1> = PRV.APPR.CARRIER.NAME          ; * JMK06
                           MISROUTE.ARRAY<6,-1> = PRV.CORRECT.FREIGHT  ; * JMK06
                           MISROUTE.ARRAY<7,-1> = PRV.OVERCHARGE       ; * JMK06
                           MISROUTE.ARRAY<8,-1> = PRV.PRO.ID           ; * JMK06
                           MISROUTE.ARRAY<9,-1> = PRV.APPR.CARRIER.ID  ; * JMK06
                           MISROUTE.ARRAY<10,-1> = PO.BOL    ; * JMK06
                        END              ; * JMK11
                     END                 ; * JMK06
                  END                    ; * JMK06
               NEXT SVAL                 ; * JMK06
            END ELSE                     ; * JMK04
               NSVAL=DCOUNT(VC.REC<47,LOC.POS>,@SVM)         ; * JMK06
               FOR SVAL=1 TO NSVAL       ; * JMK06
                  IF VC.REC<48,LOC.POS,SVAL> < LTR.DATE THEN           ; * JMK06
                     PRV.PRO.ID=VC.REC<47,LOC.POS,SVAL>      ; * JMK06
                     READ PRV.FBH.REC FROM F.BILLS.HIST,PRV.PRO.ID THEN          ; * JMK06
                        PRV.UNAPPR.CARRIER.ID=FIELD(PRV.PRO.ID,'*',1)  ; * JMK06
                        READ PRV.UNAPPR.CARRIER.REC FROM F.CARRIERS,PRV.UNAPPR.CARRIER.ID ELSE PRV.UNAPPR.CARRIER.REC=''           ; * JMK06
                        PRV.UNAPPR.CARRIER.NAME=PRV.UNAPPR.CARRIER.REC<1>        ; * JMK06
                        PRV.APPR.CARRIER.ID=PRV.FBH.REC<69>  ; * JMK06
                        READ PRV.APPR.CARRIER.REC FROM F.CARRIERS,PRV.APPR.CARRIER.ID ELSE PRV.APPR.CARRIER.REC=''       ; * JMK06
                        PRV.APPR.CARRIER.NAME=PRV.APPR.CARRIER.REC<1>  ; * JMK06
                        PRV.PRO.NUM=FIELD(PRV.PRO.ID,'*',2)  ; * JMK06
                        PRV.SHIP.DATE=PRV.FBH.REC<1>         ; * JMK06
*                    PRV.TOTAL.FREIGHT=PRV.FBH.REC<8>     ; * JMK06 ; * JMK27
                        PRV.TOTAL.FREIGHT=PRV.FBH.REC<8>+PRV.FBH.REC<44>         ; * JMK06 ; * JMK27
                        PRV.CORRECT.FREIGHT=PRV.FBH.REC<63>  ; * JMK06
                        PRV.OVERCHARGE=PRV.TOTAL.FREIGHT-PRV.CORRECT.FREIGHT     ; * JMK06
                        PRV.PO.BOL=PRV.FBH.REC<16>           ; * JMK06
                        IF PRV.OVERCHARGE+0#0 THEN           ; * JMK11
                           MISROUTE.ARRAY<1,-1> = PRV.UNAPPR.CARRIER.NAME        ; * JMK06
                           MISROUTE.ARRAY<2,-1> = PRV.PRO.NUM          ; * JMK06
                           MISROUTE.ARRAY<3,-1> = PRV.SHIP.DATE        ; * JMK06
                           MISROUTE.ARRAY<4,-1> = PRV.TOTAL.FREIGHT    ; * JMK06
                           MISROUTE.ARRAY<5,-1> = PRV.APPR.CARRIER.NAME          ; * JMK06
                           MISROUTE.ARRAY<6,-1> = PRV.CORRECT.FREIGHT  ; * JMK06
                           MISROUTE.ARRAY<7,-1> = PRV.OVERCHARGE       ; * JMK06
                           MISROUTE.ARRAY<8,-1> = PRV.PRO.ID           ; * JMK06
                           MISROUTE.ARRAY<9,-1> = PRV.APPR.CARRIER.ID  ; * JMK06
                           MISROUTE.ARRAY<10,-1> = PRV.PO.BOL          ; * JMK06
                        END              ; * JMK11
                     END                 ; * JMK06
                  END                    ; * JMK06
               NEXT SVAL                 ; * JMK06
            END                          ; * JMK04
         END                             ; * JMK06
*     END ELSE                           ; * JMK04 ; * JMK26
         IF SUMMARY=1 THEN               ; * JMK26
            VC.NAME=''                   ; * JMK04
            VC.ADDR1=''                  ; * JMK04
            VC.ADDR2=''                  ; * JMK04
            VC.CITY=''                   ; * JMK04
            VC.ST=''                     ; * JMK04
            VC.ZIP=''                    ; * JMK04
            DM.TOTAL=''                  ; * JMK04
            LOC.DESC=''                  ; * JMK04
            VCI=''                       ; * JMK04
            CONF.LINE=''                 ; * JMK04
         END                             ; * JMK04
      END                                ; * JMK28
      VIN=''
*     IF TOTAL.OVERCHARGE+0#0 THEN       ; * JMK07 ; * JMK28
      IF TOTAL.OVERCHARGE+LCC.OVERCHARGE#0 THEN    ; * JMK28
         VIN<1> = VC.NAME
         VIN<2> = VC.ADDR1
         VIN<3> = VC.ADDR2
         VIN<4> = VC.CITY
         VIN<5> = VC.ST
         VIN<6> = VC.ZIP
         VIN<7> = CLIENT.NAME
         VIN<8> = DIV.ID
         VIN<9> = DIV.DESC
         VIN<10> = CARR.CHG.FLAG
         VIN<11> = DM.TOTAL
         VIN<12> = LOC.DESC
         VIN<13> = TOTAL.OVERCHARGE
         VIN<14> = CONF.LINE
         VIN<15> = LTR.DATE
         VIN<16> = LTR.TYPE
         VIN<17> = VCI
         VIN<18> = CLIENT
         VIN<19> = MIN.DM.AMT
*        VIN<20> = MISROUTE.EMAIL.ID     ; * JMK03 ; * JMK13
         VIN<20> = EMAIL.IDS             ; * JMK13
         VIN<21>=USER                    ; * JMK08
         VIN<22>=CH.NUM                  ; * JMK08
         VIN<23>=EMAIL.SHELL<30>         ; * JMK15
         VIN<24>=ONCE                    ; * JMK24
         VIN<25>=MSR.FLG                 ; * JMK28
         VIN<26>=LCC.FLG                 ; * JMK28
         VIN<27>=LCC.OVERCHARGE          ; * JMK28
         VIN<28>=LCC.ATTACH.ID           ; * JMK28

         CALL FB.SEND.MISROUTE.EMAILS(VIN,SHIPMENT.ARRAY,MISROUTE.ARRAY,F.CLIENTS,F.CARRIERS,F.TRANSPORT,F.TABLES)       ; * JMK06; * JMK08
*
      END                                ; * JMK07
      LTR.TYPE=''                        ; * JMK05
      SHIPMENT.ARRAY=''                  ; * JMK10
      TOTAL.OVERCHARGE=0                 ; * JMK10
      RETURN

*****************************************************************
* UPDATE.UP.FILE-UPDATE THE UNPROCESS FILE
*****************************************************************
UPDATE.UP.FILE:*
      IF TESTING=0 THEN
         READV DUMMY FROM F.UP,UP.ID,1 ELSE
            WRITE UP.ARRAY ON F.UP,UP.ID
         END
      END
      RETURN
****************************************************************
* INITIALIZE.VARIABLES
*****************************************************************
INITIALIZE.VARIABLES:**

      APPR.CARRIER = ''
      CARR.CHG.FLAG = 0
      DIV.DESC=''
      DIV.ID=''
      DIV.WAIVED='N'
      DM.AMT=0
      DM.DAYS = 13
      DM.REC = ''
      ERROR.ARRAY = ''
      LOC.ZIP = ''
      LINE.NUM=0
      LTR.DATE = DATE()
      LTR.TYPE=''
      LTR2.DAYS = 6
      NEW.VC.ID = ''
      NEW.LOC.ZIP = ''
      NEW.DIV.LOC = 0
      NEW.EVENT=''
      NEW.VC = 0
      PREV.APPR.CARRIER = ''
      PREV.LOC.ZIP = ''
      PREV.VC.ID = ''
      NEW.VC.ID=''
      SHIPMENT.ARRAY=''
      TOTAL.CORRECT.FRT = ''
      TOTAL.MR.FRT = ''
      TOTAL.OVERCHARGE = ''
      DM.AMT = ''
      VC.ID =''
      VC.REC = ''
      VC.WAIVED='N'

      RETURN
