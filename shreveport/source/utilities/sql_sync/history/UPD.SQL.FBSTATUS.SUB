      SUBROUTINE UPD.SQL.FBSTATUS.SUB(VIN,VOUT,BILL.REC,F.SQL.STATUS)
***********************************************************************
* ANALYZE BILLS ACTED UPON BY AUDITORS
* COPYRIGHT (C) AFS LOGISTICS, LLC., 2002
*
* AUTHOR : OWEN HOLMAN
* DATE   : JANUARY 2002
*************************************************************************
* 061912 - JMK01 - Choose development SQL server if not production server AFS
*************************************************************************
      UPL.VIN = 'FBBP' ; UPL.VIN<2> = 'UPD.SQL.FBSTATUS.SUB' ; UPL.VOUT = ''     ; * NPR_UPL 04/23/2010
      CALL GET.USER.NEW(USER,CH.NUM)
      UPL.VIN<3> = USER
      UPL.VIN<3> = CH.NUM
      CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)       ; * NPR_UPL 04/23/2010
!
* INCLUDE THE ODBC DEFINITIONS
!
$INCLUDE UNIVERSE.INCLUDE ODBC.H
      CALL GET.SERVER.INFO(SVR.VIN,SVR.VOUT)       ; * JMK01
      SVR.NAME=SVR.VOUT<1>               ; * JMK01

      USER=VIN<1>
      CLIENT.ID=VIN<2>
      BILL.ID=VIN<3>
      DATE=VIN<4>
      BILL.CNT=VIN<5>
      IF DATE='' THEN DATE=DATE()
      SEQ=FIELD(BILL.ID,'*',3)
      IF SEQ#0 THEN RETURN
      LI.CODES=''
      LI.CODES<1>=VIN<4>
      LI.CODES<2>=VIN<5>

      FORM = "T##########"
      DASH = "----------"
      EXPECT = ""
      NULL=""
      TOT.NUM.BILLS=0

      ERROR.CNT=0
10:   ERRORS=''
      GOSUB SETUP.SQL

      UPS.EBILL=0
      PRO=FIELD(BILL.ID,'*',2)
      UPS.FDATE=ICONV(PRO[8,2]:'/':PRO[10,2]:'/':PRO[12,2],'D')
      BEGIN CASE
         CASE CLIENT.ID='00244' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00841' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00857' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='00962' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01292' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='01310' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01352' AND UPS.FDATE < ICONV('02/02/08','D')
         CASE CLIENT.ID='01393' AND UPS.FDATE < ICONV('01/26/08','D')
         CASE CLIENT.ID='01640' AND UPS.FDATE < ICONV('03/24/08','D')
         CASE 1
            UPS.EBILL=(BILL.REC<53>="EBILL.IMPORT.NEW")
      END CASE
      IF UPS.EBILL THEN
         UPD.STATUS=0
      END
      CARRIER.ID=FIELD(BILL.ID,'*',1)
      PRO=FIELD(BILL.ID,'*',2)
      LPRO=LEN(PRO)
      BD=0
      AD=0
      IF PRO[LPRO-1,2]='BD' THEN BD=1
      IF PRO[LPRO-1,2]='AD' THEN AD=1
      IF BILL.REC<37>#'' THEN
         PROC.DT=BILL.REC<37>'D4/'
      END ELSE
         PROC.DT=''
      END

      SQL.FBSTATUS.ID=CLIENT.ID:'_':DATE:'_':BILL.CNT
*     WRITE BILL.ID ON F.SQL.STATUS,SQL.FBSTATUS.ID

      DATA CARRIER.ID,PRO,USER,'','AFSQV',''
      EXECUTE 'INET.FB.STATUS' CAPTURING FBS.RESULTS
*     DEL FBS.RESULTS<1>
      FOUND=0
      NATT=DCOUNT(FBS.RESULTS,@AM)
      FOR ATT=1 TO NATT UNTIL FOUND
         FBS.LINE=FBS.RESULTS<ATT>
         FBS.PRO=FBS.LINE<1,1>           ; * PRO
         FBS.BILL.AMT=FBS.LINE<1,2>      ; * Billed Amount
         FBS.PAID.AMT=FBS.LINE<1,3>      ; * Paid Amount
         FBS.PAY.DT=FBS.LINE<1,4>        ; * Check Date
         IF FBS.PAY.DT='' THEN
            FBS.PAID.AMT=''
         END
         FBS.STATUS=FBS.LINE<1,5>        ; * Status Details
         FBS.NOTE=FBS.LINE<1,6>          ; * Notes
         FBS.CBCODE=FBS.LINE<1,7>        ; * CUT BACK CODE
         FBS.CBDESC=FBS.LINE<1,8>        ; * CUT BACK DESC
         FBS.CBAMT=FBS.LINE<1,9>         ; * CUT BACK AMOUNT
         FBS.ENTRY.DATE=FBS.LINE<1,10>   ; * ENTRY DATE
         FBS.ENTRY.USER=FBS.LINE<1,11>   ; * ENTRY USER
         IF FBS.PRO=PRO THEN

            SQL.UNIQUEKEY=CLIENT.ID:CARRIER.ID:PRO:PROC.DT[7,4]:PROC.DT[1,2]:PROC.DT[4,2]
            SQL.FBS.BILL.AMT=FBS.BILL.AMT
            SQL.FBS.PAY.AMT=FBS.PAID.AMT
            SQL.FBS.PAY.DATE=FBS.PAY.DT
            SQL.FBS.STATUS=FBS.STATUS[1,1000]
            SQL.FBS.NOTE=FBS.NOTE[1,1000]
            SQL.FBS.PRONUM=FBS.PRO
            SQL.FBS.CUTBACK.CODE=FBS.CBCODE
            SQL.FBS.CUTBACK.DESC=FBS.CBDESC[1,100]
            SQL.FBS.CUTBACK.AMT=FBS.CBAMT
            SQL.FBS.ENTRY.DATE=FBS.ENTRY.DATE      ; * JMK02
            SQL.FBS.ENTRY.USER=FBS.ENTRY.USER      ; * JMK02

            SQL.FBSTATUS.REC=''
            SQL.FBSTATUS.REC< 1>=SQL.UNIQUEKEY
            SQL.FBSTATUS.REC< 2>=SQL.FBS.BILL.AMT
            SQL.FBSTATUS.REC< 3>=SQL.FBS.PAY.AMT
            SQL.FBSTATUS.REC< 4>=SQL.FBS.PAY.DATE
            SQL.FBSTATUS.REC< 5>=SQL.FBS.STATUS
            SQL.FBSTATUS.REC< 6>=SQL.FBS.NOTE
            SQL.FBSTATUS.REC< 7>=SQL.FBS.CUTBACK.CODE
            SQL.FBSTATUS.REC< 8>=SQL.FBS.CUTBACK.DESC
            SQL.FBSTATUS.REC< 9>=SQL.FBS.CUTBACK.AMT
            SQL.FBSTATUS.REC<10>=SQL.FBS.PRONUM
            SQL.FBSTATUS.REC<11>=SQL.FBS.ENTRY.DATE
            SQL.FBSTATUS.REC<12>=SQL.FBS.ENTRY.USER
            SQL.FBSTATUS.ID=CLIENT.ID:'_':DATE:'_':BILL.CNT
*           WRITE SQL.FBSTATUS.REC ON F.SQL.STATUS,SQL.FBSTATUS.ID

            FN = "SQLExecute"
            STATUS = SQLEXECUTE(UPDSHIPENV)
            STMTENV=UPDSHIPENV
            GOSUB CKSTMTENV
            FOUND=1

         END
      NEXT ATT
*     IF UPS.EBILL THEN GOTO THE.END     ; * JMK02


THE.END:***
*     END OF PROGRAM
*
* NOW JUST CLEAN UP THE ENVIRONMENT AND LEAVE
*
      FN = "SQLFreeStmt"
      STATUS = SQLFREESTMT(STMTENV, SQL.DROP)
      GOSUB CKSTMTENV

      FN = "SQLDisconnect"
      STATUS = SQLDISCONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeConnect"
      STATUS = SQLFREECONNECT(CONENV)
      GOSUB CKCONENV

      FN = "SQLFreeEnv"
      STATUS = SQLFREEENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to release ODBC environment"
      END

      IF ERRORS#'' THEN
         ERROR.CNT+=1
         IF ERROR.CNT>3 THEN
            MVIN=''
            MVIN<1> = 'nmeddaugh@afs.net'
            MVIN<4>='AFS_UPD.SQL.FBSTATUS.SUB'
            MVIN<5>='SQL Client Update Errors'
            TEXT='On ':DATE()'D2/':' ':OCONV(TIME(),'MTHS'):', ':USER:' updated '
            TEXT<1,-1>='Client ':CLIENT.ID:', Bill ':BILL.ID:', but did not succeed in updating SQL due to:'
            TEXT<1,-1>=' '
            TEXT<1,-1>=ERRORS
            MVIN<6>=TEXT
            MVIN<7>=1
            CALL SENDMAIL(MVIN,MVOUT)
         END ELSE
            GO 10
         END
      END

      RETURN

      STOP
*************************************************************************
SETUP.SQL:*
*************************************************************************
* CREATE AN ODBC ENVIRONMENT & A CONNECTION ENVIRONMENT. USE THE
* SSQLSETCONNECTOPTION TO SPECIFY THE OPERATING SYSTEM USER ID AND
* PASSWORD.

      STATUS = SQLALLOCENV(DBCENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate an ODBC environment"
         RETURN TO THE.END
      END

      STATUS = SQLALLOCCONNECT(DBCENV,CONENV)
      IF STATUS <> SQL.SUCCESS THEN
         ERRORS<1,-1>="Failed to allocate a CONNECT environment"
         RETURN TO THE.END
      END

*
* GATHER THE DATA SOURCE NAME, USERID AND PASSWORD FOR THE SERVER O/S AND
* INFORMATION FOR THE DBMS AT THE SERVER. THE DBMS INFO IS OFTEN ALSO
* A USER NAME AND PASSWORD, BUT NOT IN ALL CASES.
*
*     SQLSVR.INFO=OCONV('SQLSVR','TFB.TABLES;X;;1')          ; * JMK01
*     SOURCE=FIELD(SQLSVR.INFO<1>,' ',1)           ; * JMK01
*     UID=FIELD(SQLSVR.INFO<1>,' ',2)    ; * JMK01
*     PWD=FIELD(SQLSVR.INFO<1>,' ',3)    ; * JMK01
      BEGIN CASE                         ; * JMK01
         CASE SVR.NAME='AFS'             ; * JMK01
            SOURCE='PRODQV'              ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
         CASE 1                          ; * JMK01
            SOURCE='DEVQV'               ; * JMK01
            UID="uv_sql"                 ; * JMK01
            PWD="4@gAbreg"               ; * JMK01
      END CASE                           ; * JMK01
*
* ESTABLISH A SESSION TO THE SPECIFIED DATA SOURCE
*
*     PRINT "Connecting to data source: ": SOURCE
      FN = "SQLConnect"
      STATUS = SQLCONNECT(CONENV,SOURCE,UID,PWD)
      GOSUB CKCONENV

UPDATE.SQL.SHIPMENT:*
*
* NOW ALLOCATE AN SQL STATEMENT ENVIRONMENT
* TO BE USED FOR EXECUTING SQL STATEMENTS
*
      FN = "SQLAllocStmt"
      STATUS = SQLALLOCSTMT(CONENV,UPDSHIPENV)
      GOSUB CKCONENV

*
* NOTE THAT WE ARE USING PARAMETER MARKERS IN THE SQL STATEMENT TO FACILITATE
* LOADING MULTIPLE ROWS OF DATA EFFICIENTLY
*
      OPT.STR = STR(' ?,',12)
      OPT.STR = OPT.STR[2,LEN(OPT.STR)-2]
      INST1 = "{CALL PX_UpdFreightBillStatus (":OPT.STR:")}"           ; * 17 PLACEHOLDERS

      ROWNUM = 0
      FN = "SQLSetParam"
*
* DEFINE THE FIELD UPDATE PARAMETERS USING THE FOLLOWING FORMAT
*     STATUS = SQLSETPARAM(STMTENV, COL, SQL.B.BASIC, SQL.DATA.TYPE, PREC, SCALE, VAR.NAME) ; GOSUB CKSTMTENV
*
      STATUS = SQLSETPARAM(UPDSHIPENV, 1, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.UNIQUEKEY) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 2, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.BILL.AMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 3, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.PAY.AMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 4, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.PAY.DATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 5, SQL.B.BASIC, SQL.VARCHAR, 1000, 0, SQL.FBS.STATUS) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 6, SQL.B.BASIC, SQL.VARCHAR, 1000, 0, SQL.FBS.NOTE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 7, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.FBS.CUTBACK.CODE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 8, SQL.B.BASIC, SQL.VARCHAR, 100, 0, SQL.FBS.CUTBACK.DESC) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV, 9, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.CUTBACK.AMT) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV,10, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.FBS.PRONUM) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV,11, SQL.B.BASIC, SQL.VARCHAR, 10, 0, SQL.FBS.ENTRY.DATE) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV
      STATUS = SQLSETPARAM(UPDSHIPENV,12, SQL.B.BASIC, SQL.VARCHAR, 50, 0, SQL.FBS.ENTRY.USER) ; STMTENV=UPDSHIPENV ; GOSUB CKSTMTENV

      FN = "SQLPrepare"
      STATUS = SQLPREPARE(UPDSHIPENV, INST1)
      STMTENV=UPDSHIPENV
      ENVSRC='UPDSHIP'
      GOSUB CKSTMTENV
      RETURN
*************************************************************************
CKCONENV:
*************************************************************************

      COUNT = -1
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID CONNECTION HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBSTATUS.SUB INVALID CONNECTION HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END
      IF STATUS NE 0 THEN
201:     *
         ST = SQLERROR(-1,CONENV,-1,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 299
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = SQL.SUCCESS THEN GOTO 201
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKCONENV"
            RETURN TO THE.END
         END
      END
299:  *
      RETURN
*************************************************************************
CKSTMTENV:
*************************************************************************
      IF STATUS EQ -2 THEN
         ERRORS<1,-1>="INVALID STATEMENT HANDLE"
         STMT='BBSEND MIKE UPD.SQL.FBSTATUS.SUB INVALID STATEMENT HANDLE ABORT'
         EXECUTE STMT CAPTURING RESULTS
         ABORT
      END

      IF STATUS EQ 100 THEN RETURN
      IF STATUS NE 0 THEN
301:     *
         ST = SQLERROR(-1,-1,STMTENV,STATE,NATCODE,ERRTXT)
         IF ST <> SQL.NO.DATA.FOUND
         THEN
            COUNT = 1
            IF EXPECT NE 0 AND STATE = EXPECT AND ST <> SQL.NO.DATA.FOUND THEN
               ERRORS<1,-1>="Allowed error of ":STATE:" returned for func ":FN
               GOTO 399
            END ELSE
               ERRORS<1,-1>="Status for ":FN:" call is: ":STATUS
               ERRORS<1,-1>="SQLSTATE,NATCOD are:" : STATE:"  ":NATCODE
               ERRORS<1,-1>="Error text is"
               ERRORS<1,-1>="    " : ERRTXT
            END
            IF ST = 0 THEN GOTO 301
         END
         IF STATUS = -1 AND COUNT = 1 THEN
            ERRORS<1,-1>="EXITING CKSTMTENV"
            RETURN TO THE.END
         END
      END
399:  *
      RETURN
*************************************************************************
CHECK.SQL.WEIGHT:*
*************************************************************************
      LI.CODE.TYPE=''
      IF SQL.RATINGCODE='' THEN SQL.RATINGCODE='FRT'
      IF LI.CODES<1>#'' THEN
         LOCATE SQL.RATINGCODE IN LI.CODES<1> SETTING RPOS THEN
            LI.CODE.TYPE=LI.CODES<2,RPOS>
            IF LI.CODE.TYPE#'F' THEN
               SQL.WEIGHT=0
            END
         END
      END
      RETURN
