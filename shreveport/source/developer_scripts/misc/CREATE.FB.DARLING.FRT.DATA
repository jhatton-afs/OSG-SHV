      CRT @(0,0):@(-1):
      PROG.NAME='CREATE.FB.DARLING.FRT.DATA'
      CALL GET.USER(USER)
      CALL CHANNEL(CH.NUM)
      TODAY=DATE()
      FNAME='BILLDATA.':USER
      OPEN '',FNAME TO F.BILLDATA ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='FB.DARLING.FRT.DATA'
      OPEN '',FNAME TO F.DATA ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      OPEN 'DICT',FNAME TO D.DATA ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='CLIENTS'
      OPEN '',FNAME TO F.CLIENTS ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='SCAC.XREF'
      OPEN '',FNAME TO F.SCAC.XREF ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='ZIPS.CODES'
      OPEN '',FNAME TO F.ZIPS ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='CAN.ZIP.CODES'
      OPEN '',FNAME TO F.CAN.ZIPS ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='&SAVEDLISTS&'
      OPEN '',FNAME TO F.SL ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='FB.BILLS.CRX'
      OPEN '',FNAME TO F.CRX ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='AR.BRIDGE.LAST'
      OPEN '',FNAME TO F.BRIDGE ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      FNAME='FB.PRO.XREF'
      OPEN '',FNAME TO F.PRO.XREF ELSE
         CALL OPEN.ABORT(FNAME,PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         ERROR = "CANNOT OPEN FILE CARRIERS"
         GO 9000
      END
      OPEN '','FB.NFSC' TO F.NFSC ELSE
         ERROR = "CANNOT OPEN FILE FB.NFSC"
         GO 9000
      END
      OPEN '','PCIN' TO F.PCIN ELSE
         ERROR = "CANNOT OPEN FILE PCIN"
         GO 9000
      END
      OPEN '','PCOUT' TO F.PCOUT ELSE
         ERROR = "CANNOT OPEN FILE PCOUT"
         GO 9000
      END
      OPEN '','FB.TABLES' TO F.TABLES ELSE
         ERROR = "CANNOT OPEN FILE FB.TABLES"
         GO 9000
      END
      TB=CHAR(9)
*     CLEARFILE F.DATA
      MISS.ZIP=''
      READ IMPORT.REC FROM F.BILLDATA,'Darling_Shipment_File.xls' ELSE IMPORT.REC=''
      IMPORT.REC=CHANGE(IMPORT.REC,TB,@VM)
      IMPORT.REC<1,18>='Est. Amount'
      IMPORT.REC<1,19>='Est. Report Date'
      IMPORT.REC<1,20>='Act. Amount'
      IMPORT.REC<1,21>='Act. Report Date'
      IMPORT.REC<1,22>='Exceptions'
      EXPORT.INV.REC=IMPORT.REC<1>
      EXPORT.ACC.REC=IMPORT.REC<1>
      NATT=DCOUNT(IMPORT.REC,@AM)
      FOR ATT=1 TO NATT
         CALL PROG.BAR(22,ATT,NATT,PER)
         IMPORT.LINE=IMPORT.REC<ATT>
         IF ATT=1 THEN
            NVAL=DCOUNT(IMPORT.LINE,@VM)
         END ELSE
            SHIP_FROM=TRIM(IMPORT.LINE<1,1>)
            SHIPDATE=ICONV(TRIM(IMPORT.LINE<1,2>),'D')
            SHIP.YR=SHIPDATE'DY'
            BOL_NO=TRIM(IMPORT.LINE<1,3>)
            PRO_NO=TRIM(IMPORT.LINE<1,4>)
            CARRIER=TRIM(IMPORT.LINE<1,10>)
            XREF.REC=''
            SCAC=''
            CARRIER.ID=''
            CALL GET.ROOT.NUMBER(BOL_NO,BOL.BASE)
            XREF.ID='B*':SHIP.YR:'*':BOL.BASE
            READ XREF.REC FROM F.PRO.XREF,XREF.ID ELSE
               CALL GET.ROOT.NUMBER(PRO_NO,PRO.BASE)
               XREF.ID='P*':SHIP.YR:'*':PRO.BASE
               READ XREF.REC FROM F.PRO.XREF,XREF.ID ELSE XREF.REC=''
               FILE.SCAC=TRIM(IMPORT.LINE<1,17>)
               IF XREF.REC='' THEN
                  IF FILE.SCAC='FEDX' OR FILE.SCAC='FEDG' AND LEN(PRO.BASE)>12 THEN
                     PRO.BASE=PRO.BASE'R%12'
                     XREF.ID='P*':SHIP.YR:'*':PRO.BASE
                     READ XREF.REC FROM F.PRO.XREF,XREF.ID ELSE XREF.REC=''
                  END
               END
            END
            IF XREF.REC#'' THEN
               CARRIER.ID=FIELD(XREF.REC<1>,'*',1)
               READ CARRIER.REC FROM F.CARRIERS,CARRIER.ID ELSE CARRIER.REC=''
               SCAC=CARRIER.REC<12>
               PRO_NO=FIELD(XREF.REC<1>,'*',2)
            END
            SHIP_TO=TRIM(IMPORT.LINE<1,5>)
            ADDR_1=TRIM(IMPORT.LINE<1,6>)
            ADDR_2=TRIM(IMPORT.LINE<1,7>)
            ADDR_3=TRIM(IMPORT.LINE<1,8>)
            ZIP=CHANGE(TRIM(IMPORT.LINE<1,9>),' ','')
            ZIP.CITY=''
            ZIP.ST=''
            BEGIN CASE
               CASE LEN(ZIP) = 5
                  READ ZIP.REC FROM F.ZIPS, ZIP THEN
                     ZIP.CITY = ZIP.REC<1>
                     ZIP.ST = ZIP.REC<2>
                  END
               CASE LEN(ZIP) = 6 AND ZIP[6,1]='-'
                  READ ZIP.REC FROM F.ZIPS, ZIP[1,5] THEN
                     ZIP.CITY = ZIP.REC<1>
                     ZIP.ST = ZIP.REC<2>
                  END
               CASE LEN(ZIP) = 10
                  READ ZIP.REC FROM F.ZIPS, ZIP[1,5] THEN
                     ZIP.CITY = ZIP.REC<1>
                     ZIP.ST = ZIP.REC<2>
                  END
               CASE LEN(ZIP) = 6
                  READ ZIP.REC FROM F.CAN.ZIPS, ZIP THEN
                     ZIP.CITY = ZIP.REC<1>
                     ZIP.STATE = ZIP.REC<2>
                  END
               CASE LEN(ZIP) = 3
                  READ ZIP3.REC FROM F.ZIPS,'3.DIGIT' ELSE ZIP3.REC = ''
                  ZIP3.REC<1,-1>='CN'
                  ZIP3.REC<2,-1>='A0A'
                  ZIP3.REC<3,-1>='ZZZ'
                  NUM.VALS = DCOUNT(ZIP3.REC<1>,@VM)
                  FOR I = 1 TO NUM.VALS WHILE ZIP.ST = ''
                     IF ZIP => ZIP3.REC<2,I> & ZIP <= ZIP3.REC<3,I> THEN
                        ZIP.ST = ZIP3.REC<1,I>
                     END
                  NEXT I
               CASE 1
            END CASE
            IF ZIP.ST='' THEN
               LOCATE ZIP IN MISS.ZIP BY 'AL' SETTING ZPOS ELSE
                  INS ZIP BEFORE MISS.ZIP<ZPOS>
               END
            END
            CONDITION=TRIM(IMPORT.LINE<1,11>)
            WT_ALL_CLS=TRIM(IMPORT.LINE<1,12>)
            NO_BOXES=TRIM(IMPORT.LINE<1,13>)
            CLASS_CODE=TRIM(IMPORT.LINE<1,14>)
            CLASS_RATE=TRIM(IMPORT.LINE<1,15>)
            WT_FOR_CLASS=TRIM(IMPORT.LINE<1,16>)+0
            IF SCAC='' THEN
               SCAC=TRIM(IMPORT.LINE<1,17>)
               IF INDEX(CARRIER,'(RPS)',1) THEN
                  SCAC='FEDG'
               END
               IF CARRIER.ID='' THEN
                  READV CARRIER.ID FROM F.SCAC.XREF,SCAC,1 ELSE CARRIER.ID=''
               END
            END
            DATA.ID=BOL_NO
            DATA.REC=''
            READ DATA.REC FROM F.DATA,DATA.ID THEN
               DATA.ORG=DATA.REC
               NVAL1=DCOUNT(DATA.REC<27>,@VM)+1
               DATA.REC<27,NVAL1>=CLASS_RATE       ; * NMFC Assigned
               DATA.REC<28,NVAL1>=WT_FOR_CLASS     ; * Associated Weights for Classes
            END ELSE
               BEGIN CASE
                  CASE SHIP_FROM=1 ; CLIENT.ID='00850'
                  CASE SHIP_FROM=2 ; CLIENT.ID='01433'
                  CASE SHIP_FROM=3 ; CLIENT.ID='01270'
               END CASE
               READ CLIENT.REC FROM F.CLIENTS,CLIENT.ID ELSE CLIENT.REC=''
               NXT.INV.RATE.ATT=DCOUNT(EXPORT.INV.REC,@AM)+1
               NXT.ACC.RATE.ATT=DCOUNT(EXPORT.ACC.REC,@AM)+1
               DATA.REC=''
               DATA.ORG=DATA.REC
               DATA.REC<1>=CLIENT.REC<2>           ; * Shipper Name
               DATA.REC<2>=CLIENT.REC<3>           ; * Shipper Address Line 1
               DATA.REC<3>=''            ; * Shipper Address Line 2
               DATA.REC<4>=CLIENT.REC<4>           ; * Shipper City Name
               DATA.REC<5>=CLIENT.REC<5>           ; * Shipper State Postal Abbreviation
               DATA.REC<6>=''            ; * Shipper Country Postal Abbreviation
               DATA.REC<7>=CLIENT.REC<6>           ; * Shipper Postal Code
               DATA.REC<8>=SHIP_TO       ; * Consignee Name
               DATA.REC<9>=ADDR_1        ; * Consignee Address Line 1
               DATA.REC<10>=ADDR_2       ; * Consignee Address Line 2
               DATA.REC<11>=ZIP.CITY     ; * Consignee City Name
               DATA.REC<12>=ZIP.ST       ; * Consignee State Postal Abbreviation
               DATA.REC<13>=''           ; * Consignee Country Postal Abbreviation
               DATA.REC<14>=ZIP          ; * Consignee Postal Code
               DATA.REC<15>=SHIPDATE     ; * Date of Shipment
               DATA.REC<16>=WT_ALL_CLS   ; * Total weight of shipment as tendered
               DATA.REC<17>="O"          ; * Shipment Direction
               DATA.REC<18>=BOL_NO       ; * Shipper Number FOR Shipment
               DATA.REC<19>=''           ; * Customer Account Number
               DATA.REC<20>=''           ; * Shipper Referrence Number
               DATA.REC<21>=PRO_NO       ; * Carrier Pro Number for shipment
               DATA.REC<22>=SHIP_FROM    ; * Code for the responsible shipping location
               DATA.REC<23>=CONDITION    ; * Billing Status
               DATA.REC<24>=''           ; * Expense Code to apply to shipment
               DATA.REC<25>=''           ; * Expense Amount to apply to shipment
               DATA.REC<26>='A'          ; * Action to take when updating records
               DATA.REC<27>=CLASS_RATE   ; * NMFC Assigned
               DATA.REC<28>=WT_FOR_CLASS           ; * Associated Weights for Classes
               DATA.REC<29>=''           ; * Contract Price
               DATA.REC<30>=''           ; * Accessorial Codes
               DATA.REC<31>=''           ; * Associated Accesorial Charges
               DATA.REC<32>=''           ; * Accrued Cost
               DATA.REC<33>=CLIENT.ID    ; * AFS Client ID
               DATA.REC<34>=SCAC         ; * Carrier SCAC
               DATA.REC<35>=CARRIER.ID   ; * AFS Carrier ID
            END
SKIP.REC:   *
            IF DATA.REC#DATA.ORG THEN
               WRITE DATA.REC ON F.DATA,DATA.ID
            END
         END
      NEXT ATT
9000: *
      STOP
   END
