*********************************************************************
* Program name : FB.IMPORT.CUTBACKS
* Author       : James Barberousse
* Date written : April 30, 2002 
* Library      : FBBP
* COPYRIGHT (C) 2018 - AFS LOGISTICS LLC - ALL RIGHTS RESERVED.
*
*Import Cutback codes and associated data from a text file
*into FB.CUT.BACKS.CLIENT UPS EMAIL ADDRESS MAINTENANCE
*
* Last updated by afs (AFSLOGISTICS\gbino) at 06:41:27 on 04/24/2019.
*
* Start modification history
* 051408 - JMK01 - C081314 - Overcharge classification
* 012215 - DRF01 - SysAid 14856 Gave Ken access similar to Cynthia
* 031615 - DRF02 - SysAid 15959 Gave April the same access as Cynthia
* 042815 - SWB01 - SysAid 17019 Gave Melinda Jones access
* End modification history
*
************************************************************************
*     Format of Cutback Code Text file       Format of FB.CUT.BACKS
*     Tab-delimited with possible spaces     ITEM ID = Code
*     -----------------------------------------------------------------
*     (1) Client Name                        <1> Description
*     (2) Auditor's Comments                 <2> Client Number
*     (3) Code                               <3> Carrier Number
*     (4) Description                        <4> Auditor
*     (5) Auditor                            <5> Comments
*     (6) Client Number
*     (7) Carrier Number
*************************************************************************

* Initialize general variables
      PROMPT''
      TAB=CHAR(9)
      ESC=CHAR(27)
      CALL GET.USER.NEW(USER.NAME,CH.NUM)
     
      PROG.NAME='FB.IMPORT.CUTBACKS'
      PROG.DESC='Import Cut Back Codes From Text File'
      PACK.NAME='Freight Billing'
      MASK.CHAR='-'
       UPL.VIN = 'FBBP' ;  UPL.VIN<2> = 'FB.IMPORT.CUTBACKS' ; UPL.VOUT = ''      ;* NPR_UPL 04/23/2010
       UPL.VIN<3> = USER.NAME
       UPL.VIN<4> = CH.NUM
       CALL UPD.PROGRAM.LOG(UPL.VIN,UPL.VOUT)                                     ;* NPR_UPL 04/23/2010
    
      * Open Files
      OPEN '','CLIENTS' TO F.CLIENTS ELSE
         CALL OPEN.ABORT('CLIENTS',PROG.NAME)
      END
      OPEN '','CARRIERS' TO F.CARRIERS ELSE
         CALL OPEN.ABORT('CARRIERS',PROG.NAME)
      END
      OPEN '','BILLDATA.':USER.NAME TO F.BILLDATA ELSE
         CALL OPEN.ABORT('BILLDATA.':USER.NAME,PROG.NAME)
      END
      OPEN '','FB.CUT.BACKS' TO F.CUT.BACKS ELSE
         CALL OPEN.ABORT('FB.CUT.BACKS',PROG.NAME)
      END
      OPEN '','FB.CUT.BACKS.OLD' TO F.CUT.BACKS.OLD ELSE
         CALL OPEN.ABORT('FB.CUT.BACKS.OLD',PROG.NAME)
      END
      OPEN '','OPERATOR' TO F.OP ELSE 
      	CALL OPEN.ABORT("OPERATOR",PROG.NAME)      ; * GRB01
     END
* Write screen header
      CALL AFS.SCR.HEAD(CO.ID,FILE.ID,'',PROG.NAME,PROG.DESC,PACK.NAME,CO.NAME,TIME.DATE,1)
      CRT @(0,2):STR('=',79)

* Restrict program usage
      VALID.USER=1
      READV OP.FLG FROM F.OP,USER.NAME,65 ELSE
         OP.FLG = "N"
      END
      IF OP.FLG = "Y" THEN
   
      END ELSE
     
         TEMP='**  This is a restricted access application  **'
         CALL CENTER(TEMP,80)
         CRT @(0,12):TEMP
         GOTO THE.END
      END

* Remind/Ask the user about the file being saved and ready to go
      CRT @(8,6):'Have you already saved your CUTBACK CODE file to the directory'
      CRT @(8,7):'named U:\':USER.NAME:' as a tab delimited text (.TXT) file?'
      CRT @(8,9):'Answer :'

ASK.ABOUT.FILE:***
      MASK=STR(MASK.CHAR,2)
      HELP='Entry Options: [Y]es [N]o [EX]it'
      CALL GEN.IN(17,9,MASK,'',Q,0,2,'','',2,17,9,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'
            GOTO THE.END
         CASE QI='N'
            CALL ELINE('Please save your file in U:\':USER.NAME:' before running this program.')
            GOTO THE.END
         CASE QI='Y'
            NULL
         CASE 1
            GOTO ASK.ABOUT.FILE
      END CASE

* Initialize program variables
      FILENAME=''
      CUTBACK.IMPORT=''
      CUTBACK.EXPORT=''
      DUPLICATES=''
      DUPLICATES.FILENAME='DUPLICATE CODES ':DATE()'D4-':'.TXT'
      BLANK.DESCRIPTIONS=''
      BLANK.DESCRIPTIONS.FILENAME='BLANK DESCRIPTIONS ':DATE()'D4-':'.TXT'
      NON.NUMERICS=''
      NON.NUMERICS.FILENAME='NON-NUMERIC CODES ':DATE()'D4-':'.TXT'

* Enter name of file to import
ENTER.FILENAME:***
      CRT @(0,3):@(-3)
      MASK=FILENAME:STR(MASK.CHAR,35-LEN(FILENAME))
      HELP='Enter name of cutback code text file located in U:\':USER.NAME:'. [EX]it'
      CALL GEN.IN(8,6,'File Name : ':MASK,'',Q,0,35,'','',2,20,6,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      IF QI='' THEN QI=FILENAME
      BEGIN CASE
         CASE QI='EX'
            GOTO THE.END
         CASE QI=''
            GOTO ENTER.FILENAME
      END CASE
      FILENAME=QI
      READ CUTBACK.IMPORT FROM F.BILLDATA,FILENAME ELSE
         CALL ELINE('This file does not exist.')
         GOTO ENTER.FILENAME
      END

* Show a few lines to confirm this is the correct file
      CRT @(0,3):@(-3)
      FOR X=1 TO 16
         LINE=CUTBACK.IMPORT<X>[1,79]
         CRT @(0,X+2):LINE
      NEXT X

CONFIRM:***
      MASK=STR(MASK.CHAR,2)
      HELP='Entry Options: [Y]es [N]o [X]=Back [EX]it'
      CALL GEN.IN(0,21,'Is this the beginning of your file? ':MASK,'',Q,0,2,'','',2,-2,21,0,QI,HELP,0,23)
      QI=OCONV(QI,'MCU')
      BEGIN CASE
         CASE QI='EX'
            GOTO THE.END
         CASE QI='X' OR QI='N'
            GOTO ENTER.FILENAME
         CASE QI='Y'
            NULL
         CASE 1
            GOTO CONFIRM
      END CASE

      CRT @(0,3):@(-3)
      CRT @(0, 5):'Processing...'
      CRT @(0, 9):'Code        :'
      CRT @(0,11):'Description :'

* Backup existing FB.CUT.BACKS file to FB.CUT.BACKS.OLD
      CLEARFILE F.CUT.BACKS.OLD
      STMT='SSELECT FB.CUT.BACKS'
      EXECUTE STMT CAPTURING OUTPUT
      DONE=0
      LOOP
         READNEXT ITEM.ID ELSE DONE=1
      UNTIL DONE=1
         READ CUTBACK.ITEM FROM F.CUT.BACKS,ITEM.ID ELSE NULL
         WRITE CUTBACK.ITEM ON F.CUT.BACKS.OLD,ITEM.ID
      REPEAT
      CLEARFILE F.CUT.BACKS

* Prepare the import file for processing
      CUTBACK.IMPORT=CHANGE(CUTBACK.IMPORT,TAB,@VM)
      DEL CUTBACK.IMPORT<1>; * Get rid of titles
      NUM.ATTRIBUTES=DCOUNT(CUTBACK.IMPORT,@AM)
      FOR X=1 TO NUM.ATTRIBUTES
         NUM.VALUES=DCOUNT(CUTBACK.IMPORT<X>,@VM)
         FOR Y=1 TO NUM.VALUES
            CUTBACK.IMPORT<X,Y>=TRIM(CUTBACK.IMPORT<X,Y>)
         NEXT Y
      NEXT X

* Process import file and build export file
      LOOP WHILE CUTBACK.IMPORT#''
         CLIENT.NAME=TRIM(CUTBACK.IMPORT<1,1>)     ; * Thrown away
         COMMENTS   =TRIM(CUTBACK.IMPORT<1,2>)     ; * Used as attribute 5
         CODE       =TRIM(CUTBACK.IMPORT<1,3>)     ; * Used as Item ID
         DESCRIPTION=TRIM(CUTBACK.IMPORT<1,4>)     ; * Used as attribute 1
         AUDITOR    =TRIM(CUTBACK.IMPORT<1,5>)     ; * Used as attribute 4
         CLIENT.NUM =TRIM(CUTBACK.IMPORT<1,6>)     ; * Parent of this client used as attribute 2
         CARRIER.NUM=TRIM(CUTBACK.IMPORT<1,7>)     ; * Used as attribute 3
         OVRCHG.CODE=TRIM(CUTBACK.IMPORT<1,8>)     ; * Used as attribute 6 ; * JMK01

         * Check client and carrier numbers against files         
         READ CLIENT.REC FROM F.CLIENTS,CLIENT.NUM THEN
            CLIENT.NUM=CLIENT.REC<147>; * Use parent client
         END ELSE
            IF CLIENT.NUM#'' THEN
               CALL ELINE('An invalid client number of ':CLIENT.NUM:' was found - using null.')
               CLIENT.NUM=''
            END
         END
         READ CARRIER.REC FROM F.CARRIERS,CARRIER.NUM ELSE
            IF CARRIER.NUM#'' THEN
               CALL ELINE('An invalid carrier number of ':CARRIER.NUM:' was found - using null.')
               CARRIER.NUM=''
            END
         END

         CRT @(14, 9):CODE:@(-4)
         CRT @(14,11):DESCRIPTION:@(-3)

         IF CODE#'' AND NUM(CODE) THEN
            ITEM.ID=CODE'R%4'
            READ CUTBACK.ITEM FROM F.CUT.BACKS,ITEM.ID THEN
               * CRT @(0,22):'A duplicate code of [':ITEM.ID:'] was found - skipping.':@(-4)
               DUPLICATES<-1>=CODE:@VM:DESCRIPTION
            END ELSE
               IF DESCRIPTION#'' THEN
                  CUTBACK.EXPORT=''
                  CUTBACK.EXPORT<1>=DESCRIPTION
                  CUTBACK.EXPORT<2>=CLIENT.NUM
                  CUTBACK.EXPORT<3>=CARRIER.NUM
                  CUTBACK.EXPORT<4>=AUDITOR
                  CUTBACK.EXPORT<5>=COMMENTS
                  CUTBACK.EXPORT<6>=OCONV(OVRCHG.CODE,'MCU') ; * JMK01
                  WRITE CUTBACK.EXPORT ON F.CUT.BACKS,ITEM.ID
               END ELSE
                  * CRT @(0,22):'A blank description for item ':ITEM.ID:' was found - skipping.':@(-4)
                  BLANK.DESCRIPTIONS<-1>=CODE
               END
            END
         END ELSE
            * CRT @(0,22):'A blank or non-numeric code of [':CODE:'] was found - skipping.':@(-4)
            NON.NUMERICS<-1>=CODE:@VM:DESCRIPTION
         END
         DEL CUTBACK.IMPORT<1>
      REPEAT
      CRT @(0,5):'Processing...Done':@(-3)

      IF DUPLICATES#'' THEN
         DUPLICATES=CHANGE(DUPLICATES,@VM,TAB)
         WRITE DUPLICATES ON F.BILLDATA,DUPLICATES.FILENAME
         CRT @(0,9):'Duplicate codes written to file : ':DUPLICATES.FILENAME
      END

      IF BLANK.DESCRIPTIONS#'' THEN
         BLANK.DESCRIPTIONS=CHANGE(BLANK.DESCRIPTIONS,@VM,TAB)
         WRITE BLANK.DESCRIPTIONS ON F.BILLDATA,BLANK.DESCRIPTIONS.FILENAME
         CRT @(0,11):'Blank descriptions written to file : ':BLANK.DESCRIPTIONS.FILENAME
      END

      IF NON.NUMERICS#'' THEN
         NON.NUMERICS=CHANGE(NON.NUMERICS,@VM,TAB)
         WRITE NON.NUMERICS ON F.BILLDATA,NON.NUMERICS.FILENAME
         CRT @(0,13):'Non-numeric codes written to file : ':NON.NUMERICS.FILENAME
      END
      CALL ELINE(''); * To hold the screen for viewing
    
*************************************************************************

THE.END:***
      CRT @(0,23):
      END
